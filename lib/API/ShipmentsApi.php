<?php
/**
 * ShipmentsApi
 * PHP version 5
 *
 * @category Class
 * @package  Jiwa
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * JiwaAPI
 *
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: 1.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 * Swagger Codegen version: 2.4.28-SNAPSHOT
 */

/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Jiwa\JiwaAPI;

use GuzzleHttp\Client;
use GuzzleHttp\ClientInterface;
use GuzzleHttp\Exception\RequestException;
use GuzzleHttp\Psr7\MultipartStream;
use GuzzleHttp\Psr7\Request;
use GuzzleHttp\RequestOptions;
use Jiwa\ApiException;
use Jiwa\Configuration;
use Jiwa\HeaderSelector;
use Jiwa\ObjectSerializer;

/**
 * ShipmentsApi Class Doc Comment
 *
 * @category Class
 * @package  Jiwa
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class ShipmentsApi
{
    /**
     * @var ClientInterface
     */
    protected $client;

    /**
     * @var Configuration
     */
    protected $config;

    /**
     * @var HeaderSelector
     */
    protected $headerSelector;

    /**
     * @param ClientInterface $client
     * @param Configuration   $config
     * @param HeaderSelector  $selector
     */
    public function __construct(
        ClientInterface $client = null,
        Configuration $config = null,
        HeaderSelector $selector = null
    ) {
        $this->client = $client ?: new Client();
        $this->config = $config ?: new Configuration();
        $this->headerSelector = $selector ?: new HeaderSelector();
    }

    /**
     * @return Configuration
     */
    public function getConfig()
    {
        return $this->config;
    }

    /**
     * Operation landedCostShipmentABANDONRequestAbandonDelete
     *
     * Abandons a stateful shipment.
     *
     * @param  string $accept Accept Header (required)
     * @param  bool $jiwa_stateful Stateful indicator (optional)
     * @param  string $shipment_id shipment_id (optional)
     *
     * @throws \Jiwa\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Jiwa\JiwaModel\Object
     */
    public function landedCostShipmentABANDONRequestAbandonDelete($accept, $jiwa_stateful = null, $shipment_id = null)
    {
        list($response) = $this->landedCostShipmentABANDONRequestAbandonDeleteWithHttpInfo($accept, $jiwa_stateful, $shipment_id);
        return $response;
    }

    /**
     * Operation landedCostShipmentABANDONRequestAbandonDeleteWithHttpInfo
     *
     * Abandons a stateful shipment.
     *
     * @param  string $accept Accept Header (required)
     * @param  bool $jiwa_stateful Stateful indicator (optional)
     * @param  string $shipment_id (optional)
     *
     * @throws \Jiwa\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Jiwa\JiwaModel\Object, HTTP status code, HTTP response headers (array of strings)
     */
    public function landedCostShipmentABANDONRequestAbandonDeleteWithHttpInfo($accept, $jiwa_stateful = null, $shipment_id = null)
    {
        $returnType = '\Jiwa\JiwaModel\Object';
        $request = $this->landedCostShipmentABANDONRequestAbandonDeleteRequest($accept, $jiwa_stateful, $shipment_id);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Jiwa\JiwaModel\Object',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 403:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Jiwa\JiwaModel\Object',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 404:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Jiwa\JiwaModel\Object',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 401:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Jiwa\JiwaModel\Object',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation landedCostShipmentABANDONRequestAbandonDeleteAsync
     *
     * Abandons a stateful shipment.
     *
     * @param  string $accept Accept Header (required)
     * @param  bool $jiwa_stateful Stateful indicator (optional)
     * @param  string $shipment_id (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function landedCostShipmentABANDONRequestAbandonDeleteAsync($accept, $jiwa_stateful = null, $shipment_id = null)
    {
        return $this->landedCostShipmentABANDONRequestAbandonDeleteAsyncWithHttpInfo($accept, $jiwa_stateful, $shipment_id)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation landedCostShipmentABANDONRequestAbandonDeleteAsyncWithHttpInfo
     *
     * Abandons a stateful shipment.
     *
     * @param  string $accept Accept Header (required)
     * @param  bool $jiwa_stateful Stateful indicator (optional)
     * @param  string $shipment_id (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function landedCostShipmentABANDONRequestAbandonDeleteAsyncWithHttpInfo($accept, $jiwa_stateful = null, $shipment_id = null)
    {
        $returnType = '\Jiwa\JiwaModel\Object';
        $request = $this->landedCostShipmentABANDONRequestAbandonDeleteRequest($accept, $jiwa_stateful, $shipment_id);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'landedCostShipmentABANDONRequestAbandonDelete'
     *
     * @param  string $accept Accept Header (required)
     * @param  bool $jiwa_stateful Stateful indicator (optional)
     * @param  string $shipment_id (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function landedCostShipmentABANDONRequestAbandonDeleteRequest($accept, $jiwa_stateful = null, $shipment_id = null)
    {
        // verify the required parameter 'accept' is set
        if ($accept === null || (is_array($accept) && count($accept) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $accept when calling landedCostShipmentABANDONRequestAbandonDelete'
            );
        }

        $resourcePath = '/Shipments/Abandon';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        if ($shipment_id !== null) {
            $queryParams['ShipmentID'] = ObjectSerializer::toQueryValue($shipment_id);
        }
        // header params
        if ($accept !== null) {
            $headerParams['Accept'] = ObjectSerializer::toHeaderValue($accept);
        }
        // header params
        if ($jiwa_stateful !== null) {
            $headerParams['jiwa-stateful'] = ObjectSerializer::toHeaderValue($jiwa_stateful);
        }


        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json', 'application/xml']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json', 'application/xml'],
                ['application/x-www-form-urlencoded', 'application/json', 'application/xml']
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            
            if($headers['Content-Type'] === 'application/json') {
                // \stdClass has no __toString(), so we should encode it manually
                if ($httpBody instanceof \stdClass) {
                    $httpBody = \GuzzleHttp\json_encode($httpBody);
                }
                // array has no __toString(), so we should encode it manually
                if(is_array($httpBody)) {
                    $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($httpBody));
                }
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\Query::build($formParams);
            }
        }

        // this endpoint requires HTTP basic authentication
        if ($this->config->getUsername() !== null || $this->config->getPassword() !== null) {
            $headers['Authorization'] = 'Basic ' . base64_encode($this->config->getUsername() . ":" . $this->config->getPassword());
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\Query::build($queryParams);
        return new Request(
            'DELETE',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation landedCostShipmentACTIVATERequestActivateShipmentIDPost
     *
     * Activates a shipment.
     *
     * @param  string $accept Accept Header (required)
     * @param  string $shipment_id shipment_id (required)
     * @param  bool $jiwa_stateful Stateful indicator (optional)
     * @param  \Jiwa\JiwaModel\LandedCostShipmentACTIVATERequest $body body (optional)
     *
     * @throws \Jiwa\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Jiwa\JiwaModel\Shipment
     */
    public function landedCostShipmentACTIVATERequestActivateShipmentIDPost($accept, $shipment_id, $jiwa_stateful = null, $body = null)
    {
        list($response) = $this->landedCostShipmentACTIVATERequestActivateShipmentIDPostWithHttpInfo($accept, $shipment_id, $jiwa_stateful, $body);
        return $response;
    }

    /**
     * Operation landedCostShipmentACTIVATERequestActivateShipmentIDPostWithHttpInfo
     *
     * Activates a shipment.
     *
     * @param  string $accept Accept Header (required)
     * @param  string $shipment_id (required)
     * @param  bool $jiwa_stateful Stateful indicator (optional)
     * @param  \Jiwa\JiwaModel\LandedCostShipmentACTIVATERequest $body (optional)
     *
     * @throws \Jiwa\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Jiwa\JiwaModel\Shipment, HTTP status code, HTTP response headers (array of strings)
     */
    public function landedCostShipmentACTIVATERequestActivateShipmentIDPostWithHttpInfo($accept, $shipment_id, $jiwa_stateful = null, $body = null)
    {
        $returnType = '\Jiwa\JiwaModel\Shipment';
        $request = $this->landedCostShipmentACTIVATERequestActivateShipmentIDPostRequest($accept, $shipment_id, $jiwa_stateful, $body);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Jiwa\JiwaModel\Shipment',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 401:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Jiwa\JiwaModel\Shipment',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 403:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Jiwa\JiwaModel\Shipment',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 204:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Jiwa\JiwaModel\Shipment',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 404:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Jiwa\JiwaModel\Shipment',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation landedCostShipmentACTIVATERequestActivateShipmentIDPostAsync
     *
     * Activates a shipment.
     *
     * @param  string $accept Accept Header (required)
     * @param  string $shipment_id (required)
     * @param  bool $jiwa_stateful Stateful indicator (optional)
     * @param  \Jiwa\JiwaModel\LandedCostShipmentACTIVATERequest $body (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function landedCostShipmentACTIVATERequestActivateShipmentIDPostAsync($accept, $shipment_id, $jiwa_stateful = null, $body = null)
    {
        return $this->landedCostShipmentACTIVATERequestActivateShipmentIDPostAsyncWithHttpInfo($accept, $shipment_id, $jiwa_stateful, $body)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation landedCostShipmentACTIVATERequestActivateShipmentIDPostAsyncWithHttpInfo
     *
     * Activates a shipment.
     *
     * @param  string $accept Accept Header (required)
     * @param  string $shipment_id (required)
     * @param  bool $jiwa_stateful Stateful indicator (optional)
     * @param  \Jiwa\JiwaModel\LandedCostShipmentACTIVATERequest $body (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function landedCostShipmentACTIVATERequestActivateShipmentIDPostAsyncWithHttpInfo($accept, $shipment_id, $jiwa_stateful = null, $body = null)
    {
        $returnType = '\Jiwa\JiwaModel\Shipment';
        $request = $this->landedCostShipmentACTIVATERequestActivateShipmentIDPostRequest($accept, $shipment_id, $jiwa_stateful, $body);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'landedCostShipmentACTIVATERequestActivateShipmentIDPost'
     *
     * @param  string $accept Accept Header (required)
     * @param  string $shipment_id (required)
     * @param  bool $jiwa_stateful Stateful indicator (optional)
     * @param  \Jiwa\JiwaModel\LandedCostShipmentACTIVATERequest $body (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function landedCostShipmentACTIVATERequestActivateShipmentIDPostRequest($accept, $shipment_id, $jiwa_stateful = null, $body = null)
    {
        // verify the required parameter 'accept' is set
        if ($accept === null || (is_array($accept) && count($accept) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $accept when calling landedCostShipmentACTIVATERequestActivateShipmentIDPost'
            );
        }
        // verify the required parameter 'shipment_id' is set
        if ($shipment_id === null || (is_array($shipment_id) && count($shipment_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $shipment_id when calling landedCostShipmentACTIVATERequestActivateShipmentIDPost'
            );
        }

        $resourcePath = '/Shipments/Activate/{ShipmentID}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // header params
        if ($accept !== null) {
            $headerParams['Accept'] = ObjectSerializer::toHeaderValue($accept);
        }
        // header params
        if ($jiwa_stateful !== null) {
            $headerParams['jiwa-stateful'] = ObjectSerializer::toHeaderValue($jiwa_stateful);
        }

        // path params
        if ($shipment_id !== null) {
            $resourcePath = str_replace(
                '{' . 'ShipmentID' . '}',
                ObjectSerializer::toPathValue($shipment_id),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;
        if (isset($body)) {
            $_tempBody = $body;
        }

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json', 'application/xml']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json', 'application/xml'],
                ['application/x-www-form-urlencoded', 'application/json', 'application/xml']
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            
            if($headers['Content-Type'] === 'application/json') {
                // \stdClass has no __toString(), so we should encode it manually
                if ($httpBody instanceof \stdClass) {
                    $httpBody = \GuzzleHttp\json_encode($httpBody);
                }
                // array has no __toString(), so we should encode it manually
                if(is_array($httpBody)) {
                    $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($httpBody));
                }
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\Query::build($formParams);
            }
        }

        // this endpoint requires HTTP basic authentication
        if ($this->config->getUsername() !== null || $this->config->getPassword() !== null) {
            $headers['Authorization'] = 'Basic ' . base64_encode($this->config->getUsername() . ":" . $this->config->getPassword());
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\Query::build($queryParams);
        return new Request(
            'POST',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation landedCostShipmentCREATEFromPORequestFromPurchaseOrdersOrderNosPost
     *
     * Creates a shipment from the supplied purchase orders.
     *
     * @param  string $accept Accept Header (required)
     * @param  string $order_nos order_nos (required)
     * @param  bool $jiwa_stateful Stateful indicator (optional)
     * @param  \Jiwa\JiwaModel\LandedCostShipmentCREATEFromPORequest $body body (optional)
     *
     * @throws \Jiwa\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Jiwa\JiwaModel\Shipment
     */
    public function landedCostShipmentCREATEFromPORequestFromPurchaseOrdersOrderNosPost($accept, $order_nos, $jiwa_stateful = null, $body = null)
    {
        list($response) = $this->landedCostShipmentCREATEFromPORequestFromPurchaseOrdersOrderNosPostWithHttpInfo($accept, $order_nos, $jiwa_stateful, $body);
        return $response;
    }

    /**
     * Operation landedCostShipmentCREATEFromPORequestFromPurchaseOrdersOrderNosPostWithHttpInfo
     *
     * Creates a shipment from the supplied purchase orders.
     *
     * @param  string $accept Accept Header (required)
     * @param  string $order_nos (required)
     * @param  bool $jiwa_stateful Stateful indicator (optional)
     * @param  \Jiwa\JiwaModel\LandedCostShipmentCREATEFromPORequest $body (optional)
     *
     * @throws \Jiwa\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Jiwa\JiwaModel\Shipment, HTTP status code, HTTP response headers (array of strings)
     */
    public function landedCostShipmentCREATEFromPORequestFromPurchaseOrdersOrderNosPostWithHttpInfo($accept, $order_nos, $jiwa_stateful = null, $body = null)
    {
        $returnType = '\Jiwa\JiwaModel\Shipment';
        $request = $this->landedCostShipmentCREATEFromPORequestFromPurchaseOrdersOrderNosPostRequest($accept, $order_nos, $jiwa_stateful, $body);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Jiwa\JiwaModel\Shipment',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 401:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Jiwa\JiwaModel\Shipment',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 403:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Jiwa\JiwaModel\Shipment',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 404:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Jiwa\JiwaModel\Shipment',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 201:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Jiwa\JiwaModel\Shipment',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation landedCostShipmentCREATEFromPORequestFromPurchaseOrdersOrderNosPostAsync
     *
     * Creates a shipment from the supplied purchase orders.
     *
     * @param  string $accept Accept Header (required)
     * @param  string $order_nos (required)
     * @param  bool $jiwa_stateful Stateful indicator (optional)
     * @param  \Jiwa\JiwaModel\LandedCostShipmentCREATEFromPORequest $body (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function landedCostShipmentCREATEFromPORequestFromPurchaseOrdersOrderNosPostAsync($accept, $order_nos, $jiwa_stateful = null, $body = null)
    {
        return $this->landedCostShipmentCREATEFromPORequestFromPurchaseOrdersOrderNosPostAsyncWithHttpInfo($accept, $order_nos, $jiwa_stateful, $body)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation landedCostShipmentCREATEFromPORequestFromPurchaseOrdersOrderNosPostAsyncWithHttpInfo
     *
     * Creates a shipment from the supplied purchase orders.
     *
     * @param  string $accept Accept Header (required)
     * @param  string $order_nos (required)
     * @param  bool $jiwa_stateful Stateful indicator (optional)
     * @param  \Jiwa\JiwaModel\LandedCostShipmentCREATEFromPORequest $body (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function landedCostShipmentCREATEFromPORequestFromPurchaseOrdersOrderNosPostAsyncWithHttpInfo($accept, $order_nos, $jiwa_stateful = null, $body = null)
    {
        $returnType = '\Jiwa\JiwaModel\Shipment';
        $request = $this->landedCostShipmentCREATEFromPORequestFromPurchaseOrdersOrderNosPostRequest($accept, $order_nos, $jiwa_stateful, $body);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'landedCostShipmentCREATEFromPORequestFromPurchaseOrdersOrderNosPost'
     *
     * @param  string $accept Accept Header (required)
     * @param  string $order_nos (required)
     * @param  bool $jiwa_stateful Stateful indicator (optional)
     * @param  \Jiwa\JiwaModel\LandedCostShipmentCREATEFromPORequest $body (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function landedCostShipmentCREATEFromPORequestFromPurchaseOrdersOrderNosPostRequest($accept, $order_nos, $jiwa_stateful = null, $body = null)
    {
        // verify the required parameter 'accept' is set
        if ($accept === null || (is_array($accept) && count($accept) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $accept when calling landedCostShipmentCREATEFromPORequestFromPurchaseOrdersOrderNosPost'
            );
        }
        // verify the required parameter 'order_nos' is set
        if ($order_nos === null || (is_array($order_nos) && count($order_nos) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $order_nos when calling landedCostShipmentCREATEFromPORequestFromPurchaseOrdersOrderNosPost'
            );
        }

        $resourcePath = '/Shipments/FromPurchaseOrders/{OrderNos}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // header params
        if ($accept !== null) {
            $headerParams['Accept'] = ObjectSerializer::toHeaderValue($accept);
        }
        // header params
        if ($jiwa_stateful !== null) {
            $headerParams['jiwa-stateful'] = ObjectSerializer::toHeaderValue($jiwa_stateful);
        }

        // path params
        if ($order_nos !== null) {
            $resourcePath = str_replace(
                '{' . 'OrderNos' . '}',
                ObjectSerializer::toPathValue($order_nos),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;
        if (isset($body)) {
            $_tempBody = $body;
        }

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json', 'application/xml']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json', 'application/xml'],
                ['application/x-www-form-urlencoded', 'application/json', 'application/xml']
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            
            if($headers['Content-Type'] === 'application/json') {
                // \stdClass has no __toString(), so we should encode it manually
                if ($httpBody instanceof \stdClass) {
                    $httpBody = \GuzzleHttp\json_encode($httpBody);
                }
                // array has no __toString(), so we should encode it manually
                if(is_array($httpBody)) {
                    $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($httpBody));
                }
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\Query::build($formParams);
            }
        }

        // this endpoint requires HTTP basic authentication
        if ($this->config->getUsername() !== null || $this->config->getPassword() !== null) {
            $headers['Authorization'] = 'Basic ' . base64_encode($this->config->getUsername() . ":" . $this->config->getPassword());
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\Query::build($queryParams);
        return new Request(
            'POST',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation landedCostShipmentDELETERequestShipmentIDDelete
     *
     * Deletes a shipment.
     *
     * @param  string $accept Accept Header (required)
     * @param  string $shipment_id shipment_id (required)
     * @param  bool $jiwa_stateful Stateful indicator (optional)
     *
     * @throws \Jiwa\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Jiwa\JiwaModel\Object
     */
    public function landedCostShipmentDELETERequestShipmentIDDelete($accept, $shipment_id, $jiwa_stateful = null)
    {
        list($response) = $this->landedCostShipmentDELETERequestShipmentIDDeleteWithHttpInfo($accept, $shipment_id, $jiwa_stateful);
        return $response;
    }

    /**
     * Operation landedCostShipmentDELETERequestShipmentIDDeleteWithHttpInfo
     *
     * Deletes a shipment.
     *
     * @param  string $accept Accept Header (required)
     * @param  string $shipment_id (required)
     * @param  bool $jiwa_stateful Stateful indicator (optional)
     *
     * @throws \Jiwa\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Jiwa\JiwaModel\Object, HTTP status code, HTTP response headers (array of strings)
     */
    public function landedCostShipmentDELETERequestShipmentIDDeleteWithHttpInfo($accept, $shipment_id, $jiwa_stateful = null)
    {
        $returnType = '\Jiwa\JiwaModel\Object';
        $request = $this->landedCostShipmentDELETERequestShipmentIDDeleteRequest($accept, $shipment_id, $jiwa_stateful);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Jiwa\JiwaModel\Object',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 403:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Jiwa\JiwaModel\Object',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 404:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Jiwa\JiwaModel\Object',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 204:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Jiwa\JiwaModel\Object',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 401:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Jiwa\JiwaModel\Object',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation landedCostShipmentDELETERequestShipmentIDDeleteAsync
     *
     * Deletes a shipment.
     *
     * @param  string $accept Accept Header (required)
     * @param  string $shipment_id (required)
     * @param  bool $jiwa_stateful Stateful indicator (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function landedCostShipmentDELETERequestShipmentIDDeleteAsync($accept, $shipment_id, $jiwa_stateful = null)
    {
        return $this->landedCostShipmentDELETERequestShipmentIDDeleteAsyncWithHttpInfo($accept, $shipment_id, $jiwa_stateful)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation landedCostShipmentDELETERequestShipmentIDDeleteAsyncWithHttpInfo
     *
     * Deletes a shipment.
     *
     * @param  string $accept Accept Header (required)
     * @param  string $shipment_id (required)
     * @param  bool $jiwa_stateful Stateful indicator (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function landedCostShipmentDELETERequestShipmentIDDeleteAsyncWithHttpInfo($accept, $shipment_id, $jiwa_stateful = null)
    {
        $returnType = '\Jiwa\JiwaModel\Object';
        $request = $this->landedCostShipmentDELETERequestShipmentIDDeleteRequest($accept, $shipment_id, $jiwa_stateful);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'landedCostShipmentDELETERequestShipmentIDDelete'
     *
     * @param  string $accept Accept Header (required)
     * @param  string $shipment_id (required)
     * @param  bool $jiwa_stateful Stateful indicator (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function landedCostShipmentDELETERequestShipmentIDDeleteRequest($accept, $shipment_id, $jiwa_stateful = null)
    {
        // verify the required parameter 'accept' is set
        if ($accept === null || (is_array($accept) && count($accept) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $accept when calling landedCostShipmentDELETERequestShipmentIDDelete'
            );
        }
        // verify the required parameter 'shipment_id' is set
        if ($shipment_id === null || (is_array($shipment_id) && count($shipment_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $shipment_id when calling landedCostShipmentDELETERequestShipmentIDDelete'
            );
        }

        $resourcePath = '/Shipments/{ShipmentID}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // header params
        if ($accept !== null) {
            $headerParams['Accept'] = ObjectSerializer::toHeaderValue($accept);
        }
        // header params
        if ($jiwa_stateful !== null) {
            $headerParams['jiwa-stateful'] = ObjectSerializer::toHeaderValue($jiwa_stateful);
        }

        // path params
        if ($shipment_id !== null) {
            $resourcePath = str_replace(
                '{' . 'ShipmentID' . '}',
                ObjectSerializer::toPathValue($shipment_id),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json', 'application/xml']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json', 'application/xml'],
                ['application/x-www-form-urlencoded', 'application/json', 'application/xml']
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            
            if($headers['Content-Type'] === 'application/json') {
                // \stdClass has no __toString(), so we should encode it manually
                if ($httpBody instanceof \stdClass) {
                    $httpBody = \GuzzleHttp\json_encode($httpBody);
                }
                // array has no __toString(), so we should encode it manually
                if(is_array($httpBody)) {
                    $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($httpBody));
                }
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\Query::build($formParams);
            }
        }

        // this endpoint requires HTTP basic authentication
        if ($this->config->getUsername() !== null || $this->config->getPassword() !== null) {
            $headers['Authorization'] = 'Basic ' . base64_encode($this->config->getUsername() . ":" . $this->config->getPassword());
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\Query::build($queryParams);
        return new Request(
            'DELETE',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation landedCostShipmentGETRequestShipmentIDGet
     *
     * Retrieves a shipment.
     *
     * @param  string $accept Accept Header (required)
     * @param  string $shipment_id shipment_id (required)
     * @param  bool $jiwa_stateful Stateful indicator (optional)
     *
     * @throws \Jiwa\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Jiwa\JiwaModel\Shipment
     */
    public function landedCostShipmentGETRequestShipmentIDGet($accept, $shipment_id, $jiwa_stateful = null)
    {
        list($response) = $this->landedCostShipmentGETRequestShipmentIDGetWithHttpInfo($accept, $shipment_id, $jiwa_stateful);
        return $response;
    }

    /**
     * Operation landedCostShipmentGETRequestShipmentIDGetWithHttpInfo
     *
     * Retrieves a shipment.
     *
     * @param  string $accept Accept Header (required)
     * @param  string $shipment_id (required)
     * @param  bool $jiwa_stateful Stateful indicator (optional)
     *
     * @throws \Jiwa\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Jiwa\JiwaModel\Shipment, HTTP status code, HTTP response headers (array of strings)
     */
    public function landedCostShipmentGETRequestShipmentIDGetWithHttpInfo($accept, $shipment_id, $jiwa_stateful = null)
    {
        $returnType = '\Jiwa\JiwaModel\Shipment';
        $request = $this->landedCostShipmentGETRequestShipmentIDGetRequest($accept, $shipment_id, $jiwa_stateful);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Jiwa\JiwaModel\Shipment',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 403:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Jiwa\JiwaModel\Shipment',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 401:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Jiwa\JiwaModel\Shipment',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 404:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Jiwa\JiwaModel\Shipment',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation landedCostShipmentGETRequestShipmentIDGetAsync
     *
     * Retrieves a shipment.
     *
     * @param  string $accept Accept Header (required)
     * @param  string $shipment_id (required)
     * @param  bool $jiwa_stateful Stateful indicator (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function landedCostShipmentGETRequestShipmentIDGetAsync($accept, $shipment_id, $jiwa_stateful = null)
    {
        return $this->landedCostShipmentGETRequestShipmentIDGetAsyncWithHttpInfo($accept, $shipment_id, $jiwa_stateful)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation landedCostShipmentGETRequestShipmentIDGetAsyncWithHttpInfo
     *
     * Retrieves a shipment.
     *
     * @param  string $accept Accept Header (required)
     * @param  string $shipment_id (required)
     * @param  bool $jiwa_stateful Stateful indicator (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function landedCostShipmentGETRequestShipmentIDGetAsyncWithHttpInfo($accept, $shipment_id, $jiwa_stateful = null)
    {
        $returnType = '\Jiwa\JiwaModel\Shipment';
        $request = $this->landedCostShipmentGETRequestShipmentIDGetRequest($accept, $shipment_id, $jiwa_stateful);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'landedCostShipmentGETRequestShipmentIDGet'
     *
     * @param  string $accept Accept Header (required)
     * @param  string $shipment_id (required)
     * @param  bool $jiwa_stateful Stateful indicator (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function landedCostShipmentGETRequestShipmentIDGetRequest($accept, $shipment_id, $jiwa_stateful = null)
    {
        // verify the required parameter 'accept' is set
        if ($accept === null || (is_array($accept) && count($accept) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $accept when calling landedCostShipmentGETRequestShipmentIDGet'
            );
        }
        // verify the required parameter 'shipment_id' is set
        if ($shipment_id === null || (is_array($shipment_id) && count($shipment_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $shipment_id when calling landedCostShipmentGETRequestShipmentIDGet'
            );
        }

        $resourcePath = '/Shipments/{ShipmentID}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // header params
        if ($accept !== null) {
            $headerParams['Accept'] = ObjectSerializer::toHeaderValue($accept);
        }
        // header params
        if ($jiwa_stateful !== null) {
            $headerParams['jiwa-stateful'] = ObjectSerializer::toHeaderValue($jiwa_stateful);
        }

        // path params
        if ($shipment_id !== null) {
            $resourcePath = str_replace(
                '{' . 'ShipmentID' . '}',
                ObjectSerializer::toPathValue($shipment_id),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json', 'application/xml']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json', 'application/xml'],
                ['application/x-www-form-urlencoded', 'application/json', 'application/xml']
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            
            if($headers['Content-Type'] === 'application/json') {
                // \stdClass has no __toString(), so we should encode it manually
                if ($httpBody instanceof \stdClass) {
                    $httpBody = \GuzzleHttp\json_encode($httpBody);
                }
                // array has no __toString(), so we should encode it manually
                if(is_array($httpBody)) {
                    $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($httpBody));
                }
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\Query::build($formParams);
            }
        }

        // this endpoint requires HTTP basic authentication
        if ($this->config->getUsername() !== null || $this->config->getPassword() !== null) {
            $headers['Authorization'] = 'Basic ' . base64_encode($this->config->getUsername() . ":" . $this->config->getPassword());
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\Query::build($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation landedCostShipmentLineGETRequestShipmentIDLinesLineIDGet
     *
     * Retrieves a shipment line.
     *
     * @param  string $accept Accept Header (required)
     * @param  string $shipment_id shipment_id (required)
     * @param  string $line_id line_id (required)
     * @param  bool $jiwa_stateful Stateful indicator (optional)
     *
     * @throws \Jiwa\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Jiwa\JiwaModel\ShipmentLine
     */
    public function landedCostShipmentLineGETRequestShipmentIDLinesLineIDGet($accept, $shipment_id, $line_id, $jiwa_stateful = null)
    {
        list($response) = $this->landedCostShipmentLineGETRequestShipmentIDLinesLineIDGetWithHttpInfo($accept, $shipment_id, $line_id, $jiwa_stateful);
        return $response;
    }

    /**
     * Operation landedCostShipmentLineGETRequestShipmentIDLinesLineIDGetWithHttpInfo
     *
     * Retrieves a shipment line.
     *
     * @param  string $accept Accept Header (required)
     * @param  string $shipment_id (required)
     * @param  string $line_id (required)
     * @param  bool $jiwa_stateful Stateful indicator (optional)
     *
     * @throws \Jiwa\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Jiwa\JiwaModel\ShipmentLine, HTTP status code, HTTP response headers (array of strings)
     */
    public function landedCostShipmentLineGETRequestShipmentIDLinesLineIDGetWithHttpInfo($accept, $shipment_id, $line_id, $jiwa_stateful = null)
    {
        $returnType = '\Jiwa\JiwaModel\ShipmentLine';
        $request = $this->landedCostShipmentLineGETRequestShipmentIDLinesLineIDGetRequest($accept, $shipment_id, $line_id, $jiwa_stateful);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Jiwa\JiwaModel\ShipmentLine',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 404:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Jiwa\JiwaModel\ShipmentLine',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 401:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Jiwa\JiwaModel\ShipmentLine',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 403:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Jiwa\JiwaModel\ShipmentLine',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation landedCostShipmentLineGETRequestShipmentIDLinesLineIDGetAsync
     *
     * Retrieves a shipment line.
     *
     * @param  string $accept Accept Header (required)
     * @param  string $shipment_id (required)
     * @param  string $line_id (required)
     * @param  bool $jiwa_stateful Stateful indicator (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function landedCostShipmentLineGETRequestShipmentIDLinesLineIDGetAsync($accept, $shipment_id, $line_id, $jiwa_stateful = null)
    {
        return $this->landedCostShipmentLineGETRequestShipmentIDLinesLineIDGetAsyncWithHttpInfo($accept, $shipment_id, $line_id, $jiwa_stateful)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation landedCostShipmentLineGETRequestShipmentIDLinesLineIDGetAsyncWithHttpInfo
     *
     * Retrieves a shipment line.
     *
     * @param  string $accept Accept Header (required)
     * @param  string $shipment_id (required)
     * @param  string $line_id (required)
     * @param  bool $jiwa_stateful Stateful indicator (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function landedCostShipmentLineGETRequestShipmentIDLinesLineIDGetAsyncWithHttpInfo($accept, $shipment_id, $line_id, $jiwa_stateful = null)
    {
        $returnType = '\Jiwa\JiwaModel\ShipmentLine';
        $request = $this->landedCostShipmentLineGETRequestShipmentIDLinesLineIDGetRequest($accept, $shipment_id, $line_id, $jiwa_stateful);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'landedCostShipmentLineGETRequestShipmentIDLinesLineIDGet'
     *
     * @param  string $accept Accept Header (required)
     * @param  string $shipment_id (required)
     * @param  string $line_id (required)
     * @param  bool $jiwa_stateful Stateful indicator (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function landedCostShipmentLineGETRequestShipmentIDLinesLineIDGetRequest($accept, $shipment_id, $line_id, $jiwa_stateful = null)
    {
        // verify the required parameter 'accept' is set
        if ($accept === null || (is_array($accept) && count($accept) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $accept when calling landedCostShipmentLineGETRequestShipmentIDLinesLineIDGet'
            );
        }
        // verify the required parameter 'shipment_id' is set
        if ($shipment_id === null || (is_array($shipment_id) && count($shipment_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $shipment_id when calling landedCostShipmentLineGETRequestShipmentIDLinesLineIDGet'
            );
        }
        // verify the required parameter 'line_id' is set
        if ($line_id === null || (is_array($line_id) && count($line_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $line_id when calling landedCostShipmentLineGETRequestShipmentIDLinesLineIDGet'
            );
        }

        $resourcePath = '/Shipments/{ShipmentID}/Lines/{LineID}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // header params
        if ($accept !== null) {
            $headerParams['Accept'] = ObjectSerializer::toHeaderValue($accept);
        }
        // header params
        if ($jiwa_stateful !== null) {
            $headerParams['jiwa-stateful'] = ObjectSerializer::toHeaderValue($jiwa_stateful);
        }

        // path params
        if ($shipment_id !== null) {
            $resourcePath = str_replace(
                '{' . 'ShipmentID' . '}',
                ObjectSerializer::toPathValue($shipment_id),
                $resourcePath
            );
        }
        // path params
        if ($line_id !== null) {
            $resourcePath = str_replace(
                '{' . 'LineID' . '}',
                ObjectSerializer::toPathValue($line_id),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json', 'application/xml']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json', 'application/xml'],
                ['application/x-www-form-urlencoded', 'application/json', 'application/xml']
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            
            if($headers['Content-Type'] === 'application/json') {
                // \stdClass has no __toString(), so we should encode it manually
                if ($httpBody instanceof \stdClass) {
                    $httpBody = \GuzzleHttp\json_encode($httpBody);
                }
                // array has no __toString(), so we should encode it manually
                if(is_array($httpBody)) {
                    $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($httpBody));
                }
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\Query::build($formParams);
            }
        }

        // this endpoint requires HTTP basic authentication
        if ($this->config->getUsername() !== null || $this->config->getPassword() !== null) {
            $headers['Authorization'] = 'Basic ' . base64_encode($this->config->getUsername() . ":" . $this->config->getPassword());
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\Query::build($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation landedCostShipmentLinePATCHRequestShipmentIDLinesLineIDUpdate
     *
     * Updates a line for a shipment.
     *
     * @param  string $accept Accept Header (required)
     * @param  string $shipment_id shipment_id (required)
     * @param  string $line_id line_id (required)
     * @param  bool $jiwa_stateful Stateful indicator (optional)
     * @param  int $item_no item_no (optional)
     * @param  string $inventory_id inventory_id (optional)
     * @param  string $inventory_part_no inventory_part_no (optional)
     * @param  string $inventory_description inventory_description (optional)
     * @param  string $creditor_id creditor_id (optional)
     * @param  string $creditor_account_no creditor_account_no (optional)
     * @param  string $creditor_name creditor_name (optional)
     * @param  string $sh_invoices_rec_id sh_invoices_rec_id (optional)
     * @param  string $sh_invoices_invoice_no sh_invoices_invoice_no (optional)
     * @param  string $purchase_order_line_id purchase_order_line_id (optional)
     * @param  string $purchase_order_line_order_line_no purchase_order_line_order_line_no (optional)
     * @param  string $purchase_order_line_order_id purchase_order_line_order_id (optional)
     * @param  string $purchase_order_line_order_no purchase_order_line_order_no (optional)
     * @param  string $purchase_order_line_quantity purchase_order_line_quantity (optional)
     * @param  string $purchase_order_line_quantity_delivered purchase_order_line_quantity_delivered (optional)
     * @param  double $quantity_ordered quantity_ordered (optional)
     * @param  double $quantity_this_shipment quantity_this_shipment (optional)
     * @param  double $ordered_cost ordered_cost (optional)
     * @param  double $fx_ordered_cost fx_ordered_cost (optional)
     * @param  double $unit_cost_ex_tax unit_cost_ex_tax (optional)
     * @param  double $fx_rate fx_rate (optional)
     * @param  double $fx_unit_cost_ex_tax fx_unit_cost_ex_tax (optional)
     * @param  string $tax_rate tax_rate (optional)
     * @param  double $tax_amount tax_amount (optional)
     * @param  double $unit_cost_inc_tax unit_cost_inc_tax (optional)
     * @param  double $line_total_ex_tax line_total_ex_tax (optional)
     * @param  double $line_total_inc_tax line_total_inc_tax (optional)
     * @param  double $fx_line_total_ex_tax fx_line_total_ex_tax (optional)
     * @param  double $landed_cost_line_total landed_cost_line_total (optional)
     * @param  double $landed_cost landed_cost (optional)
     * @param  \Jiwa\JiwaModel\LandedCostShipmentLinePATCHRequest $body body (optional)
     *
     * @throws \Jiwa\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Jiwa\JiwaModel\ShipmentLine
     */
    public function landedCostShipmentLinePATCHRequestShipmentIDLinesLineIDUpdate($accept, $shipment_id, $line_id, $jiwa_stateful = null, $item_no = null, $inventory_id = null, $inventory_part_no = null, $inventory_description = null, $creditor_id = null, $creditor_account_no = null, $creditor_name = null, $sh_invoices_rec_id = null, $sh_invoices_invoice_no = null, $purchase_order_line_id = null, $purchase_order_line_order_line_no = null, $purchase_order_line_order_id = null, $purchase_order_line_order_no = null, $purchase_order_line_quantity = null, $purchase_order_line_quantity_delivered = null, $quantity_ordered = null, $quantity_this_shipment = null, $ordered_cost = null, $fx_ordered_cost = null, $unit_cost_ex_tax = null, $fx_rate = null, $fx_unit_cost_ex_tax = null, $tax_rate = null, $tax_amount = null, $unit_cost_inc_tax = null, $line_total_ex_tax = null, $line_total_inc_tax = null, $fx_line_total_ex_tax = null, $landed_cost_line_total = null, $landed_cost = null, $body = null)
    {
        list($response) = $this->landedCostShipmentLinePATCHRequestShipmentIDLinesLineIDUpdateWithHttpInfo($accept, $shipment_id, $line_id, $jiwa_stateful, $item_no, $inventory_id, $inventory_part_no, $inventory_description, $creditor_id, $creditor_account_no, $creditor_name, $sh_invoices_rec_id, $sh_invoices_invoice_no, $purchase_order_line_id, $purchase_order_line_order_line_no, $purchase_order_line_order_id, $purchase_order_line_order_no, $purchase_order_line_quantity, $purchase_order_line_quantity_delivered, $quantity_ordered, $quantity_this_shipment, $ordered_cost, $fx_ordered_cost, $unit_cost_ex_tax, $fx_rate, $fx_unit_cost_ex_tax, $tax_rate, $tax_amount, $unit_cost_inc_tax, $line_total_ex_tax, $line_total_inc_tax, $fx_line_total_ex_tax, $landed_cost_line_total, $landed_cost, $body);
        return $response;
    }

    /**
     * Operation landedCostShipmentLinePATCHRequestShipmentIDLinesLineIDUpdateWithHttpInfo
     *
     * Updates a line for a shipment.
     *
     * @param  string $accept Accept Header (required)
     * @param  string $shipment_id (required)
     * @param  string $line_id (required)
     * @param  bool $jiwa_stateful Stateful indicator (optional)
     * @param  int $item_no (optional)
     * @param  string $inventory_id (optional)
     * @param  string $inventory_part_no (optional)
     * @param  string $inventory_description (optional)
     * @param  string $creditor_id (optional)
     * @param  string $creditor_account_no (optional)
     * @param  string $creditor_name (optional)
     * @param  string $sh_invoices_rec_id (optional)
     * @param  string $sh_invoices_invoice_no (optional)
     * @param  string $purchase_order_line_id (optional)
     * @param  string $purchase_order_line_order_line_no (optional)
     * @param  string $purchase_order_line_order_id (optional)
     * @param  string $purchase_order_line_order_no (optional)
     * @param  string $purchase_order_line_quantity (optional)
     * @param  string $purchase_order_line_quantity_delivered (optional)
     * @param  double $quantity_ordered (optional)
     * @param  double $quantity_this_shipment (optional)
     * @param  double $ordered_cost (optional)
     * @param  double $fx_ordered_cost (optional)
     * @param  double $unit_cost_ex_tax (optional)
     * @param  double $fx_rate (optional)
     * @param  double $fx_unit_cost_ex_tax (optional)
     * @param  string $tax_rate (optional)
     * @param  double $tax_amount (optional)
     * @param  double $unit_cost_inc_tax (optional)
     * @param  double $line_total_ex_tax (optional)
     * @param  double $line_total_inc_tax (optional)
     * @param  double $fx_line_total_ex_tax (optional)
     * @param  double $landed_cost_line_total (optional)
     * @param  double $landed_cost (optional)
     * @param  \Jiwa\JiwaModel\LandedCostShipmentLinePATCHRequest $body (optional)
     *
     * @throws \Jiwa\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Jiwa\JiwaModel\ShipmentLine, HTTP status code, HTTP response headers (array of strings)
     */
    public function landedCostShipmentLinePATCHRequestShipmentIDLinesLineIDUpdateWithHttpInfo($accept, $shipment_id, $line_id, $jiwa_stateful = null, $item_no = null, $inventory_id = null, $inventory_part_no = null, $inventory_description = null, $creditor_id = null, $creditor_account_no = null, $creditor_name = null, $sh_invoices_rec_id = null, $sh_invoices_invoice_no = null, $purchase_order_line_id = null, $purchase_order_line_order_line_no = null, $purchase_order_line_order_id = null, $purchase_order_line_order_no = null, $purchase_order_line_quantity = null, $purchase_order_line_quantity_delivered = null, $quantity_ordered = null, $quantity_this_shipment = null, $ordered_cost = null, $fx_ordered_cost = null, $unit_cost_ex_tax = null, $fx_rate = null, $fx_unit_cost_ex_tax = null, $tax_rate = null, $tax_amount = null, $unit_cost_inc_tax = null, $line_total_ex_tax = null, $line_total_inc_tax = null, $fx_line_total_ex_tax = null, $landed_cost_line_total = null, $landed_cost = null, $body = null)
    {
        $returnType = '\Jiwa\JiwaModel\ShipmentLine';
        $request = $this->landedCostShipmentLinePATCHRequestShipmentIDLinesLineIDUpdateRequest($accept, $shipment_id, $line_id, $jiwa_stateful, $item_no, $inventory_id, $inventory_part_no, $inventory_description, $creditor_id, $creditor_account_no, $creditor_name, $sh_invoices_rec_id, $sh_invoices_invoice_no, $purchase_order_line_id, $purchase_order_line_order_line_no, $purchase_order_line_order_id, $purchase_order_line_order_no, $purchase_order_line_quantity, $purchase_order_line_quantity_delivered, $quantity_ordered, $quantity_this_shipment, $ordered_cost, $fx_ordered_cost, $unit_cost_ex_tax, $fx_rate, $fx_unit_cost_ex_tax, $tax_rate, $tax_amount, $unit_cost_inc_tax, $line_total_ex_tax, $line_total_inc_tax, $fx_line_total_ex_tax, $landed_cost_line_total, $landed_cost, $body);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Jiwa\JiwaModel\ShipmentLine',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 403:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Jiwa\JiwaModel\ShipmentLine',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 404:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Jiwa\JiwaModel\ShipmentLine',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 401:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Jiwa\JiwaModel\ShipmentLine',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation landedCostShipmentLinePATCHRequestShipmentIDLinesLineIDUpdateAsync
     *
     * Updates a line for a shipment.
     *
     * @param  string $accept Accept Header (required)
     * @param  string $shipment_id (required)
     * @param  string $line_id (required)
     * @param  bool $jiwa_stateful Stateful indicator (optional)
     * @param  int $item_no (optional)
     * @param  string $inventory_id (optional)
     * @param  string $inventory_part_no (optional)
     * @param  string $inventory_description (optional)
     * @param  string $creditor_id (optional)
     * @param  string $creditor_account_no (optional)
     * @param  string $creditor_name (optional)
     * @param  string $sh_invoices_rec_id (optional)
     * @param  string $sh_invoices_invoice_no (optional)
     * @param  string $purchase_order_line_id (optional)
     * @param  string $purchase_order_line_order_line_no (optional)
     * @param  string $purchase_order_line_order_id (optional)
     * @param  string $purchase_order_line_order_no (optional)
     * @param  string $purchase_order_line_quantity (optional)
     * @param  string $purchase_order_line_quantity_delivered (optional)
     * @param  double $quantity_ordered (optional)
     * @param  double $quantity_this_shipment (optional)
     * @param  double $ordered_cost (optional)
     * @param  double $fx_ordered_cost (optional)
     * @param  double $unit_cost_ex_tax (optional)
     * @param  double $fx_rate (optional)
     * @param  double $fx_unit_cost_ex_tax (optional)
     * @param  string $tax_rate (optional)
     * @param  double $tax_amount (optional)
     * @param  double $unit_cost_inc_tax (optional)
     * @param  double $line_total_ex_tax (optional)
     * @param  double $line_total_inc_tax (optional)
     * @param  double $fx_line_total_ex_tax (optional)
     * @param  double $landed_cost_line_total (optional)
     * @param  double $landed_cost (optional)
     * @param  \Jiwa\JiwaModel\LandedCostShipmentLinePATCHRequest $body (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function landedCostShipmentLinePATCHRequestShipmentIDLinesLineIDUpdateAsync($accept, $shipment_id, $line_id, $jiwa_stateful = null, $item_no = null, $inventory_id = null, $inventory_part_no = null, $inventory_description = null, $creditor_id = null, $creditor_account_no = null, $creditor_name = null, $sh_invoices_rec_id = null, $sh_invoices_invoice_no = null, $purchase_order_line_id = null, $purchase_order_line_order_line_no = null, $purchase_order_line_order_id = null, $purchase_order_line_order_no = null, $purchase_order_line_quantity = null, $purchase_order_line_quantity_delivered = null, $quantity_ordered = null, $quantity_this_shipment = null, $ordered_cost = null, $fx_ordered_cost = null, $unit_cost_ex_tax = null, $fx_rate = null, $fx_unit_cost_ex_tax = null, $tax_rate = null, $tax_amount = null, $unit_cost_inc_tax = null, $line_total_ex_tax = null, $line_total_inc_tax = null, $fx_line_total_ex_tax = null, $landed_cost_line_total = null, $landed_cost = null, $body = null)
    {
        return $this->landedCostShipmentLinePATCHRequestShipmentIDLinesLineIDUpdateAsyncWithHttpInfo($accept, $shipment_id, $line_id, $jiwa_stateful, $item_no, $inventory_id, $inventory_part_no, $inventory_description, $creditor_id, $creditor_account_no, $creditor_name, $sh_invoices_rec_id, $sh_invoices_invoice_no, $purchase_order_line_id, $purchase_order_line_order_line_no, $purchase_order_line_order_id, $purchase_order_line_order_no, $purchase_order_line_quantity, $purchase_order_line_quantity_delivered, $quantity_ordered, $quantity_this_shipment, $ordered_cost, $fx_ordered_cost, $unit_cost_ex_tax, $fx_rate, $fx_unit_cost_ex_tax, $tax_rate, $tax_amount, $unit_cost_inc_tax, $line_total_ex_tax, $line_total_inc_tax, $fx_line_total_ex_tax, $landed_cost_line_total, $landed_cost, $body)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation landedCostShipmentLinePATCHRequestShipmentIDLinesLineIDUpdateAsyncWithHttpInfo
     *
     * Updates a line for a shipment.
     *
     * @param  string $accept Accept Header (required)
     * @param  string $shipment_id (required)
     * @param  string $line_id (required)
     * @param  bool $jiwa_stateful Stateful indicator (optional)
     * @param  int $item_no (optional)
     * @param  string $inventory_id (optional)
     * @param  string $inventory_part_no (optional)
     * @param  string $inventory_description (optional)
     * @param  string $creditor_id (optional)
     * @param  string $creditor_account_no (optional)
     * @param  string $creditor_name (optional)
     * @param  string $sh_invoices_rec_id (optional)
     * @param  string $sh_invoices_invoice_no (optional)
     * @param  string $purchase_order_line_id (optional)
     * @param  string $purchase_order_line_order_line_no (optional)
     * @param  string $purchase_order_line_order_id (optional)
     * @param  string $purchase_order_line_order_no (optional)
     * @param  string $purchase_order_line_quantity (optional)
     * @param  string $purchase_order_line_quantity_delivered (optional)
     * @param  double $quantity_ordered (optional)
     * @param  double $quantity_this_shipment (optional)
     * @param  double $ordered_cost (optional)
     * @param  double $fx_ordered_cost (optional)
     * @param  double $unit_cost_ex_tax (optional)
     * @param  double $fx_rate (optional)
     * @param  double $fx_unit_cost_ex_tax (optional)
     * @param  string $tax_rate (optional)
     * @param  double $tax_amount (optional)
     * @param  double $unit_cost_inc_tax (optional)
     * @param  double $line_total_ex_tax (optional)
     * @param  double $line_total_inc_tax (optional)
     * @param  double $fx_line_total_ex_tax (optional)
     * @param  double $landed_cost_line_total (optional)
     * @param  double $landed_cost (optional)
     * @param  \Jiwa\JiwaModel\LandedCostShipmentLinePATCHRequest $body (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function landedCostShipmentLinePATCHRequestShipmentIDLinesLineIDUpdateAsyncWithHttpInfo($accept, $shipment_id, $line_id, $jiwa_stateful = null, $item_no = null, $inventory_id = null, $inventory_part_no = null, $inventory_description = null, $creditor_id = null, $creditor_account_no = null, $creditor_name = null, $sh_invoices_rec_id = null, $sh_invoices_invoice_no = null, $purchase_order_line_id = null, $purchase_order_line_order_line_no = null, $purchase_order_line_order_id = null, $purchase_order_line_order_no = null, $purchase_order_line_quantity = null, $purchase_order_line_quantity_delivered = null, $quantity_ordered = null, $quantity_this_shipment = null, $ordered_cost = null, $fx_ordered_cost = null, $unit_cost_ex_tax = null, $fx_rate = null, $fx_unit_cost_ex_tax = null, $tax_rate = null, $tax_amount = null, $unit_cost_inc_tax = null, $line_total_ex_tax = null, $line_total_inc_tax = null, $fx_line_total_ex_tax = null, $landed_cost_line_total = null, $landed_cost = null, $body = null)
    {
        $returnType = '\Jiwa\JiwaModel\ShipmentLine';
        $request = $this->landedCostShipmentLinePATCHRequestShipmentIDLinesLineIDUpdateRequest($accept, $shipment_id, $line_id, $jiwa_stateful, $item_no, $inventory_id, $inventory_part_no, $inventory_description, $creditor_id, $creditor_account_no, $creditor_name, $sh_invoices_rec_id, $sh_invoices_invoice_no, $purchase_order_line_id, $purchase_order_line_order_line_no, $purchase_order_line_order_id, $purchase_order_line_order_no, $purchase_order_line_quantity, $purchase_order_line_quantity_delivered, $quantity_ordered, $quantity_this_shipment, $ordered_cost, $fx_ordered_cost, $unit_cost_ex_tax, $fx_rate, $fx_unit_cost_ex_tax, $tax_rate, $tax_amount, $unit_cost_inc_tax, $line_total_ex_tax, $line_total_inc_tax, $fx_line_total_ex_tax, $landed_cost_line_total, $landed_cost, $body);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'landedCostShipmentLinePATCHRequestShipmentIDLinesLineIDUpdate'
     *
     * @param  string $accept Accept Header (required)
     * @param  string $shipment_id (required)
     * @param  string $line_id (required)
     * @param  bool $jiwa_stateful Stateful indicator (optional)
     * @param  int $item_no (optional)
     * @param  string $inventory_id (optional)
     * @param  string $inventory_part_no (optional)
     * @param  string $inventory_description (optional)
     * @param  string $creditor_id (optional)
     * @param  string $creditor_account_no (optional)
     * @param  string $creditor_name (optional)
     * @param  string $sh_invoices_rec_id (optional)
     * @param  string $sh_invoices_invoice_no (optional)
     * @param  string $purchase_order_line_id (optional)
     * @param  string $purchase_order_line_order_line_no (optional)
     * @param  string $purchase_order_line_order_id (optional)
     * @param  string $purchase_order_line_order_no (optional)
     * @param  string $purchase_order_line_quantity (optional)
     * @param  string $purchase_order_line_quantity_delivered (optional)
     * @param  double $quantity_ordered (optional)
     * @param  double $quantity_this_shipment (optional)
     * @param  double $ordered_cost (optional)
     * @param  double $fx_ordered_cost (optional)
     * @param  double $unit_cost_ex_tax (optional)
     * @param  double $fx_rate (optional)
     * @param  double $fx_unit_cost_ex_tax (optional)
     * @param  string $tax_rate (optional)
     * @param  double $tax_amount (optional)
     * @param  double $unit_cost_inc_tax (optional)
     * @param  double $line_total_ex_tax (optional)
     * @param  double $line_total_inc_tax (optional)
     * @param  double $fx_line_total_ex_tax (optional)
     * @param  double $landed_cost_line_total (optional)
     * @param  double $landed_cost (optional)
     * @param  \Jiwa\JiwaModel\LandedCostShipmentLinePATCHRequest $body (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function landedCostShipmentLinePATCHRequestShipmentIDLinesLineIDUpdateRequest($accept, $shipment_id, $line_id, $jiwa_stateful = null, $item_no = null, $inventory_id = null, $inventory_part_no = null, $inventory_description = null, $creditor_id = null, $creditor_account_no = null, $creditor_name = null, $sh_invoices_rec_id = null, $sh_invoices_invoice_no = null, $purchase_order_line_id = null, $purchase_order_line_order_line_no = null, $purchase_order_line_order_id = null, $purchase_order_line_order_no = null, $purchase_order_line_quantity = null, $purchase_order_line_quantity_delivered = null, $quantity_ordered = null, $quantity_this_shipment = null, $ordered_cost = null, $fx_ordered_cost = null, $unit_cost_ex_tax = null, $fx_rate = null, $fx_unit_cost_ex_tax = null, $tax_rate = null, $tax_amount = null, $unit_cost_inc_tax = null, $line_total_ex_tax = null, $line_total_inc_tax = null, $fx_line_total_ex_tax = null, $landed_cost_line_total = null, $landed_cost = null, $body = null)
    {
        // verify the required parameter 'accept' is set
        if ($accept === null || (is_array($accept) && count($accept) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $accept when calling landedCostShipmentLinePATCHRequestShipmentIDLinesLineIDUpdate'
            );
        }
        // verify the required parameter 'shipment_id' is set
        if ($shipment_id === null || (is_array($shipment_id) && count($shipment_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $shipment_id when calling landedCostShipmentLinePATCHRequestShipmentIDLinesLineIDUpdate'
            );
        }
        // verify the required parameter 'line_id' is set
        if ($line_id === null || (is_array($line_id) && count($line_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $line_id when calling landedCostShipmentLinePATCHRequestShipmentIDLinesLineIDUpdate'
            );
        }

        $resourcePath = '/Shipments/{ShipmentID}/Lines/{LineID}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        if ($item_no !== null) {
            $queryParams['ItemNo'] = ObjectSerializer::toQueryValue($item_no);
        }
        // query params
        if ($inventory_id !== null) {
            $queryParams['InventoryID'] = ObjectSerializer::toQueryValue($inventory_id);
        }
        // query params
        if ($inventory_part_no !== null) {
            $queryParams['InventoryPartNo'] = ObjectSerializer::toQueryValue($inventory_part_no);
        }
        // query params
        if ($inventory_description !== null) {
            $queryParams['InventoryDescription'] = ObjectSerializer::toQueryValue($inventory_description);
        }
        // query params
        if ($creditor_id !== null) {
            $queryParams['CreditorID'] = ObjectSerializer::toQueryValue($creditor_id);
        }
        // query params
        if ($creditor_account_no !== null) {
            $queryParams['CreditorAccountNo'] = ObjectSerializer::toQueryValue($creditor_account_no);
        }
        // query params
        if ($creditor_name !== null) {
            $queryParams['CreditorName'] = ObjectSerializer::toQueryValue($creditor_name);
        }
        // query params
        if ($sh_invoices_rec_id !== null) {
            $queryParams['SHInvoicesRecID'] = ObjectSerializer::toQueryValue($sh_invoices_rec_id);
        }
        // query params
        if ($sh_invoices_invoice_no !== null) {
            $queryParams['SHInvoicesInvoiceNo'] = ObjectSerializer::toQueryValue($sh_invoices_invoice_no);
        }
        // query params
        if ($purchase_order_line_id !== null) {
            $queryParams['PurchaseOrderLineID'] = ObjectSerializer::toQueryValue($purchase_order_line_id);
        }
        // query params
        if ($purchase_order_line_order_line_no !== null) {
            $queryParams['PurchaseOrderLineOrderLineNo'] = ObjectSerializer::toQueryValue($purchase_order_line_order_line_no);
        }
        // query params
        if ($purchase_order_line_order_id !== null) {
            $queryParams['PurchaseOrderLineOrderID'] = ObjectSerializer::toQueryValue($purchase_order_line_order_id);
        }
        // query params
        if ($purchase_order_line_order_no !== null) {
            $queryParams['PurchaseOrderLineOrderNo'] = ObjectSerializer::toQueryValue($purchase_order_line_order_no);
        }
        // query params
        if ($purchase_order_line_quantity !== null) {
            $queryParams['PurchaseOrderLineQuantity'] = ObjectSerializer::toQueryValue($purchase_order_line_quantity);
        }
        // query params
        if ($purchase_order_line_quantity_delivered !== null) {
            $queryParams['PurchaseOrderLineQuantityDelivered'] = ObjectSerializer::toQueryValue($purchase_order_line_quantity_delivered);
        }
        // query params
        if ($quantity_ordered !== null) {
            $queryParams['QuantityOrdered'] = ObjectSerializer::toQueryValue($quantity_ordered);
        }
        // query params
        if ($quantity_this_shipment !== null) {
            $queryParams['QuantityThisShipment'] = ObjectSerializer::toQueryValue($quantity_this_shipment);
        }
        // query params
        if ($ordered_cost !== null) {
            $queryParams['OrderedCost'] = ObjectSerializer::toQueryValue($ordered_cost);
        }
        // query params
        if ($fx_ordered_cost !== null) {
            $queryParams['FXOrderedCost'] = ObjectSerializer::toQueryValue($fx_ordered_cost);
        }
        // query params
        if ($unit_cost_ex_tax !== null) {
            $queryParams['UnitCostExTax'] = ObjectSerializer::toQueryValue($unit_cost_ex_tax);
        }
        // query params
        if ($fx_rate !== null) {
            $queryParams['FXRate'] = ObjectSerializer::toQueryValue($fx_rate);
        }
        // query params
        if ($fx_unit_cost_ex_tax !== null) {
            $queryParams['FXUnitCostExTax'] = ObjectSerializer::toQueryValue($fx_unit_cost_ex_tax);
        }
        // query params
        if ($tax_rate !== null) {
            $queryParams['TaxRate'] = ObjectSerializer::toQueryValue($tax_rate);
        }
        // query params
        if ($tax_amount !== null) {
            $queryParams['TaxAmount'] = ObjectSerializer::toQueryValue($tax_amount);
        }
        // query params
        if ($unit_cost_inc_tax !== null) {
            $queryParams['UnitCostIncTax'] = ObjectSerializer::toQueryValue($unit_cost_inc_tax);
        }
        // query params
        if ($line_total_ex_tax !== null) {
            $queryParams['LineTotalExTax'] = ObjectSerializer::toQueryValue($line_total_ex_tax);
        }
        // query params
        if ($line_total_inc_tax !== null) {
            $queryParams['LineTotalIncTax'] = ObjectSerializer::toQueryValue($line_total_inc_tax);
        }
        // query params
        if ($fx_line_total_ex_tax !== null) {
            $queryParams['FXLineTotalExTax'] = ObjectSerializer::toQueryValue($fx_line_total_ex_tax);
        }
        // query params
        if ($landed_cost_line_total !== null) {
            $queryParams['LandedCostLineTotal'] = ObjectSerializer::toQueryValue($landed_cost_line_total);
        }
        // query params
        if ($landed_cost !== null) {
            $queryParams['LandedCost'] = ObjectSerializer::toQueryValue($landed_cost);
        }
        // header params
        if ($accept !== null) {
            $headerParams['Accept'] = ObjectSerializer::toHeaderValue($accept);
        }
        // header params
        if ($jiwa_stateful !== null) {
            $headerParams['jiwa-stateful'] = ObjectSerializer::toHeaderValue($jiwa_stateful);
        }

        // path params
        if ($shipment_id !== null) {
            $resourcePath = str_replace(
                '{' . 'ShipmentID' . '}',
                ObjectSerializer::toPathValue($shipment_id),
                $resourcePath
            );
        }
        // path params
        if ($line_id !== null) {
            $resourcePath = str_replace(
                '{' . 'LineID' . '}',
                ObjectSerializer::toPathValue($line_id),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;
        if (isset($body)) {
            $_tempBody = $body;
        }

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json', 'application/xml']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json', 'application/xml'],
                ['application/x-www-form-urlencoded', 'application/json', 'application/xml']
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            
            if($headers['Content-Type'] === 'application/json') {
                // \stdClass has no __toString(), so we should encode it manually
                if ($httpBody instanceof \stdClass) {
                    $httpBody = \GuzzleHttp\json_encode($httpBody);
                }
                // array has no __toString(), so we should encode it manually
                if(is_array($httpBody)) {
                    $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($httpBody));
                }
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\Query::build($formParams);
            }
        }

        // this endpoint requires HTTP basic authentication
        if ($this->config->getUsername() !== null || $this->config->getPassword() !== null) {
            $headers['Authorization'] = 'Basic ' . base64_encode($this->config->getUsername() . ":" . $this->config->getPassword());
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\Query::build($queryParams);
        return new Request(
            'PATCH',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation landedCostShipmentLinesGETManyRequestShipmentIDLinesGet
     *
     * Retrieves a list of shipment lines.
     *
     * @param  string $accept Accept Header (required)
     * @param  string $shipment_id shipment_id (required)
     * @param  bool $jiwa_stateful Stateful indicator (optional)
     *
     * @throws \Jiwa\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Jiwa\JiwaModel\ShipmentLine[]
     */
    public function landedCostShipmentLinesGETManyRequestShipmentIDLinesGet($accept, $shipment_id, $jiwa_stateful = null)
    {
        list($response) = $this->landedCostShipmentLinesGETManyRequestShipmentIDLinesGetWithHttpInfo($accept, $shipment_id, $jiwa_stateful);
        return $response;
    }

    /**
     * Operation landedCostShipmentLinesGETManyRequestShipmentIDLinesGetWithHttpInfo
     *
     * Retrieves a list of shipment lines.
     *
     * @param  string $accept Accept Header (required)
     * @param  string $shipment_id (required)
     * @param  bool $jiwa_stateful Stateful indicator (optional)
     *
     * @throws \Jiwa\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Jiwa\JiwaModel\ShipmentLine[], HTTP status code, HTTP response headers (array of strings)
     */
    public function landedCostShipmentLinesGETManyRequestShipmentIDLinesGetWithHttpInfo($accept, $shipment_id, $jiwa_stateful = null)
    {
        $returnType = '\Jiwa\JiwaModel\ShipmentLine[]';
        $request = $this->landedCostShipmentLinesGETManyRequestShipmentIDLinesGetRequest($accept, $shipment_id, $jiwa_stateful);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Jiwa\JiwaModel\ShipmentLine[]',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 404:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Jiwa\JiwaModel\ShipmentLine[]',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 401:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Jiwa\JiwaModel\ShipmentLine[]',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 403:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Jiwa\JiwaModel\ShipmentLine[]',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation landedCostShipmentLinesGETManyRequestShipmentIDLinesGetAsync
     *
     * Retrieves a list of shipment lines.
     *
     * @param  string $accept Accept Header (required)
     * @param  string $shipment_id (required)
     * @param  bool $jiwa_stateful Stateful indicator (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function landedCostShipmentLinesGETManyRequestShipmentIDLinesGetAsync($accept, $shipment_id, $jiwa_stateful = null)
    {
        return $this->landedCostShipmentLinesGETManyRequestShipmentIDLinesGetAsyncWithHttpInfo($accept, $shipment_id, $jiwa_stateful)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation landedCostShipmentLinesGETManyRequestShipmentIDLinesGetAsyncWithHttpInfo
     *
     * Retrieves a list of shipment lines.
     *
     * @param  string $accept Accept Header (required)
     * @param  string $shipment_id (required)
     * @param  bool $jiwa_stateful Stateful indicator (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function landedCostShipmentLinesGETManyRequestShipmentIDLinesGetAsyncWithHttpInfo($accept, $shipment_id, $jiwa_stateful = null)
    {
        $returnType = '\Jiwa\JiwaModel\ShipmentLine[]';
        $request = $this->landedCostShipmentLinesGETManyRequestShipmentIDLinesGetRequest($accept, $shipment_id, $jiwa_stateful);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'landedCostShipmentLinesGETManyRequestShipmentIDLinesGet'
     *
     * @param  string $accept Accept Header (required)
     * @param  string $shipment_id (required)
     * @param  bool $jiwa_stateful Stateful indicator (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function landedCostShipmentLinesGETManyRequestShipmentIDLinesGetRequest($accept, $shipment_id, $jiwa_stateful = null)
    {
        // verify the required parameter 'accept' is set
        if ($accept === null || (is_array($accept) && count($accept) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $accept when calling landedCostShipmentLinesGETManyRequestShipmentIDLinesGet'
            );
        }
        // verify the required parameter 'shipment_id' is set
        if ($shipment_id === null || (is_array($shipment_id) && count($shipment_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $shipment_id when calling landedCostShipmentLinesGETManyRequestShipmentIDLinesGet'
            );
        }

        $resourcePath = '/Shipments/{ShipmentID}/Lines';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // header params
        if ($accept !== null) {
            $headerParams['Accept'] = ObjectSerializer::toHeaderValue($accept);
        }
        // header params
        if ($jiwa_stateful !== null) {
            $headerParams['jiwa-stateful'] = ObjectSerializer::toHeaderValue($jiwa_stateful);
        }

        // path params
        if ($shipment_id !== null) {
            $resourcePath = str_replace(
                '{' . 'ShipmentID' . '}',
                ObjectSerializer::toPathValue($shipment_id),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json', 'application/xml']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json', 'application/xml'],
                ['application/x-www-form-urlencoded', 'application/json', 'application/xml']
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            
            if($headers['Content-Type'] === 'application/json') {
                // \stdClass has no __toString(), so we should encode it manually
                if ($httpBody instanceof \stdClass) {
                    $httpBody = \GuzzleHttp\json_encode($httpBody);
                }
                // array has no __toString(), so we should encode it manually
                if(is_array($httpBody)) {
                    $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($httpBody));
                }
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\Query::build($formParams);
            }
        }

        // this endpoint requires HTTP basic authentication
        if ($this->config->getUsername() !== null || $this->config->getPassword() !== null) {
            $headers['Authorization'] = 'Basic ' . base64_encode($this->config->getUsername() . ":" . $this->config->getPassword());
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\Query::build($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation landedCostShipmentPATCHRequestShipmentIDUpdate
     *
     * Updates a shipment.
     *
     * @param  string $accept Accept Header (required)
     * @param  string $shipment_id shipment_id (required)
     * @param  bool $jiwa_stateful Stateful indicator (optional)
     * @param  string $shipment_no shipment_no (optional)
     * @param  \DateTime $last_saved_date_time last_saved_date_time (optional)
     * @param  \DateTime $initiated_date initiated_date (optional)
     * @param  \DateTime $departure_date departure_date (optional)
     * @param  \DateTime $expected_arrival_date expected_arrival_date (optional)
     * @param  \DateTime $scheduled_arrival_date scheduled_arrival_date (optional)
     * @param  \DateTime $receipt_date receipt_date (optional)
     * @param  string $delivery_notes delivery_notes (optional)
     * @param  string $status status (optional)
     * @param  string $way_bill_no way_bill_no (optional)
     * @param  string $vessel_name vessel_name (optional)
     * @param  string $container_no container_no (optional)
     * @param  bool $use_voti use_voti (optional)
     * @param  string $shipping_agent_creditor_id shipping_agent_creditor_id (optional)
     * @param  string $shipping_agent_creditor_account_no shipping_agent_creditor_account_no (optional)
     * @param  string $shipping_agent_creditor_name shipping_agent_creditor_name (optional)
     * @param  string $import_cost_clearing_account import_cost_clearing_account (optional)
     * @param  string $lines lines (optional)
     * @param  string $purchase_orders purchase_orders (optional)
     * @param  string $import_costs import_costs (optional)
     * @param  string $vot_is vot_is (optional)
     * @param  string $invoices invoices (optional)
     * @param  string $custom_field_values custom_field_values (optional)
     * @param  \Jiwa\JiwaModel\LandedCostShipmentPATCHRequest $body body (optional)
     *
     * @throws \Jiwa\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Jiwa\JiwaModel\Shipment
     */
    public function landedCostShipmentPATCHRequestShipmentIDUpdate($accept, $shipment_id, $jiwa_stateful = null, $shipment_no = null, $last_saved_date_time = null, $initiated_date = null, $departure_date = null, $expected_arrival_date = null, $scheduled_arrival_date = null, $receipt_date = null, $delivery_notes = null, $status = null, $way_bill_no = null, $vessel_name = null, $container_no = null, $use_voti = null, $shipping_agent_creditor_id = null, $shipping_agent_creditor_account_no = null, $shipping_agent_creditor_name = null, $import_cost_clearing_account = null, $lines = null, $purchase_orders = null, $import_costs = null, $vot_is = null, $invoices = null, $custom_field_values = null, $body = null)
    {
        list($response) = $this->landedCostShipmentPATCHRequestShipmentIDUpdateWithHttpInfo($accept, $shipment_id, $jiwa_stateful, $shipment_no, $last_saved_date_time, $initiated_date, $departure_date, $expected_arrival_date, $scheduled_arrival_date, $receipt_date, $delivery_notes, $status, $way_bill_no, $vessel_name, $container_no, $use_voti, $shipping_agent_creditor_id, $shipping_agent_creditor_account_no, $shipping_agent_creditor_name, $import_cost_clearing_account, $lines, $purchase_orders, $import_costs, $vot_is, $invoices, $custom_field_values, $body);
        return $response;
    }

    /**
     * Operation landedCostShipmentPATCHRequestShipmentIDUpdateWithHttpInfo
     *
     * Updates a shipment.
     *
     * @param  string $accept Accept Header (required)
     * @param  string $shipment_id (required)
     * @param  bool $jiwa_stateful Stateful indicator (optional)
     * @param  string $shipment_no (optional)
     * @param  \DateTime $last_saved_date_time (optional)
     * @param  \DateTime $initiated_date (optional)
     * @param  \DateTime $departure_date (optional)
     * @param  \DateTime $expected_arrival_date (optional)
     * @param  \DateTime $scheduled_arrival_date (optional)
     * @param  \DateTime $receipt_date (optional)
     * @param  string $delivery_notes (optional)
     * @param  string $status (optional)
     * @param  string $way_bill_no (optional)
     * @param  string $vessel_name (optional)
     * @param  string $container_no (optional)
     * @param  bool $use_voti (optional)
     * @param  string $shipping_agent_creditor_id (optional)
     * @param  string $shipping_agent_creditor_account_no (optional)
     * @param  string $shipping_agent_creditor_name (optional)
     * @param  string $import_cost_clearing_account (optional)
     * @param  string $lines (optional)
     * @param  string $purchase_orders (optional)
     * @param  string $import_costs (optional)
     * @param  string $vot_is (optional)
     * @param  string $invoices (optional)
     * @param  string $custom_field_values (optional)
     * @param  \Jiwa\JiwaModel\LandedCostShipmentPATCHRequest $body (optional)
     *
     * @throws \Jiwa\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Jiwa\JiwaModel\Shipment, HTTP status code, HTTP response headers (array of strings)
     */
    public function landedCostShipmentPATCHRequestShipmentIDUpdateWithHttpInfo($accept, $shipment_id, $jiwa_stateful = null, $shipment_no = null, $last_saved_date_time = null, $initiated_date = null, $departure_date = null, $expected_arrival_date = null, $scheduled_arrival_date = null, $receipt_date = null, $delivery_notes = null, $status = null, $way_bill_no = null, $vessel_name = null, $container_no = null, $use_voti = null, $shipping_agent_creditor_id = null, $shipping_agent_creditor_account_no = null, $shipping_agent_creditor_name = null, $import_cost_clearing_account = null, $lines = null, $purchase_orders = null, $import_costs = null, $vot_is = null, $invoices = null, $custom_field_values = null, $body = null)
    {
        $returnType = '\Jiwa\JiwaModel\Shipment';
        $request = $this->landedCostShipmentPATCHRequestShipmentIDUpdateRequest($accept, $shipment_id, $jiwa_stateful, $shipment_no, $last_saved_date_time, $initiated_date, $departure_date, $expected_arrival_date, $scheduled_arrival_date, $receipt_date, $delivery_notes, $status, $way_bill_no, $vessel_name, $container_no, $use_voti, $shipping_agent_creditor_id, $shipping_agent_creditor_account_no, $shipping_agent_creditor_name, $import_cost_clearing_account, $lines, $purchase_orders, $import_costs, $vot_is, $invoices, $custom_field_values, $body);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Jiwa\JiwaModel\Shipment',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 404:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Jiwa\JiwaModel\Shipment',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 401:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Jiwa\JiwaModel\Shipment',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 403:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Jiwa\JiwaModel\Shipment',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 201:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Jiwa\JiwaModel\Shipment',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation landedCostShipmentPATCHRequestShipmentIDUpdateAsync
     *
     * Updates a shipment.
     *
     * @param  string $accept Accept Header (required)
     * @param  string $shipment_id (required)
     * @param  bool $jiwa_stateful Stateful indicator (optional)
     * @param  string $shipment_no (optional)
     * @param  \DateTime $last_saved_date_time (optional)
     * @param  \DateTime $initiated_date (optional)
     * @param  \DateTime $departure_date (optional)
     * @param  \DateTime $expected_arrival_date (optional)
     * @param  \DateTime $scheduled_arrival_date (optional)
     * @param  \DateTime $receipt_date (optional)
     * @param  string $delivery_notes (optional)
     * @param  string $status (optional)
     * @param  string $way_bill_no (optional)
     * @param  string $vessel_name (optional)
     * @param  string $container_no (optional)
     * @param  bool $use_voti (optional)
     * @param  string $shipping_agent_creditor_id (optional)
     * @param  string $shipping_agent_creditor_account_no (optional)
     * @param  string $shipping_agent_creditor_name (optional)
     * @param  string $import_cost_clearing_account (optional)
     * @param  string $lines (optional)
     * @param  string $purchase_orders (optional)
     * @param  string $import_costs (optional)
     * @param  string $vot_is (optional)
     * @param  string $invoices (optional)
     * @param  string $custom_field_values (optional)
     * @param  \Jiwa\JiwaModel\LandedCostShipmentPATCHRequest $body (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function landedCostShipmentPATCHRequestShipmentIDUpdateAsync($accept, $shipment_id, $jiwa_stateful = null, $shipment_no = null, $last_saved_date_time = null, $initiated_date = null, $departure_date = null, $expected_arrival_date = null, $scheduled_arrival_date = null, $receipt_date = null, $delivery_notes = null, $status = null, $way_bill_no = null, $vessel_name = null, $container_no = null, $use_voti = null, $shipping_agent_creditor_id = null, $shipping_agent_creditor_account_no = null, $shipping_agent_creditor_name = null, $import_cost_clearing_account = null, $lines = null, $purchase_orders = null, $import_costs = null, $vot_is = null, $invoices = null, $custom_field_values = null, $body = null)
    {
        return $this->landedCostShipmentPATCHRequestShipmentIDUpdateAsyncWithHttpInfo($accept, $shipment_id, $jiwa_stateful, $shipment_no, $last_saved_date_time, $initiated_date, $departure_date, $expected_arrival_date, $scheduled_arrival_date, $receipt_date, $delivery_notes, $status, $way_bill_no, $vessel_name, $container_no, $use_voti, $shipping_agent_creditor_id, $shipping_agent_creditor_account_no, $shipping_agent_creditor_name, $import_cost_clearing_account, $lines, $purchase_orders, $import_costs, $vot_is, $invoices, $custom_field_values, $body)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation landedCostShipmentPATCHRequestShipmentIDUpdateAsyncWithHttpInfo
     *
     * Updates a shipment.
     *
     * @param  string $accept Accept Header (required)
     * @param  string $shipment_id (required)
     * @param  bool $jiwa_stateful Stateful indicator (optional)
     * @param  string $shipment_no (optional)
     * @param  \DateTime $last_saved_date_time (optional)
     * @param  \DateTime $initiated_date (optional)
     * @param  \DateTime $departure_date (optional)
     * @param  \DateTime $expected_arrival_date (optional)
     * @param  \DateTime $scheduled_arrival_date (optional)
     * @param  \DateTime $receipt_date (optional)
     * @param  string $delivery_notes (optional)
     * @param  string $status (optional)
     * @param  string $way_bill_no (optional)
     * @param  string $vessel_name (optional)
     * @param  string $container_no (optional)
     * @param  bool $use_voti (optional)
     * @param  string $shipping_agent_creditor_id (optional)
     * @param  string $shipping_agent_creditor_account_no (optional)
     * @param  string $shipping_agent_creditor_name (optional)
     * @param  string $import_cost_clearing_account (optional)
     * @param  string $lines (optional)
     * @param  string $purchase_orders (optional)
     * @param  string $import_costs (optional)
     * @param  string $vot_is (optional)
     * @param  string $invoices (optional)
     * @param  string $custom_field_values (optional)
     * @param  \Jiwa\JiwaModel\LandedCostShipmentPATCHRequest $body (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function landedCostShipmentPATCHRequestShipmentIDUpdateAsyncWithHttpInfo($accept, $shipment_id, $jiwa_stateful = null, $shipment_no = null, $last_saved_date_time = null, $initiated_date = null, $departure_date = null, $expected_arrival_date = null, $scheduled_arrival_date = null, $receipt_date = null, $delivery_notes = null, $status = null, $way_bill_no = null, $vessel_name = null, $container_no = null, $use_voti = null, $shipping_agent_creditor_id = null, $shipping_agent_creditor_account_no = null, $shipping_agent_creditor_name = null, $import_cost_clearing_account = null, $lines = null, $purchase_orders = null, $import_costs = null, $vot_is = null, $invoices = null, $custom_field_values = null, $body = null)
    {
        $returnType = '\Jiwa\JiwaModel\Shipment';
        $request = $this->landedCostShipmentPATCHRequestShipmentIDUpdateRequest($accept, $shipment_id, $jiwa_stateful, $shipment_no, $last_saved_date_time, $initiated_date, $departure_date, $expected_arrival_date, $scheduled_arrival_date, $receipt_date, $delivery_notes, $status, $way_bill_no, $vessel_name, $container_no, $use_voti, $shipping_agent_creditor_id, $shipping_agent_creditor_account_no, $shipping_agent_creditor_name, $import_cost_clearing_account, $lines, $purchase_orders, $import_costs, $vot_is, $invoices, $custom_field_values, $body);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'landedCostShipmentPATCHRequestShipmentIDUpdate'
     *
     * @param  string $accept Accept Header (required)
     * @param  string $shipment_id (required)
     * @param  bool $jiwa_stateful Stateful indicator (optional)
     * @param  string $shipment_no (optional)
     * @param  \DateTime $last_saved_date_time (optional)
     * @param  \DateTime $initiated_date (optional)
     * @param  \DateTime $departure_date (optional)
     * @param  \DateTime $expected_arrival_date (optional)
     * @param  \DateTime $scheduled_arrival_date (optional)
     * @param  \DateTime $receipt_date (optional)
     * @param  string $delivery_notes (optional)
     * @param  string $status (optional)
     * @param  string $way_bill_no (optional)
     * @param  string $vessel_name (optional)
     * @param  string $container_no (optional)
     * @param  bool $use_voti (optional)
     * @param  string $shipping_agent_creditor_id (optional)
     * @param  string $shipping_agent_creditor_account_no (optional)
     * @param  string $shipping_agent_creditor_name (optional)
     * @param  string $import_cost_clearing_account (optional)
     * @param  string $lines (optional)
     * @param  string $purchase_orders (optional)
     * @param  string $import_costs (optional)
     * @param  string $vot_is (optional)
     * @param  string $invoices (optional)
     * @param  string $custom_field_values (optional)
     * @param  \Jiwa\JiwaModel\LandedCostShipmentPATCHRequest $body (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function landedCostShipmentPATCHRequestShipmentIDUpdateRequest($accept, $shipment_id, $jiwa_stateful = null, $shipment_no = null, $last_saved_date_time = null, $initiated_date = null, $departure_date = null, $expected_arrival_date = null, $scheduled_arrival_date = null, $receipt_date = null, $delivery_notes = null, $status = null, $way_bill_no = null, $vessel_name = null, $container_no = null, $use_voti = null, $shipping_agent_creditor_id = null, $shipping_agent_creditor_account_no = null, $shipping_agent_creditor_name = null, $import_cost_clearing_account = null, $lines = null, $purchase_orders = null, $import_costs = null, $vot_is = null, $invoices = null, $custom_field_values = null, $body = null)
    {
        // verify the required parameter 'accept' is set
        if ($accept === null || (is_array($accept) && count($accept) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $accept when calling landedCostShipmentPATCHRequestShipmentIDUpdate'
            );
        }
        // verify the required parameter 'shipment_id' is set
        if ($shipment_id === null || (is_array($shipment_id) && count($shipment_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $shipment_id when calling landedCostShipmentPATCHRequestShipmentIDUpdate'
            );
        }

        $resourcePath = '/Shipments/{ShipmentID}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        if ($shipment_no !== null) {
            $queryParams['ShipmentNo'] = ObjectSerializer::toQueryValue($shipment_no);
        }
        // query params
        if ($last_saved_date_time !== null) {
            $queryParams['LastSavedDateTime'] = ObjectSerializer::toQueryValue($last_saved_date_time);
        }
        // query params
        if ($initiated_date !== null) {
            $queryParams['InitiatedDate'] = ObjectSerializer::toQueryValue($initiated_date);
        }
        // query params
        if ($departure_date !== null) {
            $queryParams['DepartureDate'] = ObjectSerializer::toQueryValue($departure_date);
        }
        // query params
        if ($expected_arrival_date !== null) {
            $queryParams['ExpectedArrivalDate'] = ObjectSerializer::toQueryValue($expected_arrival_date);
        }
        // query params
        if ($scheduled_arrival_date !== null) {
            $queryParams['ScheduledArrivalDate'] = ObjectSerializer::toQueryValue($scheduled_arrival_date);
        }
        // query params
        if ($receipt_date !== null) {
            $queryParams['ReceiptDate'] = ObjectSerializer::toQueryValue($receipt_date);
        }
        // query params
        if ($delivery_notes !== null) {
            $queryParams['DeliveryNotes'] = ObjectSerializer::toQueryValue($delivery_notes);
        }
        // query params
        if ($status !== null) {
            $queryParams['Status'] = ObjectSerializer::toQueryValue($status);
        }
        // query params
        if ($way_bill_no !== null) {
            $queryParams['WayBillNo'] = ObjectSerializer::toQueryValue($way_bill_no);
        }
        // query params
        if ($vessel_name !== null) {
            $queryParams['VesselName'] = ObjectSerializer::toQueryValue($vessel_name);
        }
        // query params
        if ($container_no !== null) {
            $queryParams['ContainerNo'] = ObjectSerializer::toQueryValue($container_no);
        }
        // query params
        if ($use_voti !== null) {
            $queryParams['UseVOTI'] = ObjectSerializer::toQueryValue($use_voti);
        }
        // query params
        if ($shipping_agent_creditor_id !== null) {
            $queryParams['ShippingAgentCreditorID'] = ObjectSerializer::toQueryValue($shipping_agent_creditor_id);
        }
        // query params
        if ($shipping_agent_creditor_account_no !== null) {
            $queryParams['ShippingAgentCreditorAccountNo'] = ObjectSerializer::toQueryValue($shipping_agent_creditor_account_no);
        }
        // query params
        if ($shipping_agent_creditor_name !== null) {
            $queryParams['ShippingAgentCreditorName'] = ObjectSerializer::toQueryValue($shipping_agent_creditor_name);
        }
        // query params
        if ($import_cost_clearing_account !== null) {
            $queryParams['ImportCostClearingAccount'] = ObjectSerializer::toQueryValue($import_cost_clearing_account);
        }
        // query params
        if ($lines !== null) {
            $queryParams['Lines'] = ObjectSerializer::toQueryValue($lines);
        }
        // query params
        if ($purchase_orders !== null) {
            $queryParams['PurchaseOrders'] = ObjectSerializer::toQueryValue($purchase_orders);
        }
        // query params
        if ($import_costs !== null) {
            $queryParams['ImportCosts'] = ObjectSerializer::toQueryValue($import_costs);
        }
        // query params
        if ($vot_is !== null) {
            $queryParams['VOTIs'] = ObjectSerializer::toQueryValue($vot_is);
        }
        // query params
        if ($invoices !== null) {
            $queryParams['Invoices'] = ObjectSerializer::toQueryValue($invoices);
        }
        // query params
        if ($custom_field_values !== null) {
            $queryParams['CustomFieldValues'] = ObjectSerializer::toQueryValue($custom_field_values);
        }
        // header params
        if ($accept !== null) {
            $headerParams['Accept'] = ObjectSerializer::toHeaderValue($accept);
        }
        // header params
        if ($jiwa_stateful !== null) {
            $headerParams['jiwa-stateful'] = ObjectSerializer::toHeaderValue($jiwa_stateful);
        }

        // path params
        if ($shipment_id !== null) {
            $resourcePath = str_replace(
                '{' . 'ShipmentID' . '}',
                ObjectSerializer::toPathValue($shipment_id),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;
        if (isset($body)) {
            $_tempBody = $body;
        }

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json', 'application/xml']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json', 'application/xml'],
                ['application/x-www-form-urlencoded', 'application/json', 'application/xml']
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            
            if($headers['Content-Type'] === 'application/json') {
                // \stdClass has no __toString(), so we should encode it manually
                if ($httpBody instanceof \stdClass) {
                    $httpBody = \GuzzleHttp\json_encode($httpBody);
                }
                // array has no __toString(), so we should encode it manually
                if(is_array($httpBody)) {
                    $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($httpBody));
                }
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\Query::build($formParams);
            }
        }

        // this endpoint requires HTTP basic authentication
        if ($this->config->getUsername() !== null || $this->config->getPassword() !== null) {
            $headers['Authorization'] = 'Basic ' . base64_encode($this->config->getUsername() . ":" . $this->config->getPassword());
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\Query::build($queryParams);
        return new Request(
            'PATCH',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation landedCostShipmentPOSTRequestPost
     *
     * Creates a shipment.
     *
     * @param  string $accept Accept Header (required)
     * @param  bool $jiwa_stateful Stateful indicator (optional)
     * @param  string $shipment_no shipment_no (optional)
     * @param  \DateTime $last_saved_date_time last_saved_date_time (optional)
     * @param  \DateTime $initiated_date initiated_date (optional)
     * @param  \DateTime $departure_date departure_date (optional)
     * @param  \DateTime $expected_arrival_date expected_arrival_date (optional)
     * @param  \DateTime $scheduled_arrival_date scheduled_arrival_date (optional)
     * @param  \DateTime $receipt_date receipt_date (optional)
     * @param  string $delivery_notes delivery_notes (optional)
     * @param  string $status status (optional)
     * @param  string $way_bill_no way_bill_no (optional)
     * @param  string $vessel_name vessel_name (optional)
     * @param  string $container_no container_no (optional)
     * @param  bool $use_voti use_voti (optional)
     * @param  string $shipping_agent_creditor_id shipping_agent_creditor_id (optional)
     * @param  string $shipping_agent_creditor_account_no shipping_agent_creditor_account_no (optional)
     * @param  string $shipping_agent_creditor_name shipping_agent_creditor_name (optional)
     * @param  string $import_cost_clearing_account import_cost_clearing_account (optional)
     * @param  string $lines lines (optional)
     * @param  string $purchase_orders purchase_orders (optional)
     * @param  string $import_costs import_costs (optional)
     * @param  string $vot_is vot_is (optional)
     * @param  string $invoices invoices (optional)
     * @param  string $custom_field_values custom_field_values (optional)
     * @param  \Jiwa\JiwaModel\LandedCostShipmentPOSTRequest $body body (optional)
     *
     * @throws \Jiwa\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Jiwa\JiwaModel\Shipment
     */
    public function landedCostShipmentPOSTRequestPost($accept, $jiwa_stateful = null, $shipment_no = null, $last_saved_date_time = null, $initiated_date = null, $departure_date = null, $expected_arrival_date = null, $scheduled_arrival_date = null, $receipt_date = null, $delivery_notes = null, $status = null, $way_bill_no = null, $vessel_name = null, $container_no = null, $use_voti = null, $shipping_agent_creditor_id = null, $shipping_agent_creditor_account_no = null, $shipping_agent_creditor_name = null, $import_cost_clearing_account = null, $lines = null, $purchase_orders = null, $import_costs = null, $vot_is = null, $invoices = null, $custom_field_values = null, $body = null)
    {
        list($response) = $this->landedCostShipmentPOSTRequestPostWithHttpInfo($accept, $jiwa_stateful, $shipment_no, $last_saved_date_time, $initiated_date, $departure_date, $expected_arrival_date, $scheduled_arrival_date, $receipt_date, $delivery_notes, $status, $way_bill_no, $vessel_name, $container_no, $use_voti, $shipping_agent_creditor_id, $shipping_agent_creditor_account_no, $shipping_agent_creditor_name, $import_cost_clearing_account, $lines, $purchase_orders, $import_costs, $vot_is, $invoices, $custom_field_values, $body);
        return $response;
    }

    /**
     * Operation landedCostShipmentPOSTRequestPostWithHttpInfo
     *
     * Creates a shipment.
     *
     * @param  string $accept Accept Header (required)
     * @param  bool $jiwa_stateful Stateful indicator (optional)
     * @param  string $shipment_no (optional)
     * @param  \DateTime $last_saved_date_time (optional)
     * @param  \DateTime $initiated_date (optional)
     * @param  \DateTime $departure_date (optional)
     * @param  \DateTime $expected_arrival_date (optional)
     * @param  \DateTime $scheduled_arrival_date (optional)
     * @param  \DateTime $receipt_date (optional)
     * @param  string $delivery_notes (optional)
     * @param  string $status (optional)
     * @param  string $way_bill_no (optional)
     * @param  string $vessel_name (optional)
     * @param  string $container_no (optional)
     * @param  bool $use_voti (optional)
     * @param  string $shipping_agent_creditor_id (optional)
     * @param  string $shipping_agent_creditor_account_no (optional)
     * @param  string $shipping_agent_creditor_name (optional)
     * @param  string $import_cost_clearing_account (optional)
     * @param  string $lines (optional)
     * @param  string $purchase_orders (optional)
     * @param  string $import_costs (optional)
     * @param  string $vot_is (optional)
     * @param  string $invoices (optional)
     * @param  string $custom_field_values (optional)
     * @param  \Jiwa\JiwaModel\LandedCostShipmentPOSTRequest $body (optional)
     *
     * @throws \Jiwa\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Jiwa\JiwaModel\Shipment, HTTP status code, HTTP response headers (array of strings)
     */
    public function landedCostShipmentPOSTRequestPostWithHttpInfo($accept, $jiwa_stateful = null, $shipment_no = null, $last_saved_date_time = null, $initiated_date = null, $departure_date = null, $expected_arrival_date = null, $scheduled_arrival_date = null, $receipt_date = null, $delivery_notes = null, $status = null, $way_bill_no = null, $vessel_name = null, $container_no = null, $use_voti = null, $shipping_agent_creditor_id = null, $shipping_agent_creditor_account_no = null, $shipping_agent_creditor_name = null, $import_cost_clearing_account = null, $lines = null, $purchase_orders = null, $import_costs = null, $vot_is = null, $invoices = null, $custom_field_values = null, $body = null)
    {
        $returnType = '\Jiwa\JiwaModel\Shipment';
        $request = $this->landedCostShipmentPOSTRequestPostRequest($accept, $jiwa_stateful, $shipment_no, $last_saved_date_time, $initiated_date, $departure_date, $expected_arrival_date, $scheduled_arrival_date, $receipt_date, $delivery_notes, $status, $way_bill_no, $vessel_name, $container_no, $use_voti, $shipping_agent_creditor_id, $shipping_agent_creditor_account_no, $shipping_agent_creditor_name, $import_cost_clearing_account, $lines, $purchase_orders, $import_costs, $vot_is, $invoices, $custom_field_values, $body);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Jiwa\JiwaModel\Shipment',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 401:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Jiwa\JiwaModel\Shipment',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 403:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Jiwa\JiwaModel\Shipment',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 201:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Jiwa\JiwaModel\Shipment',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation landedCostShipmentPOSTRequestPostAsync
     *
     * Creates a shipment.
     *
     * @param  string $accept Accept Header (required)
     * @param  bool $jiwa_stateful Stateful indicator (optional)
     * @param  string $shipment_no (optional)
     * @param  \DateTime $last_saved_date_time (optional)
     * @param  \DateTime $initiated_date (optional)
     * @param  \DateTime $departure_date (optional)
     * @param  \DateTime $expected_arrival_date (optional)
     * @param  \DateTime $scheduled_arrival_date (optional)
     * @param  \DateTime $receipt_date (optional)
     * @param  string $delivery_notes (optional)
     * @param  string $status (optional)
     * @param  string $way_bill_no (optional)
     * @param  string $vessel_name (optional)
     * @param  string $container_no (optional)
     * @param  bool $use_voti (optional)
     * @param  string $shipping_agent_creditor_id (optional)
     * @param  string $shipping_agent_creditor_account_no (optional)
     * @param  string $shipping_agent_creditor_name (optional)
     * @param  string $import_cost_clearing_account (optional)
     * @param  string $lines (optional)
     * @param  string $purchase_orders (optional)
     * @param  string $import_costs (optional)
     * @param  string $vot_is (optional)
     * @param  string $invoices (optional)
     * @param  string $custom_field_values (optional)
     * @param  \Jiwa\JiwaModel\LandedCostShipmentPOSTRequest $body (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function landedCostShipmentPOSTRequestPostAsync($accept, $jiwa_stateful = null, $shipment_no = null, $last_saved_date_time = null, $initiated_date = null, $departure_date = null, $expected_arrival_date = null, $scheduled_arrival_date = null, $receipt_date = null, $delivery_notes = null, $status = null, $way_bill_no = null, $vessel_name = null, $container_no = null, $use_voti = null, $shipping_agent_creditor_id = null, $shipping_agent_creditor_account_no = null, $shipping_agent_creditor_name = null, $import_cost_clearing_account = null, $lines = null, $purchase_orders = null, $import_costs = null, $vot_is = null, $invoices = null, $custom_field_values = null, $body = null)
    {
        return $this->landedCostShipmentPOSTRequestPostAsyncWithHttpInfo($accept, $jiwa_stateful, $shipment_no, $last_saved_date_time, $initiated_date, $departure_date, $expected_arrival_date, $scheduled_arrival_date, $receipt_date, $delivery_notes, $status, $way_bill_no, $vessel_name, $container_no, $use_voti, $shipping_agent_creditor_id, $shipping_agent_creditor_account_no, $shipping_agent_creditor_name, $import_cost_clearing_account, $lines, $purchase_orders, $import_costs, $vot_is, $invoices, $custom_field_values, $body)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation landedCostShipmentPOSTRequestPostAsyncWithHttpInfo
     *
     * Creates a shipment.
     *
     * @param  string $accept Accept Header (required)
     * @param  bool $jiwa_stateful Stateful indicator (optional)
     * @param  string $shipment_no (optional)
     * @param  \DateTime $last_saved_date_time (optional)
     * @param  \DateTime $initiated_date (optional)
     * @param  \DateTime $departure_date (optional)
     * @param  \DateTime $expected_arrival_date (optional)
     * @param  \DateTime $scheduled_arrival_date (optional)
     * @param  \DateTime $receipt_date (optional)
     * @param  string $delivery_notes (optional)
     * @param  string $status (optional)
     * @param  string $way_bill_no (optional)
     * @param  string $vessel_name (optional)
     * @param  string $container_no (optional)
     * @param  bool $use_voti (optional)
     * @param  string $shipping_agent_creditor_id (optional)
     * @param  string $shipping_agent_creditor_account_no (optional)
     * @param  string $shipping_agent_creditor_name (optional)
     * @param  string $import_cost_clearing_account (optional)
     * @param  string $lines (optional)
     * @param  string $purchase_orders (optional)
     * @param  string $import_costs (optional)
     * @param  string $vot_is (optional)
     * @param  string $invoices (optional)
     * @param  string $custom_field_values (optional)
     * @param  \Jiwa\JiwaModel\LandedCostShipmentPOSTRequest $body (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function landedCostShipmentPOSTRequestPostAsyncWithHttpInfo($accept, $jiwa_stateful = null, $shipment_no = null, $last_saved_date_time = null, $initiated_date = null, $departure_date = null, $expected_arrival_date = null, $scheduled_arrival_date = null, $receipt_date = null, $delivery_notes = null, $status = null, $way_bill_no = null, $vessel_name = null, $container_no = null, $use_voti = null, $shipping_agent_creditor_id = null, $shipping_agent_creditor_account_no = null, $shipping_agent_creditor_name = null, $import_cost_clearing_account = null, $lines = null, $purchase_orders = null, $import_costs = null, $vot_is = null, $invoices = null, $custom_field_values = null, $body = null)
    {
        $returnType = '\Jiwa\JiwaModel\Shipment';
        $request = $this->landedCostShipmentPOSTRequestPostRequest($accept, $jiwa_stateful, $shipment_no, $last_saved_date_time, $initiated_date, $departure_date, $expected_arrival_date, $scheduled_arrival_date, $receipt_date, $delivery_notes, $status, $way_bill_no, $vessel_name, $container_no, $use_voti, $shipping_agent_creditor_id, $shipping_agent_creditor_account_no, $shipping_agent_creditor_name, $import_cost_clearing_account, $lines, $purchase_orders, $import_costs, $vot_is, $invoices, $custom_field_values, $body);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'landedCostShipmentPOSTRequestPost'
     *
     * @param  string $accept Accept Header (required)
     * @param  bool $jiwa_stateful Stateful indicator (optional)
     * @param  string $shipment_no (optional)
     * @param  \DateTime $last_saved_date_time (optional)
     * @param  \DateTime $initiated_date (optional)
     * @param  \DateTime $departure_date (optional)
     * @param  \DateTime $expected_arrival_date (optional)
     * @param  \DateTime $scheduled_arrival_date (optional)
     * @param  \DateTime $receipt_date (optional)
     * @param  string $delivery_notes (optional)
     * @param  string $status (optional)
     * @param  string $way_bill_no (optional)
     * @param  string $vessel_name (optional)
     * @param  string $container_no (optional)
     * @param  bool $use_voti (optional)
     * @param  string $shipping_agent_creditor_id (optional)
     * @param  string $shipping_agent_creditor_account_no (optional)
     * @param  string $shipping_agent_creditor_name (optional)
     * @param  string $import_cost_clearing_account (optional)
     * @param  string $lines (optional)
     * @param  string $purchase_orders (optional)
     * @param  string $import_costs (optional)
     * @param  string $vot_is (optional)
     * @param  string $invoices (optional)
     * @param  string $custom_field_values (optional)
     * @param  \Jiwa\JiwaModel\LandedCostShipmentPOSTRequest $body (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function landedCostShipmentPOSTRequestPostRequest($accept, $jiwa_stateful = null, $shipment_no = null, $last_saved_date_time = null, $initiated_date = null, $departure_date = null, $expected_arrival_date = null, $scheduled_arrival_date = null, $receipt_date = null, $delivery_notes = null, $status = null, $way_bill_no = null, $vessel_name = null, $container_no = null, $use_voti = null, $shipping_agent_creditor_id = null, $shipping_agent_creditor_account_no = null, $shipping_agent_creditor_name = null, $import_cost_clearing_account = null, $lines = null, $purchase_orders = null, $import_costs = null, $vot_is = null, $invoices = null, $custom_field_values = null, $body = null)
    {
        // verify the required parameter 'accept' is set
        if ($accept === null || (is_array($accept) && count($accept) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $accept when calling landedCostShipmentPOSTRequestPost'
            );
        }

        $resourcePath = '/Shipments';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        if ($shipment_no !== null) {
            $queryParams['ShipmentNo'] = ObjectSerializer::toQueryValue($shipment_no);
        }
        // query params
        if ($last_saved_date_time !== null) {
            $queryParams['LastSavedDateTime'] = ObjectSerializer::toQueryValue($last_saved_date_time);
        }
        // query params
        if ($initiated_date !== null) {
            $queryParams['InitiatedDate'] = ObjectSerializer::toQueryValue($initiated_date);
        }
        // query params
        if ($departure_date !== null) {
            $queryParams['DepartureDate'] = ObjectSerializer::toQueryValue($departure_date);
        }
        // query params
        if ($expected_arrival_date !== null) {
            $queryParams['ExpectedArrivalDate'] = ObjectSerializer::toQueryValue($expected_arrival_date);
        }
        // query params
        if ($scheduled_arrival_date !== null) {
            $queryParams['ScheduledArrivalDate'] = ObjectSerializer::toQueryValue($scheduled_arrival_date);
        }
        // query params
        if ($receipt_date !== null) {
            $queryParams['ReceiptDate'] = ObjectSerializer::toQueryValue($receipt_date);
        }
        // query params
        if ($delivery_notes !== null) {
            $queryParams['DeliveryNotes'] = ObjectSerializer::toQueryValue($delivery_notes);
        }
        // query params
        if ($status !== null) {
            $queryParams['Status'] = ObjectSerializer::toQueryValue($status);
        }
        // query params
        if ($way_bill_no !== null) {
            $queryParams['WayBillNo'] = ObjectSerializer::toQueryValue($way_bill_no);
        }
        // query params
        if ($vessel_name !== null) {
            $queryParams['VesselName'] = ObjectSerializer::toQueryValue($vessel_name);
        }
        // query params
        if ($container_no !== null) {
            $queryParams['ContainerNo'] = ObjectSerializer::toQueryValue($container_no);
        }
        // query params
        if ($use_voti !== null) {
            $queryParams['UseVOTI'] = ObjectSerializer::toQueryValue($use_voti);
        }
        // query params
        if ($shipping_agent_creditor_id !== null) {
            $queryParams['ShippingAgentCreditorID'] = ObjectSerializer::toQueryValue($shipping_agent_creditor_id);
        }
        // query params
        if ($shipping_agent_creditor_account_no !== null) {
            $queryParams['ShippingAgentCreditorAccountNo'] = ObjectSerializer::toQueryValue($shipping_agent_creditor_account_no);
        }
        // query params
        if ($shipping_agent_creditor_name !== null) {
            $queryParams['ShippingAgentCreditorName'] = ObjectSerializer::toQueryValue($shipping_agent_creditor_name);
        }
        // query params
        if ($import_cost_clearing_account !== null) {
            $queryParams['ImportCostClearingAccount'] = ObjectSerializer::toQueryValue($import_cost_clearing_account);
        }
        // query params
        if ($lines !== null) {
            $queryParams['Lines'] = ObjectSerializer::toQueryValue($lines);
        }
        // query params
        if ($purchase_orders !== null) {
            $queryParams['PurchaseOrders'] = ObjectSerializer::toQueryValue($purchase_orders);
        }
        // query params
        if ($import_costs !== null) {
            $queryParams['ImportCosts'] = ObjectSerializer::toQueryValue($import_costs);
        }
        // query params
        if ($vot_is !== null) {
            $queryParams['VOTIs'] = ObjectSerializer::toQueryValue($vot_is);
        }
        // query params
        if ($invoices !== null) {
            $queryParams['Invoices'] = ObjectSerializer::toQueryValue($invoices);
        }
        // query params
        if ($custom_field_values !== null) {
            $queryParams['CustomFieldValues'] = ObjectSerializer::toQueryValue($custom_field_values);
        }
        // header params
        if ($accept !== null) {
            $headerParams['Accept'] = ObjectSerializer::toHeaderValue($accept);
        }
        // header params
        if ($jiwa_stateful !== null) {
            $headerParams['jiwa-stateful'] = ObjectSerializer::toHeaderValue($jiwa_stateful);
        }


        // body params
        $_tempBody = null;
        if (isset($body)) {
            $_tempBody = $body;
        }

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json', 'application/xml']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json', 'application/xml'],
                ['application/x-www-form-urlencoded', 'application/json', 'application/xml']
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            
            if($headers['Content-Type'] === 'application/json') {
                // \stdClass has no __toString(), so we should encode it manually
                if ($httpBody instanceof \stdClass) {
                    $httpBody = \GuzzleHttp\json_encode($httpBody);
                }
                // array has no __toString(), so we should encode it manually
                if(is_array($httpBody)) {
                    $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($httpBody));
                }
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\Query::build($formParams);
            }
        }

        // this endpoint requires HTTP basic authentication
        if ($this->config->getUsername() !== null || $this->config->getPassword() !== null) {
            $headers['Authorization'] = 'Basic ' . base64_encode($this->config->getUsername() . ":" . $this->config->getPassword());
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\Query::build($queryParams);
        return new Request(
            'POST',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation landedCostShipmentPurchaseOrderDELETERequestShipmentIDPurchaseOrdersOrderIDDelete
     *
     * Deletes a purchase order from a shipment.
     *
     * @param  string $accept Accept Header (required)
     * @param  string $shipment_id shipment_id (required)
     * @param  string $order_id order_id (required)
     * @param  bool $jiwa_stateful Stateful indicator (optional)
     * @param  string $purchase_order_received_id purchase_order_received_id (optional)
     * @param  string $order_no order_no (optional)
     * @param  \DateTime $ordered_date ordered_date (optional)
     * @param  int $item_no item_no (optional)
     * @param  string $user_field1 user_field1 (optional)
     * @param  string $user_field2 user_field2 (optional)
     * @param  string $user_field3 user_field3 (optional)
     * @param  string $user_field4 user_field4 (optional)
     * @param  string $user_field5 user_field5 (optional)
     * @param  string $user_field6 user_field6 (optional)
     * @param  string $user_field7 user_field7 (optional)
     * @param  string $user_field8 user_field8 (optional)
     * @param  string $user_field9 user_field9 (optional)
     * @param  string $user_field10 user_field10 (optional)
     *
     * @throws \Jiwa\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Jiwa\JiwaModel\Object
     */
    public function landedCostShipmentPurchaseOrderDELETERequestShipmentIDPurchaseOrdersOrderIDDelete($accept, $shipment_id, $order_id, $jiwa_stateful = null, $purchase_order_received_id = null, $order_no = null, $ordered_date = null, $item_no = null, $user_field1 = null, $user_field2 = null, $user_field3 = null, $user_field4 = null, $user_field5 = null, $user_field6 = null, $user_field7 = null, $user_field8 = null, $user_field9 = null, $user_field10 = null)
    {
        list($response) = $this->landedCostShipmentPurchaseOrderDELETERequestShipmentIDPurchaseOrdersOrderIDDeleteWithHttpInfo($accept, $shipment_id, $order_id, $jiwa_stateful, $purchase_order_received_id, $order_no, $ordered_date, $item_no, $user_field1, $user_field2, $user_field3, $user_field4, $user_field5, $user_field6, $user_field7, $user_field8, $user_field9, $user_field10);
        return $response;
    }

    /**
     * Operation landedCostShipmentPurchaseOrderDELETERequestShipmentIDPurchaseOrdersOrderIDDeleteWithHttpInfo
     *
     * Deletes a purchase order from a shipment.
     *
     * @param  string $accept Accept Header (required)
     * @param  string $shipment_id (required)
     * @param  string $order_id (required)
     * @param  bool $jiwa_stateful Stateful indicator (optional)
     * @param  string $purchase_order_received_id (optional)
     * @param  string $order_no (optional)
     * @param  \DateTime $ordered_date (optional)
     * @param  int $item_no (optional)
     * @param  string $user_field1 (optional)
     * @param  string $user_field2 (optional)
     * @param  string $user_field3 (optional)
     * @param  string $user_field4 (optional)
     * @param  string $user_field5 (optional)
     * @param  string $user_field6 (optional)
     * @param  string $user_field7 (optional)
     * @param  string $user_field8 (optional)
     * @param  string $user_field9 (optional)
     * @param  string $user_field10 (optional)
     *
     * @throws \Jiwa\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Jiwa\JiwaModel\Object, HTTP status code, HTTP response headers (array of strings)
     */
    public function landedCostShipmentPurchaseOrderDELETERequestShipmentIDPurchaseOrdersOrderIDDeleteWithHttpInfo($accept, $shipment_id, $order_id, $jiwa_stateful = null, $purchase_order_received_id = null, $order_no = null, $ordered_date = null, $item_no = null, $user_field1 = null, $user_field2 = null, $user_field3 = null, $user_field4 = null, $user_field5 = null, $user_field6 = null, $user_field7 = null, $user_field8 = null, $user_field9 = null, $user_field10 = null)
    {
        $returnType = '\Jiwa\JiwaModel\Object';
        $request = $this->landedCostShipmentPurchaseOrderDELETERequestShipmentIDPurchaseOrdersOrderIDDeleteRequest($accept, $shipment_id, $order_id, $jiwa_stateful, $purchase_order_received_id, $order_no, $ordered_date, $item_no, $user_field1, $user_field2, $user_field3, $user_field4, $user_field5, $user_field6, $user_field7, $user_field8, $user_field9, $user_field10);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Jiwa\JiwaModel\Object',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 404:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Jiwa\JiwaModel\Object',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 204:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Jiwa\JiwaModel\Object',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 401:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Jiwa\JiwaModel\Object',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 403:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Jiwa\JiwaModel\Object',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation landedCostShipmentPurchaseOrderDELETERequestShipmentIDPurchaseOrdersOrderIDDeleteAsync
     *
     * Deletes a purchase order from a shipment.
     *
     * @param  string $accept Accept Header (required)
     * @param  string $shipment_id (required)
     * @param  string $order_id (required)
     * @param  bool $jiwa_stateful Stateful indicator (optional)
     * @param  string $purchase_order_received_id (optional)
     * @param  string $order_no (optional)
     * @param  \DateTime $ordered_date (optional)
     * @param  int $item_no (optional)
     * @param  string $user_field1 (optional)
     * @param  string $user_field2 (optional)
     * @param  string $user_field3 (optional)
     * @param  string $user_field4 (optional)
     * @param  string $user_field5 (optional)
     * @param  string $user_field6 (optional)
     * @param  string $user_field7 (optional)
     * @param  string $user_field8 (optional)
     * @param  string $user_field9 (optional)
     * @param  string $user_field10 (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function landedCostShipmentPurchaseOrderDELETERequestShipmentIDPurchaseOrdersOrderIDDeleteAsync($accept, $shipment_id, $order_id, $jiwa_stateful = null, $purchase_order_received_id = null, $order_no = null, $ordered_date = null, $item_no = null, $user_field1 = null, $user_field2 = null, $user_field3 = null, $user_field4 = null, $user_field5 = null, $user_field6 = null, $user_field7 = null, $user_field8 = null, $user_field9 = null, $user_field10 = null)
    {
        return $this->landedCostShipmentPurchaseOrderDELETERequestShipmentIDPurchaseOrdersOrderIDDeleteAsyncWithHttpInfo($accept, $shipment_id, $order_id, $jiwa_stateful, $purchase_order_received_id, $order_no, $ordered_date, $item_no, $user_field1, $user_field2, $user_field3, $user_field4, $user_field5, $user_field6, $user_field7, $user_field8, $user_field9, $user_field10)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation landedCostShipmentPurchaseOrderDELETERequestShipmentIDPurchaseOrdersOrderIDDeleteAsyncWithHttpInfo
     *
     * Deletes a purchase order from a shipment.
     *
     * @param  string $accept Accept Header (required)
     * @param  string $shipment_id (required)
     * @param  string $order_id (required)
     * @param  bool $jiwa_stateful Stateful indicator (optional)
     * @param  string $purchase_order_received_id (optional)
     * @param  string $order_no (optional)
     * @param  \DateTime $ordered_date (optional)
     * @param  int $item_no (optional)
     * @param  string $user_field1 (optional)
     * @param  string $user_field2 (optional)
     * @param  string $user_field3 (optional)
     * @param  string $user_field4 (optional)
     * @param  string $user_field5 (optional)
     * @param  string $user_field6 (optional)
     * @param  string $user_field7 (optional)
     * @param  string $user_field8 (optional)
     * @param  string $user_field9 (optional)
     * @param  string $user_field10 (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function landedCostShipmentPurchaseOrderDELETERequestShipmentIDPurchaseOrdersOrderIDDeleteAsyncWithHttpInfo($accept, $shipment_id, $order_id, $jiwa_stateful = null, $purchase_order_received_id = null, $order_no = null, $ordered_date = null, $item_no = null, $user_field1 = null, $user_field2 = null, $user_field3 = null, $user_field4 = null, $user_field5 = null, $user_field6 = null, $user_field7 = null, $user_field8 = null, $user_field9 = null, $user_field10 = null)
    {
        $returnType = '\Jiwa\JiwaModel\Object';
        $request = $this->landedCostShipmentPurchaseOrderDELETERequestShipmentIDPurchaseOrdersOrderIDDeleteRequest($accept, $shipment_id, $order_id, $jiwa_stateful, $purchase_order_received_id, $order_no, $ordered_date, $item_no, $user_field1, $user_field2, $user_field3, $user_field4, $user_field5, $user_field6, $user_field7, $user_field8, $user_field9, $user_field10);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'landedCostShipmentPurchaseOrderDELETERequestShipmentIDPurchaseOrdersOrderIDDelete'
     *
     * @param  string $accept Accept Header (required)
     * @param  string $shipment_id (required)
     * @param  string $order_id (required)
     * @param  bool $jiwa_stateful Stateful indicator (optional)
     * @param  string $purchase_order_received_id (optional)
     * @param  string $order_no (optional)
     * @param  \DateTime $ordered_date (optional)
     * @param  int $item_no (optional)
     * @param  string $user_field1 (optional)
     * @param  string $user_field2 (optional)
     * @param  string $user_field3 (optional)
     * @param  string $user_field4 (optional)
     * @param  string $user_field5 (optional)
     * @param  string $user_field6 (optional)
     * @param  string $user_field7 (optional)
     * @param  string $user_field8 (optional)
     * @param  string $user_field9 (optional)
     * @param  string $user_field10 (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function landedCostShipmentPurchaseOrderDELETERequestShipmentIDPurchaseOrdersOrderIDDeleteRequest($accept, $shipment_id, $order_id, $jiwa_stateful = null, $purchase_order_received_id = null, $order_no = null, $ordered_date = null, $item_no = null, $user_field1 = null, $user_field2 = null, $user_field3 = null, $user_field4 = null, $user_field5 = null, $user_field6 = null, $user_field7 = null, $user_field8 = null, $user_field9 = null, $user_field10 = null)
    {
        // verify the required parameter 'accept' is set
        if ($accept === null || (is_array($accept) && count($accept) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $accept when calling landedCostShipmentPurchaseOrderDELETERequestShipmentIDPurchaseOrdersOrderIDDelete'
            );
        }
        // verify the required parameter 'shipment_id' is set
        if ($shipment_id === null || (is_array($shipment_id) && count($shipment_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $shipment_id when calling landedCostShipmentPurchaseOrderDELETERequestShipmentIDPurchaseOrdersOrderIDDelete'
            );
        }
        // verify the required parameter 'order_id' is set
        if ($order_id === null || (is_array($order_id) && count($order_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $order_id when calling landedCostShipmentPurchaseOrderDELETERequestShipmentIDPurchaseOrdersOrderIDDelete'
            );
        }

        $resourcePath = '/Shipments/{ShipmentID}/PurchaseOrders/{OrderID}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        if ($purchase_order_received_id !== null) {
            $queryParams['PurchaseOrderReceivedID'] = ObjectSerializer::toQueryValue($purchase_order_received_id);
        }
        // query params
        if ($order_no !== null) {
            $queryParams['OrderNo'] = ObjectSerializer::toQueryValue($order_no);
        }
        // query params
        if ($ordered_date !== null) {
            $queryParams['OrderedDate'] = ObjectSerializer::toQueryValue($ordered_date);
        }
        // query params
        if ($item_no !== null) {
            $queryParams['ItemNo'] = ObjectSerializer::toQueryValue($item_no);
        }
        // query params
        if ($user_field1 !== null) {
            $queryParams['UserField1'] = ObjectSerializer::toQueryValue($user_field1);
        }
        // query params
        if ($user_field2 !== null) {
            $queryParams['UserField2'] = ObjectSerializer::toQueryValue($user_field2);
        }
        // query params
        if ($user_field3 !== null) {
            $queryParams['UserField3'] = ObjectSerializer::toQueryValue($user_field3);
        }
        // query params
        if ($user_field4 !== null) {
            $queryParams['UserField4'] = ObjectSerializer::toQueryValue($user_field4);
        }
        // query params
        if ($user_field5 !== null) {
            $queryParams['UserField5'] = ObjectSerializer::toQueryValue($user_field5);
        }
        // query params
        if ($user_field6 !== null) {
            $queryParams['UserField6'] = ObjectSerializer::toQueryValue($user_field6);
        }
        // query params
        if ($user_field7 !== null) {
            $queryParams['UserField7'] = ObjectSerializer::toQueryValue($user_field7);
        }
        // query params
        if ($user_field8 !== null) {
            $queryParams['UserField8'] = ObjectSerializer::toQueryValue($user_field8);
        }
        // query params
        if ($user_field9 !== null) {
            $queryParams['UserField9'] = ObjectSerializer::toQueryValue($user_field9);
        }
        // query params
        if ($user_field10 !== null) {
            $queryParams['UserField10'] = ObjectSerializer::toQueryValue($user_field10);
        }
        // header params
        if ($accept !== null) {
            $headerParams['Accept'] = ObjectSerializer::toHeaderValue($accept);
        }
        // header params
        if ($jiwa_stateful !== null) {
            $headerParams['jiwa-stateful'] = ObjectSerializer::toHeaderValue($jiwa_stateful);
        }

        // path params
        if ($shipment_id !== null) {
            $resourcePath = str_replace(
                '{' . 'ShipmentID' . '}',
                ObjectSerializer::toPathValue($shipment_id),
                $resourcePath
            );
        }
        // path params
        if ($order_id !== null) {
            $resourcePath = str_replace(
                '{' . 'OrderID' . '}',
                ObjectSerializer::toPathValue($order_id),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json', 'application/xml']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json', 'application/xml'],
                ['application/x-www-form-urlencoded', 'application/json', 'application/xml']
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            
            if($headers['Content-Type'] === 'application/json') {
                // \stdClass has no __toString(), so we should encode it manually
                if ($httpBody instanceof \stdClass) {
                    $httpBody = \GuzzleHttp\json_encode($httpBody);
                }
                // array has no __toString(), so we should encode it manually
                if(is_array($httpBody)) {
                    $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($httpBody));
                }
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\Query::build($formParams);
            }
        }

        // this endpoint requires HTTP basic authentication
        if ($this->config->getUsername() !== null || $this->config->getPassword() !== null) {
            $headers['Authorization'] = 'Basic ' . base64_encode($this->config->getUsername() . ":" . $this->config->getPassword());
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\Query::build($queryParams);
        return new Request(
            'DELETE',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation landedCostShipmentPurchaseOrderGETRequestShipmentIDPurchaseOrdersOrderIDGet
     *
     * Retrieves a shipment purchase order.
     *
     * @param  string $accept Accept Header (required)
     * @param  string $shipment_id shipment_id (required)
     * @param  string $order_id order_id (required)
     * @param  bool $jiwa_stateful Stateful indicator (optional)
     *
     * @throws \Jiwa\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Jiwa\JiwaModel\ShipmentPurchaseOrderReceived
     */
    public function landedCostShipmentPurchaseOrderGETRequestShipmentIDPurchaseOrdersOrderIDGet($accept, $shipment_id, $order_id, $jiwa_stateful = null)
    {
        list($response) = $this->landedCostShipmentPurchaseOrderGETRequestShipmentIDPurchaseOrdersOrderIDGetWithHttpInfo($accept, $shipment_id, $order_id, $jiwa_stateful);
        return $response;
    }

    /**
     * Operation landedCostShipmentPurchaseOrderGETRequestShipmentIDPurchaseOrdersOrderIDGetWithHttpInfo
     *
     * Retrieves a shipment purchase order.
     *
     * @param  string $accept Accept Header (required)
     * @param  string $shipment_id (required)
     * @param  string $order_id (required)
     * @param  bool $jiwa_stateful Stateful indicator (optional)
     *
     * @throws \Jiwa\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Jiwa\JiwaModel\ShipmentPurchaseOrderReceived, HTTP status code, HTTP response headers (array of strings)
     */
    public function landedCostShipmentPurchaseOrderGETRequestShipmentIDPurchaseOrdersOrderIDGetWithHttpInfo($accept, $shipment_id, $order_id, $jiwa_stateful = null)
    {
        $returnType = '\Jiwa\JiwaModel\ShipmentPurchaseOrderReceived';
        $request = $this->landedCostShipmentPurchaseOrderGETRequestShipmentIDPurchaseOrdersOrderIDGetRequest($accept, $shipment_id, $order_id, $jiwa_stateful);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Jiwa\JiwaModel\ShipmentPurchaseOrderReceived',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 401:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Jiwa\JiwaModel\ShipmentPurchaseOrderReceived',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 403:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Jiwa\JiwaModel\ShipmentPurchaseOrderReceived',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 404:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Jiwa\JiwaModel\ShipmentPurchaseOrderReceived',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation landedCostShipmentPurchaseOrderGETRequestShipmentIDPurchaseOrdersOrderIDGetAsync
     *
     * Retrieves a shipment purchase order.
     *
     * @param  string $accept Accept Header (required)
     * @param  string $shipment_id (required)
     * @param  string $order_id (required)
     * @param  bool $jiwa_stateful Stateful indicator (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function landedCostShipmentPurchaseOrderGETRequestShipmentIDPurchaseOrdersOrderIDGetAsync($accept, $shipment_id, $order_id, $jiwa_stateful = null)
    {
        return $this->landedCostShipmentPurchaseOrderGETRequestShipmentIDPurchaseOrdersOrderIDGetAsyncWithHttpInfo($accept, $shipment_id, $order_id, $jiwa_stateful)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation landedCostShipmentPurchaseOrderGETRequestShipmentIDPurchaseOrdersOrderIDGetAsyncWithHttpInfo
     *
     * Retrieves a shipment purchase order.
     *
     * @param  string $accept Accept Header (required)
     * @param  string $shipment_id (required)
     * @param  string $order_id (required)
     * @param  bool $jiwa_stateful Stateful indicator (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function landedCostShipmentPurchaseOrderGETRequestShipmentIDPurchaseOrdersOrderIDGetAsyncWithHttpInfo($accept, $shipment_id, $order_id, $jiwa_stateful = null)
    {
        $returnType = '\Jiwa\JiwaModel\ShipmentPurchaseOrderReceived';
        $request = $this->landedCostShipmentPurchaseOrderGETRequestShipmentIDPurchaseOrdersOrderIDGetRequest($accept, $shipment_id, $order_id, $jiwa_stateful);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'landedCostShipmentPurchaseOrderGETRequestShipmentIDPurchaseOrdersOrderIDGet'
     *
     * @param  string $accept Accept Header (required)
     * @param  string $shipment_id (required)
     * @param  string $order_id (required)
     * @param  bool $jiwa_stateful Stateful indicator (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function landedCostShipmentPurchaseOrderGETRequestShipmentIDPurchaseOrdersOrderIDGetRequest($accept, $shipment_id, $order_id, $jiwa_stateful = null)
    {
        // verify the required parameter 'accept' is set
        if ($accept === null || (is_array($accept) && count($accept) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $accept when calling landedCostShipmentPurchaseOrderGETRequestShipmentIDPurchaseOrdersOrderIDGet'
            );
        }
        // verify the required parameter 'shipment_id' is set
        if ($shipment_id === null || (is_array($shipment_id) && count($shipment_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $shipment_id when calling landedCostShipmentPurchaseOrderGETRequestShipmentIDPurchaseOrdersOrderIDGet'
            );
        }
        // verify the required parameter 'order_id' is set
        if ($order_id === null || (is_array($order_id) && count($order_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $order_id when calling landedCostShipmentPurchaseOrderGETRequestShipmentIDPurchaseOrdersOrderIDGet'
            );
        }

        $resourcePath = '/Shipments/{ShipmentID}/PurchaseOrders/{OrderID}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // header params
        if ($accept !== null) {
            $headerParams['Accept'] = ObjectSerializer::toHeaderValue($accept);
        }
        // header params
        if ($jiwa_stateful !== null) {
            $headerParams['jiwa-stateful'] = ObjectSerializer::toHeaderValue($jiwa_stateful);
        }

        // path params
        if ($shipment_id !== null) {
            $resourcePath = str_replace(
                '{' . 'ShipmentID' . '}',
                ObjectSerializer::toPathValue($shipment_id),
                $resourcePath
            );
        }
        // path params
        if ($order_id !== null) {
            $resourcePath = str_replace(
                '{' . 'OrderID' . '}',
                ObjectSerializer::toPathValue($order_id),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json', 'application/xml']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json', 'application/xml'],
                ['application/x-www-form-urlencoded', 'application/json', 'application/xml']
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            
            if($headers['Content-Type'] === 'application/json') {
                // \stdClass has no __toString(), so we should encode it manually
                if ($httpBody instanceof \stdClass) {
                    $httpBody = \GuzzleHttp\json_encode($httpBody);
                }
                // array has no __toString(), so we should encode it manually
                if(is_array($httpBody)) {
                    $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($httpBody));
                }
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\Query::build($formParams);
            }
        }

        // this endpoint requires HTTP basic authentication
        if ($this->config->getUsername() !== null || $this->config->getPassword() !== null) {
            $headers['Authorization'] = 'Basic ' . base64_encode($this->config->getUsername() . ":" . $this->config->getPassword());
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\Query::build($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation landedCostShipmentPurchaseOrderPOSTRequestShipmentIDPurchaseOrdersPost
     *
     * Appends a purchase order to a shipment.
     *
     * @param  string $accept Accept Header (required)
     * @param  string $shipment_id shipment_id (required)
     * @param  bool $jiwa_stateful Stateful indicator (optional)
     * @param  string $order_id order_id (optional)
     * @param  string $purchase_order_received_id purchase_order_received_id (optional)
     * @param  string $order_no order_no (optional)
     * @param  \DateTime $ordered_date ordered_date (optional)
     * @param  int $item_no item_no (optional)
     * @param  string $user_field1 user_field1 (optional)
     * @param  string $user_field2 user_field2 (optional)
     * @param  string $user_field3 user_field3 (optional)
     * @param  string $user_field4 user_field4 (optional)
     * @param  string $user_field5 user_field5 (optional)
     * @param  string $user_field6 user_field6 (optional)
     * @param  string $user_field7 user_field7 (optional)
     * @param  string $user_field8 user_field8 (optional)
     * @param  string $user_field9 user_field9 (optional)
     * @param  string $user_field10 user_field10 (optional)
     * @param  \Jiwa\JiwaModel\LandedCostShipmentPurchaseOrderPOSTRequest $body body (optional)
     *
     * @throws \Jiwa\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Jiwa\JiwaModel\ShipmentPurchaseOrderReceived
     */
    public function landedCostShipmentPurchaseOrderPOSTRequestShipmentIDPurchaseOrdersPost($accept, $shipment_id, $jiwa_stateful = null, $order_id = null, $purchase_order_received_id = null, $order_no = null, $ordered_date = null, $item_no = null, $user_field1 = null, $user_field2 = null, $user_field3 = null, $user_field4 = null, $user_field5 = null, $user_field6 = null, $user_field7 = null, $user_field8 = null, $user_field9 = null, $user_field10 = null, $body = null)
    {
        list($response) = $this->landedCostShipmentPurchaseOrderPOSTRequestShipmentIDPurchaseOrdersPostWithHttpInfo($accept, $shipment_id, $jiwa_stateful, $order_id, $purchase_order_received_id, $order_no, $ordered_date, $item_no, $user_field1, $user_field2, $user_field3, $user_field4, $user_field5, $user_field6, $user_field7, $user_field8, $user_field9, $user_field10, $body);
        return $response;
    }

    /**
     * Operation landedCostShipmentPurchaseOrderPOSTRequestShipmentIDPurchaseOrdersPostWithHttpInfo
     *
     * Appends a purchase order to a shipment.
     *
     * @param  string $accept Accept Header (required)
     * @param  string $shipment_id (required)
     * @param  bool $jiwa_stateful Stateful indicator (optional)
     * @param  string $order_id (optional)
     * @param  string $purchase_order_received_id (optional)
     * @param  string $order_no (optional)
     * @param  \DateTime $ordered_date (optional)
     * @param  int $item_no (optional)
     * @param  string $user_field1 (optional)
     * @param  string $user_field2 (optional)
     * @param  string $user_field3 (optional)
     * @param  string $user_field4 (optional)
     * @param  string $user_field5 (optional)
     * @param  string $user_field6 (optional)
     * @param  string $user_field7 (optional)
     * @param  string $user_field8 (optional)
     * @param  string $user_field9 (optional)
     * @param  string $user_field10 (optional)
     * @param  \Jiwa\JiwaModel\LandedCostShipmentPurchaseOrderPOSTRequest $body (optional)
     *
     * @throws \Jiwa\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Jiwa\JiwaModel\ShipmentPurchaseOrderReceived, HTTP status code, HTTP response headers (array of strings)
     */
    public function landedCostShipmentPurchaseOrderPOSTRequestShipmentIDPurchaseOrdersPostWithHttpInfo($accept, $shipment_id, $jiwa_stateful = null, $order_id = null, $purchase_order_received_id = null, $order_no = null, $ordered_date = null, $item_no = null, $user_field1 = null, $user_field2 = null, $user_field3 = null, $user_field4 = null, $user_field5 = null, $user_field6 = null, $user_field7 = null, $user_field8 = null, $user_field9 = null, $user_field10 = null, $body = null)
    {
        $returnType = '\Jiwa\JiwaModel\ShipmentPurchaseOrderReceived';
        $request = $this->landedCostShipmentPurchaseOrderPOSTRequestShipmentIDPurchaseOrdersPostRequest($accept, $shipment_id, $jiwa_stateful, $order_id, $purchase_order_received_id, $order_no, $ordered_date, $item_no, $user_field1, $user_field2, $user_field3, $user_field4, $user_field5, $user_field6, $user_field7, $user_field8, $user_field9, $user_field10, $body);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Jiwa\JiwaModel\ShipmentPurchaseOrderReceived',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 404:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Jiwa\JiwaModel\ShipmentPurchaseOrderReceived',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 403:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Jiwa\JiwaModel\ShipmentPurchaseOrderReceived',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 201:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Jiwa\JiwaModel\ShipmentPurchaseOrderReceived',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 401:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Jiwa\JiwaModel\ShipmentPurchaseOrderReceived',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation landedCostShipmentPurchaseOrderPOSTRequestShipmentIDPurchaseOrdersPostAsync
     *
     * Appends a purchase order to a shipment.
     *
     * @param  string $accept Accept Header (required)
     * @param  string $shipment_id (required)
     * @param  bool $jiwa_stateful Stateful indicator (optional)
     * @param  string $order_id (optional)
     * @param  string $purchase_order_received_id (optional)
     * @param  string $order_no (optional)
     * @param  \DateTime $ordered_date (optional)
     * @param  int $item_no (optional)
     * @param  string $user_field1 (optional)
     * @param  string $user_field2 (optional)
     * @param  string $user_field3 (optional)
     * @param  string $user_field4 (optional)
     * @param  string $user_field5 (optional)
     * @param  string $user_field6 (optional)
     * @param  string $user_field7 (optional)
     * @param  string $user_field8 (optional)
     * @param  string $user_field9 (optional)
     * @param  string $user_field10 (optional)
     * @param  \Jiwa\JiwaModel\LandedCostShipmentPurchaseOrderPOSTRequest $body (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function landedCostShipmentPurchaseOrderPOSTRequestShipmentIDPurchaseOrdersPostAsync($accept, $shipment_id, $jiwa_stateful = null, $order_id = null, $purchase_order_received_id = null, $order_no = null, $ordered_date = null, $item_no = null, $user_field1 = null, $user_field2 = null, $user_field3 = null, $user_field4 = null, $user_field5 = null, $user_field6 = null, $user_field7 = null, $user_field8 = null, $user_field9 = null, $user_field10 = null, $body = null)
    {
        return $this->landedCostShipmentPurchaseOrderPOSTRequestShipmentIDPurchaseOrdersPostAsyncWithHttpInfo($accept, $shipment_id, $jiwa_stateful, $order_id, $purchase_order_received_id, $order_no, $ordered_date, $item_no, $user_field1, $user_field2, $user_field3, $user_field4, $user_field5, $user_field6, $user_field7, $user_field8, $user_field9, $user_field10, $body)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation landedCostShipmentPurchaseOrderPOSTRequestShipmentIDPurchaseOrdersPostAsyncWithHttpInfo
     *
     * Appends a purchase order to a shipment.
     *
     * @param  string $accept Accept Header (required)
     * @param  string $shipment_id (required)
     * @param  bool $jiwa_stateful Stateful indicator (optional)
     * @param  string $order_id (optional)
     * @param  string $purchase_order_received_id (optional)
     * @param  string $order_no (optional)
     * @param  \DateTime $ordered_date (optional)
     * @param  int $item_no (optional)
     * @param  string $user_field1 (optional)
     * @param  string $user_field2 (optional)
     * @param  string $user_field3 (optional)
     * @param  string $user_field4 (optional)
     * @param  string $user_field5 (optional)
     * @param  string $user_field6 (optional)
     * @param  string $user_field7 (optional)
     * @param  string $user_field8 (optional)
     * @param  string $user_field9 (optional)
     * @param  string $user_field10 (optional)
     * @param  \Jiwa\JiwaModel\LandedCostShipmentPurchaseOrderPOSTRequest $body (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function landedCostShipmentPurchaseOrderPOSTRequestShipmentIDPurchaseOrdersPostAsyncWithHttpInfo($accept, $shipment_id, $jiwa_stateful = null, $order_id = null, $purchase_order_received_id = null, $order_no = null, $ordered_date = null, $item_no = null, $user_field1 = null, $user_field2 = null, $user_field3 = null, $user_field4 = null, $user_field5 = null, $user_field6 = null, $user_field7 = null, $user_field8 = null, $user_field9 = null, $user_field10 = null, $body = null)
    {
        $returnType = '\Jiwa\JiwaModel\ShipmentPurchaseOrderReceived';
        $request = $this->landedCostShipmentPurchaseOrderPOSTRequestShipmentIDPurchaseOrdersPostRequest($accept, $shipment_id, $jiwa_stateful, $order_id, $purchase_order_received_id, $order_no, $ordered_date, $item_no, $user_field1, $user_field2, $user_field3, $user_field4, $user_field5, $user_field6, $user_field7, $user_field8, $user_field9, $user_field10, $body);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'landedCostShipmentPurchaseOrderPOSTRequestShipmentIDPurchaseOrdersPost'
     *
     * @param  string $accept Accept Header (required)
     * @param  string $shipment_id (required)
     * @param  bool $jiwa_stateful Stateful indicator (optional)
     * @param  string $order_id (optional)
     * @param  string $purchase_order_received_id (optional)
     * @param  string $order_no (optional)
     * @param  \DateTime $ordered_date (optional)
     * @param  int $item_no (optional)
     * @param  string $user_field1 (optional)
     * @param  string $user_field2 (optional)
     * @param  string $user_field3 (optional)
     * @param  string $user_field4 (optional)
     * @param  string $user_field5 (optional)
     * @param  string $user_field6 (optional)
     * @param  string $user_field7 (optional)
     * @param  string $user_field8 (optional)
     * @param  string $user_field9 (optional)
     * @param  string $user_field10 (optional)
     * @param  \Jiwa\JiwaModel\LandedCostShipmentPurchaseOrderPOSTRequest $body (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function landedCostShipmentPurchaseOrderPOSTRequestShipmentIDPurchaseOrdersPostRequest($accept, $shipment_id, $jiwa_stateful = null, $order_id = null, $purchase_order_received_id = null, $order_no = null, $ordered_date = null, $item_no = null, $user_field1 = null, $user_field2 = null, $user_field3 = null, $user_field4 = null, $user_field5 = null, $user_field6 = null, $user_field7 = null, $user_field8 = null, $user_field9 = null, $user_field10 = null, $body = null)
    {
        // verify the required parameter 'accept' is set
        if ($accept === null || (is_array($accept) && count($accept) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $accept when calling landedCostShipmentPurchaseOrderPOSTRequestShipmentIDPurchaseOrdersPost'
            );
        }
        // verify the required parameter 'shipment_id' is set
        if ($shipment_id === null || (is_array($shipment_id) && count($shipment_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $shipment_id when calling landedCostShipmentPurchaseOrderPOSTRequestShipmentIDPurchaseOrdersPost'
            );
        }

        $resourcePath = '/Shipments/{ShipmentID}/PurchaseOrders';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        if ($order_id !== null) {
            $queryParams['OrderID'] = ObjectSerializer::toQueryValue($order_id);
        }
        // query params
        if ($purchase_order_received_id !== null) {
            $queryParams['PurchaseOrderReceivedID'] = ObjectSerializer::toQueryValue($purchase_order_received_id);
        }
        // query params
        if ($order_no !== null) {
            $queryParams['OrderNo'] = ObjectSerializer::toQueryValue($order_no);
        }
        // query params
        if ($ordered_date !== null) {
            $queryParams['OrderedDate'] = ObjectSerializer::toQueryValue($ordered_date);
        }
        // query params
        if ($item_no !== null) {
            $queryParams['ItemNo'] = ObjectSerializer::toQueryValue($item_no);
        }
        // query params
        if ($user_field1 !== null) {
            $queryParams['UserField1'] = ObjectSerializer::toQueryValue($user_field1);
        }
        // query params
        if ($user_field2 !== null) {
            $queryParams['UserField2'] = ObjectSerializer::toQueryValue($user_field2);
        }
        // query params
        if ($user_field3 !== null) {
            $queryParams['UserField3'] = ObjectSerializer::toQueryValue($user_field3);
        }
        // query params
        if ($user_field4 !== null) {
            $queryParams['UserField4'] = ObjectSerializer::toQueryValue($user_field4);
        }
        // query params
        if ($user_field5 !== null) {
            $queryParams['UserField5'] = ObjectSerializer::toQueryValue($user_field5);
        }
        // query params
        if ($user_field6 !== null) {
            $queryParams['UserField6'] = ObjectSerializer::toQueryValue($user_field6);
        }
        // query params
        if ($user_field7 !== null) {
            $queryParams['UserField7'] = ObjectSerializer::toQueryValue($user_field7);
        }
        // query params
        if ($user_field8 !== null) {
            $queryParams['UserField8'] = ObjectSerializer::toQueryValue($user_field8);
        }
        // query params
        if ($user_field9 !== null) {
            $queryParams['UserField9'] = ObjectSerializer::toQueryValue($user_field9);
        }
        // query params
        if ($user_field10 !== null) {
            $queryParams['UserField10'] = ObjectSerializer::toQueryValue($user_field10);
        }
        // header params
        if ($accept !== null) {
            $headerParams['Accept'] = ObjectSerializer::toHeaderValue($accept);
        }
        // header params
        if ($jiwa_stateful !== null) {
            $headerParams['jiwa-stateful'] = ObjectSerializer::toHeaderValue($jiwa_stateful);
        }

        // path params
        if ($shipment_id !== null) {
            $resourcePath = str_replace(
                '{' . 'ShipmentID' . '}',
                ObjectSerializer::toPathValue($shipment_id),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;
        if (isset($body)) {
            $_tempBody = $body;
        }

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json', 'application/xml']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json', 'application/xml'],
                ['application/x-www-form-urlencoded', 'application/json', 'application/xml']
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            
            if($headers['Content-Type'] === 'application/json') {
                // \stdClass has no __toString(), so we should encode it manually
                if ($httpBody instanceof \stdClass) {
                    $httpBody = \GuzzleHttp\json_encode($httpBody);
                }
                // array has no __toString(), so we should encode it manually
                if(is_array($httpBody)) {
                    $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($httpBody));
                }
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\Query::build($formParams);
            }
        }

        // this endpoint requires HTTP basic authentication
        if ($this->config->getUsername() !== null || $this->config->getPassword() !== null) {
            $headers['Authorization'] = 'Basic ' . base64_encode($this->config->getUsername() . ":" . $this->config->getPassword());
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\Query::build($queryParams);
        return new Request(
            'POST',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation landedCostShipmentPurchaseOrdersGETManyRequestShipmentIDPurchaseOrdersGet
     *
     * Retrieves a list of shipment purchase orders.
     *
     * @param  string $accept Accept Header (required)
     * @param  string $shipment_id shipment_id (required)
     * @param  bool $jiwa_stateful Stateful indicator (optional)
     *
     * @throws \Jiwa\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Jiwa\JiwaModel\ShipmentPurchaseOrderReceived[]
     */
    public function landedCostShipmentPurchaseOrdersGETManyRequestShipmentIDPurchaseOrdersGet($accept, $shipment_id, $jiwa_stateful = null)
    {
        list($response) = $this->landedCostShipmentPurchaseOrdersGETManyRequestShipmentIDPurchaseOrdersGetWithHttpInfo($accept, $shipment_id, $jiwa_stateful);
        return $response;
    }

    /**
     * Operation landedCostShipmentPurchaseOrdersGETManyRequestShipmentIDPurchaseOrdersGetWithHttpInfo
     *
     * Retrieves a list of shipment purchase orders.
     *
     * @param  string $accept Accept Header (required)
     * @param  string $shipment_id (required)
     * @param  bool $jiwa_stateful Stateful indicator (optional)
     *
     * @throws \Jiwa\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Jiwa\JiwaModel\ShipmentPurchaseOrderReceived[], HTTP status code, HTTP response headers (array of strings)
     */
    public function landedCostShipmentPurchaseOrdersGETManyRequestShipmentIDPurchaseOrdersGetWithHttpInfo($accept, $shipment_id, $jiwa_stateful = null)
    {
        $returnType = '\Jiwa\JiwaModel\ShipmentPurchaseOrderReceived[]';
        $request = $this->landedCostShipmentPurchaseOrdersGETManyRequestShipmentIDPurchaseOrdersGetRequest($accept, $shipment_id, $jiwa_stateful);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Jiwa\JiwaModel\ShipmentPurchaseOrderReceived[]',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 404:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Jiwa\JiwaModel\ShipmentPurchaseOrderReceived[]',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 401:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Jiwa\JiwaModel\ShipmentPurchaseOrderReceived[]',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 403:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Jiwa\JiwaModel\ShipmentPurchaseOrderReceived[]',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation landedCostShipmentPurchaseOrdersGETManyRequestShipmentIDPurchaseOrdersGetAsync
     *
     * Retrieves a list of shipment purchase orders.
     *
     * @param  string $accept Accept Header (required)
     * @param  string $shipment_id (required)
     * @param  bool $jiwa_stateful Stateful indicator (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function landedCostShipmentPurchaseOrdersGETManyRequestShipmentIDPurchaseOrdersGetAsync($accept, $shipment_id, $jiwa_stateful = null)
    {
        return $this->landedCostShipmentPurchaseOrdersGETManyRequestShipmentIDPurchaseOrdersGetAsyncWithHttpInfo($accept, $shipment_id, $jiwa_stateful)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation landedCostShipmentPurchaseOrdersGETManyRequestShipmentIDPurchaseOrdersGetAsyncWithHttpInfo
     *
     * Retrieves a list of shipment purchase orders.
     *
     * @param  string $accept Accept Header (required)
     * @param  string $shipment_id (required)
     * @param  bool $jiwa_stateful Stateful indicator (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function landedCostShipmentPurchaseOrdersGETManyRequestShipmentIDPurchaseOrdersGetAsyncWithHttpInfo($accept, $shipment_id, $jiwa_stateful = null)
    {
        $returnType = '\Jiwa\JiwaModel\ShipmentPurchaseOrderReceived[]';
        $request = $this->landedCostShipmentPurchaseOrdersGETManyRequestShipmentIDPurchaseOrdersGetRequest($accept, $shipment_id, $jiwa_stateful);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'landedCostShipmentPurchaseOrdersGETManyRequestShipmentIDPurchaseOrdersGet'
     *
     * @param  string $accept Accept Header (required)
     * @param  string $shipment_id (required)
     * @param  bool $jiwa_stateful Stateful indicator (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function landedCostShipmentPurchaseOrdersGETManyRequestShipmentIDPurchaseOrdersGetRequest($accept, $shipment_id, $jiwa_stateful = null)
    {
        // verify the required parameter 'accept' is set
        if ($accept === null || (is_array($accept) && count($accept) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $accept when calling landedCostShipmentPurchaseOrdersGETManyRequestShipmentIDPurchaseOrdersGet'
            );
        }
        // verify the required parameter 'shipment_id' is set
        if ($shipment_id === null || (is_array($shipment_id) && count($shipment_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $shipment_id when calling landedCostShipmentPurchaseOrdersGETManyRequestShipmentIDPurchaseOrdersGet'
            );
        }

        $resourcePath = '/Shipments/{ShipmentID}/PurchaseOrders';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // header params
        if ($accept !== null) {
            $headerParams['Accept'] = ObjectSerializer::toHeaderValue($accept);
        }
        // header params
        if ($jiwa_stateful !== null) {
            $headerParams['jiwa-stateful'] = ObjectSerializer::toHeaderValue($jiwa_stateful);
        }

        // path params
        if ($shipment_id !== null) {
            $resourcePath = str_replace(
                '{' . 'ShipmentID' . '}',
                ObjectSerializer::toPathValue($shipment_id),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json', 'application/xml']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json', 'application/xml'],
                ['application/x-www-form-urlencoded', 'application/json', 'application/xml']
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            
            if($headers['Content-Type'] === 'application/json') {
                // \stdClass has no __toString(), so we should encode it manually
                if ($httpBody instanceof \stdClass) {
                    $httpBody = \GuzzleHttp\json_encode($httpBody);
                }
                // array has no __toString(), so we should encode it manually
                if(is_array($httpBody)) {
                    $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($httpBody));
                }
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\Query::build($formParams);
            }
        }

        // this endpoint requires HTTP basic authentication
        if ($this->config->getUsername() !== null || $this->config->getPassword() !== null) {
            $headers['Authorization'] = 'Basic ' . base64_encode($this->config->getUsername() . ":" . $this->config->getPassword());
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\Query::build($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation landedCostShipmentSAVERequestSaveGet
     *
     * Saves a stateful stateful shipment.
     *
     * @param  string $accept Accept Header (required)
     * @param  bool $jiwa_stateful Stateful indicator (optional)
     * @param  string $shipment_id shipment_id (optional)
     *
     * @throws \Jiwa\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Jiwa\JiwaModel\Shipment
     */
    public function landedCostShipmentSAVERequestSaveGet($accept, $jiwa_stateful = null, $shipment_id = null)
    {
        list($response) = $this->landedCostShipmentSAVERequestSaveGetWithHttpInfo($accept, $jiwa_stateful, $shipment_id);
        return $response;
    }

    /**
     * Operation landedCostShipmentSAVERequestSaveGetWithHttpInfo
     *
     * Saves a stateful stateful shipment.
     *
     * @param  string $accept Accept Header (required)
     * @param  bool $jiwa_stateful Stateful indicator (optional)
     * @param  string $shipment_id (optional)
     *
     * @throws \Jiwa\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Jiwa\JiwaModel\Shipment, HTTP status code, HTTP response headers (array of strings)
     */
    public function landedCostShipmentSAVERequestSaveGetWithHttpInfo($accept, $jiwa_stateful = null, $shipment_id = null)
    {
        $returnType = '\Jiwa\JiwaModel\Shipment';
        $request = $this->landedCostShipmentSAVERequestSaveGetRequest($accept, $jiwa_stateful, $shipment_id);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Jiwa\JiwaModel\Shipment',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 401:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Jiwa\JiwaModel\Shipment',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 403:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Jiwa\JiwaModel\Shipment',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 404:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Jiwa\JiwaModel\Shipment',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation landedCostShipmentSAVERequestSaveGetAsync
     *
     * Saves a stateful stateful shipment.
     *
     * @param  string $accept Accept Header (required)
     * @param  bool $jiwa_stateful Stateful indicator (optional)
     * @param  string $shipment_id (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function landedCostShipmentSAVERequestSaveGetAsync($accept, $jiwa_stateful = null, $shipment_id = null)
    {
        return $this->landedCostShipmentSAVERequestSaveGetAsyncWithHttpInfo($accept, $jiwa_stateful, $shipment_id)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation landedCostShipmentSAVERequestSaveGetAsyncWithHttpInfo
     *
     * Saves a stateful stateful shipment.
     *
     * @param  string $accept Accept Header (required)
     * @param  bool $jiwa_stateful Stateful indicator (optional)
     * @param  string $shipment_id (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function landedCostShipmentSAVERequestSaveGetAsyncWithHttpInfo($accept, $jiwa_stateful = null, $shipment_id = null)
    {
        $returnType = '\Jiwa\JiwaModel\Shipment';
        $request = $this->landedCostShipmentSAVERequestSaveGetRequest($accept, $jiwa_stateful, $shipment_id);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'landedCostShipmentSAVERequestSaveGet'
     *
     * @param  string $accept Accept Header (required)
     * @param  bool $jiwa_stateful Stateful indicator (optional)
     * @param  string $shipment_id (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function landedCostShipmentSAVERequestSaveGetRequest($accept, $jiwa_stateful = null, $shipment_id = null)
    {
        // verify the required parameter 'accept' is set
        if ($accept === null || (is_array($accept) && count($accept) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $accept when calling landedCostShipmentSAVERequestSaveGet'
            );
        }

        $resourcePath = '/Shipments/Save';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        if ($shipment_id !== null) {
            $queryParams['ShipmentID'] = ObjectSerializer::toQueryValue($shipment_id);
        }
        // header params
        if ($accept !== null) {
            $headerParams['Accept'] = ObjectSerializer::toHeaderValue($accept);
        }
        // header params
        if ($jiwa_stateful !== null) {
            $headerParams['jiwa-stateful'] = ObjectSerializer::toHeaderValue($jiwa_stateful);
        }


        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json', 'application/xml']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json', 'application/xml'],
                ['application/x-www-form-urlencoded', 'application/json', 'application/xml']
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            
            if($headers['Content-Type'] === 'application/json') {
                // \stdClass has no __toString(), so we should encode it manually
                if ($httpBody instanceof \stdClass) {
                    $httpBody = \GuzzleHttp\json_encode($httpBody);
                }
                // array has no __toString(), so we should encode it manually
                if(is_array($httpBody)) {
                    $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($httpBody));
                }
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\Query::build($formParams);
            }
        }

        // this endpoint requires HTTP basic authentication
        if ($this->config->getUsername() !== null || $this->config->getPassword() !== null) {
            $headers['Authorization'] = 'Basic ' . base64_encode($this->config->getUsername() . ":" . $this->config->getPassword());
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\Query::build($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Create http client option
     *
     * @throws \RuntimeException on file opening failure
     * @return array of http client options
     */
    protected function createHttpClientOption()
    {
        $options = [];
        if ($this->config->getDebug()) {
            $options[RequestOptions::DEBUG] = fopen($this->config->getDebugFile(), 'a');
            if (!$options[RequestOptions::DEBUG]) {
                throw new \RuntimeException('Failed to open the debug file: ' . $this->config->getDebugFile());
            }
        }

        return $options;
    }
}

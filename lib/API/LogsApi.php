<?php
/**
 * LogsApi
 * PHP version 5
 *
 * @category Class
 * @package  Jiwa
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * JiwaAPI
 *
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: 1.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 * Swagger Codegen version: 2.4.28-SNAPSHOT
 */

/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Jiwa\JiwaAPI;

use GuzzleHttp\Client;
use GuzzleHttp\ClientInterface;
use GuzzleHttp\Exception\RequestException;
use GuzzleHttp\Psr7\MultipartStream;
use GuzzleHttp\Psr7\Request;
use GuzzleHttp\RequestOptions;
use Jiwa\ApiException;
use Jiwa\Configuration;
use Jiwa\HeaderSelector;
use Jiwa\ObjectSerializer;

/**
 * LogsApi Class Doc Comment
 *
 * @category Class
 * @package  Jiwa
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class LogsApi
{
    /**
     * @var ClientInterface
     */
    protected $client;

    /**
     * @var Configuration
     */
    protected $config;

    /**
     * @var HeaderSelector
     */
    protected $headerSelector;

    /**
     * @param ClientInterface $client
     * @param Configuration   $config
     * @param HeaderSelector  $selector
     */
    public function __construct(
        ClientInterface $client = null,
        Configuration $config = null,
        HeaderSelector $selector = null
    ) {
        $this->client = $client ?: new Client();
        $this->config = $config ?: new Configuration();
        $this->headerSelector = $selector ?: new HeaderSelector();
    }

    /**
     * @return Configuration
     */
    public function getConfig()
    {
        return $this->config;
    }

    /**
     * Operation queryRequestLogsGETManyRequestDateGet
     *
     * Retrieves a list of log entries for a given date.
     *
     * @param  string $accept Accept Header (required)
     * @param  \DateTime $date date (required)
     * @param  bool $jiwa_stateful Stateful indicator (optional)
     * @param  bool $view_errors view_errors (optional)
     * @param  int $skip skip (optional)
     * @param  int $take take (optional)
     * @param  string $order_by order_by (optional)
     * @param  string $order_by_desc order_by_desc (optional)
     * @param  string $include include (optional)
     * @param  string $fields fields (optional)
     * @param  string $meta meta (optional)
     *
     * @throws \Jiwa\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Jiwa\JiwaModel\QueryResponseRequestLogEntry_
     */
    public function queryRequestLogsGETManyRequestDateGet($accept, $date, $jiwa_stateful = null, $view_errors = null, $skip = null, $take = null, $order_by = null, $order_by_desc = null, $include = null, $fields = null, $meta = null)
    {
        list($response) = $this->queryRequestLogsGETManyRequestDateGetWithHttpInfo($accept, $date, $jiwa_stateful, $view_errors, $skip, $take, $order_by, $order_by_desc, $include, $fields, $meta);
        return $response;
    }

    /**
     * Operation queryRequestLogsGETManyRequestDateGetWithHttpInfo
     *
     * Retrieves a list of log entries for a given date.
     *
     * @param  string $accept Accept Header (required)
     * @param  \DateTime $date (required)
     * @param  bool $jiwa_stateful Stateful indicator (optional)
     * @param  bool $view_errors (optional)
     * @param  int $skip (optional)
     * @param  int $take (optional)
     * @param  string $order_by (optional)
     * @param  string $order_by_desc (optional)
     * @param  string $include (optional)
     * @param  string $fields (optional)
     * @param  string $meta (optional)
     *
     * @throws \Jiwa\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Jiwa\JiwaModel\QueryResponseRequestLogEntry_, HTTP status code, HTTP response headers (array of strings)
     */
    public function queryRequestLogsGETManyRequestDateGetWithHttpInfo($accept, $date, $jiwa_stateful = null, $view_errors = null, $skip = null, $take = null, $order_by = null, $order_by_desc = null, $include = null, $fields = null, $meta = null)
    {
        $returnType = '\Jiwa\JiwaModel\QueryResponseRequestLogEntry_';
        $request = $this->queryRequestLogsGETManyRequestDateGetRequest($accept, $date, $jiwa_stateful, $view_errors, $skip, $take, $order_by, $order_by_desc, $include, $fields, $meta);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Jiwa\JiwaModel\QueryResponseRequestLogEntry_',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation queryRequestLogsGETManyRequestDateGetAsync
     *
     * Retrieves a list of log entries for a given date.
     *
     * @param  string $accept Accept Header (required)
     * @param  \DateTime $date (required)
     * @param  bool $jiwa_stateful Stateful indicator (optional)
     * @param  bool $view_errors (optional)
     * @param  int $skip (optional)
     * @param  int $take (optional)
     * @param  string $order_by (optional)
     * @param  string $order_by_desc (optional)
     * @param  string $include (optional)
     * @param  string $fields (optional)
     * @param  string $meta (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function queryRequestLogsGETManyRequestDateGetAsync($accept, $date, $jiwa_stateful = null, $view_errors = null, $skip = null, $take = null, $order_by = null, $order_by_desc = null, $include = null, $fields = null, $meta = null)
    {
        return $this->queryRequestLogsGETManyRequestDateGetAsyncWithHttpInfo($accept, $date, $jiwa_stateful, $view_errors, $skip, $take, $order_by, $order_by_desc, $include, $fields, $meta)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation queryRequestLogsGETManyRequestDateGetAsyncWithHttpInfo
     *
     * Retrieves a list of log entries for a given date.
     *
     * @param  string $accept Accept Header (required)
     * @param  \DateTime $date (required)
     * @param  bool $jiwa_stateful Stateful indicator (optional)
     * @param  bool $view_errors (optional)
     * @param  int $skip (optional)
     * @param  int $take (optional)
     * @param  string $order_by (optional)
     * @param  string $order_by_desc (optional)
     * @param  string $include (optional)
     * @param  string $fields (optional)
     * @param  string $meta (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function queryRequestLogsGETManyRequestDateGetAsyncWithHttpInfo($accept, $date, $jiwa_stateful = null, $view_errors = null, $skip = null, $take = null, $order_by = null, $order_by_desc = null, $include = null, $fields = null, $meta = null)
    {
        $returnType = '\Jiwa\JiwaModel\QueryResponseRequestLogEntry_';
        $request = $this->queryRequestLogsGETManyRequestDateGetRequest($accept, $date, $jiwa_stateful, $view_errors, $skip, $take, $order_by, $order_by_desc, $include, $fields, $meta);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'queryRequestLogsGETManyRequestDateGet'
     *
     * @param  string $accept Accept Header (required)
     * @param  \DateTime $date (required)
     * @param  bool $jiwa_stateful Stateful indicator (optional)
     * @param  bool $view_errors (optional)
     * @param  int $skip (optional)
     * @param  int $take (optional)
     * @param  string $order_by (optional)
     * @param  string $order_by_desc (optional)
     * @param  string $include (optional)
     * @param  string $fields (optional)
     * @param  string $meta (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function queryRequestLogsGETManyRequestDateGetRequest($accept, $date, $jiwa_stateful = null, $view_errors = null, $skip = null, $take = null, $order_by = null, $order_by_desc = null, $include = null, $fields = null, $meta = null)
    {
        // verify the required parameter 'accept' is set
        if ($accept === null || (is_array($accept) && count($accept) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $accept when calling queryRequestLogsGETManyRequestDateGet'
            );
        }
        // verify the required parameter 'date' is set
        if ($date === null || (is_array($date) && count($date) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $date when calling queryRequestLogsGETManyRequestDateGet'
            );
        }

        $resourcePath = '/Logs/{Date}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        if ($view_errors !== null) {
            $queryParams['ViewErrors'] = ObjectSerializer::toQueryValue($view_errors);
        }
        // query params
        if ($skip !== null) {
            $queryParams['Skip'] = ObjectSerializer::toQueryValue($skip);
        }
        // query params
        if ($take !== null) {
            $queryParams['Take'] = ObjectSerializer::toQueryValue($take);
        }
        // query params
        if ($order_by !== null) {
            $queryParams['OrderBy'] = ObjectSerializer::toQueryValue($order_by);
        }
        // query params
        if ($order_by_desc !== null) {
            $queryParams['OrderByDesc'] = ObjectSerializer::toQueryValue($order_by_desc);
        }
        // query params
        if ($include !== null) {
            $queryParams['Include'] = ObjectSerializer::toQueryValue($include);
        }
        // query params
        if ($fields !== null) {
            $queryParams['Fields'] = ObjectSerializer::toQueryValue($fields);
        }
        // query params
        if ($meta !== null) {
            $queryParams['Meta'] = ObjectSerializer::toQueryValue($meta);
        }
        // header params
        if ($accept !== null) {
            $headerParams['Accept'] = ObjectSerializer::toHeaderValue($accept);
        }
        // header params
        if ($jiwa_stateful !== null) {
            $headerParams['jiwa-stateful'] = ObjectSerializer::toHeaderValue($jiwa_stateful);
        }

        // path params
        if ($date !== null) {
            $resourcePath = str_replace(
                '{' . 'Date' . '}',
                ObjectSerializer::toPathValue($date),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json', 'application/xml']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json', 'application/xml'],
                ['application/x-www-form-urlencoded', 'application/json', 'application/xml']
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            
            if($headers['Content-Type'] === 'application/json') {
                // \stdClass has no __toString(), so we should encode it manually
                if ($httpBody instanceof \stdClass) {
                    $httpBody = \GuzzleHttp\json_encode($httpBody);
                }
                // array has no __toString(), so we should encode it manually
                if(is_array($httpBody)) {
                    $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($httpBody));
                }
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\Query::build($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\Query::build($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation queryRequestLogsGETManyRequestGet
     *
     * Retrieves a list of log entries.
     *
     * @param  string $accept Accept Header (required)
     * @param  bool $jiwa_stateful Stateful indicator (optional)
     * @param  \DateTime $date date (optional)
     * @param  bool $view_errors view_errors (optional)
     * @param  int $skip skip (optional)
     * @param  int $take take (optional)
     * @param  string $order_by order_by (optional)
     * @param  string $order_by_desc order_by_desc (optional)
     * @param  string $include include (optional)
     * @param  string $fields fields (optional)
     * @param  string $meta meta (optional)
     *
     * @throws \Jiwa\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Jiwa\JiwaModel\QueryResponseRequestLogEntry_
     */
    public function queryRequestLogsGETManyRequestGet($accept, $jiwa_stateful = null, $date = null, $view_errors = null, $skip = null, $take = null, $order_by = null, $order_by_desc = null, $include = null, $fields = null, $meta = null)
    {
        list($response) = $this->queryRequestLogsGETManyRequestGetWithHttpInfo($accept, $jiwa_stateful, $date, $view_errors, $skip, $take, $order_by, $order_by_desc, $include, $fields, $meta);
        return $response;
    }

    /**
     * Operation queryRequestLogsGETManyRequestGetWithHttpInfo
     *
     * Retrieves a list of log entries.
     *
     * @param  string $accept Accept Header (required)
     * @param  bool $jiwa_stateful Stateful indicator (optional)
     * @param  \DateTime $date (optional)
     * @param  bool $view_errors (optional)
     * @param  int $skip (optional)
     * @param  int $take (optional)
     * @param  string $order_by (optional)
     * @param  string $order_by_desc (optional)
     * @param  string $include (optional)
     * @param  string $fields (optional)
     * @param  string $meta (optional)
     *
     * @throws \Jiwa\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Jiwa\JiwaModel\QueryResponseRequestLogEntry_, HTTP status code, HTTP response headers (array of strings)
     */
    public function queryRequestLogsGETManyRequestGetWithHttpInfo($accept, $jiwa_stateful = null, $date = null, $view_errors = null, $skip = null, $take = null, $order_by = null, $order_by_desc = null, $include = null, $fields = null, $meta = null)
    {
        $returnType = '\Jiwa\JiwaModel\QueryResponseRequestLogEntry_';
        $request = $this->queryRequestLogsGETManyRequestGetRequest($accept, $jiwa_stateful, $date, $view_errors, $skip, $take, $order_by, $order_by_desc, $include, $fields, $meta);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Jiwa\JiwaModel\QueryResponseRequestLogEntry_',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation queryRequestLogsGETManyRequestGetAsync
     *
     * Retrieves a list of log entries.
     *
     * @param  string $accept Accept Header (required)
     * @param  bool $jiwa_stateful Stateful indicator (optional)
     * @param  \DateTime $date (optional)
     * @param  bool $view_errors (optional)
     * @param  int $skip (optional)
     * @param  int $take (optional)
     * @param  string $order_by (optional)
     * @param  string $order_by_desc (optional)
     * @param  string $include (optional)
     * @param  string $fields (optional)
     * @param  string $meta (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function queryRequestLogsGETManyRequestGetAsync($accept, $jiwa_stateful = null, $date = null, $view_errors = null, $skip = null, $take = null, $order_by = null, $order_by_desc = null, $include = null, $fields = null, $meta = null)
    {
        return $this->queryRequestLogsGETManyRequestGetAsyncWithHttpInfo($accept, $jiwa_stateful, $date, $view_errors, $skip, $take, $order_by, $order_by_desc, $include, $fields, $meta)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation queryRequestLogsGETManyRequestGetAsyncWithHttpInfo
     *
     * Retrieves a list of log entries.
     *
     * @param  string $accept Accept Header (required)
     * @param  bool $jiwa_stateful Stateful indicator (optional)
     * @param  \DateTime $date (optional)
     * @param  bool $view_errors (optional)
     * @param  int $skip (optional)
     * @param  int $take (optional)
     * @param  string $order_by (optional)
     * @param  string $order_by_desc (optional)
     * @param  string $include (optional)
     * @param  string $fields (optional)
     * @param  string $meta (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function queryRequestLogsGETManyRequestGetAsyncWithHttpInfo($accept, $jiwa_stateful = null, $date = null, $view_errors = null, $skip = null, $take = null, $order_by = null, $order_by_desc = null, $include = null, $fields = null, $meta = null)
    {
        $returnType = '\Jiwa\JiwaModel\QueryResponseRequestLogEntry_';
        $request = $this->queryRequestLogsGETManyRequestGetRequest($accept, $jiwa_stateful, $date, $view_errors, $skip, $take, $order_by, $order_by_desc, $include, $fields, $meta);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'queryRequestLogsGETManyRequestGet'
     *
     * @param  string $accept Accept Header (required)
     * @param  bool $jiwa_stateful Stateful indicator (optional)
     * @param  \DateTime $date (optional)
     * @param  bool $view_errors (optional)
     * @param  int $skip (optional)
     * @param  int $take (optional)
     * @param  string $order_by (optional)
     * @param  string $order_by_desc (optional)
     * @param  string $include (optional)
     * @param  string $fields (optional)
     * @param  string $meta (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function queryRequestLogsGETManyRequestGetRequest($accept, $jiwa_stateful = null, $date = null, $view_errors = null, $skip = null, $take = null, $order_by = null, $order_by_desc = null, $include = null, $fields = null, $meta = null)
    {
        // verify the required parameter 'accept' is set
        if ($accept === null || (is_array($accept) && count($accept) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $accept when calling queryRequestLogsGETManyRequestGet'
            );
        }

        $resourcePath = '/Logs';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        if ($date !== null) {
            $queryParams['Date'] = ObjectSerializer::toQueryValue($date);
        }
        // query params
        if ($view_errors !== null) {
            $queryParams['ViewErrors'] = ObjectSerializer::toQueryValue($view_errors);
        }
        // query params
        if ($skip !== null) {
            $queryParams['Skip'] = ObjectSerializer::toQueryValue($skip);
        }
        // query params
        if ($take !== null) {
            $queryParams['Take'] = ObjectSerializer::toQueryValue($take);
        }
        // query params
        if ($order_by !== null) {
            $queryParams['OrderBy'] = ObjectSerializer::toQueryValue($order_by);
        }
        // query params
        if ($order_by_desc !== null) {
            $queryParams['OrderByDesc'] = ObjectSerializer::toQueryValue($order_by_desc);
        }
        // query params
        if ($include !== null) {
            $queryParams['Include'] = ObjectSerializer::toQueryValue($include);
        }
        // query params
        if ($fields !== null) {
            $queryParams['Fields'] = ObjectSerializer::toQueryValue($fields);
        }
        // query params
        if ($meta !== null) {
            $queryParams['Meta'] = ObjectSerializer::toQueryValue($meta);
        }
        // header params
        if ($accept !== null) {
            $headerParams['Accept'] = ObjectSerializer::toHeaderValue($accept);
        }
        // header params
        if ($jiwa_stateful !== null) {
            $headerParams['jiwa-stateful'] = ObjectSerializer::toHeaderValue($jiwa_stateful);
        }


        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json', 'application/xml']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json', 'application/xml'],
                ['application/x-www-form-urlencoded', 'application/json', 'application/xml']
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            
            if($headers['Content-Type'] === 'application/json') {
                // \stdClass has no __toString(), so we should encode it manually
                if ($httpBody instanceof \stdClass) {
                    $httpBody = \GuzzleHttp\json_encode($httpBody);
                }
                // array has no __toString(), so we should encode it manually
                if(is_array($httpBody)) {
                    $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($httpBody));
                }
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\Query::build($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\Query::build($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation todayErrorLogsGETManyRequestTodayErrorsGet
     *
     * Retrieves a list of error log entries for today.
     *
     * @param  string $accept Accept Header (required)
     * @param  bool $jiwa_stateful Stateful indicator (optional)
     * @param  int $skip skip (optional)
     * @param  int $take take (optional)
     * @param  string $order_by order_by (optional)
     * @param  string $order_by_desc order_by_desc (optional)
     * @param  string $include include (optional)
     * @param  string $fields fields (optional)
     * @param  string $meta meta (optional)
     *
     * @throws \Jiwa\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Jiwa\JiwaModel\QueryResponseRequestLogEntry_
     */
    public function todayErrorLogsGETManyRequestTodayErrorsGet($accept, $jiwa_stateful = null, $skip = null, $take = null, $order_by = null, $order_by_desc = null, $include = null, $fields = null, $meta = null)
    {
        list($response) = $this->todayErrorLogsGETManyRequestTodayErrorsGetWithHttpInfo($accept, $jiwa_stateful, $skip, $take, $order_by, $order_by_desc, $include, $fields, $meta);
        return $response;
    }

    /**
     * Operation todayErrorLogsGETManyRequestTodayErrorsGetWithHttpInfo
     *
     * Retrieves a list of error log entries for today.
     *
     * @param  string $accept Accept Header (required)
     * @param  bool $jiwa_stateful Stateful indicator (optional)
     * @param  int $skip (optional)
     * @param  int $take (optional)
     * @param  string $order_by (optional)
     * @param  string $order_by_desc (optional)
     * @param  string $include (optional)
     * @param  string $fields (optional)
     * @param  string $meta (optional)
     *
     * @throws \Jiwa\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Jiwa\JiwaModel\QueryResponseRequestLogEntry_, HTTP status code, HTTP response headers (array of strings)
     */
    public function todayErrorLogsGETManyRequestTodayErrorsGetWithHttpInfo($accept, $jiwa_stateful = null, $skip = null, $take = null, $order_by = null, $order_by_desc = null, $include = null, $fields = null, $meta = null)
    {
        $returnType = '\Jiwa\JiwaModel\QueryResponseRequestLogEntry_';
        $request = $this->todayErrorLogsGETManyRequestTodayErrorsGetRequest($accept, $jiwa_stateful, $skip, $take, $order_by, $order_by_desc, $include, $fields, $meta);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Jiwa\JiwaModel\QueryResponseRequestLogEntry_',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation todayErrorLogsGETManyRequestTodayErrorsGetAsync
     *
     * Retrieves a list of error log entries for today.
     *
     * @param  string $accept Accept Header (required)
     * @param  bool $jiwa_stateful Stateful indicator (optional)
     * @param  int $skip (optional)
     * @param  int $take (optional)
     * @param  string $order_by (optional)
     * @param  string $order_by_desc (optional)
     * @param  string $include (optional)
     * @param  string $fields (optional)
     * @param  string $meta (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function todayErrorLogsGETManyRequestTodayErrorsGetAsync($accept, $jiwa_stateful = null, $skip = null, $take = null, $order_by = null, $order_by_desc = null, $include = null, $fields = null, $meta = null)
    {
        return $this->todayErrorLogsGETManyRequestTodayErrorsGetAsyncWithHttpInfo($accept, $jiwa_stateful, $skip, $take, $order_by, $order_by_desc, $include, $fields, $meta)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation todayErrorLogsGETManyRequestTodayErrorsGetAsyncWithHttpInfo
     *
     * Retrieves a list of error log entries for today.
     *
     * @param  string $accept Accept Header (required)
     * @param  bool $jiwa_stateful Stateful indicator (optional)
     * @param  int $skip (optional)
     * @param  int $take (optional)
     * @param  string $order_by (optional)
     * @param  string $order_by_desc (optional)
     * @param  string $include (optional)
     * @param  string $fields (optional)
     * @param  string $meta (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function todayErrorLogsGETManyRequestTodayErrorsGetAsyncWithHttpInfo($accept, $jiwa_stateful = null, $skip = null, $take = null, $order_by = null, $order_by_desc = null, $include = null, $fields = null, $meta = null)
    {
        $returnType = '\Jiwa\JiwaModel\QueryResponseRequestLogEntry_';
        $request = $this->todayErrorLogsGETManyRequestTodayErrorsGetRequest($accept, $jiwa_stateful, $skip, $take, $order_by, $order_by_desc, $include, $fields, $meta);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'todayErrorLogsGETManyRequestTodayErrorsGet'
     *
     * @param  string $accept Accept Header (required)
     * @param  bool $jiwa_stateful Stateful indicator (optional)
     * @param  int $skip (optional)
     * @param  int $take (optional)
     * @param  string $order_by (optional)
     * @param  string $order_by_desc (optional)
     * @param  string $include (optional)
     * @param  string $fields (optional)
     * @param  string $meta (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function todayErrorLogsGETManyRequestTodayErrorsGetRequest($accept, $jiwa_stateful = null, $skip = null, $take = null, $order_by = null, $order_by_desc = null, $include = null, $fields = null, $meta = null)
    {
        // verify the required parameter 'accept' is set
        if ($accept === null || (is_array($accept) && count($accept) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $accept when calling todayErrorLogsGETManyRequestTodayErrorsGet'
            );
        }

        $resourcePath = '/Logs/Today/Errors';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        if ($skip !== null) {
            $queryParams['Skip'] = ObjectSerializer::toQueryValue($skip);
        }
        // query params
        if ($take !== null) {
            $queryParams['Take'] = ObjectSerializer::toQueryValue($take);
        }
        // query params
        if ($order_by !== null) {
            $queryParams['OrderBy'] = ObjectSerializer::toQueryValue($order_by);
        }
        // query params
        if ($order_by_desc !== null) {
            $queryParams['OrderByDesc'] = ObjectSerializer::toQueryValue($order_by_desc);
        }
        // query params
        if ($include !== null) {
            $queryParams['Include'] = ObjectSerializer::toQueryValue($include);
        }
        // query params
        if ($fields !== null) {
            $queryParams['Fields'] = ObjectSerializer::toQueryValue($fields);
        }
        // query params
        if ($meta !== null) {
            $queryParams['Meta'] = ObjectSerializer::toQueryValue($meta);
        }
        // header params
        if ($accept !== null) {
            $headerParams['Accept'] = ObjectSerializer::toHeaderValue($accept);
        }
        // header params
        if ($jiwa_stateful !== null) {
            $headerParams['jiwa-stateful'] = ObjectSerializer::toHeaderValue($jiwa_stateful);
        }


        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json', 'application/xml']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json', 'application/xml'],
                ['application/x-www-form-urlencoded', 'application/json', 'application/xml']
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            
            if($headers['Content-Type'] === 'application/json') {
                // \stdClass has no __toString(), so we should encode it manually
                if ($httpBody instanceof \stdClass) {
                    $httpBody = \GuzzleHttp\json_encode($httpBody);
                }
                // array has no __toString(), so we should encode it manually
                if(is_array($httpBody)) {
                    $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($httpBody));
                }
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\Query::build($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\Query::build($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation todayLogsGETManyRequestTodayGet
     *
     * Retrieves a list of log entries for today.
     *
     * @param  string $accept Accept Header (required)
     * @param  bool $jiwa_stateful Stateful indicator (optional)
     * @param  int $skip skip (optional)
     * @param  int $take take (optional)
     * @param  string $order_by order_by (optional)
     * @param  string $order_by_desc order_by_desc (optional)
     * @param  string $include include (optional)
     * @param  string $fields fields (optional)
     * @param  string $meta meta (optional)
     *
     * @throws \Jiwa\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Jiwa\JiwaModel\QueryResponseRequestLogEntry_
     */
    public function todayLogsGETManyRequestTodayGet($accept, $jiwa_stateful = null, $skip = null, $take = null, $order_by = null, $order_by_desc = null, $include = null, $fields = null, $meta = null)
    {
        list($response) = $this->todayLogsGETManyRequestTodayGetWithHttpInfo($accept, $jiwa_stateful, $skip, $take, $order_by, $order_by_desc, $include, $fields, $meta);
        return $response;
    }

    /**
     * Operation todayLogsGETManyRequestTodayGetWithHttpInfo
     *
     * Retrieves a list of log entries for today.
     *
     * @param  string $accept Accept Header (required)
     * @param  bool $jiwa_stateful Stateful indicator (optional)
     * @param  int $skip (optional)
     * @param  int $take (optional)
     * @param  string $order_by (optional)
     * @param  string $order_by_desc (optional)
     * @param  string $include (optional)
     * @param  string $fields (optional)
     * @param  string $meta (optional)
     *
     * @throws \Jiwa\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Jiwa\JiwaModel\QueryResponseRequestLogEntry_, HTTP status code, HTTP response headers (array of strings)
     */
    public function todayLogsGETManyRequestTodayGetWithHttpInfo($accept, $jiwa_stateful = null, $skip = null, $take = null, $order_by = null, $order_by_desc = null, $include = null, $fields = null, $meta = null)
    {
        $returnType = '\Jiwa\JiwaModel\QueryResponseRequestLogEntry_';
        $request = $this->todayLogsGETManyRequestTodayGetRequest($accept, $jiwa_stateful, $skip, $take, $order_by, $order_by_desc, $include, $fields, $meta);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Jiwa\JiwaModel\QueryResponseRequestLogEntry_',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation todayLogsGETManyRequestTodayGetAsync
     *
     * Retrieves a list of log entries for today.
     *
     * @param  string $accept Accept Header (required)
     * @param  bool $jiwa_stateful Stateful indicator (optional)
     * @param  int $skip (optional)
     * @param  int $take (optional)
     * @param  string $order_by (optional)
     * @param  string $order_by_desc (optional)
     * @param  string $include (optional)
     * @param  string $fields (optional)
     * @param  string $meta (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function todayLogsGETManyRequestTodayGetAsync($accept, $jiwa_stateful = null, $skip = null, $take = null, $order_by = null, $order_by_desc = null, $include = null, $fields = null, $meta = null)
    {
        return $this->todayLogsGETManyRequestTodayGetAsyncWithHttpInfo($accept, $jiwa_stateful, $skip, $take, $order_by, $order_by_desc, $include, $fields, $meta)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation todayLogsGETManyRequestTodayGetAsyncWithHttpInfo
     *
     * Retrieves a list of log entries for today.
     *
     * @param  string $accept Accept Header (required)
     * @param  bool $jiwa_stateful Stateful indicator (optional)
     * @param  int $skip (optional)
     * @param  int $take (optional)
     * @param  string $order_by (optional)
     * @param  string $order_by_desc (optional)
     * @param  string $include (optional)
     * @param  string $fields (optional)
     * @param  string $meta (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function todayLogsGETManyRequestTodayGetAsyncWithHttpInfo($accept, $jiwa_stateful = null, $skip = null, $take = null, $order_by = null, $order_by_desc = null, $include = null, $fields = null, $meta = null)
    {
        $returnType = '\Jiwa\JiwaModel\QueryResponseRequestLogEntry_';
        $request = $this->todayLogsGETManyRequestTodayGetRequest($accept, $jiwa_stateful, $skip, $take, $order_by, $order_by_desc, $include, $fields, $meta);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'todayLogsGETManyRequestTodayGet'
     *
     * @param  string $accept Accept Header (required)
     * @param  bool $jiwa_stateful Stateful indicator (optional)
     * @param  int $skip (optional)
     * @param  int $take (optional)
     * @param  string $order_by (optional)
     * @param  string $order_by_desc (optional)
     * @param  string $include (optional)
     * @param  string $fields (optional)
     * @param  string $meta (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function todayLogsGETManyRequestTodayGetRequest($accept, $jiwa_stateful = null, $skip = null, $take = null, $order_by = null, $order_by_desc = null, $include = null, $fields = null, $meta = null)
    {
        // verify the required parameter 'accept' is set
        if ($accept === null || (is_array($accept) && count($accept) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $accept when calling todayLogsGETManyRequestTodayGet'
            );
        }

        $resourcePath = '/Logs/Today';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        if ($skip !== null) {
            $queryParams['Skip'] = ObjectSerializer::toQueryValue($skip);
        }
        // query params
        if ($take !== null) {
            $queryParams['Take'] = ObjectSerializer::toQueryValue($take);
        }
        // query params
        if ($order_by !== null) {
            $queryParams['OrderBy'] = ObjectSerializer::toQueryValue($order_by);
        }
        // query params
        if ($order_by_desc !== null) {
            $queryParams['OrderByDesc'] = ObjectSerializer::toQueryValue($order_by_desc);
        }
        // query params
        if ($include !== null) {
            $queryParams['Include'] = ObjectSerializer::toQueryValue($include);
        }
        // query params
        if ($fields !== null) {
            $queryParams['Fields'] = ObjectSerializer::toQueryValue($fields);
        }
        // query params
        if ($meta !== null) {
            $queryParams['Meta'] = ObjectSerializer::toQueryValue($meta);
        }
        // header params
        if ($accept !== null) {
            $headerParams['Accept'] = ObjectSerializer::toHeaderValue($accept);
        }
        // header params
        if ($jiwa_stateful !== null) {
            $headerParams['jiwa-stateful'] = ObjectSerializer::toHeaderValue($jiwa_stateful);
        }


        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json', 'application/xml']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json', 'application/xml'],
                ['application/x-www-form-urlencoded', 'application/json', 'application/xml']
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            
            if($headers['Content-Type'] === 'application/json') {
                // \stdClass has no __toString(), so we should encode it manually
                if ($httpBody instanceof \stdClass) {
                    $httpBody = \GuzzleHttp\json_encode($httpBody);
                }
                // array has no __toString(), so we should encode it manually
                if(is_array($httpBody)) {
                    $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($httpBody));
                }
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\Query::build($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\Query::build($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation yesterdayErrorLogsGETManyRequestYesterdayErrorsGet
     *
     * Retrieves a list of error log entries for yesterday.
     *
     * @param  string $accept Accept Header (required)
     * @param  bool $jiwa_stateful Stateful indicator (optional)
     * @param  int $skip skip (optional)
     * @param  int $take take (optional)
     * @param  string $order_by order_by (optional)
     * @param  string $order_by_desc order_by_desc (optional)
     * @param  string $include include (optional)
     * @param  string $fields fields (optional)
     * @param  string $meta meta (optional)
     *
     * @throws \Jiwa\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Jiwa\JiwaModel\QueryResponseRequestLogEntry_
     */
    public function yesterdayErrorLogsGETManyRequestYesterdayErrorsGet($accept, $jiwa_stateful = null, $skip = null, $take = null, $order_by = null, $order_by_desc = null, $include = null, $fields = null, $meta = null)
    {
        list($response) = $this->yesterdayErrorLogsGETManyRequestYesterdayErrorsGetWithHttpInfo($accept, $jiwa_stateful, $skip, $take, $order_by, $order_by_desc, $include, $fields, $meta);
        return $response;
    }

    /**
     * Operation yesterdayErrorLogsGETManyRequestYesterdayErrorsGetWithHttpInfo
     *
     * Retrieves a list of error log entries for yesterday.
     *
     * @param  string $accept Accept Header (required)
     * @param  bool $jiwa_stateful Stateful indicator (optional)
     * @param  int $skip (optional)
     * @param  int $take (optional)
     * @param  string $order_by (optional)
     * @param  string $order_by_desc (optional)
     * @param  string $include (optional)
     * @param  string $fields (optional)
     * @param  string $meta (optional)
     *
     * @throws \Jiwa\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Jiwa\JiwaModel\QueryResponseRequestLogEntry_, HTTP status code, HTTP response headers (array of strings)
     */
    public function yesterdayErrorLogsGETManyRequestYesterdayErrorsGetWithHttpInfo($accept, $jiwa_stateful = null, $skip = null, $take = null, $order_by = null, $order_by_desc = null, $include = null, $fields = null, $meta = null)
    {
        $returnType = '\Jiwa\JiwaModel\QueryResponseRequestLogEntry_';
        $request = $this->yesterdayErrorLogsGETManyRequestYesterdayErrorsGetRequest($accept, $jiwa_stateful, $skip, $take, $order_by, $order_by_desc, $include, $fields, $meta);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Jiwa\JiwaModel\QueryResponseRequestLogEntry_',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation yesterdayErrorLogsGETManyRequestYesterdayErrorsGetAsync
     *
     * Retrieves a list of error log entries for yesterday.
     *
     * @param  string $accept Accept Header (required)
     * @param  bool $jiwa_stateful Stateful indicator (optional)
     * @param  int $skip (optional)
     * @param  int $take (optional)
     * @param  string $order_by (optional)
     * @param  string $order_by_desc (optional)
     * @param  string $include (optional)
     * @param  string $fields (optional)
     * @param  string $meta (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function yesterdayErrorLogsGETManyRequestYesterdayErrorsGetAsync($accept, $jiwa_stateful = null, $skip = null, $take = null, $order_by = null, $order_by_desc = null, $include = null, $fields = null, $meta = null)
    {
        return $this->yesterdayErrorLogsGETManyRequestYesterdayErrorsGetAsyncWithHttpInfo($accept, $jiwa_stateful, $skip, $take, $order_by, $order_by_desc, $include, $fields, $meta)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation yesterdayErrorLogsGETManyRequestYesterdayErrorsGetAsyncWithHttpInfo
     *
     * Retrieves a list of error log entries for yesterday.
     *
     * @param  string $accept Accept Header (required)
     * @param  bool $jiwa_stateful Stateful indicator (optional)
     * @param  int $skip (optional)
     * @param  int $take (optional)
     * @param  string $order_by (optional)
     * @param  string $order_by_desc (optional)
     * @param  string $include (optional)
     * @param  string $fields (optional)
     * @param  string $meta (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function yesterdayErrorLogsGETManyRequestYesterdayErrorsGetAsyncWithHttpInfo($accept, $jiwa_stateful = null, $skip = null, $take = null, $order_by = null, $order_by_desc = null, $include = null, $fields = null, $meta = null)
    {
        $returnType = '\Jiwa\JiwaModel\QueryResponseRequestLogEntry_';
        $request = $this->yesterdayErrorLogsGETManyRequestYesterdayErrorsGetRequest($accept, $jiwa_stateful, $skip, $take, $order_by, $order_by_desc, $include, $fields, $meta);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'yesterdayErrorLogsGETManyRequestYesterdayErrorsGet'
     *
     * @param  string $accept Accept Header (required)
     * @param  bool $jiwa_stateful Stateful indicator (optional)
     * @param  int $skip (optional)
     * @param  int $take (optional)
     * @param  string $order_by (optional)
     * @param  string $order_by_desc (optional)
     * @param  string $include (optional)
     * @param  string $fields (optional)
     * @param  string $meta (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function yesterdayErrorLogsGETManyRequestYesterdayErrorsGetRequest($accept, $jiwa_stateful = null, $skip = null, $take = null, $order_by = null, $order_by_desc = null, $include = null, $fields = null, $meta = null)
    {
        // verify the required parameter 'accept' is set
        if ($accept === null || (is_array($accept) && count($accept) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $accept when calling yesterdayErrorLogsGETManyRequestYesterdayErrorsGet'
            );
        }

        $resourcePath = '/Logs/Yesterday/Errors';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        if ($skip !== null) {
            $queryParams['Skip'] = ObjectSerializer::toQueryValue($skip);
        }
        // query params
        if ($take !== null) {
            $queryParams['Take'] = ObjectSerializer::toQueryValue($take);
        }
        // query params
        if ($order_by !== null) {
            $queryParams['OrderBy'] = ObjectSerializer::toQueryValue($order_by);
        }
        // query params
        if ($order_by_desc !== null) {
            $queryParams['OrderByDesc'] = ObjectSerializer::toQueryValue($order_by_desc);
        }
        // query params
        if ($include !== null) {
            $queryParams['Include'] = ObjectSerializer::toQueryValue($include);
        }
        // query params
        if ($fields !== null) {
            $queryParams['Fields'] = ObjectSerializer::toQueryValue($fields);
        }
        // query params
        if ($meta !== null) {
            $queryParams['Meta'] = ObjectSerializer::toQueryValue($meta);
        }
        // header params
        if ($accept !== null) {
            $headerParams['Accept'] = ObjectSerializer::toHeaderValue($accept);
        }
        // header params
        if ($jiwa_stateful !== null) {
            $headerParams['jiwa-stateful'] = ObjectSerializer::toHeaderValue($jiwa_stateful);
        }


        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json', 'application/xml']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json', 'application/xml'],
                ['application/x-www-form-urlencoded', 'application/json', 'application/xml']
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            
            if($headers['Content-Type'] === 'application/json') {
                // \stdClass has no __toString(), so we should encode it manually
                if ($httpBody instanceof \stdClass) {
                    $httpBody = \GuzzleHttp\json_encode($httpBody);
                }
                // array has no __toString(), so we should encode it manually
                if(is_array($httpBody)) {
                    $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($httpBody));
                }
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\Query::build($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\Query::build($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation yesterdayLogsGETManyRequestYesterdayGet
     *
     * Retrieves a list of log entries for yesterday.
     *
     * @param  string $accept Accept Header (required)
     * @param  bool $jiwa_stateful Stateful indicator (optional)
     * @param  int $skip skip (optional)
     * @param  int $take take (optional)
     * @param  string $order_by order_by (optional)
     * @param  string $order_by_desc order_by_desc (optional)
     * @param  string $include include (optional)
     * @param  string $fields fields (optional)
     * @param  string $meta meta (optional)
     *
     * @throws \Jiwa\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Jiwa\JiwaModel\QueryResponseRequestLogEntry_
     */
    public function yesterdayLogsGETManyRequestYesterdayGet($accept, $jiwa_stateful = null, $skip = null, $take = null, $order_by = null, $order_by_desc = null, $include = null, $fields = null, $meta = null)
    {
        list($response) = $this->yesterdayLogsGETManyRequestYesterdayGetWithHttpInfo($accept, $jiwa_stateful, $skip, $take, $order_by, $order_by_desc, $include, $fields, $meta);
        return $response;
    }

    /**
     * Operation yesterdayLogsGETManyRequestYesterdayGetWithHttpInfo
     *
     * Retrieves a list of log entries for yesterday.
     *
     * @param  string $accept Accept Header (required)
     * @param  bool $jiwa_stateful Stateful indicator (optional)
     * @param  int $skip (optional)
     * @param  int $take (optional)
     * @param  string $order_by (optional)
     * @param  string $order_by_desc (optional)
     * @param  string $include (optional)
     * @param  string $fields (optional)
     * @param  string $meta (optional)
     *
     * @throws \Jiwa\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Jiwa\JiwaModel\QueryResponseRequestLogEntry_, HTTP status code, HTTP response headers (array of strings)
     */
    public function yesterdayLogsGETManyRequestYesterdayGetWithHttpInfo($accept, $jiwa_stateful = null, $skip = null, $take = null, $order_by = null, $order_by_desc = null, $include = null, $fields = null, $meta = null)
    {
        $returnType = '\Jiwa\JiwaModel\QueryResponseRequestLogEntry_';
        $request = $this->yesterdayLogsGETManyRequestYesterdayGetRequest($accept, $jiwa_stateful, $skip, $take, $order_by, $order_by_desc, $include, $fields, $meta);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Jiwa\JiwaModel\QueryResponseRequestLogEntry_',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation yesterdayLogsGETManyRequestYesterdayGetAsync
     *
     * Retrieves a list of log entries for yesterday.
     *
     * @param  string $accept Accept Header (required)
     * @param  bool $jiwa_stateful Stateful indicator (optional)
     * @param  int $skip (optional)
     * @param  int $take (optional)
     * @param  string $order_by (optional)
     * @param  string $order_by_desc (optional)
     * @param  string $include (optional)
     * @param  string $fields (optional)
     * @param  string $meta (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function yesterdayLogsGETManyRequestYesterdayGetAsync($accept, $jiwa_stateful = null, $skip = null, $take = null, $order_by = null, $order_by_desc = null, $include = null, $fields = null, $meta = null)
    {
        return $this->yesterdayLogsGETManyRequestYesterdayGetAsyncWithHttpInfo($accept, $jiwa_stateful, $skip, $take, $order_by, $order_by_desc, $include, $fields, $meta)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation yesterdayLogsGETManyRequestYesterdayGetAsyncWithHttpInfo
     *
     * Retrieves a list of log entries for yesterday.
     *
     * @param  string $accept Accept Header (required)
     * @param  bool $jiwa_stateful Stateful indicator (optional)
     * @param  int $skip (optional)
     * @param  int $take (optional)
     * @param  string $order_by (optional)
     * @param  string $order_by_desc (optional)
     * @param  string $include (optional)
     * @param  string $fields (optional)
     * @param  string $meta (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function yesterdayLogsGETManyRequestYesterdayGetAsyncWithHttpInfo($accept, $jiwa_stateful = null, $skip = null, $take = null, $order_by = null, $order_by_desc = null, $include = null, $fields = null, $meta = null)
    {
        $returnType = '\Jiwa\JiwaModel\QueryResponseRequestLogEntry_';
        $request = $this->yesterdayLogsGETManyRequestYesterdayGetRequest($accept, $jiwa_stateful, $skip, $take, $order_by, $order_by_desc, $include, $fields, $meta);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'yesterdayLogsGETManyRequestYesterdayGet'
     *
     * @param  string $accept Accept Header (required)
     * @param  bool $jiwa_stateful Stateful indicator (optional)
     * @param  int $skip (optional)
     * @param  int $take (optional)
     * @param  string $order_by (optional)
     * @param  string $order_by_desc (optional)
     * @param  string $include (optional)
     * @param  string $fields (optional)
     * @param  string $meta (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function yesterdayLogsGETManyRequestYesterdayGetRequest($accept, $jiwa_stateful = null, $skip = null, $take = null, $order_by = null, $order_by_desc = null, $include = null, $fields = null, $meta = null)
    {
        // verify the required parameter 'accept' is set
        if ($accept === null || (is_array($accept) && count($accept) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $accept when calling yesterdayLogsGETManyRequestYesterdayGet'
            );
        }

        $resourcePath = '/Logs/Yesterday';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        if ($skip !== null) {
            $queryParams['Skip'] = ObjectSerializer::toQueryValue($skip);
        }
        // query params
        if ($take !== null) {
            $queryParams['Take'] = ObjectSerializer::toQueryValue($take);
        }
        // query params
        if ($order_by !== null) {
            $queryParams['OrderBy'] = ObjectSerializer::toQueryValue($order_by);
        }
        // query params
        if ($order_by_desc !== null) {
            $queryParams['OrderByDesc'] = ObjectSerializer::toQueryValue($order_by_desc);
        }
        // query params
        if ($include !== null) {
            $queryParams['Include'] = ObjectSerializer::toQueryValue($include);
        }
        // query params
        if ($fields !== null) {
            $queryParams['Fields'] = ObjectSerializer::toQueryValue($fields);
        }
        // query params
        if ($meta !== null) {
            $queryParams['Meta'] = ObjectSerializer::toQueryValue($meta);
        }
        // header params
        if ($accept !== null) {
            $headerParams['Accept'] = ObjectSerializer::toHeaderValue($accept);
        }
        // header params
        if ($jiwa_stateful !== null) {
            $headerParams['jiwa-stateful'] = ObjectSerializer::toHeaderValue($jiwa_stateful);
        }


        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json', 'application/xml']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json', 'application/xml'],
                ['application/x-www-form-urlencoded', 'application/json', 'application/xml']
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            
            if($headers['Content-Type'] === 'application/json') {
                // \stdClass has no __toString(), so we should encode it manually
                if ($httpBody instanceof \stdClass) {
                    $httpBody = \GuzzleHttp\json_encode($httpBody);
                }
                // array has no __toString(), so we should encode it manually
                if(is_array($httpBody)) {
                    $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($httpBody));
                }
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\Query::build($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\Query::build($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Create http client option
     *
     * @throws \RuntimeException on file opening failure
     * @return array of http client options
     */
    protected function createHttpClientOption()
    {
        $options = [];
        if ($this->config->getDebug()) {
            $options[RequestOptions::DEBUG] = fopen($this->config->getDebugFile(), 'a');
            if (!$options[RequestOptions::DEBUG]) {
                throw new \RuntimeException('Failed to open the debug file: ' . $this->config->getDebugFile());
            }
        }

        return $options;
    }
}

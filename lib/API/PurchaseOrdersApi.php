<?php
/**
 * PurchaseOrdersApi
 * PHP version 5
 *
 * @category Class
 * @package  Jiwa
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * JiwaAPI
 *
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: 1.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 * Swagger Codegen version: 2.4.28-SNAPSHOT
 */

/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Jiwa\JiwaAPI;

use GuzzleHttp\Client;
use GuzzleHttp\ClientInterface;
use GuzzleHttp\Exception\RequestException;
use GuzzleHttp\Psr7\MultipartStream;
use GuzzleHttp\Psr7\Request;
use GuzzleHttp\RequestOptions;
use Jiwa\ApiException;
use Jiwa\Configuration;
use Jiwa\HeaderSelector;
use Jiwa\ObjectSerializer;

/**
 * PurchaseOrdersApi Class Doc Comment
 *
 * @category Class
 * @package  Jiwa
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class PurchaseOrdersApi
{
    /**
     * @var ClientInterface
     */
    protected $client;

    /**
     * @var Configuration
     */
    protected $config;

    /**
     * @var HeaderSelector
     */
    protected $headerSelector;

    /**
     * @param ClientInterface $client
     * @param Configuration   $config
     * @param HeaderSelector  $selector
     */
    public function __construct(
        ClientInterface $client = null,
        Configuration $config = null,
        HeaderSelector $selector = null
    ) {
        $this->client = $client ?: new Client();
        $this->config = $config ?: new Configuration();
        $this->headerSelector = $selector ?: new HeaderSelector();
    }

    /**
     * @return Configuration
     */
    public function getConfig()
    {
        return $this->config;
    }

    /**
     * Operation purchaseOrderABANDONRequestAbandonDelete
     *
     * Abandons a stateful purchase order.
     *
     * @param  string $accept Accept Header (required)
     * @param  bool $jiwa_stateful Stateful indicator (optional)
     * @param  string $purchase_order_id purchase_order_id (optional)
     *
     * @throws \Jiwa\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Jiwa\JiwaModel\Object
     */
    public function purchaseOrderABANDONRequestAbandonDelete($accept, $jiwa_stateful = null, $purchase_order_id = null)
    {
        list($response) = $this->purchaseOrderABANDONRequestAbandonDeleteWithHttpInfo($accept, $jiwa_stateful, $purchase_order_id);
        return $response;
    }

    /**
     * Operation purchaseOrderABANDONRequestAbandonDeleteWithHttpInfo
     *
     * Abandons a stateful purchase order.
     *
     * @param  string $accept Accept Header (required)
     * @param  bool $jiwa_stateful Stateful indicator (optional)
     * @param  string $purchase_order_id (optional)
     *
     * @throws \Jiwa\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Jiwa\JiwaModel\Object, HTTP status code, HTTP response headers (array of strings)
     */
    public function purchaseOrderABANDONRequestAbandonDeleteWithHttpInfo($accept, $jiwa_stateful = null, $purchase_order_id = null)
    {
        $returnType = '\Jiwa\JiwaModel\Object';
        $request = $this->purchaseOrderABANDONRequestAbandonDeleteRequest($accept, $jiwa_stateful, $purchase_order_id);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Jiwa\JiwaModel\Object',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 401:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Jiwa\JiwaModel\Object',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 404:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Jiwa\JiwaModel\Object',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 403:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Jiwa\JiwaModel\Object',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation purchaseOrderABANDONRequestAbandonDeleteAsync
     *
     * Abandons a stateful purchase order.
     *
     * @param  string $accept Accept Header (required)
     * @param  bool $jiwa_stateful Stateful indicator (optional)
     * @param  string $purchase_order_id (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function purchaseOrderABANDONRequestAbandonDeleteAsync($accept, $jiwa_stateful = null, $purchase_order_id = null)
    {
        return $this->purchaseOrderABANDONRequestAbandonDeleteAsyncWithHttpInfo($accept, $jiwa_stateful, $purchase_order_id)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation purchaseOrderABANDONRequestAbandonDeleteAsyncWithHttpInfo
     *
     * Abandons a stateful purchase order.
     *
     * @param  string $accept Accept Header (required)
     * @param  bool $jiwa_stateful Stateful indicator (optional)
     * @param  string $purchase_order_id (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function purchaseOrderABANDONRequestAbandonDeleteAsyncWithHttpInfo($accept, $jiwa_stateful = null, $purchase_order_id = null)
    {
        $returnType = '\Jiwa\JiwaModel\Object';
        $request = $this->purchaseOrderABANDONRequestAbandonDeleteRequest($accept, $jiwa_stateful, $purchase_order_id);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'purchaseOrderABANDONRequestAbandonDelete'
     *
     * @param  string $accept Accept Header (required)
     * @param  bool $jiwa_stateful Stateful indicator (optional)
     * @param  string $purchase_order_id (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function purchaseOrderABANDONRequestAbandonDeleteRequest($accept, $jiwa_stateful = null, $purchase_order_id = null)
    {
        // verify the required parameter 'accept' is set
        if ($accept === null || (is_array($accept) && count($accept) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $accept when calling purchaseOrderABANDONRequestAbandonDelete'
            );
        }

        $resourcePath = '/PurchaseOrders/Abandon';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        if ($purchase_order_id !== null) {
            $queryParams['PurchaseOrderID'] = ObjectSerializer::toQueryValue($purchase_order_id);
        }
        // header params
        if ($accept !== null) {
            $headerParams['Accept'] = ObjectSerializer::toHeaderValue($accept);
        }
        // header params
        if ($jiwa_stateful !== null) {
            $headerParams['jiwa-stateful'] = ObjectSerializer::toHeaderValue($jiwa_stateful);
        }


        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json', 'application/xml']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json', 'application/xml'],
                ['application/x-www-form-urlencoded', 'application/json', 'application/xml']
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            
            if($headers['Content-Type'] === 'application/json') {
                // \stdClass has no __toString(), so we should encode it manually
                if ($httpBody instanceof \stdClass) {
                    $httpBody = \GuzzleHttp\json_encode($httpBody);
                }
                // array has no __toString(), so we should encode it manually
                if(is_array($httpBody)) {
                    $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($httpBody));
                }
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\Query::build($formParams);
            }
        }

        // this endpoint requires HTTP basic authentication
        if ($this->config->getUsername() !== null || $this->config->getPassword() !== null) {
            $headers['Authorization'] = 'Basic ' . base64_encode($this->config->getUsername() . ":" . $this->config->getPassword());
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\Query::build($queryParams);
        return new Request(
            'DELETE',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation purchaseOrderACTIVATERequestActivatePurchaseOrderIDPost
     *
     * Sets the status of a purchase order to 'Sent'.
     *
     * @param  string $accept Accept Header (required)
     * @param  string $purchase_order_id purchase_order_id (required)
     * @param  bool $jiwa_stateful Stateful indicator (optional)
     * @param  \Jiwa\JiwaModel\PurchaseOrderACTIVATERequest $body body (optional)
     *
     * @throws \Jiwa\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Jiwa\JiwaModel\PurchaseOrder
     */
    public function purchaseOrderACTIVATERequestActivatePurchaseOrderIDPost($accept, $purchase_order_id, $jiwa_stateful = null, $body = null)
    {
        list($response) = $this->purchaseOrderACTIVATERequestActivatePurchaseOrderIDPostWithHttpInfo($accept, $purchase_order_id, $jiwa_stateful, $body);
        return $response;
    }

    /**
     * Operation purchaseOrderACTIVATERequestActivatePurchaseOrderIDPostWithHttpInfo
     *
     * Sets the status of a purchase order to 'Sent'.
     *
     * @param  string $accept Accept Header (required)
     * @param  string $purchase_order_id (required)
     * @param  bool $jiwa_stateful Stateful indicator (optional)
     * @param  \Jiwa\JiwaModel\PurchaseOrderACTIVATERequest $body (optional)
     *
     * @throws \Jiwa\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Jiwa\JiwaModel\PurchaseOrder, HTTP status code, HTTP response headers (array of strings)
     */
    public function purchaseOrderACTIVATERequestActivatePurchaseOrderIDPostWithHttpInfo($accept, $purchase_order_id, $jiwa_stateful = null, $body = null)
    {
        $returnType = '\Jiwa\JiwaModel\PurchaseOrder';
        $request = $this->purchaseOrderACTIVATERequestActivatePurchaseOrderIDPostRequest($accept, $purchase_order_id, $jiwa_stateful, $body);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Jiwa\JiwaModel\PurchaseOrder',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 404:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Jiwa\JiwaModel\PurchaseOrder',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 403:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Jiwa\JiwaModel\PurchaseOrder',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 204:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Jiwa\JiwaModel\PurchaseOrder',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 401:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Jiwa\JiwaModel\PurchaseOrder',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation purchaseOrderACTIVATERequestActivatePurchaseOrderIDPostAsync
     *
     * Sets the status of a purchase order to 'Sent'.
     *
     * @param  string $accept Accept Header (required)
     * @param  string $purchase_order_id (required)
     * @param  bool $jiwa_stateful Stateful indicator (optional)
     * @param  \Jiwa\JiwaModel\PurchaseOrderACTIVATERequest $body (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function purchaseOrderACTIVATERequestActivatePurchaseOrderIDPostAsync($accept, $purchase_order_id, $jiwa_stateful = null, $body = null)
    {
        return $this->purchaseOrderACTIVATERequestActivatePurchaseOrderIDPostAsyncWithHttpInfo($accept, $purchase_order_id, $jiwa_stateful, $body)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation purchaseOrderACTIVATERequestActivatePurchaseOrderIDPostAsyncWithHttpInfo
     *
     * Sets the status of a purchase order to 'Sent'.
     *
     * @param  string $accept Accept Header (required)
     * @param  string $purchase_order_id (required)
     * @param  bool $jiwa_stateful Stateful indicator (optional)
     * @param  \Jiwa\JiwaModel\PurchaseOrderACTIVATERequest $body (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function purchaseOrderACTIVATERequestActivatePurchaseOrderIDPostAsyncWithHttpInfo($accept, $purchase_order_id, $jiwa_stateful = null, $body = null)
    {
        $returnType = '\Jiwa\JiwaModel\PurchaseOrder';
        $request = $this->purchaseOrderACTIVATERequestActivatePurchaseOrderIDPostRequest($accept, $purchase_order_id, $jiwa_stateful, $body);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'purchaseOrderACTIVATERequestActivatePurchaseOrderIDPost'
     *
     * @param  string $accept Accept Header (required)
     * @param  string $purchase_order_id (required)
     * @param  bool $jiwa_stateful Stateful indicator (optional)
     * @param  \Jiwa\JiwaModel\PurchaseOrderACTIVATERequest $body (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function purchaseOrderACTIVATERequestActivatePurchaseOrderIDPostRequest($accept, $purchase_order_id, $jiwa_stateful = null, $body = null)
    {
        // verify the required parameter 'accept' is set
        if ($accept === null || (is_array($accept) && count($accept) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $accept when calling purchaseOrderACTIVATERequestActivatePurchaseOrderIDPost'
            );
        }
        // verify the required parameter 'purchase_order_id' is set
        if ($purchase_order_id === null || (is_array($purchase_order_id) && count($purchase_order_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $purchase_order_id when calling purchaseOrderACTIVATERequestActivatePurchaseOrderIDPost'
            );
        }

        $resourcePath = '/PurchaseOrders/Activate/{PurchaseOrderID}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // header params
        if ($accept !== null) {
            $headerParams['Accept'] = ObjectSerializer::toHeaderValue($accept);
        }
        // header params
        if ($jiwa_stateful !== null) {
            $headerParams['jiwa-stateful'] = ObjectSerializer::toHeaderValue($jiwa_stateful);
        }

        // path params
        if ($purchase_order_id !== null) {
            $resourcePath = str_replace(
                '{' . 'PurchaseOrderID' . '}',
                ObjectSerializer::toPathValue($purchase_order_id),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;
        if (isset($body)) {
            $_tempBody = $body;
        }

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json', 'application/xml']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json', 'application/xml'],
                ['application/x-www-form-urlencoded', 'application/json', 'application/xml']
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            
            if($headers['Content-Type'] === 'application/json') {
                // \stdClass has no __toString(), so we should encode it manually
                if ($httpBody instanceof \stdClass) {
                    $httpBody = \GuzzleHttp\json_encode($httpBody);
                }
                // array has no __toString(), so we should encode it manually
                if(is_array($httpBody)) {
                    $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($httpBody));
                }
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\Query::build($formParams);
            }
        }

        // this endpoint requires HTTP basic authentication
        if ($this->config->getUsername() !== null || $this->config->getPassword() !== null) {
            $headers['Authorization'] = 'Basic ' . base64_encode($this->config->getUsername() . ":" . $this->config->getPassword());
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\Query::build($queryParams);
        return new Request(
            'POST',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation purchaseOrderDELETERequestPurchaseOrderIDDelete
     *
     * Deletes a purchase order.
     *
     * @param  string $accept Accept Header (required)
     * @param  string $purchase_order_id purchase_order_id (required)
     * @param  bool $jiwa_stateful Stateful indicator (optional)
     *
     * @throws \Jiwa\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Jiwa\JiwaModel\Object
     */
    public function purchaseOrderDELETERequestPurchaseOrderIDDelete($accept, $purchase_order_id, $jiwa_stateful = null)
    {
        list($response) = $this->purchaseOrderDELETERequestPurchaseOrderIDDeleteWithHttpInfo($accept, $purchase_order_id, $jiwa_stateful);
        return $response;
    }

    /**
     * Operation purchaseOrderDELETERequestPurchaseOrderIDDeleteWithHttpInfo
     *
     * Deletes a purchase order.
     *
     * @param  string $accept Accept Header (required)
     * @param  string $purchase_order_id (required)
     * @param  bool $jiwa_stateful Stateful indicator (optional)
     *
     * @throws \Jiwa\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Jiwa\JiwaModel\Object, HTTP status code, HTTP response headers (array of strings)
     */
    public function purchaseOrderDELETERequestPurchaseOrderIDDeleteWithHttpInfo($accept, $purchase_order_id, $jiwa_stateful = null)
    {
        $returnType = '\Jiwa\JiwaModel\Object';
        $request = $this->purchaseOrderDELETERequestPurchaseOrderIDDeleteRequest($accept, $purchase_order_id, $jiwa_stateful);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Jiwa\JiwaModel\Object',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 404:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Jiwa\JiwaModel\Object',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 204:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Jiwa\JiwaModel\Object',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 401:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Jiwa\JiwaModel\Object',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 403:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Jiwa\JiwaModel\Object',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation purchaseOrderDELETERequestPurchaseOrderIDDeleteAsync
     *
     * Deletes a purchase order.
     *
     * @param  string $accept Accept Header (required)
     * @param  string $purchase_order_id (required)
     * @param  bool $jiwa_stateful Stateful indicator (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function purchaseOrderDELETERequestPurchaseOrderIDDeleteAsync($accept, $purchase_order_id, $jiwa_stateful = null)
    {
        return $this->purchaseOrderDELETERequestPurchaseOrderIDDeleteAsyncWithHttpInfo($accept, $purchase_order_id, $jiwa_stateful)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation purchaseOrderDELETERequestPurchaseOrderIDDeleteAsyncWithHttpInfo
     *
     * Deletes a purchase order.
     *
     * @param  string $accept Accept Header (required)
     * @param  string $purchase_order_id (required)
     * @param  bool $jiwa_stateful Stateful indicator (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function purchaseOrderDELETERequestPurchaseOrderIDDeleteAsyncWithHttpInfo($accept, $purchase_order_id, $jiwa_stateful = null)
    {
        $returnType = '\Jiwa\JiwaModel\Object';
        $request = $this->purchaseOrderDELETERequestPurchaseOrderIDDeleteRequest($accept, $purchase_order_id, $jiwa_stateful);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'purchaseOrderDELETERequestPurchaseOrderIDDelete'
     *
     * @param  string $accept Accept Header (required)
     * @param  string $purchase_order_id (required)
     * @param  bool $jiwa_stateful Stateful indicator (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function purchaseOrderDELETERequestPurchaseOrderIDDeleteRequest($accept, $purchase_order_id, $jiwa_stateful = null)
    {
        // verify the required parameter 'accept' is set
        if ($accept === null || (is_array($accept) && count($accept) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $accept when calling purchaseOrderDELETERequestPurchaseOrderIDDelete'
            );
        }
        // verify the required parameter 'purchase_order_id' is set
        if ($purchase_order_id === null || (is_array($purchase_order_id) && count($purchase_order_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $purchase_order_id when calling purchaseOrderDELETERequestPurchaseOrderIDDelete'
            );
        }

        $resourcePath = '/PurchaseOrders/{PurchaseOrderID}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // header params
        if ($accept !== null) {
            $headerParams['Accept'] = ObjectSerializer::toHeaderValue($accept);
        }
        // header params
        if ($jiwa_stateful !== null) {
            $headerParams['jiwa-stateful'] = ObjectSerializer::toHeaderValue($jiwa_stateful);
        }

        // path params
        if ($purchase_order_id !== null) {
            $resourcePath = str_replace(
                '{' . 'PurchaseOrderID' . '}',
                ObjectSerializer::toPathValue($purchase_order_id),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json', 'application/xml']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json', 'application/xml'],
                ['application/x-www-form-urlencoded', 'application/json', 'application/xml']
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            
            if($headers['Content-Type'] === 'application/json') {
                // \stdClass has no __toString(), so we should encode it manually
                if ($httpBody instanceof \stdClass) {
                    $httpBody = \GuzzleHttp\json_encode($httpBody);
                }
                // array has no __toString(), so we should encode it manually
                if(is_array($httpBody)) {
                    $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($httpBody));
                }
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\Query::build($formParams);
            }
        }

        // this endpoint requires HTTP basic authentication
        if ($this->config->getUsername() !== null || $this->config->getPassword() !== null) {
            $headers['Authorization'] = 'Basic ' . base64_encode($this->config->getUsername() . ":" . $this->config->getPassword());
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\Query::build($queryParams);
        return new Request(
            'DELETE',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation purchaseOrderGETRequestPurchaseOrderIDGet
     *
     * Retrieves a purchase order.
     *
     * @param  string $accept Accept Header (required)
     * @param  string $purchase_order_id purchase_order_id (required)
     * @param  bool $jiwa_stateful Stateful indicator (optional)
     *
     * @throws \Jiwa\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Jiwa\JiwaModel\PurchaseOrder
     */
    public function purchaseOrderGETRequestPurchaseOrderIDGet($accept, $purchase_order_id, $jiwa_stateful = null)
    {
        list($response) = $this->purchaseOrderGETRequestPurchaseOrderIDGetWithHttpInfo($accept, $purchase_order_id, $jiwa_stateful);
        return $response;
    }

    /**
     * Operation purchaseOrderGETRequestPurchaseOrderIDGetWithHttpInfo
     *
     * Retrieves a purchase order.
     *
     * @param  string $accept Accept Header (required)
     * @param  string $purchase_order_id (required)
     * @param  bool $jiwa_stateful Stateful indicator (optional)
     *
     * @throws \Jiwa\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Jiwa\JiwaModel\PurchaseOrder, HTTP status code, HTTP response headers (array of strings)
     */
    public function purchaseOrderGETRequestPurchaseOrderIDGetWithHttpInfo($accept, $purchase_order_id, $jiwa_stateful = null)
    {
        $returnType = '\Jiwa\JiwaModel\PurchaseOrder';
        $request = $this->purchaseOrderGETRequestPurchaseOrderIDGetRequest($accept, $purchase_order_id, $jiwa_stateful);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Jiwa\JiwaModel\PurchaseOrder',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 401:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Jiwa\JiwaModel\PurchaseOrder',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 404:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Jiwa\JiwaModel\PurchaseOrder',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 403:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Jiwa\JiwaModel\PurchaseOrder',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation purchaseOrderGETRequestPurchaseOrderIDGetAsync
     *
     * Retrieves a purchase order.
     *
     * @param  string $accept Accept Header (required)
     * @param  string $purchase_order_id (required)
     * @param  bool $jiwa_stateful Stateful indicator (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function purchaseOrderGETRequestPurchaseOrderIDGetAsync($accept, $purchase_order_id, $jiwa_stateful = null)
    {
        return $this->purchaseOrderGETRequestPurchaseOrderIDGetAsyncWithHttpInfo($accept, $purchase_order_id, $jiwa_stateful)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation purchaseOrderGETRequestPurchaseOrderIDGetAsyncWithHttpInfo
     *
     * Retrieves a purchase order.
     *
     * @param  string $accept Accept Header (required)
     * @param  string $purchase_order_id (required)
     * @param  bool $jiwa_stateful Stateful indicator (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function purchaseOrderGETRequestPurchaseOrderIDGetAsyncWithHttpInfo($accept, $purchase_order_id, $jiwa_stateful = null)
    {
        $returnType = '\Jiwa\JiwaModel\PurchaseOrder';
        $request = $this->purchaseOrderGETRequestPurchaseOrderIDGetRequest($accept, $purchase_order_id, $jiwa_stateful);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'purchaseOrderGETRequestPurchaseOrderIDGet'
     *
     * @param  string $accept Accept Header (required)
     * @param  string $purchase_order_id (required)
     * @param  bool $jiwa_stateful Stateful indicator (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function purchaseOrderGETRequestPurchaseOrderIDGetRequest($accept, $purchase_order_id, $jiwa_stateful = null)
    {
        // verify the required parameter 'accept' is set
        if ($accept === null || (is_array($accept) && count($accept) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $accept when calling purchaseOrderGETRequestPurchaseOrderIDGet'
            );
        }
        // verify the required parameter 'purchase_order_id' is set
        if ($purchase_order_id === null || (is_array($purchase_order_id) && count($purchase_order_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $purchase_order_id when calling purchaseOrderGETRequestPurchaseOrderIDGet'
            );
        }

        $resourcePath = '/PurchaseOrders/{PurchaseOrderID}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // header params
        if ($accept !== null) {
            $headerParams['Accept'] = ObjectSerializer::toHeaderValue($accept);
        }
        // header params
        if ($jiwa_stateful !== null) {
            $headerParams['jiwa-stateful'] = ObjectSerializer::toHeaderValue($jiwa_stateful);
        }

        // path params
        if ($purchase_order_id !== null) {
            $resourcePath = str_replace(
                '{' . 'PurchaseOrderID' . '}',
                ObjectSerializer::toPathValue($purchase_order_id),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json', 'application/xml']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json', 'application/xml'],
                ['application/x-www-form-urlencoded', 'application/json', 'application/xml']
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            
            if($headers['Content-Type'] === 'application/json') {
                // \stdClass has no __toString(), so we should encode it manually
                if ($httpBody instanceof \stdClass) {
                    $httpBody = \GuzzleHttp\json_encode($httpBody);
                }
                // array has no __toString(), so we should encode it manually
                if(is_array($httpBody)) {
                    $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($httpBody));
                }
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\Query::build($formParams);
            }
        }

        // this endpoint requires HTTP basic authentication
        if ($this->config->getUsername() !== null || $this->config->getPassword() !== null) {
            $headers['Authorization'] = 'Basic ' . base64_encode($this->config->getUsername() . ":" . $this->config->getPassword());
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\Query::build($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation purchaseOrderLineDELETERequestPurchaseOrderIDLinesPurchaseOrderLineIDDelete
     *
     * Deletes a line from a purchase order.
     *
     * @param  string $accept Accept Header (required)
     * @param  string $purchase_order_id purchase_order_id (required)
     * @param  string $purchase_order_line_id purchase_order_line_id (required)
     * @param  bool $jiwa_stateful Stateful indicator (optional)
     * @param  int $item_no item_no (optional)
     * @param  string $inventory_id inventory_id (optional)
     * @param  bool $is_physical is_physical (optional)
     * @param  string $part_no part_no (optional)
     * @param  string $description description (optional)
     * @param  int $quantity_decimal_places quantity_decimal_places (optional)
     * @param  bool $make_supplier_the_new_default make_supplier_the_new_default (optional)
     * @param  string $purchase_order_line_type purchase_order_line_type (optional)
     * @param  double $quantity quantity (optional)
     * @param  double $inc_price inc_price (optional)
     * @param  double $tax_amount tax_amount (optional)
     * @param  double $line_total line_total (optional)
     * @param  double $line_total_ex_tax line_total_ex_tax (optional)
     * @param  double $fx_total fx_total (optional)
     * @param  double $currency_rate_used currency_rate_used (optional)
     * @param  int $fx_decimal_places fx_decimal_places (optional)
     * @param  int $home_currency_decimal_places home_currency_decimal_places (optional)
     * @param  \DateTime $delivery_date delivery_date (optional)
     * @param  double $delivered delivered (optional)
     * @param  string $history_text_comment history_text_comment (optional)
     * @param  string $job_costing_stage_rec_id job_costing_stage_rec_id (optional)
     * @param  string $job_costing_stage_no job_costing_stage_no (optional)
     * @param  string $job_costing_stage_name job_costing_stage_name (optional)
     * @param  string $job_costing_stage_classification_rec_id job_costing_stage_classification_rec_id (optional)
     * @param  string $job_costing_stage_classification_description job_costing_stage_classification_description (optional)
     * @param  string $job_costing_cost_centre_rec_id job_costing_cost_centre_rec_id (optional)
     * @param  string $job_costing_cost_centre_no job_costing_cost_centre_no (optional)
     * @param  string $job_costing_cost_centre_name job_costing_cost_centre_name (optional)
     * @param  string $job_costing_job_rec_id job_costing_job_rec_id (optional)
     * @param  string $job_costing_job_no job_costing_job_no (optional)
     * @param  string $job_costing_job_description job_costing_job_description (optional)
     * @param  string $in_on_back_order_orders_on_back_id in_on_back_order_orders_on_back_id (optional)
     * @param  double $in_on_back_order_quantity in_on_back_order_quantity (optional)
     * @param  double $in_on_back_order_est_bo_value in_on_back_order_est_bo_value (optional)
     * @param  \DateTime $in_on_back_order_last_saved_date_time in_on_back_order_last_saved_date_time (optional)
     * @param  string $invoice_line_id invoice_line_id (optional)
     * @param  double $user_defined_float1 user_defined_float1 (optional)
     * @param  double $user_defined_float2 user_defined_float2 (optional)
     * @param  double $user_defined_float3 user_defined_float3 (optional)
     * @param  \DateTime $user_defined_date1 user_defined_date1 (optional)
     * @param  \DateTime $user_defined_date2 user_defined_date2 (optional)
     * @param  \DateTime $user_defined_date3 user_defined_date3 (optional)
     * @param  string $user_defined_string1 user_defined_string1 (optional)
     * @param  string $user_defined_string2 user_defined_string2 (optional)
     * @param  string $user_defined_string3 user_defined_string3 (optional)
     * @param  string $purchasing_classification_rec_id purchasing_classification_rec_id (optional)
     * @param  string $purchasing_classification_description purchasing_classification_description (optional)
     * @param  string $purchasing_classification_ledger_account_rec_id purchasing_classification_ledger_account_rec_id (optional)
     * @param  string $purchasing_classification_ledger_account_account_no purchasing_classification_ledger_account_account_no (optional)
     * @param  string $purchasing_classification_ledger_account_description purchasing_classification_ledger_account_description (optional)
     * @param  string $service_manager_task_rec_id service_manager_task_rec_id (optional)
     * @param  int $service_manager_task_no service_manager_task_no (optional)
     * @param  string $service_manager_task_description service_manager_task_description (optional)
     * @param  string $service_manager_job_rec_id service_manager_job_rec_id (optional)
     * @param  string $service_manager_job_no service_manager_job_no (optional)
     * @param  string $service_manager_job_description service_manager_job_description (optional)
     * @param  string $in_creditor_rec_id in_creditor_rec_id (optional)
     * @param  string $supplier_part_no supplier_part_no (optional)
     * @param  string $in_supplier_warehouse_rec_id in_supplier_warehouse_rec_id (optional)
     * @param  double $order_units order_units (optional)
     * @param  int $delivery_days delivery_days (optional)
     * @param  double $fx_cost fx_cost (optional)
     * @param  double $cost cost (optional)
     * @param  double $cost_original cost_original (optional)
     * @param  string $units units (optional)
     * @param  string $tax_rate_rec_id tax_rate_rec_id (optional)
     * @param  string $tax_rate_description tax_rate_description (optional)
     * @param  double $tax_rate tax_rate (optional)
     * @param  int $tax_rate_bas_code tax_rate_bas_code (optional)
     * @param  string $inventory_expected_liability_ledger_account_rec_id inventory_expected_liability_ledger_account_rec_id (optional)
     * @param  string $inventory_expected_liability_ledger_account_account_no inventory_expected_liability_ledger_account_account_no (optional)
     * @param  string $inventory_expected_liability_ledger_account_description inventory_expected_liability_ledger_account_description (optional)
     * @param  string $inventory_expected_asset_ledger_account_rec_id inventory_expected_asset_ledger_account_rec_id (optional)
     * @param  string $inventory_expected_asset_ledger_account_account_no inventory_expected_asset_ledger_account_account_no (optional)
     * @param  string $inventory_expected_asset_ledger_account_description inventory_expected_asset_ledger_account_description (optional)
     * @param  string $classification_id classification_id (optional)
     * @param  string $classification_description classification_description (optional)
     * @param  string $custom_field_values custom_field_values (optional)
     *
     * @throws \Jiwa\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Jiwa\JiwaModel\Object
     */
    public function purchaseOrderLineDELETERequestPurchaseOrderIDLinesPurchaseOrderLineIDDelete($accept, $purchase_order_id, $purchase_order_line_id, $jiwa_stateful = null, $item_no = null, $inventory_id = null, $is_physical = null, $part_no = null, $description = null, $quantity_decimal_places = null, $make_supplier_the_new_default = null, $purchase_order_line_type = null, $quantity = null, $inc_price = null, $tax_amount = null, $line_total = null, $line_total_ex_tax = null, $fx_total = null, $currency_rate_used = null, $fx_decimal_places = null, $home_currency_decimal_places = null, $delivery_date = null, $delivered = null, $history_text_comment = null, $job_costing_stage_rec_id = null, $job_costing_stage_no = null, $job_costing_stage_name = null, $job_costing_stage_classification_rec_id = null, $job_costing_stage_classification_description = null, $job_costing_cost_centre_rec_id = null, $job_costing_cost_centre_no = null, $job_costing_cost_centre_name = null, $job_costing_job_rec_id = null, $job_costing_job_no = null, $job_costing_job_description = null, $in_on_back_order_orders_on_back_id = null, $in_on_back_order_quantity = null, $in_on_back_order_est_bo_value = null, $in_on_back_order_last_saved_date_time = null, $invoice_line_id = null, $user_defined_float1 = null, $user_defined_float2 = null, $user_defined_float3 = null, $user_defined_date1 = null, $user_defined_date2 = null, $user_defined_date3 = null, $user_defined_string1 = null, $user_defined_string2 = null, $user_defined_string3 = null, $purchasing_classification_rec_id = null, $purchasing_classification_description = null, $purchasing_classification_ledger_account_rec_id = null, $purchasing_classification_ledger_account_account_no = null, $purchasing_classification_ledger_account_description = null, $service_manager_task_rec_id = null, $service_manager_task_no = null, $service_manager_task_description = null, $service_manager_job_rec_id = null, $service_manager_job_no = null, $service_manager_job_description = null, $in_creditor_rec_id = null, $supplier_part_no = null, $in_supplier_warehouse_rec_id = null, $order_units = null, $delivery_days = null, $fx_cost = null, $cost = null, $cost_original = null, $units = null, $tax_rate_rec_id = null, $tax_rate_description = null, $tax_rate = null, $tax_rate_bas_code = null, $inventory_expected_liability_ledger_account_rec_id = null, $inventory_expected_liability_ledger_account_account_no = null, $inventory_expected_liability_ledger_account_description = null, $inventory_expected_asset_ledger_account_rec_id = null, $inventory_expected_asset_ledger_account_account_no = null, $inventory_expected_asset_ledger_account_description = null, $classification_id = null, $classification_description = null, $custom_field_values = null)
    {
        list($response) = $this->purchaseOrderLineDELETERequestPurchaseOrderIDLinesPurchaseOrderLineIDDeleteWithHttpInfo($accept, $purchase_order_id, $purchase_order_line_id, $jiwa_stateful, $item_no, $inventory_id, $is_physical, $part_no, $description, $quantity_decimal_places, $make_supplier_the_new_default, $purchase_order_line_type, $quantity, $inc_price, $tax_amount, $line_total, $line_total_ex_tax, $fx_total, $currency_rate_used, $fx_decimal_places, $home_currency_decimal_places, $delivery_date, $delivered, $history_text_comment, $job_costing_stage_rec_id, $job_costing_stage_no, $job_costing_stage_name, $job_costing_stage_classification_rec_id, $job_costing_stage_classification_description, $job_costing_cost_centre_rec_id, $job_costing_cost_centre_no, $job_costing_cost_centre_name, $job_costing_job_rec_id, $job_costing_job_no, $job_costing_job_description, $in_on_back_order_orders_on_back_id, $in_on_back_order_quantity, $in_on_back_order_est_bo_value, $in_on_back_order_last_saved_date_time, $invoice_line_id, $user_defined_float1, $user_defined_float2, $user_defined_float3, $user_defined_date1, $user_defined_date2, $user_defined_date3, $user_defined_string1, $user_defined_string2, $user_defined_string3, $purchasing_classification_rec_id, $purchasing_classification_description, $purchasing_classification_ledger_account_rec_id, $purchasing_classification_ledger_account_account_no, $purchasing_classification_ledger_account_description, $service_manager_task_rec_id, $service_manager_task_no, $service_manager_task_description, $service_manager_job_rec_id, $service_manager_job_no, $service_manager_job_description, $in_creditor_rec_id, $supplier_part_no, $in_supplier_warehouse_rec_id, $order_units, $delivery_days, $fx_cost, $cost, $cost_original, $units, $tax_rate_rec_id, $tax_rate_description, $tax_rate, $tax_rate_bas_code, $inventory_expected_liability_ledger_account_rec_id, $inventory_expected_liability_ledger_account_account_no, $inventory_expected_liability_ledger_account_description, $inventory_expected_asset_ledger_account_rec_id, $inventory_expected_asset_ledger_account_account_no, $inventory_expected_asset_ledger_account_description, $classification_id, $classification_description, $custom_field_values);
        return $response;
    }

    /**
     * Operation purchaseOrderLineDELETERequestPurchaseOrderIDLinesPurchaseOrderLineIDDeleteWithHttpInfo
     *
     * Deletes a line from a purchase order.
     *
     * @param  string $accept Accept Header (required)
     * @param  string $purchase_order_id (required)
     * @param  string $purchase_order_line_id (required)
     * @param  bool $jiwa_stateful Stateful indicator (optional)
     * @param  int $item_no (optional)
     * @param  string $inventory_id (optional)
     * @param  bool $is_physical (optional)
     * @param  string $part_no (optional)
     * @param  string $description (optional)
     * @param  int $quantity_decimal_places (optional)
     * @param  bool $make_supplier_the_new_default (optional)
     * @param  string $purchase_order_line_type (optional)
     * @param  double $quantity (optional)
     * @param  double $inc_price (optional)
     * @param  double $tax_amount (optional)
     * @param  double $line_total (optional)
     * @param  double $line_total_ex_tax (optional)
     * @param  double $fx_total (optional)
     * @param  double $currency_rate_used (optional)
     * @param  int $fx_decimal_places (optional)
     * @param  int $home_currency_decimal_places (optional)
     * @param  \DateTime $delivery_date (optional)
     * @param  double $delivered (optional)
     * @param  string $history_text_comment (optional)
     * @param  string $job_costing_stage_rec_id (optional)
     * @param  string $job_costing_stage_no (optional)
     * @param  string $job_costing_stage_name (optional)
     * @param  string $job_costing_stage_classification_rec_id (optional)
     * @param  string $job_costing_stage_classification_description (optional)
     * @param  string $job_costing_cost_centre_rec_id (optional)
     * @param  string $job_costing_cost_centre_no (optional)
     * @param  string $job_costing_cost_centre_name (optional)
     * @param  string $job_costing_job_rec_id (optional)
     * @param  string $job_costing_job_no (optional)
     * @param  string $job_costing_job_description (optional)
     * @param  string $in_on_back_order_orders_on_back_id (optional)
     * @param  double $in_on_back_order_quantity (optional)
     * @param  double $in_on_back_order_est_bo_value (optional)
     * @param  \DateTime $in_on_back_order_last_saved_date_time (optional)
     * @param  string $invoice_line_id (optional)
     * @param  double $user_defined_float1 (optional)
     * @param  double $user_defined_float2 (optional)
     * @param  double $user_defined_float3 (optional)
     * @param  \DateTime $user_defined_date1 (optional)
     * @param  \DateTime $user_defined_date2 (optional)
     * @param  \DateTime $user_defined_date3 (optional)
     * @param  string $user_defined_string1 (optional)
     * @param  string $user_defined_string2 (optional)
     * @param  string $user_defined_string3 (optional)
     * @param  string $purchasing_classification_rec_id (optional)
     * @param  string $purchasing_classification_description (optional)
     * @param  string $purchasing_classification_ledger_account_rec_id (optional)
     * @param  string $purchasing_classification_ledger_account_account_no (optional)
     * @param  string $purchasing_classification_ledger_account_description (optional)
     * @param  string $service_manager_task_rec_id (optional)
     * @param  int $service_manager_task_no (optional)
     * @param  string $service_manager_task_description (optional)
     * @param  string $service_manager_job_rec_id (optional)
     * @param  string $service_manager_job_no (optional)
     * @param  string $service_manager_job_description (optional)
     * @param  string $in_creditor_rec_id (optional)
     * @param  string $supplier_part_no (optional)
     * @param  string $in_supplier_warehouse_rec_id (optional)
     * @param  double $order_units (optional)
     * @param  int $delivery_days (optional)
     * @param  double $fx_cost (optional)
     * @param  double $cost (optional)
     * @param  double $cost_original (optional)
     * @param  string $units (optional)
     * @param  string $tax_rate_rec_id (optional)
     * @param  string $tax_rate_description (optional)
     * @param  double $tax_rate (optional)
     * @param  int $tax_rate_bas_code (optional)
     * @param  string $inventory_expected_liability_ledger_account_rec_id (optional)
     * @param  string $inventory_expected_liability_ledger_account_account_no (optional)
     * @param  string $inventory_expected_liability_ledger_account_description (optional)
     * @param  string $inventory_expected_asset_ledger_account_rec_id (optional)
     * @param  string $inventory_expected_asset_ledger_account_account_no (optional)
     * @param  string $inventory_expected_asset_ledger_account_description (optional)
     * @param  string $classification_id (optional)
     * @param  string $classification_description (optional)
     * @param  string $custom_field_values (optional)
     *
     * @throws \Jiwa\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Jiwa\JiwaModel\Object, HTTP status code, HTTP response headers (array of strings)
     */
    public function purchaseOrderLineDELETERequestPurchaseOrderIDLinesPurchaseOrderLineIDDeleteWithHttpInfo($accept, $purchase_order_id, $purchase_order_line_id, $jiwa_stateful = null, $item_no = null, $inventory_id = null, $is_physical = null, $part_no = null, $description = null, $quantity_decimal_places = null, $make_supplier_the_new_default = null, $purchase_order_line_type = null, $quantity = null, $inc_price = null, $tax_amount = null, $line_total = null, $line_total_ex_tax = null, $fx_total = null, $currency_rate_used = null, $fx_decimal_places = null, $home_currency_decimal_places = null, $delivery_date = null, $delivered = null, $history_text_comment = null, $job_costing_stage_rec_id = null, $job_costing_stage_no = null, $job_costing_stage_name = null, $job_costing_stage_classification_rec_id = null, $job_costing_stage_classification_description = null, $job_costing_cost_centre_rec_id = null, $job_costing_cost_centre_no = null, $job_costing_cost_centre_name = null, $job_costing_job_rec_id = null, $job_costing_job_no = null, $job_costing_job_description = null, $in_on_back_order_orders_on_back_id = null, $in_on_back_order_quantity = null, $in_on_back_order_est_bo_value = null, $in_on_back_order_last_saved_date_time = null, $invoice_line_id = null, $user_defined_float1 = null, $user_defined_float2 = null, $user_defined_float3 = null, $user_defined_date1 = null, $user_defined_date2 = null, $user_defined_date3 = null, $user_defined_string1 = null, $user_defined_string2 = null, $user_defined_string3 = null, $purchasing_classification_rec_id = null, $purchasing_classification_description = null, $purchasing_classification_ledger_account_rec_id = null, $purchasing_classification_ledger_account_account_no = null, $purchasing_classification_ledger_account_description = null, $service_manager_task_rec_id = null, $service_manager_task_no = null, $service_manager_task_description = null, $service_manager_job_rec_id = null, $service_manager_job_no = null, $service_manager_job_description = null, $in_creditor_rec_id = null, $supplier_part_no = null, $in_supplier_warehouse_rec_id = null, $order_units = null, $delivery_days = null, $fx_cost = null, $cost = null, $cost_original = null, $units = null, $tax_rate_rec_id = null, $tax_rate_description = null, $tax_rate = null, $tax_rate_bas_code = null, $inventory_expected_liability_ledger_account_rec_id = null, $inventory_expected_liability_ledger_account_account_no = null, $inventory_expected_liability_ledger_account_description = null, $inventory_expected_asset_ledger_account_rec_id = null, $inventory_expected_asset_ledger_account_account_no = null, $inventory_expected_asset_ledger_account_description = null, $classification_id = null, $classification_description = null, $custom_field_values = null)
    {
        $returnType = '\Jiwa\JiwaModel\Object';
        $request = $this->purchaseOrderLineDELETERequestPurchaseOrderIDLinesPurchaseOrderLineIDDeleteRequest($accept, $purchase_order_id, $purchase_order_line_id, $jiwa_stateful, $item_no, $inventory_id, $is_physical, $part_no, $description, $quantity_decimal_places, $make_supplier_the_new_default, $purchase_order_line_type, $quantity, $inc_price, $tax_amount, $line_total, $line_total_ex_tax, $fx_total, $currency_rate_used, $fx_decimal_places, $home_currency_decimal_places, $delivery_date, $delivered, $history_text_comment, $job_costing_stage_rec_id, $job_costing_stage_no, $job_costing_stage_name, $job_costing_stage_classification_rec_id, $job_costing_stage_classification_description, $job_costing_cost_centre_rec_id, $job_costing_cost_centre_no, $job_costing_cost_centre_name, $job_costing_job_rec_id, $job_costing_job_no, $job_costing_job_description, $in_on_back_order_orders_on_back_id, $in_on_back_order_quantity, $in_on_back_order_est_bo_value, $in_on_back_order_last_saved_date_time, $invoice_line_id, $user_defined_float1, $user_defined_float2, $user_defined_float3, $user_defined_date1, $user_defined_date2, $user_defined_date3, $user_defined_string1, $user_defined_string2, $user_defined_string3, $purchasing_classification_rec_id, $purchasing_classification_description, $purchasing_classification_ledger_account_rec_id, $purchasing_classification_ledger_account_account_no, $purchasing_classification_ledger_account_description, $service_manager_task_rec_id, $service_manager_task_no, $service_manager_task_description, $service_manager_job_rec_id, $service_manager_job_no, $service_manager_job_description, $in_creditor_rec_id, $supplier_part_no, $in_supplier_warehouse_rec_id, $order_units, $delivery_days, $fx_cost, $cost, $cost_original, $units, $tax_rate_rec_id, $tax_rate_description, $tax_rate, $tax_rate_bas_code, $inventory_expected_liability_ledger_account_rec_id, $inventory_expected_liability_ledger_account_account_no, $inventory_expected_liability_ledger_account_description, $inventory_expected_asset_ledger_account_rec_id, $inventory_expected_asset_ledger_account_account_no, $inventory_expected_asset_ledger_account_description, $classification_id, $classification_description, $custom_field_values);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Jiwa\JiwaModel\Object',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 404:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Jiwa\JiwaModel\Object',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 204:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Jiwa\JiwaModel\Object',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 403:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Jiwa\JiwaModel\Object',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 401:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Jiwa\JiwaModel\Object',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation purchaseOrderLineDELETERequestPurchaseOrderIDLinesPurchaseOrderLineIDDeleteAsync
     *
     * Deletes a line from a purchase order.
     *
     * @param  string $accept Accept Header (required)
     * @param  string $purchase_order_id (required)
     * @param  string $purchase_order_line_id (required)
     * @param  bool $jiwa_stateful Stateful indicator (optional)
     * @param  int $item_no (optional)
     * @param  string $inventory_id (optional)
     * @param  bool $is_physical (optional)
     * @param  string $part_no (optional)
     * @param  string $description (optional)
     * @param  int $quantity_decimal_places (optional)
     * @param  bool $make_supplier_the_new_default (optional)
     * @param  string $purchase_order_line_type (optional)
     * @param  double $quantity (optional)
     * @param  double $inc_price (optional)
     * @param  double $tax_amount (optional)
     * @param  double $line_total (optional)
     * @param  double $line_total_ex_tax (optional)
     * @param  double $fx_total (optional)
     * @param  double $currency_rate_used (optional)
     * @param  int $fx_decimal_places (optional)
     * @param  int $home_currency_decimal_places (optional)
     * @param  \DateTime $delivery_date (optional)
     * @param  double $delivered (optional)
     * @param  string $history_text_comment (optional)
     * @param  string $job_costing_stage_rec_id (optional)
     * @param  string $job_costing_stage_no (optional)
     * @param  string $job_costing_stage_name (optional)
     * @param  string $job_costing_stage_classification_rec_id (optional)
     * @param  string $job_costing_stage_classification_description (optional)
     * @param  string $job_costing_cost_centre_rec_id (optional)
     * @param  string $job_costing_cost_centre_no (optional)
     * @param  string $job_costing_cost_centre_name (optional)
     * @param  string $job_costing_job_rec_id (optional)
     * @param  string $job_costing_job_no (optional)
     * @param  string $job_costing_job_description (optional)
     * @param  string $in_on_back_order_orders_on_back_id (optional)
     * @param  double $in_on_back_order_quantity (optional)
     * @param  double $in_on_back_order_est_bo_value (optional)
     * @param  \DateTime $in_on_back_order_last_saved_date_time (optional)
     * @param  string $invoice_line_id (optional)
     * @param  double $user_defined_float1 (optional)
     * @param  double $user_defined_float2 (optional)
     * @param  double $user_defined_float3 (optional)
     * @param  \DateTime $user_defined_date1 (optional)
     * @param  \DateTime $user_defined_date2 (optional)
     * @param  \DateTime $user_defined_date3 (optional)
     * @param  string $user_defined_string1 (optional)
     * @param  string $user_defined_string2 (optional)
     * @param  string $user_defined_string3 (optional)
     * @param  string $purchasing_classification_rec_id (optional)
     * @param  string $purchasing_classification_description (optional)
     * @param  string $purchasing_classification_ledger_account_rec_id (optional)
     * @param  string $purchasing_classification_ledger_account_account_no (optional)
     * @param  string $purchasing_classification_ledger_account_description (optional)
     * @param  string $service_manager_task_rec_id (optional)
     * @param  int $service_manager_task_no (optional)
     * @param  string $service_manager_task_description (optional)
     * @param  string $service_manager_job_rec_id (optional)
     * @param  string $service_manager_job_no (optional)
     * @param  string $service_manager_job_description (optional)
     * @param  string $in_creditor_rec_id (optional)
     * @param  string $supplier_part_no (optional)
     * @param  string $in_supplier_warehouse_rec_id (optional)
     * @param  double $order_units (optional)
     * @param  int $delivery_days (optional)
     * @param  double $fx_cost (optional)
     * @param  double $cost (optional)
     * @param  double $cost_original (optional)
     * @param  string $units (optional)
     * @param  string $tax_rate_rec_id (optional)
     * @param  string $tax_rate_description (optional)
     * @param  double $tax_rate (optional)
     * @param  int $tax_rate_bas_code (optional)
     * @param  string $inventory_expected_liability_ledger_account_rec_id (optional)
     * @param  string $inventory_expected_liability_ledger_account_account_no (optional)
     * @param  string $inventory_expected_liability_ledger_account_description (optional)
     * @param  string $inventory_expected_asset_ledger_account_rec_id (optional)
     * @param  string $inventory_expected_asset_ledger_account_account_no (optional)
     * @param  string $inventory_expected_asset_ledger_account_description (optional)
     * @param  string $classification_id (optional)
     * @param  string $classification_description (optional)
     * @param  string $custom_field_values (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function purchaseOrderLineDELETERequestPurchaseOrderIDLinesPurchaseOrderLineIDDeleteAsync($accept, $purchase_order_id, $purchase_order_line_id, $jiwa_stateful = null, $item_no = null, $inventory_id = null, $is_physical = null, $part_no = null, $description = null, $quantity_decimal_places = null, $make_supplier_the_new_default = null, $purchase_order_line_type = null, $quantity = null, $inc_price = null, $tax_amount = null, $line_total = null, $line_total_ex_tax = null, $fx_total = null, $currency_rate_used = null, $fx_decimal_places = null, $home_currency_decimal_places = null, $delivery_date = null, $delivered = null, $history_text_comment = null, $job_costing_stage_rec_id = null, $job_costing_stage_no = null, $job_costing_stage_name = null, $job_costing_stage_classification_rec_id = null, $job_costing_stage_classification_description = null, $job_costing_cost_centre_rec_id = null, $job_costing_cost_centre_no = null, $job_costing_cost_centre_name = null, $job_costing_job_rec_id = null, $job_costing_job_no = null, $job_costing_job_description = null, $in_on_back_order_orders_on_back_id = null, $in_on_back_order_quantity = null, $in_on_back_order_est_bo_value = null, $in_on_back_order_last_saved_date_time = null, $invoice_line_id = null, $user_defined_float1 = null, $user_defined_float2 = null, $user_defined_float3 = null, $user_defined_date1 = null, $user_defined_date2 = null, $user_defined_date3 = null, $user_defined_string1 = null, $user_defined_string2 = null, $user_defined_string3 = null, $purchasing_classification_rec_id = null, $purchasing_classification_description = null, $purchasing_classification_ledger_account_rec_id = null, $purchasing_classification_ledger_account_account_no = null, $purchasing_classification_ledger_account_description = null, $service_manager_task_rec_id = null, $service_manager_task_no = null, $service_manager_task_description = null, $service_manager_job_rec_id = null, $service_manager_job_no = null, $service_manager_job_description = null, $in_creditor_rec_id = null, $supplier_part_no = null, $in_supplier_warehouse_rec_id = null, $order_units = null, $delivery_days = null, $fx_cost = null, $cost = null, $cost_original = null, $units = null, $tax_rate_rec_id = null, $tax_rate_description = null, $tax_rate = null, $tax_rate_bas_code = null, $inventory_expected_liability_ledger_account_rec_id = null, $inventory_expected_liability_ledger_account_account_no = null, $inventory_expected_liability_ledger_account_description = null, $inventory_expected_asset_ledger_account_rec_id = null, $inventory_expected_asset_ledger_account_account_no = null, $inventory_expected_asset_ledger_account_description = null, $classification_id = null, $classification_description = null, $custom_field_values = null)
    {
        return $this->purchaseOrderLineDELETERequestPurchaseOrderIDLinesPurchaseOrderLineIDDeleteAsyncWithHttpInfo($accept, $purchase_order_id, $purchase_order_line_id, $jiwa_stateful, $item_no, $inventory_id, $is_physical, $part_no, $description, $quantity_decimal_places, $make_supplier_the_new_default, $purchase_order_line_type, $quantity, $inc_price, $tax_amount, $line_total, $line_total_ex_tax, $fx_total, $currency_rate_used, $fx_decimal_places, $home_currency_decimal_places, $delivery_date, $delivered, $history_text_comment, $job_costing_stage_rec_id, $job_costing_stage_no, $job_costing_stage_name, $job_costing_stage_classification_rec_id, $job_costing_stage_classification_description, $job_costing_cost_centre_rec_id, $job_costing_cost_centre_no, $job_costing_cost_centre_name, $job_costing_job_rec_id, $job_costing_job_no, $job_costing_job_description, $in_on_back_order_orders_on_back_id, $in_on_back_order_quantity, $in_on_back_order_est_bo_value, $in_on_back_order_last_saved_date_time, $invoice_line_id, $user_defined_float1, $user_defined_float2, $user_defined_float3, $user_defined_date1, $user_defined_date2, $user_defined_date3, $user_defined_string1, $user_defined_string2, $user_defined_string3, $purchasing_classification_rec_id, $purchasing_classification_description, $purchasing_classification_ledger_account_rec_id, $purchasing_classification_ledger_account_account_no, $purchasing_classification_ledger_account_description, $service_manager_task_rec_id, $service_manager_task_no, $service_manager_task_description, $service_manager_job_rec_id, $service_manager_job_no, $service_manager_job_description, $in_creditor_rec_id, $supplier_part_no, $in_supplier_warehouse_rec_id, $order_units, $delivery_days, $fx_cost, $cost, $cost_original, $units, $tax_rate_rec_id, $tax_rate_description, $tax_rate, $tax_rate_bas_code, $inventory_expected_liability_ledger_account_rec_id, $inventory_expected_liability_ledger_account_account_no, $inventory_expected_liability_ledger_account_description, $inventory_expected_asset_ledger_account_rec_id, $inventory_expected_asset_ledger_account_account_no, $inventory_expected_asset_ledger_account_description, $classification_id, $classification_description, $custom_field_values)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation purchaseOrderLineDELETERequestPurchaseOrderIDLinesPurchaseOrderLineIDDeleteAsyncWithHttpInfo
     *
     * Deletes a line from a purchase order.
     *
     * @param  string $accept Accept Header (required)
     * @param  string $purchase_order_id (required)
     * @param  string $purchase_order_line_id (required)
     * @param  bool $jiwa_stateful Stateful indicator (optional)
     * @param  int $item_no (optional)
     * @param  string $inventory_id (optional)
     * @param  bool $is_physical (optional)
     * @param  string $part_no (optional)
     * @param  string $description (optional)
     * @param  int $quantity_decimal_places (optional)
     * @param  bool $make_supplier_the_new_default (optional)
     * @param  string $purchase_order_line_type (optional)
     * @param  double $quantity (optional)
     * @param  double $inc_price (optional)
     * @param  double $tax_amount (optional)
     * @param  double $line_total (optional)
     * @param  double $line_total_ex_tax (optional)
     * @param  double $fx_total (optional)
     * @param  double $currency_rate_used (optional)
     * @param  int $fx_decimal_places (optional)
     * @param  int $home_currency_decimal_places (optional)
     * @param  \DateTime $delivery_date (optional)
     * @param  double $delivered (optional)
     * @param  string $history_text_comment (optional)
     * @param  string $job_costing_stage_rec_id (optional)
     * @param  string $job_costing_stage_no (optional)
     * @param  string $job_costing_stage_name (optional)
     * @param  string $job_costing_stage_classification_rec_id (optional)
     * @param  string $job_costing_stage_classification_description (optional)
     * @param  string $job_costing_cost_centre_rec_id (optional)
     * @param  string $job_costing_cost_centre_no (optional)
     * @param  string $job_costing_cost_centre_name (optional)
     * @param  string $job_costing_job_rec_id (optional)
     * @param  string $job_costing_job_no (optional)
     * @param  string $job_costing_job_description (optional)
     * @param  string $in_on_back_order_orders_on_back_id (optional)
     * @param  double $in_on_back_order_quantity (optional)
     * @param  double $in_on_back_order_est_bo_value (optional)
     * @param  \DateTime $in_on_back_order_last_saved_date_time (optional)
     * @param  string $invoice_line_id (optional)
     * @param  double $user_defined_float1 (optional)
     * @param  double $user_defined_float2 (optional)
     * @param  double $user_defined_float3 (optional)
     * @param  \DateTime $user_defined_date1 (optional)
     * @param  \DateTime $user_defined_date2 (optional)
     * @param  \DateTime $user_defined_date3 (optional)
     * @param  string $user_defined_string1 (optional)
     * @param  string $user_defined_string2 (optional)
     * @param  string $user_defined_string3 (optional)
     * @param  string $purchasing_classification_rec_id (optional)
     * @param  string $purchasing_classification_description (optional)
     * @param  string $purchasing_classification_ledger_account_rec_id (optional)
     * @param  string $purchasing_classification_ledger_account_account_no (optional)
     * @param  string $purchasing_classification_ledger_account_description (optional)
     * @param  string $service_manager_task_rec_id (optional)
     * @param  int $service_manager_task_no (optional)
     * @param  string $service_manager_task_description (optional)
     * @param  string $service_manager_job_rec_id (optional)
     * @param  string $service_manager_job_no (optional)
     * @param  string $service_manager_job_description (optional)
     * @param  string $in_creditor_rec_id (optional)
     * @param  string $supplier_part_no (optional)
     * @param  string $in_supplier_warehouse_rec_id (optional)
     * @param  double $order_units (optional)
     * @param  int $delivery_days (optional)
     * @param  double $fx_cost (optional)
     * @param  double $cost (optional)
     * @param  double $cost_original (optional)
     * @param  string $units (optional)
     * @param  string $tax_rate_rec_id (optional)
     * @param  string $tax_rate_description (optional)
     * @param  double $tax_rate (optional)
     * @param  int $tax_rate_bas_code (optional)
     * @param  string $inventory_expected_liability_ledger_account_rec_id (optional)
     * @param  string $inventory_expected_liability_ledger_account_account_no (optional)
     * @param  string $inventory_expected_liability_ledger_account_description (optional)
     * @param  string $inventory_expected_asset_ledger_account_rec_id (optional)
     * @param  string $inventory_expected_asset_ledger_account_account_no (optional)
     * @param  string $inventory_expected_asset_ledger_account_description (optional)
     * @param  string $classification_id (optional)
     * @param  string $classification_description (optional)
     * @param  string $custom_field_values (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function purchaseOrderLineDELETERequestPurchaseOrderIDLinesPurchaseOrderLineIDDeleteAsyncWithHttpInfo($accept, $purchase_order_id, $purchase_order_line_id, $jiwa_stateful = null, $item_no = null, $inventory_id = null, $is_physical = null, $part_no = null, $description = null, $quantity_decimal_places = null, $make_supplier_the_new_default = null, $purchase_order_line_type = null, $quantity = null, $inc_price = null, $tax_amount = null, $line_total = null, $line_total_ex_tax = null, $fx_total = null, $currency_rate_used = null, $fx_decimal_places = null, $home_currency_decimal_places = null, $delivery_date = null, $delivered = null, $history_text_comment = null, $job_costing_stage_rec_id = null, $job_costing_stage_no = null, $job_costing_stage_name = null, $job_costing_stage_classification_rec_id = null, $job_costing_stage_classification_description = null, $job_costing_cost_centre_rec_id = null, $job_costing_cost_centre_no = null, $job_costing_cost_centre_name = null, $job_costing_job_rec_id = null, $job_costing_job_no = null, $job_costing_job_description = null, $in_on_back_order_orders_on_back_id = null, $in_on_back_order_quantity = null, $in_on_back_order_est_bo_value = null, $in_on_back_order_last_saved_date_time = null, $invoice_line_id = null, $user_defined_float1 = null, $user_defined_float2 = null, $user_defined_float3 = null, $user_defined_date1 = null, $user_defined_date2 = null, $user_defined_date3 = null, $user_defined_string1 = null, $user_defined_string2 = null, $user_defined_string3 = null, $purchasing_classification_rec_id = null, $purchasing_classification_description = null, $purchasing_classification_ledger_account_rec_id = null, $purchasing_classification_ledger_account_account_no = null, $purchasing_classification_ledger_account_description = null, $service_manager_task_rec_id = null, $service_manager_task_no = null, $service_manager_task_description = null, $service_manager_job_rec_id = null, $service_manager_job_no = null, $service_manager_job_description = null, $in_creditor_rec_id = null, $supplier_part_no = null, $in_supplier_warehouse_rec_id = null, $order_units = null, $delivery_days = null, $fx_cost = null, $cost = null, $cost_original = null, $units = null, $tax_rate_rec_id = null, $tax_rate_description = null, $tax_rate = null, $tax_rate_bas_code = null, $inventory_expected_liability_ledger_account_rec_id = null, $inventory_expected_liability_ledger_account_account_no = null, $inventory_expected_liability_ledger_account_description = null, $inventory_expected_asset_ledger_account_rec_id = null, $inventory_expected_asset_ledger_account_account_no = null, $inventory_expected_asset_ledger_account_description = null, $classification_id = null, $classification_description = null, $custom_field_values = null)
    {
        $returnType = '\Jiwa\JiwaModel\Object';
        $request = $this->purchaseOrderLineDELETERequestPurchaseOrderIDLinesPurchaseOrderLineIDDeleteRequest($accept, $purchase_order_id, $purchase_order_line_id, $jiwa_stateful, $item_no, $inventory_id, $is_physical, $part_no, $description, $quantity_decimal_places, $make_supplier_the_new_default, $purchase_order_line_type, $quantity, $inc_price, $tax_amount, $line_total, $line_total_ex_tax, $fx_total, $currency_rate_used, $fx_decimal_places, $home_currency_decimal_places, $delivery_date, $delivered, $history_text_comment, $job_costing_stage_rec_id, $job_costing_stage_no, $job_costing_stage_name, $job_costing_stage_classification_rec_id, $job_costing_stage_classification_description, $job_costing_cost_centre_rec_id, $job_costing_cost_centre_no, $job_costing_cost_centre_name, $job_costing_job_rec_id, $job_costing_job_no, $job_costing_job_description, $in_on_back_order_orders_on_back_id, $in_on_back_order_quantity, $in_on_back_order_est_bo_value, $in_on_back_order_last_saved_date_time, $invoice_line_id, $user_defined_float1, $user_defined_float2, $user_defined_float3, $user_defined_date1, $user_defined_date2, $user_defined_date3, $user_defined_string1, $user_defined_string2, $user_defined_string3, $purchasing_classification_rec_id, $purchasing_classification_description, $purchasing_classification_ledger_account_rec_id, $purchasing_classification_ledger_account_account_no, $purchasing_classification_ledger_account_description, $service_manager_task_rec_id, $service_manager_task_no, $service_manager_task_description, $service_manager_job_rec_id, $service_manager_job_no, $service_manager_job_description, $in_creditor_rec_id, $supplier_part_no, $in_supplier_warehouse_rec_id, $order_units, $delivery_days, $fx_cost, $cost, $cost_original, $units, $tax_rate_rec_id, $tax_rate_description, $tax_rate, $tax_rate_bas_code, $inventory_expected_liability_ledger_account_rec_id, $inventory_expected_liability_ledger_account_account_no, $inventory_expected_liability_ledger_account_description, $inventory_expected_asset_ledger_account_rec_id, $inventory_expected_asset_ledger_account_account_no, $inventory_expected_asset_ledger_account_description, $classification_id, $classification_description, $custom_field_values);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'purchaseOrderLineDELETERequestPurchaseOrderIDLinesPurchaseOrderLineIDDelete'
     *
     * @param  string $accept Accept Header (required)
     * @param  string $purchase_order_id (required)
     * @param  string $purchase_order_line_id (required)
     * @param  bool $jiwa_stateful Stateful indicator (optional)
     * @param  int $item_no (optional)
     * @param  string $inventory_id (optional)
     * @param  bool $is_physical (optional)
     * @param  string $part_no (optional)
     * @param  string $description (optional)
     * @param  int $quantity_decimal_places (optional)
     * @param  bool $make_supplier_the_new_default (optional)
     * @param  string $purchase_order_line_type (optional)
     * @param  double $quantity (optional)
     * @param  double $inc_price (optional)
     * @param  double $tax_amount (optional)
     * @param  double $line_total (optional)
     * @param  double $line_total_ex_tax (optional)
     * @param  double $fx_total (optional)
     * @param  double $currency_rate_used (optional)
     * @param  int $fx_decimal_places (optional)
     * @param  int $home_currency_decimal_places (optional)
     * @param  \DateTime $delivery_date (optional)
     * @param  double $delivered (optional)
     * @param  string $history_text_comment (optional)
     * @param  string $job_costing_stage_rec_id (optional)
     * @param  string $job_costing_stage_no (optional)
     * @param  string $job_costing_stage_name (optional)
     * @param  string $job_costing_stage_classification_rec_id (optional)
     * @param  string $job_costing_stage_classification_description (optional)
     * @param  string $job_costing_cost_centre_rec_id (optional)
     * @param  string $job_costing_cost_centre_no (optional)
     * @param  string $job_costing_cost_centre_name (optional)
     * @param  string $job_costing_job_rec_id (optional)
     * @param  string $job_costing_job_no (optional)
     * @param  string $job_costing_job_description (optional)
     * @param  string $in_on_back_order_orders_on_back_id (optional)
     * @param  double $in_on_back_order_quantity (optional)
     * @param  double $in_on_back_order_est_bo_value (optional)
     * @param  \DateTime $in_on_back_order_last_saved_date_time (optional)
     * @param  string $invoice_line_id (optional)
     * @param  double $user_defined_float1 (optional)
     * @param  double $user_defined_float2 (optional)
     * @param  double $user_defined_float3 (optional)
     * @param  \DateTime $user_defined_date1 (optional)
     * @param  \DateTime $user_defined_date2 (optional)
     * @param  \DateTime $user_defined_date3 (optional)
     * @param  string $user_defined_string1 (optional)
     * @param  string $user_defined_string2 (optional)
     * @param  string $user_defined_string3 (optional)
     * @param  string $purchasing_classification_rec_id (optional)
     * @param  string $purchasing_classification_description (optional)
     * @param  string $purchasing_classification_ledger_account_rec_id (optional)
     * @param  string $purchasing_classification_ledger_account_account_no (optional)
     * @param  string $purchasing_classification_ledger_account_description (optional)
     * @param  string $service_manager_task_rec_id (optional)
     * @param  int $service_manager_task_no (optional)
     * @param  string $service_manager_task_description (optional)
     * @param  string $service_manager_job_rec_id (optional)
     * @param  string $service_manager_job_no (optional)
     * @param  string $service_manager_job_description (optional)
     * @param  string $in_creditor_rec_id (optional)
     * @param  string $supplier_part_no (optional)
     * @param  string $in_supplier_warehouse_rec_id (optional)
     * @param  double $order_units (optional)
     * @param  int $delivery_days (optional)
     * @param  double $fx_cost (optional)
     * @param  double $cost (optional)
     * @param  double $cost_original (optional)
     * @param  string $units (optional)
     * @param  string $tax_rate_rec_id (optional)
     * @param  string $tax_rate_description (optional)
     * @param  double $tax_rate (optional)
     * @param  int $tax_rate_bas_code (optional)
     * @param  string $inventory_expected_liability_ledger_account_rec_id (optional)
     * @param  string $inventory_expected_liability_ledger_account_account_no (optional)
     * @param  string $inventory_expected_liability_ledger_account_description (optional)
     * @param  string $inventory_expected_asset_ledger_account_rec_id (optional)
     * @param  string $inventory_expected_asset_ledger_account_account_no (optional)
     * @param  string $inventory_expected_asset_ledger_account_description (optional)
     * @param  string $classification_id (optional)
     * @param  string $classification_description (optional)
     * @param  string $custom_field_values (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function purchaseOrderLineDELETERequestPurchaseOrderIDLinesPurchaseOrderLineIDDeleteRequest($accept, $purchase_order_id, $purchase_order_line_id, $jiwa_stateful = null, $item_no = null, $inventory_id = null, $is_physical = null, $part_no = null, $description = null, $quantity_decimal_places = null, $make_supplier_the_new_default = null, $purchase_order_line_type = null, $quantity = null, $inc_price = null, $tax_amount = null, $line_total = null, $line_total_ex_tax = null, $fx_total = null, $currency_rate_used = null, $fx_decimal_places = null, $home_currency_decimal_places = null, $delivery_date = null, $delivered = null, $history_text_comment = null, $job_costing_stage_rec_id = null, $job_costing_stage_no = null, $job_costing_stage_name = null, $job_costing_stage_classification_rec_id = null, $job_costing_stage_classification_description = null, $job_costing_cost_centre_rec_id = null, $job_costing_cost_centre_no = null, $job_costing_cost_centre_name = null, $job_costing_job_rec_id = null, $job_costing_job_no = null, $job_costing_job_description = null, $in_on_back_order_orders_on_back_id = null, $in_on_back_order_quantity = null, $in_on_back_order_est_bo_value = null, $in_on_back_order_last_saved_date_time = null, $invoice_line_id = null, $user_defined_float1 = null, $user_defined_float2 = null, $user_defined_float3 = null, $user_defined_date1 = null, $user_defined_date2 = null, $user_defined_date3 = null, $user_defined_string1 = null, $user_defined_string2 = null, $user_defined_string3 = null, $purchasing_classification_rec_id = null, $purchasing_classification_description = null, $purchasing_classification_ledger_account_rec_id = null, $purchasing_classification_ledger_account_account_no = null, $purchasing_classification_ledger_account_description = null, $service_manager_task_rec_id = null, $service_manager_task_no = null, $service_manager_task_description = null, $service_manager_job_rec_id = null, $service_manager_job_no = null, $service_manager_job_description = null, $in_creditor_rec_id = null, $supplier_part_no = null, $in_supplier_warehouse_rec_id = null, $order_units = null, $delivery_days = null, $fx_cost = null, $cost = null, $cost_original = null, $units = null, $tax_rate_rec_id = null, $tax_rate_description = null, $tax_rate = null, $tax_rate_bas_code = null, $inventory_expected_liability_ledger_account_rec_id = null, $inventory_expected_liability_ledger_account_account_no = null, $inventory_expected_liability_ledger_account_description = null, $inventory_expected_asset_ledger_account_rec_id = null, $inventory_expected_asset_ledger_account_account_no = null, $inventory_expected_asset_ledger_account_description = null, $classification_id = null, $classification_description = null, $custom_field_values = null)
    {
        // verify the required parameter 'accept' is set
        if ($accept === null || (is_array($accept) && count($accept) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $accept when calling purchaseOrderLineDELETERequestPurchaseOrderIDLinesPurchaseOrderLineIDDelete'
            );
        }
        // verify the required parameter 'purchase_order_id' is set
        if ($purchase_order_id === null || (is_array($purchase_order_id) && count($purchase_order_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $purchase_order_id when calling purchaseOrderLineDELETERequestPurchaseOrderIDLinesPurchaseOrderLineIDDelete'
            );
        }
        // verify the required parameter 'purchase_order_line_id' is set
        if ($purchase_order_line_id === null || (is_array($purchase_order_line_id) && count($purchase_order_line_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $purchase_order_line_id when calling purchaseOrderLineDELETERequestPurchaseOrderIDLinesPurchaseOrderLineIDDelete'
            );
        }

        $resourcePath = '/PurchaseOrders/{PurchaseOrderID}/Lines/{PurchaseOrderLineID}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        if ($item_no !== null) {
            $queryParams['ItemNo'] = ObjectSerializer::toQueryValue($item_no);
        }
        // query params
        if ($inventory_id !== null) {
            $queryParams['InventoryID'] = ObjectSerializer::toQueryValue($inventory_id);
        }
        // query params
        if ($is_physical !== null) {
            $queryParams['IsPhysical'] = ObjectSerializer::toQueryValue($is_physical);
        }
        // query params
        if ($part_no !== null) {
            $queryParams['PartNo'] = ObjectSerializer::toQueryValue($part_no);
        }
        // query params
        if ($description !== null) {
            $queryParams['Description'] = ObjectSerializer::toQueryValue($description);
        }
        // query params
        if ($quantity_decimal_places !== null) {
            $queryParams['QuantityDecimalPlaces'] = ObjectSerializer::toQueryValue($quantity_decimal_places);
        }
        // query params
        if ($make_supplier_the_new_default !== null) {
            $queryParams['MakeSupplierTheNewDefault'] = ObjectSerializer::toQueryValue($make_supplier_the_new_default);
        }
        // query params
        if ($purchase_order_line_type !== null) {
            $queryParams['PurchaseOrderLineType'] = ObjectSerializer::toQueryValue($purchase_order_line_type);
        }
        // query params
        if ($quantity !== null) {
            $queryParams['Quantity'] = ObjectSerializer::toQueryValue($quantity);
        }
        // query params
        if ($inc_price !== null) {
            $queryParams['IncPrice'] = ObjectSerializer::toQueryValue($inc_price);
        }
        // query params
        if ($tax_amount !== null) {
            $queryParams['TaxAmount'] = ObjectSerializer::toQueryValue($tax_amount);
        }
        // query params
        if ($line_total !== null) {
            $queryParams['LineTotal'] = ObjectSerializer::toQueryValue($line_total);
        }
        // query params
        if ($line_total_ex_tax !== null) {
            $queryParams['LineTotalExTax'] = ObjectSerializer::toQueryValue($line_total_ex_tax);
        }
        // query params
        if ($fx_total !== null) {
            $queryParams['FxTotal'] = ObjectSerializer::toQueryValue($fx_total);
        }
        // query params
        if ($currency_rate_used !== null) {
            $queryParams['CurrencyRateUsed'] = ObjectSerializer::toQueryValue($currency_rate_used);
        }
        // query params
        if ($fx_decimal_places !== null) {
            $queryParams['FXDecimalPlaces'] = ObjectSerializer::toQueryValue($fx_decimal_places);
        }
        // query params
        if ($home_currency_decimal_places !== null) {
            $queryParams['HomeCurrencyDecimalPlaces'] = ObjectSerializer::toQueryValue($home_currency_decimal_places);
        }
        // query params
        if ($delivery_date !== null) {
            $queryParams['DeliveryDate'] = ObjectSerializer::toQueryValue($delivery_date);
        }
        // query params
        if ($delivered !== null) {
            $queryParams['Delivered'] = ObjectSerializer::toQueryValue($delivered);
        }
        // query params
        if ($history_text_comment !== null) {
            $queryParams['HistoryText_Comment'] = ObjectSerializer::toQueryValue($history_text_comment);
        }
        // query params
        if ($job_costing_stage_rec_id !== null) {
            $queryParams['JobCostingStageRecID'] = ObjectSerializer::toQueryValue($job_costing_stage_rec_id);
        }
        // query params
        if ($job_costing_stage_no !== null) {
            $queryParams['JobCostingStageNo'] = ObjectSerializer::toQueryValue($job_costing_stage_no);
        }
        // query params
        if ($job_costing_stage_name !== null) {
            $queryParams['JobCostingStageName'] = ObjectSerializer::toQueryValue($job_costing_stage_name);
        }
        // query params
        if ($job_costing_stage_classification_rec_id !== null) {
            $queryParams['JobCostingStageClassificationRecID'] = ObjectSerializer::toQueryValue($job_costing_stage_classification_rec_id);
        }
        // query params
        if ($job_costing_stage_classification_description !== null) {
            $queryParams['JobCostingStageClassificationDescription'] = ObjectSerializer::toQueryValue($job_costing_stage_classification_description);
        }
        // query params
        if ($job_costing_cost_centre_rec_id !== null) {
            $queryParams['JobCostingCostCentreRecID'] = ObjectSerializer::toQueryValue($job_costing_cost_centre_rec_id);
        }
        // query params
        if ($job_costing_cost_centre_no !== null) {
            $queryParams['JobCostingCostCentreNo'] = ObjectSerializer::toQueryValue($job_costing_cost_centre_no);
        }
        // query params
        if ($job_costing_cost_centre_name !== null) {
            $queryParams['JobCostingCostCentreName'] = ObjectSerializer::toQueryValue($job_costing_cost_centre_name);
        }
        // query params
        if ($job_costing_job_rec_id !== null) {
            $queryParams['JobCostingJobRecID'] = ObjectSerializer::toQueryValue($job_costing_job_rec_id);
        }
        // query params
        if ($job_costing_job_no !== null) {
            $queryParams['JobCostingJobNo'] = ObjectSerializer::toQueryValue($job_costing_job_no);
        }
        // query params
        if ($job_costing_job_description !== null) {
            $queryParams['JobCostingJobDescription'] = ObjectSerializer::toQueryValue($job_costing_job_description);
        }
        // query params
        if ($in_on_back_order_orders_on_back_id !== null) {
            $queryParams['IN_OnBackOrder_OrdersOnBackID'] = ObjectSerializer::toQueryValue($in_on_back_order_orders_on_back_id);
        }
        // query params
        if ($in_on_back_order_quantity !== null) {
            $queryParams['IN_OnBackOrder_Quantity'] = ObjectSerializer::toQueryValue($in_on_back_order_quantity);
        }
        // query params
        if ($in_on_back_order_est_bo_value !== null) {
            $queryParams['IN_OnBackOrder_EstBOValue'] = ObjectSerializer::toQueryValue($in_on_back_order_est_bo_value);
        }
        // query params
        if ($in_on_back_order_last_saved_date_time !== null) {
            $queryParams['IN_OnBackOrder_LastSavedDateTime'] = ObjectSerializer::toQueryValue($in_on_back_order_last_saved_date_time);
        }
        // query params
        if ($invoice_line_id !== null) {
            $queryParams['InvoiceLineID'] = ObjectSerializer::toQueryValue($invoice_line_id);
        }
        // query params
        if ($user_defined_float1 !== null) {
            $queryParams['UserDefinedFloat1'] = ObjectSerializer::toQueryValue($user_defined_float1);
        }
        // query params
        if ($user_defined_float2 !== null) {
            $queryParams['UserDefinedFloat2'] = ObjectSerializer::toQueryValue($user_defined_float2);
        }
        // query params
        if ($user_defined_float3 !== null) {
            $queryParams['UserDefinedFloat3'] = ObjectSerializer::toQueryValue($user_defined_float3);
        }
        // query params
        if ($user_defined_date1 !== null) {
            $queryParams['UserDefinedDate1'] = ObjectSerializer::toQueryValue($user_defined_date1);
        }
        // query params
        if ($user_defined_date2 !== null) {
            $queryParams['UserDefinedDate2'] = ObjectSerializer::toQueryValue($user_defined_date2);
        }
        // query params
        if ($user_defined_date3 !== null) {
            $queryParams['UserDefinedDate3'] = ObjectSerializer::toQueryValue($user_defined_date3);
        }
        // query params
        if ($user_defined_string1 !== null) {
            $queryParams['UserDefinedString1'] = ObjectSerializer::toQueryValue($user_defined_string1);
        }
        // query params
        if ($user_defined_string2 !== null) {
            $queryParams['UserDefinedString2'] = ObjectSerializer::toQueryValue($user_defined_string2);
        }
        // query params
        if ($user_defined_string3 !== null) {
            $queryParams['UserDefinedString3'] = ObjectSerializer::toQueryValue($user_defined_string3);
        }
        // query params
        if ($purchasing_classification_rec_id !== null) {
            $queryParams['PurchasingClassificationRecID'] = ObjectSerializer::toQueryValue($purchasing_classification_rec_id);
        }
        // query params
        if ($purchasing_classification_description !== null) {
            $queryParams['PurchasingClassificationDescription'] = ObjectSerializer::toQueryValue($purchasing_classification_description);
        }
        // query params
        if ($purchasing_classification_ledger_account_rec_id !== null) {
            $queryParams['PurchasingClassificationLedgerAccountRecID'] = ObjectSerializer::toQueryValue($purchasing_classification_ledger_account_rec_id);
        }
        // query params
        if ($purchasing_classification_ledger_account_account_no !== null) {
            $queryParams['PurchasingClassificationLedgerAccountAccountNo'] = ObjectSerializer::toQueryValue($purchasing_classification_ledger_account_account_no);
        }
        // query params
        if ($purchasing_classification_ledger_account_description !== null) {
            $queryParams['PurchasingClassificationLedgerAccountDescription'] = ObjectSerializer::toQueryValue($purchasing_classification_ledger_account_description);
        }
        // query params
        if ($service_manager_task_rec_id !== null) {
            $queryParams['ServiceManagerTaskRecID'] = ObjectSerializer::toQueryValue($service_manager_task_rec_id);
        }
        // query params
        if ($service_manager_task_no !== null) {
            $queryParams['ServiceManagerTaskNo'] = ObjectSerializer::toQueryValue($service_manager_task_no);
        }
        // query params
        if ($service_manager_task_description !== null) {
            $queryParams['ServiceManagerTaskDescription'] = ObjectSerializer::toQueryValue($service_manager_task_description);
        }
        // query params
        if ($service_manager_job_rec_id !== null) {
            $queryParams['ServiceManagerJobRecID'] = ObjectSerializer::toQueryValue($service_manager_job_rec_id);
        }
        // query params
        if ($service_manager_job_no !== null) {
            $queryParams['ServiceManagerJobNo'] = ObjectSerializer::toQueryValue($service_manager_job_no);
        }
        // query params
        if ($service_manager_job_description !== null) {
            $queryParams['ServiceManagerJobDescription'] = ObjectSerializer::toQueryValue($service_manager_job_description);
        }
        // query params
        if ($in_creditor_rec_id !== null) {
            $queryParams['IN_Creditor_RecID'] = ObjectSerializer::toQueryValue($in_creditor_rec_id);
        }
        // query params
        if ($supplier_part_no !== null) {
            $queryParams['SupplierPartNo'] = ObjectSerializer::toQueryValue($supplier_part_no);
        }
        // query params
        if ($in_supplier_warehouse_rec_id !== null) {
            $queryParams['IN_SupplierWarehouse_RecID'] = ObjectSerializer::toQueryValue($in_supplier_warehouse_rec_id);
        }
        // query params
        if ($order_units !== null) {
            $queryParams['OrderUnits'] = ObjectSerializer::toQueryValue($order_units);
        }
        // query params
        if ($delivery_days !== null) {
            $queryParams['DeliveryDays'] = ObjectSerializer::toQueryValue($delivery_days);
        }
        // query params
        if ($fx_cost !== null) {
            $queryParams['FXCost'] = ObjectSerializer::toQueryValue($fx_cost);
        }
        // query params
        if ($cost !== null) {
            $queryParams['Cost'] = ObjectSerializer::toQueryValue($cost);
        }
        // query params
        if ($cost_original !== null) {
            $queryParams['CostOriginal'] = ObjectSerializer::toQueryValue($cost_original);
        }
        // query params
        if ($units !== null) {
            $queryParams['Units'] = ObjectSerializer::toQueryValue($units);
        }
        // query params
        if ($tax_rate_rec_id !== null) {
            $queryParams['TaxRateRecID'] = ObjectSerializer::toQueryValue($tax_rate_rec_id);
        }
        // query params
        if ($tax_rate_description !== null) {
            $queryParams['TaxRateDescription'] = ObjectSerializer::toQueryValue($tax_rate_description);
        }
        // query params
        if ($tax_rate !== null) {
            $queryParams['TaxRate'] = ObjectSerializer::toQueryValue($tax_rate);
        }
        // query params
        if ($tax_rate_bas_code !== null) {
            $queryParams['TaxRateBASCode'] = ObjectSerializer::toQueryValue($tax_rate_bas_code);
        }
        // query params
        if ($inventory_expected_liability_ledger_account_rec_id !== null) {
            $queryParams['InventoryExpectedLiabilityLedgerAccountRecID'] = ObjectSerializer::toQueryValue($inventory_expected_liability_ledger_account_rec_id);
        }
        // query params
        if ($inventory_expected_liability_ledger_account_account_no !== null) {
            $queryParams['InventoryExpectedLiabilityLedgerAccountAccountNo'] = ObjectSerializer::toQueryValue($inventory_expected_liability_ledger_account_account_no);
        }
        // query params
        if ($inventory_expected_liability_ledger_account_description !== null) {
            $queryParams['InventoryExpectedLiabilityLedgerAccountDescription'] = ObjectSerializer::toQueryValue($inventory_expected_liability_ledger_account_description);
        }
        // query params
        if ($inventory_expected_asset_ledger_account_rec_id !== null) {
            $queryParams['InventoryExpectedAssetLedgerAccountRecID'] = ObjectSerializer::toQueryValue($inventory_expected_asset_ledger_account_rec_id);
        }
        // query params
        if ($inventory_expected_asset_ledger_account_account_no !== null) {
            $queryParams['InventoryExpectedAssetLedgerAccountAccountNo'] = ObjectSerializer::toQueryValue($inventory_expected_asset_ledger_account_account_no);
        }
        // query params
        if ($inventory_expected_asset_ledger_account_description !== null) {
            $queryParams['InventoryExpectedAssetLedgerAccountDescription'] = ObjectSerializer::toQueryValue($inventory_expected_asset_ledger_account_description);
        }
        // query params
        if ($classification_id !== null) {
            $queryParams['ClassificationID'] = ObjectSerializer::toQueryValue($classification_id);
        }
        // query params
        if ($classification_description !== null) {
            $queryParams['ClassificationDescription'] = ObjectSerializer::toQueryValue($classification_description);
        }
        // query params
        if ($custom_field_values !== null) {
            $queryParams['CustomFieldValues'] = ObjectSerializer::toQueryValue($custom_field_values);
        }
        // header params
        if ($accept !== null) {
            $headerParams['Accept'] = ObjectSerializer::toHeaderValue($accept);
        }
        // header params
        if ($jiwa_stateful !== null) {
            $headerParams['jiwa-stateful'] = ObjectSerializer::toHeaderValue($jiwa_stateful);
        }

        // path params
        if ($purchase_order_id !== null) {
            $resourcePath = str_replace(
                '{' . 'PurchaseOrderID' . '}',
                ObjectSerializer::toPathValue($purchase_order_id),
                $resourcePath
            );
        }
        // path params
        if ($purchase_order_line_id !== null) {
            $resourcePath = str_replace(
                '{' . 'PurchaseOrderLineID' . '}',
                ObjectSerializer::toPathValue($purchase_order_line_id),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json', 'application/xml']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json', 'application/xml'],
                ['application/x-www-form-urlencoded', 'application/json', 'application/xml']
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            
            if($headers['Content-Type'] === 'application/json') {
                // \stdClass has no __toString(), so we should encode it manually
                if ($httpBody instanceof \stdClass) {
                    $httpBody = \GuzzleHttp\json_encode($httpBody);
                }
                // array has no __toString(), so we should encode it manually
                if(is_array($httpBody)) {
                    $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($httpBody));
                }
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\Query::build($formParams);
            }
        }

        // this endpoint requires HTTP basic authentication
        if ($this->config->getUsername() !== null || $this->config->getPassword() !== null) {
            $headers['Authorization'] = 'Basic ' . base64_encode($this->config->getUsername() . ":" . $this->config->getPassword());
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\Query::build($queryParams);
        return new Request(
            'DELETE',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation purchaseOrderLineGETRequestPurchaseOrderIDLinesPurchaseOrderLineIDGet
     *
     * Retrieves a purchase order line.
     *
     * @param  string $accept Accept Header (required)
     * @param  string $purchase_order_id purchase_order_id (required)
     * @param  string $purchase_order_line_id purchase_order_line_id (required)
     * @param  bool $jiwa_stateful Stateful indicator (optional)
     *
     * @throws \Jiwa\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Jiwa\JiwaModel\PurchaseOrderLine
     */
    public function purchaseOrderLineGETRequestPurchaseOrderIDLinesPurchaseOrderLineIDGet($accept, $purchase_order_id, $purchase_order_line_id, $jiwa_stateful = null)
    {
        list($response) = $this->purchaseOrderLineGETRequestPurchaseOrderIDLinesPurchaseOrderLineIDGetWithHttpInfo($accept, $purchase_order_id, $purchase_order_line_id, $jiwa_stateful);
        return $response;
    }

    /**
     * Operation purchaseOrderLineGETRequestPurchaseOrderIDLinesPurchaseOrderLineIDGetWithHttpInfo
     *
     * Retrieves a purchase order line.
     *
     * @param  string $accept Accept Header (required)
     * @param  string $purchase_order_id (required)
     * @param  string $purchase_order_line_id (required)
     * @param  bool $jiwa_stateful Stateful indicator (optional)
     *
     * @throws \Jiwa\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Jiwa\JiwaModel\PurchaseOrderLine, HTTP status code, HTTP response headers (array of strings)
     */
    public function purchaseOrderLineGETRequestPurchaseOrderIDLinesPurchaseOrderLineIDGetWithHttpInfo($accept, $purchase_order_id, $purchase_order_line_id, $jiwa_stateful = null)
    {
        $returnType = '\Jiwa\JiwaModel\PurchaseOrderLine';
        $request = $this->purchaseOrderLineGETRequestPurchaseOrderIDLinesPurchaseOrderLineIDGetRequest($accept, $purchase_order_id, $purchase_order_line_id, $jiwa_stateful);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Jiwa\JiwaModel\PurchaseOrderLine',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 403:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Jiwa\JiwaModel\PurchaseOrderLine',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 404:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Jiwa\JiwaModel\PurchaseOrderLine',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 401:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Jiwa\JiwaModel\PurchaseOrderLine',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation purchaseOrderLineGETRequestPurchaseOrderIDLinesPurchaseOrderLineIDGetAsync
     *
     * Retrieves a purchase order line.
     *
     * @param  string $accept Accept Header (required)
     * @param  string $purchase_order_id (required)
     * @param  string $purchase_order_line_id (required)
     * @param  bool $jiwa_stateful Stateful indicator (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function purchaseOrderLineGETRequestPurchaseOrderIDLinesPurchaseOrderLineIDGetAsync($accept, $purchase_order_id, $purchase_order_line_id, $jiwa_stateful = null)
    {
        return $this->purchaseOrderLineGETRequestPurchaseOrderIDLinesPurchaseOrderLineIDGetAsyncWithHttpInfo($accept, $purchase_order_id, $purchase_order_line_id, $jiwa_stateful)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation purchaseOrderLineGETRequestPurchaseOrderIDLinesPurchaseOrderLineIDGetAsyncWithHttpInfo
     *
     * Retrieves a purchase order line.
     *
     * @param  string $accept Accept Header (required)
     * @param  string $purchase_order_id (required)
     * @param  string $purchase_order_line_id (required)
     * @param  bool $jiwa_stateful Stateful indicator (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function purchaseOrderLineGETRequestPurchaseOrderIDLinesPurchaseOrderLineIDGetAsyncWithHttpInfo($accept, $purchase_order_id, $purchase_order_line_id, $jiwa_stateful = null)
    {
        $returnType = '\Jiwa\JiwaModel\PurchaseOrderLine';
        $request = $this->purchaseOrderLineGETRequestPurchaseOrderIDLinesPurchaseOrderLineIDGetRequest($accept, $purchase_order_id, $purchase_order_line_id, $jiwa_stateful);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'purchaseOrderLineGETRequestPurchaseOrderIDLinesPurchaseOrderLineIDGet'
     *
     * @param  string $accept Accept Header (required)
     * @param  string $purchase_order_id (required)
     * @param  string $purchase_order_line_id (required)
     * @param  bool $jiwa_stateful Stateful indicator (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function purchaseOrderLineGETRequestPurchaseOrderIDLinesPurchaseOrderLineIDGetRequest($accept, $purchase_order_id, $purchase_order_line_id, $jiwa_stateful = null)
    {
        // verify the required parameter 'accept' is set
        if ($accept === null || (is_array($accept) && count($accept) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $accept when calling purchaseOrderLineGETRequestPurchaseOrderIDLinesPurchaseOrderLineIDGet'
            );
        }
        // verify the required parameter 'purchase_order_id' is set
        if ($purchase_order_id === null || (is_array($purchase_order_id) && count($purchase_order_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $purchase_order_id when calling purchaseOrderLineGETRequestPurchaseOrderIDLinesPurchaseOrderLineIDGet'
            );
        }
        // verify the required parameter 'purchase_order_line_id' is set
        if ($purchase_order_line_id === null || (is_array($purchase_order_line_id) && count($purchase_order_line_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $purchase_order_line_id when calling purchaseOrderLineGETRequestPurchaseOrderIDLinesPurchaseOrderLineIDGet'
            );
        }

        $resourcePath = '/PurchaseOrders/{PurchaseOrderID}/Lines/{PurchaseOrderLineID}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // header params
        if ($accept !== null) {
            $headerParams['Accept'] = ObjectSerializer::toHeaderValue($accept);
        }
        // header params
        if ($jiwa_stateful !== null) {
            $headerParams['jiwa-stateful'] = ObjectSerializer::toHeaderValue($jiwa_stateful);
        }

        // path params
        if ($purchase_order_id !== null) {
            $resourcePath = str_replace(
                '{' . 'PurchaseOrderID' . '}',
                ObjectSerializer::toPathValue($purchase_order_id),
                $resourcePath
            );
        }
        // path params
        if ($purchase_order_line_id !== null) {
            $resourcePath = str_replace(
                '{' . 'PurchaseOrderLineID' . '}',
                ObjectSerializer::toPathValue($purchase_order_line_id),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json', 'application/xml']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json', 'application/xml'],
                ['application/x-www-form-urlencoded', 'application/json', 'application/xml']
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            
            if($headers['Content-Type'] === 'application/json') {
                // \stdClass has no __toString(), so we should encode it manually
                if ($httpBody instanceof \stdClass) {
                    $httpBody = \GuzzleHttp\json_encode($httpBody);
                }
                // array has no __toString(), so we should encode it manually
                if(is_array($httpBody)) {
                    $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($httpBody));
                }
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\Query::build($formParams);
            }
        }

        // this endpoint requires HTTP basic authentication
        if ($this->config->getUsername() !== null || $this->config->getPassword() !== null) {
            $headers['Authorization'] = 'Basic ' . base64_encode($this->config->getUsername() . ":" . $this->config->getPassword());
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\Query::build($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation purchaseOrderLinePATCHRequestPurchaseOrderIDLinesPurchaseOrderLineIDUpdate
     *
     * Updates a line for a purchase order.
     *
     * @param  string $accept Accept Header (required)
     * @param  string $purchase_order_id purchase_order_id (required)
     * @param  string $purchase_order_line_id purchase_order_line_id (required)
     * @param  bool $jiwa_stateful Stateful indicator (optional)
     * @param  int $item_no item_no (optional)
     * @param  string $inventory_id inventory_id (optional)
     * @param  bool $is_physical is_physical (optional)
     * @param  string $part_no part_no (optional)
     * @param  string $description description (optional)
     * @param  int $quantity_decimal_places quantity_decimal_places (optional)
     * @param  bool $make_supplier_the_new_default make_supplier_the_new_default (optional)
     * @param  string $purchase_order_line_type purchase_order_line_type (optional)
     * @param  double $quantity quantity (optional)
     * @param  double $inc_price inc_price (optional)
     * @param  double $tax_amount tax_amount (optional)
     * @param  double $line_total line_total (optional)
     * @param  double $line_total_ex_tax line_total_ex_tax (optional)
     * @param  double $fx_total fx_total (optional)
     * @param  double $currency_rate_used currency_rate_used (optional)
     * @param  int $fx_decimal_places fx_decimal_places (optional)
     * @param  int $home_currency_decimal_places home_currency_decimal_places (optional)
     * @param  \DateTime $delivery_date delivery_date (optional)
     * @param  double $delivered delivered (optional)
     * @param  string $history_text_comment history_text_comment (optional)
     * @param  string $job_costing_stage_rec_id job_costing_stage_rec_id (optional)
     * @param  string $job_costing_stage_no job_costing_stage_no (optional)
     * @param  string $job_costing_stage_name job_costing_stage_name (optional)
     * @param  string $job_costing_stage_classification_rec_id job_costing_stage_classification_rec_id (optional)
     * @param  string $job_costing_stage_classification_description job_costing_stage_classification_description (optional)
     * @param  string $job_costing_cost_centre_rec_id job_costing_cost_centre_rec_id (optional)
     * @param  string $job_costing_cost_centre_no job_costing_cost_centre_no (optional)
     * @param  string $job_costing_cost_centre_name job_costing_cost_centre_name (optional)
     * @param  string $job_costing_job_rec_id job_costing_job_rec_id (optional)
     * @param  string $job_costing_job_no job_costing_job_no (optional)
     * @param  string $job_costing_job_description job_costing_job_description (optional)
     * @param  string $in_on_back_order_orders_on_back_id in_on_back_order_orders_on_back_id (optional)
     * @param  double $in_on_back_order_quantity in_on_back_order_quantity (optional)
     * @param  double $in_on_back_order_est_bo_value in_on_back_order_est_bo_value (optional)
     * @param  \DateTime $in_on_back_order_last_saved_date_time in_on_back_order_last_saved_date_time (optional)
     * @param  string $invoice_line_id invoice_line_id (optional)
     * @param  double $user_defined_float1 user_defined_float1 (optional)
     * @param  double $user_defined_float2 user_defined_float2 (optional)
     * @param  double $user_defined_float3 user_defined_float3 (optional)
     * @param  \DateTime $user_defined_date1 user_defined_date1 (optional)
     * @param  \DateTime $user_defined_date2 user_defined_date2 (optional)
     * @param  \DateTime $user_defined_date3 user_defined_date3 (optional)
     * @param  string $user_defined_string1 user_defined_string1 (optional)
     * @param  string $user_defined_string2 user_defined_string2 (optional)
     * @param  string $user_defined_string3 user_defined_string3 (optional)
     * @param  string $purchasing_classification_rec_id purchasing_classification_rec_id (optional)
     * @param  string $purchasing_classification_description purchasing_classification_description (optional)
     * @param  string $purchasing_classification_ledger_account_rec_id purchasing_classification_ledger_account_rec_id (optional)
     * @param  string $purchasing_classification_ledger_account_account_no purchasing_classification_ledger_account_account_no (optional)
     * @param  string $purchasing_classification_ledger_account_description purchasing_classification_ledger_account_description (optional)
     * @param  string $service_manager_task_rec_id service_manager_task_rec_id (optional)
     * @param  int $service_manager_task_no service_manager_task_no (optional)
     * @param  string $service_manager_task_description service_manager_task_description (optional)
     * @param  string $service_manager_job_rec_id service_manager_job_rec_id (optional)
     * @param  string $service_manager_job_no service_manager_job_no (optional)
     * @param  string $service_manager_job_description service_manager_job_description (optional)
     * @param  string $in_creditor_rec_id in_creditor_rec_id (optional)
     * @param  string $supplier_part_no supplier_part_no (optional)
     * @param  string $in_supplier_warehouse_rec_id in_supplier_warehouse_rec_id (optional)
     * @param  double $order_units order_units (optional)
     * @param  int $delivery_days delivery_days (optional)
     * @param  double $fx_cost fx_cost (optional)
     * @param  double $cost cost (optional)
     * @param  double $cost_original cost_original (optional)
     * @param  string $units units (optional)
     * @param  string $tax_rate_rec_id tax_rate_rec_id (optional)
     * @param  string $tax_rate_description tax_rate_description (optional)
     * @param  double $tax_rate tax_rate (optional)
     * @param  int $tax_rate_bas_code tax_rate_bas_code (optional)
     * @param  string $inventory_expected_liability_ledger_account_rec_id inventory_expected_liability_ledger_account_rec_id (optional)
     * @param  string $inventory_expected_liability_ledger_account_account_no inventory_expected_liability_ledger_account_account_no (optional)
     * @param  string $inventory_expected_liability_ledger_account_description inventory_expected_liability_ledger_account_description (optional)
     * @param  string $inventory_expected_asset_ledger_account_rec_id inventory_expected_asset_ledger_account_rec_id (optional)
     * @param  string $inventory_expected_asset_ledger_account_account_no inventory_expected_asset_ledger_account_account_no (optional)
     * @param  string $inventory_expected_asset_ledger_account_description inventory_expected_asset_ledger_account_description (optional)
     * @param  string $classification_id classification_id (optional)
     * @param  string $classification_description classification_description (optional)
     * @param  string $custom_field_values custom_field_values (optional)
     * @param  \Jiwa\JiwaModel\PurchaseOrderLinePATCHRequest $body body (optional)
     *
     * @throws \Jiwa\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Jiwa\JiwaModel\PurchaseOrderLine
     */
    public function purchaseOrderLinePATCHRequestPurchaseOrderIDLinesPurchaseOrderLineIDUpdate($accept, $purchase_order_id, $purchase_order_line_id, $jiwa_stateful = null, $item_no = null, $inventory_id = null, $is_physical = null, $part_no = null, $description = null, $quantity_decimal_places = null, $make_supplier_the_new_default = null, $purchase_order_line_type = null, $quantity = null, $inc_price = null, $tax_amount = null, $line_total = null, $line_total_ex_tax = null, $fx_total = null, $currency_rate_used = null, $fx_decimal_places = null, $home_currency_decimal_places = null, $delivery_date = null, $delivered = null, $history_text_comment = null, $job_costing_stage_rec_id = null, $job_costing_stage_no = null, $job_costing_stage_name = null, $job_costing_stage_classification_rec_id = null, $job_costing_stage_classification_description = null, $job_costing_cost_centre_rec_id = null, $job_costing_cost_centre_no = null, $job_costing_cost_centre_name = null, $job_costing_job_rec_id = null, $job_costing_job_no = null, $job_costing_job_description = null, $in_on_back_order_orders_on_back_id = null, $in_on_back_order_quantity = null, $in_on_back_order_est_bo_value = null, $in_on_back_order_last_saved_date_time = null, $invoice_line_id = null, $user_defined_float1 = null, $user_defined_float2 = null, $user_defined_float3 = null, $user_defined_date1 = null, $user_defined_date2 = null, $user_defined_date3 = null, $user_defined_string1 = null, $user_defined_string2 = null, $user_defined_string3 = null, $purchasing_classification_rec_id = null, $purchasing_classification_description = null, $purchasing_classification_ledger_account_rec_id = null, $purchasing_classification_ledger_account_account_no = null, $purchasing_classification_ledger_account_description = null, $service_manager_task_rec_id = null, $service_manager_task_no = null, $service_manager_task_description = null, $service_manager_job_rec_id = null, $service_manager_job_no = null, $service_manager_job_description = null, $in_creditor_rec_id = null, $supplier_part_no = null, $in_supplier_warehouse_rec_id = null, $order_units = null, $delivery_days = null, $fx_cost = null, $cost = null, $cost_original = null, $units = null, $tax_rate_rec_id = null, $tax_rate_description = null, $tax_rate = null, $tax_rate_bas_code = null, $inventory_expected_liability_ledger_account_rec_id = null, $inventory_expected_liability_ledger_account_account_no = null, $inventory_expected_liability_ledger_account_description = null, $inventory_expected_asset_ledger_account_rec_id = null, $inventory_expected_asset_ledger_account_account_no = null, $inventory_expected_asset_ledger_account_description = null, $classification_id = null, $classification_description = null, $custom_field_values = null, $body = null)
    {
        list($response) = $this->purchaseOrderLinePATCHRequestPurchaseOrderIDLinesPurchaseOrderLineIDUpdateWithHttpInfo($accept, $purchase_order_id, $purchase_order_line_id, $jiwa_stateful, $item_no, $inventory_id, $is_physical, $part_no, $description, $quantity_decimal_places, $make_supplier_the_new_default, $purchase_order_line_type, $quantity, $inc_price, $tax_amount, $line_total, $line_total_ex_tax, $fx_total, $currency_rate_used, $fx_decimal_places, $home_currency_decimal_places, $delivery_date, $delivered, $history_text_comment, $job_costing_stage_rec_id, $job_costing_stage_no, $job_costing_stage_name, $job_costing_stage_classification_rec_id, $job_costing_stage_classification_description, $job_costing_cost_centre_rec_id, $job_costing_cost_centre_no, $job_costing_cost_centre_name, $job_costing_job_rec_id, $job_costing_job_no, $job_costing_job_description, $in_on_back_order_orders_on_back_id, $in_on_back_order_quantity, $in_on_back_order_est_bo_value, $in_on_back_order_last_saved_date_time, $invoice_line_id, $user_defined_float1, $user_defined_float2, $user_defined_float3, $user_defined_date1, $user_defined_date2, $user_defined_date3, $user_defined_string1, $user_defined_string2, $user_defined_string3, $purchasing_classification_rec_id, $purchasing_classification_description, $purchasing_classification_ledger_account_rec_id, $purchasing_classification_ledger_account_account_no, $purchasing_classification_ledger_account_description, $service_manager_task_rec_id, $service_manager_task_no, $service_manager_task_description, $service_manager_job_rec_id, $service_manager_job_no, $service_manager_job_description, $in_creditor_rec_id, $supplier_part_no, $in_supplier_warehouse_rec_id, $order_units, $delivery_days, $fx_cost, $cost, $cost_original, $units, $tax_rate_rec_id, $tax_rate_description, $tax_rate, $tax_rate_bas_code, $inventory_expected_liability_ledger_account_rec_id, $inventory_expected_liability_ledger_account_account_no, $inventory_expected_liability_ledger_account_description, $inventory_expected_asset_ledger_account_rec_id, $inventory_expected_asset_ledger_account_account_no, $inventory_expected_asset_ledger_account_description, $classification_id, $classification_description, $custom_field_values, $body);
        return $response;
    }

    /**
     * Operation purchaseOrderLinePATCHRequestPurchaseOrderIDLinesPurchaseOrderLineIDUpdateWithHttpInfo
     *
     * Updates a line for a purchase order.
     *
     * @param  string $accept Accept Header (required)
     * @param  string $purchase_order_id (required)
     * @param  string $purchase_order_line_id (required)
     * @param  bool $jiwa_stateful Stateful indicator (optional)
     * @param  int $item_no (optional)
     * @param  string $inventory_id (optional)
     * @param  bool $is_physical (optional)
     * @param  string $part_no (optional)
     * @param  string $description (optional)
     * @param  int $quantity_decimal_places (optional)
     * @param  bool $make_supplier_the_new_default (optional)
     * @param  string $purchase_order_line_type (optional)
     * @param  double $quantity (optional)
     * @param  double $inc_price (optional)
     * @param  double $tax_amount (optional)
     * @param  double $line_total (optional)
     * @param  double $line_total_ex_tax (optional)
     * @param  double $fx_total (optional)
     * @param  double $currency_rate_used (optional)
     * @param  int $fx_decimal_places (optional)
     * @param  int $home_currency_decimal_places (optional)
     * @param  \DateTime $delivery_date (optional)
     * @param  double $delivered (optional)
     * @param  string $history_text_comment (optional)
     * @param  string $job_costing_stage_rec_id (optional)
     * @param  string $job_costing_stage_no (optional)
     * @param  string $job_costing_stage_name (optional)
     * @param  string $job_costing_stage_classification_rec_id (optional)
     * @param  string $job_costing_stage_classification_description (optional)
     * @param  string $job_costing_cost_centre_rec_id (optional)
     * @param  string $job_costing_cost_centre_no (optional)
     * @param  string $job_costing_cost_centre_name (optional)
     * @param  string $job_costing_job_rec_id (optional)
     * @param  string $job_costing_job_no (optional)
     * @param  string $job_costing_job_description (optional)
     * @param  string $in_on_back_order_orders_on_back_id (optional)
     * @param  double $in_on_back_order_quantity (optional)
     * @param  double $in_on_back_order_est_bo_value (optional)
     * @param  \DateTime $in_on_back_order_last_saved_date_time (optional)
     * @param  string $invoice_line_id (optional)
     * @param  double $user_defined_float1 (optional)
     * @param  double $user_defined_float2 (optional)
     * @param  double $user_defined_float3 (optional)
     * @param  \DateTime $user_defined_date1 (optional)
     * @param  \DateTime $user_defined_date2 (optional)
     * @param  \DateTime $user_defined_date3 (optional)
     * @param  string $user_defined_string1 (optional)
     * @param  string $user_defined_string2 (optional)
     * @param  string $user_defined_string3 (optional)
     * @param  string $purchasing_classification_rec_id (optional)
     * @param  string $purchasing_classification_description (optional)
     * @param  string $purchasing_classification_ledger_account_rec_id (optional)
     * @param  string $purchasing_classification_ledger_account_account_no (optional)
     * @param  string $purchasing_classification_ledger_account_description (optional)
     * @param  string $service_manager_task_rec_id (optional)
     * @param  int $service_manager_task_no (optional)
     * @param  string $service_manager_task_description (optional)
     * @param  string $service_manager_job_rec_id (optional)
     * @param  string $service_manager_job_no (optional)
     * @param  string $service_manager_job_description (optional)
     * @param  string $in_creditor_rec_id (optional)
     * @param  string $supplier_part_no (optional)
     * @param  string $in_supplier_warehouse_rec_id (optional)
     * @param  double $order_units (optional)
     * @param  int $delivery_days (optional)
     * @param  double $fx_cost (optional)
     * @param  double $cost (optional)
     * @param  double $cost_original (optional)
     * @param  string $units (optional)
     * @param  string $tax_rate_rec_id (optional)
     * @param  string $tax_rate_description (optional)
     * @param  double $tax_rate (optional)
     * @param  int $tax_rate_bas_code (optional)
     * @param  string $inventory_expected_liability_ledger_account_rec_id (optional)
     * @param  string $inventory_expected_liability_ledger_account_account_no (optional)
     * @param  string $inventory_expected_liability_ledger_account_description (optional)
     * @param  string $inventory_expected_asset_ledger_account_rec_id (optional)
     * @param  string $inventory_expected_asset_ledger_account_account_no (optional)
     * @param  string $inventory_expected_asset_ledger_account_description (optional)
     * @param  string $classification_id (optional)
     * @param  string $classification_description (optional)
     * @param  string $custom_field_values (optional)
     * @param  \Jiwa\JiwaModel\PurchaseOrderLinePATCHRequest $body (optional)
     *
     * @throws \Jiwa\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Jiwa\JiwaModel\PurchaseOrderLine, HTTP status code, HTTP response headers (array of strings)
     */
    public function purchaseOrderLinePATCHRequestPurchaseOrderIDLinesPurchaseOrderLineIDUpdateWithHttpInfo($accept, $purchase_order_id, $purchase_order_line_id, $jiwa_stateful = null, $item_no = null, $inventory_id = null, $is_physical = null, $part_no = null, $description = null, $quantity_decimal_places = null, $make_supplier_the_new_default = null, $purchase_order_line_type = null, $quantity = null, $inc_price = null, $tax_amount = null, $line_total = null, $line_total_ex_tax = null, $fx_total = null, $currency_rate_used = null, $fx_decimal_places = null, $home_currency_decimal_places = null, $delivery_date = null, $delivered = null, $history_text_comment = null, $job_costing_stage_rec_id = null, $job_costing_stage_no = null, $job_costing_stage_name = null, $job_costing_stage_classification_rec_id = null, $job_costing_stage_classification_description = null, $job_costing_cost_centre_rec_id = null, $job_costing_cost_centre_no = null, $job_costing_cost_centre_name = null, $job_costing_job_rec_id = null, $job_costing_job_no = null, $job_costing_job_description = null, $in_on_back_order_orders_on_back_id = null, $in_on_back_order_quantity = null, $in_on_back_order_est_bo_value = null, $in_on_back_order_last_saved_date_time = null, $invoice_line_id = null, $user_defined_float1 = null, $user_defined_float2 = null, $user_defined_float3 = null, $user_defined_date1 = null, $user_defined_date2 = null, $user_defined_date3 = null, $user_defined_string1 = null, $user_defined_string2 = null, $user_defined_string3 = null, $purchasing_classification_rec_id = null, $purchasing_classification_description = null, $purchasing_classification_ledger_account_rec_id = null, $purchasing_classification_ledger_account_account_no = null, $purchasing_classification_ledger_account_description = null, $service_manager_task_rec_id = null, $service_manager_task_no = null, $service_manager_task_description = null, $service_manager_job_rec_id = null, $service_manager_job_no = null, $service_manager_job_description = null, $in_creditor_rec_id = null, $supplier_part_no = null, $in_supplier_warehouse_rec_id = null, $order_units = null, $delivery_days = null, $fx_cost = null, $cost = null, $cost_original = null, $units = null, $tax_rate_rec_id = null, $tax_rate_description = null, $tax_rate = null, $tax_rate_bas_code = null, $inventory_expected_liability_ledger_account_rec_id = null, $inventory_expected_liability_ledger_account_account_no = null, $inventory_expected_liability_ledger_account_description = null, $inventory_expected_asset_ledger_account_rec_id = null, $inventory_expected_asset_ledger_account_account_no = null, $inventory_expected_asset_ledger_account_description = null, $classification_id = null, $classification_description = null, $custom_field_values = null, $body = null)
    {
        $returnType = '\Jiwa\JiwaModel\PurchaseOrderLine';
        $request = $this->purchaseOrderLinePATCHRequestPurchaseOrderIDLinesPurchaseOrderLineIDUpdateRequest($accept, $purchase_order_id, $purchase_order_line_id, $jiwa_stateful, $item_no, $inventory_id, $is_physical, $part_no, $description, $quantity_decimal_places, $make_supplier_the_new_default, $purchase_order_line_type, $quantity, $inc_price, $tax_amount, $line_total, $line_total_ex_tax, $fx_total, $currency_rate_used, $fx_decimal_places, $home_currency_decimal_places, $delivery_date, $delivered, $history_text_comment, $job_costing_stage_rec_id, $job_costing_stage_no, $job_costing_stage_name, $job_costing_stage_classification_rec_id, $job_costing_stage_classification_description, $job_costing_cost_centre_rec_id, $job_costing_cost_centre_no, $job_costing_cost_centre_name, $job_costing_job_rec_id, $job_costing_job_no, $job_costing_job_description, $in_on_back_order_orders_on_back_id, $in_on_back_order_quantity, $in_on_back_order_est_bo_value, $in_on_back_order_last_saved_date_time, $invoice_line_id, $user_defined_float1, $user_defined_float2, $user_defined_float3, $user_defined_date1, $user_defined_date2, $user_defined_date3, $user_defined_string1, $user_defined_string2, $user_defined_string3, $purchasing_classification_rec_id, $purchasing_classification_description, $purchasing_classification_ledger_account_rec_id, $purchasing_classification_ledger_account_account_no, $purchasing_classification_ledger_account_description, $service_manager_task_rec_id, $service_manager_task_no, $service_manager_task_description, $service_manager_job_rec_id, $service_manager_job_no, $service_manager_job_description, $in_creditor_rec_id, $supplier_part_no, $in_supplier_warehouse_rec_id, $order_units, $delivery_days, $fx_cost, $cost, $cost_original, $units, $tax_rate_rec_id, $tax_rate_description, $tax_rate, $tax_rate_bas_code, $inventory_expected_liability_ledger_account_rec_id, $inventory_expected_liability_ledger_account_account_no, $inventory_expected_liability_ledger_account_description, $inventory_expected_asset_ledger_account_rec_id, $inventory_expected_asset_ledger_account_account_no, $inventory_expected_asset_ledger_account_description, $classification_id, $classification_description, $custom_field_values, $body);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Jiwa\JiwaModel\PurchaseOrderLine',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 404:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Jiwa\JiwaModel\PurchaseOrderLine',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 403:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Jiwa\JiwaModel\PurchaseOrderLine',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 401:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Jiwa\JiwaModel\PurchaseOrderLine',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation purchaseOrderLinePATCHRequestPurchaseOrderIDLinesPurchaseOrderLineIDUpdateAsync
     *
     * Updates a line for a purchase order.
     *
     * @param  string $accept Accept Header (required)
     * @param  string $purchase_order_id (required)
     * @param  string $purchase_order_line_id (required)
     * @param  bool $jiwa_stateful Stateful indicator (optional)
     * @param  int $item_no (optional)
     * @param  string $inventory_id (optional)
     * @param  bool $is_physical (optional)
     * @param  string $part_no (optional)
     * @param  string $description (optional)
     * @param  int $quantity_decimal_places (optional)
     * @param  bool $make_supplier_the_new_default (optional)
     * @param  string $purchase_order_line_type (optional)
     * @param  double $quantity (optional)
     * @param  double $inc_price (optional)
     * @param  double $tax_amount (optional)
     * @param  double $line_total (optional)
     * @param  double $line_total_ex_tax (optional)
     * @param  double $fx_total (optional)
     * @param  double $currency_rate_used (optional)
     * @param  int $fx_decimal_places (optional)
     * @param  int $home_currency_decimal_places (optional)
     * @param  \DateTime $delivery_date (optional)
     * @param  double $delivered (optional)
     * @param  string $history_text_comment (optional)
     * @param  string $job_costing_stage_rec_id (optional)
     * @param  string $job_costing_stage_no (optional)
     * @param  string $job_costing_stage_name (optional)
     * @param  string $job_costing_stage_classification_rec_id (optional)
     * @param  string $job_costing_stage_classification_description (optional)
     * @param  string $job_costing_cost_centre_rec_id (optional)
     * @param  string $job_costing_cost_centre_no (optional)
     * @param  string $job_costing_cost_centre_name (optional)
     * @param  string $job_costing_job_rec_id (optional)
     * @param  string $job_costing_job_no (optional)
     * @param  string $job_costing_job_description (optional)
     * @param  string $in_on_back_order_orders_on_back_id (optional)
     * @param  double $in_on_back_order_quantity (optional)
     * @param  double $in_on_back_order_est_bo_value (optional)
     * @param  \DateTime $in_on_back_order_last_saved_date_time (optional)
     * @param  string $invoice_line_id (optional)
     * @param  double $user_defined_float1 (optional)
     * @param  double $user_defined_float2 (optional)
     * @param  double $user_defined_float3 (optional)
     * @param  \DateTime $user_defined_date1 (optional)
     * @param  \DateTime $user_defined_date2 (optional)
     * @param  \DateTime $user_defined_date3 (optional)
     * @param  string $user_defined_string1 (optional)
     * @param  string $user_defined_string2 (optional)
     * @param  string $user_defined_string3 (optional)
     * @param  string $purchasing_classification_rec_id (optional)
     * @param  string $purchasing_classification_description (optional)
     * @param  string $purchasing_classification_ledger_account_rec_id (optional)
     * @param  string $purchasing_classification_ledger_account_account_no (optional)
     * @param  string $purchasing_classification_ledger_account_description (optional)
     * @param  string $service_manager_task_rec_id (optional)
     * @param  int $service_manager_task_no (optional)
     * @param  string $service_manager_task_description (optional)
     * @param  string $service_manager_job_rec_id (optional)
     * @param  string $service_manager_job_no (optional)
     * @param  string $service_manager_job_description (optional)
     * @param  string $in_creditor_rec_id (optional)
     * @param  string $supplier_part_no (optional)
     * @param  string $in_supplier_warehouse_rec_id (optional)
     * @param  double $order_units (optional)
     * @param  int $delivery_days (optional)
     * @param  double $fx_cost (optional)
     * @param  double $cost (optional)
     * @param  double $cost_original (optional)
     * @param  string $units (optional)
     * @param  string $tax_rate_rec_id (optional)
     * @param  string $tax_rate_description (optional)
     * @param  double $tax_rate (optional)
     * @param  int $tax_rate_bas_code (optional)
     * @param  string $inventory_expected_liability_ledger_account_rec_id (optional)
     * @param  string $inventory_expected_liability_ledger_account_account_no (optional)
     * @param  string $inventory_expected_liability_ledger_account_description (optional)
     * @param  string $inventory_expected_asset_ledger_account_rec_id (optional)
     * @param  string $inventory_expected_asset_ledger_account_account_no (optional)
     * @param  string $inventory_expected_asset_ledger_account_description (optional)
     * @param  string $classification_id (optional)
     * @param  string $classification_description (optional)
     * @param  string $custom_field_values (optional)
     * @param  \Jiwa\JiwaModel\PurchaseOrderLinePATCHRequest $body (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function purchaseOrderLinePATCHRequestPurchaseOrderIDLinesPurchaseOrderLineIDUpdateAsync($accept, $purchase_order_id, $purchase_order_line_id, $jiwa_stateful = null, $item_no = null, $inventory_id = null, $is_physical = null, $part_no = null, $description = null, $quantity_decimal_places = null, $make_supplier_the_new_default = null, $purchase_order_line_type = null, $quantity = null, $inc_price = null, $tax_amount = null, $line_total = null, $line_total_ex_tax = null, $fx_total = null, $currency_rate_used = null, $fx_decimal_places = null, $home_currency_decimal_places = null, $delivery_date = null, $delivered = null, $history_text_comment = null, $job_costing_stage_rec_id = null, $job_costing_stage_no = null, $job_costing_stage_name = null, $job_costing_stage_classification_rec_id = null, $job_costing_stage_classification_description = null, $job_costing_cost_centre_rec_id = null, $job_costing_cost_centre_no = null, $job_costing_cost_centre_name = null, $job_costing_job_rec_id = null, $job_costing_job_no = null, $job_costing_job_description = null, $in_on_back_order_orders_on_back_id = null, $in_on_back_order_quantity = null, $in_on_back_order_est_bo_value = null, $in_on_back_order_last_saved_date_time = null, $invoice_line_id = null, $user_defined_float1 = null, $user_defined_float2 = null, $user_defined_float3 = null, $user_defined_date1 = null, $user_defined_date2 = null, $user_defined_date3 = null, $user_defined_string1 = null, $user_defined_string2 = null, $user_defined_string3 = null, $purchasing_classification_rec_id = null, $purchasing_classification_description = null, $purchasing_classification_ledger_account_rec_id = null, $purchasing_classification_ledger_account_account_no = null, $purchasing_classification_ledger_account_description = null, $service_manager_task_rec_id = null, $service_manager_task_no = null, $service_manager_task_description = null, $service_manager_job_rec_id = null, $service_manager_job_no = null, $service_manager_job_description = null, $in_creditor_rec_id = null, $supplier_part_no = null, $in_supplier_warehouse_rec_id = null, $order_units = null, $delivery_days = null, $fx_cost = null, $cost = null, $cost_original = null, $units = null, $tax_rate_rec_id = null, $tax_rate_description = null, $tax_rate = null, $tax_rate_bas_code = null, $inventory_expected_liability_ledger_account_rec_id = null, $inventory_expected_liability_ledger_account_account_no = null, $inventory_expected_liability_ledger_account_description = null, $inventory_expected_asset_ledger_account_rec_id = null, $inventory_expected_asset_ledger_account_account_no = null, $inventory_expected_asset_ledger_account_description = null, $classification_id = null, $classification_description = null, $custom_field_values = null, $body = null)
    {
        return $this->purchaseOrderLinePATCHRequestPurchaseOrderIDLinesPurchaseOrderLineIDUpdateAsyncWithHttpInfo($accept, $purchase_order_id, $purchase_order_line_id, $jiwa_stateful, $item_no, $inventory_id, $is_physical, $part_no, $description, $quantity_decimal_places, $make_supplier_the_new_default, $purchase_order_line_type, $quantity, $inc_price, $tax_amount, $line_total, $line_total_ex_tax, $fx_total, $currency_rate_used, $fx_decimal_places, $home_currency_decimal_places, $delivery_date, $delivered, $history_text_comment, $job_costing_stage_rec_id, $job_costing_stage_no, $job_costing_stage_name, $job_costing_stage_classification_rec_id, $job_costing_stage_classification_description, $job_costing_cost_centre_rec_id, $job_costing_cost_centre_no, $job_costing_cost_centre_name, $job_costing_job_rec_id, $job_costing_job_no, $job_costing_job_description, $in_on_back_order_orders_on_back_id, $in_on_back_order_quantity, $in_on_back_order_est_bo_value, $in_on_back_order_last_saved_date_time, $invoice_line_id, $user_defined_float1, $user_defined_float2, $user_defined_float3, $user_defined_date1, $user_defined_date2, $user_defined_date3, $user_defined_string1, $user_defined_string2, $user_defined_string3, $purchasing_classification_rec_id, $purchasing_classification_description, $purchasing_classification_ledger_account_rec_id, $purchasing_classification_ledger_account_account_no, $purchasing_classification_ledger_account_description, $service_manager_task_rec_id, $service_manager_task_no, $service_manager_task_description, $service_manager_job_rec_id, $service_manager_job_no, $service_manager_job_description, $in_creditor_rec_id, $supplier_part_no, $in_supplier_warehouse_rec_id, $order_units, $delivery_days, $fx_cost, $cost, $cost_original, $units, $tax_rate_rec_id, $tax_rate_description, $tax_rate, $tax_rate_bas_code, $inventory_expected_liability_ledger_account_rec_id, $inventory_expected_liability_ledger_account_account_no, $inventory_expected_liability_ledger_account_description, $inventory_expected_asset_ledger_account_rec_id, $inventory_expected_asset_ledger_account_account_no, $inventory_expected_asset_ledger_account_description, $classification_id, $classification_description, $custom_field_values, $body)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation purchaseOrderLinePATCHRequestPurchaseOrderIDLinesPurchaseOrderLineIDUpdateAsyncWithHttpInfo
     *
     * Updates a line for a purchase order.
     *
     * @param  string $accept Accept Header (required)
     * @param  string $purchase_order_id (required)
     * @param  string $purchase_order_line_id (required)
     * @param  bool $jiwa_stateful Stateful indicator (optional)
     * @param  int $item_no (optional)
     * @param  string $inventory_id (optional)
     * @param  bool $is_physical (optional)
     * @param  string $part_no (optional)
     * @param  string $description (optional)
     * @param  int $quantity_decimal_places (optional)
     * @param  bool $make_supplier_the_new_default (optional)
     * @param  string $purchase_order_line_type (optional)
     * @param  double $quantity (optional)
     * @param  double $inc_price (optional)
     * @param  double $tax_amount (optional)
     * @param  double $line_total (optional)
     * @param  double $line_total_ex_tax (optional)
     * @param  double $fx_total (optional)
     * @param  double $currency_rate_used (optional)
     * @param  int $fx_decimal_places (optional)
     * @param  int $home_currency_decimal_places (optional)
     * @param  \DateTime $delivery_date (optional)
     * @param  double $delivered (optional)
     * @param  string $history_text_comment (optional)
     * @param  string $job_costing_stage_rec_id (optional)
     * @param  string $job_costing_stage_no (optional)
     * @param  string $job_costing_stage_name (optional)
     * @param  string $job_costing_stage_classification_rec_id (optional)
     * @param  string $job_costing_stage_classification_description (optional)
     * @param  string $job_costing_cost_centre_rec_id (optional)
     * @param  string $job_costing_cost_centre_no (optional)
     * @param  string $job_costing_cost_centre_name (optional)
     * @param  string $job_costing_job_rec_id (optional)
     * @param  string $job_costing_job_no (optional)
     * @param  string $job_costing_job_description (optional)
     * @param  string $in_on_back_order_orders_on_back_id (optional)
     * @param  double $in_on_back_order_quantity (optional)
     * @param  double $in_on_back_order_est_bo_value (optional)
     * @param  \DateTime $in_on_back_order_last_saved_date_time (optional)
     * @param  string $invoice_line_id (optional)
     * @param  double $user_defined_float1 (optional)
     * @param  double $user_defined_float2 (optional)
     * @param  double $user_defined_float3 (optional)
     * @param  \DateTime $user_defined_date1 (optional)
     * @param  \DateTime $user_defined_date2 (optional)
     * @param  \DateTime $user_defined_date3 (optional)
     * @param  string $user_defined_string1 (optional)
     * @param  string $user_defined_string2 (optional)
     * @param  string $user_defined_string3 (optional)
     * @param  string $purchasing_classification_rec_id (optional)
     * @param  string $purchasing_classification_description (optional)
     * @param  string $purchasing_classification_ledger_account_rec_id (optional)
     * @param  string $purchasing_classification_ledger_account_account_no (optional)
     * @param  string $purchasing_classification_ledger_account_description (optional)
     * @param  string $service_manager_task_rec_id (optional)
     * @param  int $service_manager_task_no (optional)
     * @param  string $service_manager_task_description (optional)
     * @param  string $service_manager_job_rec_id (optional)
     * @param  string $service_manager_job_no (optional)
     * @param  string $service_manager_job_description (optional)
     * @param  string $in_creditor_rec_id (optional)
     * @param  string $supplier_part_no (optional)
     * @param  string $in_supplier_warehouse_rec_id (optional)
     * @param  double $order_units (optional)
     * @param  int $delivery_days (optional)
     * @param  double $fx_cost (optional)
     * @param  double $cost (optional)
     * @param  double $cost_original (optional)
     * @param  string $units (optional)
     * @param  string $tax_rate_rec_id (optional)
     * @param  string $tax_rate_description (optional)
     * @param  double $tax_rate (optional)
     * @param  int $tax_rate_bas_code (optional)
     * @param  string $inventory_expected_liability_ledger_account_rec_id (optional)
     * @param  string $inventory_expected_liability_ledger_account_account_no (optional)
     * @param  string $inventory_expected_liability_ledger_account_description (optional)
     * @param  string $inventory_expected_asset_ledger_account_rec_id (optional)
     * @param  string $inventory_expected_asset_ledger_account_account_no (optional)
     * @param  string $inventory_expected_asset_ledger_account_description (optional)
     * @param  string $classification_id (optional)
     * @param  string $classification_description (optional)
     * @param  string $custom_field_values (optional)
     * @param  \Jiwa\JiwaModel\PurchaseOrderLinePATCHRequest $body (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function purchaseOrderLinePATCHRequestPurchaseOrderIDLinesPurchaseOrderLineIDUpdateAsyncWithHttpInfo($accept, $purchase_order_id, $purchase_order_line_id, $jiwa_stateful = null, $item_no = null, $inventory_id = null, $is_physical = null, $part_no = null, $description = null, $quantity_decimal_places = null, $make_supplier_the_new_default = null, $purchase_order_line_type = null, $quantity = null, $inc_price = null, $tax_amount = null, $line_total = null, $line_total_ex_tax = null, $fx_total = null, $currency_rate_used = null, $fx_decimal_places = null, $home_currency_decimal_places = null, $delivery_date = null, $delivered = null, $history_text_comment = null, $job_costing_stage_rec_id = null, $job_costing_stage_no = null, $job_costing_stage_name = null, $job_costing_stage_classification_rec_id = null, $job_costing_stage_classification_description = null, $job_costing_cost_centre_rec_id = null, $job_costing_cost_centre_no = null, $job_costing_cost_centre_name = null, $job_costing_job_rec_id = null, $job_costing_job_no = null, $job_costing_job_description = null, $in_on_back_order_orders_on_back_id = null, $in_on_back_order_quantity = null, $in_on_back_order_est_bo_value = null, $in_on_back_order_last_saved_date_time = null, $invoice_line_id = null, $user_defined_float1 = null, $user_defined_float2 = null, $user_defined_float3 = null, $user_defined_date1 = null, $user_defined_date2 = null, $user_defined_date3 = null, $user_defined_string1 = null, $user_defined_string2 = null, $user_defined_string3 = null, $purchasing_classification_rec_id = null, $purchasing_classification_description = null, $purchasing_classification_ledger_account_rec_id = null, $purchasing_classification_ledger_account_account_no = null, $purchasing_classification_ledger_account_description = null, $service_manager_task_rec_id = null, $service_manager_task_no = null, $service_manager_task_description = null, $service_manager_job_rec_id = null, $service_manager_job_no = null, $service_manager_job_description = null, $in_creditor_rec_id = null, $supplier_part_no = null, $in_supplier_warehouse_rec_id = null, $order_units = null, $delivery_days = null, $fx_cost = null, $cost = null, $cost_original = null, $units = null, $tax_rate_rec_id = null, $tax_rate_description = null, $tax_rate = null, $tax_rate_bas_code = null, $inventory_expected_liability_ledger_account_rec_id = null, $inventory_expected_liability_ledger_account_account_no = null, $inventory_expected_liability_ledger_account_description = null, $inventory_expected_asset_ledger_account_rec_id = null, $inventory_expected_asset_ledger_account_account_no = null, $inventory_expected_asset_ledger_account_description = null, $classification_id = null, $classification_description = null, $custom_field_values = null, $body = null)
    {
        $returnType = '\Jiwa\JiwaModel\PurchaseOrderLine';
        $request = $this->purchaseOrderLinePATCHRequestPurchaseOrderIDLinesPurchaseOrderLineIDUpdateRequest($accept, $purchase_order_id, $purchase_order_line_id, $jiwa_stateful, $item_no, $inventory_id, $is_physical, $part_no, $description, $quantity_decimal_places, $make_supplier_the_new_default, $purchase_order_line_type, $quantity, $inc_price, $tax_amount, $line_total, $line_total_ex_tax, $fx_total, $currency_rate_used, $fx_decimal_places, $home_currency_decimal_places, $delivery_date, $delivered, $history_text_comment, $job_costing_stage_rec_id, $job_costing_stage_no, $job_costing_stage_name, $job_costing_stage_classification_rec_id, $job_costing_stage_classification_description, $job_costing_cost_centre_rec_id, $job_costing_cost_centre_no, $job_costing_cost_centre_name, $job_costing_job_rec_id, $job_costing_job_no, $job_costing_job_description, $in_on_back_order_orders_on_back_id, $in_on_back_order_quantity, $in_on_back_order_est_bo_value, $in_on_back_order_last_saved_date_time, $invoice_line_id, $user_defined_float1, $user_defined_float2, $user_defined_float3, $user_defined_date1, $user_defined_date2, $user_defined_date3, $user_defined_string1, $user_defined_string2, $user_defined_string3, $purchasing_classification_rec_id, $purchasing_classification_description, $purchasing_classification_ledger_account_rec_id, $purchasing_classification_ledger_account_account_no, $purchasing_classification_ledger_account_description, $service_manager_task_rec_id, $service_manager_task_no, $service_manager_task_description, $service_manager_job_rec_id, $service_manager_job_no, $service_manager_job_description, $in_creditor_rec_id, $supplier_part_no, $in_supplier_warehouse_rec_id, $order_units, $delivery_days, $fx_cost, $cost, $cost_original, $units, $tax_rate_rec_id, $tax_rate_description, $tax_rate, $tax_rate_bas_code, $inventory_expected_liability_ledger_account_rec_id, $inventory_expected_liability_ledger_account_account_no, $inventory_expected_liability_ledger_account_description, $inventory_expected_asset_ledger_account_rec_id, $inventory_expected_asset_ledger_account_account_no, $inventory_expected_asset_ledger_account_description, $classification_id, $classification_description, $custom_field_values, $body);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'purchaseOrderLinePATCHRequestPurchaseOrderIDLinesPurchaseOrderLineIDUpdate'
     *
     * @param  string $accept Accept Header (required)
     * @param  string $purchase_order_id (required)
     * @param  string $purchase_order_line_id (required)
     * @param  bool $jiwa_stateful Stateful indicator (optional)
     * @param  int $item_no (optional)
     * @param  string $inventory_id (optional)
     * @param  bool $is_physical (optional)
     * @param  string $part_no (optional)
     * @param  string $description (optional)
     * @param  int $quantity_decimal_places (optional)
     * @param  bool $make_supplier_the_new_default (optional)
     * @param  string $purchase_order_line_type (optional)
     * @param  double $quantity (optional)
     * @param  double $inc_price (optional)
     * @param  double $tax_amount (optional)
     * @param  double $line_total (optional)
     * @param  double $line_total_ex_tax (optional)
     * @param  double $fx_total (optional)
     * @param  double $currency_rate_used (optional)
     * @param  int $fx_decimal_places (optional)
     * @param  int $home_currency_decimal_places (optional)
     * @param  \DateTime $delivery_date (optional)
     * @param  double $delivered (optional)
     * @param  string $history_text_comment (optional)
     * @param  string $job_costing_stage_rec_id (optional)
     * @param  string $job_costing_stage_no (optional)
     * @param  string $job_costing_stage_name (optional)
     * @param  string $job_costing_stage_classification_rec_id (optional)
     * @param  string $job_costing_stage_classification_description (optional)
     * @param  string $job_costing_cost_centre_rec_id (optional)
     * @param  string $job_costing_cost_centre_no (optional)
     * @param  string $job_costing_cost_centre_name (optional)
     * @param  string $job_costing_job_rec_id (optional)
     * @param  string $job_costing_job_no (optional)
     * @param  string $job_costing_job_description (optional)
     * @param  string $in_on_back_order_orders_on_back_id (optional)
     * @param  double $in_on_back_order_quantity (optional)
     * @param  double $in_on_back_order_est_bo_value (optional)
     * @param  \DateTime $in_on_back_order_last_saved_date_time (optional)
     * @param  string $invoice_line_id (optional)
     * @param  double $user_defined_float1 (optional)
     * @param  double $user_defined_float2 (optional)
     * @param  double $user_defined_float3 (optional)
     * @param  \DateTime $user_defined_date1 (optional)
     * @param  \DateTime $user_defined_date2 (optional)
     * @param  \DateTime $user_defined_date3 (optional)
     * @param  string $user_defined_string1 (optional)
     * @param  string $user_defined_string2 (optional)
     * @param  string $user_defined_string3 (optional)
     * @param  string $purchasing_classification_rec_id (optional)
     * @param  string $purchasing_classification_description (optional)
     * @param  string $purchasing_classification_ledger_account_rec_id (optional)
     * @param  string $purchasing_classification_ledger_account_account_no (optional)
     * @param  string $purchasing_classification_ledger_account_description (optional)
     * @param  string $service_manager_task_rec_id (optional)
     * @param  int $service_manager_task_no (optional)
     * @param  string $service_manager_task_description (optional)
     * @param  string $service_manager_job_rec_id (optional)
     * @param  string $service_manager_job_no (optional)
     * @param  string $service_manager_job_description (optional)
     * @param  string $in_creditor_rec_id (optional)
     * @param  string $supplier_part_no (optional)
     * @param  string $in_supplier_warehouse_rec_id (optional)
     * @param  double $order_units (optional)
     * @param  int $delivery_days (optional)
     * @param  double $fx_cost (optional)
     * @param  double $cost (optional)
     * @param  double $cost_original (optional)
     * @param  string $units (optional)
     * @param  string $tax_rate_rec_id (optional)
     * @param  string $tax_rate_description (optional)
     * @param  double $tax_rate (optional)
     * @param  int $tax_rate_bas_code (optional)
     * @param  string $inventory_expected_liability_ledger_account_rec_id (optional)
     * @param  string $inventory_expected_liability_ledger_account_account_no (optional)
     * @param  string $inventory_expected_liability_ledger_account_description (optional)
     * @param  string $inventory_expected_asset_ledger_account_rec_id (optional)
     * @param  string $inventory_expected_asset_ledger_account_account_no (optional)
     * @param  string $inventory_expected_asset_ledger_account_description (optional)
     * @param  string $classification_id (optional)
     * @param  string $classification_description (optional)
     * @param  string $custom_field_values (optional)
     * @param  \Jiwa\JiwaModel\PurchaseOrderLinePATCHRequest $body (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function purchaseOrderLinePATCHRequestPurchaseOrderIDLinesPurchaseOrderLineIDUpdateRequest($accept, $purchase_order_id, $purchase_order_line_id, $jiwa_stateful = null, $item_no = null, $inventory_id = null, $is_physical = null, $part_no = null, $description = null, $quantity_decimal_places = null, $make_supplier_the_new_default = null, $purchase_order_line_type = null, $quantity = null, $inc_price = null, $tax_amount = null, $line_total = null, $line_total_ex_tax = null, $fx_total = null, $currency_rate_used = null, $fx_decimal_places = null, $home_currency_decimal_places = null, $delivery_date = null, $delivered = null, $history_text_comment = null, $job_costing_stage_rec_id = null, $job_costing_stage_no = null, $job_costing_stage_name = null, $job_costing_stage_classification_rec_id = null, $job_costing_stage_classification_description = null, $job_costing_cost_centre_rec_id = null, $job_costing_cost_centre_no = null, $job_costing_cost_centre_name = null, $job_costing_job_rec_id = null, $job_costing_job_no = null, $job_costing_job_description = null, $in_on_back_order_orders_on_back_id = null, $in_on_back_order_quantity = null, $in_on_back_order_est_bo_value = null, $in_on_back_order_last_saved_date_time = null, $invoice_line_id = null, $user_defined_float1 = null, $user_defined_float2 = null, $user_defined_float3 = null, $user_defined_date1 = null, $user_defined_date2 = null, $user_defined_date3 = null, $user_defined_string1 = null, $user_defined_string2 = null, $user_defined_string3 = null, $purchasing_classification_rec_id = null, $purchasing_classification_description = null, $purchasing_classification_ledger_account_rec_id = null, $purchasing_classification_ledger_account_account_no = null, $purchasing_classification_ledger_account_description = null, $service_manager_task_rec_id = null, $service_manager_task_no = null, $service_manager_task_description = null, $service_manager_job_rec_id = null, $service_manager_job_no = null, $service_manager_job_description = null, $in_creditor_rec_id = null, $supplier_part_no = null, $in_supplier_warehouse_rec_id = null, $order_units = null, $delivery_days = null, $fx_cost = null, $cost = null, $cost_original = null, $units = null, $tax_rate_rec_id = null, $tax_rate_description = null, $tax_rate = null, $tax_rate_bas_code = null, $inventory_expected_liability_ledger_account_rec_id = null, $inventory_expected_liability_ledger_account_account_no = null, $inventory_expected_liability_ledger_account_description = null, $inventory_expected_asset_ledger_account_rec_id = null, $inventory_expected_asset_ledger_account_account_no = null, $inventory_expected_asset_ledger_account_description = null, $classification_id = null, $classification_description = null, $custom_field_values = null, $body = null)
    {
        // verify the required parameter 'accept' is set
        if ($accept === null || (is_array($accept) && count($accept) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $accept when calling purchaseOrderLinePATCHRequestPurchaseOrderIDLinesPurchaseOrderLineIDUpdate'
            );
        }
        // verify the required parameter 'purchase_order_id' is set
        if ($purchase_order_id === null || (is_array($purchase_order_id) && count($purchase_order_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $purchase_order_id when calling purchaseOrderLinePATCHRequestPurchaseOrderIDLinesPurchaseOrderLineIDUpdate'
            );
        }
        // verify the required parameter 'purchase_order_line_id' is set
        if ($purchase_order_line_id === null || (is_array($purchase_order_line_id) && count($purchase_order_line_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $purchase_order_line_id when calling purchaseOrderLinePATCHRequestPurchaseOrderIDLinesPurchaseOrderLineIDUpdate'
            );
        }

        $resourcePath = '/PurchaseOrders/{PurchaseOrderID}/Lines/{PurchaseOrderLineID}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        if ($item_no !== null) {
            $queryParams['ItemNo'] = ObjectSerializer::toQueryValue($item_no);
        }
        // query params
        if ($inventory_id !== null) {
            $queryParams['InventoryID'] = ObjectSerializer::toQueryValue($inventory_id);
        }
        // query params
        if ($is_physical !== null) {
            $queryParams['IsPhysical'] = ObjectSerializer::toQueryValue($is_physical);
        }
        // query params
        if ($part_no !== null) {
            $queryParams['PartNo'] = ObjectSerializer::toQueryValue($part_no);
        }
        // query params
        if ($description !== null) {
            $queryParams['Description'] = ObjectSerializer::toQueryValue($description);
        }
        // query params
        if ($quantity_decimal_places !== null) {
            $queryParams['QuantityDecimalPlaces'] = ObjectSerializer::toQueryValue($quantity_decimal_places);
        }
        // query params
        if ($make_supplier_the_new_default !== null) {
            $queryParams['MakeSupplierTheNewDefault'] = ObjectSerializer::toQueryValue($make_supplier_the_new_default);
        }
        // query params
        if ($purchase_order_line_type !== null) {
            $queryParams['PurchaseOrderLineType'] = ObjectSerializer::toQueryValue($purchase_order_line_type);
        }
        // query params
        if ($quantity !== null) {
            $queryParams['Quantity'] = ObjectSerializer::toQueryValue($quantity);
        }
        // query params
        if ($inc_price !== null) {
            $queryParams['IncPrice'] = ObjectSerializer::toQueryValue($inc_price);
        }
        // query params
        if ($tax_amount !== null) {
            $queryParams['TaxAmount'] = ObjectSerializer::toQueryValue($tax_amount);
        }
        // query params
        if ($line_total !== null) {
            $queryParams['LineTotal'] = ObjectSerializer::toQueryValue($line_total);
        }
        // query params
        if ($line_total_ex_tax !== null) {
            $queryParams['LineTotalExTax'] = ObjectSerializer::toQueryValue($line_total_ex_tax);
        }
        // query params
        if ($fx_total !== null) {
            $queryParams['FxTotal'] = ObjectSerializer::toQueryValue($fx_total);
        }
        // query params
        if ($currency_rate_used !== null) {
            $queryParams['CurrencyRateUsed'] = ObjectSerializer::toQueryValue($currency_rate_used);
        }
        // query params
        if ($fx_decimal_places !== null) {
            $queryParams['FXDecimalPlaces'] = ObjectSerializer::toQueryValue($fx_decimal_places);
        }
        // query params
        if ($home_currency_decimal_places !== null) {
            $queryParams['HomeCurrencyDecimalPlaces'] = ObjectSerializer::toQueryValue($home_currency_decimal_places);
        }
        // query params
        if ($delivery_date !== null) {
            $queryParams['DeliveryDate'] = ObjectSerializer::toQueryValue($delivery_date);
        }
        // query params
        if ($delivered !== null) {
            $queryParams['Delivered'] = ObjectSerializer::toQueryValue($delivered);
        }
        // query params
        if ($history_text_comment !== null) {
            $queryParams['HistoryText_Comment'] = ObjectSerializer::toQueryValue($history_text_comment);
        }
        // query params
        if ($job_costing_stage_rec_id !== null) {
            $queryParams['JobCostingStageRecID'] = ObjectSerializer::toQueryValue($job_costing_stage_rec_id);
        }
        // query params
        if ($job_costing_stage_no !== null) {
            $queryParams['JobCostingStageNo'] = ObjectSerializer::toQueryValue($job_costing_stage_no);
        }
        // query params
        if ($job_costing_stage_name !== null) {
            $queryParams['JobCostingStageName'] = ObjectSerializer::toQueryValue($job_costing_stage_name);
        }
        // query params
        if ($job_costing_stage_classification_rec_id !== null) {
            $queryParams['JobCostingStageClassificationRecID'] = ObjectSerializer::toQueryValue($job_costing_stage_classification_rec_id);
        }
        // query params
        if ($job_costing_stage_classification_description !== null) {
            $queryParams['JobCostingStageClassificationDescription'] = ObjectSerializer::toQueryValue($job_costing_stage_classification_description);
        }
        // query params
        if ($job_costing_cost_centre_rec_id !== null) {
            $queryParams['JobCostingCostCentreRecID'] = ObjectSerializer::toQueryValue($job_costing_cost_centre_rec_id);
        }
        // query params
        if ($job_costing_cost_centre_no !== null) {
            $queryParams['JobCostingCostCentreNo'] = ObjectSerializer::toQueryValue($job_costing_cost_centre_no);
        }
        // query params
        if ($job_costing_cost_centre_name !== null) {
            $queryParams['JobCostingCostCentreName'] = ObjectSerializer::toQueryValue($job_costing_cost_centre_name);
        }
        // query params
        if ($job_costing_job_rec_id !== null) {
            $queryParams['JobCostingJobRecID'] = ObjectSerializer::toQueryValue($job_costing_job_rec_id);
        }
        // query params
        if ($job_costing_job_no !== null) {
            $queryParams['JobCostingJobNo'] = ObjectSerializer::toQueryValue($job_costing_job_no);
        }
        // query params
        if ($job_costing_job_description !== null) {
            $queryParams['JobCostingJobDescription'] = ObjectSerializer::toQueryValue($job_costing_job_description);
        }
        // query params
        if ($in_on_back_order_orders_on_back_id !== null) {
            $queryParams['IN_OnBackOrder_OrdersOnBackID'] = ObjectSerializer::toQueryValue($in_on_back_order_orders_on_back_id);
        }
        // query params
        if ($in_on_back_order_quantity !== null) {
            $queryParams['IN_OnBackOrder_Quantity'] = ObjectSerializer::toQueryValue($in_on_back_order_quantity);
        }
        // query params
        if ($in_on_back_order_est_bo_value !== null) {
            $queryParams['IN_OnBackOrder_EstBOValue'] = ObjectSerializer::toQueryValue($in_on_back_order_est_bo_value);
        }
        // query params
        if ($in_on_back_order_last_saved_date_time !== null) {
            $queryParams['IN_OnBackOrder_LastSavedDateTime'] = ObjectSerializer::toQueryValue($in_on_back_order_last_saved_date_time);
        }
        // query params
        if ($invoice_line_id !== null) {
            $queryParams['InvoiceLineID'] = ObjectSerializer::toQueryValue($invoice_line_id);
        }
        // query params
        if ($user_defined_float1 !== null) {
            $queryParams['UserDefinedFloat1'] = ObjectSerializer::toQueryValue($user_defined_float1);
        }
        // query params
        if ($user_defined_float2 !== null) {
            $queryParams['UserDefinedFloat2'] = ObjectSerializer::toQueryValue($user_defined_float2);
        }
        // query params
        if ($user_defined_float3 !== null) {
            $queryParams['UserDefinedFloat3'] = ObjectSerializer::toQueryValue($user_defined_float3);
        }
        // query params
        if ($user_defined_date1 !== null) {
            $queryParams['UserDefinedDate1'] = ObjectSerializer::toQueryValue($user_defined_date1);
        }
        // query params
        if ($user_defined_date2 !== null) {
            $queryParams['UserDefinedDate2'] = ObjectSerializer::toQueryValue($user_defined_date2);
        }
        // query params
        if ($user_defined_date3 !== null) {
            $queryParams['UserDefinedDate3'] = ObjectSerializer::toQueryValue($user_defined_date3);
        }
        // query params
        if ($user_defined_string1 !== null) {
            $queryParams['UserDefinedString1'] = ObjectSerializer::toQueryValue($user_defined_string1);
        }
        // query params
        if ($user_defined_string2 !== null) {
            $queryParams['UserDefinedString2'] = ObjectSerializer::toQueryValue($user_defined_string2);
        }
        // query params
        if ($user_defined_string3 !== null) {
            $queryParams['UserDefinedString3'] = ObjectSerializer::toQueryValue($user_defined_string3);
        }
        // query params
        if ($purchasing_classification_rec_id !== null) {
            $queryParams['PurchasingClassificationRecID'] = ObjectSerializer::toQueryValue($purchasing_classification_rec_id);
        }
        // query params
        if ($purchasing_classification_description !== null) {
            $queryParams['PurchasingClassificationDescription'] = ObjectSerializer::toQueryValue($purchasing_classification_description);
        }
        // query params
        if ($purchasing_classification_ledger_account_rec_id !== null) {
            $queryParams['PurchasingClassificationLedgerAccountRecID'] = ObjectSerializer::toQueryValue($purchasing_classification_ledger_account_rec_id);
        }
        // query params
        if ($purchasing_classification_ledger_account_account_no !== null) {
            $queryParams['PurchasingClassificationLedgerAccountAccountNo'] = ObjectSerializer::toQueryValue($purchasing_classification_ledger_account_account_no);
        }
        // query params
        if ($purchasing_classification_ledger_account_description !== null) {
            $queryParams['PurchasingClassificationLedgerAccountDescription'] = ObjectSerializer::toQueryValue($purchasing_classification_ledger_account_description);
        }
        // query params
        if ($service_manager_task_rec_id !== null) {
            $queryParams['ServiceManagerTaskRecID'] = ObjectSerializer::toQueryValue($service_manager_task_rec_id);
        }
        // query params
        if ($service_manager_task_no !== null) {
            $queryParams['ServiceManagerTaskNo'] = ObjectSerializer::toQueryValue($service_manager_task_no);
        }
        // query params
        if ($service_manager_task_description !== null) {
            $queryParams['ServiceManagerTaskDescription'] = ObjectSerializer::toQueryValue($service_manager_task_description);
        }
        // query params
        if ($service_manager_job_rec_id !== null) {
            $queryParams['ServiceManagerJobRecID'] = ObjectSerializer::toQueryValue($service_manager_job_rec_id);
        }
        // query params
        if ($service_manager_job_no !== null) {
            $queryParams['ServiceManagerJobNo'] = ObjectSerializer::toQueryValue($service_manager_job_no);
        }
        // query params
        if ($service_manager_job_description !== null) {
            $queryParams['ServiceManagerJobDescription'] = ObjectSerializer::toQueryValue($service_manager_job_description);
        }
        // query params
        if ($in_creditor_rec_id !== null) {
            $queryParams['IN_Creditor_RecID'] = ObjectSerializer::toQueryValue($in_creditor_rec_id);
        }
        // query params
        if ($supplier_part_no !== null) {
            $queryParams['SupplierPartNo'] = ObjectSerializer::toQueryValue($supplier_part_no);
        }
        // query params
        if ($in_supplier_warehouse_rec_id !== null) {
            $queryParams['IN_SupplierWarehouse_RecID'] = ObjectSerializer::toQueryValue($in_supplier_warehouse_rec_id);
        }
        // query params
        if ($order_units !== null) {
            $queryParams['OrderUnits'] = ObjectSerializer::toQueryValue($order_units);
        }
        // query params
        if ($delivery_days !== null) {
            $queryParams['DeliveryDays'] = ObjectSerializer::toQueryValue($delivery_days);
        }
        // query params
        if ($fx_cost !== null) {
            $queryParams['FXCost'] = ObjectSerializer::toQueryValue($fx_cost);
        }
        // query params
        if ($cost !== null) {
            $queryParams['Cost'] = ObjectSerializer::toQueryValue($cost);
        }
        // query params
        if ($cost_original !== null) {
            $queryParams['CostOriginal'] = ObjectSerializer::toQueryValue($cost_original);
        }
        // query params
        if ($units !== null) {
            $queryParams['Units'] = ObjectSerializer::toQueryValue($units);
        }
        // query params
        if ($tax_rate_rec_id !== null) {
            $queryParams['TaxRateRecID'] = ObjectSerializer::toQueryValue($tax_rate_rec_id);
        }
        // query params
        if ($tax_rate_description !== null) {
            $queryParams['TaxRateDescription'] = ObjectSerializer::toQueryValue($tax_rate_description);
        }
        // query params
        if ($tax_rate !== null) {
            $queryParams['TaxRate'] = ObjectSerializer::toQueryValue($tax_rate);
        }
        // query params
        if ($tax_rate_bas_code !== null) {
            $queryParams['TaxRateBASCode'] = ObjectSerializer::toQueryValue($tax_rate_bas_code);
        }
        // query params
        if ($inventory_expected_liability_ledger_account_rec_id !== null) {
            $queryParams['InventoryExpectedLiabilityLedgerAccountRecID'] = ObjectSerializer::toQueryValue($inventory_expected_liability_ledger_account_rec_id);
        }
        // query params
        if ($inventory_expected_liability_ledger_account_account_no !== null) {
            $queryParams['InventoryExpectedLiabilityLedgerAccountAccountNo'] = ObjectSerializer::toQueryValue($inventory_expected_liability_ledger_account_account_no);
        }
        // query params
        if ($inventory_expected_liability_ledger_account_description !== null) {
            $queryParams['InventoryExpectedLiabilityLedgerAccountDescription'] = ObjectSerializer::toQueryValue($inventory_expected_liability_ledger_account_description);
        }
        // query params
        if ($inventory_expected_asset_ledger_account_rec_id !== null) {
            $queryParams['InventoryExpectedAssetLedgerAccountRecID'] = ObjectSerializer::toQueryValue($inventory_expected_asset_ledger_account_rec_id);
        }
        // query params
        if ($inventory_expected_asset_ledger_account_account_no !== null) {
            $queryParams['InventoryExpectedAssetLedgerAccountAccountNo'] = ObjectSerializer::toQueryValue($inventory_expected_asset_ledger_account_account_no);
        }
        // query params
        if ($inventory_expected_asset_ledger_account_description !== null) {
            $queryParams['InventoryExpectedAssetLedgerAccountDescription'] = ObjectSerializer::toQueryValue($inventory_expected_asset_ledger_account_description);
        }
        // query params
        if ($classification_id !== null) {
            $queryParams['ClassificationID'] = ObjectSerializer::toQueryValue($classification_id);
        }
        // query params
        if ($classification_description !== null) {
            $queryParams['ClassificationDescription'] = ObjectSerializer::toQueryValue($classification_description);
        }
        // query params
        if ($custom_field_values !== null) {
            $queryParams['CustomFieldValues'] = ObjectSerializer::toQueryValue($custom_field_values);
        }
        // header params
        if ($accept !== null) {
            $headerParams['Accept'] = ObjectSerializer::toHeaderValue($accept);
        }
        // header params
        if ($jiwa_stateful !== null) {
            $headerParams['jiwa-stateful'] = ObjectSerializer::toHeaderValue($jiwa_stateful);
        }

        // path params
        if ($purchase_order_id !== null) {
            $resourcePath = str_replace(
                '{' . 'PurchaseOrderID' . '}',
                ObjectSerializer::toPathValue($purchase_order_id),
                $resourcePath
            );
        }
        // path params
        if ($purchase_order_line_id !== null) {
            $resourcePath = str_replace(
                '{' . 'PurchaseOrderLineID' . '}',
                ObjectSerializer::toPathValue($purchase_order_line_id),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;
        if (isset($body)) {
            $_tempBody = $body;
        }

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json', 'application/xml']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json', 'application/xml'],
                ['application/x-www-form-urlencoded', 'application/json', 'application/xml']
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            
            if($headers['Content-Type'] === 'application/json') {
                // \stdClass has no __toString(), so we should encode it manually
                if ($httpBody instanceof \stdClass) {
                    $httpBody = \GuzzleHttp\json_encode($httpBody);
                }
                // array has no __toString(), so we should encode it manually
                if(is_array($httpBody)) {
                    $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($httpBody));
                }
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\Query::build($formParams);
            }
        }

        // this endpoint requires HTTP basic authentication
        if ($this->config->getUsername() !== null || $this->config->getPassword() !== null) {
            $headers['Authorization'] = 'Basic ' . base64_encode($this->config->getUsername() . ":" . $this->config->getPassword());
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\Query::build($queryParams);
        return new Request(
            'PATCH',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation purchaseOrderLinePOSTRequestPurchaseOrderIDLinesPost
     *
     * Appends a line to a purchase order.
     *
     * @param  string $accept Accept Header (required)
     * @param  string $purchase_order_id purchase_order_id (required)
     * @param  bool $jiwa_stateful Stateful indicator (optional)
     * @param  int $item_no item_no (optional)
     * @param  string $inventory_id inventory_id (optional)
     * @param  bool $is_physical is_physical (optional)
     * @param  string $part_no part_no (optional)
     * @param  string $description description (optional)
     * @param  int $quantity_decimal_places quantity_decimal_places (optional)
     * @param  bool $make_supplier_the_new_default make_supplier_the_new_default (optional)
     * @param  string $purchase_order_line_type purchase_order_line_type (optional)
     * @param  double $quantity quantity (optional)
     * @param  double $inc_price inc_price (optional)
     * @param  double $tax_amount tax_amount (optional)
     * @param  double $line_total line_total (optional)
     * @param  double $line_total_ex_tax line_total_ex_tax (optional)
     * @param  double $fx_total fx_total (optional)
     * @param  double $currency_rate_used currency_rate_used (optional)
     * @param  int $fx_decimal_places fx_decimal_places (optional)
     * @param  int $home_currency_decimal_places home_currency_decimal_places (optional)
     * @param  \DateTime $delivery_date delivery_date (optional)
     * @param  double $delivered delivered (optional)
     * @param  string $history_text_comment history_text_comment (optional)
     * @param  string $job_costing_stage_rec_id job_costing_stage_rec_id (optional)
     * @param  string $job_costing_stage_no job_costing_stage_no (optional)
     * @param  string $job_costing_stage_name job_costing_stage_name (optional)
     * @param  string $job_costing_stage_classification_rec_id job_costing_stage_classification_rec_id (optional)
     * @param  string $job_costing_stage_classification_description job_costing_stage_classification_description (optional)
     * @param  string $job_costing_cost_centre_rec_id job_costing_cost_centre_rec_id (optional)
     * @param  string $job_costing_cost_centre_no job_costing_cost_centre_no (optional)
     * @param  string $job_costing_cost_centre_name job_costing_cost_centre_name (optional)
     * @param  string $job_costing_job_rec_id job_costing_job_rec_id (optional)
     * @param  string $job_costing_job_no job_costing_job_no (optional)
     * @param  string $job_costing_job_description job_costing_job_description (optional)
     * @param  string $in_on_back_order_orders_on_back_id in_on_back_order_orders_on_back_id (optional)
     * @param  double $in_on_back_order_quantity in_on_back_order_quantity (optional)
     * @param  double $in_on_back_order_est_bo_value in_on_back_order_est_bo_value (optional)
     * @param  \DateTime $in_on_back_order_last_saved_date_time in_on_back_order_last_saved_date_time (optional)
     * @param  string $invoice_line_id invoice_line_id (optional)
     * @param  double $user_defined_float1 user_defined_float1 (optional)
     * @param  double $user_defined_float2 user_defined_float2 (optional)
     * @param  double $user_defined_float3 user_defined_float3 (optional)
     * @param  \DateTime $user_defined_date1 user_defined_date1 (optional)
     * @param  \DateTime $user_defined_date2 user_defined_date2 (optional)
     * @param  \DateTime $user_defined_date3 user_defined_date3 (optional)
     * @param  string $user_defined_string1 user_defined_string1 (optional)
     * @param  string $user_defined_string2 user_defined_string2 (optional)
     * @param  string $user_defined_string3 user_defined_string3 (optional)
     * @param  string $purchasing_classification_rec_id purchasing_classification_rec_id (optional)
     * @param  string $purchasing_classification_description purchasing_classification_description (optional)
     * @param  string $purchasing_classification_ledger_account_rec_id purchasing_classification_ledger_account_rec_id (optional)
     * @param  string $purchasing_classification_ledger_account_account_no purchasing_classification_ledger_account_account_no (optional)
     * @param  string $purchasing_classification_ledger_account_description purchasing_classification_ledger_account_description (optional)
     * @param  string $service_manager_task_rec_id service_manager_task_rec_id (optional)
     * @param  int $service_manager_task_no service_manager_task_no (optional)
     * @param  string $service_manager_task_description service_manager_task_description (optional)
     * @param  string $service_manager_job_rec_id service_manager_job_rec_id (optional)
     * @param  string $service_manager_job_no service_manager_job_no (optional)
     * @param  string $service_manager_job_description service_manager_job_description (optional)
     * @param  string $in_creditor_rec_id in_creditor_rec_id (optional)
     * @param  string $supplier_part_no supplier_part_no (optional)
     * @param  string $in_supplier_warehouse_rec_id in_supplier_warehouse_rec_id (optional)
     * @param  double $order_units order_units (optional)
     * @param  int $delivery_days delivery_days (optional)
     * @param  double $fx_cost fx_cost (optional)
     * @param  double $cost cost (optional)
     * @param  double $cost_original cost_original (optional)
     * @param  string $units units (optional)
     * @param  string $tax_rate_rec_id tax_rate_rec_id (optional)
     * @param  string $tax_rate_description tax_rate_description (optional)
     * @param  double $tax_rate tax_rate (optional)
     * @param  int $tax_rate_bas_code tax_rate_bas_code (optional)
     * @param  string $inventory_expected_liability_ledger_account_rec_id inventory_expected_liability_ledger_account_rec_id (optional)
     * @param  string $inventory_expected_liability_ledger_account_account_no inventory_expected_liability_ledger_account_account_no (optional)
     * @param  string $inventory_expected_liability_ledger_account_description inventory_expected_liability_ledger_account_description (optional)
     * @param  string $inventory_expected_asset_ledger_account_rec_id inventory_expected_asset_ledger_account_rec_id (optional)
     * @param  string $inventory_expected_asset_ledger_account_account_no inventory_expected_asset_ledger_account_account_no (optional)
     * @param  string $inventory_expected_asset_ledger_account_description inventory_expected_asset_ledger_account_description (optional)
     * @param  string $classification_id classification_id (optional)
     * @param  string $classification_description classification_description (optional)
     * @param  string $custom_field_values custom_field_values (optional)
     * @param  \Jiwa\JiwaModel\PurchaseOrderLinePOSTRequest $body body (optional)
     *
     * @throws \Jiwa\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Jiwa\JiwaModel\PurchaseOrderLine
     */
    public function purchaseOrderLinePOSTRequestPurchaseOrderIDLinesPost($accept, $purchase_order_id, $jiwa_stateful = null, $item_no = null, $inventory_id = null, $is_physical = null, $part_no = null, $description = null, $quantity_decimal_places = null, $make_supplier_the_new_default = null, $purchase_order_line_type = null, $quantity = null, $inc_price = null, $tax_amount = null, $line_total = null, $line_total_ex_tax = null, $fx_total = null, $currency_rate_used = null, $fx_decimal_places = null, $home_currency_decimal_places = null, $delivery_date = null, $delivered = null, $history_text_comment = null, $job_costing_stage_rec_id = null, $job_costing_stage_no = null, $job_costing_stage_name = null, $job_costing_stage_classification_rec_id = null, $job_costing_stage_classification_description = null, $job_costing_cost_centre_rec_id = null, $job_costing_cost_centre_no = null, $job_costing_cost_centre_name = null, $job_costing_job_rec_id = null, $job_costing_job_no = null, $job_costing_job_description = null, $in_on_back_order_orders_on_back_id = null, $in_on_back_order_quantity = null, $in_on_back_order_est_bo_value = null, $in_on_back_order_last_saved_date_time = null, $invoice_line_id = null, $user_defined_float1 = null, $user_defined_float2 = null, $user_defined_float3 = null, $user_defined_date1 = null, $user_defined_date2 = null, $user_defined_date3 = null, $user_defined_string1 = null, $user_defined_string2 = null, $user_defined_string3 = null, $purchasing_classification_rec_id = null, $purchasing_classification_description = null, $purchasing_classification_ledger_account_rec_id = null, $purchasing_classification_ledger_account_account_no = null, $purchasing_classification_ledger_account_description = null, $service_manager_task_rec_id = null, $service_manager_task_no = null, $service_manager_task_description = null, $service_manager_job_rec_id = null, $service_manager_job_no = null, $service_manager_job_description = null, $in_creditor_rec_id = null, $supplier_part_no = null, $in_supplier_warehouse_rec_id = null, $order_units = null, $delivery_days = null, $fx_cost = null, $cost = null, $cost_original = null, $units = null, $tax_rate_rec_id = null, $tax_rate_description = null, $tax_rate = null, $tax_rate_bas_code = null, $inventory_expected_liability_ledger_account_rec_id = null, $inventory_expected_liability_ledger_account_account_no = null, $inventory_expected_liability_ledger_account_description = null, $inventory_expected_asset_ledger_account_rec_id = null, $inventory_expected_asset_ledger_account_account_no = null, $inventory_expected_asset_ledger_account_description = null, $classification_id = null, $classification_description = null, $custom_field_values = null, $body = null)
    {
        list($response) = $this->purchaseOrderLinePOSTRequestPurchaseOrderIDLinesPostWithHttpInfo($accept, $purchase_order_id, $jiwa_stateful, $item_no, $inventory_id, $is_physical, $part_no, $description, $quantity_decimal_places, $make_supplier_the_new_default, $purchase_order_line_type, $quantity, $inc_price, $tax_amount, $line_total, $line_total_ex_tax, $fx_total, $currency_rate_used, $fx_decimal_places, $home_currency_decimal_places, $delivery_date, $delivered, $history_text_comment, $job_costing_stage_rec_id, $job_costing_stage_no, $job_costing_stage_name, $job_costing_stage_classification_rec_id, $job_costing_stage_classification_description, $job_costing_cost_centre_rec_id, $job_costing_cost_centre_no, $job_costing_cost_centre_name, $job_costing_job_rec_id, $job_costing_job_no, $job_costing_job_description, $in_on_back_order_orders_on_back_id, $in_on_back_order_quantity, $in_on_back_order_est_bo_value, $in_on_back_order_last_saved_date_time, $invoice_line_id, $user_defined_float1, $user_defined_float2, $user_defined_float3, $user_defined_date1, $user_defined_date2, $user_defined_date3, $user_defined_string1, $user_defined_string2, $user_defined_string3, $purchasing_classification_rec_id, $purchasing_classification_description, $purchasing_classification_ledger_account_rec_id, $purchasing_classification_ledger_account_account_no, $purchasing_classification_ledger_account_description, $service_manager_task_rec_id, $service_manager_task_no, $service_manager_task_description, $service_manager_job_rec_id, $service_manager_job_no, $service_manager_job_description, $in_creditor_rec_id, $supplier_part_no, $in_supplier_warehouse_rec_id, $order_units, $delivery_days, $fx_cost, $cost, $cost_original, $units, $tax_rate_rec_id, $tax_rate_description, $tax_rate, $tax_rate_bas_code, $inventory_expected_liability_ledger_account_rec_id, $inventory_expected_liability_ledger_account_account_no, $inventory_expected_liability_ledger_account_description, $inventory_expected_asset_ledger_account_rec_id, $inventory_expected_asset_ledger_account_account_no, $inventory_expected_asset_ledger_account_description, $classification_id, $classification_description, $custom_field_values, $body);
        return $response;
    }

    /**
     * Operation purchaseOrderLinePOSTRequestPurchaseOrderIDLinesPostWithHttpInfo
     *
     * Appends a line to a purchase order.
     *
     * @param  string $accept Accept Header (required)
     * @param  string $purchase_order_id (required)
     * @param  bool $jiwa_stateful Stateful indicator (optional)
     * @param  int $item_no (optional)
     * @param  string $inventory_id (optional)
     * @param  bool $is_physical (optional)
     * @param  string $part_no (optional)
     * @param  string $description (optional)
     * @param  int $quantity_decimal_places (optional)
     * @param  bool $make_supplier_the_new_default (optional)
     * @param  string $purchase_order_line_type (optional)
     * @param  double $quantity (optional)
     * @param  double $inc_price (optional)
     * @param  double $tax_amount (optional)
     * @param  double $line_total (optional)
     * @param  double $line_total_ex_tax (optional)
     * @param  double $fx_total (optional)
     * @param  double $currency_rate_used (optional)
     * @param  int $fx_decimal_places (optional)
     * @param  int $home_currency_decimal_places (optional)
     * @param  \DateTime $delivery_date (optional)
     * @param  double $delivered (optional)
     * @param  string $history_text_comment (optional)
     * @param  string $job_costing_stage_rec_id (optional)
     * @param  string $job_costing_stage_no (optional)
     * @param  string $job_costing_stage_name (optional)
     * @param  string $job_costing_stage_classification_rec_id (optional)
     * @param  string $job_costing_stage_classification_description (optional)
     * @param  string $job_costing_cost_centre_rec_id (optional)
     * @param  string $job_costing_cost_centre_no (optional)
     * @param  string $job_costing_cost_centre_name (optional)
     * @param  string $job_costing_job_rec_id (optional)
     * @param  string $job_costing_job_no (optional)
     * @param  string $job_costing_job_description (optional)
     * @param  string $in_on_back_order_orders_on_back_id (optional)
     * @param  double $in_on_back_order_quantity (optional)
     * @param  double $in_on_back_order_est_bo_value (optional)
     * @param  \DateTime $in_on_back_order_last_saved_date_time (optional)
     * @param  string $invoice_line_id (optional)
     * @param  double $user_defined_float1 (optional)
     * @param  double $user_defined_float2 (optional)
     * @param  double $user_defined_float3 (optional)
     * @param  \DateTime $user_defined_date1 (optional)
     * @param  \DateTime $user_defined_date2 (optional)
     * @param  \DateTime $user_defined_date3 (optional)
     * @param  string $user_defined_string1 (optional)
     * @param  string $user_defined_string2 (optional)
     * @param  string $user_defined_string3 (optional)
     * @param  string $purchasing_classification_rec_id (optional)
     * @param  string $purchasing_classification_description (optional)
     * @param  string $purchasing_classification_ledger_account_rec_id (optional)
     * @param  string $purchasing_classification_ledger_account_account_no (optional)
     * @param  string $purchasing_classification_ledger_account_description (optional)
     * @param  string $service_manager_task_rec_id (optional)
     * @param  int $service_manager_task_no (optional)
     * @param  string $service_manager_task_description (optional)
     * @param  string $service_manager_job_rec_id (optional)
     * @param  string $service_manager_job_no (optional)
     * @param  string $service_manager_job_description (optional)
     * @param  string $in_creditor_rec_id (optional)
     * @param  string $supplier_part_no (optional)
     * @param  string $in_supplier_warehouse_rec_id (optional)
     * @param  double $order_units (optional)
     * @param  int $delivery_days (optional)
     * @param  double $fx_cost (optional)
     * @param  double $cost (optional)
     * @param  double $cost_original (optional)
     * @param  string $units (optional)
     * @param  string $tax_rate_rec_id (optional)
     * @param  string $tax_rate_description (optional)
     * @param  double $tax_rate (optional)
     * @param  int $tax_rate_bas_code (optional)
     * @param  string $inventory_expected_liability_ledger_account_rec_id (optional)
     * @param  string $inventory_expected_liability_ledger_account_account_no (optional)
     * @param  string $inventory_expected_liability_ledger_account_description (optional)
     * @param  string $inventory_expected_asset_ledger_account_rec_id (optional)
     * @param  string $inventory_expected_asset_ledger_account_account_no (optional)
     * @param  string $inventory_expected_asset_ledger_account_description (optional)
     * @param  string $classification_id (optional)
     * @param  string $classification_description (optional)
     * @param  string $custom_field_values (optional)
     * @param  \Jiwa\JiwaModel\PurchaseOrderLinePOSTRequest $body (optional)
     *
     * @throws \Jiwa\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Jiwa\JiwaModel\PurchaseOrderLine, HTTP status code, HTTP response headers (array of strings)
     */
    public function purchaseOrderLinePOSTRequestPurchaseOrderIDLinesPostWithHttpInfo($accept, $purchase_order_id, $jiwa_stateful = null, $item_no = null, $inventory_id = null, $is_physical = null, $part_no = null, $description = null, $quantity_decimal_places = null, $make_supplier_the_new_default = null, $purchase_order_line_type = null, $quantity = null, $inc_price = null, $tax_amount = null, $line_total = null, $line_total_ex_tax = null, $fx_total = null, $currency_rate_used = null, $fx_decimal_places = null, $home_currency_decimal_places = null, $delivery_date = null, $delivered = null, $history_text_comment = null, $job_costing_stage_rec_id = null, $job_costing_stage_no = null, $job_costing_stage_name = null, $job_costing_stage_classification_rec_id = null, $job_costing_stage_classification_description = null, $job_costing_cost_centre_rec_id = null, $job_costing_cost_centre_no = null, $job_costing_cost_centre_name = null, $job_costing_job_rec_id = null, $job_costing_job_no = null, $job_costing_job_description = null, $in_on_back_order_orders_on_back_id = null, $in_on_back_order_quantity = null, $in_on_back_order_est_bo_value = null, $in_on_back_order_last_saved_date_time = null, $invoice_line_id = null, $user_defined_float1 = null, $user_defined_float2 = null, $user_defined_float3 = null, $user_defined_date1 = null, $user_defined_date2 = null, $user_defined_date3 = null, $user_defined_string1 = null, $user_defined_string2 = null, $user_defined_string3 = null, $purchasing_classification_rec_id = null, $purchasing_classification_description = null, $purchasing_classification_ledger_account_rec_id = null, $purchasing_classification_ledger_account_account_no = null, $purchasing_classification_ledger_account_description = null, $service_manager_task_rec_id = null, $service_manager_task_no = null, $service_manager_task_description = null, $service_manager_job_rec_id = null, $service_manager_job_no = null, $service_manager_job_description = null, $in_creditor_rec_id = null, $supplier_part_no = null, $in_supplier_warehouse_rec_id = null, $order_units = null, $delivery_days = null, $fx_cost = null, $cost = null, $cost_original = null, $units = null, $tax_rate_rec_id = null, $tax_rate_description = null, $tax_rate = null, $tax_rate_bas_code = null, $inventory_expected_liability_ledger_account_rec_id = null, $inventory_expected_liability_ledger_account_account_no = null, $inventory_expected_liability_ledger_account_description = null, $inventory_expected_asset_ledger_account_rec_id = null, $inventory_expected_asset_ledger_account_account_no = null, $inventory_expected_asset_ledger_account_description = null, $classification_id = null, $classification_description = null, $custom_field_values = null, $body = null)
    {
        $returnType = '\Jiwa\JiwaModel\PurchaseOrderLine';
        $request = $this->purchaseOrderLinePOSTRequestPurchaseOrderIDLinesPostRequest($accept, $purchase_order_id, $jiwa_stateful, $item_no, $inventory_id, $is_physical, $part_no, $description, $quantity_decimal_places, $make_supplier_the_new_default, $purchase_order_line_type, $quantity, $inc_price, $tax_amount, $line_total, $line_total_ex_tax, $fx_total, $currency_rate_used, $fx_decimal_places, $home_currency_decimal_places, $delivery_date, $delivered, $history_text_comment, $job_costing_stage_rec_id, $job_costing_stage_no, $job_costing_stage_name, $job_costing_stage_classification_rec_id, $job_costing_stage_classification_description, $job_costing_cost_centre_rec_id, $job_costing_cost_centre_no, $job_costing_cost_centre_name, $job_costing_job_rec_id, $job_costing_job_no, $job_costing_job_description, $in_on_back_order_orders_on_back_id, $in_on_back_order_quantity, $in_on_back_order_est_bo_value, $in_on_back_order_last_saved_date_time, $invoice_line_id, $user_defined_float1, $user_defined_float2, $user_defined_float3, $user_defined_date1, $user_defined_date2, $user_defined_date3, $user_defined_string1, $user_defined_string2, $user_defined_string3, $purchasing_classification_rec_id, $purchasing_classification_description, $purchasing_classification_ledger_account_rec_id, $purchasing_classification_ledger_account_account_no, $purchasing_classification_ledger_account_description, $service_manager_task_rec_id, $service_manager_task_no, $service_manager_task_description, $service_manager_job_rec_id, $service_manager_job_no, $service_manager_job_description, $in_creditor_rec_id, $supplier_part_no, $in_supplier_warehouse_rec_id, $order_units, $delivery_days, $fx_cost, $cost, $cost_original, $units, $tax_rate_rec_id, $tax_rate_description, $tax_rate, $tax_rate_bas_code, $inventory_expected_liability_ledger_account_rec_id, $inventory_expected_liability_ledger_account_account_no, $inventory_expected_liability_ledger_account_description, $inventory_expected_asset_ledger_account_rec_id, $inventory_expected_asset_ledger_account_account_no, $inventory_expected_asset_ledger_account_description, $classification_id, $classification_description, $custom_field_values, $body);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Jiwa\JiwaModel\PurchaseOrderLine',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 201:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Jiwa\JiwaModel\PurchaseOrderLine',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 403:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Jiwa\JiwaModel\PurchaseOrderLine',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 404:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Jiwa\JiwaModel\PurchaseOrderLine',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 401:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Jiwa\JiwaModel\PurchaseOrderLine',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation purchaseOrderLinePOSTRequestPurchaseOrderIDLinesPostAsync
     *
     * Appends a line to a purchase order.
     *
     * @param  string $accept Accept Header (required)
     * @param  string $purchase_order_id (required)
     * @param  bool $jiwa_stateful Stateful indicator (optional)
     * @param  int $item_no (optional)
     * @param  string $inventory_id (optional)
     * @param  bool $is_physical (optional)
     * @param  string $part_no (optional)
     * @param  string $description (optional)
     * @param  int $quantity_decimal_places (optional)
     * @param  bool $make_supplier_the_new_default (optional)
     * @param  string $purchase_order_line_type (optional)
     * @param  double $quantity (optional)
     * @param  double $inc_price (optional)
     * @param  double $tax_amount (optional)
     * @param  double $line_total (optional)
     * @param  double $line_total_ex_tax (optional)
     * @param  double $fx_total (optional)
     * @param  double $currency_rate_used (optional)
     * @param  int $fx_decimal_places (optional)
     * @param  int $home_currency_decimal_places (optional)
     * @param  \DateTime $delivery_date (optional)
     * @param  double $delivered (optional)
     * @param  string $history_text_comment (optional)
     * @param  string $job_costing_stage_rec_id (optional)
     * @param  string $job_costing_stage_no (optional)
     * @param  string $job_costing_stage_name (optional)
     * @param  string $job_costing_stage_classification_rec_id (optional)
     * @param  string $job_costing_stage_classification_description (optional)
     * @param  string $job_costing_cost_centre_rec_id (optional)
     * @param  string $job_costing_cost_centre_no (optional)
     * @param  string $job_costing_cost_centre_name (optional)
     * @param  string $job_costing_job_rec_id (optional)
     * @param  string $job_costing_job_no (optional)
     * @param  string $job_costing_job_description (optional)
     * @param  string $in_on_back_order_orders_on_back_id (optional)
     * @param  double $in_on_back_order_quantity (optional)
     * @param  double $in_on_back_order_est_bo_value (optional)
     * @param  \DateTime $in_on_back_order_last_saved_date_time (optional)
     * @param  string $invoice_line_id (optional)
     * @param  double $user_defined_float1 (optional)
     * @param  double $user_defined_float2 (optional)
     * @param  double $user_defined_float3 (optional)
     * @param  \DateTime $user_defined_date1 (optional)
     * @param  \DateTime $user_defined_date2 (optional)
     * @param  \DateTime $user_defined_date3 (optional)
     * @param  string $user_defined_string1 (optional)
     * @param  string $user_defined_string2 (optional)
     * @param  string $user_defined_string3 (optional)
     * @param  string $purchasing_classification_rec_id (optional)
     * @param  string $purchasing_classification_description (optional)
     * @param  string $purchasing_classification_ledger_account_rec_id (optional)
     * @param  string $purchasing_classification_ledger_account_account_no (optional)
     * @param  string $purchasing_classification_ledger_account_description (optional)
     * @param  string $service_manager_task_rec_id (optional)
     * @param  int $service_manager_task_no (optional)
     * @param  string $service_manager_task_description (optional)
     * @param  string $service_manager_job_rec_id (optional)
     * @param  string $service_manager_job_no (optional)
     * @param  string $service_manager_job_description (optional)
     * @param  string $in_creditor_rec_id (optional)
     * @param  string $supplier_part_no (optional)
     * @param  string $in_supplier_warehouse_rec_id (optional)
     * @param  double $order_units (optional)
     * @param  int $delivery_days (optional)
     * @param  double $fx_cost (optional)
     * @param  double $cost (optional)
     * @param  double $cost_original (optional)
     * @param  string $units (optional)
     * @param  string $tax_rate_rec_id (optional)
     * @param  string $tax_rate_description (optional)
     * @param  double $tax_rate (optional)
     * @param  int $tax_rate_bas_code (optional)
     * @param  string $inventory_expected_liability_ledger_account_rec_id (optional)
     * @param  string $inventory_expected_liability_ledger_account_account_no (optional)
     * @param  string $inventory_expected_liability_ledger_account_description (optional)
     * @param  string $inventory_expected_asset_ledger_account_rec_id (optional)
     * @param  string $inventory_expected_asset_ledger_account_account_no (optional)
     * @param  string $inventory_expected_asset_ledger_account_description (optional)
     * @param  string $classification_id (optional)
     * @param  string $classification_description (optional)
     * @param  string $custom_field_values (optional)
     * @param  \Jiwa\JiwaModel\PurchaseOrderLinePOSTRequest $body (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function purchaseOrderLinePOSTRequestPurchaseOrderIDLinesPostAsync($accept, $purchase_order_id, $jiwa_stateful = null, $item_no = null, $inventory_id = null, $is_physical = null, $part_no = null, $description = null, $quantity_decimal_places = null, $make_supplier_the_new_default = null, $purchase_order_line_type = null, $quantity = null, $inc_price = null, $tax_amount = null, $line_total = null, $line_total_ex_tax = null, $fx_total = null, $currency_rate_used = null, $fx_decimal_places = null, $home_currency_decimal_places = null, $delivery_date = null, $delivered = null, $history_text_comment = null, $job_costing_stage_rec_id = null, $job_costing_stage_no = null, $job_costing_stage_name = null, $job_costing_stage_classification_rec_id = null, $job_costing_stage_classification_description = null, $job_costing_cost_centre_rec_id = null, $job_costing_cost_centre_no = null, $job_costing_cost_centre_name = null, $job_costing_job_rec_id = null, $job_costing_job_no = null, $job_costing_job_description = null, $in_on_back_order_orders_on_back_id = null, $in_on_back_order_quantity = null, $in_on_back_order_est_bo_value = null, $in_on_back_order_last_saved_date_time = null, $invoice_line_id = null, $user_defined_float1 = null, $user_defined_float2 = null, $user_defined_float3 = null, $user_defined_date1 = null, $user_defined_date2 = null, $user_defined_date3 = null, $user_defined_string1 = null, $user_defined_string2 = null, $user_defined_string3 = null, $purchasing_classification_rec_id = null, $purchasing_classification_description = null, $purchasing_classification_ledger_account_rec_id = null, $purchasing_classification_ledger_account_account_no = null, $purchasing_classification_ledger_account_description = null, $service_manager_task_rec_id = null, $service_manager_task_no = null, $service_manager_task_description = null, $service_manager_job_rec_id = null, $service_manager_job_no = null, $service_manager_job_description = null, $in_creditor_rec_id = null, $supplier_part_no = null, $in_supplier_warehouse_rec_id = null, $order_units = null, $delivery_days = null, $fx_cost = null, $cost = null, $cost_original = null, $units = null, $tax_rate_rec_id = null, $tax_rate_description = null, $tax_rate = null, $tax_rate_bas_code = null, $inventory_expected_liability_ledger_account_rec_id = null, $inventory_expected_liability_ledger_account_account_no = null, $inventory_expected_liability_ledger_account_description = null, $inventory_expected_asset_ledger_account_rec_id = null, $inventory_expected_asset_ledger_account_account_no = null, $inventory_expected_asset_ledger_account_description = null, $classification_id = null, $classification_description = null, $custom_field_values = null, $body = null)
    {
        return $this->purchaseOrderLinePOSTRequestPurchaseOrderIDLinesPostAsyncWithHttpInfo($accept, $purchase_order_id, $jiwa_stateful, $item_no, $inventory_id, $is_physical, $part_no, $description, $quantity_decimal_places, $make_supplier_the_new_default, $purchase_order_line_type, $quantity, $inc_price, $tax_amount, $line_total, $line_total_ex_tax, $fx_total, $currency_rate_used, $fx_decimal_places, $home_currency_decimal_places, $delivery_date, $delivered, $history_text_comment, $job_costing_stage_rec_id, $job_costing_stage_no, $job_costing_stage_name, $job_costing_stage_classification_rec_id, $job_costing_stage_classification_description, $job_costing_cost_centre_rec_id, $job_costing_cost_centre_no, $job_costing_cost_centre_name, $job_costing_job_rec_id, $job_costing_job_no, $job_costing_job_description, $in_on_back_order_orders_on_back_id, $in_on_back_order_quantity, $in_on_back_order_est_bo_value, $in_on_back_order_last_saved_date_time, $invoice_line_id, $user_defined_float1, $user_defined_float2, $user_defined_float3, $user_defined_date1, $user_defined_date2, $user_defined_date3, $user_defined_string1, $user_defined_string2, $user_defined_string3, $purchasing_classification_rec_id, $purchasing_classification_description, $purchasing_classification_ledger_account_rec_id, $purchasing_classification_ledger_account_account_no, $purchasing_classification_ledger_account_description, $service_manager_task_rec_id, $service_manager_task_no, $service_manager_task_description, $service_manager_job_rec_id, $service_manager_job_no, $service_manager_job_description, $in_creditor_rec_id, $supplier_part_no, $in_supplier_warehouse_rec_id, $order_units, $delivery_days, $fx_cost, $cost, $cost_original, $units, $tax_rate_rec_id, $tax_rate_description, $tax_rate, $tax_rate_bas_code, $inventory_expected_liability_ledger_account_rec_id, $inventory_expected_liability_ledger_account_account_no, $inventory_expected_liability_ledger_account_description, $inventory_expected_asset_ledger_account_rec_id, $inventory_expected_asset_ledger_account_account_no, $inventory_expected_asset_ledger_account_description, $classification_id, $classification_description, $custom_field_values, $body)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation purchaseOrderLinePOSTRequestPurchaseOrderIDLinesPostAsyncWithHttpInfo
     *
     * Appends a line to a purchase order.
     *
     * @param  string $accept Accept Header (required)
     * @param  string $purchase_order_id (required)
     * @param  bool $jiwa_stateful Stateful indicator (optional)
     * @param  int $item_no (optional)
     * @param  string $inventory_id (optional)
     * @param  bool $is_physical (optional)
     * @param  string $part_no (optional)
     * @param  string $description (optional)
     * @param  int $quantity_decimal_places (optional)
     * @param  bool $make_supplier_the_new_default (optional)
     * @param  string $purchase_order_line_type (optional)
     * @param  double $quantity (optional)
     * @param  double $inc_price (optional)
     * @param  double $tax_amount (optional)
     * @param  double $line_total (optional)
     * @param  double $line_total_ex_tax (optional)
     * @param  double $fx_total (optional)
     * @param  double $currency_rate_used (optional)
     * @param  int $fx_decimal_places (optional)
     * @param  int $home_currency_decimal_places (optional)
     * @param  \DateTime $delivery_date (optional)
     * @param  double $delivered (optional)
     * @param  string $history_text_comment (optional)
     * @param  string $job_costing_stage_rec_id (optional)
     * @param  string $job_costing_stage_no (optional)
     * @param  string $job_costing_stage_name (optional)
     * @param  string $job_costing_stage_classification_rec_id (optional)
     * @param  string $job_costing_stage_classification_description (optional)
     * @param  string $job_costing_cost_centre_rec_id (optional)
     * @param  string $job_costing_cost_centre_no (optional)
     * @param  string $job_costing_cost_centre_name (optional)
     * @param  string $job_costing_job_rec_id (optional)
     * @param  string $job_costing_job_no (optional)
     * @param  string $job_costing_job_description (optional)
     * @param  string $in_on_back_order_orders_on_back_id (optional)
     * @param  double $in_on_back_order_quantity (optional)
     * @param  double $in_on_back_order_est_bo_value (optional)
     * @param  \DateTime $in_on_back_order_last_saved_date_time (optional)
     * @param  string $invoice_line_id (optional)
     * @param  double $user_defined_float1 (optional)
     * @param  double $user_defined_float2 (optional)
     * @param  double $user_defined_float3 (optional)
     * @param  \DateTime $user_defined_date1 (optional)
     * @param  \DateTime $user_defined_date2 (optional)
     * @param  \DateTime $user_defined_date3 (optional)
     * @param  string $user_defined_string1 (optional)
     * @param  string $user_defined_string2 (optional)
     * @param  string $user_defined_string3 (optional)
     * @param  string $purchasing_classification_rec_id (optional)
     * @param  string $purchasing_classification_description (optional)
     * @param  string $purchasing_classification_ledger_account_rec_id (optional)
     * @param  string $purchasing_classification_ledger_account_account_no (optional)
     * @param  string $purchasing_classification_ledger_account_description (optional)
     * @param  string $service_manager_task_rec_id (optional)
     * @param  int $service_manager_task_no (optional)
     * @param  string $service_manager_task_description (optional)
     * @param  string $service_manager_job_rec_id (optional)
     * @param  string $service_manager_job_no (optional)
     * @param  string $service_manager_job_description (optional)
     * @param  string $in_creditor_rec_id (optional)
     * @param  string $supplier_part_no (optional)
     * @param  string $in_supplier_warehouse_rec_id (optional)
     * @param  double $order_units (optional)
     * @param  int $delivery_days (optional)
     * @param  double $fx_cost (optional)
     * @param  double $cost (optional)
     * @param  double $cost_original (optional)
     * @param  string $units (optional)
     * @param  string $tax_rate_rec_id (optional)
     * @param  string $tax_rate_description (optional)
     * @param  double $tax_rate (optional)
     * @param  int $tax_rate_bas_code (optional)
     * @param  string $inventory_expected_liability_ledger_account_rec_id (optional)
     * @param  string $inventory_expected_liability_ledger_account_account_no (optional)
     * @param  string $inventory_expected_liability_ledger_account_description (optional)
     * @param  string $inventory_expected_asset_ledger_account_rec_id (optional)
     * @param  string $inventory_expected_asset_ledger_account_account_no (optional)
     * @param  string $inventory_expected_asset_ledger_account_description (optional)
     * @param  string $classification_id (optional)
     * @param  string $classification_description (optional)
     * @param  string $custom_field_values (optional)
     * @param  \Jiwa\JiwaModel\PurchaseOrderLinePOSTRequest $body (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function purchaseOrderLinePOSTRequestPurchaseOrderIDLinesPostAsyncWithHttpInfo($accept, $purchase_order_id, $jiwa_stateful = null, $item_no = null, $inventory_id = null, $is_physical = null, $part_no = null, $description = null, $quantity_decimal_places = null, $make_supplier_the_new_default = null, $purchase_order_line_type = null, $quantity = null, $inc_price = null, $tax_amount = null, $line_total = null, $line_total_ex_tax = null, $fx_total = null, $currency_rate_used = null, $fx_decimal_places = null, $home_currency_decimal_places = null, $delivery_date = null, $delivered = null, $history_text_comment = null, $job_costing_stage_rec_id = null, $job_costing_stage_no = null, $job_costing_stage_name = null, $job_costing_stage_classification_rec_id = null, $job_costing_stage_classification_description = null, $job_costing_cost_centre_rec_id = null, $job_costing_cost_centre_no = null, $job_costing_cost_centre_name = null, $job_costing_job_rec_id = null, $job_costing_job_no = null, $job_costing_job_description = null, $in_on_back_order_orders_on_back_id = null, $in_on_back_order_quantity = null, $in_on_back_order_est_bo_value = null, $in_on_back_order_last_saved_date_time = null, $invoice_line_id = null, $user_defined_float1 = null, $user_defined_float2 = null, $user_defined_float3 = null, $user_defined_date1 = null, $user_defined_date2 = null, $user_defined_date3 = null, $user_defined_string1 = null, $user_defined_string2 = null, $user_defined_string3 = null, $purchasing_classification_rec_id = null, $purchasing_classification_description = null, $purchasing_classification_ledger_account_rec_id = null, $purchasing_classification_ledger_account_account_no = null, $purchasing_classification_ledger_account_description = null, $service_manager_task_rec_id = null, $service_manager_task_no = null, $service_manager_task_description = null, $service_manager_job_rec_id = null, $service_manager_job_no = null, $service_manager_job_description = null, $in_creditor_rec_id = null, $supplier_part_no = null, $in_supplier_warehouse_rec_id = null, $order_units = null, $delivery_days = null, $fx_cost = null, $cost = null, $cost_original = null, $units = null, $tax_rate_rec_id = null, $tax_rate_description = null, $tax_rate = null, $tax_rate_bas_code = null, $inventory_expected_liability_ledger_account_rec_id = null, $inventory_expected_liability_ledger_account_account_no = null, $inventory_expected_liability_ledger_account_description = null, $inventory_expected_asset_ledger_account_rec_id = null, $inventory_expected_asset_ledger_account_account_no = null, $inventory_expected_asset_ledger_account_description = null, $classification_id = null, $classification_description = null, $custom_field_values = null, $body = null)
    {
        $returnType = '\Jiwa\JiwaModel\PurchaseOrderLine';
        $request = $this->purchaseOrderLinePOSTRequestPurchaseOrderIDLinesPostRequest($accept, $purchase_order_id, $jiwa_stateful, $item_no, $inventory_id, $is_physical, $part_no, $description, $quantity_decimal_places, $make_supplier_the_new_default, $purchase_order_line_type, $quantity, $inc_price, $tax_amount, $line_total, $line_total_ex_tax, $fx_total, $currency_rate_used, $fx_decimal_places, $home_currency_decimal_places, $delivery_date, $delivered, $history_text_comment, $job_costing_stage_rec_id, $job_costing_stage_no, $job_costing_stage_name, $job_costing_stage_classification_rec_id, $job_costing_stage_classification_description, $job_costing_cost_centre_rec_id, $job_costing_cost_centre_no, $job_costing_cost_centre_name, $job_costing_job_rec_id, $job_costing_job_no, $job_costing_job_description, $in_on_back_order_orders_on_back_id, $in_on_back_order_quantity, $in_on_back_order_est_bo_value, $in_on_back_order_last_saved_date_time, $invoice_line_id, $user_defined_float1, $user_defined_float2, $user_defined_float3, $user_defined_date1, $user_defined_date2, $user_defined_date3, $user_defined_string1, $user_defined_string2, $user_defined_string3, $purchasing_classification_rec_id, $purchasing_classification_description, $purchasing_classification_ledger_account_rec_id, $purchasing_classification_ledger_account_account_no, $purchasing_classification_ledger_account_description, $service_manager_task_rec_id, $service_manager_task_no, $service_manager_task_description, $service_manager_job_rec_id, $service_manager_job_no, $service_manager_job_description, $in_creditor_rec_id, $supplier_part_no, $in_supplier_warehouse_rec_id, $order_units, $delivery_days, $fx_cost, $cost, $cost_original, $units, $tax_rate_rec_id, $tax_rate_description, $tax_rate, $tax_rate_bas_code, $inventory_expected_liability_ledger_account_rec_id, $inventory_expected_liability_ledger_account_account_no, $inventory_expected_liability_ledger_account_description, $inventory_expected_asset_ledger_account_rec_id, $inventory_expected_asset_ledger_account_account_no, $inventory_expected_asset_ledger_account_description, $classification_id, $classification_description, $custom_field_values, $body);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'purchaseOrderLinePOSTRequestPurchaseOrderIDLinesPost'
     *
     * @param  string $accept Accept Header (required)
     * @param  string $purchase_order_id (required)
     * @param  bool $jiwa_stateful Stateful indicator (optional)
     * @param  int $item_no (optional)
     * @param  string $inventory_id (optional)
     * @param  bool $is_physical (optional)
     * @param  string $part_no (optional)
     * @param  string $description (optional)
     * @param  int $quantity_decimal_places (optional)
     * @param  bool $make_supplier_the_new_default (optional)
     * @param  string $purchase_order_line_type (optional)
     * @param  double $quantity (optional)
     * @param  double $inc_price (optional)
     * @param  double $tax_amount (optional)
     * @param  double $line_total (optional)
     * @param  double $line_total_ex_tax (optional)
     * @param  double $fx_total (optional)
     * @param  double $currency_rate_used (optional)
     * @param  int $fx_decimal_places (optional)
     * @param  int $home_currency_decimal_places (optional)
     * @param  \DateTime $delivery_date (optional)
     * @param  double $delivered (optional)
     * @param  string $history_text_comment (optional)
     * @param  string $job_costing_stage_rec_id (optional)
     * @param  string $job_costing_stage_no (optional)
     * @param  string $job_costing_stage_name (optional)
     * @param  string $job_costing_stage_classification_rec_id (optional)
     * @param  string $job_costing_stage_classification_description (optional)
     * @param  string $job_costing_cost_centre_rec_id (optional)
     * @param  string $job_costing_cost_centre_no (optional)
     * @param  string $job_costing_cost_centre_name (optional)
     * @param  string $job_costing_job_rec_id (optional)
     * @param  string $job_costing_job_no (optional)
     * @param  string $job_costing_job_description (optional)
     * @param  string $in_on_back_order_orders_on_back_id (optional)
     * @param  double $in_on_back_order_quantity (optional)
     * @param  double $in_on_back_order_est_bo_value (optional)
     * @param  \DateTime $in_on_back_order_last_saved_date_time (optional)
     * @param  string $invoice_line_id (optional)
     * @param  double $user_defined_float1 (optional)
     * @param  double $user_defined_float2 (optional)
     * @param  double $user_defined_float3 (optional)
     * @param  \DateTime $user_defined_date1 (optional)
     * @param  \DateTime $user_defined_date2 (optional)
     * @param  \DateTime $user_defined_date3 (optional)
     * @param  string $user_defined_string1 (optional)
     * @param  string $user_defined_string2 (optional)
     * @param  string $user_defined_string3 (optional)
     * @param  string $purchasing_classification_rec_id (optional)
     * @param  string $purchasing_classification_description (optional)
     * @param  string $purchasing_classification_ledger_account_rec_id (optional)
     * @param  string $purchasing_classification_ledger_account_account_no (optional)
     * @param  string $purchasing_classification_ledger_account_description (optional)
     * @param  string $service_manager_task_rec_id (optional)
     * @param  int $service_manager_task_no (optional)
     * @param  string $service_manager_task_description (optional)
     * @param  string $service_manager_job_rec_id (optional)
     * @param  string $service_manager_job_no (optional)
     * @param  string $service_manager_job_description (optional)
     * @param  string $in_creditor_rec_id (optional)
     * @param  string $supplier_part_no (optional)
     * @param  string $in_supplier_warehouse_rec_id (optional)
     * @param  double $order_units (optional)
     * @param  int $delivery_days (optional)
     * @param  double $fx_cost (optional)
     * @param  double $cost (optional)
     * @param  double $cost_original (optional)
     * @param  string $units (optional)
     * @param  string $tax_rate_rec_id (optional)
     * @param  string $tax_rate_description (optional)
     * @param  double $tax_rate (optional)
     * @param  int $tax_rate_bas_code (optional)
     * @param  string $inventory_expected_liability_ledger_account_rec_id (optional)
     * @param  string $inventory_expected_liability_ledger_account_account_no (optional)
     * @param  string $inventory_expected_liability_ledger_account_description (optional)
     * @param  string $inventory_expected_asset_ledger_account_rec_id (optional)
     * @param  string $inventory_expected_asset_ledger_account_account_no (optional)
     * @param  string $inventory_expected_asset_ledger_account_description (optional)
     * @param  string $classification_id (optional)
     * @param  string $classification_description (optional)
     * @param  string $custom_field_values (optional)
     * @param  \Jiwa\JiwaModel\PurchaseOrderLinePOSTRequest $body (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function purchaseOrderLinePOSTRequestPurchaseOrderIDLinesPostRequest($accept, $purchase_order_id, $jiwa_stateful = null, $item_no = null, $inventory_id = null, $is_physical = null, $part_no = null, $description = null, $quantity_decimal_places = null, $make_supplier_the_new_default = null, $purchase_order_line_type = null, $quantity = null, $inc_price = null, $tax_amount = null, $line_total = null, $line_total_ex_tax = null, $fx_total = null, $currency_rate_used = null, $fx_decimal_places = null, $home_currency_decimal_places = null, $delivery_date = null, $delivered = null, $history_text_comment = null, $job_costing_stage_rec_id = null, $job_costing_stage_no = null, $job_costing_stage_name = null, $job_costing_stage_classification_rec_id = null, $job_costing_stage_classification_description = null, $job_costing_cost_centre_rec_id = null, $job_costing_cost_centre_no = null, $job_costing_cost_centre_name = null, $job_costing_job_rec_id = null, $job_costing_job_no = null, $job_costing_job_description = null, $in_on_back_order_orders_on_back_id = null, $in_on_back_order_quantity = null, $in_on_back_order_est_bo_value = null, $in_on_back_order_last_saved_date_time = null, $invoice_line_id = null, $user_defined_float1 = null, $user_defined_float2 = null, $user_defined_float3 = null, $user_defined_date1 = null, $user_defined_date2 = null, $user_defined_date3 = null, $user_defined_string1 = null, $user_defined_string2 = null, $user_defined_string3 = null, $purchasing_classification_rec_id = null, $purchasing_classification_description = null, $purchasing_classification_ledger_account_rec_id = null, $purchasing_classification_ledger_account_account_no = null, $purchasing_classification_ledger_account_description = null, $service_manager_task_rec_id = null, $service_manager_task_no = null, $service_manager_task_description = null, $service_manager_job_rec_id = null, $service_manager_job_no = null, $service_manager_job_description = null, $in_creditor_rec_id = null, $supplier_part_no = null, $in_supplier_warehouse_rec_id = null, $order_units = null, $delivery_days = null, $fx_cost = null, $cost = null, $cost_original = null, $units = null, $tax_rate_rec_id = null, $tax_rate_description = null, $tax_rate = null, $tax_rate_bas_code = null, $inventory_expected_liability_ledger_account_rec_id = null, $inventory_expected_liability_ledger_account_account_no = null, $inventory_expected_liability_ledger_account_description = null, $inventory_expected_asset_ledger_account_rec_id = null, $inventory_expected_asset_ledger_account_account_no = null, $inventory_expected_asset_ledger_account_description = null, $classification_id = null, $classification_description = null, $custom_field_values = null, $body = null)
    {
        // verify the required parameter 'accept' is set
        if ($accept === null || (is_array($accept) && count($accept) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $accept when calling purchaseOrderLinePOSTRequestPurchaseOrderIDLinesPost'
            );
        }
        // verify the required parameter 'purchase_order_id' is set
        if ($purchase_order_id === null || (is_array($purchase_order_id) && count($purchase_order_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $purchase_order_id when calling purchaseOrderLinePOSTRequestPurchaseOrderIDLinesPost'
            );
        }

        $resourcePath = '/PurchaseOrders/{PurchaseOrderID}/Lines';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        if ($item_no !== null) {
            $queryParams['ItemNo'] = ObjectSerializer::toQueryValue($item_no);
        }
        // query params
        if ($inventory_id !== null) {
            $queryParams['InventoryID'] = ObjectSerializer::toQueryValue($inventory_id);
        }
        // query params
        if ($is_physical !== null) {
            $queryParams['IsPhysical'] = ObjectSerializer::toQueryValue($is_physical);
        }
        // query params
        if ($part_no !== null) {
            $queryParams['PartNo'] = ObjectSerializer::toQueryValue($part_no);
        }
        // query params
        if ($description !== null) {
            $queryParams['Description'] = ObjectSerializer::toQueryValue($description);
        }
        // query params
        if ($quantity_decimal_places !== null) {
            $queryParams['QuantityDecimalPlaces'] = ObjectSerializer::toQueryValue($quantity_decimal_places);
        }
        // query params
        if ($make_supplier_the_new_default !== null) {
            $queryParams['MakeSupplierTheNewDefault'] = ObjectSerializer::toQueryValue($make_supplier_the_new_default);
        }
        // query params
        if ($purchase_order_line_type !== null) {
            $queryParams['PurchaseOrderLineType'] = ObjectSerializer::toQueryValue($purchase_order_line_type);
        }
        // query params
        if ($quantity !== null) {
            $queryParams['Quantity'] = ObjectSerializer::toQueryValue($quantity);
        }
        // query params
        if ($inc_price !== null) {
            $queryParams['IncPrice'] = ObjectSerializer::toQueryValue($inc_price);
        }
        // query params
        if ($tax_amount !== null) {
            $queryParams['TaxAmount'] = ObjectSerializer::toQueryValue($tax_amount);
        }
        // query params
        if ($line_total !== null) {
            $queryParams['LineTotal'] = ObjectSerializer::toQueryValue($line_total);
        }
        // query params
        if ($line_total_ex_tax !== null) {
            $queryParams['LineTotalExTax'] = ObjectSerializer::toQueryValue($line_total_ex_tax);
        }
        // query params
        if ($fx_total !== null) {
            $queryParams['FxTotal'] = ObjectSerializer::toQueryValue($fx_total);
        }
        // query params
        if ($currency_rate_used !== null) {
            $queryParams['CurrencyRateUsed'] = ObjectSerializer::toQueryValue($currency_rate_used);
        }
        // query params
        if ($fx_decimal_places !== null) {
            $queryParams['FXDecimalPlaces'] = ObjectSerializer::toQueryValue($fx_decimal_places);
        }
        // query params
        if ($home_currency_decimal_places !== null) {
            $queryParams['HomeCurrencyDecimalPlaces'] = ObjectSerializer::toQueryValue($home_currency_decimal_places);
        }
        // query params
        if ($delivery_date !== null) {
            $queryParams['DeliveryDate'] = ObjectSerializer::toQueryValue($delivery_date);
        }
        // query params
        if ($delivered !== null) {
            $queryParams['Delivered'] = ObjectSerializer::toQueryValue($delivered);
        }
        // query params
        if ($history_text_comment !== null) {
            $queryParams['HistoryText_Comment'] = ObjectSerializer::toQueryValue($history_text_comment);
        }
        // query params
        if ($job_costing_stage_rec_id !== null) {
            $queryParams['JobCostingStageRecID'] = ObjectSerializer::toQueryValue($job_costing_stage_rec_id);
        }
        // query params
        if ($job_costing_stage_no !== null) {
            $queryParams['JobCostingStageNo'] = ObjectSerializer::toQueryValue($job_costing_stage_no);
        }
        // query params
        if ($job_costing_stage_name !== null) {
            $queryParams['JobCostingStageName'] = ObjectSerializer::toQueryValue($job_costing_stage_name);
        }
        // query params
        if ($job_costing_stage_classification_rec_id !== null) {
            $queryParams['JobCostingStageClassificationRecID'] = ObjectSerializer::toQueryValue($job_costing_stage_classification_rec_id);
        }
        // query params
        if ($job_costing_stage_classification_description !== null) {
            $queryParams['JobCostingStageClassificationDescription'] = ObjectSerializer::toQueryValue($job_costing_stage_classification_description);
        }
        // query params
        if ($job_costing_cost_centre_rec_id !== null) {
            $queryParams['JobCostingCostCentreRecID'] = ObjectSerializer::toQueryValue($job_costing_cost_centre_rec_id);
        }
        // query params
        if ($job_costing_cost_centre_no !== null) {
            $queryParams['JobCostingCostCentreNo'] = ObjectSerializer::toQueryValue($job_costing_cost_centre_no);
        }
        // query params
        if ($job_costing_cost_centre_name !== null) {
            $queryParams['JobCostingCostCentreName'] = ObjectSerializer::toQueryValue($job_costing_cost_centre_name);
        }
        // query params
        if ($job_costing_job_rec_id !== null) {
            $queryParams['JobCostingJobRecID'] = ObjectSerializer::toQueryValue($job_costing_job_rec_id);
        }
        // query params
        if ($job_costing_job_no !== null) {
            $queryParams['JobCostingJobNo'] = ObjectSerializer::toQueryValue($job_costing_job_no);
        }
        // query params
        if ($job_costing_job_description !== null) {
            $queryParams['JobCostingJobDescription'] = ObjectSerializer::toQueryValue($job_costing_job_description);
        }
        // query params
        if ($in_on_back_order_orders_on_back_id !== null) {
            $queryParams['IN_OnBackOrder_OrdersOnBackID'] = ObjectSerializer::toQueryValue($in_on_back_order_orders_on_back_id);
        }
        // query params
        if ($in_on_back_order_quantity !== null) {
            $queryParams['IN_OnBackOrder_Quantity'] = ObjectSerializer::toQueryValue($in_on_back_order_quantity);
        }
        // query params
        if ($in_on_back_order_est_bo_value !== null) {
            $queryParams['IN_OnBackOrder_EstBOValue'] = ObjectSerializer::toQueryValue($in_on_back_order_est_bo_value);
        }
        // query params
        if ($in_on_back_order_last_saved_date_time !== null) {
            $queryParams['IN_OnBackOrder_LastSavedDateTime'] = ObjectSerializer::toQueryValue($in_on_back_order_last_saved_date_time);
        }
        // query params
        if ($invoice_line_id !== null) {
            $queryParams['InvoiceLineID'] = ObjectSerializer::toQueryValue($invoice_line_id);
        }
        // query params
        if ($user_defined_float1 !== null) {
            $queryParams['UserDefinedFloat1'] = ObjectSerializer::toQueryValue($user_defined_float1);
        }
        // query params
        if ($user_defined_float2 !== null) {
            $queryParams['UserDefinedFloat2'] = ObjectSerializer::toQueryValue($user_defined_float2);
        }
        // query params
        if ($user_defined_float3 !== null) {
            $queryParams['UserDefinedFloat3'] = ObjectSerializer::toQueryValue($user_defined_float3);
        }
        // query params
        if ($user_defined_date1 !== null) {
            $queryParams['UserDefinedDate1'] = ObjectSerializer::toQueryValue($user_defined_date1);
        }
        // query params
        if ($user_defined_date2 !== null) {
            $queryParams['UserDefinedDate2'] = ObjectSerializer::toQueryValue($user_defined_date2);
        }
        // query params
        if ($user_defined_date3 !== null) {
            $queryParams['UserDefinedDate3'] = ObjectSerializer::toQueryValue($user_defined_date3);
        }
        // query params
        if ($user_defined_string1 !== null) {
            $queryParams['UserDefinedString1'] = ObjectSerializer::toQueryValue($user_defined_string1);
        }
        // query params
        if ($user_defined_string2 !== null) {
            $queryParams['UserDefinedString2'] = ObjectSerializer::toQueryValue($user_defined_string2);
        }
        // query params
        if ($user_defined_string3 !== null) {
            $queryParams['UserDefinedString3'] = ObjectSerializer::toQueryValue($user_defined_string3);
        }
        // query params
        if ($purchasing_classification_rec_id !== null) {
            $queryParams['PurchasingClassificationRecID'] = ObjectSerializer::toQueryValue($purchasing_classification_rec_id);
        }
        // query params
        if ($purchasing_classification_description !== null) {
            $queryParams['PurchasingClassificationDescription'] = ObjectSerializer::toQueryValue($purchasing_classification_description);
        }
        // query params
        if ($purchasing_classification_ledger_account_rec_id !== null) {
            $queryParams['PurchasingClassificationLedgerAccountRecID'] = ObjectSerializer::toQueryValue($purchasing_classification_ledger_account_rec_id);
        }
        // query params
        if ($purchasing_classification_ledger_account_account_no !== null) {
            $queryParams['PurchasingClassificationLedgerAccountAccountNo'] = ObjectSerializer::toQueryValue($purchasing_classification_ledger_account_account_no);
        }
        // query params
        if ($purchasing_classification_ledger_account_description !== null) {
            $queryParams['PurchasingClassificationLedgerAccountDescription'] = ObjectSerializer::toQueryValue($purchasing_classification_ledger_account_description);
        }
        // query params
        if ($service_manager_task_rec_id !== null) {
            $queryParams['ServiceManagerTaskRecID'] = ObjectSerializer::toQueryValue($service_manager_task_rec_id);
        }
        // query params
        if ($service_manager_task_no !== null) {
            $queryParams['ServiceManagerTaskNo'] = ObjectSerializer::toQueryValue($service_manager_task_no);
        }
        // query params
        if ($service_manager_task_description !== null) {
            $queryParams['ServiceManagerTaskDescription'] = ObjectSerializer::toQueryValue($service_manager_task_description);
        }
        // query params
        if ($service_manager_job_rec_id !== null) {
            $queryParams['ServiceManagerJobRecID'] = ObjectSerializer::toQueryValue($service_manager_job_rec_id);
        }
        // query params
        if ($service_manager_job_no !== null) {
            $queryParams['ServiceManagerJobNo'] = ObjectSerializer::toQueryValue($service_manager_job_no);
        }
        // query params
        if ($service_manager_job_description !== null) {
            $queryParams['ServiceManagerJobDescription'] = ObjectSerializer::toQueryValue($service_manager_job_description);
        }
        // query params
        if ($in_creditor_rec_id !== null) {
            $queryParams['IN_Creditor_RecID'] = ObjectSerializer::toQueryValue($in_creditor_rec_id);
        }
        // query params
        if ($supplier_part_no !== null) {
            $queryParams['SupplierPartNo'] = ObjectSerializer::toQueryValue($supplier_part_no);
        }
        // query params
        if ($in_supplier_warehouse_rec_id !== null) {
            $queryParams['IN_SupplierWarehouse_RecID'] = ObjectSerializer::toQueryValue($in_supplier_warehouse_rec_id);
        }
        // query params
        if ($order_units !== null) {
            $queryParams['OrderUnits'] = ObjectSerializer::toQueryValue($order_units);
        }
        // query params
        if ($delivery_days !== null) {
            $queryParams['DeliveryDays'] = ObjectSerializer::toQueryValue($delivery_days);
        }
        // query params
        if ($fx_cost !== null) {
            $queryParams['FXCost'] = ObjectSerializer::toQueryValue($fx_cost);
        }
        // query params
        if ($cost !== null) {
            $queryParams['Cost'] = ObjectSerializer::toQueryValue($cost);
        }
        // query params
        if ($cost_original !== null) {
            $queryParams['CostOriginal'] = ObjectSerializer::toQueryValue($cost_original);
        }
        // query params
        if ($units !== null) {
            $queryParams['Units'] = ObjectSerializer::toQueryValue($units);
        }
        // query params
        if ($tax_rate_rec_id !== null) {
            $queryParams['TaxRateRecID'] = ObjectSerializer::toQueryValue($tax_rate_rec_id);
        }
        // query params
        if ($tax_rate_description !== null) {
            $queryParams['TaxRateDescription'] = ObjectSerializer::toQueryValue($tax_rate_description);
        }
        // query params
        if ($tax_rate !== null) {
            $queryParams['TaxRate'] = ObjectSerializer::toQueryValue($tax_rate);
        }
        // query params
        if ($tax_rate_bas_code !== null) {
            $queryParams['TaxRateBASCode'] = ObjectSerializer::toQueryValue($tax_rate_bas_code);
        }
        // query params
        if ($inventory_expected_liability_ledger_account_rec_id !== null) {
            $queryParams['InventoryExpectedLiabilityLedgerAccountRecID'] = ObjectSerializer::toQueryValue($inventory_expected_liability_ledger_account_rec_id);
        }
        // query params
        if ($inventory_expected_liability_ledger_account_account_no !== null) {
            $queryParams['InventoryExpectedLiabilityLedgerAccountAccountNo'] = ObjectSerializer::toQueryValue($inventory_expected_liability_ledger_account_account_no);
        }
        // query params
        if ($inventory_expected_liability_ledger_account_description !== null) {
            $queryParams['InventoryExpectedLiabilityLedgerAccountDescription'] = ObjectSerializer::toQueryValue($inventory_expected_liability_ledger_account_description);
        }
        // query params
        if ($inventory_expected_asset_ledger_account_rec_id !== null) {
            $queryParams['InventoryExpectedAssetLedgerAccountRecID'] = ObjectSerializer::toQueryValue($inventory_expected_asset_ledger_account_rec_id);
        }
        // query params
        if ($inventory_expected_asset_ledger_account_account_no !== null) {
            $queryParams['InventoryExpectedAssetLedgerAccountAccountNo'] = ObjectSerializer::toQueryValue($inventory_expected_asset_ledger_account_account_no);
        }
        // query params
        if ($inventory_expected_asset_ledger_account_description !== null) {
            $queryParams['InventoryExpectedAssetLedgerAccountDescription'] = ObjectSerializer::toQueryValue($inventory_expected_asset_ledger_account_description);
        }
        // query params
        if ($classification_id !== null) {
            $queryParams['ClassificationID'] = ObjectSerializer::toQueryValue($classification_id);
        }
        // query params
        if ($classification_description !== null) {
            $queryParams['ClassificationDescription'] = ObjectSerializer::toQueryValue($classification_description);
        }
        // query params
        if ($custom_field_values !== null) {
            $queryParams['CustomFieldValues'] = ObjectSerializer::toQueryValue($custom_field_values);
        }
        // header params
        if ($accept !== null) {
            $headerParams['Accept'] = ObjectSerializer::toHeaderValue($accept);
        }
        // header params
        if ($jiwa_stateful !== null) {
            $headerParams['jiwa-stateful'] = ObjectSerializer::toHeaderValue($jiwa_stateful);
        }

        // path params
        if ($purchase_order_id !== null) {
            $resourcePath = str_replace(
                '{' . 'PurchaseOrderID' . '}',
                ObjectSerializer::toPathValue($purchase_order_id),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;
        if (isset($body)) {
            $_tempBody = $body;
        }

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json', 'application/xml']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json', 'application/xml'],
                ['application/x-www-form-urlencoded', 'application/json', 'application/xml']
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            
            if($headers['Content-Type'] === 'application/json') {
                // \stdClass has no __toString(), so we should encode it manually
                if ($httpBody instanceof \stdClass) {
                    $httpBody = \GuzzleHttp\json_encode($httpBody);
                }
                // array has no __toString(), so we should encode it manually
                if(is_array($httpBody)) {
                    $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($httpBody));
                }
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\Query::build($formParams);
            }
        }

        // this endpoint requires HTTP basic authentication
        if ($this->config->getUsername() !== null || $this->config->getPassword() !== null) {
            $headers['Authorization'] = 'Basic ' . base64_encode($this->config->getUsername() . ":" . $this->config->getPassword());
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\Query::build($queryParams);
        return new Request(
            'POST',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation purchaseOrderLinesGETManyRequestPurchaseOrderIDLinesGet
     *
     * Retrieves a list of purchase order lines.
     *
     * @param  string $accept Accept Header (required)
     * @param  string $purchase_order_id purchase_order_id (required)
     * @param  bool $jiwa_stateful Stateful indicator (optional)
     *
     * @throws \Jiwa\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Jiwa\JiwaModel\PurchaseOrderLine[]
     */
    public function purchaseOrderLinesGETManyRequestPurchaseOrderIDLinesGet($accept, $purchase_order_id, $jiwa_stateful = null)
    {
        list($response) = $this->purchaseOrderLinesGETManyRequestPurchaseOrderIDLinesGetWithHttpInfo($accept, $purchase_order_id, $jiwa_stateful);
        return $response;
    }

    /**
     * Operation purchaseOrderLinesGETManyRequestPurchaseOrderIDLinesGetWithHttpInfo
     *
     * Retrieves a list of purchase order lines.
     *
     * @param  string $accept Accept Header (required)
     * @param  string $purchase_order_id (required)
     * @param  bool $jiwa_stateful Stateful indicator (optional)
     *
     * @throws \Jiwa\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Jiwa\JiwaModel\PurchaseOrderLine[], HTTP status code, HTTP response headers (array of strings)
     */
    public function purchaseOrderLinesGETManyRequestPurchaseOrderIDLinesGetWithHttpInfo($accept, $purchase_order_id, $jiwa_stateful = null)
    {
        $returnType = '\Jiwa\JiwaModel\PurchaseOrderLine[]';
        $request = $this->purchaseOrderLinesGETManyRequestPurchaseOrderIDLinesGetRequest($accept, $purchase_order_id, $jiwa_stateful);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Jiwa\JiwaModel\PurchaseOrderLine[]',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 401:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Jiwa\JiwaModel\PurchaseOrderLine[]',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 403:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Jiwa\JiwaModel\PurchaseOrderLine[]',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 404:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Jiwa\JiwaModel\PurchaseOrderLine[]',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation purchaseOrderLinesGETManyRequestPurchaseOrderIDLinesGetAsync
     *
     * Retrieves a list of purchase order lines.
     *
     * @param  string $accept Accept Header (required)
     * @param  string $purchase_order_id (required)
     * @param  bool $jiwa_stateful Stateful indicator (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function purchaseOrderLinesGETManyRequestPurchaseOrderIDLinesGetAsync($accept, $purchase_order_id, $jiwa_stateful = null)
    {
        return $this->purchaseOrderLinesGETManyRequestPurchaseOrderIDLinesGetAsyncWithHttpInfo($accept, $purchase_order_id, $jiwa_stateful)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation purchaseOrderLinesGETManyRequestPurchaseOrderIDLinesGetAsyncWithHttpInfo
     *
     * Retrieves a list of purchase order lines.
     *
     * @param  string $accept Accept Header (required)
     * @param  string $purchase_order_id (required)
     * @param  bool $jiwa_stateful Stateful indicator (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function purchaseOrderLinesGETManyRequestPurchaseOrderIDLinesGetAsyncWithHttpInfo($accept, $purchase_order_id, $jiwa_stateful = null)
    {
        $returnType = '\Jiwa\JiwaModel\PurchaseOrderLine[]';
        $request = $this->purchaseOrderLinesGETManyRequestPurchaseOrderIDLinesGetRequest($accept, $purchase_order_id, $jiwa_stateful);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'purchaseOrderLinesGETManyRequestPurchaseOrderIDLinesGet'
     *
     * @param  string $accept Accept Header (required)
     * @param  string $purchase_order_id (required)
     * @param  bool $jiwa_stateful Stateful indicator (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function purchaseOrderLinesGETManyRequestPurchaseOrderIDLinesGetRequest($accept, $purchase_order_id, $jiwa_stateful = null)
    {
        // verify the required parameter 'accept' is set
        if ($accept === null || (is_array($accept) && count($accept) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $accept when calling purchaseOrderLinesGETManyRequestPurchaseOrderIDLinesGet'
            );
        }
        // verify the required parameter 'purchase_order_id' is set
        if ($purchase_order_id === null || (is_array($purchase_order_id) && count($purchase_order_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $purchase_order_id when calling purchaseOrderLinesGETManyRequestPurchaseOrderIDLinesGet'
            );
        }

        $resourcePath = '/PurchaseOrders/{PurchaseOrderID}/Lines';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // header params
        if ($accept !== null) {
            $headerParams['Accept'] = ObjectSerializer::toHeaderValue($accept);
        }
        // header params
        if ($jiwa_stateful !== null) {
            $headerParams['jiwa-stateful'] = ObjectSerializer::toHeaderValue($jiwa_stateful);
        }

        // path params
        if ($purchase_order_id !== null) {
            $resourcePath = str_replace(
                '{' . 'PurchaseOrderID' . '}',
                ObjectSerializer::toPathValue($purchase_order_id),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json', 'application/xml']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json', 'application/xml'],
                ['application/x-www-form-urlencoded', 'application/json', 'application/xml']
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            
            if($headers['Content-Type'] === 'application/json') {
                // \stdClass has no __toString(), so we should encode it manually
                if ($httpBody instanceof \stdClass) {
                    $httpBody = \GuzzleHttp\json_encode($httpBody);
                }
                // array has no __toString(), so we should encode it manually
                if(is_array($httpBody)) {
                    $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($httpBody));
                }
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\Query::build($formParams);
            }
        }

        // this endpoint requires HTTP basic authentication
        if ($this->config->getUsername() !== null || $this->config->getPassword() !== null) {
            $headers['Authorization'] = 'Basic ' . base64_encode($this->config->getUsername() . ":" . $this->config->getPassword());
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\Query::build($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation purchaseOrderPATCHRequestPurchaseOrderIDUpdate
     *
     * Updates a purchase order.
     *
     * @param  string $accept Accept Header (required)
     * @param  string $purchase_order_id purchase_order_id (required)
     * @param  bool $jiwa_stateful Stateful indicator (optional)
     * @param  string $creditor_rec_id creditor_rec_id (optional)
     * @param  string $creditor_account_no creditor_account_no (optional)
     * @param  string $creditor_name creditor_name (optional)
     * @param  string $creditor_warehouse_rec_id creditor_warehouse_rec_id (optional)
     * @param  string $creditor_warehouse_description creditor_warehouse_description (optional)
     * @param  string $logical_warehouse_residing_in_rec_id logical_warehouse_residing_in_rec_id (optional)
     * @param  string $logical_warehouse_residing_in_description logical_warehouse_residing_in_description (optional)
     * @param  string $physical_warehouse_residing_in_rec_id physical_warehouse_residing_in_rec_id (optional)
     * @param  string $physical_warehouse_residing_in_description physical_warehouse_residing_in_description (optional)
     * @param  string $logical_warehouse_ordering_from_rec_id logical_warehouse_ordering_from_rec_id (optional)
     * @param  string $logical_warehouse_ordering_from_description logical_warehouse_ordering_from_description (optional)
     * @param  string $physical_warehouse_ordering_from_rec_id physical_warehouse_ordering_from_rec_id (optional)
     * @param  string $physical_warehouse_ordering_from_description physical_warehouse_ordering_from_description (optional)
     * @param  string $in_transit_logical_warehouse_rec_id in_transit_logical_warehouse_rec_id (optional)
     * @param  string $in_transit_logical_warehouse_description in_transit_logical_warehouse_description (optional)
     * @param  string $in_transit_physical_warehouse_rec_id in_transit_physical_warehouse_rec_id (optional)
     * @param  string $in_transit_physical_warehouse_description in_transit_physical_warehouse_description (optional)
     * @param  string $order_no order_no (optional)
     * @param  \DateTime $order_date order_date (optional)
     * @param  string $attention attention (optional)
     * @param  string $contact_by contact_by (optional)
     * @param  string $staff_id staff_id (optional)
     * @param  string $staff_user_name staff_user_name (optional)
     * @param  string $staff_title staff_title (optional)
     * @param  string $staff_first_name staff_first_name (optional)
     * @param  string $staff_surname staff_surname (optional)
     * @param  string $order_status order_status (optional)
     * @param  string $order_type order_type (optional)
     * @param  string $order_supplier_type order_supplier_type (optional)
     * @param  double $tax_total tax_total (optional)
     * @param  bool $use_in_transit use_in_transit (optional)
     * @param  string $reference reference (optional)
     * @param  double $total_gross total_gross (optional)
     * @param  double $total_net total_net (optional)
     * @param  double $total_fx total_fx (optional)
     * @param  string $notes notes (optional)
     * @param  string $documents documents (optional)
     * @param  string $custom_field_values custom_field_values (optional)
     * @param  string $lines lines (optional)
     * @param  string $shipping_address_address_line1 shipping_address_address_line1 (optional)
     * @param  string $shipping_address_address_line2 shipping_address_address_line2 (optional)
     * @param  string $shipping_address_address_line3 shipping_address_address_line3 (optional)
     * @param  string $shipping_address_address_line4 shipping_address_address_line4 (optional)
     * @param  string $shipping_address_address_line5 shipping_address_address_line5 (optional)
     * @param  string $shipping_address_country shipping_address_country (optional)
     * @param  string $shipping_address_post_code shipping_address_post_code (optional)
     * @param  string $shipping_address_contact_name shipping_address_contact_name (optional)
     * @param  string $shipping_address_phone shipping_address_phone (optional)
     * @param  string $shipping_address_fax shipping_address_fax (optional)
     * @param  string $shipping_address_spare1 shipping_address_spare1 (optional)
     * @param  string $shipping_address_spare2 shipping_address_spare2 (optional)
     * @param  string $shipping_address_spare3 shipping_address_spare3 (optional)
     * @param  string $shipping_address_spare4 shipping_address_spare4 (optional)
     * @param  string $shipping_address_spare5 shipping_address_spare5 (optional)
     * @param  double $freight freight (optional)
     * @param  double $duty duty (optional)
     * @param  double $insurance insurance (optional)
     * @param  string $freight_tax_id freight_tax_id (optional)
     * @param  double $freight_tax_rate freight_tax_rate (optional)
     * @param  double $freight_tax_amount freight_tax_amount (optional)
     * @param  string $duty_tax_id duty_tax_id (optional)
     * @param  double $duty_tax_rate duty_tax_rate (optional)
     * @param  double $duty_tax_amount duty_tax_amount (optional)
     * @param  string $insurance_tax_id insurance_tax_id (optional)
     * @param  double $insurance_tax_rate insurance_tax_rate (optional)
     * @param  double $insurance_tax_amount insurance_tax_amount (optional)
     * @param  double $freight_inc freight_inc (optional)
     * @param  double $duty_inc duty_inc (optional)
     * @param  double $insurance_inc insurance_inc (optional)
     * @param  \Jiwa\JiwaModel\PurchaseOrderPATCHRequest $body body (optional)
     *
     * @throws \Jiwa\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Jiwa\JiwaModel\PurchaseOrder
     */
    public function purchaseOrderPATCHRequestPurchaseOrderIDUpdate($accept, $purchase_order_id, $jiwa_stateful = null, $creditor_rec_id = null, $creditor_account_no = null, $creditor_name = null, $creditor_warehouse_rec_id = null, $creditor_warehouse_description = null, $logical_warehouse_residing_in_rec_id = null, $logical_warehouse_residing_in_description = null, $physical_warehouse_residing_in_rec_id = null, $physical_warehouse_residing_in_description = null, $logical_warehouse_ordering_from_rec_id = null, $logical_warehouse_ordering_from_description = null, $physical_warehouse_ordering_from_rec_id = null, $physical_warehouse_ordering_from_description = null, $in_transit_logical_warehouse_rec_id = null, $in_transit_logical_warehouse_description = null, $in_transit_physical_warehouse_rec_id = null, $in_transit_physical_warehouse_description = null, $order_no = null, $order_date = null, $attention = null, $contact_by = null, $staff_id = null, $staff_user_name = null, $staff_title = null, $staff_first_name = null, $staff_surname = null, $order_status = null, $order_type = null, $order_supplier_type = null, $tax_total = null, $use_in_transit = null, $reference = null, $total_gross = null, $total_net = null, $total_fx = null, $notes = null, $documents = null, $custom_field_values = null, $lines = null, $shipping_address_address_line1 = null, $shipping_address_address_line2 = null, $shipping_address_address_line3 = null, $shipping_address_address_line4 = null, $shipping_address_address_line5 = null, $shipping_address_country = null, $shipping_address_post_code = null, $shipping_address_contact_name = null, $shipping_address_phone = null, $shipping_address_fax = null, $shipping_address_spare1 = null, $shipping_address_spare2 = null, $shipping_address_spare3 = null, $shipping_address_spare4 = null, $shipping_address_spare5 = null, $freight = null, $duty = null, $insurance = null, $freight_tax_id = null, $freight_tax_rate = null, $freight_tax_amount = null, $duty_tax_id = null, $duty_tax_rate = null, $duty_tax_amount = null, $insurance_tax_id = null, $insurance_tax_rate = null, $insurance_tax_amount = null, $freight_inc = null, $duty_inc = null, $insurance_inc = null, $body = null)
    {
        list($response) = $this->purchaseOrderPATCHRequestPurchaseOrderIDUpdateWithHttpInfo($accept, $purchase_order_id, $jiwa_stateful, $creditor_rec_id, $creditor_account_no, $creditor_name, $creditor_warehouse_rec_id, $creditor_warehouse_description, $logical_warehouse_residing_in_rec_id, $logical_warehouse_residing_in_description, $physical_warehouse_residing_in_rec_id, $physical_warehouse_residing_in_description, $logical_warehouse_ordering_from_rec_id, $logical_warehouse_ordering_from_description, $physical_warehouse_ordering_from_rec_id, $physical_warehouse_ordering_from_description, $in_transit_logical_warehouse_rec_id, $in_transit_logical_warehouse_description, $in_transit_physical_warehouse_rec_id, $in_transit_physical_warehouse_description, $order_no, $order_date, $attention, $contact_by, $staff_id, $staff_user_name, $staff_title, $staff_first_name, $staff_surname, $order_status, $order_type, $order_supplier_type, $tax_total, $use_in_transit, $reference, $total_gross, $total_net, $total_fx, $notes, $documents, $custom_field_values, $lines, $shipping_address_address_line1, $shipping_address_address_line2, $shipping_address_address_line3, $shipping_address_address_line4, $shipping_address_address_line5, $shipping_address_country, $shipping_address_post_code, $shipping_address_contact_name, $shipping_address_phone, $shipping_address_fax, $shipping_address_spare1, $shipping_address_spare2, $shipping_address_spare3, $shipping_address_spare4, $shipping_address_spare5, $freight, $duty, $insurance, $freight_tax_id, $freight_tax_rate, $freight_tax_amount, $duty_tax_id, $duty_tax_rate, $duty_tax_amount, $insurance_tax_id, $insurance_tax_rate, $insurance_tax_amount, $freight_inc, $duty_inc, $insurance_inc, $body);
        return $response;
    }

    /**
     * Operation purchaseOrderPATCHRequestPurchaseOrderIDUpdateWithHttpInfo
     *
     * Updates a purchase order.
     *
     * @param  string $accept Accept Header (required)
     * @param  string $purchase_order_id (required)
     * @param  bool $jiwa_stateful Stateful indicator (optional)
     * @param  string $creditor_rec_id (optional)
     * @param  string $creditor_account_no (optional)
     * @param  string $creditor_name (optional)
     * @param  string $creditor_warehouse_rec_id (optional)
     * @param  string $creditor_warehouse_description (optional)
     * @param  string $logical_warehouse_residing_in_rec_id (optional)
     * @param  string $logical_warehouse_residing_in_description (optional)
     * @param  string $physical_warehouse_residing_in_rec_id (optional)
     * @param  string $physical_warehouse_residing_in_description (optional)
     * @param  string $logical_warehouse_ordering_from_rec_id (optional)
     * @param  string $logical_warehouse_ordering_from_description (optional)
     * @param  string $physical_warehouse_ordering_from_rec_id (optional)
     * @param  string $physical_warehouse_ordering_from_description (optional)
     * @param  string $in_transit_logical_warehouse_rec_id (optional)
     * @param  string $in_transit_logical_warehouse_description (optional)
     * @param  string $in_transit_physical_warehouse_rec_id (optional)
     * @param  string $in_transit_physical_warehouse_description (optional)
     * @param  string $order_no (optional)
     * @param  \DateTime $order_date (optional)
     * @param  string $attention (optional)
     * @param  string $contact_by (optional)
     * @param  string $staff_id (optional)
     * @param  string $staff_user_name (optional)
     * @param  string $staff_title (optional)
     * @param  string $staff_first_name (optional)
     * @param  string $staff_surname (optional)
     * @param  string $order_status (optional)
     * @param  string $order_type (optional)
     * @param  string $order_supplier_type (optional)
     * @param  double $tax_total (optional)
     * @param  bool $use_in_transit (optional)
     * @param  string $reference (optional)
     * @param  double $total_gross (optional)
     * @param  double $total_net (optional)
     * @param  double $total_fx (optional)
     * @param  string $notes (optional)
     * @param  string $documents (optional)
     * @param  string $custom_field_values (optional)
     * @param  string $lines (optional)
     * @param  string $shipping_address_address_line1 (optional)
     * @param  string $shipping_address_address_line2 (optional)
     * @param  string $shipping_address_address_line3 (optional)
     * @param  string $shipping_address_address_line4 (optional)
     * @param  string $shipping_address_address_line5 (optional)
     * @param  string $shipping_address_country (optional)
     * @param  string $shipping_address_post_code (optional)
     * @param  string $shipping_address_contact_name (optional)
     * @param  string $shipping_address_phone (optional)
     * @param  string $shipping_address_fax (optional)
     * @param  string $shipping_address_spare1 (optional)
     * @param  string $shipping_address_spare2 (optional)
     * @param  string $shipping_address_spare3 (optional)
     * @param  string $shipping_address_spare4 (optional)
     * @param  string $shipping_address_spare5 (optional)
     * @param  double $freight (optional)
     * @param  double $duty (optional)
     * @param  double $insurance (optional)
     * @param  string $freight_tax_id (optional)
     * @param  double $freight_tax_rate (optional)
     * @param  double $freight_tax_amount (optional)
     * @param  string $duty_tax_id (optional)
     * @param  double $duty_tax_rate (optional)
     * @param  double $duty_tax_amount (optional)
     * @param  string $insurance_tax_id (optional)
     * @param  double $insurance_tax_rate (optional)
     * @param  double $insurance_tax_amount (optional)
     * @param  double $freight_inc (optional)
     * @param  double $duty_inc (optional)
     * @param  double $insurance_inc (optional)
     * @param  \Jiwa\JiwaModel\PurchaseOrderPATCHRequest $body (optional)
     *
     * @throws \Jiwa\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Jiwa\JiwaModel\PurchaseOrder, HTTP status code, HTTP response headers (array of strings)
     */
    public function purchaseOrderPATCHRequestPurchaseOrderIDUpdateWithHttpInfo($accept, $purchase_order_id, $jiwa_stateful = null, $creditor_rec_id = null, $creditor_account_no = null, $creditor_name = null, $creditor_warehouse_rec_id = null, $creditor_warehouse_description = null, $logical_warehouse_residing_in_rec_id = null, $logical_warehouse_residing_in_description = null, $physical_warehouse_residing_in_rec_id = null, $physical_warehouse_residing_in_description = null, $logical_warehouse_ordering_from_rec_id = null, $logical_warehouse_ordering_from_description = null, $physical_warehouse_ordering_from_rec_id = null, $physical_warehouse_ordering_from_description = null, $in_transit_logical_warehouse_rec_id = null, $in_transit_logical_warehouse_description = null, $in_transit_physical_warehouse_rec_id = null, $in_transit_physical_warehouse_description = null, $order_no = null, $order_date = null, $attention = null, $contact_by = null, $staff_id = null, $staff_user_name = null, $staff_title = null, $staff_first_name = null, $staff_surname = null, $order_status = null, $order_type = null, $order_supplier_type = null, $tax_total = null, $use_in_transit = null, $reference = null, $total_gross = null, $total_net = null, $total_fx = null, $notes = null, $documents = null, $custom_field_values = null, $lines = null, $shipping_address_address_line1 = null, $shipping_address_address_line2 = null, $shipping_address_address_line3 = null, $shipping_address_address_line4 = null, $shipping_address_address_line5 = null, $shipping_address_country = null, $shipping_address_post_code = null, $shipping_address_contact_name = null, $shipping_address_phone = null, $shipping_address_fax = null, $shipping_address_spare1 = null, $shipping_address_spare2 = null, $shipping_address_spare3 = null, $shipping_address_spare4 = null, $shipping_address_spare5 = null, $freight = null, $duty = null, $insurance = null, $freight_tax_id = null, $freight_tax_rate = null, $freight_tax_amount = null, $duty_tax_id = null, $duty_tax_rate = null, $duty_tax_amount = null, $insurance_tax_id = null, $insurance_tax_rate = null, $insurance_tax_amount = null, $freight_inc = null, $duty_inc = null, $insurance_inc = null, $body = null)
    {
        $returnType = '\Jiwa\JiwaModel\PurchaseOrder';
        $request = $this->purchaseOrderPATCHRequestPurchaseOrderIDUpdateRequest($accept, $purchase_order_id, $jiwa_stateful, $creditor_rec_id, $creditor_account_no, $creditor_name, $creditor_warehouse_rec_id, $creditor_warehouse_description, $logical_warehouse_residing_in_rec_id, $logical_warehouse_residing_in_description, $physical_warehouse_residing_in_rec_id, $physical_warehouse_residing_in_description, $logical_warehouse_ordering_from_rec_id, $logical_warehouse_ordering_from_description, $physical_warehouse_ordering_from_rec_id, $physical_warehouse_ordering_from_description, $in_transit_logical_warehouse_rec_id, $in_transit_logical_warehouse_description, $in_transit_physical_warehouse_rec_id, $in_transit_physical_warehouse_description, $order_no, $order_date, $attention, $contact_by, $staff_id, $staff_user_name, $staff_title, $staff_first_name, $staff_surname, $order_status, $order_type, $order_supplier_type, $tax_total, $use_in_transit, $reference, $total_gross, $total_net, $total_fx, $notes, $documents, $custom_field_values, $lines, $shipping_address_address_line1, $shipping_address_address_line2, $shipping_address_address_line3, $shipping_address_address_line4, $shipping_address_address_line5, $shipping_address_country, $shipping_address_post_code, $shipping_address_contact_name, $shipping_address_phone, $shipping_address_fax, $shipping_address_spare1, $shipping_address_spare2, $shipping_address_spare3, $shipping_address_spare4, $shipping_address_spare5, $freight, $duty, $insurance, $freight_tax_id, $freight_tax_rate, $freight_tax_amount, $duty_tax_id, $duty_tax_rate, $duty_tax_amount, $insurance_tax_id, $insurance_tax_rate, $insurance_tax_amount, $freight_inc, $duty_inc, $insurance_inc, $body);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Jiwa\JiwaModel\PurchaseOrder',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 401:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Jiwa\JiwaModel\PurchaseOrder',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 403:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Jiwa\JiwaModel\PurchaseOrder',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 404:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Jiwa\JiwaModel\PurchaseOrder',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation purchaseOrderPATCHRequestPurchaseOrderIDUpdateAsync
     *
     * Updates a purchase order.
     *
     * @param  string $accept Accept Header (required)
     * @param  string $purchase_order_id (required)
     * @param  bool $jiwa_stateful Stateful indicator (optional)
     * @param  string $creditor_rec_id (optional)
     * @param  string $creditor_account_no (optional)
     * @param  string $creditor_name (optional)
     * @param  string $creditor_warehouse_rec_id (optional)
     * @param  string $creditor_warehouse_description (optional)
     * @param  string $logical_warehouse_residing_in_rec_id (optional)
     * @param  string $logical_warehouse_residing_in_description (optional)
     * @param  string $physical_warehouse_residing_in_rec_id (optional)
     * @param  string $physical_warehouse_residing_in_description (optional)
     * @param  string $logical_warehouse_ordering_from_rec_id (optional)
     * @param  string $logical_warehouse_ordering_from_description (optional)
     * @param  string $physical_warehouse_ordering_from_rec_id (optional)
     * @param  string $physical_warehouse_ordering_from_description (optional)
     * @param  string $in_transit_logical_warehouse_rec_id (optional)
     * @param  string $in_transit_logical_warehouse_description (optional)
     * @param  string $in_transit_physical_warehouse_rec_id (optional)
     * @param  string $in_transit_physical_warehouse_description (optional)
     * @param  string $order_no (optional)
     * @param  \DateTime $order_date (optional)
     * @param  string $attention (optional)
     * @param  string $contact_by (optional)
     * @param  string $staff_id (optional)
     * @param  string $staff_user_name (optional)
     * @param  string $staff_title (optional)
     * @param  string $staff_first_name (optional)
     * @param  string $staff_surname (optional)
     * @param  string $order_status (optional)
     * @param  string $order_type (optional)
     * @param  string $order_supplier_type (optional)
     * @param  double $tax_total (optional)
     * @param  bool $use_in_transit (optional)
     * @param  string $reference (optional)
     * @param  double $total_gross (optional)
     * @param  double $total_net (optional)
     * @param  double $total_fx (optional)
     * @param  string $notes (optional)
     * @param  string $documents (optional)
     * @param  string $custom_field_values (optional)
     * @param  string $lines (optional)
     * @param  string $shipping_address_address_line1 (optional)
     * @param  string $shipping_address_address_line2 (optional)
     * @param  string $shipping_address_address_line3 (optional)
     * @param  string $shipping_address_address_line4 (optional)
     * @param  string $shipping_address_address_line5 (optional)
     * @param  string $shipping_address_country (optional)
     * @param  string $shipping_address_post_code (optional)
     * @param  string $shipping_address_contact_name (optional)
     * @param  string $shipping_address_phone (optional)
     * @param  string $shipping_address_fax (optional)
     * @param  string $shipping_address_spare1 (optional)
     * @param  string $shipping_address_spare2 (optional)
     * @param  string $shipping_address_spare3 (optional)
     * @param  string $shipping_address_spare4 (optional)
     * @param  string $shipping_address_spare5 (optional)
     * @param  double $freight (optional)
     * @param  double $duty (optional)
     * @param  double $insurance (optional)
     * @param  string $freight_tax_id (optional)
     * @param  double $freight_tax_rate (optional)
     * @param  double $freight_tax_amount (optional)
     * @param  string $duty_tax_id (optional)
     * @param  double $duty_tax_rate (optional)
     * @param  double $duty_tax_amount (optional)
     * @param  string $insurance_tax_id (optional)
     * @param  double $insurance_tax_rate (optional)
     * @param  double $insurance_tax_amount (optional)
     * @param  double $freight_inc (optional)
     * @param  double $duty_inc (optional)
     * @param  double $insurance_inc (optional)
     * @param  \Jiwa\JiwaModel\PurchaseOrderPATCHRequest $body (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function purchaseOrderPATCHRequestPurchaseOrderIDUpdateAsync($accept, $purchase_order_id, $jiwa_stateful = null, $creditor_rec_id = null, $creditor_account_no = null, $creditor_name = null, $creditor_warehouse_rec_id = null, $creditor_warehouse_description = null, $logical_warehouse_residing_in_rec_id = null, $logical_warehouse_residing_in_description = null, $physical_warehouse_residing_in_rec_id = null, $physical_warehouse_residing_in_description = null, $logical_warehouse_ordering_from_rec_id = null, $logical_warehouse_ordering_from_description = null, $physical_warehouse_ordering_from_rec_id = null, $physical_warehouse_ordering_from_description = null, $in_transit_logical_warehouse_rec_id = null, $in_transit_logical_warehouse_description = null, $in_transit_physical_warehouse_rec_id = null, $in_transit_physical_warehouse_description = null, $order_no = null, $order_date = null, $attention = null, $contact_by = null, $staff_id = null, $staff_user_name = null, $staff_title = null, $staff_first_name = null, $staff_surname = null, $order_status = null, $order_type = null, $order_supplier_type = null, $tax_total = null, $use_in_transit = null, $reference = null, $total_gross = null, $total_net = null, $total_fx = null, $notes = null, $documents = null, $custom_field_values = null, $lines = null, $shipping_address_address_line1 = null, $shipping_address_address_line2 = null, $shipping_address_address_line3 = null, $shipping_address_address_line4 = null, $shipping_address_address_line5 = null, $shipping_address_country = null, $shipping_address_post_code = null, $shipping_address_contact_name = null, $shipping_address_phone = null, $shipping_address_fax = null, $shipping_address_spare1 = null, $shipping_address_spare2 = null, $shipping_address_spare3 = null, $shipping_address_spare4 = null, $shipping_address_spare5 = null, $freight = null, $duty = null, $insurance = null, $freight_tax_id = null, $freight_tax_rate = null, $freight_tax_amount = null, $duty_tax_id = null, $duty_tax_rate = null, $duty_tax_amount = null, $insurance_tax_id = null, $insurance_tax_rate = null, $insurance_tax_amount = null, $freight_inc = null, $duty_inc = null, $insurance_inc = null, $body = null)
    {
        return $this->purchaseOrderPATCHRequestPurchaseOrderIDUpdateAsyncWithHttpInfo($accept, $purchase_order_id, $jiwa_stateful, $creditor_rec_id, $creditor_account_no, $creditor_name, $creditor_warehouse_rec_id, $creditor_warehouse_description, $logical_warehouse_residing_in_rec_id, $logical_warehouse_residing_in_description, $physical_warehouse_residing_in_rec_id, $physical_warehouse_residing_in_description, $logical_warehouse_ordering_from_rec_id, $logical_warehouse_ordering_from_description, $physical_warehouse_ordering_from_rec_id, $physical_warehouse_ordering_from_description, $in_transit_logical_warehouse_rec_id, $in_transit_logical_warehouse_description, $in_transit_physical_warehouse_rec_id, $in_transit_physical_warehouse_description, $order_no, $order_date, $attention, $contact_by, $staff_id, $staff_user_name, $staff_title, $staff_first_name, $staff_surname, $order_status, $order_type, $order_supplier_type, $tax_total, $use_in_transit, $reference, $total_gross, $total_net, $total_fx, $notes, $documents, $custom_field_values, $lines, $shipping_address_address_line1, $shipping_address_address_line2, $shipping_address_address_line3, $shipping_address_address_line4, $shipping_address_address_line5, $shipping_address_country, $shipping_address_post_code, $shipping_address_contact_name, $shipping_address_phone, $shipping_address_fax, $shipping_address_spare1, $shipping_address_spare2, $shipping_address_spare3, $shipping_address_spare4, $shipping_address_spare5, $freight, $duty, $insurance, $freight_tax_id, $freight_tax_rate, $freight_tax_amount, $duty_tax_id, $duty_tax_rate, $duty_tax_amount, $insurance_tax_id, $insurance_tax_rate, $insurance_tax_amount, $freight_inc, $duty_inc, $insurance_inc, $body)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation purchaseOrderPATCHRequestPurchaseOrderIDUpdateAsyncWithHttpInfo
     *
     * Updates a purchase order.
     *
     * @param  string $accept Accept Header (required)
     * @param  string $purchase_order_id (required)
     * @param  bool $jiwa_stateful Stateful indicator (optional)
     * @param  string $creditor_rec_id (optional)
     * @param  string $creditor_account_no (optional)
     * @param  string $creditor_name (optional)
     * @param  string $creditor_warehouse_rec_id (optional)
     * @param  string $creditor_warehouse_description (optional)
     * @param  string $logical_warehouse_residing_in_rec_id (optional)
     * @param  string $logical_warehouse_residing_in_description (optional)
     * @param  string $physical_warehouse_residing_in_rec_id (optional)
     * @param  string $physical_warehouse_residing_in_description (optional)
     * @param  string $logical_warehouse_ordering_from_rec_id (optional)
     * @param  string $logical_warehouse_ordering_from_description (optional)
     * @param  string $physical_warehouse_ordering_from_rec_id (optional)
     * @param  string $physical_warehouse_ordering_from_description (optional)
     * @param  string $in_transit_logical_warehouse_rec_id (optional)
     * @param  string $in_transit_logical_warehouse_description (optional)
     * @param  string $in_transit_physical_warehouse_rec_id (optional)
     * @param  string $in_transit_physical_warehouse_description (optional)
     * @param  string $order_no (optional)
     * @param  \DateTime $order_date (optional)
     * @param  string $attention (optional)
     * @param  string $contact_by (optional)
     * @param  string $staff_id (optional)
     * @param  string $staff_user_name (optional)
     * @param  string $staff_title (optional)
     * @param  string $staff_first_name (optional)
     * @param  string $staff_surname (optional)
     * @param  string $order_status (optional)
     * @param  string $order_type (optional)
     * @param  string $order_supplier_type (optional)
     * @param  double $tax_total (optional)
     * @param  bool $use_in_transit (optional)
     * @param  string $reference (optional)
     * @param  double $total_gross (optional)
     * @param  double $total_net (optional)
     * @param  double $total_fx (optional)
     * @param  string $notes (optional)
     * @param  string $documents (optional)
     * @param  string $custom_field_values (optional)
     * @param  string $lines (optional)
     * @param  string $shipping_address_address_line1 (optional)
     * @param  string $shipping_address_address_line2 (optional)
     * @param  string $shipping_address_address_line3 (optional)
     * @param  string $shipping_address_address_line4 (optional)
     * @param  string $shipping_address_address_line5 (optional)
     * @param  string $shipping_address_country (optional)
     * @param  string $shipping_address_post_code (optional)
     * @param  string $shipping_address_contact_name (optional)
     * @param  string $shipping_address_phone (optional)
     * @param  string $shipping_address_fax (optional)
     * @param  string $shipping_address_spare1 (optional)
     * @param  string $shipping_address_spare2 (optional)
     * @param  string $shipping_address_spare3 (optional)
     * @param  string $shipping_address_spare4 (optional)
     * @param  string $shipping_address_spare5 (optional)
     * @param  double $freight (optional)
     * @param  double $duty (optional)
     * @param  double $insurance (optional)
     * @param  string $freight_tax_id (optional)
     * @param  double $freight_tax_rate (optional)
     * @param  double $freight_tax_amount (optional)
     * @param  string $duty_tax_id (optional)
     * @param  double $duty_tax_rate (optional)
     * @param  double $duty_tax_amount (optional)
     * @param  string $insurance_tax_id (optional)
     * @param  double $insurance_tax_rate (optional)
     * @param  double $insurance_tax_amount (optional)
     * @param  double $freight_inc (optional)
     * @param  double $duty_inc (optional)
     * @param  double $insurance_inc (optional)
     * @param  \Jiwa\JiwaModel\PurchaseOrderPATCHRequest $body (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function purchaseOrderPATCHRequestPurchaseOrderIDUpdateAsyncWithHttpInfo($accept, $purchase_order_id, $jiwa_stateful = null, $creditor_rec_id = null, $creditor_account_no = null, $creditor_name = null, $creditor_warehouse_rec_id = null, $creditor_warehouse_description = null, $logical_warehouse_residing_in_rec_id = null, $logical_warehouse_residing_in_description = null, $physical_warehouse_residing_in_rec_id = null, $physical_warehouse_residing_in_description = null, $logical_warehouse_ordering_from_rec_id = null, $logical_warehouse_ordering_from_description = null, $physical_warehouse_ordering_from_rec_id = null, $physical_warehouse_ordering_from_description = null, $in_transit_logical_warehouse_rec_id = null, $in_transit_logical_warehouse_description = null, $in_transit_physical_warehouse_rec_id = null, $in_transit_physical_warehouse_description = null, $order_no = null, $order_date = null, $attention = null, $contact_by = null, $staff_id = null, $staff_user_name = null, $staff_title = null, $staff_first_name = null, $staff_surname = null, $order_status = null, $order_type = null, $order_supplier_type = null, $tax_total = null, $use_in_transit = null, $reference = null, $total_gross = null, $total_net = null, $total_fx = null, $notes = null, $documents = null, $custom_field_values = null, $lines = null, $shipping_address_address_line1 = null, $shipping_address_address_line2 = null, $shipping_address_address_line3 = null, $shipping_address_address_line4 = null, $shipping_address_address_line5 = null, $shipping_address_country = null, $shipping_address_post_code = null, $shipping_address_contact_name = null, $shipping_address_phone = null, $shipping_address_fax = null, $shipping_address_spare1 = null, $shipping_address_spare2 = null, $shipping_address_spare3 = null, $shipping_address_spare4 = null, $shipping_address_spare5 = null, $freight = null, $duty = null, $insurance = null, $freight_tax_id = null, $freight_tax_rate = null, $freight_tax_amount = null, $duty_tax_id = null, $duty_tax_rate = null, $duty_tax_amount = null, $insurance_tax_id = null, $insurance_tax_rate = null, $insurance_tax_amount = null, $freight_inc = null, $duty_inc = null, $insurance_inc = null, $body = null)
    {
        $returnType = '\Jiwa\JiwaModel\PurchaseOrder';
        $request = $this->purchaseOrderPATCHRequestPurchaseOrderIDUpdateRequest($accept, $purchase_order_id, $jiwa_stateful, $creditor_rec_id, $creditor_account_no, $creditor_name, $creditor_warehouse_rec_id, $creditor_warehouse_description, $logical_warehouse_residing_in_rec_id, $logical_warehouse_residing_in_description, $physical_warehouse_residing_in_rec_id, $physical_warehouse_residing_in_description, $logical_warehouse_ordering_from_rec_id, $logical_warehouse_ordering_from_description, $physical_warehouse_ordering_from_rec_id, $physical_warehouse_ordering_from_description, $in_transit_logical_warehouse_rec_id, $in_transit_logical_warehouse_description, $in_transit_physical_warehouse_rec_id, $in_transit_physical_warehouse_description, $order_no, $order_date, $attention, $contact_by, $staff_id, $staff_user_name, $staff_title, $staff_first_name, $staff_surname, $order_status, $order_type, $order_supplier_type, $tax_total, $use_in_transit, $reference, $total_gross, $total_net, $total_fx, $notes, $documents, $custom_field_values, $lines, $shipping_address_address_line1, $shipping_address_address_line2, $shipping_address_address_line3, $shipping_address_address_line4, $shipping_address_address_line5, $shipping_address_country, $shipping_address_post_code, $shipping_address_contact_name, $shipping_address_phone, $shipping_address_fax, $shipping_address_spare1, $shipping_address_spare2, $shipping_address_spare3, $shipping_address_spare4, $shipping_address_spare5, $freight, $duty, $insurance, $freight_tax_id, $freight_tax_rate, $freight_tax_amount, $duty_tax_id, $duty_tax_rate, $duty_tax_amount, $insurance_tax_id, $insurance_tax_rate, $insurance_tax_amount, $freight_inc, $duty_inc, $insurance_inc, $body);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'purchaseOrderPATCHRequestPurchaseOrderIDUpdate'
     *
     * @param  string $accept Accept Header (required)
     * @param  string $purchase_order_id (required)
     * @param  bool $jiwa_stateful Stateful indicator (optional)
     * @param  string $creditor_rec_id (optional)
     * @param  string $creditor_account_no (optional)
     * @param  string $creditor_name (optional)
     * @param  string $creditor_warehouse_rec_id (optional)
     * @param  string $creditor_warehouse_description (optional)
     * @param  string $logical_warehouse_residing_in_rec_id (optional)
     * @param  string $logical_warehouse_residing_in_description (optional)
     * @param  string $physical_warehouse_residing_in_rec_id (optional)
     * @param  string $physical_warehouse_residing_in_description (optional)
     * @param  string $logical_warehouse_ordering_from_rec_id (optional)
     * @param  string $logical_warehouse_ordering_from_description (optional)
     * @param  string $physical_warehouse_ordering_from_rec_id (optional)
     * @param  string $physical_warehouse_ordering_from_description (optional)
     * @param  string $in_transit_logical_warehouse_rec_id (optional)
     * @param  string $in_transit_logical_warehouse_description (optional)
     * @param  string $in_transit_physical_warehouse_rec_id (optional)
     * @param  string $in_transit_physical_warehouse_description (optional)
     * @param  string $order_no (optional)
     * @param  \DateTime $order_date (optional)
     * @param  string $attention (optional)
     * @param  string $contact_by (optional)
     * @param  string $staff_id (optional)
     * @param  string $staff_user_name (optional)
     * @param  string $staff_title (optional)
     * @param  string $staff_first_name (optional)
     * @param  string $staff_surname (optional)
     * @param  string $order_status (optional)
     * @param  string $order_type (optional)
     * @param  string $order_supplier_type (optional)
     * @param  double $tax_total (optional)
     * @param  bool $use_in_transit (optional)
     * @param  string $reference (optional)
     * @param  double $total_gross (optional)
     * @param  double $total_net (optional)
     * @param  double $total_fx (optional)
     * @param  string $notes (optional)
     * @param  string $documents (optional)
     * @param  string $custom_field_values (optional)
     * @param  string $lines (optional)
     * @param  string $shipping_address_address_line1 (optional)
     * @param  string $shipping_address_address_line2 (optional)
     * @param  string $shipping_address_address_line3 (optional)
     * @param  string $shipping_address_address_line4 (optional)
     * @param  string $shipping_address_address_line5 (optional)
     * @param  string $shipping_address_country (optional)
     * @param  string $shipping_address_post_code (optional)
     * @param  string $shipping_address_contact_name (optional)
     * @param  string $shipping_address_phone (optional)
     * @param  string $shipping_address_fax (optional)
     * @param  string $shipping_address_spare1 (optional)
     * @param  string $shipping_address_spare2 (optional)
     * @param  string $shipping_address_spare3 (optional)
     * @param  string $shipping_address_spare4 (optional)
     * @param  string $shipping_address_spare5 (optional)
     * @param  double $freight (optional)
     * @param  double $duty (optional)
     * @param  double $insurance (optional)
     * @param  string $freight_tax_id (optional)
     * @param  double $freight_tax_rate (optional)
     * @param  double $freight_tax_amount (optional)
     * @param  string $duty_tax_id (optional)
     * @param  double $duty_tax_rate (optional)
     * @param  double $duty_tax_amount (optional)
     * @param  string $insurance_tax_id (optional)
     * @param  double $insurance_tax_rate (optional)
     * @param  double $insurance_tax_amount (optional)
     * @param  double $freight_inc (optional)
     * @param  double $duty_inc (optional)
     * @param  double $insurance_inc (optional)
     * @param  \Jiwa\JiwaModel\PurchaseOrderPATCHRequest $body (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function purchaseOrderPATCHRequestPurchaseOrderIDUpdateRequest($accept, $purchase_order_id, $jiwa_stateful = null, $creditor_rec_id = null, $creditor_account_no = null, $creditor_name = null, $creditor_warehouse_rec_id = null, $creditor_warehouse_description = null, $logical_warehouse_residing_in_rec_id = null, $logical_warehouse_residing_in_description = null, $physical_warehouse_residing_in_rec_id = null, $physical_warehouse_residing_in_description = null, $logical_warehouse_ordering_from_rec_id = null, $logical_warehouse_ordering_from_description = null, $physical_warehouse_ordering_from_rec_id = null, $physical_warehouse_ordering_from_description = null, $in_transit_logical_warehouse_rec_id = null, $in_transit_logical_warehouse_description = null, $in_transit_physical_warehouse_rec_id = null, $in_transit_physical_warehouse_description = null, $order_no = null, $order_date = null, $attention = null, $contact_by = null, $staff_id = null, $staff_user_name = null, $staff_title = null, $staff_first_name = null, $staff_surname = null, $order_status = null, $order_type = null, $order_supplier_type = null, $tax_total = null, $use_in_transit = null, $reference = null, $total_gross = null, $total_net = null, $total_fx = null, $notes = null, $documents = null, $custom_field_values = null, $lines = null, $shipping_address_address_line1 = null, $shipping_address_address_line2 = null, $shipping_address_address_line3 = null, $shipping_address_address_line4 = null, $shipping_address_address_line5 = null, $shipping_address_country = null, $shipping_address_post_code = null, $shipping_address_contact_name = null, $shipping_address_phone = null, $shipping_address_fax = null, $shipping_address_spare1 = null, $shipping_address_spare2 = null, $shipping_address_spare3 = null, $shipping_address_spare4 = null, $shipping_address_spare5 = null, $freight = null, $duty = null, $insurance = null, $freight_tax_id = null, $freight_tax_rate = null, $freight_tax_amount = null, $duty_tax_id = null, $duty_tax_rate = null, $duty_tax_amount = null, $insurance_tax_id = null, $insurance_tax_rate = null, $insurance_tax_amount = null, $freight_inc = null, $duty_inc = null, $insurance_inc = null, $body = null)
    {
        // verify the required parameter 'accept' is set
        if ($accept === null || (is_array($accept) && count($accept) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $accept when calling purchaseOrderPATCHRequestPurchaseOrderIDUpdate'
            );
        }
        // verify the required parameter 'purchase_order_id' is set
        if ($purchase_order_id === null || (is_array($purchase_order_id) && count($purchase_order_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $purchase_order_id when calling purchaseOrderPATCHRequestPurchaseOrderIDUpdate'
            );
        }

        $resourcePath = '/PurchaseOrders/{PurchaseOrderID}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        if ($creditor_rec_id !== null) {
            $queryParams['CreditorRecID'] = ObjectSerializer::toQueryValue($creditor_rec_id);
        }
        // query params
        if ($creditor_account_no !== null) {
            $queryParams['CreditorAccountNo'] = ObjectSerializer::toQueryValue($creditor_account_no);
        }
        // query params
        if ($creditor_name !== null) {
            $queryParams['CreditorName'] = ObjectSerializer::toQueryValue($creditor_name);
        }
        // query params
        if ($creditor_warehouse_rec_id !== null) {
            $queryParams['CreditorWarehouseRecID'] = ObjectSerializer::toQueryValue($creditor_warehouse_rec_id);
        }
        // query params
        if ($creditor_warehouse_description !== null) {
            $queryParams['CreditorWarehouseDescription'] = ObjectSerializer::toQueryValue($creditor_warehouse_description);
        }
        // query params
        if ($logical_warehouse_residing_in_rec_id !== null) {
            $queryParams['LogicalWarehouseResidingInRecID'] = ObjectSerializer::toQueryValue($logical_warehouse_residing_in_rec_id);
        }
        // query params
        if ($logical_warehouse_residing_in_description !== null) {
            $queryParams['LogicalWarehouseResidingInDescription'] = ObjectSerializer::toQueryValue($logical_warehouse_residing_in_description);
        }
        // query params
        if ($physical_warehouse_residing_in_rec_id !== null) {
            $queryParams['PhysicalWarehouseResidingInRecID'] = ObjectSerializer::toQueryValue($physical_warehouse_residing_in_rec_id);
        }
        // query params
        if ($physical_warehouse_residing_in_description !== null) {
            $queryParams['PhysicalWarehouseResidingInDescription'] = ObjectSerializer::toQueryValue($physical_warehouse_residing_in_description);
        }
        // query params
        if ($logical_warehouse_ordering_from_rec_id !== null) {
            $queryParams['LogicalWarehouseOrderingFromRecID'] = ObjectSerializer::toQueryValue($logical_warehouse_ordering_from_rec_id);
        }
        // query params
        if ($logical_warehouse_ordering_from_description !== null) {
            $queryParams['LogicalWarehouseOrderingFromDescription'] = ObjectSerializer::toQueryValue($logical_warehouse_ordering_from_description);
        }
        // query params
        if ($physical_warehouse_ordering_from_rec_id !== null) {
            $queryParams['PhysicalWarehouseOrderingFromRecID'] = ObjectSerializer::toQueryValue($physical_warehouse_ordering_from_rec_id);
        }
        // query params
        if ($physical_warehouse_ordering_from_description !== null) {
            $queryParams['PhysicalWarehouseOrderingFromDescription'] = ObjectSerializer::toQueryValue($physical_warehouse_ordering_from_description);
        }
        // query params
        if ($in_transit_logical_warehouse_rec_id !== null) {
            $queryParams['InTransitLogicalWarehouseRecID'] = ObjectSerializer::toQueryValue($in_transit_logical_warehouse_rec_id);
        }
        // query params
        if ($in_transit_logical_warehouse_description !== null) {
            $queryParams['InTransitLogicalWarehouseDescription'] = ObjectSerializer::toQueryValue($in_transit_logical_warehouse_description);
        }
        // query params
        if ($in_transit_physical_warehouse_rec_id !== null) {
            $queryParams['InTransitPhysicalWarehouseRecID'] = ObjectSerializer::toQueryValue($in_transit_physical_warehouse_rec_id);
        }
        // query params
        if ($in_transit_physical_warehouse_description !== null) {
            $queryParams['InTransitPhysicalWarehouseDescription'] = ObjectSerializer::toQueryValue($in_transit_physical_warehouse_description);
        }
        // query params
        if ($order_no !== null) {
            $queryParams['OrderNo'] = ObjectSerializer::toQueryValue($order_no);
        }
        // query params
        if ($order_date !== null) {
            $queryParams['OrderDate'] = ObjectSerializer::toQueryValue($order_date);
        }
        // query params
        if ($attention !== null) {
            $queryParams['Attention'] = ObjectSerializer::toQueryValue($attention);
        }
        // query params
        if ($contact_by !== null) {
            $queryParams['ContactBy'] = ObjectSerializer::toQueryValue($contact_by);
        }
        // query params
        if ($staff_id !== null) {
            $queryParams['StaffID'] = ObjectSerializer::toQueryValue($staff_id);
        }
        // query params
        if ($staff_user_name !== null) {
            $queryParams['StaffUserName'] = ObjectSerializer::toQueryValue($staff_user_name);
        }
        // query params
        if ($staff_title !== null) {
            $queryParams['StaffTitle'] = ObjectSerializer::toQueryValue($staff_title);
        }
        // query params
        if ($staff_first_name !== null) {
            $queryParams['StaffFirstName'] = ObjectSerializer::toQueryValue($staff_first_name);
        }
        // query params
        if ($staff_surname !== null) {
            $queryParams['StaffSurname'] = ObjectSerializer::toQueryValue($staff_surname);
        }
        // query params
        if ($order_status !== null) {
            $queryParams['OrderStatus'] = ObjectSerializer::toQueryValue($order_status);
        }
        // query params
        if ($order_type !== null) {
            $queryParams['OrderType'] = ObjectSerializer::toQueryValue($order_type);
        }
        // query params
        if ($order_supplier_type !== null) {
            $queryParams['OrderSupplierType'] = ObjectSerializer::toQueryValue($order_supplier_type);
        }
        // query params
        if ($tax_total !== null) {
            $queryParams['TaxTotal'] = ObjectSerializer::toQueryValue($tax_total);
        }
        // query params
        if ($use_in_transit !== null) {
            $queryParams['UseInTransit'] = ObjectSerializer::toQueryValue($use_in_transit);
        }
        // query params
        if ($reference !== null) {
            $queryParams['Reference'] = ObjectSerializer::toQueryValue($reference);
        }
        // query params
        if ($total_gross !== null) {
            $queryParams['TotalGross'] = ObjectSerializer::toQueryValue($total_gross);
        }
        // query params
        if ($total_net !== null) {
            $queryParams['TotalNet'] = ObjectSerializer::toQueryValue($total_net);
        }
        // query params
        if ($total_fx !== null) {
            $queryParams['TotalFx'] = ObjectSerializer::toQueryValue($total_fx);
        }
        // query params
        if ($notes !== null) {
            $queryParams['Notes'] = ObjectSerializer::toQueryValue($notes);
        }
        // query params
        if ($documents !== null) {
            $queryParams['Documents'] = ObjectSerializer::toQueryValue($documents);
        }
        // query params
        if ($custom_field_values !== null) {
            $queryParams['CustomFieldValues'] = ObjectSerializer::toQueryValue($custom_field_values);
        }
        // query params
        if ($lines !== null) {
            $queryParams['Lines'] = ObjectSerializer::toQueryValue($lines);
        }
        // query params
        if ($shipping_address_address_line1 !== null) {
            $queryParams['ShippingAddressAddressLine1'] = ObjectSerializer::toQueryValue($shipping_address_address_line1);
        }
        // query params
        if ($shipping_address_address_line2 !== null) {
            $queryParams['ShippingAddressAddressLine2'] = ObjectSerializer::toQueryValue($shipping_address_address_line2);
        }
        // query params
        if ($shipping_address_address_line3 !== null) {
            $queryParams['ShippingAddressAddressLine3'] = ObjectSerializer::toQueryValue($shipping_address_address_line3);
        }
        // query params
        if ($shipping_address_address_line4 !== null) {
            $queryParams['ShippingAddressAddressLine4'] = ObjectSerializer::toQueryValue($shipping_address_address_line4);
        }
        // query params
        if ($shipping_address_address_line5 !== null) {
            $queryParams['ShippingAddressAddressLine5'] = ObjectSerializer::toQueryValue($shipping_address_address_line5);
        }
        // query params
        if ($shipping_address_country !== null) {
            $queryParams['ShippingAddressCountry'] = ObjectSerializer::toQueryValue($shipping_address_country);
        }
        // query params
        if ($shipping_address_post_code !== null) {
            $queryParams['ShippingAddressPostCode'] = ObjectSerializer::toQueryValue($shipping_address_post_code);
        }
        // query params
        if ($shipping_address_contact_name !== null) {
            $queryParams['ShippingAddressContactName'] = ObjectSerializer::toQueryValue($shipping_address_contact_name);
        }
        // query params
        if ($shipping_address_phone !== null) {
            $queryParams['ShippingAddressPhone'] = ObjectSerializer::toQueryValue($shipping_address_phone);
        }
        // query params
        if ($shipping_address_fax !== null) {
            $queryParams['ShippingAddressFax'] = ObjectSerializer::toQueryValue($shipping_address_fax);
        }
        // query params
        if ($shipping_address_spare1 !== null) {
            $queryParams['ShippingAddressSpare1'] = ObjectSerializer::toQueryValue($shipping_address_spare1);
        }
        // query params
        if ($shipping_address_spare2 !== null) {
            $queryParams['ShippingAddressSpare2'] = ObjectSerializer::toQueryValue($shipping_address_spare2);
        }
        // query params
        if ($shipping_address_spare3 !== null) {
            $queryParams['ShippingAddressSpare3'] = ObjectSerializer::toQueryValue($shipping_address_spare3);
        }
        // query params
        if ($shipping_address_spare4 !== null) {
            $queryParams['ShippingAddressSpare4'] = ObjectSerializer::toQueryValue($shipping_address_spare4);
        }
        // query params
        if ($shipping_address_spare5 !== null) {
            $queryParams['ShippingAddressSpare5'] = ObjectSerializer::toQueryValue($shipping_address_spare5);
        }
        // query params
        if ($freight !== null) {
            $queryParams['Freight'] = ObjectSerializer::toQueryValue($freight);
        }
        // query params
        if ($duty !== null) {
            $queryParams['Duty'] = ObjectSerializer::toQueryValue($duty);
        }
        // query params
        if ($insurance !== null) {
            $queryParams['Insurance'] = ObjectSerializer::toQueryValue($insurance);
        }
        // query params
        if ($freight_tax_id !== null) {
            $queryParams['FreightTaxID'] = ObjectSerializer::toQueryValue($freight_tax_id);
        }
        // query params
        if ($freight_tax_rate !== null) {
            $queryParams['FreightTaxRate'] = ObjectSerializer::toQueryValue($freight_tax_rate);
        }
        // query params
        if ($freight_tax_amount !== null) {
            $queryParams['FreightTaxAmount'] = ObjectSerializer::toQueryValue($freight_tax_amount);
        }
        // query params
        if ($duty_tax_id !== null) {
            $queryParams['DutyTaxID'] = ObjectSerializer::toQueryValue($duty_tax_id);
        }
        // query params
        if ($duty_tax_rate !== null) {
            $queryParams['DutyTaxRate'] = ObjectSerializer::toQueryValue($duty_tax_rate);
        }
        // query params
        if ($duty_tax_amount !== null) {
            $queryParams['DutyTaxAmount'] = ObjectSerializer::toQueryValue($duty_tax_amount);
        }
        // query params
        if ($insurance_tax_id !== null) {
            $queryParams['InsuranceTaxID'] = ObjectSerializer::toQueryValue($insurance_tax_id);
        }
        // query params
        if ($insurance_tax_rate !== null) {
            $queryParams['InsuranceTaxRate'] = ObjectSerializer::toQueryValue($insurance_tax_rate);
        }
        // query params
        if ($insurance_tax_amount !== null) {
            $queryParams['InsuranceTaxAmount'] = ObjectSerializer::toQueryValue($insurance_tax_amount);
        }
        // query params
        if ($freight_inc !== null) {
            $queryParams['FreightInc'] = ObjectSerializer::toQueryValue($freight_inc);
        }
        // query params
        if ($duty_inc !== null) {
            $queryParams['DutyInc'] = ObjectSerializer::toQueryValue($duty_inc);
        }
        // query params
        if ($insurance_inc !== null) {
            $queryParams['InsuranceInc'] = ObjectSerializer::toQueryValue($insurance_inc);
        }
        // header params
        if ($accept !== null) {
            $headerParams['Accept'] = ObjectSerializer::toHeaderValue($accept);
        }
        // header params
        if ($jiwa_stateful !== null) {
            $headerParams['jiwa-stateful'] = ObjectSerializer::toHeaderValue($jiwa_stateful);
        }

        // path params
        if ($purchase_order_id !== null) {
            $resourcePath = str_replace(
                '{' . 'PurchaseOrderID' . '}',
                ObjectSerializer::toPathValue($purchase_order_id),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;
        if (isset($body)) {
            $_tempBody = $body;
        }

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json', 'application/xml']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json', 'application/xml'],
                ['application/x-www-form-urlencoded', 'application/json', 'application/xml']
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            
            if($headers['Content-Type'] === 'application/json') {
                // \stdClass has no __toString(), so we should encode it manually
                if ($httpBody instanceof \stdClass) {
                    $httpBody = \GuzzleHttp\json_encode($httpBody);
                }
                // array has no __toString(), so we should encode it manually
                if(is_array($httpBody)) {
                    $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($httpBody));
                }
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\Query::build($formParams);
            }
        }

        // this endpoint requires HTTP basic authentication
        if ($this->config->getUsername() !== null || $this->config->getPassword() !== null) {
            $headers['Authorization'] = 'Basic ' . base64_encode($this->config->getUsername() . ":" . $this->config->getPassword());
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\Query::build($queryParams);
        return new Request(
            'PATCH',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation purchaseOrderPOSTRequestPost
     *
     * Creates a purchase order.
     *
     * @param  string $accept Accept Header (required)
     * @param  bool $jiwa_stateful Stateful indicator (optional)
     * @param  string $creditor_rec_id creditor_rec_id (optional)
     * @param  string $creditor_account_no creditor_account_no (optional)
     * @param  string $creditor_name creditor_name (optional)
     * @param  string $creditor_warehouse_rec_id creditor_warehouse_rec_id (optional)
     * @param  string $creditor_warehouse_description creditor_warehouse_description (optional)
     * @param  string $logical_warehouse_residing_in_rec_id logical_warehouse_residing_in_rec_id (optional)
     * @param  string $logical_warehouse_residing_in_description logical_warehouse_residing_in_description (optional)
     * @param  string $physical_warehouse_residing_in_rec_id physical_warehouse_residing_in_rec_id (optional)
     * @param  string $physical_warehouse_residing_in_description physical_warehouse_residing_in_description (optional)
     * @param  string $logical_warehouse_ordering_from_rec_id logical_warehouse_ordering_from_rec_id (optional)
     * @param  string $logical_warehouse_ordering_from_description logical_warehouse_ordering_from_description (optional)
     * @param  string $physical_warehouse_ordering_from_rec_id physical_warehouse_ordering_from_rec_id (optional)
     * @param  string $physical_warehouse_ordering_from_description physical_warehouse_ordering_from_description (optional)
     * @param  string $in_transit_logical_warehouse_rec_id in_transit_logical_warehouse_rec_id (optional)
     * @param  string $in_transit_logical_warehouse_description in_transit_logical_warehouse_description (optional)
     * @param  string $in_transit_physical_warehouse_rec_id in_transit_physical_warehouse_rec_id (optional)
     * @param  string $in_transit_physical_warehouse_description in_transit_physical_warehouse_description (optional)
     * @param  string $order_no order_no (optional)
     * @param  \DateTime $order_date order_date (optional)
     * @param  string $attention attention (optional)
     * @param  string $contact_by contact_by (optional)
     * @param  string $staff_id staff_id (optional)
     * @param  string $staff_user_name staff_user_name (optional)
     * @param  string $staff_title staff_title (optional)
     * @param  string $staff_first_name staff_first_name (optional)
     * @param  string $staff_surname staff_surname (optional)
     * @param  string $order_status order_status (optional)
     * @param  string $order_type order_type (optional)
     * @param  string $order_supplier_type order_supplier_type (optional)
     * @param  double $tax_total tax_total (optional)
     * @param  bool $use_in_transit use_in_transit (optional)
     * @param  string $reference reference (optional)
     * @param  double $total_gross total_gross (optional)
     * @param  double $total_net total_net (optional)
     * @param  double $total_fx total_fx (optional)
     * @param  string $notes notes (optional)
     * @param  string $documents documents (optional)
     * @param  string $custom_field_values custom_field_values (optional)
     * @param  string $lines lines (optional)
     * @param  string $shipping_address_address_line1 shipping_address_address_line1 (optional)
     * @param  string $shipping_address_address_line2 shipping_address_address_line2 (optional)
     * @param  string $shipping_address_address_line3 shipping_address_address_line3 (optional)
     * @param  string $shipping_address_address_line4 shipping_address_address_line4 (optional)
     * @param  string $shipping_address_address_line5 shipping_address_address_line5 (optional)
     * @param  string $shipping_address_country shipping_address_country (optional)
     * @param  string $shipping_address_post_code shipping_address_post_code (optional)
     * @param  string $shipping_address_contact_name shipping_address_contact_name (optional)
     * @param  string $shipping_address_phone shipping_address_phone (optional)
     * @param  string $shipping_address_fax shipping_address_fax (optional)
     * @param  string $shipping_address_spare1 shipping_address_spare1 (optional)
     * @param  string $shipping_address_spare2 shipping_address_spare2 (optional)
     * @param  string $shipping_address_spare3 shipping_address_spare3 (optional)
     * @param  string $shipping_address_spare4 shipping_address_spare4 (optional)
     * @param  string $shipping_address_spare5 shipping_address_spare5 (optional)
     * @param  double $freight freight (optional)
     * @param  double $duty duty (optional)
     * @param  double $insurance insurance (optional)
     * @param  string $freight_tax_id freight_tax_id (optional)
     * @param  double $freight_tax_rate freight_tax_rate (optional)
     * @param  double $freight_tax_amount freight_tax_amount (optional)
     * @param  string $duty_tax_id duty_tax_id (optional)
     * @param  double $duty_tax_rate duty_tax_rate (optional)
     * @param  double $duty_tax_amount duty_tax_amount (optional)
     * @param  string $insurance_tax_id insurance_tax_id (optional)
     * @param  double $insurance_tax_rate insurance_tax_rate (optional)
     * @param  double $insurance_tax_amount insurance_tax_amount (optional)
     * @param  double $freight_inc freight_inc (optional)
     * @param  double $duty_inc duty_inc (optional)
     * @param  double $insurance_inc insurance_inc (optional)
     * @param  \Jiwa\JiwaModel\PurchaseOrderPOSTRequest $body body (optional)
     *
     * @throws \Jiwa\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Jiwa\JiwaModel\PurchaseOrder
     */
    public function purchaseOrderPOSTRequestPost($accept, $jiwa_stateful = null, $creditor_rec_id = null, $creditor_account_no = null, $creditor_name = null, $creditor_warehouse_rec_id = null, $creditor_warehouse_description = null, $logical_warehouse_residing_in_rec_id = null, $logical_warehouse_residing_in_description = null, $physical_warehouse_residing_in_rec_id = null, $physical_warehouse_residing_in_description = null, $logical_warehouse_ordering_from_rec_id = null, $logical_warehouse_ordering_from_description = null, $physical_warehouse_ordering_from_rec_id = null, $physical_warehouse_ordering_from_description = null, $in_transit_logical_warehouse_rec_id = null, $in_transit_logical_warehouse_description = null, $in_transit_physical_warehouse_rec_id = null, $in_transit_physical_warehouse_description = null, $order_no = null, $order_date = null, $attention = null, $contact_by = null, $staff_id = null, $staff_user_name = null, $staff_title = null, $staff_first_name = null, $staff_surname = null, $order_status = null, $order_type = null, $order_supplier_type = null, $tax_total = null, $use_in_transit = null, $reference = null, $total_gross = null, $total_net = null, $total_fx = null, $notes = null, $documents = null, $custom_field_values = null, $lines = null, $shipping_address_address_line1 = null, $shipping_address_address_line2 = null, $shipping_address_address_line3 = null, $shipping_address_address_line4 = null, $shipping_address_address_line5 = null, $shipping_address_country = null, $shipping_address_post_code = null, $shipping_address_contact_name = null, $shipping_address_phone = null, $shipping_address_fax = null, $shipping_address_spare1 = null, $shipping_address_spare2 = null, $shipping_address_spare3 = null, $shipping_address_spare4 = null, $shipping_address_spare5 = null, $freight = null, $duty = null, $insurance = null, $freight_tax_id = null, $freight_tax_rate = null, $freight_tax_amount = null, $duty_tax_id = null, $duty_tax_rate = null, $duty_tax_amount = null, $insurance_tax_id = null, $insurance_tax_rate = null, $insurance_tax_amount = null, $freight_inc = null, $duty_inc = null, $insurance_inc = null, $body = null)
    {
        list($response) = $this->purchaseOrderPOSTRequestPostWithHttpInfo($accept, $jiwa_stateful, $creditor_rec_id, $creditor_account_no, $creditor_name, $creditor_warehouse_rec_id, $creditor_warehouse_description, $logical_warehouse_residing_in_rec_id, $logical_warehouse_residing_in_description, $physical_warehouse_residing_in_rec_id, $physical_warehouse_residing_in_description, $logical_warehouse_ordering_from_rec_id, $logical_warehouse_ordering_from_description, $physical_warehouse_ordering_from_rec_id, $physical_warehouse_ordering_from_description, $in_transit_logical_warehouse_rec_id, $in_transit_logical_warehouse_description, $in_transit_physical_warehouse_rec_id, $in_transit_physical_warehouse_description, $order_no, $order_date, $attention, $contact_by, $staff_id, $staff_user_name, $staff_title, $staff_first_name, $staff_surname, $order_status, $order_type, $order_supplier_type, $tax_total, $use_in_transit, $reference, $total_gross, $total_net, $total_fx, $notes, $documents, $custom_field_values, $lines, $shipping_address_address_line1, $shipping_address_address_line2, $shipping_address_address_line3, $shipping_address_address_line4, $shipping_address_address_line5, $shipping_address_country, $shipping_address_post_code, $shipping_address_contact_name, $shipping_address_phone, $shipping_address_fax, $shipping_address_spare1, $shipping_address_spare2, $shipping_address_spare3, $shipping_address_spare4, $shipping_address_spare5, $freight, $duty, $insurance, $freight_tax_id, $freight_tax_rate, $freight_tax_amount, $duty_tax_id, $duty_tax_rate, $duty_tax_amount, $insurance_tax_id, $insurance_tax_rate, $insurance_tax_amount, $freight_inc, $duty_inc, $insurance_inc, $body);
        return $response;
    }

    /**
     * Operation purchaseOrderPOSTRequestPostWithHttpInfo
     *
     * Creates a purchase order.
     *
     * @param  string $accept Accept Header (required)
     * @param  bool $jiwa_stateful Stateful indicator (optional)
     * @param  string $creditor_rec_id (optional)
     * @param  string $creditor_account_no (optional)
     * @param  string $creditor_name (optional)
     * @param  string $creditor_warehouse_rec_id (optional)
     * @param  string $creditor_warehouse_description (optional)
     * @param  string $logical_warehouse_residing_in_rec_id (optional)
     * @param  string $logical_warehouse_residing_in_description (optional)
     * @param  string $physical_warehouse_residing_in_rec_id (optional)
     * @param  string $physical_warehouse_residing_in_description (optional)
     * @param  string $logical_warehouse_ordering_from_rec_id (optional)
     * @param  string $logical_warehouse_ordering_from_description (optional)
     * @param  string $physical_warehouse_ordering_from_rec_id (optional)
     * @param  string $physical_warehouse_ordering_from_description (optional)
     * @param  string $in_transit_logical_warehouse_rec_id (optional)
     * @param  string $in_transit_logical_warehouse_description (optional)
     * @param  string $in_transit_physical_warehouse_rec_id (optional)
     * @param  string $in_transit_physical_warehouse_description (optional)
     * @param  string $order_no (optional)
     * @param  \DateTime $order_date (optional)
     * @param  string $attention (optional)
     * @param  string $contact_by (optional)
     * @param  string $staff_id (optional)
     * @param  string $staff_user_name (optional)
     * @param  string $staff_title (optional)
     * @param  string $staff_first_name (optional)
     * @param  string $staff_surname (optional)
     * @param  string $order_status (optional)
     * @param  string $order_type (optional)
     * @param  string $order_supplier_type (optional)
     * @param  double $tax_total (optional)
     * @param  bool $use_in_transit (optional)
     * @param  string $reference (optional)
     * @param  double $total_gross (optional)
     * @param  double $total_net (optional)
     * @param  double $total_fx (optional)
     * @param  string $notes (optional)
     * @param  string $documents (optional)
     * @param  string $custom_field_values (optional)
     * @param  string $lines (optional)
     * @param  string $shipping_address_address_line1 (optional)
     * @param  string $shipping_address_address_line2 (optional)
     * @param  string $shipping_address_address_line3 (optional)
     * @param  string $shipping_address_address_line4 (optional)
     * @param  string $shipping_address_address_line5 (optional)
     * @param  string $shipping_address_country (optional)
     * @param  string $shipping_address_post_code (optional)
     * @param  string $shipping_address_contact_name (optional)
     * @param  string $shipping_address_phone (optional)
     * @param  string $shipping_address_fax (optional)
     * @param  string $shipping_address_spare1 (optional)
     * @param  string $shipping_address_spare2 (optional)
     * @param  string $shipping_address_spare3 (optional)
     * @param  string $shipping_address_spare4 (optional)
     * @param  string $shipping_address_spare5 (optional)
     * @param  double $freight (optional)
     * @param  double $duty (optional)
     * @param  double $insurance (optional)
     * @param  string $freight_tax_id (optional)
     * @param  double $freight_tax_rate (optional)
     * @param  double $freight_tax_amount (optional)
     * @param  string $duty_tax_id (optional)
     * @param  double $duty_tax_rate (optional)
     * @param  double $duty_tax_amount (optional)
     * @param  string $insurance_tax_id (optional)
     * @param  double $insurance_tax_rate (optional)
     * @param  double $insurance_tax_amount (optional)
     * @param  double $freight_inc (optional)
     * @param  double $duty_inc (optional)
     * @param  double $insurance_inc (optional)
     * @param  \Jiwa\JiwaModel\PurchaseOrderPOSTRequest $body (optional)
     *
     * @throws \Jiwa\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Jiwa\JiwaModel\PurchaseOrder, HTTP status code, HTTP response headers (array of strings)
     */
    public function purchaseOrderPOSTRequestPostWithHttpInfo($accept, $jiwa_stateful = null, $creditor_rec_id = null, $creditor_account_no = null, $creditor_name = null, $creditor_warehouse_rec_id = null, $creditor_warehouse_description = null, $logical_warehouse_residing_in_rec_id = null, $logical_warehouse_residing_in_description = null, $physical_warehouse_residing_in_rec_id = null, $physical_warehouse_residing_in_description = null, $logical_warehouse_ordering_from_rec_id = null, $logical_warehouse_ordering_from_description = null, $physical_warehouse_ordering_from_rec_id = null, $physical_warehouse_ordering_from_description = null, $in_transit_logical_warehouse_rec_id = null, $in_transit_logical_warehouse_description = null, $in_transit_physical_warehouse_rec_id = null, $in_transit_physical_warehouse_description = null, $order_no = null, $order_date = null, $attention = null, $contact_by = null, $staff_id = null, $staff_user_name = null, $staff_title = null, $staff_first_name = null, $staff_surname = null, $order_status = null, $order_type = null, $order_supplier_type = null, $tax_total = null, $use_in_transit = null, $reference = null, $total_gross = null, $total_net = null, $total_fx = null, $notes = null, $documents = null, $custom_field_values = null, $lines = null, $shipping_address_address_line1 = null, $shipping_address_address_line2 = null, $shipping_address_address_line3 = null, $shipping_address_address_line4 = null, $shipping_address_address_line5 = null, $shipping_address_country = null, $shipping_address_post_code = null, $shipping_address_contact_name = null, $shipping_address_phone = null, $shipping_address_fax = null, $shipping_address_spare1 = null, $shipping_address_spare2 = null, $shipping_address_spare3 = null, $shipping_address_spare4 = null, $shipping_address_spare5 = null, $freight = null, $duty = null, $insurance = null, $freight_tax_id = null, $freight_tax_rate = null, $freight_tax_amount = null, $duty_tax_id = null, $duty_tax_rate = null, $duty_tax_amount = null, $insurance_tax_id = null, $insurance_tax_rate = null, $insurance_tax_amount = null, $freight_inc = null, $duty_inc = null, $insurance_inc = null, $body = null)
    {
        $returnType = '\Jiwa\JiwaModel\PurchaseOrder';
        $request = $this->purchaseOrderPOSTRequestPostRequest($accept, $jiwa_stateful, $creditor_rec_id, $creditor_account_no, $creditor_name, $creditor_warehouse_rec_id, $creditor_warehouse_description, $logical_warehouse_residing_in_rec_id, $logical_warehouse_residing_in_description, $physical_warehouse_residing_in_rec_id, $physical_warehouse_residing_in_description, $logical_warehouse_ordering_from_rec_id, $logical_warehouse_ordering_from_description, $physical_warehouse_ordering_from_rec_id, $physical_warehouse_ordering_from_description, $in_transit_logical_warehouse_rec_id, $in_transit_logical_warehouse_description, $in_transit_physical_warehouse_rec_id, $in_transit_physical_warehouse_description, $order_no, $order_date, $attention, $contact_by, $staff_id, $staff_user_name, $staff_title, $staff_first_name, $staff_surname, $order_status, $order_type, $order_supplier_type, $tax_total, $use_in_transit, $reference, $total_gross, $total_net, $total_fx, $notes, $documents, $custom_field_values, $lines, $shipping_address_address_line1, $shipping_address_address_line2, $shipping_address_address_line3, $shipping_address_address_line4, $shipping_address_address_line5, $shipping_address_country, $shipping_address_post_code, $shipping_address_contact_name, $shipping_address_phone, $shipping_address_fax, $shipping_address_spare1, $shipping_address_spare2, $shipping_address_spare3, $shipping_address_spare4, $shipping_address_spare5, $freight, $duty, $insurance, $freight_tax_id, $freight_tax_rate, $freight_tax_amount, $duty_tax_id, $duty_tax_rate, $duty_tax_amount, $insurance_tax_id, $insurance_tax_rate, $insurance_tax_amount, $freight_inc, $duty_inc, $insurance_inc, $body);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Jiwa\JiwaModel\PurchaseOrder',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 401:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Jiwa\JiwaModel\PurchaseOrder',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 403:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Jiwa\JiwaModel\PurchaseOrder',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 201:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Jiwa\JiwaModel\PurchaseOrder',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation purchaseOrderPOSTRequestPostAsync
     *
     * Creates a purchase order.
     *
     * @param  string $accept Accept Header (required)
     * @param  bool $jiwa_stateful Stateful indicator (optional)
     * @param  string $creditor_rec_id (optional)
     * @param  string $creditor_account_no (optional)
     * @param  string $creditor_name (optional)
     * @param  string $creditor_warehouse_rec_id (optional)
     * @param  string $creditor_warehouse_description (optional)
     * @param  string $logical_warehouse_residing_in_rec_id (optional)
     * @param  string $logical_warehouse_residing_in_description (optional)
     * @param  string $physical_warehouse_residing_in_rec_id (optional)
     * @param  string $physical_warehouse_residing_in_description (optional)
     * @param  string $logical_warehouse_ordering_from_rec_id (optional)
     * @param  string $logical_warehouse_ordering_from_description (optional)
     * @param  string $physical_warehouse_ordering_from_rec_id (optional)
     * @param  string $physical_warehouse_ordering_from_description (optional)
     * @param  string $in_transit_logical_warehouse_rec_id (optional)
     * @param  string $in_transit_logical_warehouse_description (optional)
     * @param  string $in_transit_physical_warehouse_rec_id (optional)
     * @param  string $in_transit_physical_warehouse_description (optional)
     * @param  string $order_no (optional)
     * @param  \DateTime $order_date (optional)
     * @param  string $attention (optional)
     * @param  string $contact_by (optional)
     * @param  string $staff_id (optional)
     * @param  string $staff_user_name (optional)
     * @param  string $staff_title (optional)
     * @param  string $staff_first_name (optional)
     * @param  string $staff_surname (optional)
     * @param  string $order_status (optional)
     * @param  string $order_type (optional)
     * @param  string $order_supplier_type (optional)
     * @param  double $tax_total (optional)
     * @param  bool $use_in_transit (optional)
     * @param  string $reference (optional)
     * @param  double $total_gross (optional)
     * @param  double $total_net (optional)
     * @param  double $total_fx (optional)
     * @param  string $notes (optional)
     * @param  string $documents (optional)
     * @param  string $custom_field_values (optional)
     * @param  string $lines (optional)
     * @param  string $shipping_address_address_line1 (optional)
     * @param  string $shipping_address_address_line2 (optional)
     * @param  string $shipping_address_address_line3 (optional)
     * @param  string $shipping_address_address_line4 (optional)
     * @param  string $shipping_address_address_line5 (optional)
     * @param  string $shipping_address_country (optional)
     * @param  string $shipping_address_post_code (optional)
     * @param  string $shipping_address_contact_name (optional)
     * @param  string $shipping_address_phone (optional)
     * @param  string $shipping_address_fax (optional)
     * @param  string $shipping_address_spare1 (optional)
     * @param  string $shipping_address_spare2 (optional)
     * @param  string $shipping_address_spare3 (optional)
     * @param  string $shipping_address_spare4 (optional)
     * @param  string $shipping_address_spare5 (optional)
     * @param  double $freight (optional)
     * @param  double $duty (optional)
     * @param  double $insurance (optional)
     * @param  string $freight_tax_id (optional)
     * @param  double $freight_tax_rate (optional)
     * @param  double $freight_tax_amount (optional)
     * @param  string $duty_tax_id (optional)
     * @param  double $duty_tax_rate (optional)
     * @param  double $duty_tax_amount (optional)
     * @param  string $insurance_tax_id (optional)
     * @param  double $insurance_tax_rate (optional)
     * @param  double $insurance_tax_amount (optional)
     * @param  double $freight_inc (optional)
     * @param  double $duty_inc (optional)
     * @param  double $insurance_inc (optional)
     * @param  \Jiwa\JiwaModel\PurchaseOrderPOSTRequest $body (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function purchaseOrderPOSTRequestPostAsync($accept, $jiwa_stateful = null, $creditor_rec_id = null, $creditor_account_no = null, $creditor_name = null, $creditor_warehouse_rec_id = null, $creditor_warehouse_description = null, $logical_warehouse_residing_in_rec_id = null, $logical_warehouse_residing_in_description = null, $physical_warehouse_residing_in_rec_id = null, $physical_warehouse_residing_in_description = null, $logical_warehouse_ordering_from_rec_id = null, $logical_warehouse_ordering_from_description = null, $physical_warehouse_ordering_from_rec_id = null, $physical_warehouse_ordering_from_description = null, $in_transit_logical_warehouse_rec_id = null, $in_transit_logical_warehouse_description = null, $in_transit_physical_warehouse_rec_id = null, $in_transit_physical_warehouse_description = null, $order_no = null, $order_date = null, $attention = null, $contact_by = null, $staff_id = null, $staff_user_name = null, $staff_title = null, $staff_first_name = null, $staff_surname = null, $order_status = null, $order_type = null, $order_supplier_type = null, $tax_total = null, $use_in_transit = null, $reference = null, $total_gross = null, $total_net = null, $total_fx = null, $notes = null, $documents = null, $custom_field_values = null, $lines = null, $shipping_address_address_line1 = null, $shipping_address_address_line2 = null, $shipping_address_address_line3 = null, $shipping_address_address_line4 = null, $shipping_address_address_line5 = null, $shipping_address_country = null, $shipping_address_post_code = null, $shipping_address_contact_name = null, $shipping_address_phone = null, $shipping_address_fax = null, $shipping_address_spare1 = null, $shipping_address_spare2 = null, $shipping_address_spare3 = null, $shipping_address_spare4 = null, $shipping_address_spare5 = null, $freight = null, $duty = null, $insurance = null, $freight_tax_id = null, $freight_tax_rate = null, $freight_tax_amount = null, $duty_tax_id = null, $duty_tax_rate = null, $duty_tax_amount = null, $insurance_tax_id = null, $insurance_tax_rate = null, $insurance_tax_amount = null, $freight_inc = null, $duty_inc = null, $insurance_inc = null, $body = null)
    {
        return $this->purchaseOrderPOSTRequestPostAsyncWithHttpInfo($accept, $jiwa_stateful, $creditor_rec_id, $creditor_account_no, $creditor_name, $creditor_warehouse_rec_id, $creditor_warehouse_description, $logical_warehouse_residing_in_rec_id, $logical_warehouse_residing_in_description, $physical_warehouse_residing_in_rec_id, $physical_warehouse_residing_in_description, $logical_warehouse_ordering_from_rec_id, $logical_warehouse_ordering_from_description, $physical_warehouse_ordering_from_rec_id, $physical_warehouse_ordering_from_description, $in_transit_logical_warehouse_rec_id, $in_transit_logical_warehouse_description, $in_transit_physical_warehouse_rec_id, $in_transit_physical_warehouse_description, $order_no, $order_date, $attention, $contact_by, $staff_id, $staff_user_name, $staff_title, $staff_first_name, $staff_surname, $order_status, $order_type, $order_supplier_type, $tax_total, $use_in_transit, $reference, $total_gross, $total_net, $total_fx, $notes, $documents, $custom_field_values, $lines, $shipping_address_address_line1, $shipping_address_address_line2, $shipping_address_address_line3, $shipping_address_address_line4, $shipping_address_address_line5, $shipping_address_country, $shipping_address_post_code, $shipping_address_contact_name, $shipping_address_phone, $shipping_address_fax, $shipping_address_spare1, $shipping_address_spare2, $shipping_address_spare3, $shipping_address_spare4, $shipping_address_spare5, $freight, $duty, $insurance, $freight_tax_id, $freight_tax_rate, $freight_tax_amount, $duty_tax_id, $duty_tax_rate, $duty_tax_amount, $insurance_tax_id, $insurance_tax_rate, $insurance_tax_amount, $freight_inc, $duty_inc, $insurance_inc, $body)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation purchaseOrderPOSTRequestPostAsyncWithHttpInfo
     *
     * Creates a purchase order.
     *
     * @param  string $accept Accept Header (required)
     * @param  bool $jiwa_stateful Stateful indicator (optional)
     * @param  string $creditor_rec_id (optional)
     * @param  string $creditor_account_no (optional)
     * @param  string $creditor_name (optional)
     * @param  string $creditor_warehouse_rec_id (optional)
     * @param  string $creditor_warehouse_description (optional)
     * @param  string $logical_warehouse_residing_in_rec_id (optional)
     * @param  string $logical_warehouse_residing_in_description (optional)
     * @param  string $physical_warehouse_residing_in_rec_id (optional)
     * @param  string $physical_warehouse_residing_in_description (optional)
     * @param  string $logical_warehouse_ordering_from_rec_id (optional)
     * @param  string $logical_warehouse_ordering_from_description (optional)
     * @param  string $physical_warehouse_ordering_from_rec_id (optional)
     * @param  string $physical_warehouse_ordering_from_description (optional)
     * @param  string $in_transit_logical_warehouse_rec_id (optional)
     * @param  string $in_transit_logical_warehouse_description (optional)
     * @param  string $in_transit_physical_warehouse_rec_id (optional)
     * @param  string $in_transit_physical_warehouse_description (optional)
     * @param  string $order_no (optional)
     * @param  \DateTime $order_date (optional)
     * @param  string $attention (optional)
     * @param  string $contact_by (optional)
     * @param  string $staff_id (optional)
     * @param  string $staff_user_name (optional)
     * @param  string $staff_title (optional)
     * @param  string $staff_first_name (optional)
     * @param  string $staff_surname (optional)
     * @param  string $order_status (optional)
     * @param  string $order_type (optional)
     * @param  string $order_supplier_type (optional)
     * @param  double $tax_total (optional)
     * @param  bool $use_in_transit (optional)
     * @param  string $reference (optional)
     * @param  double $total_gross (optional)
     * @param  double $total_net (optional)
     * @param  double $total_fx (optional)
     * @param  string $notes (optional)
     * @param  string $documents (optional)
     * @param  string $custom_field_values (optional)
     * @param  string $lines (optional)
     * @param  string $shipping_address_address_line1 (optional)
     * @param  string $shipping_address_address_line2 (optional)
     * @param  string $shipping_address_address_line3 (optional)
     * @param  string $shipping_address_address_line4 (optional)
     * @param  string $shipping_address_address_line5 (optional)
     * @param  string $shipping_address_country (optional)
     * @param  string $shipping_address_post_code (optional)
     * @param  string $shipping_address_contact_name (optional)
     * @param  string $shipping_address_phone (optional)
     * @param  string $shipping_address_fax (optional)
     * @param  string $shipping_address_spare1 (optional)
     * @param  string $shipping_address_spare2 (optional)
     * @param  string $shipping_address_spare3 (optional)
     * @param  string $shipping_address_spare4 (optional)
     * @param  string $shipping_address_spare5 (optional)
     * @param  double $freight (optional)
     * @param  double $duty (optional)
     * @param  double $insurance (optional)
     * @param  string $freight_tax_id (optional)
     * @param  double $freight_tax_rate (optional)
     * @param  double $freight_tax_amount (optional)
     * @param  string $duty_tax_id (optional)
     * @param  double $duty_tax_rate (optional)
     * @param  double $duty_tax_amount (optional)
     * @param  string $insurance_tax_id (optional)
     * @param  double $insurance_tax_rate (optional)
     * @param  double $insurance_tax_amount (optional)
     * @param  double $freight_inc (optional)
     * @param  double $duty_inc (optional)
     * @param  double $insurance_inc (optional)
     * @param  \Jiwa\JiwaModel\PurchaseOrderPOSTRequest $body (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function purchaseOrderPOSTRequestPostAsyncWithHttpInfo($accept, $jiwa_stateful = null, $creditor_rec_id = null, $creditor_account_no = null, $creditor_name = null, $creditor_warehouse_rec_id = null, $creditor_warehouse_description = null, $logical_warehouse_residing_in_rec_id = null, $logical_warehouse_residing_in_description = null, $physical_warehouse_residing_in_rec_id = null, $physical_warehouse_residing_in_description = null, $logical_warehouse_ordering_from_rec_id = null, $logical_warehouse_ordering_from_description = null, $physical_warehouse_ordering_from_rec_id = null, $physical_warehouse_ordering_from_description = null, $in_transit_logical_warehouse_rec_id = null, $in_transit_logical_warehouse_description = null, $in_transit_physical_warehouse_rec_id = null, $in_transit_physical_warehouse_description = null, $order_no = null, $order_date = null, $attention = null, $contact_by = null, $staff_id = null, $staff_user_name = null, $staff_title = null, $staff_first_name = null, $staff_surname = null, $order_status = null, $order_type = null, $order_supplier_type = null, $tax_total = null, $use_in_transit = null, $reference = null, $total_gross = null, $total_net = null, $total_fx = null, $notes = null, $documents = null, $custom_field_values = null, $lines = null, $shipping_address_address_line1 = null, $shipping_address_address_line2 = null, $shipping_address_address_line3 = null, $shipping_address_address_line4 = null, $shipping_address_address_line5 = null, $shipping_address_country = null, $shipping_address_post_code = null, $shipping_address_contact_name = null, $shipping_address_phone = null, $shipping_address_fax = null, $shipping_address_spare1 = null, $shipping_address_spare2 = null, $shipping_address_spare3 = null, $shipping_address_spare4 = null, $shipping_address_spare5 = null, $freight = null, $duty = null, $insurance = null, $freight_tax_id = null, $freight_tax_rate = null, $freight_tax_amount = null, $duty_tax_id = null, $duty_tax_rate = null, $duty_tax_amount = null, $insurance_tax_id = null, $insurance_tax_rate = null, $insurance_tax_amount = null, $freight_inc = null, $duty_inc = null, $insurance_inc = null, $body = null)
    {
        $returnType = '\Jiwa\JiwaModel\PurchaseOrder';
        $request = $this->purchaseOrderPOSTRequestPostRequest($accept, $jiwa_stateful, $creditor_rec_id, $creditor_account_no, $creditor_name, $creditor_warehouse_rec_id, $creditor_warehouse_description, $logical_warehouse_residing_in_rec_id, $logical_warehouse_residing_in_description, $physical_warehouse_residing_in_rec_id, $physical_warehouse_residing_in_description, $logical_warehouse_ordering_from_rec_id, $logical_warehouse_ordering_from_description, $physical_warehouse_ordering_from_rec_id, $physical_warehouse_ordering_from_description, $in_transit_logical_warehouse_rec_id, $in_transit_logical_warehouse_description, $in_transit_physical_warehouse_rec_id, $in_transit_physical_warehouse_description, $order_no, $order_date, $attention, $contact_by, $staff_id, $staff_user_name, $staff_title, $staff_first_name, $staff_surname, $order_status, $order_type, $order_supplier_type, $tax_total, $use_in_transit, $reference, $total_gross, $total_net, $total_fx, $notes, $documents, $custom_field_values, $lines, $shipping_address_address_line1, $shipping_address_address_line2, $shipping_address_address_line3, $shipping_address_address_line4, $shipping_address_address_line5, $shipping_address_country, $shipping_address_post_code, $shipping_address_contact_name, $shipping_address_phone, $shipping_address_fax, $shipping_address_spare1, $shipping_address_spare2, $shipping_address_spare3, $shipping_address_spare4, $shipping_address_spare5, $freight, $duty, $insurance, $freight_tax_id, $freight_tax_rate, $freight_tax_amount, $duty_tax_id, $duty_tax_rate, $duty_tax_amount, $insurance_tax_id, $insurance_tax_rate, $insurance_tax_amount, $freight_inc, $duty_inc, $insurance_inc, $body);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'purchaseOrderPOSTRequestPost'
     *
     * @param  string $accept Accept Header (required)
     * @param  bool $jiwa_stateful Stateful indicator (optional)
     * @param  string $creditor_rec_id (optional)
     * @param  string $creditor_account_no (optional)
     * @param  string $creditor_name (optional)
     * @param  string $creditor_warehouse_rec_id (optional)
     * @param  string $creditor_warehouse_description (optional)
     * @param  string $logical_warehouse_residing_in_rec_id (optional)
     * @param  string $logical_warehouse_residing_in_description (optional)
     * @param  string $physical_warehouse_residing_in_rec_id (optional)
     * @param  string $physical_warehouse_residing_in_description (optional)
     * @param  string $logical_warehouse_ordering_from_rec_id (optional)
     * @param  string $logical_warehouse_ordering_from_description (optional)
     * @param  string $physical_warehouse_ordering_from_rec_id (optional)
     * @param  string $physical_warehouse_ordering_from_description (optional)
     * @param  string $in_transit_logical_warehouse_rec_id (optional)
     * @param  string $in_transit_logical_warehouse_description (optional)
     * @param  string $in_transit_physical_warehouse_rec_id (optional)
     * @param  string $in_transit_physical_warehouse_description (optional)
     * @param  string $order_no (optional)
     * @param  \DateTime $order_date (optional)
     * @param  string $attention (optional)
     * @param  string $contact_by (optional)
     * @param  string $staff_id (optional)
     * @param  string $staff_user_name (optional)
     * @param  string $staff_title (optional)
     * @param  string $staff_first_name (optional)
     * @param  string $staff_surname (optional)
     * @param  string $order_status (optional)
     * @param  string $order_type (optional)
     * @param  string $order_supplier_type (optional)
     * @param  double $tax_total (optional)
     * @param  bool $use_in_transit (optional)
     * @param  string $reference (optional)
     * @param  double $total_gross (optional)
     * @param  double $total_net (optional)
     * @param  double $total_fx (optional)
     * @param  string $notes (optional)
     * @param  string $documents (optional)
     * @param  string $custom_field_values (optional)
     * @param  string $lines (optional)
     * @param  string $shipping_address_address_line1 (optional)
     * @param  string $shipping_address_address_line2 (optional)
     * @param  string $shipping_address_address_line3 (optional)
     * @param  string $shipping_address_address_line4 (optional)
     * @param  string $shipping_address_address_line5 (optional)
     * @param  string $shipping_address_country (optional)
     * @param  string $shipping_address_post_code (optional)
     * @param  string $shipping_address_contact_name (optional)
     * @param  string $shipping_address_phone (optional)
     * @param  string $shipping_address_fax (optional)
     * @param  string $shipping_address_spare1 (optional)
     * @param  string $shipping_address_spare2 (optional)
     * @param  string $shipping_address_spare3 (optional)
     * @param  string $shipping_address_spare4 (optional)
     * @param  string $shipping_address_spare5 (optional)
     * @param  double $freight (optional)
     * @param  double $duty (optional)
     * @param  double $insurance (optional)
     * @param  string $freight_tax_id (optional)
     * @param  double $freight_tax_rate (optional)
     * @param  double $freight_tax_amount (optional)
     * @param  string $duty_tax_id (optional)
     * @param  double $duty_tax_rate (optional)
     * @param  double $duty_tax_amount (optional)
     * @param  string $insurance_tax_id (optional)
     * @param  double $insurance_tax_rate (optional)
     * @param  double $insurance_tax_amount (optional)
     * @param  double $freight_inc (optional)
     * @param  double $duty_inc (optional)
     * @param  double $insurance_inc (optional)
     * @param  \Jiwa\JiwaModel\PurchaseOrderPOSTRequest $body (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function purchaseOrderPOSTRequestPostRequest($accept, $jiwa_stateful = null, $creditor_rec_id = null, $creditor_account_no = null, $creditor_name = null, $creditor_warehouse_rec_id = null, $creditor_warehouse_description = null, $logical_warehouse_residing_in_rec_id = null, $logical_warehouse_residing_in_description = null, $physical_warehouse_residing_in_rec_id = null, $physical_warehouse_residing_in_description = null, $logical_warehouse_ordering_from_rec_id = null, $logical_warehouse_ordering_from_description = null, $physical_warehouse_ordering_from_rec_id = null, $physical_warehouse_ordering_from_description = null, $in_transit_logical_warehouse_rec_id = null, $in_transit_logical_warehouse_description = null, $in_transit_physical_warehouse_rec_id = null, $in_transit_physical_warehouse_description = null, $order_no = null, $order_date = null, $attention = null, $contact_by = null, $staff_id = null, $staff_user_name = null, $staff_title = null, $staff_first_name = null, $staff_surname = null, $order_status = null, $order_type = null, $order_supplier_type = null, $tax_total = null, $use_in_transit = null, $reference = null, $total_gross = null, $total_net = null, $total_fx = null, $notes = null, $documents = null, $custom_field_values = null, $lines = null, $shipping_address_address_line1 = null, $shipping_address_address_line2 = null, $shipping_address_address_line3 = null, $shipping_address_address_line4 = null, $shipping_address_address_line5 = null, $shipping_address_country = null, $shipping_address_post_code = null, $shipping_address_contact_name = null, $shipping_address_phone = null, $shipping_address_fax = null, $shipping_address_spare1 = null, $shipping_address_spare2 = null, $shipping_address_spare3 = null, $shipping_address_spare4 = null, $shipping_address_spare5 = null, $freight = null, $duty = null, $insurance = null, $freight_tax_id = null, $freight_tax_rate = null, $freight_tax_amount = null, $duty_tax_id = null, $duty_tax_rate = null, $duty_tax_amount = null, $insurance_tax_id = null, $insurance_tax_rate = null, $insurance_tax_amount = null, $freight_inc = null, $duty_inc = null, $insurance_inc = null, $body = null)
    {
        // verify the required parameter 'accept' is set
        if ($accept === null || (is_array($accept) && count($accept) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $accept when calling purchaseOrderPOSTRequestPost'
            );
        }

        $resourcePath = '/PurchaseOrders/';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        if ($creditor_rec_id !== null) {
            $queryParams['CreditorRecID'] = ObjectSerializer::toQueryValue($creditor_rec_id);
        }
        // query params
        if ($creditor_account_no !== null) {
            $queryParams['CreditorAccountNo'] = ObjectSerializer::toQueryValue($creditor_account_no);
        }
        // query params
        if ($creditor_name !== null) {
            $queryParams['CreditorName'] = ObjectSerializer::toQueryValue($creditor_name);
        }
        // query params
        if ($creditor_warehouse_rec_id !== null) {
            $queryParams['CreditorWarehouseRecID'] = ObjectSerializer::toQueryValue($creditor_warehouse_rec_id);
        }
        // query params
        if ($creditor_warehouse_description !== null) {
            $queryParams['CreditorWarehouseDescription'] = ObjectSerializer::toQueryValue($creditor_warehouse_description);
        }
        // query params
        if ($logical_warehouse_residing_in_rec_id !== null) {
            $queryParams['LogicalWarehouseResidingInRecID'] = ObjectSerializer::toQueryValue($logical_warehouse_residing_in_rec_id);
        }
        // query params
        if ($logical_warehouse_residing_in_description !== null) {
            $queryParams['LogicalWarehouseResidingInDescription'] = ObjectSerializer::toQueryValue($logical_warehouse_residing_in_description);
        }
        // query params
        if ($physical_warehouse_residing_in_rec_id !== null) {
            $queryParams['PhysicalWarehouseResidingInRecID'] = ObjectSerializer::toQueryValue($physical_warehouse_residing_in_rec_id);
        }
        // query params
        if ($physical_warehouse_residing_in_description !== null) {
            $queryParams['PhysicalWarehouseResidingInDescription'] = ObjectSerializer::toQueryValue($physical_warehouse_residing_in_description);
        }
        // query params
        if ($logical_warehouse_ordering_from_rec_id !== null) {
            $queryParams['LogicalWarehouseOrderingFromRecID'] = ObjectSerializer::toQueryValue($logical_warehouse_ordering_from_rec_id);
        }
        // query params
        if ($logical_warehouse_ordering_from_description !== null) {
            $queryParams['LogicalWarehouseOrderingFromDescription'] = ObjectSerializer::toQueryValue($logical_warehouse_ordering_from_description);
        }
        // query params
        if ($physical_warehouse_ordering_from_rec_id !== null) {
            $queryParams['PhysicalWarehouseOrderingFromRecID'] = ObjectSerializer::toQueryValue($physical_warehouse_ordering_from_rec_id);
        }
        // query params
        if ($physical_warehouse_ordering_from_description !== null) {
            $queryParams['PhysicalWarehouseOrderingFromDescription'] = ObjectSerializer::toQueryValue($physical_warehouse_ordering_from_description);
        }
        // query params
        if ($in_transit_logical_warehouse_rec_id !== null) {
            $queryParams['InTransitLogicalWarehouseRecID'] = ObjectSerializer::toQueryValue($in_transit_logical_warehouse_rec_id);
        }
        // query params
        if ($in_transit_logical_warehouse_description !== null) {
            $queryParams['InTransitLogicalWarehouseDescription'] = ObjectSerializer::toQueryValue($in_transit_logical_warehouse_description);
        }
        // query params
        if ($in_transit_physical_warehouse_rec_id !== null) {
            $queryParams['InTransitPhysicalWarehouseRecID'] = ObjectSerializer::toQueryValue($in_transit_physical_warehouse_rec_id);
        }
        // query params
        if ($in_transit_physical_warehouse_description !== null) {
            $queryParams['InTransitPhysicalWarehouseDescription'] = ObjectSerializer::toQueryValue($in_transit_physical_warehouse_description);
        }
        // query params
        if ($order_no !== null) {
            $queryParams['OrderNo'] = ObjectSerializer::toQueryValue($order_no);
        }
        // query params
        if ($order_date !== null) {
            $queryParams['OrderDate'] = ObjectSerializer::toQueryValue($order_date);
        }
        // query params
        if ($attention !== null) {
            $queryParams['Attention'] = ObjectSerializer::toQueryValue($attention);
        }
        // query params
        if ($contact_by !== null) {
            $queryParams['ContactBy'] = ObjectSerializer::toQueryValue($contact_by);
        }
        // query params
        if ($staff_id !== null) {
            $queryParams['StaffID'] = ObjectSerializer::toQueryValue($staff_id);
        }
        // query params
        if ($staff_user_name !== null) {
            $queryParams['StaffUserName'] = ObjectSerializer::toQueryValue($staff_user_name);
        }
        // query params
        if ($staff_title !== null) {
            $queryParams['StaffTitle'] = ObjectSerializer::toQueryValue($staff_title);
        }
        // query params
        if ($staff_first_name !== null) {
            $queryParams['StaffFirstName'] = ObjectSerializer::toQueryValue($staff_first_name);
        }
        // query params
        if ($staff_surname !== null) {
            $queryParams['StaffSurname'] = ObjectSerializer::toQueryValue($staff_surname);
        }
        // query params
        if ($order_status !== null) {
            $queryParams['OrderStatus'] = ObjectSerializer::toQueryValue($order_status);
        }
        // query params
        if ($order_type !== null) {
            $queryParams['OrderType'] = ObjectSerializer::toQueryValue($order_type);
        }
        // query params
        if ($order_supplier_type !== null) {
            $queryParams['OrderSupplierType'] = ObjectSerializer::toQueryValue($order_supplier_type);
        }
        // query params
        if ($tax_total !== null) {
            $queryParams['TaxTotal'] = ObjectSerializer::toQueryValue($tax_total);
        }
        // query params
        if ($use_in_transit !== null) {
            $queryParams['UseInTransit'] = ObjectSerializer::toQueryValue($use_in_transit);
        }
        // query params
        if ($reference !== null) {
            $queryParams['Reference'] = ObjectSerializer::toQueryValue($reference);
        }
        // query params
        if ($total_gross !== null) {
            $queryParams['TotalGross'] = ObjectSerializer::toQueryValue($total_gross);
        }
        // query params
        if ($total_net !== null) {
            $queryParams['TotalNet'] = ObjectSerializer::toQueryValue($total_net);
        }
        // query params
        if ($total_fx !== null) {
            $queryParams['TotalFx'] = ObjectSerializer::toQueryValue($total_fx);
        }
        // query params
        if ($notes !== null) {
            $queryParams['Notes'] = ObjectSerializer::toQueryValue($notes);
        }
        // query params
        if ($documents !== null) {
            $queryParams['Documents'] = ObjectSerializer::toQueryValue($documents);
        }
        // query params
        if ($custom_field_values !== null) {
            $queryParams['CustomFieldValues'] = ObjectSerializer::toQueryValue($custom_field_values);
        }
        // query params
        if ($lines !== null) {
            $queryParams['Lines'] = ObjectSerializer::toQueryValue($lines);
        }
        // query params
        if ($shipping_address_address_line1 !== null) {
            $queryParams['ShippingAddressAddressLine1'] = ObjectSerializer::toQueryValue($shipping_address_address_line1);
        }
        // query params
        if ($shipping_address_address_line2 !== null) {
            $queryParams['ShippingAddressAddressLine2'] = ObjectSerializer::toQueryValue($shipping_address_address_line2);
        }
        // query params
        if ($shipping_address_address_line3 !== null) {
            $queryParams['ShippingAddressAddressLine3'] = ObjectSerializer::toQueryValue($shipping_address_address_line3);
        }
        // query params
        if ($shipping_address_address_line4 !== null) {
            $queryParams['ShippingAddressAddressLine4'] = ObjectSerializer::toQueryValue($shipping_address_address_line4);
        }
        // query params
        if ($shipping_address_address_line5 !== null) {
            $queryParams['ShippingAddressAddressLine5'] = ObjectSerializer::toQueryValue($shipping_address_address_line5);
        }
        // query params
        if ($shipping_address_country !== null) {
            $queryParams['ShippingAddressCountry'] = ObjectSerializer::toQueryValue($shipping_address_country);
        }
        // query params
        if ($shipping_address_post_code !== null) {
            $queryParams['ShippingAddressPostCode'] = ObjectSerializer::toQueryValue($shipping_address_post_code);
        }
        // query params
        if ($shipping_address_contact_name !== null) {
            $queryParams['ShippingAddressContactName'] = ObjectSerializer::toQueryValue($shipping_address_contact_name);
        }
        // query params
        if ($shipping_address_phone !== null) {
            $queryParams['ShippingAddressPhone'] = ObjectSerializer::toQueryValue($shipping_address_phone);
        }
        // query params
        if ($shipping_address_fax !== null) {
            $queryParams['ShippingAddressFax'] = ObjectSerializer::toQueryValue($shipping_address_fax);
        }
        // query params
        if ($shipping_address_spare1 !== null) {
            $queryParams['ShippingAddressSpare1'] = ObjectSerializer::toQueryValue($shipping_address_spare1);
        }
        // query params
        if ($shipping_address_spare2 !== null) {
            $queryParams['ShippingAddressSpare2'] = ObjectSerializer::toQueryValue($shipping_address_spare2);
        }
        // query params
        if ($shipping_address_spare3 !== null) {
            $queryParams['ShippingAddressSpare3'] = ObjectSerializer::toQueryValue($shipping_address_spare3);
        }
        // query params
        if ($shipping_address_spare4 !== null) {
            $queryParams['ShippingAddressSpare4'] = ObjectSerializer::toQueryValue($shipping_address_spare4);
        }
        // query params
        if ($shipping_address_spare5 !== null) {
            $queryParams['ShippingAddressSpare5'] = ObjectSerializer::toQueryValue($shipping_address_spare5);
        }
        // query params
        if ($freight !== null) {
            $queryParams['Freight'] = ObjectSerializer::toQueryValue($freight);
        }
        // query params
        if ($duty !== null) {
            $queryParams['Duty'] = ObjectSerializer::toQueryValue($duty);
        }
        // query params
        if ($insurance !== null) {
            $queryParams['Insurance'] = ObjectSerializer::toQueryValue($insurance);
        }
        // query params
        if ($freight_tax_id !== null) {
            $queryParams['FreightTaxID'] = ObjectSerializer::toQueryValue($freight_tax_id);
        }
        // query params
        if ($freight_tax_rate !== null) {
            $queryParams['FreightTaxRate'] = ObjectSerializer::toQueryValue($freight_tax_rate);
        }
        // query params
        if ($freight_tax_amount !== null) {
            $queryParams['FreightTaxAmount'] = ObjectSerializer::toQueryValue($freight_tax_amount);
        }
        // query params
        if ($duty_tax_id !== null) {
            $queryParams['DutyTaxID'] = ObjectSerializer::toQueryValue($duty_tax_id);
        }
        // query params
        if ($duty_tax_rate !== null) {
            $queryParams['DutyTaxRate'] = ObjectSerializer::toQueryValue($duty_tax_rate);
        }
        // query params
        if ($duty_tax_amount !== null) {
            $queryParams['DutyTaxAmount'] = ObjectSerializer::toQueryValue($duty_tax_amount);
        }
        // query params
        if ($insurance_tax_id !== null) {
            $queryParams['InsuranceTaxID'] = ObjectSerializer::toQueryValue($insurance_tax_id);
        }
        // query params
        if ($insurance_tax_rate !== null) {
            $queryParams['InsuranceTaxRate'] = ObjectSerializer::toQueryValue($insurance_tax_rate);
        }
        // query params
        if ($insurance_tax_amount !== null) {
            $queryParams['InsuranceTaxAmount'] = ObjectSerializer::toQueryValue($insurance_tax_amount);
        }
        // query params
        if ($freight_inc !== null) {
            $queryParams['FreightInc'] = ObjectSerializer::toQueryValue($freight_inc);
        }
        // query params
        if ($duty_inc !== null) {
            $queryParams['DutyInc'] = ObjectSerializer::toQueryValue($duty_inc);
        }
        // query params
        if ($insurance_inc !== null) {
            $queryParams['InsuranceInc'] = ObjectSerializer::toQueryValue($insurance_inc);
        }
        // header params
        if ($accept !== null) {
            $headerParams['Accept'] = ObjectSerializer::toHeaderValue($accept);
        }
        // header params
        if ($jiwa_stateful !== null) {
            $headerParams['jiwa-stateful'] = ObjectSerializer::toHeaderValue($jiwa_stateful);
        }


        // body params
        $_tempBody = null;
        if (isset($body)) {
            $_tempBody = $body;
        }

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json', 'application/xml']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json', 'application/xml'],
                ['application/x-www-form-urlencoded', 'application/json', 'application/xml']
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            
            if($headers['Content-Type'] === 'application/json') {
                // \stdClass has no __toString(), so we should encode it manually
                if ($httpBody instanceof \stdClass) {
                    $httpBody = \GuzzleHttp\json_encode($httpBody);
                }
                // array has no __toString(), so we should encode it manually
                if(is_array($httpBody)) {
                    $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($httpBody));
                }
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\Query::build($formParams);
            }
        }

        // this endpoint requires HTTP basic authentication
        if ($this->config->getUsername() !== null || $this->config->getPassword() !== null) {
            $headers['Authorization'] = 'Basic ' . base64_encode($this->config->getUsername() . ":" . $this->config->getPassword());
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\Query::build($queryParams);
        return new Request(
            'POST',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation purchaseOrderReceiveStockCREATEFromPOLinesRequestFromPurchaseOrderLinesPost
     *
     * Creates a landed cost book in if the purchase order is on a shipment, otherwise creates a goods received note from the supplied list of ReceivedPOLineQuantity.
     *
     * @param  string $accept Accept Header (required)
     * @param  bool $jiwa_stateful Stateful indicator (optional)
     * @param  string $received_po_line_quantities received_po_line_quantities (optional)
     * @param  \Jiwa\JiwaModel\PurchaseOrderReceiveStockCREATEFromPOLinesRequest $body body (optional)
     *
     * @throws \Jiwa\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Jiwa\JiwaModel\ReceivalDocument[]
     */
    public function purchaseOrderReceiveStockCREATEFromPOLinesRequestFromPurchaseOrderLinesPost($accept, $jiwa_stateful = null, $received_po_line_quantities = null, $body = null)
    {
        list($response) = $this->purchaseOrderReceiveStockCREATEFromPOLinesRequestFromPurchaseOrderLinesPostWithHttpInfo($accept, $jiwa_stateful, $received_po_line_quantities, $body);
        return $response;
    }

    /**
     * Operation purchaseOrderReceiveStockCREATEFromPOLinesRequestFromPurchaseOrderLinesPostWithHttpInfo
     *
     * Creates a landed cost book in if the purchase order is on a shipment, otherwise creates a goods received note from the supplied list of ReceivedPOLineQuantity.
     *
     * @param  string $accept Accept Header (required)
     * @param  bool $jiwa_stateful Stateful indicator (optional)
     * @param  string $received_po_line_quantities (optional)
     * @param  \Jiwa\JiwaModel\PurchaseOrderReceiveStockCREATEFromPOLinesRequest $body (optional)
     *
     * @throws \Jiwa\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Jiwa\JiwaModel\ReceivalDocument[], HTTP status code, HTTP response headers (array of strings)
     */
    public function purchaseOrderReceiveStockCREATEFromPOLinesRequestFromPurchaseOrderLinesPostWithHttpInfo($accept, $jiwa_stateful = null, $received_po_line_quantities = null, $body = null)
    {
        $returnType = '\Jiwa\JiwaModel\ReceivalDocument[]';
        $request = $this->purchaseOrderReceiveStockCREATEFromPOLinesRequestFromPurchaseOrderLinesPostRequest($accept, $jiwa_stateful, $received_po_line_quantities, $body);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Jiwa\JiwaModel\ReceivalDocument[]',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 201:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Jiwa\JiwaModel\ReceivalDocument[]',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 403:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Jiwa\JiwaModel\ReceivalDocument[]',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 404:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Jiwa\JiwaModel\ReceivalDocument[]',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 401:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Jiwa\JiwaModel\ReceivalDocument[]',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation purchaseOrderReceiveStockCREATEFromPOLinesRequestFromPurchaseOrderLinesPostAsync
     *
     * Creates a landed cost book in if the purchase order is on a shipment, otherwise creates a goods received note from the supplied list of ReceivedPOLineQuantity.
     *
     * @param  string $accept Accept Header (required)
     * @param  bool $jiwa_stateful Stateful indicator (optional)
     * @param  string $received_po_line_quantities (optional)
     * @param  \Jiwa\JiwaModel\PurchaseOrderReceiveStockCREATEFromPOLinesRequest $body (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function purchaseOrderReceiveStockCREATEFromPOLinesRequestFromPurchaseOrderLinesPostAsync($accept, $jiwa_stateful = null, $received_po_line_quantities = null, $body = null)
    {
        return $this->purchaseOrderReceiveStockCREATEFromPOLinesRequestFromPurchaseOrderLinesPostAsyncWithHttpInfo($accept, $jiwa_stateful, $received_po_line_quantities, $body)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation purchaseOrderReceiveStockCREATEFromPOLinesRequestFromPurchaseOrderLinesPostAsyncWithHttpInfo
     *
     * Creates a landed cost book in if the purchase order is on a shipment, otherwise creates a goods received note from the supplied list of ReceivedPOLineQuantity.
     *
     * @param  string $accept Accept Header (required)
     * @param  bool $jiwa_stateful Stateful indicator (optional)
     * @param  string $received_po_line_quantities (optional)
     * @param  \Jiwa\JiwaModel\PurchaseOrderReceiveStockCREATEFromPOLinesRequest $body (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function purchaseOrderReceiveStockCREATEFromPOLinesRequestFromPurchaseOrderLinesPostAsyncWithHttpInfo($accept, $jiwa_stateful = null, $received_po_line_quantities = null, $body = null)
    {
        $returnType = '\Jiwa\JiwaModel\ReceivalDocument[]';
        $request = $this->purchaseOrderReceiveStockCREATEFromPOLinesRequestFromPurchaseOrderLinesPostRequest($accept, $jiwa_stateful, $received_po_line_quantities, $body);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'purchaseOrderReceiveStockCREATEFromPOLinesRequestFromPurchaseOrderLinesPost'
     *
     * @param  string $accept Accept Header (required)
     * @param  bool $jiwa_stateful Stateful indicator (optional)
     * @param  string $received_po_line_quantities (optional)
     * @param  \Jiwa\JiwaModel\PurchaseOrderReceiveStockCREATEFromPOLinesRequest $body (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function purchaseOrderReceiveStockCREATEFromPOLinesRequestFromPurchaseOrderLinesPostRequest($accept, $jiwa_stateful = null, $received_po_line_quantities = null, $body = null)
    {
        // verify the required parameter 'accept' is set
        if ($accept === null || (is_array($accept) && count($accept) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $accept when calling purchaseOrderReceiveStockCREATEFromPOLinesRequestFromPurchaseOrderLinesPost'
            );
        }

        $resourcePath = '/PurchaseOrders/FromPurchaseOrderLines';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        if ($received_po_line_quantities !== null) {
            $queryParams['ReceivedPOLineQuantities'] = ObjectSerializer::toQueryValue($received_po_line_quantities);
        }
        // header params
        if ($accept !== null) {
            $headerParams['Accept'] = ObjectSerializer::toHeaderValue($accept);
        }
        // header params
        if ($jiwa_stateful !== null) {
            $headerParams['jiwa-stateful'] = ObjectSerializer::toHeaderValue($jiwa_stateful);
        }


        // body params
        $_tempBody = null;
        if (isset($body)) {
            $_tempBody = $body;
        }

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json', 'application/xml']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json', 'application/xml'],
                ['application/x-www-form-urlencoded', 'application/json', 'application/xml']
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            
            if($headers['Content-Type'] === 'application/json') {
                // \stdClass has no __toString(), so we should encode it manually
                if ($httpBody instanceof \stdClass) {
                    $httpBody = \GuzzleHttp\json_encode($httpBody);
                }
                // array has no __toString(), so we should encode it manually
                if(is_array($httpBody)) {
                    $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($httpBody));
                }
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\Query::build($formParams);
            }
        }

        // this endpoint requires HTTP basic authentication
        if ($this->config->getUsername() !== null || $this->config->getPassword() !== null) {
            $headers['Authorization'] = 'Basic ' . base64_encode($this->config->getUsername() . ":" . $this->config->getPassword());
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\Query::build($queryParams);
        return new Request(
            'POST',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation purchaseOrderSAVERequestSaveGet
     *
     * Saves a stateful stateful purchase order.
     *
     * @param  string $accept Accept Header (required)
     * @param  bool $jiwa_stateful Stateful indicator (optional)
     * @param  string $purchase_order_id purchase_order_id (optional)
     *
     * @throws \Jiwa\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Jiwa\JiwaModel\PurchaseOrder
     */
    public function purchaseOrderSAVERequestSaveGet($accept, $jiwa_stateful = null, $purchase_order_id = null)
    {
        list($response) = $this->purchaseOrderSAVERequestSaveGetWithHttpInfo($accept, $jiwa_stateful, $purchase_order_id);
        return $response;
    }

    /**
     * Operation purchaseOrderSAVERequestSaveGetWithHttpInfo
     *
     * Saves a stateful stateful purchase order.
     *
     * @param  string $accept Accept Header (required)
     * @param  bool $jiwa_stateful Stateful indicator (optional)
     * @param  string $purchase_order_id (optional)
     *
     * @throws \Jiwa\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Jiwa\JiwaModel\PurchaseOrder, HTTP status code, HTTP response headers (array of strings)
     */
    public function purchaseOrderSAVERequestSaveGetWithHttpInfo($accept, $jiwa_stateful = null, $purchase_order_id = null)
    {
        $returnType = '\Jiwa\JiwaModel\PurchaseOrder';
        $request = $this->purchaseOrderSAVERequestSaveGetRequest($accept, $jiwa_stateful, $purchase_order_id);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Jiwa\JiwaModel\PurchaseOrder',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 403:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Jiwa\JiwaModel\PurchaseOrder',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 401:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Jiwa\JiwaModel\PurchaseOrder',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 404:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Jiwa\JiwaModel\PurchaseOrder',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation purchaseOrderSAVERequestSaveGetAsync
     *
     * Saves a stateful stateful purchase order.
     *
     * @param  string $accept Accept Header (required)
     * @param  bool $jiwa_stateful Stateful indicator (optional)
     * @param  string $purchase_order_id (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function purchaseOrderSAVERequestSaveGetAsync($accept, $jiwa_stateful = null, $purchase_order_id = null)
    {
        return $this->purchaseOrderSAVERequestSaveGetAsyncWithHttpInfo($accept, $jiwa_stateful, $purchase_order_id)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation purchaseOrderSAVERequestSaveGetAsyncWithHttpInfo
     *
     * Saves a stateful stateful purchase order.
     *
     * @param  string $accept Accept Header (required)
     * @param  bool $jiwa_stateful Stateful indicator (optional)
     * @param  string $purchase_order_id (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function purchaseOrderSAVERequestSaveGetAsyncWithHttpInfo($accept, $jiwa_stateful = null, $purchase_order_id = null)
    {
        $returnType = '\Jiwa\JiwaModel\PurchaseOrder';
        $request = $this->purchaseOrderSAVERequestSaveGetRequest($accept, $jiwa_stateful, $purchase_order_id);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'purchaseOrderSAVERequestSaveGet'
     *
     * @param  string $accept Accept Header (required)
     * @param  bool $jiwa_stateful Stateful indicator (optional)
     * @param  string $purchase_order_id (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function purchaseOrderSAVERequestSaveGetRequest($accept, $jiwa_stateful = null, $purchase_order_id = null)
    {
        // verify the required parameter 'accept' is set
        if ($accept === null || (is_array($accept) && count($accept) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $accept when calling purchaseOrderSAVERequestSaveGet'
            );
        }

        $resourcePath = '/PurchaseOrders/Save';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        if ($purchase_order_id !== null) {
            $queryParams['PurchaseOrderID'] = ObjectSerializer::toQueryValue($purchase_order_id);
        }
        // header params
        if ($accept !== null) {
            $headerParams['Accept'] = ObjectSerializer::toHeaderValue($accept);
        }
        // header params
        if ($jiwa_stateful !== null) {
            $headerParams['jiwa-stateful'] = ObjectSerializer::toHeaderValue($jiwa_stateful);
        }


        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json', 'application/xml']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json', 'application/xml'],
                ['application/x-www-form-urlencoded', 'application/json', 'application/xml']
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            
            if($headers['Content-Type'] === 'application/json') {
                // \stdClass has no __toString(), so we should encode it manually
                if ($httpBody instanceof \stdClass) {
                    $httpBody = \GuzzleHttp\json_encode($httpBody);
                }
                // array has no __toString(), so we should encode it manually
                if(is_array($httpBody)) {
                    $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($httpBody));
                }
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\Query::build($formParams);
            }
        }

        // this endpoint requires HTTP basic authentication
        if ($this->config->getUsername() !== null || $this->config->getPassword() !== null) {
            $headers['Authorization'] = 'Basic ' . base64_encode($this->config->getUsername() . ":" . $this->config->getPassword());
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\Query::build($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Create http client option
     *
     * @throws \RuntimeException on file opening failure
     * @return array of http client options
     */
    protected function createHttpClientOption()
    {
        $options = [];
        if ($this->config->getDebug()) {
            $options[RequestOptions::DEBUG] = fopen($this->config->getDebugFile(), 'a');
            if (!$options[RequestOptions::DEBUG]) {
                throw new \RuntimeException('Failed to open the debug file: ' . $this->config->getDebugFile());
            }
        }

        return $options;
    }
}

<?php
/**
 * CarriersApi
 * PHP version 5
 *
 * @category Class
 * @package  Jiwa
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * JiwaAPI
 *
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: 1.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 * Swagger Codegen version: 2.4.28-SNAPSHOT
 */

/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Jiwa\JiwaAPI;

use GuzzleHttp\Client;
use GuzzleHttp\ClientInterface;
use GuzzleHttp\Exception\RequestException;
use GuzzleHttp\Psr7\MultipartStream;
use GuzzleHttp\Psr7\Request;
use GuzzleHttp\RequestOptions;
use Jiwa\ApiException;
use Jiwa\Configuration;
use Jiwa\HeaderSelector;
use Jiwa\ObjectSerializer;

/**
 * CarriersApi Class Doc Comment
 *
 * @category Class
 * @package  Jiwa
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class CarriersApi
{
    /**
     * @var ClientInterface
     */
    protected $client;

    /**
     * @var Configuration
     */
    protected $config;

    /**
     * @var HeaderSelector
     */
    protected $headerSelector;

    /**
     * @param ClientInterface $client
     * @param Configuration   $config
     * @param HeaderSelector  $selector
     */
    public function __construct(
        ClientInterface $client = null,
        Configuration $config = null,
        HeaderSelector $selector = null
    ) {
        $this->client = $client ?: new Client();
        $this->config = $config ?: new Configuration();
        $this->headerSelector = $selector ?: new HeaderSelector();
    }

    /**
     * @return Configuration
     */
    public function getConfig()
    {
        return $this->config;
    }

    /**
     * Operation carrierABANDONRequestAbandonDelete
     *
     * Abandons a stateful carrier.
     *
     * @param  string $accept Accept Header (required)
     * @param  bool $jiwa_stateful Stateful indicator (optional)
     * @param  string $carrier_id carrier_id (optional)
     *
     * @throws \Jiwa\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Jiwa\JiwaModel\Object
     */
    public function carrierABANDONRequestAbandonDelete($accept, $jiwa_stateful = null, $carrier_id = null)
    {
        list($response) = $this->carrierABANDONRequestAbandonDeleteWithHttpInfo($accept, $jiwa_stateful, $carrier_id);
        return $response;
    }

    /**
     * Operation carrierABANDONRequestAbandonDeleteWithHttpInfo
     *
     * Abandons a stateful carrier.
     *
     * @param  string $accept Accept Header (required)
     * @param  bool $jiwa_stateful Stateful indicator (optional)
     * @param  string $carrier_id (optional)
     *
     * @throws \Jiwa\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Jiwa\JiwaModel\Object, HTTP status code, HTTP response headers (array of strings)
     */
    public function carrierABANDONRequestAbandonDeleteWithHttpInfo($accept, $jiwa_stateful = null, $carrier_id = null)
    {
        $returnType = '\Jiwa\JiwaModel\Object';
        $request = $this->carrierABANDONRequestAbandonDeleteRequest($accept, $jiwa_stateful, $carrier_id);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Jiwa\JiwaModel\Object',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 404:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Jiwa\JiwaModel\Object',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 401:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Jiwa\JiwaModel\Object',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 403:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Jiwa\JiwaModel\Object',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation carrierABANDONRequestAbandonDeleteAsync
     *
     * Abandons a stateful carrier.
     *
     * @param  string $accept Accept Header (required)
     * @param  bool $jiwa_stateful Stateful indicator (optional)
     * @param  string $carrier_id (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function carrierABANDONRequestAbandonDeleteAsync($accept, $jiwa_stateful = null, $carrier_id = null)
    {
        return $this->carrierABANDONRequestAbandonDeleteAsyncWithHttpInfo($accept, $jiwa_stateful, $carrier_id)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation carrierABANDONRequestAbandonDeleteAsyncWithHttpInfo
     *
     * Abandons a stateful carrier.
     *
     * @param  string $accept Accept Header (required)
     * @param  bool $jiwa_stateful Stateful indicator (optional)
     * @param  string $carrier_id (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function carrierABANDONRequestAbandonDeleteAsyncWithHttpInfo($accept, $jiwa_stateful = null, $carrier_id = null)
    {
        $returnType = '\Jiwa\JiwaModel\Object';
        $request = $this->carrierABANDONRequestAbandonDeleteRequest($accept, $jiwa_stateful, $carrier_id);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'carrierABANDONRequestAbandonDelete'
     *
     * @param  string $accept Accept Header (required)
     * @param  bool $jiwa_stateful Stateful indicator (optional)
     * @param  string $carrier_id (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function carrierABANDONRequestAbandonDeleteRequest($accept, $jiwa_stateful = null, $carrier_id = null)
    {
        // verify the required parameter 'accept' is set
        if ($accept === null || (is_array($accept) && count($accept) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $accept when calling carrierABANDONRequestAbandonDelete'
            );
        }

        $resourcePath = '/Carriers/Abandon';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        if ($carrier_id !== null) {
            $queryParams['CarrierID'] = ObjectSerializer::toQueryValue($carrier_id);
        }
        // header params
        if ($accept !== null) {
            $headerParams['Accept'] = ObjectSerializer::toHeaderValue($accept);
        }
        // header params
        if ($jiwa_stateful !== null) {
            $headerParams['jiwa-stateful'] = ObjectSerializer::toHeaderValue($jiwa_stateful);
        }


        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json', 'application/xml']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json', 'application/xml'],
                ['application/x-www-form-urlencoded', 'application/json', 'application/xml']
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            
            if($headers['Content-Type'] === 'application/json') {
                // \stdClass has no __toString(), so we should encode it manually
                if ($httpBody instanceof \stdClass) {
                    $httpBody = \GuzzleHttp\json_encode($httpBody);
                }
                // array has no __toString(), so we should encode it manually
                if(is_array($httpBody)) {
                    $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($httpBody));
                }
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\Query::build($formParams);
            }
        }

        // this endpoint requires HTTP basic authentication
        if ($this->config->getUsername() !== null || $this->config->getPassword() !== null) {
            $headers['Authorization'] = 'Basic ' . base64_encode($this->config->getUsername() . ":" . $this->config->getPassword());
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\Query::build($queryParams);
        return new Request(
            'DELETE',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation carrierDELETERequestCarrierIDDelete
     *
     * Deletes a carrier.
     *
     * @param  string $accept Accept Header (required)
     * @param  string $carrier_id carrier_id (required)
     * @param  bool $jiwa_stateful Stateful indicator (optional)
     *
     * @throws \Jiwa\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Jiwa\JiwaModel\Object
     */
    public function carrierDELETERequestCarrierIDDelete($accept, $carrier_id, $jiwa_stateful = null)
    {
        list($response) = $this->carrierDELETERequestCarrierIDDeleteWithHttpInfo($accept, $carrier_id, $jiwa_stateful);
        return $response;
    }

    /**
     * Operation carrierDELETERequestCarrierIDDeleteWithHttpInfo
     *
     * Deletes a carrier.
     *
     * @param  string $accept Accept Header (required)
     * @param  string $carrier_id (required)
     * @param  bool $jiwa_stateful Stateful indicator (optional)
     *
     * @throws \Jiwa\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Jiwa\JiwaModel\Object, HTTP status code, HTTP response headers (array of strings)
     */
    public function carrierDELETERequestCarrierIDDeleteWithHttpInfo($accept, $carrier_id, $jiwa_stateful = null)
    {
        $returnType = '\Jiwa\JiwaModel\Object';
        $request = $this->carrierDELETERequestCarrierIDDeleteRequest($accept, $carrier_id, $jiwa_stateful);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Jiwa\JiwaModel\Object',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 404:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Jiwa\JiwaModel\Object',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 204:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Jiwa\JiwaModel\Object',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 403:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Jiwa\JiwaModel\Object',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 401:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Jiwa\JiwaModel\Object',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation carrierDELETERequestCarrierIDDeleteAsync
     *
     * Deletes a carrier.
     *
     * @param  string $accept Accept Header (required)
     * @param  string $carrier_id (required)
     * @param  bool $jiwa_stateful Stateful indicator (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function carrierDELETERequestCarrierIDDeleteAsync($accept, $carrier_id, $jiwa_stateful = null)
    {
        return $this->carrierDELETERequestCarrierIDDeleteAsyncWithHttpInfo($accept, $carrier_id, $jiwa_stateful)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation carrierDELETERequestCarrierIDDeleteAsyncWithHttpInfo
     *
     * Deletes a carrier.
     *
     * @param  string $accept Accept Header (required)
     * @param  string $carrier_id (required)
     * @param  bool $jiwa_stateful Stateful indicator (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function carrierDELETERequestCarrierIDDeleteAsyncWithHttpInfo($accept, $carrier_id, $jiwa_stateful = null)
    {
        $returnType = '\Jiwa\JiwaModel\Object';
        $request = $this->carrierDELETERequestCarrierIDDeleteRequest($accept, $carrier_id, $jiwa_stateful);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'carrierDELETERequestCarrierIDDelete'
     *
     * @param  string $accept Accept Header (required)
     * @param  string $carrier_id (required)
     * @param  bool $jiwa_stateful Stateful indicator (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function carrierDELETERequestCarrierIDDeleteRequest($accept, $carrier_id, $jiwa_stateful = null)
    {
        // verify the required parameter 'accept' is set
        if ($accept === null || (is_array($accept) && count($accept) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $accept when calling carrierDELETERequestCarrierIDDelete'
            );
        }
        // verify the required parameter 'carrier_id' is set
        if ($carrier_id === null || (is_array($carrier_id) && count($carrier_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $carrier_id when calling carrierDELETERequestCarrierIDDelete'
            );
        }

        $resourcePath = '/Carriers/{CarrierID}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // header params
        if ($accept !== null) {
            $headerParams['Accept'] = ObjectSerializer::toHeaderValue($accept);
        }
        // header params
        if ($jiwa_stateful !== null) {
            $headerParams['jiwa-stateful'] = ObjectSerializer::toHeaderValue($jiwa_stateful);
        }

        // path params
        if ($carrier_id !== null) {
            $resourcePath = str_replace(
                '{' . 'CarrierID' . '}',
                ObjectSerializer::toPathValue($carrier_id),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json', 'application/xml']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json', 'application/xml'],
                ['application/x-www-form-urlencoded', 'application/json', 'application/xml']
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            
            if($headers['Content-Type'] === 'application/json') {
                // \stdClass has no __toString(), so we should encode it manually
                if ($httpBody instanceof \stdClass) {
                    $httpBody = \GuzzleHttp\json_encode($httpBody);
                }
                // array has no __toString(), so we should encode it manually
                if(is_array($httpBody)) {
                    $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($httpBody));
                }
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\Query::build($formParams);
            }
        }

        // this endpoint requires HTTP basic authentication
        if ($this->config->getUsername() !== null || $this->config->getPassword() !== null) {
            $headers['Authorization'] = 'Basic ' . base64_encode($this->config->getUsername() . ":" . $this->config->getPassword());
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\Query::build($queryParams);
        return new Request(
            'DELETE',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation carrierFreightDescriptionDELETERequestCarrierIDFreightDescriptionsFreightDescriptionIDDelete
     *
     * Deletes a freight description from a carrier.
     *
     * @param  string $accept Accept Header (required)
     * @param  string $carrier_id carrier_id (required)
     * @param  string $freight_description_id freight_description_id (required)
     * @param  bool $jiwa_stateful Stateful indicator (optional)
     * @param  string $description description (optional)
     * @param  bool $default_item default_item (optional)
     * @param  \DateTime $last_saved_date_time last_saved_date_time (optional)
     * @param  bool $enabled enabled (optional)
     *
     * @throws \Jiwa\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Jiwa\JiwaModel\Object
     */
    public function carrierFreightDescriptionDELETERequestCarrierIDFreightDescriptionsFreightDescriptionIDDelete($accept, $carrier_id, $freight_description_id, $jiwa_stateful = null, $description = null, $default_item = null, $last_saved_date_time = null, $enabled = null)
    {
        list($response) = $this->carrierFreightDescriptionDELETERequestCarrierIDFreightDescriptionsFreightDescriptionIDDeleteWithHttpInfo($accept, $carrier_id, $freight_description_id, $jiwa_stateful, $description, $default_item, $last_saved_date_time, $enabled);
        return $response;
    }

    /**
     * Operation carrierFreightDescriptionDELETERequestCarrierIDFreightDescriptionsFreightDescriptionIDDeleteWithHttpInfo
     *
     * Deletes a freight description from a carrier.
     *
     * @param  string $accept Accept Header (required)
     * @param  string $carrier_id (required)
     * @param  string $freight_description_id (required)
     * @param  bool $jiwa_stateful Stateful indicator (optional)
     * @param  string $description (optional)
     * @param  bool $default_item (optional)
     * @param  \DateTime $last_saved_date_time (optional)
     * @param  bool $enabled (optional)
     *
     * @throws \Jiwa\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Jiwa\JiwaModel\Object, HTTP status code, HTTP response headers (array of strings)
     */
    public function carrierFreightDescriptionDELETERequestCarrierIDFreightDescriptionsFreightDescriptionIDDeleteWithHttpInfo($accept, $carrier_id, $freight_description_id, $jiwa_stateful = null, $description = null, $default_item = null, $last_saved_date_time = null, $enabled = null)
    {
        $returnType = '\Jiwa\JiwaModel\Object';
        $request = $this->carrierFreightDescriptionDELETERequestCarrierIDFreightDescriptionsFreightDescriptionIDDeleteRequest($accept, $carrier_id, $freight_description_id, $jiwa_stateful, $description, $default_item, $last_saved_date_time, $enabled);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Jiwa\JiwaModel\Object',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 404:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Jiwa\JiwaModel\Object',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 204:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Jiwa\JiwaModel\Object',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 401:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Jiwa\JiwaModel\Object',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 403:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Jiwa\JiwaModel\Object',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation carrierFreightDescriptionDELETERequestCarrierIDFreightDescriptionsFreightDescriptionIDDeleteAsync
     *
     * Deletes a freight description from a carrier.
     *
     * @param  string $accept Accept Header (required)
     * @param  string $carrier_id (required)
     * @param  string $freight_description_id (required)
     * @param  bool $jiwa_stateful Stateful indicator (optional)
     * @param  string $description (optional)
     * @param  bool $default_item (optional)
     * @param  \DateTime $last_saved_date_time (optional)
     * @param  bool $enabled (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function carrierFreightDescriptionDELETERequestCarrierIDFreightDescriptionsFreightDescriptionIDDeleteAsync($accept, $carrier_id, $freight_description_id, $jiwa_stateful = null, $description = null, $default_item = null, $last_saved_date_time = null, $enabled = null)
    {
        return $this->carrierFreightDescriptionDELETERequestCarrierIDFreightDescriptionsFreightDescriptionIDDeleteAsyncWithHttpInfo($accept, $carrier_id, $freight_description_id, $jiwa_stateful, $description, $default_item, $last_saved_date_time, $enabled)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation carrierFreightDescriptionDELETERequestCarrierIDFreightDescriptionsFreightDescriptionIDDeleteAsyncWithHttpInfo
     *
     * Deletes a freight description from a carrier.
     *
     * @param  string $accept Accept Header (required)
     * @param  string $carrier_id (required)
     * @param  string $freight_description_id (required)
     * @param  bool $jiwa_stateful Stateful indicator (optional)
     * @param  string $description (optional)
     * @param  bool $default_item (optional)
     * @param  \DateTime $last_saved_date_time (optional)
     * @param  bool $enabled (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function carrierFreightDescriptionDELETERequestCarrierIDFreightDescriptionsFreightDescriptionIDDeleteAsyncWithHttpInfo($accept, $carrier_id, $freight_description_id, $jiwa_stateful = null, $description = null, $default_item = null, $last_saved_date_time = null, $enabled = null)
    {
        $returnType = '\Jiwa\JiwaModel\Object';
        $request = $this->carrierFreightDescriptionDELETERequestCarrierIDFreightDescriptionsFreightDescriptionIDDeleteRequest($accept, $carrier_id, $freight_description_id, $jiwa_stateful, $description, $default_item, $last_saved_date_time, $enabled);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'carrierFreightDescriptionDELETERequestCarrierIDFreightDescriptionsFreightDescriptionIDDelete'
     *
     * @param  string $accept Accept Header (required)
     * @param  string $carrier_id (required)
     * @param  string $freight_description_id (required)
     * @param  bool $jiwa_stateful Stateful indicator (optional)
     * @param  string $description (optional)
     * @param  bool $default_item (optional)
     * @param  \DateTime $last_saved_date_time (optional)
     * @param  bool $enabled (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function carrierFreightDescriptionDELETERequestCarrierIDFreightDescriptionsFreightDescriptionIDDeleteRequest($accept, $carrier_id, $freight_description_id, $jiwa_stateful = null, $description = null, $default_item = null, $last_saved_date_time = null, $enabled = null)
    {
        // verify the required parameter 'accept' is set
        if ($accept === null || (is_array($accept) && count($accept) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $accept when calling carrierFreightDescriptionDELETERequestCarrierIDFreightDescriptionsFreightDescriptionIDDelete'
            );
        }
        // verify the required parameter 'carrier_id' is set
        if ($carrier_id === null || (is_array($carrier_id) && count($carrier_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $carrier_id when calling carrierFreightDescriptionDELETERequestCarrierIDFreightDescriptionsFreightDescriptionIDDelete'
            );
        }
        // verify the required parameter 'freight_description_id' is set
        if ($freight_description_id === null || (is_array($freight_description_id) && count($freight_description_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $freight_description_id when calling carrierFreightDescriptionDELETERequestCarrierIDFreightDescriptionsFreightDescriptionIDDelete'
            );
        }

        $resourcePath = '/Carriers/{CarrierID}/FreightDescriptions/{FreightDescriptionID}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        if ($description !== null) {
            $queryParams['Description'] = ObjectSerializer::toQueryValue($description);
        }
        // query params
        if ($default_item !== null) {
            $queryParams['DefaultItem'] = ObjectSerializer::toQueryValue($default_item);
        }
        // query params
        if ($last_saved_date_time !== null) {
            $queryParams['LastSavedDateTime'] = ObjectSerializer::toQueryValue($last_saved_date_time);
        }
        // query params
        if ($enabled !== null) {
            $queryParams['Enabled'] = ObjectSerializer::toQueryValue($enabled);
        }
        // header params
        if ($accept !== null) {
            $headerParams['Accept'] = ObjectSerializer::toHeaderValue($accept);
        }
        // header params
        if ($jiwa_stateful !== null) {
            $headerParams['jiwa-stateful'] = ObjectSerializer::toHeaderValue($jiwa_stateful);
        }

        // path params
        if ($carrier_id !== null) {
            $resourcePath = str_replace(
                '{' . 'CarrierID' . '}',
                ObjectSerializer::toPathValue($carrier_id),
                $resourcePath
            );
        }
        // path params
        if ($freight_description_id !== null) {
            $resourcePath = str_replace(
                '{' . 'FreightDescriptionID' . '}',
                ObjectSerializer::toPathValue($freight_description_id),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json', 'application/xml']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json', 'application/xml'],
                ['application/x-www-form-urlencoded', 'application/json', 'application/xml']
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            
            if($headers['Content-Type'] === 'application/json') {
                // \stdClass has no __toString(), so we should encode it manually
                if ($httpBody instanceof \stdClass) {
                    $httpBody = \GuzzleHttp\json_encode($httpBody);
                }
                // array has no __toString(), so we should encode it manually
                if(is_array($httpBody)) {
                    $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($httpBody));
                }
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\Query::build($formParams);
            }
        }

        // this endpoint requires HTTP basic authentication
        if ($this->config->getUsername() !== null || $this->config->getPassword() !== null) {
            $headers['Authorization'] = 'Basic ' . base64_encode($this->config->getUsername() . ":" . $this->config->getPassword());
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\Query::build($queryParams);
        return new Request(
            'DELETE',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation carrierFreightDescriptionGETRequestCarrierIDFreightDescriptionsFreightDescriptionIDGet
     *
     * Retrieves a carrier freight description.
     *
     * @param  string $accept Accept Header (required)
     * @param  string $carrier_id carrier_id (required)
     * @param  string $freight_description_id freight_description_id (required)
     * @param  bool $jiwa_stateful Stateful indicator (optional)
     *
     * @throws \Jiwa\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Jiwa\JiwaModel\CarrierFreightDescription
     */
    public function carrierFreightDescriptionGETRequestCarrierIDFreightDescriptionsFreightDescriptionIDGet($accept, $carrier_id, $freight_description_id, $jiwa_stateful = null)
    {
        list($response) = $this->carrierFreightDescriptionGETRequestCarrierIDFreightDescriptionsFreightDescriptionIDGetWithHttpInfo($accept, $carrier_id, $freight_description_id, $jiwa_stateful);
        return $response;
    }

    /**
     * Operation carrierFreightDescriptionGETRequestCarrierIDFreightDescriptionsFreightDescriptionIDGetWithHttpInfo
     *
     * Retrieves a carrier freight description.
     *
     * @param  string $accept Accept Header (required)
     * @param  string $carrier_id (required)
     * @param  string $freight_description_id (required)
     * @param  bool $jiwa_stateful Stateful indicator (optional)
     *
     * @throws \Jiwa\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Jiwa\JiwaModel\CarrierFreightDescription, HTTP status code, HTTP response headers (array of strings)
     */
    public function carrierFreightDescriptionGETRequestCarrierIDFreightDescriptionsFreightDescriptionIDGetWithHttpInfo($accept, $carrier_id, $freight_description_id, $jiwa_stateful = null)
    {
        $returnType = '\Jiwa\JiwaModel\CarrierFreightDescription';
        $request = $this->carrierFreightDescriptionGETRequestCarrierIDFreightDescriptionsFreightDescriptionIDGetRequest($accept, $carrier_id, $freight_description_id, $jiwa_stateful);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Jiwa\JiwaModel\CarrierFreightDescription',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 403:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Jiwa\JiwaModel\CarrierFreightDescription',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 404:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Jiwa\JiwaModel\CarrierFreightDescription',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 401:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Jiwa\JiwaModel\CarrierFreightDescription',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation carrierFreightDescriptionGETRequestCarrierIDFreightDescriptionsFreightDescriptionIDGetAsync
     *
     * Retrieves a carrier freight description.
     *
     * @param  string $accept Accept Header (required)
     * @param  string $carrier_id (required)
     * @param  string $freight_description_id (required)
     * @param  bool $jiwa_stateful Stateful indicator (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function carrierFreightDescriptionGETRequestCarrierIDFreightDescriptionsFreightDescriptionIDGetAsync($accept, $carrier_id, $freight_description_id, $jiwa_stateful = null)
    {
        return $this->carrierFreightDescriptionGETRequestCarrierIDFreightDescriptionsFreightDescriptionIDGetAsyncWithHttpInfo($accept, $carrier_id, $freight_description_id, $jiwa_stateful)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation carrierFreightDescriptionGETRequestCarrierIDFreightDescriptionsFreightDescriptionIDGetAsyncWithHttpInfo
     *
     * Retrieves a carrier freight description.
     *
     * @param  string $accept Accept Header (required)
     * @param  string $carrier_id (required)
     * @param  string $freight_description_id (required)
     * @param  bool $jiwa_stateful Stateful indicator (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function carrierFreightDescriptionGETRequestCarrierIDFreightDescriptionsFreightDescriptionIDGetAsyncWithHttpInfo($accept, $carrier_id, $freight_description_id, $jiwa_stateful = null)
    {
        $returnType = '\Jiwa\JiwaModel\CarrierFreightDescription';
        $request = $this->carrierFreightDescriptionGETRequestCarrierIDFreightDescriptionsFreightDescriptionIDGetRequest($accept, $carrier_id, $freight_description_id, $jiwa_stateful);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'carrierFreightDescriptionGETRequestCarrierIDFreightDescriptionsFreightDescriptionIDGet'
     *
     * @param  string $accept Accept Header (required)
     * @param  string $carrier_id (required)
     * @param  string $freight_description_id (required)
     * @param  bool $jiwa_stateful Stateful indicator (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function carrierFreightDescriptionGETRequestCarrierIDFreightDescriptionsFreightDescriptionIDGetRequest($accept, $carrier_id, $freight_description_id, $jiwa_stateful = null)
    {
        // verify the required parameter 'accept' is set
        if ($accept === null || (is_array($accept) && count($accept) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $accept when calling carrierFreightDescriptionGETRequestCarrierIDFreightDescriptionsFreightDescriptionIDGet'
            );
        }
        // verify the required parameter 'carrier_id' is set
        if ($carrier_id === null || (is_array($carrier_id) && count($carrier_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $carrier_id when calling carrierFreightDescriptionGETRequestCarrierIDFreightDescriptionsFreightDescriptionIDGet'
            );
        }
        // verify the required parameter 'freight_description_id' is set
        if ($freight_description_id === null || (is_array($freight_description_id) && count($freight_description_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $freight_description_id when calling carrierFreightDescriptionGETRequestCarrierIDFreightDescriptionsFreightDescriptionIDGet'
            );
        }

        $resourcePath = '/Carriers/{CarrierID}/FreightDescriptions/{FreightDescriptionID}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // header params
        if ($accept !== null) {
            $headerParams['Accept'] = ObjectSerializer::toHeaderValue($accept);
        }
        // header params
        if ($jiwa_stateful !== null) {
            $headerParams['jiwa-stateful'] = ObjectSerializer::toHeaderValue($jiwa_stateful);
        }

        // path params
        if ($carrier_id !== null) {
            $resourcePath = str_replace(
                '{' . 'CarrierID' . '}',
                ObjectSerializer::toPathValue($carrier_id),
                $resourcePath
            );
        }
        // path params
        if ($freight_description_id !== null) {
            $resourcePath = str_replace(
                '{' . 'FreightDescriptionID' . '}',
                ObjectSerializer::toPathValue($freight_description_id),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json', 'application/xml']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json', 'application/xml'],
                ['application/x-www-form-urlencoded', 'application/json', 'application/xml']
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            
            if($headers['Content-Type'] === 'application/json') {
                // \stdClass has no __toString(), so we should encode it manually
                if ($httpBody instanceof \stdClass) {
                    $httpBody = \GuzzleHttp\json_encode($httpBody);
                }
                // array has no __toString(), so we should encode it manually
                if(is_array($httpBody)) {
                    $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($httpBody));
                }
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\Query::build($formParams);
            }
        }

        // this endpoint requires HTTP basic authentication
        if ($this->config->getUsername() !== null || $this->config->getPassword() !== null) {
            $headers['Authorization'] = 'Basic ' . base64_encode($this->config->getUsername() . ":" . $this->config->getPassword());
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\Query::build($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation carrierFreightDescriptionPATCHRequestCarrierIDFreightDescriptionsFreightDescriptionIDUpdate
     *
     * Updates a freight description for a carrier.
     *
     * @param  string $accept Accept Header (required)
     * @param  string $carrier_id carrier_id (required)
     * @param  string $freight_description_id freight_description_id (required)
     * @param  bool $jiwa_stateful Stateful indicator (optional)
     * @param  string $description description (optional)
     * @param  bool $default_item default_item (optional)
     * @param  \DateTime $last_saved_date_time last_saved_date_time (optional)
     * @param  bool $enabled enabled (optional)
     * @param  \Jiwa\JiwaModel\CarrierFreightDescriptionPATCHRequest $body body (optional)
     *
     * @throws \Jiwa\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Jiwa\JiwaModel\CarrierFreightDescription
     */
    public function carrierFreightDescriptionPATCHRequestCarrierIDFreightDescriptionsFreightDescriptionIDUpdate($accept, $carrier_id, $freight_description_id, $jiwa_stateful = null, $description = null, $default_item = null, $last_saved_date_time = null, $enabled = null, $body = null)
    {
        list($response) = $this->carrierFreightDescriptionPATCHRequestCarrierIDFreightDescriptionsFreightDescriptionIDUpdateWithHttpInfo($accept, $carrier_id, $freight_description_id, $jiwa_stateful, $description, $default_item, $last_saved_date_time, $enabled, $body);
        return $response;
    }

    /**
     * Operation carrierFreightDescriptionPATCHRequestCarrierIDFreightDescriptionsFreightDescriptionIDUpdateWithHttpInfo
     *
     * Updates a freight description for a carrier.
     *
     * @param  string $accept Accept Header (required)
     * @param  string $carrier_id (required)
     * @param  string $freight_description_id (required)
     * @param  bool $jiwa_stateful Stateful indicator (optional)
     * @param  string $description (optional)
     * @param  bool $default_item (optional)
     * @param  \DateTime $last_saved_date_time (optional)
     * @param  bool $enabled (optional)
     * @param  \Jiwa\JiwaModel\CarrierFreightDescriptionPATCHRequest $body (optional)
     *
     * @throws \Jiwa\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Jiwa\JiwaModel\CarrierFreightDescription, HTTP status code, HTTP response headers (array of strings)
     */
    public function carrierFreightDescriptionPATCHRequestCarrierIDFreightDescriptionsFreightDescriptionIDUpdateWithHttpInfo($accept, $carrier_id, $freight_description_id, $jiwa_stateful = null, $description = null, $default_item = null, $last_saved_date_time = null, $enabled = null, $body = null)
    {
        $returnType = '\Jiwa\JiwaModel\CarrierFreightDescription';
        $request = $this->carrierFreightDescriptionPATCHRequestCarrierIDFreightDescriptionsFreightDescriptionIDUpdateRequest($accept, $carrier_id, $freight_description_id, $jiwa_stateful, $description, $default_item, $last_saved_date_time, $enabled, $body);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Jiwa\JiwaModel\CarrierFreightDescription',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 404:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Jiwa\JiwaModel\CarrierFreightDescription',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 403:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Jiwa\JiwaModel\CarrierFreightDescription',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 401:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Jiwa\JiwaModel\CarrierFreightDescription',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation carrierFreightDescriptionPATCHRequestCarrierIDFreightDescriptionsFreightDescriptionIDUpdateAsync
     *
     * Updates a freight description for a carrier.
     *
     * @param  string $accept Accept Header (required)
     * @param  string $carrier_id (required)
     * @param  string $freight_description_id (required)
     * @param  bool $jiwa_stateful Stateful indicator (optional)
     * @param  string $description (optional)
     * @param  bool $default_item (optional)
     * @param  \DateTime $last_saved_date_time (optional)
     * @param  bool $enabled (optional)
     * @param  \Jiwa\JiwaModel\CarrierFreightDescriptionPATCHRequest $body (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function carrierFreightDescriptionPATCHRequestCarrierIDFreightDescriptionsFreightDescriptionIDUpdateAsync($accept, $carrier_id, $freight_description_id, $jiwa_stateful = null, $description = null, $default_item = null, $last_saved_date_time = null, $enabled = null, $body = null)
    {
        return $this->carrierFreightDescriptionPATCHRequestCarrierIDFreightDescriptionsFreightDescriptionIDUpdateAsyncWithHttpInfo($accept, $carrier_id, $freight_description_id, $jiwa_stateful, $description, $default_item, $last_saved_date_time, $enabled, $body)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation carrierFreightDescriptionPATCHRequestCarrierIDFreightDescriptionsFreightDescriptionIDUpdateAsyncWithHttpInfo
     *
     * Updates a freight description for a carrier.
     *
     * @param  string $accept Accept Header (required)
     * @param  string $carrier_id (required)
     * @param  string $freight_description_id (required)
     * @param  bool $jiwa_stateful Stateful indicator (optional)
     * @param  string $description (optional)
     * @param  bool $default_item (optional)
     * @param  \DateTime $last_saved_date_time (optional)
     * @param  bool $enabled (optional)
     * @param  \Jiwa\JiwaModel\CarrierFreightDescriptionPATCHRequest $body (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function carrierFreightDescriptionPATCHRequestCarrierIDFreightDescriptionsFreightDescriptionIDUpdateAsyncWithHttpInfo($accept, $carrier_id, $freight_description_id, $jiwa_stateful = null, $description = null, $default_item = null, $last_saved_date_time = null, $enabled = null, $body = null)
    {
        $returnType = '\Jiwa\JiwaModel\CarrierFreightDescription';
        $request = $this->carrierFreightDescriptionPATCHRequestCarrierIDFreightDescriptionsFreightDescriptionIDUpdateRequest($accept, $carrier_id, $freight_description_id, $jiwa_stateful, $description, $default_item, $last_saved_date_time, $enabled, $body);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'carrierFreightDescriptionPATCHRequestCarrierIDFreightDescriptionsFreightDescriptionIDUpdate'
     *
     * @param  string $accept Accept Header (required)
     * @param  string $carrier_id (required)
     * @param  string $freight_description_id (required)
     * @param  bool $jiwa_stateful Stateful indicator (optional)
     * @param  string $description (optional)
     * @param  bool $default_item (optional)
     * @param  \DateTime $last_saved_date_time (optional)
     * @param  bool $enabled (optional)
     * @param  \Jiwa\JiwaModel\CarrierFreightDescriptionPATCHRequest $body (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function carrierFreightDescriptionPATCHRequestCarrierIDFreightDescriptionsFreightDescriptionIDUpdateRequest($accept, $carrier_id, $freight_description_id, $jiwa_stateful = null, $description = null, $default_item = null, $last_saved_date_time = null, $enabled = null, $body = null)
    {
        // verify the required parameter 'accept' is set
        if ($accept === null || (is_array($accept) && count($accept) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $accept when calling carrierFreightDescriptionPATCHRequestCarrierIDFreightDescriptionsFreightDescriptionIDUpdate'
            );
        }
        // verify the required parameter 'carrier_id' is set
        if ($carrier_id === null || (is_array($carrier_id) && count($carrier_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $carrier_id when calling carrierFreightDescriptionPATCHRequestCarrierIDFreightDescriptionsFreightDescriptionIDUpdate'
            );
        }
        // verify the required parameter 'freight_description_id' is set
        if ($freight_description_id === null || (is_array($freight_description_id) && count($freight_description_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $freight_description_id when calling carrierFreightDescriptionPATCHRequestCarrierIDFreightDescriptionsFreightDescriptionIDUpdate'
            );
        }

        $resourcePath = '/Carriers/{CarrierID}/FreightDescriptions/{FreightDescriptionID}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        if ($description !== null) {
            $queryParams['Description'] = ObjectSerializer::toQueryValue($description);
        }
        // query params
        if ($default_item !== null) {
            $queryParams['DefaultItem'] = ObjectSerializer::toQueryValue($default_item);
        }
        // query params
        if ($last_saved_date_time !== null) {
            $queryParams['LastSavedDateTime'] = ObjectSerializer::toQueryValue($last_saved_date_time);
        }
        // query params
        if ($enabled !== null) {
            $queryParams['Enabled'] = ObjectSerializer::toQueryValue($enabled);
        }
        // header params
        if ($accept !== null) {
            $headerParams['Accept'] = ObjectSerializer::toHeaderValue($accept);
        }
        // header params
        if ($jiwa_stateful !== null) {
            $headerParams['jiwa-stateful'] = ObjectSerializer::toHeaderValue($jiwa_stateful);
        }

        // path params
        if ($carrier_id !== null) {
            $resourcePath = str_replace(
                '{' . 'CarrierID' . '}',
                ObjectSerializer::toPathValue($carrier_id),
                $resourcePath
            );
        }
        // path params
        if ($freight_description_id !== null) {
            $resourcePath = str_replace(
                '{' . 'FreightDescriptionID' . '}',
                ObjectSerializer::toPathValue($freight_description_id),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;
        if (isset($body)) {
            $_tempBody = $body;
        }

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json', 'application/xml']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json', 'application/xml'],
                ['application/x-www-form-urlencoded', 'application/json', 'application/xml']
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            
            if($headers['Content-Type'] === 'application/json') {
                // \stdClass has no __toString(), so we should encode it manually
                if ($httpBody instanceof \stdClass) {
                    $httpBody = \GuzzleHttp\json_encode($httpBody);
                }
                // array has no __toString(), so we should encode it manually
                if(is_array($httpBody)) {
                    $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($httpBody));
                }
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\Query::build($formParams);
            }
        }

        // this endpoint requires HTTP basic authentication
        if ($this->config->getUsername() !== null || $this->config->getPassword() !== null) {
            $headers['Authorization'] = 'Basic ' . base64_encode($this->config->getUsername() . ":" . $this->config->getPassword());
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\Query::build($queryParams);
        return new Request(
            'PATCH',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation carrierFreightDescriptionPOSTRequestCarrierIDFreightDescriptionsPost
     *
     * Appends a freight description to a carrier.
     *
     * @param  string $accept Accept Header (required)
     * @param  string $carrier_id carrier_id (required)
     * @param  bool $jiwa_stateful Stateful indicator (optional)
     * @param  string $description description (optional)
     * @param  bool $default_item default_item (optional)
     * @param  \DateTime $last_saved_date_time last_saved_date_time (optional)
     * @param  bool $enabled enabled (optional)
     * @param  \Jiwa\JiwaModel\CarrierFreightDescriptionPOSTRequest $body body (optional)
     *
     * @throws \Jiwa\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Jiwa\JiwaModel\CarrierFreightDescription
     */
    public function carrierFreightDescriptionPOSTRequestCarrierIDFreightDescriptionsPost($accept, $carrier_id, $jiwa_stateful = null, $description = null, $default_item = null, $last_saved_date_time = null, $enabled = null, $body = null)
    {
        list($response) = $this->carrierFreightDescriptionPOSTRequestCarrierIDFreightDescriptionsPostWithHttpInfo($accept, $carrier_id, $jiwa_stateful, $description, $default_item, $last_saved_date_time, $enabled, $body);
        return $response;
    }

    /**
     * Operation carrierFreightDescriptionPOSTRequestCarrierIDFreightDescriptionsPostWithHttpInfo
     *
     * Appends a freight description to a carrier.
     *
     * @param  string $accept Accept Header (required)
     * @param  string $carrier_id (required)
     * @param  bool $jiwa_stateful Stateful indicator (optional)
     * @param  string $description (optional)
     * @param  bool $default_item (optional)
     * @param  \DateTime $last_saved_date_time (optional)
     * @param  bool $enabled (optional)
     * @param  \Jiwa\JiwaModel\CarrierFreightDescriptionPOSTRequest $body (optional)
     *
     * @throws \Jiwa\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Jiwa\JiwaModel\CarrierFreightDescription, HTTP status code, HTTP response headers (array of strings)
     */
    public function carrierFreightDescriptionPOSTRequestCarrierIDFreightDescriptionsPostWithHttpInfo($accept, $carrier_id, $jiwa_stateful = null, $description = null, $default_item = null, $last_saved_date_time = null, $enabled = null, $body = null)
    {
        $returnType = '\Jiwa\JiwaModel\CarrierFreightDescription';
        $request = $this->carrierFreightDescriptionPOSTRequestCarrierIDFreightDescriptionsPostRequest($accept, $carrier_id, $jiwa_stateful, $description, $default_item, $last_saved_date_time, $enabled, $body);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Jiwa\JiwaModel\CarrierFreightDescription',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 404:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Jiwa\JiwaModel\CarrierFreightDescription',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 403:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Jiwa\JiwaModel\CarrierFreightDescription',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 201:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Jiwa\JiwaModel\CarrierFreightDescription',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 401:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Jiwa\JiwaModel\CarrierFreightDescription',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation carrierFreightDescriptionPOSTRequestCarrierIDFreightDescriptionsPostAsync
     *
     * Appends a freight description to a carrier.
     *
     * @param  string $accept Accept Header (required)
     * @param  string $carrier_id (required)
     * @param  bool $jiwa_stateful Stateful indicator (optional)
     * @param  string $description (optional)
     * @param  bool $default_item (optional)
     * @param  \DateTime $last_saved_date_time (optional)
     * @param  bool $enabled (optional)
     * @param  \Jiwa\JiwaModel\CarrierFreightDescriptionPOSTRequest $body (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function carrierFreightDescriptionPOSTRequestCarrierIDFreightDescriptionsPostAsync($accept, $carrier_id, $jiwa_stateful = null, $description = null, $default_item = null, $last_saved_date_time = null, $enabled = null, $body = null)
    {
        return $this->carrierFreightDescriptionPOSTRequestCarrierIDFreightDescriptionsPostAsyncWithHttpInfo($accept, $carrier_id, $jiwa_stateful, $description, $default_item, $last_saved_date_time, $enabled, $body)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation carrierFreightDescriptionPOSTRequestCarrierIDFreightDescriptionsPostAsyncWithHttpInfo
     *
     * Appends a freight description to a carrier.
     *
     * @param  string $accept Accept Header (required)
     * @param  string $carrier_id (required)
     * @param  bool $jiwa_stateful Stateful indicator (optional)
     * @param  string $description (optional)
     * @param  bool $default_item (optional)
     * @param  \DateTime $last_saved_date_time (optional)
     * @param  bool $enabled (optional)
     * @param  \Jiwa\JiwaModel\CarrierFreightDescriptionPOSTRequest $body (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function carrierFreightDescriptionPOSTRequestCarrierIDFreightDescriptionsPostAsyncWithHttpInfo($accept, $carrier_id, $jiwa_stateful = null, $description = null, $default_item = null, $last_saved_date_time = null, $enabled = null, $body = null)
    {
        $returnType = '\Jiwa\JiwaModel\CarrierFreightDescription';
        $request = $this->carrierFreightDescriptionPOSTRequestCarrierIDFreightDescriptionsPostRequest($accept, $carrier_id, $jiwa_stateful, $description, $default_item, $last_saved_date_time, $enabled, $body);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'carrierFreightDescriptionPOSTRequestCarrierIDFreightDescriptionsPost'
     *
     * @param  string $accept Accept Header (required)
     * @param  string $carrier_id (required)
     * @param  bool $jiwa_stateful Stateful indicator (optional)
     * @param  string $description (optional)
     * @param  bool $default_item (optional)
     * @param  \DateTime $last_saved_date_time (optional)
     * @param  bool $enabled (optional)
     * @param  \Jiwa\JiwaModel\CarrierFreightDescriptionPOSTRequest $body (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function carrierFreightDescriptionPOSTRequestCarrierIDFreightDescriptionsPostRequest($accept, $carrier_id, $jiwa_stateful = null, $description = null, $default_item = null, $last_saved_date_time = null, $enabled = null, $body = null)
    {
        // verify the required parameter 'accept' is set
        if ($accept === null || (is_array($accept) && count($accept) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $accept when calling carrierFreightDescriptionPOSTRequestCarrierIDFreightDescriptionsPost'
            );
        }
        // verify the required parameter 'carrier_id' is set
        if ($carrier_id === null || (is_array($carrier_id) && count($carrier_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $carrier_id when calling carrierFreightDescriptionPOSTRequestCarrierIDFreightDescriptionsPost'
            );
        }

        $resourcePath = '/Carriers/{CarrierID}/FreightDescriptions';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        if ($description !== null) {
            $queryParams['Description'] = ObjectSerializer::toQueryValue($description);
        }
        // query params
        if ($default_item !== null) {
            $queryParams['DefaultItem'] = ObjectSerializer::toQueryValue($default_item);
        }
        // query params
        if ($last_saved_date_time !== null) {
            $queryParams['LastSavedDateTime'] = ObjectSerializer::toQueryValue($last_saved_date_time);
        }
        // query params
        if ($enabled !== null) {
            $queryParams['Enabled'] = ObjectSerializer::toQueryValue($enabled);
        }
        // header params
        if ($accept !== null) {
            $headerParams['Accept'] = ObjectSerializer::toHeaderValue($accept);
        }
        // header params
        if ($jiwa_stateful !== null) {
            $headerParams['jiwa-stateful'] = ObjectSerializer::toHeaderValue($jiwa_stateful);
        }

        // path params
        if ($carrier_id !== null) {
            $resourcePath = str_replace(
                '{' . 'CarrierID' . '}',
                ObjectSerializer::toPathValue($carrier_id),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;
        if (isset($body)) {
            $_tempBody = $body;
        }

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json', 'application/xml']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json', 'application/xml'],
                ['application/x-www-form-urlencoded', 'application/json', 'application/xml']
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            
            if($headers['Content-Type'] === 'application/json') {
                // \stdClass has no __toString(), so we should encode it manually
                if ($httpBody instanceof \stdClass) {
                    $httpBody = \GuzzleHttp\json_encode($httpBody);
                }
                // array has no __toString(), so we should encode it manually
                if(is_array($httpBody)) {
                    $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($httpBody));
                }
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\Query::build($formParams);
            }
        }

        // this endpoint requires HTTP basic authentication
        if ($this->config->getUsername() !== null || $this->config->getPassword() !== null) {
            $headers['Authorization'] = 'Basic ' . base64_encode($this->config->getUsername() . ":" . $this->config->getPassword());
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\Query::build($queryParams);
        return new Request(
            'POST',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation carrierFreightDescriptionsGETManyRequestCarrierIDFreightDescriptionsGet
     *
     * Retrieves a list of carrier freight descriptions.
     *
     * @param  string $accept Accept Header (required)
     * @param  string $carrier_id carrier_id (required)
     * @param  bool $jiwa_stateful Stateful indicator (optional)
     *
     * @throws \Jiwa\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Jiwa\JiwaModel\CarrierFreightDescription[]
     */
    public function carrierFreightDescriptionsGETManyRequestCarrierIDFreightDescriptionsGet($accept, $carrier_id, $jiwa_stateful = null)
    {
        list($response) = $this->carrierFreightDescriptionsGETManyRequestCarrierIDFreightDescriptionsGetWithHttpInfo($accept, $carrier_id, $jiwa_stateful);
        return $response;
    }

    /**
     * Operation carrierFreightDescriptionsGETManyRequestCarrierIDFreightDescriptionsGetWithHttpInfo
     *
     * Retrieves a list of carrier freight descriptions.
     *
     * @param  string $accept Accept Header (required)
     * @param  string $carrier_id (required)
     * @param  bool $jiwa_stateful Stateful indicator (optional)
     *
     * @throws \Jiwa\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Jiwa\JiwaModel\CarrierFreightDescription[], HTTP status code, HTTP response headers (array of strings)
     */
    public function carrierFreightDescriptionsGETManyRequestCarrierIDFreightDescriptionsGetWithHttpInfo($accept, $carrier_id, $jiwa_stateful = null)
    {
        $returnType = '\Jiwa\JiwaModel\CarrierFreightDescription[]';
        $request = $this->carrierFreightDescriptionsGETManyRequestCarrierIDFreightDescriptionsGetRequest($accept, $carrier_id, $jiwa_stateful);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Jiwa\JiwaModel\CarrierFreightDescription[]',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 401:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Jiwa\JiwaModel\CarrierFreightDescription[]',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 404:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Jiwa\JiwaModel\CarrierFreightDescription[]',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 403:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Jiwa\JiwaModel\CarrierFreightDescription[]',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation carrierFreightDescriptionsGETManyRequestCarrierIDFreightDescriptionsGetAsync
     *
     * Retrieves a list of carrier freight descriptions.
     *
     * @param  string $accept Accept Header (required)
     * @param  string $carrier_id (required)
     * @param  bool $jiwa_stateful Stateful indicator (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function carrierFreightDescriptionsGETManyRequestCarrierIDFreightDescriptionsGetAsync($accept, $carrier_id, $jiwa_stateful = null)
    {
        return $this->carrierFreightDescriptionsGETManyRequestCarrierIDFreightDescriptionsGetAsyncWithHttpInfo($accept, $carrier_id, $jiwa_stateful)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation carrierFreightDescriptionsGETManyRequestCarrierIDFreightDescriptionsGetAsyncWithHttpInfo
     *
     * Retrieves a list of carrier freight descriptions.
     *
     * @param  string $accept Accept Header (required)
     * @param  string $carrier_id (required)
     * @param  bool $jiwa_stateful Stateful indicator (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function carrierFreightDescriptionsGETManyRequestCarrierIDFreightDescriptionsGetAsyncWithHttpInfo($accept, $carrier_id, $jiwa_stateful = null)
    {
        $returnType = '\Jiwa\JiwaModel\CarrierFreightDescription[]';
        $request = $this->carrierFreightDescriptionsGETManyRequestCarrierIDFreightDescriptionsGetRequest($accept, $carrier_id, $jiwa_stateful);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'carrierFreightDescriptionsGETManyRequestCarrierIDFreightDescriptionsGet'
     *
     * @param  string $accept Accept Header (required)
     * @param  string $carrier_id (required)
     * @param  bool $jiwa_stateful Stateful indicator (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function carrierFreightDescriptionsGETManyRequestCarrierIDFreightDescriptionsGetRequest($accept, $carrier_id, $jiwa_stateful = null)
    {
        // verify the required parameter 'accept' is set
        if ($accept === null || (is_array($accept) && count($accept) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $accept when calling carrierFreightDescriptionsGETManyRequestCarrierIDFreightDescriptionsGet'
            );
        }
        // verify the required parameter 'carrier_id' is set
        if ($carrier_id === null || (is_array($carrier_id) && count($carrier_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $carrier_id when calling carrierFreightDescriptionsGETManyRequestCarrierIDFreightDescriptionsGet'
            );
        }

        $resourcePath = '/Carriers/{CarrierID}/FreightDescriptions';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // header params
        if ($accept !== null) {
            $headerParams['Accept'] = ObjectSerializer::toHeaderValue($accept);
        }
        // header params
        if ($jiwa_stateful !== null) {
            $headerParams['jiwa-stateful'] = ObjectSerializer::toHeaderValue($jiwa_stateful);
        }

        // path params
        if ($carrier_id !== null) {
            $resourcePath = str_replace(
                '{' . 'CarrierID' . '}',
                ObjectSerializer::toPathValue($carrier_id),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json', 'application/xml']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json', 'application/xml'],
                ['application/x-www-form-urlencoded', 'application/json', 'application/xml']
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            
            if($headers['Content-Type'] === 'application/json') {
                // \stdClass has no __toString(), so we should encode it manually
                if ($httpBody instanceof \stdClass) {
                    $httpBody = \GuzzleHttp\json_encode($httpBody);
                }
                // array has no __toString(), so we should encode it manually
                if(is_array($httpBody)) {
                    $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($httpBody));
                }
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\Query::build($formParams);
            }
        }

        // this endpoint requires HTTP basic authentication
        if ($this->config->getUsername() !== null || $this->config->getPassword() !== null) {
            $headers['Authorization'] = 'Basic ' . base64_encode($this->config->getUsername() . ":" . $this->config->getPassword());
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\Query::build($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation carrierGETRequestCarrierIDGet
     *
     * Retrieves a carrier.
     *
     * @param  string $accept Accept Header (required)
     * @param  string $carrier_id carrier_id (required)
     * @param  bool $jiwa_stateful Stateful indicator (optional)
     *
     * @throws \Jiwa\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Jiwa\JiwaModel\Carrier
     */
    public function carrierGETRequestCarrierIDGet($accept, $carrier_id, $jiwa_stateful = null)
    {
        list($response) = $this->carrierGETRequestCarrierIDGetWithHttpInfo($accept, $carrier_id, $jiwa_stateful);
        return $response;
    }

    /**
     * Operation carrierGETRequestCarrierIDGetWithHttpInfo
     *
     * Retrieves a carrier.
     *
     * @param  string $accept Accept Header (required)
     * @param  string $carrier_id (required)
     * @param  bool $jiwa_stateful Stateful indicator (optional)
     *
     * @throws \Jiwa\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Jiwa\JiwaModel\Carrier, HTTP status code, HTTP response headers (array of strings)
     */
    public function carrierGETRequestCarrierIDGetWithHttpInfo($accept, $carrier_id, $jiwa_stateful = null)
    {
        $returnType = '\Jiwa\JiwaModel\Carrier';
        $request = $this->carrierGETRequestCarrierIDGetRequest($accept, $carrier_id, $jiwa_stateful);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Jiwa\JiwaModel\Carrier',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 403:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Jiwa\JiwaModel\Carrier',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 404:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Jiwa\JiwaModel\Carrier',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 401:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Jiwa\JiwaModel\Carrier',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation carrierGETRequestCarrierIDGetAsync
     *
     * Retrieves a carrier.
     *
     * @param  string $accept Accept Header (required)
     * @param  string $carrier_id (required)
     * @param  bool $jiwa_stateful Stateful indicator (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function carrierGETRequestCarrierIDGetAsync($accept, $carrier_id, $jiwa_stateful = null)
    {
        return $this->carrierGETRequestCarrierIDGetAsyncWithHttpInfo($accept, $carrier_id, $jiwa_stateful)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation carrierGETRequestCarrierIDGetAsyncWithHttpInfo
     *
     * Retrieves a carrier.
     *
     * @param  string $accept Accept Header (required)
     * @param  string $carrier_id (required)
     * @param  bool $jiwa_stateful Stateful indicator (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function carrierGETRequestCarrierIDGetAsyncWithHttpInfo($accept, $carrier_id, $jiwa_stateful = null)
    {
        $returnType = '\Jiwa\JiwaModel\Carrier';
        $request = $this->carrierGETRequestCarrierIDGetRequest($accept, $carrier_id, $jiwa_stateful);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'carrierGETRequestCarrierIDGet'
     *
     * @param  string $accept Accept Header (required)
     * @param  string $carrier_id (required)
     * @param  bool $jiwa_stateful Stateful indicator (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function carrierGETRequestCarrierIDGetRequest($accept, $carrier_id, $jiwa_stateful = null)
    {
        // verify the required parameter 'accept' is set
        if ($accept === null || (is_array($accept) && count($accept) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $accept when calling carrierGETRequestCarrierIDGet'
            );
        }
        // verify the required parameter 'carrier_id' is set
        if ($carrier_id === null || (is_array($carrier_id) && count($carrier_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $carrier_id when calling carrierGETRequestCarrierIDGet'
            );
        }

        $resourcePath = '/Carriers/{CarrierID}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // header params
        if ($accept !== null) {
            $headerParams['Accept'] = ObjectSerializer::toHeaderValue($accept);
        }
        // header params
        if ($jiwa_stateful !== null) {
            $headerParams['jiwa-stateful'] = ObjectSerializer::toHeaderValue($jiwa_stateful);
        }

        // path params
        if ($carrier_id !== null) {
            $resourcePath = str_replace(
                '{' . 'CarrierID' . '}',
                ObjectSerializer::toPathValue($carrier_id),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json', 'application/xml']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json', 'application/xml'],
                ['application/x-www-form-urlencoded', 'application/json', 'application/xml']
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            
            if($headers['Content-Type'] === 'application/json') {
                // \stdClass has no __toString(), so we should encode it manually
                if ($httpBody instanceof \stdClass) {
                    $httpBody = \GuzzleHttp\json_encode($httpBody);
                }
                // array has no __toString(), so we should encode it manually
                if(is_array($httpBody)) {
                    $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($httpBody));
                }
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\Query::build($formParams);
            }
        }

        // this endpoint requires HTTP basic authentication
        if ($this->config->getUsername() !== null || $this->config->getPassword() !== null) {
            $headers['Authorization'] = 'Basic ' . base64_encode($this->config->getUsername() . ":" . $this->config->getPassword());
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\Query::build($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation carrierPATCHRequestCarrierIDUpdate
     *
     * Updates a carrier.
     *
     * @param  string $accept Accept Header (required)
     * @param  string $carrier_id carrier_id (required)
     * @param  bool $jiwa_stateful Stateful indicator (optional)
     * @param  string $carrier_name carrier_name (optional)
     * @param  string $account_no account_no (optional)
     * @param  bool $enabled enabled (optional)
     * @param  string $notes notes (optional)
     * @param  \DateTime $last_saved_date_time last_saved_date_time (optional)
     * @param  string $services services (optional)
     * @param  string $freight_descriptions freight_descriptions (optional)
     * @param  \Jiwa\JiwaModel\CarrierPATCHRequest $body body (optional)
     *
     * @throws \Jiwa\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Jiwa\JiwaModel\Carrier
     */
    public function carrierPATCHRequestCarrierIDUpdate($accept, $carrier_id, $jiwa_stateful = null, $carrier_name = null, $account_no = null, $enabled = null, $notes = null, $last_saved_date_time = null, $services = null, $freight_descriptions = null, $body = null)
    {
        list($response) = $this->carrierPATCHRequestCarrierIDUpdateWithHttpInfo($accept, $carrier_id, $jiwa_stateful, $carrier_name, $account_no, $enabled, $notes, $last_saved_date_time, $services, $freight_descriptions, $body);
        return $response;
    }

    /**
     * Operation carrierPATCHRequestCarrierIDUpdateWithHttpInfo
     *
     * Updates a carrier.
     *
     * @param  string $accept Accept Header (required)
     * @param  string $carrier_id (required)
     * @param  bool $jiwa_stateful Stateful indicator (optional)
     * @param  string $carrier_name (optional)
     * @param  string $account_no (optional)
     * @param  bool $enabled (optional)
     * @param  string $notes (optional)
     * @param  \DateTime $last_saved_date_time (optional)
     * @param  string $services (optional)
     * @param  string $freight_descriptions (optional)
     * @param  \Jiwa\JiwaModel\CarrierPATCHRequest $body (optional)
     *
     * @throws \Jiwa\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Jiwa\JiwaModel\Carrier, HTTP status code, HTTP response headers (array of strings)
     */
    public function carrierPATCHRequestCarrierIDUpdateWithHttpInfo($accept, $carrier_id, $jiwa_stateful = null, $carrier_name = null, $account_no = null, $enabled = null, $notes = null, $last_saved_date_time = null, $services = null, $freight_descriptions = null, $body = null)
    {
        $returnType = '\Jiwa\JiwaModel\Carrier';
        $request = $this->carrierPATCHRequestCarrierIDUpdateRequest($accept, $carrier_id, $jiwa_stateful, $carrier_name, $account_no, $enabled, $notes, $last_saved_date_time, $services, $freight_descriptions, $body);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Jiwa\JiwaModel\Carrier',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 404:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Jiwa\JiwaModel\Carrier',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 401:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Jiwa\JiwaModel\Carrier',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 403:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Jiwa\JiwaModel\Carrier',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation carrierPATCHRequestCarrierIDUpdateAsync
     *
     * Updates a carrier.
     *
     * @param  string $accept Accept Header (required)
     * @param  string $carrier_id (required)
     * @param  bool $jiwa_stateful Stateful indicator (optional)
     * @param  string $carrier_name (optional)
     * @param  string $account_no (optional)
     * @param  bool $enabled (optional)
     * @param  string $notes (optional)
     * @param  \DateTime $last_saved_date_time (optional)
     * @param  string $services (optional)
     * @param  string $freight_descriptions (optional)
     * @param  \Jiwa\JiwaModel\CarrierPATCHRequest $body (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function carrierPATCHRequestCarrierIDUpdateAsync($accept, $carrier_id, $jiwa_stateful = null, $carrier_name = null, $account_no = null, $enabled = null, $notes = null, $last_saved_date_time = null, $services = null, $freight_descriptions = null, $body = null)
    {
        return $this->carrierPATCHRequestCarrierIDUpdateAsyncWithHttpInfo($accept, $carrier_id, $jiwa_stateful, $carrier_name, $account_no, $enabled, $notes, $last_saved_date_time, $services, $freight_descriptions, $body)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation carrierPATCHRequestCarrierIDUpdateAsyncWithHttpInfo
     *
     * Updates a carrier.
     *
     * @param  string $accept Accept Header (required)
     * @param  string $carrier_id (required)
     * @param  bool $jiwa_stateful Stateful indicator (optional)
     * @param  string $carrier_name (optional)
     * @param  string $account_no (optional)
     * @param  bool $enabled (optional)
     * @param  string $notes (optional)
     * @param  \DateTime $last_saved_date_time (optional)
     * @param  string $services (optional)
     * @param  string $freight_descriptions (optional)
     * @param  \Jiwa\JiwaModel\CarrierPATCHRequest $body (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function carrierPATCHRequestCarrierIDUpdateAsyncWithHttpInfo($accept, $carrier_id, $jiwa_stateful = null, $carrier_name = null, $account_no = null, $enabled = null, $notes = null, $last_saved_date_time = null, $services = null, $freight_descriptions = null, $body = null)
    {
        $returnType = '\Jiwa\JiwaModel\Carrier';
        $request = $this->carrierPATCHRequestCarrierIDUpdateRequest($accept, $carrier_id, $jiwa_stateful, $carrier_name, $account_no, $enabled, $notes, $last_saved_date_time, $services, $freight_descriptions, $body);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'carrierPATCHRequestCarrierIDUpdate'
     *
     * @param  string $accept Accept Header (required)
     * @param  string $carrier_id (required)
     * @param  bool $jiwa_stateful Stateful indicator (optional)
     * @param  string $carrier_name (optional)
     * @param  string $account_no (optional)
     * @param  bool $enabled (optional)
     * @param  string $notes (optional)
     * @param  \DateTime $last_saved_date_time (optional)
     * @param  string $services (optional)
     * @param  string $freight_descriptions (optional)
     * @param  \Jiwa\JiwaModel\CarrierPATCHRequest $body (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function carrierPATCHRequestCarrierIDUpdateRequest($accept, $carrier_id, $jiwa_stateful = null, $carrier_name = null, $account_no = null, $enabled = null, $notes = null, $last_saved_date_time = null, $services = null, $freight_descriptions = null, $body = null)
    {
        // verify the required parameter 'accept' is set
        if ($accept === null || (is_array($accept) && count($accept) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $accept when calling carrierPATCHRequestCarrierIDUpdate'
            );
        }
        // verify the required parameter 'carrier_id' is set
        if ($carrier_id === null || (is_array($carrier_id) && count($carrier_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $carrier_id when calling carrierPATCHRequestCarrierIDUpdate'
            );
        }

        $resourcePath = '/Carriers/{CarrierID}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        if ($carrier_name !== null) {
            $queryParams['CarrierName'] = ObjectSerializer::toQueryValue($carrier_name);
        }
        // query params
        if ($account_no !== null) {
            $queryParams['AccountNo'] = ObjectSerializer::toQueryValue($account_no);
        }
        // query params
        if ($enabled !== null) {
            $queryParams['Enabled'] = ObjectSerializer::toQueryValue($enabled);
        }
        // query params
        if ($notes !== null) {
            $queryParams['Notes'] = ObjectSerializer::toQueryValue($notes);
        }
        // query params
        if ($last_saved_date_time !== null) {
            $queryParams['LastSavedDateTime'] = ObjectSerializer::toQueryValue($last_saved_date_time);
        }
        // query params
        if ($services !== null) {
            $queryParams['Services'] = ObjectSerializer::toQueryValue($services);
        }
        // query params
        if ($freight_descriptions !== null) {
            $queryParams['FreightDescriptions'] = ObjectSerializer::toQueryValue($freight_descriptions);
        }
        // header params
        if ($accept !== null) {
            $headerParams['Accept'] = ObjectSerializer::toHeaderValue($accept);
        }
        // header params
        if ($jiwa_stateful !== null) {
            $headerParams['jiwa-stateful'] = ObjectSerializer::toHeaderValue($jiwa_stateful);
        }

        // path params
        if ($carrier_id !== null) {
            $resourcePath = str_replace(
                '{' . 'CarrierID' . '}',
                ObjectSerializer::toPathValue($carrier_id),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;
        if (isset($body)) {
            $_tempBody = $body;
        }

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json', 'application/xml']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json', 'application/xml'],
                ['application/x-www-form-urlencoded', 'application/json', 'application/xml']
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            
            if($headers['Content-Type'] === 'application/json') {
                // \stdClass has no __toString(), so we should encode it manually
                if ($httpBody instanceof \stdClass) {
                    $httpBody = \GuzzleHttp\json_encode($httpBody);
                }
                // array has no __toString(), so we should encode it manually
                if(is_array($httpBody)) {
                    $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($httpBody));
                }
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\Query::build($formParams);
            }
        }

        // this endpoint requires HTTP basic authentication
        if ($this->config->getUsername() !== null || $this->config->getPassword() !== null) {
            $headers['Authorization'] = 'Basic ' . base64_encode($this->config->getUsername() . ":" . $this->config->getPassword());
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\Query::build($queryParams);
        return new Request(
            'PATCH',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation carrierPOSTRequestPost
     *
     * Creates a carrier.
     *
     * @param  string $accept Accept Header (required)
     * @param  bool $jiwa_stateful Stateful indicator (optional)
     * @param  string $carrier_name carrier_name (optional)
     * @param  string $account_no account_no (optional)
     * @param  bool $enabled enabled (optional)
     * @param  string $notes notes (optional)
     * @param  string $services services (optional)
     * @param  string $freight_descriptions freight_descriptions (optional)
     * @param  \Jiwa\JiwaModel\CarrierPOSTRequest $body body (optional)
     *
     * @throws \Jiwa\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Jiwa\JiwaModel\Carrier
     */
    public function carrierPOSTRequestPost($accept, $jiwa_stateful = null, $carrier_name = null, $account_no = null, $enabled = null, $notes = null, $services = null, $freight_descriptions = null, $body = null)
    {
        list($response) = $this->carrierPOSTRequestPostWithHttpInfo($accept, $jiwa_stateful, $carrier_name, $account_no, $enabled, $notes, $services, $freight_descriptions, $body);
        return $response;
    }

    /**
     * Operation carrierPOSTRequestPostWithHttpInfo
     *
     * Creates a carrier.
     *
     * @param  string $accept Accept Header (required)
     * @param  bool $jiwa_stateful Stateful indicator (optional)
     * @param  string $carrier_name (optional)
     * @param  string $account_no (optional)
     * @param  bool $enabled (optional)
     * @param  string $notes (optional)
     * @param  string $services (optional)
     * @param  string $freight_descriptions (optional)
     * @param  \Jiwa\JiwaModel\CarrierPOSTRequest $body (optional)
     *
     * @throws \Jiwa\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Jiwa\JiwaModel\Carrier, HTTP status code, HTTP response headers (array of strings)
     */
    public function carrierPOSTRequestPostWithHttpInfo($accept, $jiwa_stateful = null, $carrier_name = null, $account_no = null, $enabled = null, $notes = null, $services = null, $freight_descriptions = null, $body = null)
    {
        $returnType = '\Jiwa\JiwaModel\Carrier';
        $request = $this->carrierPOSTRequestPostRequest($accept, $jiwa_stateful, $carrier_name, $account_no, $enabled, $notes, $services, $freight_descriptions, $body);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Jiwa\JiwaModel\Carrier',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 201:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Jiwa\JiwaModel\Carrier',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 401:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Jiwa\JiwaModel\Carrier',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 403:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Jiwa\JiwaModel\Carrier',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation carrierPOSTRequestPostAsync
     *
     * Creates a carrier.
     *
     * @param  string $accept Accept Header (required)
     * @param  bool $jiwa_stateful Stateful indicator (optional)
     * @param  string $carrier_name (optional)
     * @param  string $account_no (optional)
     * @param  bool $enabled (optional)
     * @param  string $notes (optional)
     * @param  string $services (optional)
     * @param  string $freight_descriptions (optional)
     * @param  \Jiwa\JiwaModel\CarrierPOSTRequest $body (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function carrierPOSTRequestPostAsync($accept, $jiwa_stateful = null, $carrier_name = null, $account_no = null, $enabled = null, $notes = null, $services = null, $freight_descriptions = null, $body = null)
    {
        return $this->carrierPOSTRequestPostAsyncWithHttpInfo($accept, $jiwa_stateful, $carrier_name, $account_no, $enabled, $notes, $services, $freight_descriptions, $body)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation carrierPOSTRequestPostAsyncWithHttpInfo
     *
     * Creates a carrier.
     *
     * @param  string $accept Accept Header (required)
     * @param  bool $jiwa_stateful Stateful indicator (optional)
     * @param  string $carrier_name (optional)
     * @param  string $account_no (optional)
     * @param  bool $enabled (optional)
     * @param  string $notes (optional)
     * @param  string $services (optional)
     * @param  string $freight_descriptions (optional)
     * @param  \Jiwa\JiwaModel\CarrierPOSTRequest $body (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function carrierPOSTRequestPostAsyncWithHttpInfo($accept, $jiwa_stateful = null, $carrier_name = null, $account_no = null, $enabled = null, $notes = null, $services = null, $freight_descriptions = null, $body = null)
    {
        $returnType = '\Jiwa\JiwaModel\Carrier';
        $request = $this->carrierPOSTRequestPostRequest($accept, $jiwa_stateful, $carrier_name, $account_no, $enabled, $notes, $services, $freight_descriptions, $body);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'carrierPOSTRequestPost'
     *
     * @param  string $accept Accept Header (required)
     * @param  bool $jiwa_stateful Stateful indicator (optional)
     * @param  string $carrier_name (optional)
     * @param  string $account_no (optional)
     * @param  bool $enabled (optional)
     * @param  string $notes (optional)
     * @param  string $services (optional)
     * @param  string $freight_descriptions (optional)
     * @param  \Jiwa\JiwaModel\CarrierPOSTRequest $body (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function carrierPOSTRequestPostRequest($accept, $jiwa_stateful = null, $carrier_name = null, $account_no = null, $enabled = null, $notes = null, $services = null, $freight_descriptions = null, $body = null)
    {
        // verify the required parameter 'accept' is set
        if ($accept === null || (is_array($accept) && count($accept) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $accept when calling carrierPOSTRequestPost'
            );
        }

        $resourcePath = '/Carriers';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        if ($carrier_name !== null) {
            $queryParams['CarrierName'] = ObjectSerializer::toQueryValue($carrier_name);
        }
        // query params
        if ($account_no !== null) {
            $queryParams['AccountNo'] = ObjectSerializer::toQueryValue($account_no);
        }
        // query params
        if ($enabled !== null) {
            $queryParams['Enabled'] = ObjectSerializer::toQueryValue($enabled);
        }
        // query params
        if ($notes !== null) {
            $queryParams['Notes'] = ObjectSerializer::toQueryValue($notes);
        }
        // query params
        if ($services !== null) {
            $queryParams['Services'] = ObjectSerializer::toQueryValue($services);
        }
        // query params
        if ($freight_descriptions !== null) {
            $queryParams['FreightDescriptions'] = ObjectSerializer::toQueryValue($freight_descriptions);
        }
        // header params
        if ($accept !== null) {
            $headerParams['Accept'] = ObjectSerializer::toHeaderValue($accept);
        }
        // header params
        if ($jiwa_stateful !== null) {
            $headerParams['jiwa-stateful'] = ObjectSerializer::toHeaderValue($jiwa_stateful);
        }


        // body params
        $_tempBody = null;
        if (isset($body)) {
            $_tempBody = $body;
        }

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json', 'application/xml']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json', 'application/xml'],
                ['application/x-www-form-urlencoded', 'application/json', 'application/xml']
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            
            if($headers['Content-Type'] === 'application/json') {
                // \stdClass has no __toString(), so we should encode it manually
                if ($httpBody instanceof \stdClass) {
                    $httpBody = \GuzzleHttp\json_encode($httpBody);
                }
                // array has no __toString(), so we should encode it manually
                if(is_array($httpBody)) {
                    $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($httpBody));
                }
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\Query::build($formParams);
            }
        }

        // this endpoint requires HTTP basic authentication
        if ($this->config->getUsername() !== null || $this->config->getPassword() !== null) {
            $headers['Authorization'] = 'Basic ' . base64_encode($this->config->getUsername() . ":" . $this->config->getPassword());
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\Query::build($queryParams);
        return new Request(
            'POST',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation carrierSAVERequestSaveGet
     *
     * Saves a stateful carrier.
     *
     * @param  string $accept Accept Header (required)
     * @param  bool $jiwa_stateful Stateful indicator (optional)
     * @param  string $carrier_id carrier_id (optional)
     *
     * @throws \Jiwa\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Jiwa\JiwaModel\Carrier
     */
    public function carrierSAVERequestSaveGet($accept, $jiwa_stateful = null, $carrier_id = null)
    {
        list($response) = $this->carrierSAVERequestSaveGetWithHttpInfo($accept, $jiwa_stateful, $carrier_id);
        return $response;
    }

    /**
     * Operation carrierSAVERequestSaveGetWithHttpInfo
     *
     * Saves a stateful carrier.
     *
     * @param  string $accept Accept Header (required)
     * @param  bool $jiwa_stateful Stateful indicator (optional)
     * @param  string $carrier_id (optional)
     *
     * @throws \Jiwa\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Jiwa\JiwaModel\Carrier, HTTP status code, HTTP response headers (array of strings)
     */
    public function carrierSAVERequestSaveGetWithHttpInfo($accept, $jiwa_stateful = null, $carrier_id = null)
    {
        $returnType = '\Jiwa\JiwaModel\Carrier';
        $request = $this->carrierSAVERequestSaveGetRequest($accept, $jiwa_stateful, $carrier_id);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Jiwa\JiwaModel\Carrier',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 404:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Jiwa\JiwaModel\Carrier',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 401:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Jiwa\JiwaModel\Carrier',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 403:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Jiwa\JiwaModel\Carrier',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation carrierSAVERequestSaveGetAsync
     *
     * Saves a stateful carrier.
     *
     * @param  string $accept Accept Header (required)
     * @param  bool $jiwa_stateful Stateful indicator (optional)
     * @param  string $carrier_id (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function carrierSAVERequestSaveGetAsync($accept, $jiwa_stateful = null, $carrier_id = null)
    {
        return $this->carrierSAVERequestSaveGetAsyncWithHttpInfo($accept, $jiwa_stateful, $carrier_id)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation carrierSAVERequestSaveGetAsyncWithHttpInfo
     *
     * Saves a stateful carrier.
     *
     * @param  string $accept Accept Header (required)
     * @param  bool $jiwa_stateful Stateful indicator (optional)
     * @param  string $carrier_id (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function carrierSAVERequestSaveGetAsyncWithHttpInfo($accept, $jiwa_stateful = null, $carrier_id = null)
    {
        $returnType = '\Jiwa\JiwaModel\Carrier';
        $request = $this->carrierSAVERequestSaveGetRequest($accept, $jiwa_stateful, $carrier_id);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'carrierSAVERequestSaveGet'
     *
     * @param  string $accept Accept Header (required)
     * @param  bool $jiwa_stateful Stateful indicator (optional)
     * @param  string $carrier_id (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function carrierSAVERequestSaveGetRequest($accept, $jiwa_stateful = null, $carrier_id = null)
    {
        // verify the required parameter 'accept' is set
        if ($accept === null || (is_array($accept) && count($accept) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $accept when calling carrierSAVERequestSaveGet'
            );
        }

        $resourcePath = '/Carriers/Save';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        if ($carrier_id !== null) {
            $queryParams['CarrierID'] = ObjectSerializer::toQueryValue($carrier_id);
        }
        // header params
        if ($accept !== null) {
            $headerParams['Accept'] = ObjectSerializer::toHeaderValue($accept);
        }
        // header params
        if ($jiwa_stateful !== null) {
            $headerParams['jiwa-stateful'] = ObjectSerializer::toHeaderValue($jiwa_stateful);
        }


        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json', 'application/xml']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json', 'application/xml'],
                ['application/x-www-form-urlencoded', 'application/json', 'application/xml']
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            
            if($headers['Content-Type'] === 'application/json') {
                // \stdClass has no __toString(), so we should encode it manually
                if ($httpBody instanceof \stdClass) {
                    $httpBody = \GuzzleHttp\json_encode($httpBody);
                }
                // array has no __toString(), so we should encode it manually
                if(is_array($httpBody)) {
                    $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($httpBody));
                }
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\Query::build($formParams);
            }
        }

        // this endpoint requires HTTP basic authentication
        if ($this->config->getUsername() !== null || $this->config->getPassword() !== null) {
            $headers['Authorization'] = 'Basic ' . base64_encode($this->config->getUsername() . ":" . $this->config->getPassword());
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\Query::build($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation carrierServiceDELETERequestCarrierIDServicesServiceIDDelete
     *
     * Deletes a carrier service.
     *
     * @param  string $accept Accept Header (required)
     * @param  string $carrier_id carrier_id (required)
     * @param  string $service_id service_id (required)
     * @param  bool $jiwa_stateful Stateful indicator (optional)
     * @param  string $service_name service_name (optional)
     * @param  bool $default_item default_item (optional)
     * @param  \DateTime $last_saved_date_time last_saved_date_time (optional)
     * @param  bool $enabled enabled (optional)
     *
     * @throws \Jiwa\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Jiwa\JiwaModel\Object
     */
    public function carrierServiceDELETERequestCarrierIDServicesServiceIDDelete($accept, $carrier_id, $service_id, $jiwa_stateful = null, $service_name = null, $default_item = null, $last_saved_date_time = null, $enabled = null)
    {
        list($response) = $this->carrierServiceDELETERequestCarrierIDServicesServiceIDDeleteWithHttpInfo($accept, $carrier_id, $service_id, $jiwa_stateful, $service_name, $default_item, $last_saved_date_time, $enabled);
        return $response;
    }

    /**
     * Operation carrierServiceDELETERequestCarrierIDServicesServiceIDDeleteWithHttpInfo
     *
     * Deletes a carrier service.
     *
     * @param  string $accept Accept Header (required)
     * @param  string $carrier_id (required)
     * @param  string $service_id (required)
     * @param  bool $jiwa_stateful Stateful indicator (optional)
     * @param  string $service_name (optional)
     * @param  bool $default_item (optional)
     * @param  \DateTime $last_saved_date_time (optional)
     * @param  bool $enabled (optional)
     *
     * @throws \Jiwa\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Jiwa\JiwaModel\Object, HTTP status code, HTTP response headers (array of strings)
     */
    public function carrierServiceDELETERequestCarrierIDServicesServiceIDDeleteWithHttpInfo($accept, $carrier_id, $service_id, $jiwa_stateful = null, $service_name = null, $default_item = null, $last_saved_date_time = null, $enabled = null)
    {
        $returnType = '\Jiwa\JiwaModel\Object';
        $request = $this->carrierServiceDELETERequestCarrierIDServicesServiceIDDeleteRequest($accept, $carrier_id, $service_id, $jiwa_stateful, $service_name, $default_item, $last_saved_date_time, $enabled);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Jiwa\JiwaModel\Object',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 204:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Jiwa\JiwaModel\Object',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 403:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Jiwa\JiwaModel\Object',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 404:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Jiwa\JiwaModel\Object',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 401:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Jiwa\JiwaModel\Object',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation carrierServiceDELETERequestCarrierIDServicesServiceIDDeleteAsync
     *
     * Deletes a carrier service.
     *
     * @param  string $accept Accept Header (required)
     * @param  string $carrier_id (required)
     * @param  string $service_id (required)
     * @param  bool $jiwa_stateful Stateful indicator (optional)
     * @param  string $service_name (optional)
     * @param  bool $default_item (optional)
     * @param  \DateTime $last_saved_date_time (optional)
     * @param  bool $enabled (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function carrierServiceDELETERequestCarrierIDServicesServiceIDDeleteAsync($accept, $carrier_id, $service_id, $jiwa_stateful = null, $service_name = null, $default_item = null, $last_saved_date_time = null, $enabled = null)
    {
        return $this->carrierServiceDELETERequestCarrierIDServicesServiceIDDeleteAsyncWithHttpInfo($accept, $carrier_id, $service_id, $jiwa_stateful, $service_name, $default_item, $last_saved_date_time, $enabled)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation carrierServiceDELETERequestCarrierIDServicesServiceIDDeleteAsyncWithHttpInfo
     *
     * Deletes a carrier service.
     *
     * @param  string $accept Accept Header (required)
     * @param  string $carrier_id (required)
     * @param  string $service_id (required)
     * @param  bool $jiwa_stateful Stateful indicator (optional)
     * @param  string $service_name (optional)
     * @param  bool $default_item (optional)
     * @param  \DateTime $last_saved_date_time (optional)
     * @param  bool $enabled (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function carrierServiceDELETERequestCarrierIDServicesServiceIDDeleteAsyncWithHttpInfo($accept, $carrier_id, $service_id, $jiwa_stateful = null, $service_name = null, $default_item = null, $last_saved_date_time = null, $enabled = null)
    {
        $returnType = '\Jiwa\JiwaModel\Object';
        $request = $this->carrierServiceDELETERequestCarrierIDServicesServiceIDDeleteRequest($accept, $carrier_id, $service_id, $jiwa_stateful, $service_name, $default_item, $last_saved_date_time, $enabled);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'carrierServiceDELETERequestCarrierIDServicesServiceIDDelete'
     *
     * @param  string $accept Accept Header (required)
     * @param  string $carrier_id (required)
     * @param  string $service_id (required)
     * @param  bool $jiwa_stateful Stateful indicator (optional)
     * @param  string $service_name (optional)
     * @param  bool $default_item (optional)
     * @param  \DateTime $last_saved_date_time (optional)
     * @param  bool $enabled (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function carrierServiceDELETERequestCarrierIDServicesServiceIDDeleteRequest($accept, $carrier_id, $service_id, $jiwa_stateful = null, $service_name = null, $default_item = null, $last_saved_date_time = null, $enabled = null)
    {
        // verify the required parameter 'accept' is set
        if ($accept === null || (is_array($accept) && count($accept) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $accept when calling carrierServiceDELETERequestCarrierIDServicesServiceIDDelete'
            );
        }
        // verify the required parameter 'carrier_id' is set
        if ($carrier_id === null || (is_array($carrier_id) && count($carrier_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $carrier_id when calling carrierServiceDELETERequestCarrierIDServicesServiceIDDelete'
            );
        }
        // verify the required parameter 'service_id' is set
        if ($service_id === null || (is_array($service_id) && count($service_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $service_id when calling carrierServiceDELETERequestCarrierIDServicesServiceIDDelete'
            );
        }

        $resourcePath = '/Carriers/{CarrierID}/Services/{ServiceID}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        if ($service_name !== null) {
            $queryParams['ServiceName'] = ObjectSerializer::toQueryValue($service_name);
        }
        // query params
        if ($default_item !== null) {
            $queryParams['DefaultItem'] = ObjectSerializer::toQueryValue($default_item);
        }
        // query params
        if ($last_saved_date_time !== null) {
            $queryParams['LastSavedDateTime'] = ObjectSerializer::toQueryValue($last_saved_date_time);
        }
        // query params
        if ($enabled !== null) {
            $queryParams['Enabled'] = ObjectSerializer::toQueryValue($enabled);
        }
        // header params
        if ($accept !== null) {
            $headerParams['Accept'] = ObjectSerializer::toHeaderValue($accept);
        }
        // header params
        if ($jiwa_stateful !== null) {
            $headerParams['jiwa-stateful'] = ObjectSerializer::toHeaderValue($jiwa_stateful);
        }

        // path params
        if ($carrier_id !== null) {
            $resourcePath = str_replace(
                '{' . 'CarrierID' . '}',
                ObjectSerializer::toPathValue($carrier_id),
                $resourcePath
            );
        }
        // path params
        if ($service_id !== null) {
            $resourcePath = str_replace(
                '{' . 'ServiceID' . '}',
                ObjectSerializer::toPathValue($service_id),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json', 'application/xml']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json', 'application/xml'],
                ['application/x-www-form-urlencoded', 'application/json', 'application/xml']
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            
            if($headers['Content-Type'] === 'application/json') {
                // \stdClass has no __toString(), so we should encode it manually
                if ($httpBody instanceof \stdClass) {
                    $httpBody = \GuzzleHttp\json_encode($httpBody);
                }
                // array has no __toString(), so we should encode it manually
                if(is_array($httpBody)) {
                    $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($httpBody));
                }
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\Query::build($formParams);
            }
        }

        // this endpoint requires HTTP basic authentication
        if ($this->config->getUsername() !== null || $this->config->getPassword() !== null) {
            $headers['Authorization'] = 'Basic ' . base64_encode($this->config->getUsername() . ":" . $this->config->getPassword());
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\Query::build($queryParams);
        return new Request(
            'DELETE',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation carrierServiceGETRequestCarrierIDServicesServiceIDGet
     *
     * Retrieves a service from a carrier.
     *
     * @param  string $accept Accept Header (required)
     * @param  string $carrier_id carrier_id (required)
     * @param  string $service_id service_id (required)
     * @param  bool $jiwa_stateful Stateful indicator (optional)
     *
     * @throws \Jiwa\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Jiwa\JiwaModel\CarrierService
     */
    public function carrierServiceGETRequestCarrierIDServicesServiceIDGet($accept, $carrier_id, $service_id, $jiwa_stateful = null)
    {
        list($response) = $this->carrierServiceGETRequestCarrierIDServicesServiceIDGetWithHttpInfo($accept, $carrier_id, $service_id, $jiwa_stateful);
        return $response;
    }

    /**
     * Operation carrierServiceGETRequestCarrierIDServicesServiceIDGetWithHttpInfo
     *
     * Retrieves a service from a carrier.
     *
     * @param  string $accept Accept Header (required)
     * @param  string $carrier_id (required)
     * @param  string $service_id (required)
     * @param  bool $jiwa_stateful Stateful indicator (optional)
     *
     * @throws \Jiwa\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Jiwa\JiwaModel\CarrierService, HTTP status code, HTTP response headers (array of strings)
     */
    public function carrierServiceGETRequestCarrierIDServicesServiceIDGetWithHttpInfo($accept, $carrier_id, $service_id, $jiwa_stateful = null)
    {
        $returnType = '\Jiwa\JiwaModel\CarrierService';
        $request = $this->carrierServiceGETRequestCarrierIDServicesServiceIDGetRequest($accept, $carrier_id, $service_id, $jiwa_stateful);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Jiwa\JiwaModel\CarrierService',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 401:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Jiwa\JiwaModel\CarrierService',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 404:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Jiwa\JiwaModel\CarrierService',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 403:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Jiwa\JiwaModel\CarrierService',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation carrierServiceGETRequestCarrierIDServicesServiceIDGetAsync
     *
     * Retrieves a service from a carrier.
     *
     * @param  string $accept Accept Header (required)
     * @param  string $carrier_id (required)
     * @param  string $service_id (required)
     * @param  bool $jiwa_stateful Stateful indicator (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function carrierServiceGETRequestCarrierIDServicesServiceIDGetAsync($accept, $carrier_id, $service_id, $jiwa_stateful = null)
    {
        return $this->carrierServiceGETRequestCarrierIDServicesServiceIDGetAsyncWithHttpInfo($accept, $carrier_id, $service_id, $jiwa_stateful)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation carrierServiceGETRequestCarrierIDServicesServiceIDGetAsyncWithHttpInfo
     *
     * Retrieves a service from a carrier.
     *
     * @param  string $accept Accept Header (required)
     * @param  string $carrier_id (required)
     * @param  string $service_id (required)
     * @param  bool $jiwa_stateful Stateful indicator (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function carrierServiceGETRequestCarrierIDServicesServiceIDGetAsyncWithHttpInfo($accept, $carrier_id, $service_id, $jiwa_stateful = null)
    {
        $returnType = '\Jiwa\JiwaModel\CarrierService';
        $request = $this->carrierServiceGETRequestCarrierIDServicesServiceIDGetRequest($accept, $carrier_id, $service_id, $jiwa_stateful);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'carrierServiceGETRequestCarrierIDServicesServiceIDGet'
     *
     * @param  string $accept Accept Header (required)
     * @param  string $carrier_id (required)
     * @param  string $service_id (required)
     * @param  bool $jiwa_stateful Stateful indicator (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function carrierServiceGETRequestCarrierIDServicesServiceIDGetRequest($accept, $carrier_id, $service_id, $jiwa_stateful = null)
    {
        // verify the required parameter 'accept' is set
        if ($accept === null || (is_array($accept) && count($accept) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $accept when calling carrierServiceGETRequestCarrierIDServicesServiceIDGet'
            );
        }
        // verify the required parameter 'carrier_id' is set
        if ($carrier_id === null || (is_array($carrier_id) && count($carrier_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $carrier_id when calling carrierServiceGETRequestCarrierIDServicesServiceIDGet'
            );
        }
        // verify the required parameter 'service_id' is set
        if ($service_id === null || (is_array($service_id) && count($service_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $service_id when calling carrierServiceGETRequestCarrierIDServicesServiceIDGet'
            );
        }

        $resourcePath = '/Carriers/{CarrierID}/Services/{ServiceID}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // header params
        if ($accept !== null) {
            $headerParams['Accept'] = ObjectSerializer::toHeaderValue($accept);
        }
        // header params
        if ($jiwa_stateful !== null) {
            $headerParams['jiwa-stateful'] = ObjectSerializer::toHeaderValue($jiwa_stateful);
        }

        // path params
        if ($carrier_id !== null) {
            $resourcePath = str_replace(
                '{' . 'CarrierID' . '}',
                ObjectSerializer::toPathValue($carrier_id),
                $resourcePath
            );
        }
        // path params
        if ($service_id !== null) {
            $resourcePath = str_replace(
                '{' . 'ServiceID' . '}',
                ObjectSerializer::toPathValue($service_id),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json', 'application/xml']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json', 'application/xml'],
                ['application/x-www-form-urlencoded', 'application/json', 'application/xml']
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            
            if($headers['Content-Type'] === 'application/json') {
                // \stdClass has no __toString(), so we should encode it manually
                if ($httpBody instanceof \stdClass) {
                    $httpBody = \GuzzleHttp\json_encode($httpBody);
                }
                // array has no __toString(), so we should encode it manually
                if(is_array($httpBody)) {
                    $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($httpBody));
                }
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\Query::build($formParams);
            }
        }

        // this endpoint requires HTTP basic authentication
        if ($this->config->getUsername() !== null || $this->config->getPassword() !== null) {
            $headers['Authorization'] = 'Basic ' . base64_encode($this->config->getUsername() . ":" . $this->config->getPassword());
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\Query::build($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation carrierServicePATCHRequestCarrierIDServicesServiceIDUpdate
     *
     * Updates a carrier service.
     *
     * @param  string $accept Accept Header (required)
     * @param  string $carrier_id carrier_id (required)
     * @param  string $service_id service_id (required)
     * @param  bool $jiwa_stateful Stateful indicator (optional)
     * @param  string $service_name service_name (optional)
     * @param  bool $default_item default_item (optional)
     * @param  \DateTime $last_saved_date_time last_saved_date_time (optional)
     * @param  bool $enabled enabled (optional)
     * @param  \Jiwa\JiwaModel\CarrierServicePATCHRequest $body body (optional)
     *
     * @throws \Jiwa\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Jiwa\JiwaModel\CarrierService
     */
    public function carrierServicePATCHRequestCarrierIDServicesServiceIDUpdate($accept, $carrier_id, $service_id, $jiwa_stateful = null, $service_name = null, $default_item = null, $last_saved_date_time = null, $enabled = null, $body = null)
    {
        list($response) = $this->carrierServicePATCHRequestCarrierIDServicesServiceIDUpdateWithHttpInfo($accept, $carrier_id, $service_id, $jiwa_stateful, $service_name, $default_item, $last_saved_date_time, $enabled, $body);
        return $response;
    }

    /**
     * Operation carrierServicePATCHRequestCarrierIDServicesServiceIDUpdateWithHttpInfo
     *
     * Updates a carrier service.
     *
     * @param  string $accept Accept Header (required)
     * @param  string $carrier_id (required)
     * @param  string $service_id (required)
     * @param  bool $jiwa_stateful Stateful indicator (optional)
     * @param  string $service_name (optional)
     * @param  bool $default_item (optional)
     * @param  \DateTime $last_saved_date_time (optional)
     * @param  bool $enabled (optional)
     * @param  \Jiwa\JiwaModel\CarrierServicePATCHRequest $body (optional)
     *
     * @throws \Jiwa\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Jiwa\JiwaModel\CarrierService, HTTP status code, HTTP response headers (array of strings)
     */
    public function carrierServicePATCHRequestCarrierIDServicesServiceIDUpdateWithHttpInfo($accept, $carrier_id, $service_id, $jiwa_stateful = null, $service_name = null, $default_item = null, $last_saved_date_time = null, $enabled = null, $body = null)
    {
        $returnType = '\Jiwa\JiwaModel\CarrierService';
        $request = $this->carrierServicePATCHRequestCarrierIDServicesServiceIDUpdateRequest($accept, $carrier_id, $service_id, $jiwa_stateful, $service_name, $default_item, $last_saved_date_time, $enabled, $body);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Jiwa\JiwaModel\CarrierService',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 401:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Jiwa\JiwaModel\CarrierService',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 404:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Jiwa\JiwaModel\CarrierService',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 403:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Jiwa\JiwaModel\CarrierService',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation carrierServicePATCHRequestCarrierIDServicesServiceIDUpdateAsync
     *
     * Updates a carrier service.
     *
     * @param  string $accept Accept Header (required)
     * @param  string $carrier_id (required)
     * @param  string $service_id (required)
     * @param  bool $jiwa_stateful Stateful indicator (optional)
     * @param  string $service_name (optional)
     * @param  bool $default_item (optional)
     * @param  \DateTime $last_saved_date_time (optional)
     * @param  bool $enabled (optional)
     * @param  \Jiwa\JiwaModel\CarrierServicePATCHRequest $body (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function carrierServicePATCHRequestCarrierIDServicesServiceIDUpdateAsync($accept, $carrier_id, $service_id, $jiwa_stateful = null, $service_name = null, $default_item = null, $last_saved_date_time = null, $enabled = null, $body = null)
    {
        return $this->carrierServicePATCHRequestCarrierIDServicesServiceIDUpdateAsyncWithHttpInfo($accept, $carrier_id, $service_id, $jiwa_stateful, $service_name, $default_item, $last_saved_date_time, $enabled, $body)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation carrierServicePATCHRequestCarrierIDServicesServiceIDUpdateAsyncWithHttpInfo
     *
     * Updates a carrier service.
     *
     * @param  string $accept Accept Header (required)
     * @param  string $carrier_id (required)
     * @param  string $service_id (required)
     * @param  bool $jiwa_stateful Stateful indicator (optional)
     * @param  string $service_name (optional)
     * @param  bool $default_item (optional)
     * @param  \DateTime $last_saved_date_time (optional)
     * @param  bool $enabled (optional)
     * @param  \Jiwa\JiwaModel\CarrierServicePATCHRequest $body (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function carrierServicePATCHRequestCarrierIDServicesServiceIDUpdateAsyncWithHttpInfo($accept, $carrier_id, $service_id, $jiwa_stateful = null, $service_name = null, $default_item = null, $last_saved_date_time = null, $enabled = null, $body = null)
    {
        $returnType = '\Jiwa\JiwaModel\CarrierService';
        $request = $this->carrierServicePATCHRequestCarrierIDServicesServiceIDUpdateRequest($accept, $carrier_id, $service_id, $jiwa_stateful, $service_name, $default_item, $last_saved_date_time, $enabled, $body);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'carrierServicePATCHRequestCarrierIDServicesServiceIDUpdate'
     *
     * @param  string $accept Accept Header (required)
     * @param  string $carrier_id (required)
     * @param  string $service_id (required)
     * @param  bool $jiwa_stateful Stateful indicator (optional)
     * @param  string $service_name (optional)
     * @param  bool $default_item (optional)
     * @param  \DateTime $last_saved_date_time (optional)
     * @param  bool $enabled (optional)
     * @param  \Jiwa\JiwaModel\CarrierServicePATCHRequest $body (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function carrierServicePATCHRequestCarrierIDServicesServiceIDUpdateRequest($accept, $carrier_id, $service_id, $jiwa_stateful = null, $service_name = null, $default_item = null, $last_saved_date_time = null, $enabled = null, $body = null)
    {
        // verify the required parameter 'accept' is set
        if ($accept === null || (is_array($accept) && count($accept) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $accept when calling carrierServicePATCHRequestCarrierIDServicesServiceIDUpdate'
            );
        }
        // verify the required parameter 'carrier_id' is set
        if ($carrier_id === null || (is_array($carrier_id) && count($carrier_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $carrier_id when calling carrierServicePATCHRequestCarrierIDServicesServiceIDUpdate'
            );
        }
        // verify the required parameter 'service_id' is set
        if ($service_id === null || (is_array($service_id) && count($service_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $service_id when calling carrierServicePATCHRequestCarrierIDServicesServiceIDUpdate'
            );
        }

        $resourcePath = '/Carriers/{CarrierID}/Services/{ServiceID}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        if ($service_name !== null) {
            $queryParams['ServiceName'] = ObjectSerializer::toQueryValue($service_name);
        }
        // query params
        if ($default_item !== null) {
            $queryParams['DefaultItem'] = ObjectSerializer::toQueryValue($default_item);
        }
        // query params
        if ($last_saved_date_time !== null) {
            $queryParams['LastSavedDateTime'] = ObjectSerializer::toQueryValue($last_saved_date_time);
        }
        // query params
        if ($enabled !== null) {
            $queryParams['Enabled'] = ObjectSerializer::toQueryValue($enabled);
        }
        // header params
        if ($accept !== null) {
            $headerParams['Accept'] = ObjectSerializer::toHeaderValue($accept);
        }
        // header params
        if ($jiwa_stateful !== null) {
            $headerParams['jiwa-stateful'] = ObjectSerializer::toHeaderValue($jiwa_stateful);
        }

        // path params
        if ($carrier_id !== null) {
            $resourcePath = str_replace(
                '{' . 'CarrierID' . '}',
                ObjectSerializer::toPathValue($carrier_id),
                $resourcePath
            );
        }
        // path params
        if ($service_id !== null) {
            $resourcePath = str_replace(
                '{' . 'ServiceID' . '}',
                ObjectSerializer::toPathValue($service_id),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;
        if (isset($body)) {
            $_tempBody = $body;
        }

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json', 'application/xml']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json', 'application/xml'],
                ['application/x-www-form-urlencoded', 'application/json', 'application/xml']
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            
            if($headers['Content-Type'] === 'application/json') {
                // \stdClass has no __toString(), so we should encode it manually
                if ($httpBody instanceof \stdClass) {
                    $httpBody = \GuzzleHttp\json_encode($httpBody);
                }
                // array has no __toString(), so we should encode it manually
                if(is_array($httpBody)) {
                    $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($httpBody));
                }
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\Query::build($formParams);
            }
        }

        // this endpoint requires HTTP basic authentication
        if ($this->config->getUsername() !== null || $this->config->getPassword() !== null) {
            $headers['Authorization'] = 'Basic ' . base64_encode($this->config->getUsername() . ":" . $this->config->getPassword());
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\Query::build($queryParams);
        return new Request(
            'PATCH',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation carrierServicePOSTRequestCarrierIDServicesPost
     *
     * Appends a service to a carrier.
     *
     * @param  string $accept Accept Header (required)
     * @param  string $carrier_id carrier_id (required)
     * @param  bool $jiwa_stateful Stateful indicator (optional)
     * @param  string $service_name service_name (optional)
     * @param  bool $default_item default_item (optional)
     * @param  \DateTime $last_saved_date_time last_saved_date_time (optional)
     * @param  bool $enabled enabled (optional)
     * @param  \Jiwa\JiwaModel\CarrierServicePOSTRequest $body body (optional)
     *
     * @throws \Jiwa\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Jiwa\JiwaModel\CarrierService
     */
    public function carrierServicePOSTRequestCarrierIDServicesPost($accept, $carrier_id, $jiwa_stateful = null, $service_name = null, $default_item = null, $last_saved_date_time = null, $enabled = null, $body = null)
    {
        list($response) = $this->carrierServicePOSTRequestCarrierIDServicesPostWithHttpInfo($accept, $carrier_id, $jiwa_stateful, $service_name, $default_item, $last_saved_date_time, $enabled, $body);
        return $response;
    }

    /**
     * Operation carrierServicePOSTRequestCarrierIDServicesPostWithHttpInfo
     *
     * Appends a service to a carrier.
     *
     * @param  string $accept Accept Header (required)
     * @param  string $carrier_id (required)
     * @param  bool $jiwa_stateful Stateful indicator (optional)
     * @param  string $service_name (optional)
     * @param  bool $default_item (optional)
     * @param  \DateTime $last_saved_date_time (optional)
     * @param  bool $enabled (optional)
     * @param  \Jiwa\JiwaModel\CarrierServicePOSTRequest $body (optional)
     *
     * @throws \Jiwa\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Jiwa\JiwaModel\CarrierService, HTTP status code, HTTP response headers (array of strings)
     */
    public function carrierServicePOSTRequestCarrierIDServicesPostWithHttpInfo($accept, $carrier_id, $jiwa_stateful = null, $service_name = null, $default_item = null, $last_saved_date_time = null, $enabled = null, $body = null)
    {
        $returnType = '\Jiwa\JiwaModel\CarrierService';
        $request = $this->carrierServicePOSTRequestCarrierIDServicesPostRequest($accept, $carrier_id, $jiwa_stateful, $service_name, $default_item, $last_saved_date_time, $enabled, $body);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Jiwa\JiwaModel\CarrierService',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 201:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Jiwa\JiwaModel\CarrierService',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 401:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Jiwa\JiwaModel\CarrierService',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 403:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Jiwa\JiwaModel\CarrierService',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 404:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Jiwa\JiwaModel\CarrierService',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation carrierServicePOSTRequestCarrierIDServicesPostAsync
     *
     * Appends a service to a carrier.
     *
     * @param  string $accept Accept Header (required)
     * @param  string $carrier_id (required)
     * @param  bool $jiwa_stateful Stateful indicator (optional)
     * @param  string $service_name (optional)
     * @param  bool $default_item (optional)
     * @param  \DateTime $last_saved_date_time (optional)
     * @param  bool $enabled (optional)
     * @param  \Jiwa\JiwaModel\CarrierServicePOSTRequest $body (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function carrierServicePOSTRequestCarrierIDServicesPostAsync($accept, $carrier_id, $jiwa_stateful = null, $service_name = null, $default_item = null, $last_saved_date_time = null, $enabled = null, $body = null)
    {
        return $this->carrierServicePOSTRequestCarrierIDServicesPostAsyncWithHttpInfo($accept, $carrier_id, $jiwa_stateful, $service_name, $default_item, $last_saved_date_time, $enabled, $body)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation carrierServicePOSTRequestCarrierIDServicesPostAsyncWithHttpInfo
     *
     * Appends a service to a carrier.
     *
     * @param  string $accept Accept Header (required)
     * @param  string $carrier_id (required)
     * @param  bool $jiwa_stateful Stateful indicator (optional)
     * @param  string $service_name (optional)
     * @param  bool $default_item (optional)
     * @param  \DateTime $last_saved_date_time (optional)
     * @param  bool $enabled (optional)
     * @param  \Jiwa\JiwaModel\CarrierServicePOSTRequest $body (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function carrierServicePOSTRequestCarrierIDServicesPostAsyncWithHttpInfo($accept, $carrier_id, $jiwa_stateful = null, $service_name = null, $default_item = null, $last_saved_date_time = null, $enabled = null, $body = null)
    {
        $returnType = '\Jiwa\JiwaModel\CarrierService';
        $request = $this->carrierServicePOSTRequestCarrierIDServicesPostRequest($accept, $carrier_id, $jiwa_stateful, $service_name, $default_item, $last_saved_date_time, $enabled, $body);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'carrierServicePOSTRequestCarrierIDServicesPost'
     *
     * @param  string $accept Accept Header (required)
     * @param  string $carrier_id (required)
     * @param  bool $jiwa_stateful Stateful indicator (optional)
     * @param  string $service_name (optional)
     * @param  bool $default_item (optional)
     * @param  \DateTime $last_saved_date_time (optional)
     * @param  bool $enabled (optional)
     * @param  \Jiwa\JiwaModel\CarrierServicePOSTRequest $body (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function carrierServicePOSTRequestCarrierIDServicesPostRequest($accept, $carrier_id, $jiwa_stateful = null, $service_name = null, $default_item = null, $last_saved_date_time = null, $enabled = null, $body = null)
    {
        // verify the required parameter 'accept' is set
        if ($accept === null || (is_array($accept) && count($accept) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $accept when calling carrierServicePOSTRequestCarrierIDServicesPost'
            );
        }
        // verify the required parameter 'carrier_id' is set
        if ($carrier_id === null || (is_array($carrier_id) && count($carrier_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $carrier_id when calling carrierServicePOSTRequestCarrierIDServicesPost'
            );
        }

        $resourcePath = '/Carriers/{CarrierID}/Services';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        if ($service_name !== null) {
            $queryParams['ServiceName'] = ObjectSerializer::toQueryValue($service_name);
        }
        // query params
        if ($default_item !== null) {
            $queryParams['DefaultItem'] = ObjectSerializer::toQueryValue($default_item);
        }
        // query params
        if ($last_saved_date_time !== null) {
            $queryParams['LastSavedDateTime'] = ObjectSerializer::toQueryValue($last_saved_date_time);
        }
        // query params
        if ($enabled !== null) {
            $queryParams['Enabled'] = ObjectSerializer::toQueryValue($enabled);
        }
        // header params
        if ($accept !== null) {
            $headerParams['Accept'] = ObjectSerializer::toHeaderValue($accept);
        }
        // header params
        if ($jiwa_stateful !== null) {
            $headerParams['jiwa-stateful'] = ObjectSerializer::toHeaderValue($jiwa_stateful);
        }

        // path params
        if ($carrier_id !== null) {
            $resourcePath = str_replace(
                '{' . 'CarrierID' . '}',
                ObjectSerializer::toPathValue($carrier_id),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;
        if (isset($body)) {
            $_tempBody = $body;
        }

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json', 'application/xml']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json', 'application/xml'],
                ['application/x-www-form-urlencoded', 'application/json', 'application/xml']
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            
            if($headers['Content-Type'] === 'application/json') {
                // \stdClass has no __toString(), so we should encode it manually
                if ($httpBody instanceof \stdClass) {
                    $httpBody = \GuzzleHttp\json_encode($httpBody);
                }
                // array has no __toString(), so we should encode it manually
                if(is_array($httpBody)) {
                    $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($httpBody));
                }
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\Query::build($formParams);
            }
        }

        // this endpoint requires HTTP basic authentication
        if ($this->config->getUsername() !== null || $this->config->getPassword() !== null) {
            $headers['Authorization'] = 'Basic ' . base64_encode($this->config->getUsername() . ":" . $this->config->getPassword());
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\Query::build($queryParams);
        return new Request(
            'POST',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation carrierServicesGETManyRequestCarrierIDServicesGet
     *
     * Retrieves a list of services for a carrier.
     *
     * @param  string $accept Accept Header (required)
     * @param  string $carrier_id carrier_id (required)
     * @param  bool $jiwa_stateful Stateful indicator (optional)
     *
     * @throws \Jiwa\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Jiwa\JiwaModel\CarrierService[]
     */
    public function carrierServicesGETManyRequestCarrierIDServicesGet($accept, $carrier_id, $jiwa_stateful = null)
    {
        list($response) = $this->carrierServicesGETManyRequestCarrierIDServicesGetWithHttpInfo($accept, $carrier_id, $jiwa_stateful);
        return $response;
    }

    /**
     * Operation carrierServicesGETManyRequestCarrierIDServicesGetWithHttpInfo
     *
     * Retrieves a list of services for a carrier.
     *
     * @param  string $accept Accept Header (required)
     * @param  string $carrier_id (required)
     * @param  bool $jiwa_stateful Stateful indicator (optional)
     *
     * @throws \Jiwa\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Jiwa\JiwaModel\CarrierService[], HTTP status code, HTTP response headers (array of strings)
     */
    public function carrierServicesGETManyRequestCarrierIDServicesGetWithHttpInfo($accept, $carrier_id, $jiwa_stateful = null)
    {
        $returnType = '\Jiwa\JiwaModel\CarrierService[]';
        $request = $this->carrierServicesGETManyRequestCarrierIDServicesGetRequest($accept, $carrier_id, $jiwa_stateful);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Jiwa\JiwaModel\CarrierService[]',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 401:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Jiwa\JiwaModel\CarrierService[]',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 403:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Jiwa\JiwaModel\CarrierService[]',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 404:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Jiwa\JiwaModel\CarrierService[]',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation carrierServicesGETManyRequestCarrierIDServicesGetAsync
     *
     * Retrieves a list of services for a carrier.
     *
     * @param  string $accept Accept Header (required)
     * @param  string $carrier_id (required)
     * @param  bool $jiwa_stateful Stateful indicator (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function carrierServicesGETManyRequestCarrierIDServicesGetAsync($accept, $carrier_id, $jiwa_stateful = null)
    {
        return $this->carrierServicesGETManyRequestCarrierIDServicesGetAsyncWithHttpInfo($accept, $carrier_id, $jiwa_stateful)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation carrierServicesGETManyRequestCarrierIDServicesGetAsyncWithHttpInfo
     *
     * Retrieves a list of services for a carrier.
     *
     * @param  string $accept Accept Header (required)
     * @param  string $carrier_id (required)
     * @param  bool $jiwa_stateful Stateful indicator (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function carrierServicesGETManyRequestCarrierIDServicesGetAsyncWithHttpInfo($accept, $carrier_id, $jiwa_stateful = null)
    {
        $returnType = '\Jiwa\JiwaModel\CarrierService[]';
        $request = $this->carrierServicesGETManyRequestCarrierIDServicesGetRequest($accept, $carrier_id, $jiwa_stateful);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'carrierServicesGETManyRequestCarrierIDServicesGet'
     *
     * @param  string $accept Accept Header (required)
     * @param  string $carrier_id (required)
     * @param  bool $jiwa_stateful Stateful indicator (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function carrierServicesGETManyRequestCarrierIDServicesGetRequest($accept, $carrier_id, $jiwa_stateful = null)
    {
        // verify the required parameter 'accept' is set
        if ($accept === null || (is_array($accept) && count($accept) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $accept when calling carrierServicesGETManyRequestCarrierIDServicesGet'
            );
        }
        // verify the required parameter 'carrier_id' is set
        if ($carrier_id === null || (is_array($carrier_id) && count($carrier_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $carrier_id when calling carrierServicesGETManyRequestCarrierIDServicesGet'
            );
        }

        $resourcePath = '/Carriers/{CarrierID}/Services';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // header params
        if ($accept !== null) {
            $headerParams['Accept'] = ObjectSerializer::toHeaderValue($accept);
        }
        // header params
        if ($jiwa_stateful !== null) {
            $headerParams['jiwa-stateful'] = ObjectSerializer::toHeaderValue($jiwa_stateful);
        }

        // path params
        if ($carrier_id !== null) {
            $resourcePath = str_replace(
                '{' . 'CarrierID' . '}',
                ObjectSerializer::toPathValue($carrier_id),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json', 'application/xml']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json', 'application/xml'],
                ['application/x-www-form-urlencoded', 'application/json', 'application/xml']
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            
            if($headers['Content-Type'] === 'application/json') {
                // \stdClass has no __toString(), so we should encode it manually
                if ($httpBody instanceof \stdClass) {
                    $httpBody = \GuzzleHttp\json_encode($httpBody);
                }
                // array has no __toString(), so we should encode it manually
                if(is_array($httpBody)) {
                    $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($httpBody));
                }
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\Query::build($formParams);
            }
        }

        // this endpoint requires HTTP basic authentication
        if ($this->config->getUsername() !== null || $this->config->getPassword() !== null) {
            $headers['Authorization'] = 'Basic ' . base64_encode($this->config->getUsername() . ":" . $this->config->getPassword());
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\Query::build($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Create http client option
     *
     * @throws \RuntimeException on file opening failure
     * @return array of http client options
     */
    protected function createHttpClientOption()
    {
        $options = [];
        if ($this->config->getDebug()) {
            $options[RequestOptions::DEBUG] = fopen($this->config->getDebugFile(), 'a');
            if (!$options[RequestOptions::DEBUG]) {
                throw new \RuntimeException('Failed to open the debug file: ' . $this->config->getDebugFile());
            }
        }

        return $options;
    }
}

<?php
/**
 * TaxRatesApi
 * PHP version 5
 *
 * @category Class
 * @package  Jiwa
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * JiwaAPI
 *
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: 1.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 * Swagger Codegen version: 2.4.28-SNAPSHOT
 */

/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Jiwa\JiwaAPI;

use GuzzleHttp\Client;
use GuzzleHttp\ClientInterface;
use GuzzleHttp\Exception\RequestException;
use GuzzleHttp\Psr7\MultipartStream;
use GuzzleHttp\Psr7\Request;
use GuzzleHttp\RequestOptions;
use Jiwa\ApiException;
use Jiwa\Configuration;
use Jiwa\HeaderSelector;
use Jiwa\ObjectSerializer;

/**
 * TaxRatesApi Class Doc Comment
 *
 * @category Class
 * @package  Jiwa
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class TaxRatesApi
{
    /**
     * @var ClientInterface
     */
    protected $client;

    /**
     * @var Configuration
     */
    protected $config;

    /**
     * @var HeaderSelector
     */
    protected $headerSelector;

    /**
     * @param ClientInterface $client
     * @param Configuration   $config
     * @param HeaderSelector  $selector
     */
    public function __construct(
        ClientInterface $client = null,
        Configuration $config = null,
        HeaderSelector $selector = null
    ) {
        $this->client = $client ?: new Client();
        $this->config = $config ?: new Configuration();
        $this->headerSelector = $selector ?: new HeaderSelector();
    }

    /**
     * @return Configuration
     */
    public function getConfig()
    {
        return $this->config;
    }

    /**
     * Operation taxRateABANDONRequestAbandonDelete
     *
     * Abandons a stateful TaxRate collection.
     *
     * @param  string $accept Accept Header (required)
     * @param  bool $jiwa_stateful Stateful indicator (optional)
     *
     * @throws \Jiwa\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Jiwa\JiwaModel\Object
     */
    public function taxRateABANDONRequestAbandonDelete($accept, $jiwa_stateful = null)
    {
        list($response) = $this->taxRateABANDONRequestAbandonDeleteWithHttpInfo($accept, $jiwa_stateful);
        return $response;
    }

    /**
     * Operation taxRateABANDONRequestAbandonDeleteWithHttpInfo
     *
     * Abandons a stateful TaxRate collection.
     *
     * @param  string $accept Accept Header (required)
     * @param  bool $jiwa_stateful Stateful indicator (optional)
     *
     * @throws \Jiwa\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Jiwa\JiwaModel\Object, HTTP status code, HTTP response headers (array of strings)
     */
    public function taxRateABANDONRequestAbandonDeleteWithHttpInfo($accept, $jiwa_stateful = null)
    {
        $returnType = '\Jiwa\JiwaModel\Object';
        $request = $this->taxRateABANDONRequestAbandonDeleteRequest($accept, $jiwa_stateful);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Jiwa\JiwaModel\Object',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 403:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Jiwa\JiwaModel\Object',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 404:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Jiwa\JiwaModel\Object',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 401:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Jiwa\JiwaModel\Object',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation taxRateABANDONRequestAbandonDeleteAsync
     *
     * Abandons a stateful TaxRate collection.
     *
     * @param  string $accept Accept Header (required)
     * @param  bool $jiwa_stateful Stateful indicator (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function taxRateABANDONRequestAbandonDeleteAsync($accept, $jiwa_stateful = null)
    {
        return $this->taxRateABANDONRequestAbandonDeleteAsyncWithHttpInfo($accept, $jiwa_stateful)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation taxRateABANDONRequestAbandonDeleteAsyncWithHttpInfo
     *
     * Abandons a stateful TaxRate collection.
     *
     * @param  string $accept Accept Header (required)
     * @param  bool $jiwa_stateful Stateful indicator (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function taxRateABANDONRequestAbandonDeleteAsyncWithHttpInfo($accept, $jiwa_stateful = null)
    {
        $returnType = '\Jiwa\JiwaModel\Object';
        $request = $this->taxRateABANDONRequestAbandonDeleteRequest($accept, $jiwa_stateful);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'taxRateABANDONRequestAbandonDelete'
     *
     * @param  string $accept Accept Header (required)
     * @param  bool $jiwa_stateful Stateful indicator (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function taxRateABANDONRequestAbandonDeleteRequest($accept, $jiwa_stateful = null)
    {
        // verify the required parameter 'accept' is set
        if ($accept === null || (is_array($accept) && count($accept) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $accept when calling taxRateABANDONRequestAbandonDelete'
            );
        }

        $resourcePath = '/TaxRates/Abandon';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // header params
        if ($accept !== null) {
            $headerParams['Accept'] = ObjectSerializer::toHeaderValue($accept);
        }
        // header params
        if ($jiwa_stateful !== null) {
            $headerParams['jiwa-stateful'] = ObjectSerializer::toHeaderValue($jiwa_stateful);
        }


        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json', 'application/xml']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json', 'application/xml'],
                ['application/x-www-form-urlencoded', 'application/json', 'application/xml']
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            
            if($headers['Content-Type'] === 'application/json') {
                // \stdClass has no __toString(), so we should encode it manually
                if ($httpBody instanceof \stdClass) {
                    $httpBody = \GuzzleHttp\json_encode($httpBody);
                }
                // array has no __toString(), so we should encode it manually
                if(is_array($httpBody)) {
                    $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($httpBody));
                }
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\Query::build($formParams);
            }
        }

        // this endpoint requires HTTP basic authentication
        if ($this->config->getUsername() !== null || $this->config->getPassword() !== null) {
            $headers['Authorization'] = 'Basic ' . base64_encode($this->config->getUsername() . ":" . $this->config->getPassword());
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\Query::build($queryParams);
        return new Request(
            'DELETE',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation taxRateDELETERequestTaxIDDelete
     *
     * Deletes a tax rate.
     *
     * @param  string $accept Accept Header (required)
     * @param  string $tax_id tax_id (required)
     * @param  bool $jiwa_stateful Stateful indicator (optional)
     *
     * @throws \Jiwa\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Jiwa\JiwaModel\Object
     */
    public function taxRateDELETERequestTaxIDDelete($accept, $tax_id, $jiwa_stateful = null)
    {
        list($response) = $this->taxRateDELETERequestTaxIDDeleteWithHttpInfo($accept, $tax_id, $jiwa_stateful);
        return $response;
    }

    /**
     * Operation taxRateDELETERequestTaxIDDeleteWithHttpInfo
     *
     * Deletes a tax rate.
     *
     * @param  string $accept Accept Header (required)
     * @param  string $tax_id (required)
     * @param  bool $jiwa_stateful Stateful indicator (optional)
     *
     * @throws \Jiwa\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Jiwa\JiwaModel\Object, HTTP status code, HTTP response headers (array of strings)
     */
    public function taxRateDELETERequestTaxIDDeleteWithHttpInfo($accept, $tax_id, $jiwa_stateful = null)
    {
        $returnType = '\Jiwa\JiwaModel\Object';
        $request = $this->taxRateDELETERequestTaxIDDeleteRequest($accept, $tax_id, $jiwa_stateful);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Jiwa\JiwaModel\Object',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 404:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Jiwa\JiwaModel\Object',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 204:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Jiwa\JiwaModel\Object',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 401:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Jiwa\JiwaModel\Object',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 403:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Jiwa\JiwaModel\Object',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation taxRateDELETERequestTaxIDDeleteAsync
     *
     * Deletes a tax rate.
     *
     * @param  string $accept Accept Header (required)
     * @param  string $tax_id (required)
     * @param  bool $jiwa_stateful Stateful indicator (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function taxRateDELETERequestTaxIDDeleteAsync($accept, $tax_id, $jiwa_stateful = null)
    {
        return $this->taxRateDELETERequestTaxIDDeleteAsyncWithHttpInfo($accept, $tax_id, $jiwa_stateful)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation taxRateDELETERequestTaxIDDeleteAsyncWithHttpInfo
     *
     * Deletes a tax rate.
     *
     * @param  string $accept Accept Header (required)
     * @param  string $tax_id (required)
     * @param  bool $jiwa_stateful Stateful indicator (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function taxRateDELETERequestTaxIDDeleteAsyncWithHttpInfo($accept, $tax_id, $jiwa_stateful = null)
    {
        $returnType = '\Jiwa\JiwaModel\Object';
        $request = $this->taxRateDELETERequestTaxIDDeleteRequest($accept, $tax_id, $jiwa_stateful);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'taxRateDELETERequestTaxIDDelete'
     *
     * @param  string $accept Accept Header (required)
     * @param  string $tax_id (required)
     * @param  bool $jiwa_stateful Stateful indicator (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function taxRateDELETERequestTaxIDDeleteRequest($accept, $tax_id, $jiwa_stateful = null)
    {
        // verify the required parameter 'accept' is set
        if ($accept === null || (is_array($accept) && count($accept) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $accept when calling taxRateDELETERequestTaxIDDelete'
            );
        }
        // verify the required parameter 'tax_id' is set
        if ($tax_id === null || (is_array($tax_id) && count($tax_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $tax_id when calling taxRateDELETERequestTaxIDDelete'
            );
        }

        $resourcePath = '/TaxRates/{TaxID}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // header params
        if ($accept !== null) {
            $headerParams['Accept'] = ObjectSerializer::toHeaderValue($accept);
        }
        // header params
        if ($jiwa_stateful !== null) {
            $headerParams['jiwa-stateful'] = ObjectSerializer::toHeaderValue($jiwa_stateful);
        }

        // path params
        if ($tax_id !== null) {
            $resourcePath = str_replace(
                '{' . 'TaxID' . '}',
                ObjectSerializer::toPathValue($tax_id),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json', 'application/xml']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json', 'application/xml'],
                ['application/x-www-form-urlencoded', 'application/json', 'application/xml']
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            
            if($headers['Content-Type'] === 'application/json') {
                // \stdClass has no __toString(), so we should encode it manually
                if ($httpBody instanceof \stdClass) {
                    $httpBody = \GuzzleHttp\json_encode($httpBody);
                }
                // array has no __toString(), so we should encode it manually
                if(is_array($httpBody)) {
                    $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($httpBody));
                }
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\Query::build($formParams);
            }
        }

        // this endpoint requires HTTP basic authentication
        if ($this->config->getUsername() !== null || $this->config->getPassword() !== null) {
            $headers['Authorization'] = 'Basic ' . base64_encode($this->config->getUsername() . ":" . $this->config->getPassword());
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\Query::build($queryParams);
        return new Request(
            'DELETE',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation taxRateGETRequestTaxIDGet
     *
     * Retrieves a tax rate.
     *
     * @param  string $accept Accept Header (required)
     * @param  string $tax_id tax_id (required)
     * @param  bool $jiwa_stateful Stateful indicator (optional)
     *
     * @throws \Jiwa\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Jiwa\JiwaModel\TaxRate
     */
    public function taxRateGETRequestTaxIDGet($accept, $tax_id, $jiwa_stateful = null)
    {
        list($response) = $this->taxRateGETRequestTaxIDGetWithHttpInfo($accept, $tax_id, $jiwa_stateful);
        return $response;
    }

    /**
     * Operation taxRateGETRequestTaxIDGetWithHttpInfo
     *
     * Retrieves a tax rate.
     *
     * @param  string $accept Accept Header (required)
     * @param  string $tax_id (required)
     * @param  bool $jiwa_stateful Stateful indicator (optional)
     *
     * @throws \Jiwa\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Jiwa\JiwaModel\TaxRate, HTTP status code, HTTP response headers (array of strings)
     */
    public function taxRateGETRequestTaxIDGetWithHttpInfo($accept, $tax_id, $jiwa_stateful = null)
    {
        $returnType = '\Jiwa\JiwaModel\TaxRate';
        $request = $this->taxRateGETRequestTaxIDGetRequest($accept, $tax_id, $jiwa_stateful);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Jiwa\JiwaModel\TaxRate',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 401:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Jiwa\JiwaModel\TaxRate',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 404:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Jiwa\JiwaModel\TaxRate',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 403:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Jiwa\JiwaModel\TaxRate',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation taxRateGETRequestTaxIDGetAsync
     *
     * Retrieves a tax rate.
     *
     * @param  string $accept Accept Header (required)
     * @param  string $tax_id (required)
     * @param  bool $jiwa_stateful Stateful indicator (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function taxRateGETRequestTaxIDGetAsync($accept, $tax_id, $jiwa_stateful = null)
    {
        return $this->taxRateGETRequestTaxIDGetAsyncWithHttpInfo($accept, $tax_id, $jiwa_stateful)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation taxRateGETRequestTaxIDGetAsyncWithHttpInfo
     *
     * Retrieves a tax rate.
     *
     * @param  string $accept Accept Header (required)
     * @param  string $tax_id (required)
     * @param  bool $jiwa_stateful Stateful indicator (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function taxRateGETRequestTaxIDGetAsyncWithHttpInfo($accept, $tax_id, $jiwa_stateful = null)
    {
        $returnType = '\Jiwa\JiwaModel\TaxRate';
        $request = $this->taxRateGETRequestTaxIDGetRequest($accept, $tax_id, $jiwa_stateful);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'taxRateGETRequestTaxIDGet'
     *
     * @param  string $accept Accept Header (required)
     * @param  string $tax_id (required)
     * @param  bool $jiwa_stateful Stateful indicator (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function taxRateGETRequestTaxIDGetRequest($accept, $tax_id, $jiwa_stateful = null)
    {
        // verify the required parameter 'accept' is set
        if ($accept === null || (is_array($accept) && count($accept) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $accept when calling taxRateGETRequestTaxIDGet'
            );
        }
        // verify the required parameter 'tax_id' is set
        if ($tax_id === null || (is_array($tax_id) && count($tax_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $tax_id when calling taxRateGETRequestTaxIDGet'
            );
        }

        $resourcePath = '/TaxRates/{TaxID}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // header params
        if ($accept !== null) {
            $headerParams['Accept'] = ObjectSerializer::toHeaderValue($accept);
        }
        // header params
        if ($jiwa_stateful !== null) {
            $headerParams['jiwa-stateful'] = ObjectSerializer::toHeaderValue($jiwa_stateful);
        }

        // path params
        if ($tax_id !== null) {
            $resourcePath = str_replace(
                '{' . 'TaxID' . '}',
                ObjectSerializer::toPathValue($tax_id),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json', 'application/xml']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json', 'application/xml'],
                ['application/x-www-form-urlencoded', 'application/json', 'application/xml']
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            
            if($headers['Content-Type'] === 'application/json') {
                // \stdClass has no __toString(), so we should encode it manually
                if ($httpBody instanceof \stdClass) {
                    $httpBody = \GuzzleHttp\json_encode($httpBody);
                }
                // array has no __toString(), so we should encode it manually
                if(is_array($httpBody)) {
                    $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($httpBody));
                }
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\Query::build($formParams);
            }
        }

        // this endpoint requires HTTP basic authentication
        if ($this->config->getUsername() !== null || $this->config->getPassword() !== null) {
            $headers['Authorization'] = 'Basic ' . base64_encode($this->config->getUsername() . ":" . $this->config->getPassword());
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\Query::build($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation taxRatePATCHRequestTaxIDUpdate
     *
     * Updates a tax rate.
     *
     * @param  string $accept Accept Header (required)
     * @param  string $tax_id tax_id (required)
     * @param  bool $jiwa_stateful Stateful indicator (optional)
     * @param  string $rec_id rec_id (optional)
     * @param  string $description description (optional)
     * @param  string $gst_tax_group gst_tax_group (optional)
     * @param  double $rate rate (optional)
     * @param  bool $is_default_rate is_default_rate (optional)
     * @param  double $bas_code bas_code (optional)
     * @param  bool $is_default_rate_in_group is_default_rate_in_group (optional)
     * @param  bool $is_enabled is_enabled (optional)
     * @param  string $ledger_account ledger_account (optional)
     * @param  \Jiwa\JiwaModel\TaxRatePATCHRequest $body body (optional)
     *
     * @throws \Jiwa\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Jiwa\JiwaModel\TaxRate
     */
    public function taxRatePATCHRequestTaxIDUpdate($accept, $tax_id, $jiwa_stateful = null, $rec_id = null, $description = null, $gst_tax_group = null, $rate = null, $is_default_rate = null, $bas_code = null, $is_default_rate_in_group = null, $is_enabled = null, $ledger_account = null, $body = null)
    {
        list($response) = $this->taxRatePATCHRequestTaxIDUpdateWithHttpInfo($accept, $tax_id, $jiwa_stateful, $rec_id, $description, $gst_tax_group, $rate, $is_default_rate, $bas_code, $is_default_rate_in_group, $is_enabled, $ledger_account, $body);
        return $response;
    }

    /**
     * Operation taxRatePATCHRequestTaxIDUpdateWithHttpInfo
     *
     * Updates a tax rate.
     *
     * @param  string $accept Accept Header (required)
     * @param  string $tax_id (required)
     * @param  bool $jiwa_stateful Stateful indicator (optional)
     * @param  string $rec_id (optional)
     * @param  string $description (optional)
     * @param  string $gst_tax_group (optional)
     * @param  double $rate (optional)
     * @param  bool $is_default_rate (optional)
     * @param  double $bas_code (optional)
     * @param  bool $is_default_rate_in_group (optional)
     * @param  bool $is_enabled (optional)
     * @param  string $ledger_account (optional)
     * @param  \Jiwa\JiwaModel\TaxRatePATCHRequest $body (optional)
     *
     * @throws \Jiwa\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Jiwa\JiwaModel\TaxRate, HTTP status code, HTTP response headers (array of strings)
     */
    public function taxRatePATCHRequestTaxIDUpdateWithHttpInfo($accept, $tax_id, $jiwa_stateful = null, $rec_id = null, $description = null, $gst_tax_group = null, $rate = null, $is_default_rate = null, $bas_code = null, $is_default_rate_in_group = null, $is_enabled = null, $ledger_account = null, $body = null)
    {
        $returnType = '\Jiwa\JiwaModel\TaxRate';
        $request = $this->taxRatePATCHRequestTaxIDUpdateRequest($accept, $tax_id, $jiwa_stateful, $rec_id, $description, $gst_tax_group, $rate, $is_default_rate, $bas_code, $is_default_rate_in_group, $is_enabled, $ledger_account, $body);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Jiwa\JiwaModel\TaxRate',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 404:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Jiwa\JiwaModel\TaxRate',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 401:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Jiwa\JiwaModel\TaxRate',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 403:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Jiwa\JiwaModel\TaxRate',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation taxRatePATCHRequestTaxIDUpdateAsync
     *
     * Updates a tax rate.
     *
     * @param  string $accept Accept Header (required)
     * @param  string $tax_id (required)
     * @param  bool $jiwa_stateful Stateful indicator (optional)
     * @param  string $rec_id (optional)
     * @param  string $description (optional)
     * @param  string $gst_tax_group (optional)
     * @param  double $rate (optional)
     * @param  bool $is_default_rate (optional)
     * @param  double $bas_code (optional)
     * @param  bool $is_default_rate_in_group (optional)
     * @param  bool $is_enabled (optional)
     * @param  string $ledger_account (optional)
     * @param  \Jiwa\JiwaModel\TaxRatePATCHRequest $body (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function taxRatePATCHRequestTaxIDUpdateAsync($accept, $tax_id, $jiwa_stateful = null, $rec_id = null, $description = null, $gst_tax_group = null, $rate = null, $is_default_rate = null, $bas_code = null, $is_default_rate_in_group = null, $is_enabled = null, $ledger_account = null, $body = null)
    {
        return $this->taxRatePATCHRequestTaxIDUpdateAsyncWithHttpInfo($accept, $tax_id, $jiwa_stateful, $rec_id, $description, $gst_tax_group, $rate, $is_default_rate, $bas_code, $is_default_rate_in_group, $is_enabled, $ledger_account, $body)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation taxRatePATCHRequestTaxIDUpdateAsyncWithHttpInfo
     *
     * Updates a tax rate.
     *
     * @param  string $accept Accept Header (required)
     * @param  string $tax_id (required)
     * @param  bool $jiwa_stateful Stateful indicator (optional)
     * @param  string $rec_id (optional)
     * @param  string $description (optional)
     * @param  string $gst_tax_group (optional)
     * @param  double $rate (optional)
     * @param  bool $is_default_rate (optional)
     * @param  double $bas_code (optional)
     * @param  bool $is_default_rate_in_group (optional)
     * @param  bool $is_enabled (optional)
     * @param  string $ledger_account (optional)
     * @param  \Jiwa\JiwaModel\TaxRatePATCHRequest $body (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function taxRatePATCHRequestTaxIDUpdateAsyncWithHttpInfo($accept, $tax_id, $jiwa_stateful = null, $rec_id = null, $description = null, $gst_tax_group = null, $rate = null, $is_default_rate = null, $bas_code = null, $is_default_rate_in_group = null, $is_enabled = null, $ledger_account = null, $body = null)
    {
        $returnType = '\Jiwa\JiwaModel\TaxRate';
        $request = $this->taxRatePATCHRequestTaxIDUpdateRequest($accept, $tax_id, $jiwa_stateful, $rec_id, $description, $gst_tax_group, $rate, $is_default_rate, $bas_code, $is_default_rate_in_group, $is_enabled, $ledger_account, $body);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'taxRatePATCHRequestTaxIDUpdate'
     *
     * @param  string $accept Accept Header (required)
     * @param  string $tax_id (required)
     * @param  bool $jiwa_stateful Stateful indicator (optional)
     * @param  string $rec_id (optional)
     * @param  string $description (optional)
     * @param  string $gst_tax_group (optional)
     * @param  double $rate (optional)
     * @param  bool $is_default_rate (optional)
     * @param  double $bas_code (optional)
     * @param  bool $is_default_rate_in_group (optional)
     * @param  bool $is_enabled (optional)
     * @param  string $ledger_account (optional)
     * @param  \Jiwa\JiwaModel\TaxRatePATCHRequest $body (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function taxRatePATCHRequestTaxIDUpdateRequest($accept, $tax_id, $jiwa_stateful = null, $rec_id = null, $description = null, $gst_tax_group = null, $rate = null, $is_default_rate = null, $bas_code = null, $is_default_rate_in_group = null, $is_enabled = null, $ledger_account = null, $body = null)
    {
        // verify the required parameter 'accept' is set
        if ($accept === null || (is_array($accept) && count($accept) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $accept when calling taxRatePATCHRequestTaxIDUpdate'
            );
        }
        // verify the required parameter 'tax_id' is set
        if ($tax_id === null || (is_array($tax_id) && count($tax_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $tax_id when calling taxRatePATCHRequestTaxIDUpdate'
            );
        }

        $resourcePath = '/TaxRates/{TaxID}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        if ($rec_id !== null) {
            $queryParams['RecID'] = ObjectSerializer::toQueryValue($rec_id);
        }
        // query params
        if ($description !== null) {
            $queryParams['Description'] = ObjectSerializer::toQueryValue($description);
        }
        // query params
        if ($gst_tax_group !== null) {
            $queryParams['GSTTaxGroup'] = ObjectSerializer::toQueryValue($gst_tax_group);
        }
        // query params
        if ($rate !== null) {
            $queryParams['Rate'] = ObjectSerializer::toQueryValue($rate);
        }
        // query params
        if ($is_default_rate !== null) {
            $queryParams['IsDefaultRate'] = ObjectSerializer::toQueryValue($is_default_rate);
        }
        // query params
        if ($bas_code !== null) {
            $queryParams['BASCode'] = ObjectSerializer::toQueryValue($bas_code);
        }
        // query params
        if ($is_default_rate_in_group !== null) {
            $queryParams['IsDefaultRateInGroup'] = ObjectSerializer::toQueryValue($is_default_rate_in_group);
        }
        // query params
        if ($is_enabled !== null) {
            $queryParams['IsEnabled'] = ObjectSerializer::toQueryValue($is_enabled);
        }
        // query params
        if ($ledger_account !== null) {
            $queryParams['LedgerAccount'] = ObjectSerializer::toQueryValue($ledger_account);
        }
        // header params
        if ($accept !== null) {
            $headerParams['Accept'] = ObjectSerializer::toHeaderValue($accept);
        }
        // header params
        if ($jiwa_stateful !== null) {
            $headerParams['jiwa-stateful'] = ObjectSerializer::toHeaderValue($jiwa_stateful);
        }

        // path params
        if ($tax_id !== null) {
            $resourcePath = str_replace(
                '{' . 'TaxID' . '}',
                ObjectSerializer::toPathValue($tax_id),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;
        if (isset($body)) {
            $_tempBody = $body;
        }

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json', 'application/xml']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json', 'application/xml'],
                ['application/x-www-form-urlencoded', 'application/json', 'application/xml']
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            
            if($headers['Content-Type'] === 'application/json') {
                // \stdClass has no __toString(), so we should encode it manually
                if ($httpBody instanceof \stdClass) {
                    $httpBody = \GuzzleHttp\json_encode($httpBody);
                }
                // array has no __toString(), so we should encode it manually
                if(is_array($httpBody)) {
                    $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($httpBody));
                }
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\Query::build($formParams);
            }
        }

        // this endpoint requires HTTP basic authentication
        if ($this->config->getUsername() !== null || $this->config->getPassword() !== null) {
            $headers['Authorization'] = 'Basic ' . base64_encode($this->config->getUsername() . ":" . $this->config->getPassword());
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\Query::build($queryParams);
        return new Request(
            'PATCH',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation taxRatePOSTRequestPost
     *
     * Creates a tax rate.
     *
     * @param  string $accept Accept Header (required)
     * @param  bool $jiwa_stateful Stateful indicator (optional)
     * @param  string $rec_id rec_id (optional)
     * @param  string $description description (optional)
     * @param  string $gst_tax_group gst_tax_group (optional)
     * @param  double $rate rate (optional)
     * @param  bool $is_default_rate is_default_rate (optional)
     * @param  double $bas_code bas_code (optional)
     * @param  bool $is_default_rate_in_group is_default_rate_in_group (optional)
     * @param  bool $is_enabled is_enabled (optional)
     * @param  string $ledger_account ledger_account (optional)
     * @param  \Jiwa\JiwaModel\TaxRatePOSTRequest $body body (optional)
     *
     * @throws \Jiwa\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Jiwa\JiwaModel\TaxRate
     */
    public function taxRatePOSTRequestPost($accept, $jiwa_stateful = null, $rec_id = null, $description = null, $gst_tax_group = null, $rate = null, $is_default_rate = null, $bas_code = null, $is_default_rate_in_group = null, $is_enabled = null, $ledger_account = null, $body = null)
    {
        list($response) = $this->taxRatePOSTRequestPostWithHttpInfo($accept, $jiwa_stateful, $rec_id, $description, $gst_tax_group, $rate, $is_default_rate, $bas_code, $is_default_rate_in_group, $is_enabled, $ledger_account, $body);
        return $response;
    }

    /**
     * Operation taxRatePOSTRequestPostWithHttpInfo
     *
     * Creates a tax rate.
     *
     * @param  string $accept Accept Header (required)
     * @param  bool $jiwa_stateful Stateful indicator (optional)
     * @param  string $rec_id (optional)
     * @param  string $description (optional)
     * @param  string $gst_tax_group (optional)
     * @param  double $rate (optional)
     * @param  bool $is_default_rate (optional)
     * @param  double $bas_code (optional)
     * @param  bool $is_default_rate_in_group (optional)
     * @param  bool $is_enabled (optional)
     * @param  string $ledger_account (optional)
     * @param  \Jiwa\JiwaModel\TaxRatePOSTRequest $body (optional)
     *
     * @throws \Jiwa\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Jiwa\JiwaModel\TaxRate, HTTP status code, HTTP response headers (array of strings)
     */
    public function taxRatePOSTRequestPostWithHttpInfo($accept, $jiwa_stateful = null, $rec_id = null, $description = null, $gst_tax_group = null, $rate = null, $is_default_rate = null, $bas_code = null, $is_default_rate_in_group = null, $is_enabled = null, $ledger_account = null, $body = null)
    {
        $returnType = '\Jiwa\JiwaModel\TaxRate';
        $request = $this->taxRatePOSTRequestPostRequest($accept, $jiwa_stateful, $rec_id, $description, $gst_tax_group, $rate, $is_default_rate, $bas_code, $is_default_rate_in_group, $is_enabled, $ledger_account, $body);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Jiwa\JiwaModel\TaxRate',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 201:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Jiwa\JiwaModel\TaxRate',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 403:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Jiwa\JiwaModel\TaxRate',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 401:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Jiwa\JiwaModel\TaxRate',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation taxRatePOSTRequestPostAsync
     *
     * Creates a tax rate.
     *
     * @param  string $accept Accept Header (required)
     * @param  bool $jiwa_stateful Stateful indicator (optional)
     * @param  string $rec_id (optional)
     * @param  string $description (optional)
     * @param  string $gst_tax_group (optional)
     * @param  double $rate (optional)
     * @param  bool $is_default_rate (optional)
     * @param  double $bas_code (optional)
     * @param  bool $is_default_rate_in_group (optional)
     * @param  bool $is_enabled (optional)
     * @param  string $ledger_account (optional)
     * @param  \Jiwa\JiwaModel\TaxRatePOSTRequest $body (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function taxRatePOSTRequestPostAsync($accept, $jiwa_stateful = null, $rec_id = null, $description = null, $gst_tax_group = null, $rate = null, $is_default_rate = null, $bas_code = null, $is_default_rate_in_group = null, $is_enabled = null, $ledger_account = null, $body = null)
    {
        return $this->taxRatePOSTRequestPostAsyncWithHttpInfo($accept, $jiwa_stateful, $rec_id, $description, $gst_tax_group, $rate, $is_default_rate, $bas_code, $is_default_rate_in_group, $is_enabled, $ledger_account, $body)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation taxRatePOSTRequestPostAsyncWithHttpInfo
     *
     * Creates a tax rate.
     *
     * @param  string $accept Accept Header (required)
     * @param  bool $jiwa_stateful Stateful indicator (optional)
     * @param  string $rec_id (optional)
     * @param  string $description (optional)
     * @param  string $gst_tax_group (optional)
     * @param  double $rate (optional)
     * @param  bool $is_default_rate (optional)
     * @param  double $bas_code (optional)
     * @param  bool $is_default_rate_in_group (optional)
     * @param  bool $is_enabled (optional)
     * @param  string $ledger_account (optional)
     * @param  \Jiwa\JiwaModel\TaxRatePOSTRequest $body (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function taxRatePOSTRequestPostAsyncWithHttpInfo($accept, $jiwa_stateful = null, $rec_id = null, $description = null, $gst_tax_group = null, $rate = null, $is_default_rate = null, $bas_code = null, $is_default_rate_in_group = null, $is_enabled = null, $ledger_account = null, $body = null)
    {
        $returnType = '\Jiwa\JiwaModel\TaxRate';
        $request = $this->taxRatePOSTRequestPostRequest($accept, $jiwa_stateful, $rec_id, $description, $gst_tax_group, $rate, $is_default_rate, $bas_code, $is_default_rate_in_group, $is_enabled, $ledger_account, $body);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'taxRatePOSTRequestPost'
     *
     * @param  string $accept Accept Header (required)
     * @param  bool $jiwa_stateful Stateful indicator (optional)
     * @param  string $rec_id (optional)
     * @param  string $description (optional)
     * @param  string $gst_tax_group (optional)
     * @param  double $rate (optional)
     * @param  bool $is_default_rate (optional)
     * @param  double $bas_code (optional)
     * @param  bool $is_default_rate_in_group (optional)
     * @param  bool $is_enabled (optional)
     * @param  string $ledger_account (optional)
     * @param  \Jiwa\JiwaModel\TaxRatePOSTRequest $body (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function taxRatePOSTRequestPostRequest($accept, $jiwa_stateful = null, $rec_id = null, $description = null, $gst_tax_group = null, $rate = null, $is_default_rate = null, $bas_code = null, $is_default_rate_in_group = null, $is_enabled = null, $ledger_account = null, $body = null)
    {
        // verify the required parameter 'accept' is set
        if ($accept === null || (is_array($accept) && count($accept) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $accept when calling taxRatePOSTRequestPost'
            );
        }

        $resourcePath = '/TaxRates';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        if ($rec_id !== null) {
            $queryParams['RecID'] = ObjectSerializer::toQueryValue($rec_id);
        }
        // query params
        if ($description !== null) {
            $queryParams['Description'] = ObjectSerializer::toQueryValue($description);
        }
        // query params
        if ($gst_tax_group !== null) {
            $queryParams['GSTTaxGroup'] = ObjectSerializer::toQueryValue($gst_tax_group);
        }
        // query params
        if ($rate !== null) {
            $queryParams['Rate'] = ObjectSerializer::toQueryValue($rate);
        }
        // query params
        if ($is_default_rate !== null) {
            $queryParams['IsDefaultRate'] = ObjectSerializer::toQueryValue($is_default_rate);
        }
        // query params
        if ($bas_code !== null) {
            $queryParams['BASCode'] = ObjectSerializer::toQueryValue($bas_code);
        }
        // query params
        if ($is_default_rate_in_group !== null) {
            $queryParams['IsDefaultRateInGroup'] = ObjectSerializer::toQueryValue($is_default_rate_in_group);
        }
        // query params
        if ($is_enabled !== null) {
            $queryParams['IsEnabled'] = ObjectSerializer::toQueryValue($is_enabled);
        }
        // query params
        if ($ledger_account !== null) {
            $queryParams['LedgerAccount'] = ObjectSerializer::toQueryValue($ledger_account);
        }
        // header params
        if ($accept !== null) {
            $headerParams['Accept'] = ObjectSerializer::toHeaderValue($accept);
        }
        // header params
        if ($jiwa_stateful !== null) {
            $headerParams['jiwa-stateful'] = ObjectSerializer::toHeaderValue($jiwa_stateful);
        }


        // body params
        $_tempBody = null;
        if (isset($body)) {
            $_tempBody = $body;
        }

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json', 'application/xml']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json', 'application/xml'],
                ['application/x-www-form-urlencoded', 'application/json', 'application/xml']
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            
            if($headers['Content-Type'] === 'application/json') {
                // \stdClass has no __toString(), so we should encode it manually
                if ($httpBody instanceof \stdClass) {
                    $httpBody = \GuzzleHttp\json_encode($httpBody);
                }
                // array has no __toString(), so we should encode it manually
                if(is_array($httpBody)) {
                    $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($httpBody));
                }
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\Query::build($formParams);
            }
        }

        // this endpoint requires HTTP basic authentication
        if ($this->config->getUsername() !== null || $this->config->getPassword() !== null) {
            $headers['Authorization'] = 'Basic ' . base64_encode($this->config->getUsername() . ":" . $this->config->getPassword());
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\Query::build($queryParams);
        return new Request(
            'POST',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation taxRateSAVERequestSaveGet
     *
     * Saves a stateful TaxRate collection.
     *
     * @param  string $accept Accept Header (required)
     * @param  bool $jiwa_stateful Stateful indicator (optional)
     *
     * @throws \Jiwa\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Jiwa\JiwaModel\TaxRate[]
     */
    public function taxRateSAVERequestSaveGet($accept, $jiwa_stateful = null)
    {
        list($response) = $this->taxRateSAVERequestSaveGetWithHttpInfo($accept, $jiwa_stateful);
        return $response;
    }

    /**
     * Operation taxRateSAVERequestSaveGetWithHttpInfo
     *
     * Saves a stateful TaxRate collection.
     *
     * @param  string $accept Accept Header (required)
     * @param  bool $jiwa_stateful Stateful indicator (optional)
     *
     * @throws \Jiwa\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Jiwa\JiwaModel\TaxRate[], HTTP status code, HTTP response headers (array of strings)
     */
    public function taxRateSAVERequestSaveGetWithHttpInfo($accept, $jiwa_stateful = null)
    {
        $returnType = '\Jiwa\JiwaModel\TaxRate[]';
        $request = $this->taxRateSAVERequestSaveGetRequest($accept, $jiwa_stateful);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Jiwa\JiwaModel\TaxRate[]',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 401:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Jiwa\JiwaModel\TaxRate[]',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 403:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Jiwa\JiwaModel\TaxRate[]',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 404:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Jiwa\JiwaModel\TaxRate[]',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation taxRateSAVERequestSaveGetAsync
     *
     * Saves a stateful TaxRate collection.
     *
     * @param  string $accept Accept Header (required)
     * @param  bool $jiwa_stateful Stateful indicator (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function taxRateSAVERequestSaveGetAsync($accept, $jiwa_stateful = null)
    {
        return $this->taxRateSAVERequestSaveGetAsyncWithHttpInfo($accept, $jiwa_stateful)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation taxRateSAVERequestSaveGetAsyncWithHttpInfo
     *
     * Saves a stateful TaxRate collection.
     *
     * @param  string $accept Accept Header (required)
     * @param  bool $jiwa_stateful Stateful indicator (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function taxRateSAVERequestSaveGetAsyncWithHttpInfo($accept, $jiwa_stateful = null)
    {
        $returnType = '\Jiwa\JiwaModel\TaxRate[]';
        $request = $this->taxRateSAVERequestSaveGetRequest($accept, $jiwa_stateful);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'taxRateSAVERequestSaveGet'
     *
     * @param  string $accept Accept Header (required)
     * @param  bool $jiwa_stateful Stateful indicator (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function taxRateSAVERequestSaveGetRequest($accept, $jiwa_stateful = null)
    {
        // verify the required parameter 'accept' is set
        if ($accept === null || (is_array($accept) && count($accept) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $accept when calling taxRateSAVERequestSaveGet'
            );
        }

        $resourcePath = '/TaxRates/Save';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // header params
        if ($accept !== null) {
            $headerParams['Accept'] = ObjectSerializer::toHeaderValue($accept);
        }
        // header params
        if ($jiwa_stateful !== null) {
            $headerParams['jiwa-stateful'] = ObjectSerializer::toHeaderValue($jiwa_stateful);
        }


        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json', 'application/xml']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json', 'application/xml'],
                ['application/x-www-form-urlencoded', 'application/json', 'application/xml']
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            
            if($headers['Content-Type'] === 'application/json') {
                // \stdClass has no __toString(), so we should encode it manually
                if ($httpBody instanceof \stdClass) {
                    $httpBody = \GuzzleHttp\json_encode($httpBody);
                }
                // array has no __toString(), so we should encode it manually
                if(is_array($httpBody)) {
                    $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($httpBody));
                }
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\Query::build($formParams);
            }
        }

        // this endpoint requires HTTP basic authentication
        if ($this->config->getUsername() !== null || $this->config->getPassword() !== null) {
            $headers['Authorization'] = 'Basic ' . base64_encode($this->config->getUsername() . ":" . $this->config->getPassword());
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\Query::build($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Create http client option
     *
     * @throws \RuntimeException on file opening failure
     * @return array of http client options
     */
    protected function createHttpClientOption()
    {
        $options = [];
        if ($this->config->getDebug()) {
            $options[RequestOptions::DEBUG] = fopen($this->config->getDebugFile(), 'a');
            if (!$options[RequestOptions::DEBUG]) {
                throw new \RuntimeException('Failed to open the debug file: ' . $this->config->getDebugFile());
            }
        }

        return $options;
    }
}

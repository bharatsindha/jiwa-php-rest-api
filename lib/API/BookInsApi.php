<?php
/**
 * BookInsApi
 * PHP version 5
 *
 * @category Class
 * @package  Jiwa
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * JiwaAPI
 *
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: 1.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 * Swagger Codegen version: 2.4.28-SNAPSHOT
 */

/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Jiwa\JiwaAPI;

use GuzzleHttp\Client;
use GuzzleHttp\ClientInterface;
use GuzzleHttp\Exception\RequestException;
use GuzzleHttp\Psr7\MultipartStream;
use GuzzleHttp\Psr7\Request;
use GuzzleHttp\RequestOptions;
use Jiwa\ApiException;
use Jiwa\Configuration;
use Jiwa\HeaderSelector;
use Jiwa\ObjectSerializer;

/**
 * BookInsApi Class Doc Comment
 *
 * @category Class
 * @package  Jiwa
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class BookInsApi
{
    /**
     * @var ClientInterface
     */
    protected $client;

    /**
     * @var Configuration
     */
    protected $config;

    /**
     * @var HeaderSelector
     */
    protected $headerSelector;

    /**
     * @param ClientInterface $client
     * @param Configuration   $config
     * @param HeaderSelector  $selector
     */
    public function __construct(
        ClientInterface $client = null,
        Configuration $config = null,
        HeaderSelector $selector = null
    ) {
        $this->client = $client ?: new Client();
        $this->config = $config ?: new Configuration();
        $this->headerSelector = $selector ?: new HeaderSelector();
    }

    /**
     * @return Configuration
     */
    public function getConfig()
    {
        return $this->config;
    }

    /**
     * Operation landedCostBookInABANDONRequestAbandonDelete
     *
     * Abandons a stateful book in.
     *
     * @param  string $accept Accept Header (required)
     * @param  bool $jiwa_stateful Stateful indicator (optional)
     * @param  string $book_in_id book_in_id (optional)
     *
     * @throws \Jiwa\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Jiwa\JiwaModel\Object
     */
    public function landedCostBookInABANDONRequestAbandonDelete($accept, $jiwa_stateful = null, $book_in_id = null)
    {
        list($response) = $this->landedCostBookInABANDONRequestAbandonDeleteWithHttpInfo($accept, $jiwa_stateful, $book_in_id);
        return $response;
    }

    /**
     * Operation landedCostBookInABANDONRequestAbandonDeleteWithHttpInfo
     *
     * Abandons a stateful book in.
     *
     * @param  string $accept Accept Header (required)
     * @param  bool $jiwa_stateful Stateful indicator (optional)
     * @param  string $book_in_id (optional)
     *
     * @throws \Jiwa\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Jiwa\JiwaModel\Object, HTTP status code, HTTP response headers (array of strings)
     */
    public function landedCostBookInABANDONRequestAbandonDeleteWithHttpInfo($accept, $jiwa_stateful = null, $book_in_id = null)
    {
        $returnType = '\Jiwa\JiwaModel\Object';
        $request = $this->landedCostBookInABANDONRequestAbandonDeleteRequest($accept, $jiwa_stateful, $book_in_id);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Jiwa\JiwaModel\Object',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 403:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Jiwa\JiwaModel\Object',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 404:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Jiwa\JiwaModel\Object',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 401:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Jiwa\JiwaModel\Object',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation landedCostBookInABANDONRequestAbandonDeleteAsync
     *
     * Abandons a stateful book in.
     *
     * @param  string $accept Accept Header (required)
     * @param  bool $jiwa_stateful Stateful indicator (optional)
     * @param  string $book_in_id (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function landedCostBookInABANDONRequestAbandonDeleteAsync($accept, $jiwa_stateful = null, $book_in_id = null)
    {
        return $this->landedCostBookInABANDONRequestAbandonDeleteAsyncWithHttpInfo($accept, $jiwa_stateful, $book_in_id)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation landedCostBookInABANDONRequestAbandonDeleteAsyncWithHttpInfo
     *
     * Abandons a stateful book in.
     *
     * @param  string $accept Accept Header (required)
     * @param  bool $jiwa_stateful Stateful indicator (optional)
     * @param  string $book_in_id (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function landedCostBookInABANDONRequestAbandonDeleteAsyncWithHttpInfo($accept, $jiwa_stateful = null, $book_in_id = null)
    {
        $returnType = '\Jiwa\JiwaModel\Object';
        $request = $this->landedCostBookInABANDONRequestAbandonDeleteRequest($accept, $jiwa_stateful, $book_in_id);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'landedCostBookInABANDONRequestAbandonDelete'
     *
     * @param  string $accept Accept Header (required)
     * @param  bool $jiwa_stateful Stateful indicator (optional)
     * @param  string $book_in_id (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function landedCostBookInABANDONRequestAbandonDeleteRequest($accept, $jiwa_stateful = null, $book_in_id = null)
    {
        // verify the required parameter 'accept' is set
        if ($accept === null || (is_array($accept) && count($accept) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $accept when calling landedCostBookInABANDONRequestAbandonDelete'
            );
        }

        $resourcePath = '/BookIns/Abandon';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        if ($book_in_id !== null) {
            $queryParams['BookInID'] = ObjectSerializer::toQueryValue($book_in_id);
        }
        // header params
        if ($accept !== null) {
            $headerParams['Accept'] = ObjectSerializer::toHeaderValue($accept);
        }
        // header params
        if ($jiwa_stateful !== null) {
            $headerParams['jiwa-stateful'] = ObjectSerializer::toHeaderValue($jiwa_stateful);
        }


        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json', 'application/xml']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json', 'application/xml'],
                ['application/x-www-form-urlencoded', 'application/json', 'application/xml']
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            
            if($headers['Content-Type'] === 'application/json') {
                // \stdClass has no __toString(), so we should encode it manually
                if ($httpBody instanceof \stdClass) {
                    $httpBody = \GuzzleHttp\json_encode($httpBody);
                }
                // array has no __toString(), so we should encode it manually
                if(is_array($httpBody)) {
                    $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($httpBody));
                }
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\Query::build($formParams);
            }
        }

        // this endpoint requires HTTP basic authentication
        if ($this->config->getUsername() !== null || $this->config->getPassword() !== null) {
            $headers['Authorization'] = 'Basic ' . base64_encode($this->config->getUsername() . ":" . $this->config->getPassword());
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\Query::build($queryParams);
        return new Request(
            'DELETE',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation landedCostBookInACTIVATERequestActivateBookInIDPost
     *
     * Activates a book in.
     *
     * @param  string $accept Accept Header (required)
     * @param  string $book_in_id book_in_id (required)
     * @param  bool $jiwa_stateful Stateful indicator (optional)
     * @param  \Jiwa\JiwaModel\LandedCostBookInACTIVATERequest $body body (optional)
     *
     * @throws \Jiwa\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Jiwa\JiwaModel\BookIn
     */
    public function landedCostBookInACTIVATERequestActivateBookInIDPost($accept, $book_in_id, $jiwa_stateful = null, $body = null)
    {
        list($response) = $this->landedCostBookInACTIVATERequestActivateBookInIDPostWithHttpInfo($accept, $book_in_id, $jiwa_stateful, $body);
        return $response;
    }

    /**
     * Operation landedCostBookInACTIVATERequestActivateBookInIDPostWithHttpInfo
     *
     * Activates a book in.
     *
     * @param  string $accept Accept Header (required)
     * @param  string $book_in_id (required)
     * @param  bool $jiwa_stateful Stateful indicator (optional)
     * @param  \Jiwa\JiwaModel\LandedCostBookInACTIVATERequest $body (optional)
     *
     * @throws \Jiwa\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Jiwa\JiwaModel\BookIn, HTTP status code, HTTP response headers (array of strings)
     */
    public function landedCostBookInACTIVATERequestActivateBookInIDPostWithHttpInfo($accept, $book_in_id, $jiwa_stateful = null, $body = null)
    {
        $returnType = '\Jiwa\JiwaModel\BookIn';
        $request = $this->landedCostBookInACTIVATERequestActivateBookInIDPostRequest($accept, $book_in_id, $jiwa_stateful, $body);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Jiwa\JiwaModel\BookIn',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 401:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Jiwa\JiwaModel\BookIn',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 403:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Jiwa\JiwaModel\BookIn',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 404:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Jiwa\JiwaModel\BookIn',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 204:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Jiwa\JiwaModel\BookIn',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation landedCostBookInACTIVATERequestActivateBookInIDPostAsync
     *
     * Activates a book in.
     *
     * @param  string $accept Accept Header (required)
     * @param  string $book_in_id (required)
     * @param  bool $jiwa_stateful Stateful indicator (optional)
     * @param  \Jiwa\JiwaModel\LandedCostBookInACTIVATERequest $body (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function landedCostBookInACTIVATERequestActivateBookInIDPostAsync($accept, $book_in_id, $jiwa_stateful = null, $body = null)
    {
        return $this->landedCostBookInACTIVATERequestActivateBookInIDPostAsyncWithHttpInfo($accept, $book_in_id, $jiwa_stateful, $body)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation landedCostBookInACTIVATERequestActivateBookInIDPostAsyncWithHttpInfo
     *
     * Activates a book in.
     *
     * @param  string $accept Accept Header (required)
     * @param  string $book_in_id (required)
     * @param  bool $jiwa_stateful Stateful indicator (optional)
     * @param  \Jiwa\JiwaModel\LandedCostBookInACTIVATERequest $body (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function landedCostBookInACTIVATERequestActivateBookInIDPostAsyncWithHttpInfo($accept, $book_in_id, $jiwa_stateful = null, $body = null)
    {
        $returnType = '\Jiwa\JiwaModel\BookIn';
        $request = $this->landedCostBookInACTIVATERequestActivateBookInIDPostRequest($accept, $book_in_id, $jiwa_stateful, $body);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'landedCostBookInACTIVATERequestActivateBookInIDPost'
     *
     * @param  string $accept Accept Header (required)
     * @param  string $book_in_id (required)
     * @param  bool $jiwa_stateful Stateful indicator (optional)
     * @param  \Jiwa\JiwaModel\LandedCostBookInACTIVATERequest $body (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function landedCostBookInACTIVATERequestActivateBookInIDPostRequest($accept, $book_in_id, $jiwa_stateful = null, $body = null)
    {
        // verify the required parameter 'accept' is set
        if ($accept === null || (is_array($accept) && count($accept) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $accept when calling landedCostBookInACTIVATERequestActivateBookInIDPost'
            );
        }
        // verify the required parameter 'book_in_id' is set
        if ($book_in_id === null || (is_array($book_in_id) && count($book_in_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $book_in_id when calling landedCostBookInACTIVATERequestActivateBookInIDPost'
            );
        }

        $resourcePath = '/BookIns/Activate/{BookInID}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // header params
        if ($accept !== null) {
            $headerParams['Accept'] = ObjectSerializer::toHeaderValue($accept);
        }
        // header params
        if ($jiwa_stateful !== null) {
            $headerParams['jiwa-stateful'] = ObjectSerializer::toHeaderValue($jiwa_stateful);
        }

        // path params
        if ($book_in_id !== null) {
            $resourcePath = str_replace(
                '{' . 'BookInID' . '}',
                ObjectSerializer::toPathValue($book_in_id),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;
        if (isset($body)) {
            $_tempBody = $body;
        }

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json', 'application/xml']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json', 'application/xml'],
                ['application/x-www-form-urlencoded', 'application/json', 'application/xml']
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            
            if($headers['Content-Type'] === 'application/json') {
                // \stdClass has no __toString(), so we should encode it manually
                if ($httpBody instanceof \stdClass) {
                    $httpBody = \GuzzleHttp\json_encode($httpBody);
                }
                // array has no __toString(), so we should encode it manually
                if(is_array($httpBody)) {
                    $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($httpBody));
                }
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\Query::build($formParams);
            }
        }

        // this endpoint requires HTTP basic authentication
        if ($this->config->getUsername() !== null || $this->config->getPassword() !== null) {
            $headers['Authorization'] = 'Basic ' . base64_encode($this->config->getUsername() . ":" . $this->config->getPassword());
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\Query::build($queryParams);
        return new Request(
            'POST',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation landedCostBookInCREATEFromShipmentIDRequestFromShipmentIDShipmentIDPost
     *
     * Creates a book in from the supplied shipment id.
     *
     * @param  string $accept Accept Header (required)
     * @param  string $shipment_id shipment_id (required)
     * @param  bool $jiwa_stateful Stateful indicator (optional)
     * @param  \Jiwa\JiwaModel\LandedCostBookInCREATEFromShipmentIDRequest $body body (optional)
     *
     * @throws \Jiwa\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Jiwa\JiwaModel\BookIn
     */
    public function landedCostBookInCREATEFromShipmentIDRequestFromShipmentIDShipmentIDPost($accept, $shipment_id, $jiwa_stateful = null, $body = null)
    {
        list($response) = $this->landedCostBookInCREATEFromShipmentIDRequestFromShipmentIDShipmentIDPostWithHttpInfo($accept, $shipment_id, $jiwa_stateful, $body);
        return $response;
    }

    /**
     * Operation landedCostBookInCREATEFromShipmentIDRequestFromShipmentIDShipmentIDPostWithHttpInfo
     *
     * Creates a book in from the supplied shipment id.
     *
     * @param  string $accept Accept Header (required)
     * @param  string $shipment_id (required)
     * @param  bool $jiwa_stateful Stateful indicator (optional)
     * @param  \Jiwa\JiwaModel\LandedCostBookInCREATEFromShipmentIDRequest $body (optional)
     *
     * @throws \Jiwa\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Jiwa\JiwaModel\BookIn, HTTP status code, HTTP response headers (array of strings)
     */
    public function landedCostBookInCREATEFromShipmentIDRequestFromShipmentIDShipmentIDPostWithHttpInfo($accept, $shipment_id, $jiwa_stateful = null, $body = null)
    {
        $returnType = '\Jiwa\JiwaModel\BookIn';
        $request = $this->landedCostBookInCREATEFromShipmentIDRequestFromShipmentIDShipmentIDPostRequest($accept, $shipment_id, $jiwa_stateful, $body);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Jiwa\JiwaModel\BookIn',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 404:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Jiwa\JiwaModel\BookIn',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 201:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Jiwa\JiwaModel\BookIn',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 403:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Jiwa\JiwaModel\BookIn',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 401:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Jiwa\JiwaModel\BookIn',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation landedCostBookInCREATEFromShipmentIDRequestFromShipmentIDShipmentIDPostAsync
     *
     * Creates a book in from the supplied shipment id.
     *
     * @param  string $accept Accept Header (required)
     * @param  string $shipment_id (required)
     * @param  bool $jiwa_stateful Stateful indicator (optional)
     * @param  \Jiwa\JiwaModel\LandedCostBookInCREATEFromShipmentIDRequest $body (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function landedCostBookInCREATEFromShipmentIDRequestFromShipmentIDShipmentIDPostAsync($accept, $shipment_id, $jiwa_stateful = null, $body = null)
    {
        return $this->landedCostBookInCREATEFromShipmentIDRequestFromShipmentIDShipmentIDPostAsyncWithHttpInfo($accept, $shipment_id, $jiwa_stateful, $body)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation landedCostBookInCREATEFromShipmentIDRequestFromShipmentIDShipmentIDPostAsyncWithHttpInfo
     *
     * Creates a book in from the supplied shipment id.
     *
     * @param  string $accept Accept Header (required)
     * @param  string $shipment_id (required)
     * @param  bool $jiwa_stateful Stateful indicator (optional)
     * @param  \Jiwa\JiwaModel\LandedCostBookInCREATEFromShipmentIDRequest $body (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function landedCostBookInCREATEFromShipmentIDRequestFromShipmentIDShipmentIDPostAsyncWithHttpInfo($accept, $shipment_id, $jiwa_stateful = null, $body = null)
    {
        $returnType = '\Jiwa\JiwaModel\BookIn';
        $request = $this->landedCostBookInCREATEFromShipmentIDRequestFromShipmentIDShipmentIDPostRequest($accept, $shipment_id, $jiwa_stateful, $body);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'landedCostBookInCREATEFromShipmentIDRequestFromShipmentIDShipmentIDPost'
     *
     * @param  string $accept Accept Header (required)
     * @param  string $shipment_id (required)
     * @param  bool $jiwa_stateful Stateful indicator (optional)
     * @param  \Jiwa\JiwaModel\LandedCostBookInCREATEFromShipmentIDRequest $body (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function landedCostBookInCREATEFromShipmentIDRequestFromShipmentIDShipmentIDPostRequest($accept, $shipment_id, $jiwa_stateful = null, $body = null)
    {
        // verify the required parameter 'accept' is set
        if ($accept === null || (is_array($accept) && count($accept) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $accept when calling landedCostBookInCREATEFromShipmentIDRequestFromShipmentIDShipmentIDPost'
            );
        }
        // verify the required parameter 'shipment_id' is set
        if ($shipment_id === null || (is_array($shipment_id) && count($shipment_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $shipment_id when calling landedCostBookInCREATEFromShipmentIDRequestFromShipmentIDShipmentIDPost'
            );
        }

        $resourcePath = '/BookIns/FromShipmentID/{ShipmentID}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // header params
        if ($accept !== null) {
            $headerParams['Accept'] = ObjectSerializer::toHeaderValue($accept);
        }
        // header params
        if ($jiwa_stateful !== null) {
            $headerParams['jiwa-stateful'] = ObjectSerializer::toHeaderValue($jiwa_stateful);
        }

        // path params
        if ($shipment_id !== null) {
            $resourcePath = str_replace(
                '{' . 'ShipmentID' . '}',
                ObjectSerializer::toPathValue($shipment_id),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;
        if (isset($body)) {
            $_tempBody = $body;
        }

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json', 'application/xml']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json', 'application/xml'],
                ['application/x-www-form-urlencoded', 'application/json', 'application/xml']
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            
            if($headers['Content-Type'] === 'application/json') {
                // \stdClass has no __toString(), so we should encode it manually
                if ($httpBody instanceof \stdClass) {
                    $httpBody = \GuzzleHttp\json_encode($httpBody);
                }
                // array has no __toString(), so we should encode it manually
                if(is_array($httpBody)) {
                    $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($httpBody));
                }
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\Query::build($formParams);
            }
        }

        // this endpoint requires HTTP basic authentication
        if ($this->config->getUsername() !== null || $this->config->getPassword() !== null) {
            $headers['Authorization'] = 'Basic ' . base64_encode($this->config->getUsername() . ":" . $this->config->getPassword());
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\Query::build($queryParams);
        return new Request(
            'POST',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation landedCostBookInCREATEFromShipmentNoRequestFromShipmentNoShipmentNoPost
     *
     * Creates a book in from the supplied shipment no.
     *
     * @param  string $accept Accept Header (required)
     * @param  string $shipment_no shipment_no (required)
     * @param  bool $jiwa_stateful Stateful indicator (optional)
     * @param  \Jiwa\JiwaModel\LandedCostBookInCREATEFromShipmentNoRequest $body body (optional)
     *
     * @throws \Jiwa\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Jiwa\JiwaModel\BookIn
     */
    public function landedCostBookInCREATEFromShipmentNoRequestFromShipmentNoShipmentNoPost($accept, $shipment_no, $jiwa_stateful = null, $body = null)
    {
        list($response) = $this->landedCostBookInCREATEFromShipmentNoRequestFromShipmentNoShipmentNoPostWithHttpInfo($accept, $shipment_no, $jiwa_stateful, $body);
        return $response;
    }

    /**
     * Operation landedCostBookInCREATEFromShipmentNoRequestFromShipmentNoShipmentNoPostWithHttpInfo
     *
     * Creates a book in from the supplied shipment no.
     *
     * @param  string $accept Accept Header (required)
     * @param  string $shipment_no (required)
     * @param  bool $jiwa_stateful Stateful indicator (optional)
     * @param  \Jiwa\JiwaModel\LandedCostBookInCREATEFromShipmentNoRequest $body (optional)
     *
     * @throws \Jiwa\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Jiwa\JiwaModel\BookIn, HTTP status code, HTTP response headers (array of strings)
     */
    public function landedCostBookInCREATEFromShipmentNoRequestFromShipmentNoShipmentNoPostWithHttpInfo($accept, $shipment_no, $jiwa_stateful = null, $body = null)
    {
        $returnType = '\Jiwa\JiwaModel\BookIn';
        $request = $this->landedCostBookInCREATEFromShipmentNoRequestFromShipmentNoShipmentNoPostRequest($accept, $shipment_no, $jiwa_stateful, $body);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Jiwa\JiwaModel\BookIn',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 404:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Jiwa\JiwaModel\BookIn',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 401:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Jiwa\JiwaModel\BookIn',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 403:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Jiwa\JiwaModel\BookIn',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 201:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Jiwa\JiwaModel\BookIn',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation landedCostBookInCREATEFromShipmentNoRequestFromShipmentNoShipmentNoPostAsync
     *
     * Creates a book in from the supplied shipment no.
     *
     * @param  string $accept Accept Header (required)
     * @param  string $shipment_no (required)
     * @param  bool $jiwa_stateful Stateful indicator (optional)
     * @param  \Jiwa\JiwaModel\LandedCostBookInCREATEFromShipmentNoRequest $body (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function landedCostBookInCREATEFromShipmentNoRequestFromShipmentNoShipmentNoPostAsync($accept, $shipment_no, $jiwa_stateful = null, $body = null)
    {
        return $this->landedCostBookInCREATEFromShipmentNoRequestFromShipmentNoShipmentNoPostAsyncWithHttpInfo($accept, $shipment_no, $jiwa_stateful, $body)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation landedCostBookInCREATEFromShipmentNoRequestFromShipmentNoShipmentNoPostAsyncWithHttpInfo
     *
     * Creates a book in from the supplied shipment no.
     *
     * @param  string $accept Accept Header (required)
     * @param  string $shipment_no (required)
     * @param  bool $jiwa_stateful Stateful indicator (optional)
     * @param  \Jiwa\JiwaModel\LandedCostBookInCREATEFromShipmentNoRequest $body (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function landedCostBookInCREATEFromShipmentNoRequestFromShipmentNoShipmentNoPostAsyncWithHttpInfo($accept, $shipment_no, $jiwa_stateful = null, $body = null)
    {
        $returnType = '\Jiwa\JiwaModel\BookIn';
        $request = $this->landedCostBookInCREATEFromShipmentNoRequestFromShipmentNoShipmentNoPostRequest($accept, $shipment_no, $jiwa_stateful, $body);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'landedCostBookInCREATEFromShipmentNoRequestFromShipmentNoShipmentNoPost'
     *
     * @param  string $accept Accept Header (required)
     * @param  string $shipment_no (required)
     * @param  bool $jiwa_stateful Stateful indicator (optional)
     * @param  \Jiwa\JiwaModel\LandedCostBookInCREATEFromShipmentNoRequest $body (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function landedCostBookInCREATEFromShipmentNoRequestFromShipmentNoShipmentNoPostRequest($accept, $shipment_no, $jiwa_stateful = null, $body = null)
    {
        // verify the required parameter 'accept' is set
        if ($accept === null || (is_array($accept) && count($accept) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $accept when calling landedCostBookInCREATEFromShipmentNoRequestFromShipmentNoShipmentNoPost'
            );
        }
        // verify the required parameter 'shipment_no' is set
        if ($shipment_no === null || (is_array($shipment_no) && count($shipment_no) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $shipment_no when calling landedCostBookInCREATEFromShipmentNoRequestFromShipmentNoShipmentNoPost'
            );
        }

        $resourcePath = '/BookIns/FromShipmentNo/{ShipmentNo}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // header params
        if ($accept !== null) {
            $headerParams['Accept'] = ObjectSerializer::toHeaderValue($accept);
        }
        // header params
        if ($jiwa_stateful !== null) {
            $headerParams['jiwa-stateful'] = ObjectSerializer::toHeaderValue($jiwa_stateful);
        }

        // path params
        if ($shipment_no !== null) {
            $resourcePath = str_replace(
                '{' . 'ShipmentNo' . '}',
                ObjectSerializer::toPathValue($shipment_no),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;
        if (isset($body)) {
            $_tempBody = $body;
        }

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json', 'application/xml']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json', 'application/xml'],
                ['application/x-www-form-urlencoded', 'application/json', 'application/xml']
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            
            if($headers['Content-Type'] === 'application/json') {
                // \stdClass has no __toString(), so we should encode it manually
                if ($httpBody instanceof \stdClass) {
                    $httpBody = \GuzzleHttp\json_encode($httpBody);
                }
                // array has no __toString(), so we should encode it manually
                if(is_array($httpBody)) {
                    $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($httpBody));
                }
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\Query::build($formParams);
            }
        }

        // this endpoint requires HTTP basic authentication
        if ($this->config->getUsername() !== null || $this->config->getPassword() !== null) {
            $headers['Authorization'] = 'Basic ' . base64_encode($this->config->getUsername() . ":" . $this->config->getPassword());
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\Query::build($queryParams);
        return new Request(
            'POST',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation landedCostBookInGETRequestBookInIDGet
     *
     * Retrieves a book in.
     *
     * @param  string $accept Accept Header (required)
     * @param  string $book_in_id book_in_id (required)
     * @param  bool $jiwa_stateful Stateful indicator (optional)
     *
     * @throws \Jiwa\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Jiwa\JiwaModel\BookIn
     */
    public function landedCostBookInGETRequestBookInIDGet($accept, $book_in_id, $jiwa_stateful = null)
    {
        list($response) = $this->landedCostBookInGETRequestBookInIDGetWithHttpInfo($accept, $book_in_id, $jiwa_stateful);
        return $response;
    }

    /**
     * Operation landedCostBookInGETRequestBookInIDGetWithHttpInfo
     *
     * Retrieves a book in.
     *
     * @param  string $accept Accept Header (required)
     * @param  string $book_in_id (required)
     * @param  bool $jiwa_stateful Stateful indicator (optional)
     *
     * @throws \Jiwa\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Jiwa\JiwaModel\BookIn, HTTP status code, HTTP response headers (array of strings)
     */
    public function landedCostBookInGETRequestBookInIDGetWithHttpInfo($accept, $book_in_id, $jiwa_stateful = null)
    {
        $returnType = '\Jiwa\JiwaModel\BookIn';
        $request = $this->landedCostBookInGETRequestBookInIDGetRequest($accept, $book_in_id, $jiwa_stateful);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Jiwa\JiwaModel\BookIn',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 404:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Jiwa\JiwaModel\BookIn',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 403:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Jiwa\JiwaModel\BookIn',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 401:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Jiwa\JiwaModel\BookIn',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation landedCostBookInGETRequestBookInIDGetAsync
     *
     * Retrieves a book in.
     *
     * @param  string $accept Accept Header (required)
     * @param  string $book_in_id (required)
     * @param  bool $jiwa_stateful Stateful indicator (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function landedCostBookInGETRequestBookInIDGetAsync($accept, $book_in_id, $jiwa_stateful = null)
    {
        return $this->landedCostBookInGETRequestBookInIDGetAsyncWithHttpInfo($accept, $book_in_id, $jiwa_stateful)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation landedCostBookInGETRequestBookInIDGetAsyncWithHttpInfo
     *
     * Retrieves a book in.
     *
     * @param  string $accept Accept Header (required)
     * @param  string $book_in_id (required)
     * @param  bool $jiwa_stateful Stateful indicator (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function landedCostBookInGETRequestBookInIDGetAsyncWithHttpInfo($accept, $book_in_id, $jiwa_stateful = null)
    {
        $returnType = '\Jiwa\JiwaModel\BookIn';
        $request = $this->landedCostBookInGETRequestBookInIDGetRequest($accept, $book_in_id, $jiwa_stateful);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'landedCostBookInGETRequestBookInIDGet'
     *
     * @param  string $accept Accept Header (required)
     * @param  string $book_in_id (required)
     * @param  bool $jiwa_stateful Stateful indicator (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function landedCostBookInGETRequestBookInIDGetRequest($accept, $book_in_id, $jiwa_stateful = null)
    {
        // verify the required parameter 'accept' is set
        if ($accept === null || (is_array($accept) && count($accept) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $accept when calling landedCostBookInGETRequestBookInIDGet'
            );
        }
        // verify the required parameter 'book_in_id' is set
        if ($book_in_id === null || (is_array($book_in_id) && count($book_in_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $book_in_id when calling landedCostBookInGETRequestBookInIDGet'
            );
        }

        $resourcePath = '/BookIns/{BookInID}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // header params
        if ($accept !== null) {
            $headerParams['Accept'] = ObjectSerializer::toHeaderValue($accept);
        }
        // header params
        if ($jiwa_stateful !== null) {
            $headerParams['jiwa-stateful'] = ObjectSerializer::toHeaderValue($jiwa_stateful);
        }

        // path params
        if ($book_in_id !== null) {
            $resourcePath = str_replace(
                '{' . 'BookInID' . '}',
                ObjectSerializer::toPathValue($book_in_id),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json', 'application/xml']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json', 'application/xml'],
                ['application/x-www-form-urlencoded', 'application/json', 'application/xml']
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            
            if($headers['Content-Type'] === 'application/json') {
                // \stdClass has no __toString(), so we should encode it manually
                if ($httpBody instanceof \stdClass) {
                    $httpBody = \GuzzleHttp\json_encode($httpBody);
                }
                // array has no __toString(), so we should encode it manually
                if(is_array($httpBody)) {
                    $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($httpBody));
                }
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\Query::build($formParams);
            }
        }

        // this endpoint requires HTTP basic authentication
        if ($this->config->getUsername() !== null || $this->config->getPassword() !== null) {
            $headers['Authorization'] = 'Basic ' . base64_encode($this->config->getUsername() . ":" . $this->config->getPassword());
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\Query::build($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation landedCostBookInLineDELETERequestBookInIDLinesLineIDDelete
     *
     * Deletes a line from a book in.
     *
     * @param  string $accept Accept Header (required)
     * @param  string $book_in_id book_in_id (required)
     * @param  string $line_id line_id (required)
     * @param  bool $jiwa_stateful Stateful indicator (optional)
     * @param  int $item_no item_no (optional)
     * @param  double $quantity quantity (optional)
     * @param  double $quantity_previously_booked_in quantity_previously_booked_in (optional)
     * @param  double $quantity_outstanding quantity_outstanding (optional)
     * @param  string $shipment_line shipment_line (optional)
     * @param  string $line_details line_details (optional)
     * @param  string $custom_field_values custom_field_values (optional)
     *
     * @throws \Jiwa\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Jiwa\JiwaModel\Object
     */
    public function landedCostBookInLineDELETERequestBookInIDLinesLineIDDelete($accept, $book_in_id, $line_id, $jiwa_stateful = null, $item_no = null, $quantity = null, $quantity_previously_booked_in = null, $quantity_outstanding = null, $shipment_line = null, $line_details = null, $custom_field_values = null)
    {
        list($response) = $this->landedCostBookInLineDELETERequestBookInIDLinesLineIDDeleteWithHttpInfo($accept, $book_in_id, $line_id, $jiwa_stateful, $item_no, $quantity, $quantity_previously_booked_in, $quantity_outstanding, $shipment_line, $line_details, $custom_field_values);
        return $response;
    }

    /**
     * Operation landedCostBookInLineDELETERequestBookInIDLinesLineIDDeleteWithHttpInfo
     *
     * Deletes a line from a book in.
     *
     * @param  string $accept Accept Header (required)
     * @param  string $book_in_id (required)
     * @param  string $line_id (required)
     * @param  bool $jiwa_stateful Stateful indicator (optional)
     * @param  int $item_no (optional)
     * @param  double $quantity (optional)
     * @param  double $quantity_previously_booked_in (optional)
     * @param  double $quantity_outstanding (optional)
     * @param  string $shipment_line (optional)
     * @param  string $line_details (optional)
     * @param  string $custom_field_values (optional)
     *
     * @throws \Jiwa\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Jiwa\JiwaModel\Object, HTTP status code, HTTP response headers (array of strings)
     */
    public function landedCostBookInLineDELETERequestBookInIDLinesLineIDDeleteWithHttpInfo($accept, $book_in_id, $line_id, $jiwa_stateful = null, $item_no = null, $quantity = null, $quantity_previously_booked_in = null, $quantity_outstanding = null, $shipment_line = null, $line_details = null, $custom_field_values = null)
    {
        $returnType = '\Jiwa\JiwaModel\Object';
        $request = $this->landedCostBookInLineDELETERequestBookInIDLinesLineIDDeleteRequest($accept, $book_in_id, $line_id, $jiwa_stateful, $item_no, $quantity, $quantity_previously_booked_in, $quantity_outstanding, $shipment_line, $line_details, $custom_field_values);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Jiwa\JiwaModel\Object',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 403:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Jiwa\JiwaModel\Object',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 404:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Jiwa\JiwaModel\Object',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 204:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Jiwa\JiwaModel\Object',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 401:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Jiwa\JiwaModel\Object',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation landedCostBookInLineDELETERequestBookInIDLinesLineIDDeleteAsync
     *
     * Deletes a line from a book in.
     *
     * @param  string $accept Accept Header (required)
     * @param  string $book_in_id (required)
     * @param  string $line_id (required)
     * @param  bool $jiwa_stateful Stateful indicator (optional)
     * @param  int $item_no (optional)
     * @param  double $quantity (optional)
     * @param  double $quantity_previously_booked_in (optional)
     * @param  double $quantity_outstanding (optional)
     * @param  string $shipment_line (optional)
     * @param  string $line_details (optional)
     * @param  string $custom_field_values (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function landedCostBookInLineDELETERequestBookInIDLinesLineIDDeleteAsync($accept, $book_in_id, $line_id, $jiwa_stateful = null, $item_no = null, $quantity = null, $quantity_previously_booked_in = null, $quantity_outstanding = null, $shipment_line = null, $line_details = null, $custom_field_values = null)
    {
        return $this->landedCostBookInLineDELETERequestBookInIDLinesLineIDDeleteAsyncWithHttpInfo($accept, $book_in_id, $line_id, $jiwa_stateful, $item_no, $quantity, $quantity_previously_booked_in, $quantity_outstanding, $shipment_line, $line_details, $custom_field_values)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation landedCostBookInLineDELETERequestBookInIDLinesLineIDDeleteAsyncWithHttpInfo
     *
     * Deletes a line from a book in.
     *
     * @param  string $accept Accept Header (required)
     * @param  string $book_in_id (required)
     * @param  string $line_id (required)
     * @param  bool $jiwa_stateful Stateful indicator (optional)
     * @param  int $item_no (optional)
     * @param  double $quantity (optional)
     * @param  double $quantity_previously_booked_in (optional)
     * @param  double $quantity_outstanding (optional)
     * @param  string $shipment_line (optional)
     * @param  string $line_details (optional)
     * @param  string $custom_field_values (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function landedCostBookInLineDELETERequestBookInIDLinesLineIDDeleteAsyncWithHttpInfo($accept, $book_in_id, $line_id, $jiwa_stateful = null, $item_no = null, $quantity = null, $quantity_previously_booked_in = null, $quantity_outstanding = null, $shipment_line = null, $line_details = null, $custom_field_values = null)
    {
        $returnType = '\Jiwa\JiwaModel\Object';
        $request = $this->landedCostBookInLineDELETERequestBookInIDLinesLineIDDeleteRequest($accept, $book_in_id, $line_id, $jiwa_stateful, $item_no, $quantity, $quantity_previously_booked_in, $quantity_outstanding, $shipment_line, $line_details, $custom_field_values);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'landedCostBookInLineDELETERequestBookInIDLinesLineIDDelete'
     *
     * @param  string $accept Accept Header (required)
     * @param  string $book_in_id (required)
     * @param  string $line_id (required)
     * @param  bool $jiwa_stateful Stateful indicator (optional)
     * @param  int $item_no (optional)
     * @param  double $quantity (optional)
     * @param  double $quantity_previously_booked_in (optional)
     * @param  double $quantity_outstanding (optional)
     * @param  string $shipment_line (optional)
     * @param  string $line_details (optional)
     * @param  string $custom_field_values (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function landedCostBookInLineDELETERequestBookInIDLinesLineIDDeleteRequest($accept, $book_in_id, $line_id, $jiwa_stateful = null, $item_no = null, $quantity = null, $quantity_previously_booked_in = null, $quantity_outstanding = null, $shipment_line = null, $line_details = null, $custom_field_values = null)
    {
        // verify the required parameter 'accept' is set
        if ($accept === null || (is_array($accept) && count($accept) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $accept when calling landedCostBookInLineDELETERequestBookInIDLinesLineIDDelete'
            );
        }
        // verify the required parameter 'book_in_id' is set
        if ($book_in_id === null || (is_array($book_in_id) && count($book_in_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $book_in_id when calling landedCostBookInLineDELETERequestBookInIDLinesLineIDDelete'
            );
        }
        // verify the required parameter 'line_id' is set
        if ($line_id === null || (is_array($line_id) && count($line_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $line_id when calling landedCostBookInLineDELETERequestBookInIDLinesLineIDDelete'
            );
        }

        $resourcePath = '/BookIns/{BookInID}/Lines/{LineID}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        if ($item_no !== null) {
            $queryParams['ItemNo'] = ObjectSerializer::toQueryValue($item_no);
        }
        // query params
        if ($quantity !== null) {
            $queryParams['Quantity'] = ObjectSerializer::toQueryValue($quantity);
        }
        // query params
        if ($quantity_previously_booked_in !== null) {
            $queryParams['QuantityPreviouslyBookedIn'] = ObjectSerializer::toQueryValue($quantity_previously_booked_in);
        }
        // query params
        if ($quantity_outstanding !== null) {
            $queryParams['QuantityOutstanding'] = ObjectSerializer::toQueryValue($quantity_outstanding);
        }
        // query params
        if ($shipment_line !== null) {
            $queryParams['ShipmentLine'] = ObjectSerializer::toQueryValue($shipment_line);
        }
        // query params
        if ($line_details !== null) {
            $queryParams['LineDetails'] = ObjectSerializer::toQueryValue($line_details);
        }
        // query params
        if ($custom_field_values !== null) {
            $queryParams['CustomFieldValues'] = ObjectSerializer::toQueryValue($custom_field_values);
        }
        // header params
        if ($accept !== null) {
            $headerParams['Accept'] = ObjectSerializer::toHeaderValue($accept);
        }
        // header params
        if ($jiwa_stateful !== null) {
            $headerParams['jiwa-stateful'] = ObjectSerializer::toHeaderValue($jiwa_stateful);
        }

        // path params
        if ($book_in_id !== null) {
            $resourcePath = str_replace(
                '{' . 'BookInID' . '}',
                ObjectSerializer::toPathValue($book_in_id),
                $resourcePath
            );
        }
        // path params
        if ($line_id !== null) {
            $resourcePath = str_replace(
                '{' . 'LineID' . '}',
                ObjectSerializer::toPathValue($line_id),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json', 'application/xml']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json', 'application/xml'],
                ['application/x-www-form-urlencoded', 'application/json', 'application/xml']
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            
            if($headers['Content-Type'] === 'application/json') {
                // \stdClass has no __toString(), so we should encode it manually
                if ($httpBody instanceof \stdClass) {
                    $httpBody = \GuzzleHttp\json_encode($httpBody);
                }
                // array has no __toString(), so we should encode it manually
                if(is_array($httpBody)) {
                    $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($httpBody));
                }
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\Query::build($formParams);
            }
        }

        // this endpoint requires HTTP basic authentication
        if ($this->config->getUsername() !== null || $this->config->getPassword() !== null) {
            $headers['Authorization'] = 'Basic ' . base64_encode($this->config->getUsername() . ":" . $this->config->getPassword());
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\Query::build($queryParams);
        return new Request(
            'DELETE',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation landedCostBookInLineGETRequestBookInIDLinesLineIDGet
     *
     * Retrieves a book in line.
     *
     * @param  string $accept Accept Header (required)
     * @param  string $book_in_id book_in_id (required)
     * @param  string $line_id line_id (required)
     * @param  bool $jiwa_stateful Stateful indicator (optional)
     *
     * @throws \Jiwa\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Jiwa\JiwaModel\BookInLine
     */
    public function landedCostBookInLineGETRequestBookInIDLinesLineIDGet($accept, $book_in_id, $line_id, $jiwa_stateful = null)
    {
        list($response) = $this->landedCostBookInLineGETRequestBookInIDLinesLineIDGetWithHttpInfo($accept, $book_in_id, $line_id, $jiwa_stateful);
        return $response;
    }

    /**
     * Operation landedCostBookInLineGETRequestBookInIDLinesLineIDGetWithHttpInfo
     *
     * Retrieves a book in line.
     *
     * @param  string $accept Accept Header (required)
     * @param  string $book_in_id (required)
     * @param  string $line_id (required)
     * @param  bool $jiwa_stateful Stateful indicator (optional)
     *
     * @throws \Jiwa\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Jiwa\JiwaModel\BookInLine, HTTP status code, HTTP response headers (array of strings)
     */
    public function landedCostBookInLineGETRequestBookInIDLinesLineIDGetWithHttpInfo($accept, $book_in_id, $line_id, $jiwa_stateful = null)
    {
        $returnType = '\Jiwa\JiwaModel\BookInLine';
        $request = $this->landedCostBookInLineGETRequestBookInIDLinesLineIDGetRequest($accept, $book_in_id, $line_id, $jiwa_stateful);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Jiwa\JiwaModel\BookInLine',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 404:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Jiwa\JiwaModel\BookInLine',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 401:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Jiwa\JiwaModel\BookInLine',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 403:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Jiwa\JiwaModel\BookInLine',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation landedCostBookInLineGETRequestBookInIDLinesLineIDGetAsync
     *
     * Retrieves a book in line.
     *
     * @param  string $accept Accept Header (required)
     * @param  string $book_in_id (required)
     * @param  string $line_id (required)
     * @param  bool $jiwa_stateful Stateful indicator (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function landedCostBookInLineGETRequestBookInIDLinesLineIDGetAsync($accept, $book_in_id, $line_id, $jiwa_stateful = null)
    {
        return $this->landedCostBookInLineGETRequestBookInIDLinesLineIDGetAsyncWithHttpInfo($accept, $book_in_id, $line_id, $jiwa_stateful)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation landedCostBookInLineGETRequestBookInIDLinesLineIDGetAsyncWithHttpInfo
     *
     * Retrieves a book in line.
     *
     * @param  string $accept Accept Header (required)
     * @param  string $book_in_id (required)
     * @param  string $line_id (required)
     * @param  bool $jiwa_stateful Stateful indicator (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function landedCostBookInLineGETRequestBookInIDLinesLineIDGetAsyncWithHttpInfo($accept, $book_in_id, $line_id, $jiwa_stateful = null)
    {
        $returnType = '\Jiwa\JiwaModel\BookInLine';
        $request = $this->landedCostBookInLineGETRequestBookInIDLinesLineIDGetRequest($accept, $book_in_id, $line_id, $jiwa_stateful);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'landedCostBookInLineGETRequestBookInIDLinesLineIDGet'
     *
     * @param  string $accept Accept Header (required)
     * @param  string $book_in_id (required)
     * @param  string $line_id (required)
     * @param  bool $jiwa_stateful Stateful indicator (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function landedCostBookInLineGETRequestBookInIDLinesLineIDGetRequest($accept, $book_in_id, $line_id, $jiwa_stateful = null)
    {
        // verify the required parameter 'accept' is set
        if ($accept === null || (is_array($accept) && count($accept) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $accept when calling landedCostBookInLineGETRequestBookInIDLinesLineIDGet'
            );
        }
        // verify the required parameter 'book_in_id' is set
        if ($book_in_id === null || (is_array($book_in_id) && count($book_in_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $book_in_id when calling landedCostBookInLineGETRequestBookInIDLinesLineIDGet'
            );
        }
        // verify the required parameter 'line_id' is set
        if ($line_id === null || (is_array($line_id) && count($line_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $line_id when calling landedCostBookInLineGETRequestBookInIDLinesLineIDGet'
            );
        }

        $resourcePath = '/BookIns/{BookInID}/Lines/{LineID}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // header params
        if ($accept !== null) {
            $headerParams['Accept'] = ObjectSerializer::toHeaderValue($accept);
        }
        // header params
        if ($jiwa_stateful !== null) {
            $headerParams['jiwa-stateful'] = ObjectSerializer::toHeaderValue($jiwa_stateful);
        }

        // path params
        if ($book_in_id !== null) {
            $resourcePath = str_replace(
                '{' . 'BookInID' . '}',
                ObjectSerializer::toPathValue($book_in_id),
                $resourcePath
            );
        }
        // path params
        if ($line_id !== null) {
            $resourcePath = str_replace(
                '{' . 'LineID' . '}',
                ObjectSerializer::toPathValue($line_id),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json', 'application/xml']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json', 'application/xml'],
                ['application/x-www-form-urlencoded', 'application/json', 'application/xml']
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            
            if($headers['Content-Type'] === 'application/json') {
                // \stdClass has no __toString(), so we should encode it manually
                if ($httpBody instanceof \stdClass) {
                    $httpBody = \GuzzleHttp\json_encode($httpBody);
                }
                // array has no __toString(), so we should encode it manually
                if(is_array($httpBody)) {
                    $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($httpBody));
                }
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\Query::build($formParams);
            }
        }

        // this endpoint requires HTTP basic authentication
        if ($this->config->getUsername() !== null || $this->config->getPassword() !== null) {
            $headers['Authorization'] = 'Basic ' . base64_encode($this->config->getUsername() . ":" . $this->config->getPassword());
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\Query::build($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation landedCostBookInLinePATCHRequestBookInIDLinesLineIDUpdate
     *
     * Updates a line for a book in.
     *
     * @param  string $accept Accept Header (required)
     * @param  string $book_in_id book_in_id (required)
     * @param  string $line_id line_id (required)
     * @param  bool $jiwa_stateful Stateful indicator (optional)
     * @param  int $item_no item_no (optional)
     * @param  double $quantity quantity (optional)
     * @param  double $quantity_previously_booked_in quantity_previously_booked_in (optional)
     * @param  double $quantity_outstanding quantity_outstanding (optional)
     * @param  string $shipment_line shipment_line (optional)
     * @param  string $line_details line_details (optional)
     * @param  string $custom_field_values custom_field_values (optional)
     * @param  \Jiwa\JiwaModel\LandedCostBookInLinePATCHRequest $body body (optional)
     *
     * @throws \Jiwa\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Jiwa\JiwaModel\BookInLine
     */
    public function landedCostBookInLinePATCHRequestBookInIDLinesLineIDUpdate($accept, $book_in_id, $line_id, $jiwa_stateful = null, $item_no = null, $quantity = null, $quantity_previously_booked_in = null, $quantity_outstanding = null, $shipment_line = null, $line_details = null, $custom_field_values = null, $body = null)
    {
        list($response) = $this->landedCostBookInLinePATCHRequestBookInIDLinesLineIDUpdateWithHttpInfo($accept, $book_in_id, $line_id, $jiwa_stateful, $item_no, $quantity, $quantity_previously_booked_in, $quantity_outstanding, $shipment_line, $line_details, $custom_field_values, $body);
        return $response;
    }

    /**
     * Operation landedCostBookInLinePATCHRequestBookInIDLinesLineIDUpdateWithHttpInfo
     *
     * Updates a line for a book in.
     *
     * @param  string $accept Accept Header (required)
     * @param  string $book_in_id (required)
     * @param  string $line_id (required)
     * @param  bool $jiwa_stateful Stateful indicator (optional)
     * @param  int $item_no (optional)
     * @param  double $quantity (optional)
     * @param  double $quantity_previously_booked_in (optional)
     * @param  double $quantity_outstanding (optional)
     * @param  string $shipment_line (optional)
     * @param  string $line_details (optional)
     * @param  string $custom_field_values (optional)
     * @param  \Jiwa\JiwaModel\LandedCostBookInLinePATCHRequest $body (optional)
     *
     * @throws \Jiwa\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Jiwa\JiwaModel\BookInLine, HTTP status code, HTTP response headers (array of strings)
     */
    public function landedCostBookInLinePATCHRequestBookInIDLinesLineIDUpdateWithHttpInfo($accept, $book_in_id, $line_id, $jiwa_stateful = null, $item_no = null, $quantity = null, $quantity_previously_booked_in = null, $quantity_outstanding = null, $shipment_line = null, $line_details = null, $custom_field_values = null, $body = null)
    {
        $returnType = '\Jiwa\JiwaModel\BookInLine';
        $request = $this->landedCostBookInLinePATCHRequestBookInIDLinesLineIDUpdateRequest($accept, $book_in_id, $line_id, $jiwa_stateful, $item_no, $quantity, $quantity_previously_booked_in, $quantity_outstanding, $shipment_line, $line_details, $custom_field_values, $body);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Jiwa\JiwaModel\BookInLine',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 401:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Jiwa\JiwaModel\BookInLine',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 403:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Jiwa\JiwaModel\BookInLine',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 404:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Jiwa\JiwaModel\BookInLine',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation landedCostBookInLinePATCHRequestBookInIDLinesLineIDUpdateAsync
     *
     * Updates a line for a book in.
     *
     * @param  string $accept Accept Header (required)
     * @param  string $book_in_id (required)
     * @param  string $line_id (required)
     * @param  bool $jiwa_stateful Stateful indicator (optional)
     * @param  int $item_no (optional)
     * @param  double $quantity (optional)
     * @param  double $quantity_previously_booked_in (optional)
     * @param  double $quantity_outstanding (optional)
     * @param  string $shipment_line (optional)
     * @param  string $line_details (optional)
     * @param  string $custom_field_values (optional)
     * @param  \Jiwa\JiwaModel\LandedCostBookInLinePATCHRequest $body (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function landedCostBookInLinePATCHRequestBookInIDLinesLineIDUpdateAsync($accept, $book_in_id, $line_id, $jiwa_stateful = null, $item_no = null, $quantity = null, $quantity_previously_booked_in = null, $quantity_outstanding = null, $shipment_line = null, $line_details = null, $custom_field_values = null, $body = null)
    {
        return $this->landedCostBookInLinePATCHRequestBookInIDLinesLineIDUpdateAsyncWithHttpInfo($accept, $book_in_id, $line_id, $jiwa_stateful, $item_no, $quantity, $quantity_previously_booked_in, $quantity_outstanding, $shipment_line, $line_details, $custom_field_values, $body)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation landedCostBookInLinePATCHRequestBookInIDLinesLineIDUpdateAsyncWithHttpInfo
     *
     * Updates a line for a book in.
     *
     * @param  string $accept Accept Header (required)
     * @param  string $book_in_id (required)
     * @param  string $line_id (required)
     * @param  bool $jiwa_stateful Stateful indicator (optional)
     * @param  int $item_no (optional)
     * @param  double $quantity (optional)
     * @param  double $quantity_previously_booked_in (optional)
     * @param  double $quantity_outstanding (optional)
     * @param  string $shipment_line (optional)
     * @param  string $line_details (optional)
     * @param  string $custom_field_values (optional)
     * @param  \Jiwa\JiwaModel\LandedCostBookInLinePATCHRequest $body (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function landedCostBookInLinePATCHRequestBookInIDLinesLineIDUpdateAsyncWithHttpInfo($accept, $book_in_id, $line_id, $jiwa_stateful = null, $item_no = null, $quantity = null, $quantity_previously_booked_in = null, $quantity_outstanding = null, $shipment_line = null, $line_details = null, $custom_field_values = null, $body = null)
    {
        $returnType = '\Jiwa\JiwaModel\BookInLine';
        $request = $this->landedCostBookInLinePATCHRequestBookInIDLinesLineIDUpdateRequest($accept, $book_in_id, $line_id, $jiwa_stateful, $item_no, $quantity, $quantity_previously_booked_in, $quantity_outstanding, $shipment_line, $line_details, $custom_field_values, $body);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'landedCostBookInLinePATCHRequestBookInIDLinesLineIDUpdate'
     *
     * @param  string $accept Accept Header (required)
     * @param  string $book_in_id (required)
     * @param  string $line_id (required)
     * @param  bool $jiwa_stateful Stateful indicator (optional)
     * @param  int $item_no (optional)
     * @param  double $quantity (optional)
     * @param  double $quantity_previously_booked_in (optional)
     * @param  double $quantity_outstanding (optional)
     * @param  string $shipment_line (optional)
     * @param  string $line_details (optional)
     * @param  string $custom_field_values (optional)
     * @param  \Jiwa\JiwaModel\LandedCostBookInLinePATCHRequest $body (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function landedCostBookInLinePATCHRequestBookInIDLinesLineIDUpdateRequest($accept, $book_in_id, $line_id, $jiwa_stateful = null, $item_no = null, $quantity = null, $quantity_previously_booked_in = null, $quantity_outstanding = null, $shipment_line = null, $line_details = null, $custom_field_values = null, $body = null)
    {
        // verify the required parameter 'accept' is set
        if ($accept === null || (is_array($accept) && count($accept) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $accept when calling landedCostBookInLinePATCHRequestBookInIDLinesLineIDUpdate'
            );
        }
        // verify the required parameter 'book_in_id' is set
        if ($book_in_id === null || (is_array($book_in_id) && count($book_in_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $book_in_id when calling landedCostBookInLinePATCHRequestBookInIDLinesLineIDUpdate'
            );
        }
        // verify the required parameter 'line_id' is set
        if ($line_id === null || (is_array($line_id) && count($line_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $line_id when calling landedCostBookInLinePATCHRequestBookInIDLinesLineIDUpdate'
            );
        }

        $resourcePath = '/BookIns/{BookInID}/Lines/{LineID}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        if ($item_no !== null) {
            $queryParams['ItemNo'] = ObjectSerializer::toQueryValue($item_no);
        }
        // query params
        if ($quantity !== null) {
            $queryParams['Quantity'] = ObjectSerializer::toQueryValue($quantity);
        }
        // query params
        if ($quantity_previously_booked_in !== null) {
            $queryParams['QuantityPreviouslyBookedIn'] = ObjectSerializer::toQueryValue($quantity_previously_booked_in);
        }
        // query params
        if ($quantity_outstanding !== null) {
            $queryParams['QuantityOutstanding'] = ObjectSerializer::toQueryValue($quantity_outstanding);
        }
        // query params
        if ($shipment_line !== null) {
            $queryParams['ShipmentLine'] = ObjectSerializer::toQueryValue($shipment_line);
        }
        // query params
        if ($line_details !== null) {
            $queryParams['LineDetails'] = ObjectSerializer::toQueryValue($line_details);
        }
        // query params
        if ($custom_field_values !== null) {
            $queryParams['CustomFieldValues'] = ObjectSerializer::toQueryValue($custom_field_values);
        }
        // header params
        if ($accept !== null) {
            $headerParams['Accept'] = ObjectSerializer::toHeaderValue($accept);
        }
        // header params
        if ($jiwa_stateful !== null) {
            $headerParams['jiwa-stateful'] = ObjectSerializer::toHeaderValue($jiwa_stateful);
        }

        // path params
        if ($book_in_id !== null) {
            $resourcePath = str_replace(
                '{' . 'BookInID' . '}',
                ObjectSerializer::toPathValue($book_in_id),
                $resourcePath
            );
        }
        // path params
        if ($line_id !== null) {
            $resourcePath = str_replace(
                '{' . 'LineID' . '}',
                ObjectSerializer::toPathValue($line_id),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;
        if (isset($body)) {
            $_tempBody = $body;
        }

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json', 'application/xml']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json', 'application/xml'],
                ['application/x-www-form-urlencoded', 'application/json', 'application/xml']
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            
            if($headers['Content-Type'] === 'application/json') {
                // \stdClass has no __toString(), so we should encode it manually
                if ($httpBody instanceof \stdClass) {
                    $httpBody = \GuzzleHttp\json_encode($httpBody);
                }
                // array has no __toString(), so we should encode it manually
                if(is_array($httpBody)) {
                    $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($httpBody));
                }
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\Query::build($formParams);
            }
        }

        // this endpoint requires HTTP basic authentication
        if ($this->config->getUsername() !== null || $this->config->getPassword() !== null) {
            $headers['Authorization'] = 'Basic ' . base64_encode($this->config->getUsername() . ":" . $this->config->getPassword());
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\Query::build($queryParams);
        return new Request(
            'PATCH',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation landedCostBookInLinesGETManyRequestBookInIDLinesGet
     *
     * Retrieves a list of book in lines.
     *
     * @param  string $accept Accept Header (required)
     * @param  string $book_in_id book_in_id (required)
     * @param  bool $jiwa_stateful Stateful indicator (optional)
     *
     * @throws \Jiwa\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Jiwa\JiwaModel\BookInLine[]
     */
    public function landedCostBookInLinesGETManyRequestBookInIDLinesGet($accept, $book_in_id, $jiwa_stateful = null)
    {
        list($response) = $this->landedCostBookInLinesGETManyRequestBookInIDLinesGetWithHttpInfo($accept, $book_in_id, $jiwa_stateful);
        return $response;
    }

    /**
     * Operation landedCostBookInLinesGETManyRequestBookInIDLinesGetWithHttpInfo
     *
     * Retrieves a list of book in lines.
     *
     * @param  string $accept Accept Header (required)
     * @param  string $book_in_id (required)
     * @param  bool $jiwa_stateful Stateful indicator (optional)
     *
     * @throws \Jiwa\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Jiwa\JiwaModel\BookInLine[], HTTP status code, HTTP response headers (array of strings)
     */
    public function landedCostBookInLinesGETManyRequestBookInIDLinesGetWithHttpInfo($accept, $book_in_id, $jiwa_stateful = null)
    {
        $returnType = '\Jiwa\JiwaModel\BookInLine[]';
        $request = $this->landedCostBookInLinesGETManyRequestBookInIDLinesGetRequest($accept, $book_in_id, $jiwa_stateful);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Jiwa\JiwaModel\BookInLine[]',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 404:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Jiwa\JiwaModel\BookInLine[]',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 401:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Jiwa\JiwaModel\BookInLine[]',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 403:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Jiwa\JiwaModel\BookInLine[]',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation landedCostBookInLinesGETManyRequestBookInIDLinesGetAsync
     *
     * Retrieves a list of book in lines.
     *
     * @param  string $accept Accept Header (required)
     * @param  string $book_in_id (required)
     * @param  bool $jiwa_stateful Stateful indicator (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function landedCostBookInLinesGETManyRequestBookInIDLinesGetAsync($accept, $book_in_id, $jiwa_stateful = null)
    {
        return $this->landedCostBookInLinesGETManyRequestBookInIDLinesGetAsyncWithHttpInfo($accept, $book_in_id, $jiwa_stateful)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation landedCostBookInLinesGETManyRequestBookInIDLinesGetAsyncWithHttpInfo
     *
     * Retrieves a list of book in lines.
     *
     * @param  string $accept Accept Header (required)
     * @param  string $book_in_id (required)
     * @param  bool $jiwa_stateful Stateful indicator (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function landedCostBookInLinesGETManyRequestBookInIDLinesGetAsyncWithHttpInfo($accept, $book_in_id, $jiwa_stateful = null)
    {
        $returnType = '\Jiwa\JiwaModel\BookInLine[]';
        $request = $this->landedCostBookInLinesGETManyRequestBookInIDLinesGetRequest($accept, $book_in_id, $jiwa_stateful);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'landedCostBookInLinesGETManyRequestBookInIDLinesGet'
     *
     * @param  string $accept Accept Header (required)
     * @param  string $book_in_id (required)
     * @param  bool $jiwa_stateful Stateful indicator (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function landedCostBookInLinesGETManyRequestBookInIDLinesGetRequest($accept, $book_in_id, $jiwa_stateful = null)
    {
        // verify the required parameter 'accept' is set
        if ($accept === null || (is_array($accept) && count($accept) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $accept when calling landedCostBookInLinesGETManyRequestBookInIDLinesGet'
            );
        }
        // verify the required parameter 'book_in_id' is set
        if ($book_in_id === null || (is_array($book_in_id) && count($book_in_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $book_in_id when calling landedCostBookInLinesGETManyRequestBookInIDLinesGet'
            );
        }

        $resourcePath = '/BookIns/{BookInID}/Lines';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // header params
        if ($accept !== null) {
            $headerParams['Accept'] = ObjectSerializer::toHeaderValue($accept);
        }
        // header params
        if ($jiwa_stateful !== null) {
            $headerParams['jiwa-stateful'] = ObjectSerializer::toHeaderValue($jiwa_stateful);
        }

        // path params
        if ($book_in_id !== null) {
            $resourcePath = str_replace(
                '{' . 'BookInID' . '}',
                ObjectSerializer::toPathValue($book_in_id),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json', 'application/xml']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json', 'application/xml'],
                ['application/x-www-form-urlencoded', 'application/json', 'application/xml']
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            
            if($headers['Content-Type'] === 'application/json') {
                // \stdClass has no __toString(), so we should encode it manually
                if ($httpBody instanceof \stdClass) {
                    $httpBody = \GuzzleHttp\json_encode($httpBody);
                }
                // array has no __toString(), so we should encode it manually
                if(is_array($httpBody)) {
                    $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($httpBody));
                }
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\Query::build($formParams);
            }
        }

        // this endpoint requires HTTP basic authentication
        if ($this->config->getUsername() !== null || $this->config->getPassword() !== null) {
            $headers['Authorization'] = 'Basic ' . base64_encode($this->config->getUsername() . ":" . $this->config->getPassword());
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\Query::build($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation landedCostBookInPATCHRequestBookInIDUpdate
     *
     * Updates a book in.
     *
     * @param  string $accept Accept Header (required)
     * @param  string $book_in_id book_in_id (required)
     * @param  bool $jiwa_stateful Stateful indicator (optional)
     * @param  string $book_in_no book_in_no (optional)
     * @param  string $shipment shipment (optional)
     * @param  \DateTime $book_in_date book_in_date (optional)
     * @param  bool $activated activated (optional)
     * @param  string $gl_sets_rec_id gl_sets_rec_id (optional)
     * @param  \DateTime $last_saved_date_time last_saved_date_time (optional)
     * @param  string $lines lines (optional)
     * @param  string $other_book_ins_for_this_shipment other_book_ins_for_this_shipment (optional)
     * @param  \Jiwa\JiwaModel\LandedCostBookInPATCHRequest $body body (optional)
     *
     * @throws \Jiwa\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Jiwa\JiwaModel\BookIn
     */
    public function landedCostBookInPATCHRequestBookInIDUpdate($accept, $book_in_id, $jiwa_stateful = null, $book_in_no = null, $shipment = null, $book_in_date = null, $activated = null, $gl_sets_rec_id = null, $last_saved_date_time = null, $lines = null, $other_book_ins_for_this_shipment = null, $body = null)
    {
        list($response) = $this->landedCostBookInPATCHRequestBookInIDUpdateWithHttpInfo($accept, $book_in_id, $jiwa_stateful, $book_in_no, $shipment, $book_in_date, $activated, $gl_sets_rec_id, $last_saved_date_time, $lines, $other_book_ins_for_this_shipment, $body);
        return $response;
    }

    /**
     * Operation landedCostBookInPATCHRequestBookInIDUpdateWithHttpInfo
     *
     * Updates a book in.
     *
     * @param  string $accept Accept Header (required)
     * @param  string $book_in_id (required)
     * @param  bool $jiwa_stateful Stateful indicator (optional)
     * @param  string $book_in_no (optional)
     * @param  string $shipment (optional)
     * @param  \DateTime $book_in_date (optional)
     * @param  bool $activated (optional)
     * @param  string $gl_sets_rec_id (optional)
     * @param  \DateTime $last_saved_date_time (optional)
     * @param  string $lines (optional)
     * @param  string $other_book_ins_for_this_shipment (optional)
     * @param  \Jiwa\JiwaModel\LandedCostBookInPATCHRequest $body (optional)
     *
     * @throws \Jiwa\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Jiwa\JiwaModel\BookIn, HTTP status code, HTTP response headers (array of strings)
     */
    public function landedCostBookInPATCHRequestBookInIDUpdateWithHttpInfo($accept, $book_in_id, $jiwa_stateful = null, $book_in_no = null, $shipment = null, $book_in_date = null, $activated = null, $gl_sets_rec_id = null, $last_saved_date_time = null, $lines = null, $other_book_ins_for_this_shipment = null, $body = null)
    {
        $returnType = '\Jiwa\JiwaModel\BookIn';
        $request = $this->landedCostBookInPATCHRequestBookInIDUpdateRequest($accept, $book_in_id, $jiwa_stateful, $book_in_no, $shipment, $book_in_date, $activated, $gl_sets_rec_id, $last_saved_date_time, $lines, $other_book_ins_for_this_shipment, $body);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Jiwa\JiwaModel\BookIn',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 404:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Jiwa\JiwaModel\BookIn',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 401:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Jiwa\JiwaModel\BookIn',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 403:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Jiwa\JiwaModel\BookIn',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 201:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Jiwa\JiwaModel\BookIn',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation landedCostBookInPATCHRequestBookInIDUpdateAsync
     *
     * Updates a book in.
     *
     * @param  string $accept Accept Header (required)
     * @param  string $book_in_id (required)
     * @param  bool $jiwa_stateful Stateful indicator (optional)
     * @param  string $book_in_no (optional)
     * @param  string $shipment (optional)
     * @param  \DateTime $book_in_date (optional)
     * @param  bool $activated (optional)
     * @param  string $gl_sets_rec_id (optional)
     * @param  \DateTime $last_saved_date_time (optional)
     * @param  string $lines (optional)
     * @param  string $other_book_ins_for_this_shipment (optional)
     * @param  \Jiwa\JiwaModel\LandedCostBookInPATCHRequest $body (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function landedCostBookInPATCHRequestBookInIDUpdateAsync($accept, $book_in_id, $jiwa_stateful = null, $book_in_no = null, $shipment = null, $book_in_date = null, $activated = null, $gl_sets_rec_id = null, $last_saved_date_time = null, $lines = null, $other_book_ins_for_this_shipment = null, $body = null)
    {
        return $this->landedCostBookInPATCHRequestBookInIDUpdateAsyncWithHttpInfo($accept, $book_in_id, $jiwa_stateful, $book_in_no, $shipment, $book_in_date, $activated, $gl_sets_rec_id, $last_saved_date_time, $lines, $other_book_ins_for_this_shipment, $body)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation landedCostBookInPATCHRequestBookInIDUpdateAsyncWithHttpInfo
     *
     * Updates a book in.
     *
     * @param  string $accept Accept Header (required)
     * @param  string $book_in_id (required)
     * @param  bool $jiwa_stateful Stateful indicator (optional)
     * @param  string $book_in_no (optional)
     * @param  string $shipment (optional)
     * @param  \DateTime $book_in_date (optional)
     * @param  bool $activated (optional)
     * @param  string $gl_sets_rec_id (optional)
     * @param  \DateTime $last_saved_date_time (optional)
     * @param  string $lines (optional)
     * @param  string $other_book_ins_for_this_shipment (optional)
     * @param  \Jiwa\JiwaModel\LandedCostBookInPATCHRequest $body (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function landedCostBookInPATCHRequestBookInIDUpdateAsyncWithHttpInfo($accept, $book_in_id, $jiwa_stateful = null, $book_in_no = null, $shipment = null, $book_in_date = null, $activated = null, $gl_sets_rec_id = null, $last_saved_date_time = null, $lines = null, $other_book_ins_for_this_shipment = null, $body = null)
    {
        $returnType = '\Jiwa\JiwaModel\BookIn';
        $request = $this->landedCostBookInPATCHRequestBookInIDUpdateRequest($accept, $book_in_id, $jiwa_stateful, $book_in_no, $shipment, $book_in_date, $activated, $gl_sets_rec_id, $last_saved_date_time, $lines, $other_book_ins_for_this_shipment, $body);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'landedCostBookInPATCHRequestBookInIDUpdate'
     *
     * @param  string $accept Accept Header (required)
     * @param  string $book_in_id (required)
     * @param  bool $jiwa_stateful Stateful indicator (optional)
     * @param  string $book_in_no (optional)
     * @param  string $shipment (optional)
     * @param  \DateTime $book_in_date (optional)
     * @param  bool $activated (optional)
     * @param  string $gl_sets_rec_id (optional)
     * @param  \DateTime $last_saved_date_time (optional)
     * @param  string $lines (optional)
     * @param  string $other_book_ins_for_this_shipment (optional)
     * @param  \Jiwa\JiwaModel\LandedCostBookInPATCHRequest $body (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function landedCostBookInPATCHRequestBookInIDUpdateRequest($accept, $book_in_id, $jiwa_stateful = null, $book_in_no = null, $shipment = null, $book_in_date = null, $activated = null, $gl_sets_rec_id = null, $last_saved_date_time = null, $lines = null, $other_book_ins_for_this_shipment = null, $body = null)
    {
        // verify the required parameter 'accept' is set
        if ($accept === null || (is_array($accept) && count($accept) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $accept when calling landedCostBookInPATCHRequestBookInIDUpdate'
            );
        }
        // verify the required parameter 'book_in_id' is set
        if ($book_in_id === null || (is_array($book_in_id) && count($book_in_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $book_in_id when calling landedCostBookInPATCHRequestBookInIDUpdate'
            );
        }

        $resourcePath = '/BookIns/{BookInID}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        if ($book_in_no !== null) {
            $queryParams['BookInNo'] = ObjectSerializer::toQueryValue($book_in_no);
        }
        // query params
        if ($shipment !== null) {
            $queryParams['Shipment'] = ObjectSerializer::toQueryValue($shipment);
        }
        // query params
        if ($book_in_date !== null) {
            $queryParams['BookInDate'] = ObjectSerializer::toQueryValue($book_in_date);
        }
        // query params
        if ($activated !== null) {
            $queryParams['Activated'] = ObjectSerializer::toQueryValue($activated);
        }
        // query params
        if ($gl_sets_rec_id !== null) {
            $queryParams['GL_Sets_RecID'] = ObjectSerializer::toQueryValue($gl_sets_rec_id);
        }
        // query params
        if ($last_saved_date_time !== null) {
            $queryParams['LastSavedDateTime'] = ObjectSerializer::toQueryValue($last_saved_date_time);
        }
        // query params
        if ($lines !== null) {
            $queryParams['Lines'] = ObjectSerializer::toQueryValue($lines);
        }
        // query params
        if ($other_book_ins_for_this_shipment !== null) {
            $queryParams['OtherBookInsForThisShipment'] = ObjectSerializer::toQueryValue($other_book_ins_for_this_shipment);
        }
        // header params
        if ($accept !== null) {
            $headerParams['Accept'] = ObjectSerializer::toHeaderValue($accept);
        }
        // header params
        if ($jiwa_stateful !== null) {
            $headerParams['jiwa-stateful'] = ObjectSerializer::toHeaderValue($jiwa_stateful);
        }

        // path params
        if ($book_in_id !== null) {
            $resourcePath = str_replace(
                '{' . 'BookInID' . '}',
                ObjectSerializer::toPathValue($book_in_id),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;
        if (isset($body)) {
            $_tempBody = $body;
        }

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json', 'application/xml']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json', 'application/xml'],
                ['application/x-www-form-urlencoded', 'application/json', 'application/xml']
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            
            if($headers['Content-Type'] === 'application/json') {
                // \stdClass has no __toString(), so we should encode it manually
                if ($httpBody instanceof \stdClass) {
                    $httpBody = \GuzzleHttp\json_encode($httpBody);
                }
                // array has no __toString(), so we should encode it manually
                if(is_array($httpBody)) {
                    $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($httpBody));
                }
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\Query::build($formParams);
            }
        }

        // this endpoint requires HTTP basic authentication
        if ($this->config->getUsername() !== null || $this->config->getPassword() !== null) {
            $headers['Authorization'] = 'Basic ' . base64_encode($this->config->getUsername() . ":" . $this->config->getPassword());
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\Query::build($queryParams);
        return new Request(
            'PATCH',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation landedCostBookInSAVERequestSaveGet
     *
     * Saves a stateful book in.
     *
     * @param  string $accept Accept Header (required)
     * @param  bool $jiwa_stateful Stateful indicator (optional)
     * @param  string $book_in_id book_in_id (optional)
     *
     * @throws \Jiwa\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Jiwa\JiwaModel\BookIn
     */
    public function landedCostBookInSAVERequestSaveGet($accept, $jiwa_stateful = null, $book_in_id = null)
    {
        list($response) = $this->landedCostBookInSAVERequestSaveGetWithHttpInfo($accept, $jiwa_stateful, $book_in_id);
        return $response;
    }

    /**
     * Operation landedCostBookInSAVERequestSaveGetWithHttpInfo
     *
     * Saves a stateful book in.
     *
     * @param  string $accept Accept Header (required)
     * @param  bool $jiwa_stateful Stateful indicator (optional)
     * @param  string $book_in_id (optional)
     *
     * @throws \Jiwa\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Jiwa\JiwaModel\BookIn, HTTP status code, HTTP response headers (array of strings)
     */
    public function landedCostBookInSAVERequestSaveGetWithHttpInfo($accept, $jiwa_stateful = null, $book_in_id = null)
    {
        $returnType = '\Jiwa\JiwaModel\BookIn';
        $request = $this->landedCostBookInSAVERequestSaveGetRequest($accept, $jiwa_stateful, $book_in_id);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Jiwa\JiwaModel\BookIn',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 403:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Jiwa\JiwaModel\BookIn',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 401:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Jiwa\JiwaModel\BookIn',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 404:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Jiwa\JiwaModel\BookIn',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation landedCostBookInSAVERequestSaveGetAsync
     *
     * Saves a stateful book in.
     *
     * @param  string $accept Accept Header (required)
     * @param  bool $jiwa_stateful Stateful indicator (optional)
     * @param  string $book_in_id (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function landedCostBookInSAVERequestSaveGetAsync($accept, $jiwa_stateful = null, $book_in_id = null)
    {
        return $this->landedCostBookInSAVERequestSaveGetAsyncWithHttpInfo($accept, $jiwa_stateful, $book_in_id)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation landedCostBookInSAVERequestSaveGetAsyncWithHttpInfo
     *
     * Saves a stateful book in.
     *
     * @param  string $accept Accept Header (required)
     * @param  bool $jiwa_stateful Stateful indicator (optional)
     * @param  string $book_in_id (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function landedCostBookInSAVERequestSaveGetAsyncWithHttpInfo($accept, $jiwa_stateful = null, $book_in_id = null)
    {
        $returnType = '\Jiwa\JiwaModel\BookIn';
        $request = $this->landedCostBookInSAVERequestSaveGetRequest($accept, $jiwa_stateful, $book_in_id);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'landedCostBookInSAVERequestSaveGet'
     *
     * @param  string $accept Accept Header (required)
     * @param  bool $jiwa_stateful Stateful indicator (optional)
     * @param  string $book_in_id (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function landedCostBookInSAVERequestSaveGetRequest($accept, $jiwa_stateful = null, $book_in_id = null)
    {
        // verify the required parameter 'accept' is set
        if ($accept === null || (is_array($accept) && count($accept) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $accept when calling landedCostBookInSAVERequestSaveGet'
            );
        }

        $resourcePath = '/BookIns/Save';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        if ($book_in_id !== null) {
            $queryParams['BookInID'] = ObjectSerializer::toQueryValue($book_in_id);
        }
        // header params
        if ($accept !== null) {
            $headerParams['Accept'] = ObjectSerializer::toHeaderValue($accept);
        }
        // header params
        if ($jiwa_stateful !== null) {
            $headerParams['jiwa-stateful'] = ObjectSerializer::toHeaderValue($jiwa_stateful);
        }


        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json', 'application/xml']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json', 'application/xml'],
                ['application/x-www-form-urlencoded', 'application/json', 'application/xml']
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            
            if($headers['Content-Type'] === 'application/json') {
                // \stdClass has no __toString(), so we should encode it manually
                if ($httpBody instanceof \stdClass) {
                    $httpBody = \GuzzleHttp\json_encode($httpBody);
                }
                // array has no __toString(), so we should encode it manually
                if(is_array($httpBody)) {
                    $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($httpBody));
                }
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\Query::build($formParams);
            }
        }

        // this endpoint requires HTTP basic authentication
        if ($this->config->getUsername() !== null || $this->config->getPassword() !== null) {
            $headers['Authorization'] = 'Basic ' . base64_encode($this->config->getUsername() . ":" . $this->config->getPassword());
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\Query::build($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Create http client option
     *
     * @throws \RuntimeException on file opening failure
     * @return array of http client options
     */
    protected function createHttpClientOption()
    {
        $options = [];
        if ($this->config->getDebug()) {
            $options[RequestOptions::DEBUG] = fopen($this->config->getDebugFile(), 'a');
            if (!$options[RequestOptions::DEBUG]) {
                throw new \RuntimeException('Failed to open the debug file: ' . $this->config->getDebugFile());
            }
        }

        return $options;
    }
}

<?php
/**
 * WebhooksApi
 * PHP version 5
 *
 * @category Class
 * @package  Jiwa
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * JiwaAPI
 *
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: 1.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 * Swagger Codegen version: 2.4.28-SNAPSHOT
 */

/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Jiwa\Api;

use GuzzleHttp\Client;
use GuzzleHttp\ClientInterface;
use GuzzleHttp\Exception\RequestException;
use GuzzleHttp\Psr7\MultipartStream;
use GuzzleHttp\Psr7\Request;
use GuzzleHttp\RequestOptions;
use Jiwa\ApiException;
use Jiwa\Configuration;
use Jiwa\HeaderSelector;
use Jiwa\ObjectSerializer;

/**
 * WebhooksApi Class Doc Comment
 *
 * @category Class
 * @package  Jiwa
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class WebhooksApi
{
    /**
     * @var ClientInterface
     */
    protected $client;

    /**
     * @var Configuration
     */
    protected $config;

    /**
     * @var HeaderSelector
     */
    protected $headerSelector;

    /**
     * @param ClientInterface $client
     * @param Configuration   $config
     * @param HeaderSelector  $selector
     */
    public function __construct(
        ClientInterface $client = null,
        Configuration $config = null,
        HeaderSelector $selector = null
    ) {
        $this->client = $client ?: new Client();
        $this->config = $config ?: new Configuration();
        $this->headerSelector = $selector ?: new HeaderSelector();
    }

    /**
     * @return Configuration
     */
    public function getConfig()
    {
        return $this->config;
    }

    /**
     * Operation webhooksEventsGETRequestEventsGet
     *
     * Lists available events
     *
     * @param  string $accept Accept Header (required)
     * @param  bool $jiwa_stateful Stateful indicator (optional)
     *
     * @throws \Jiwa\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Jiwa\Model\WebHookEvent[]
     */
    public function webhooksEventsGETRequestEventsGet($accept, $jiwa_stateful = null)
    {
        list($response) = $this->webhooksEventsGETRequestEventsGetWithHttpInfo($accept, $jiwa_stateful);
        return $response;
    }

    /**
     * Operation webhooksEventsGETRequestEventsGetWithHttpInfo
     *
     * Lists available events
     *
     * @param  string $accept Accept Header (required)
     * @param  bool $jiwa_stateful Stateful indicator (optional)
     *
     * @throws \Jiwa\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Jiwa\Model\WebHookEvent[], HTTP status code, HTTP response headers (array of strings)
     */
    public function webhooksEventsGETRequestEventsGetWithHttpInfo($accept, $jiwa_stateful = null)
    {
        $returnType = '\Jiwa\Model\WebHookEvent[]';
        $request = $this->webhooksEventsGETRequestEventsGetRequest($accept, $jiwa_stateful);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Jiwa\Model\WebHookEvent[]',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation webhooksEventsGETRequestEventsGetAsync
     *
     * Lists available events
     *
     * @param  string $accept Accept Header (required)
     * @param  bool $jiwa_stateful Stateful indicator (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function webhooksEventsGETRequestEventsGetAsync($accept, $jiwa_stateful = null)
    {
        return $this->webhooksEventsGETRequestEventsGetAsyncWithHttpInfo($accept, $jiwa_stateful)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation webhooksEventsGETRequestEventsGetAsyncWithHttpInfo
     *
     * Lists available events
     *
     * @param  string $accept Accept Header (required)
     * @param  bool $jiwa_stateful Stateful indicator (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function webhooksEventsGETRequestEventsGetAsyncWithHttpInfo($accept, $jiwa_stateful = null)
    {
        $returnType = '\Jiwa\Model\WebHookEvent[]';
        $request = $this->webhooksEventsGETRequestEventsGetRequest($accept, $jiwa_stateful);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'webhooksEventsGETRequestEventsGet'
     *
     * @param  string $accept Accept Header (required)
     * @param  bool $jiwa_stateful Stateful indicator (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function webhooksEventsGETRequestEventsGetRequest($accept, $jiwa_stateful = null)
    {
        // verify the required parameter 'accept' is set
        if ($accept === null || (is_array($accept) && count($accept) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $accept when calling webhooksEventsGETRequestEventsGet'
            );
        }

        $resourcePath = '/Webhooks/Events/';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // header params
        if ($accept !== null) {
            $headerParams['Accept'] = ObjectSerializer::toHeaderValue($accept);
        }
        // header params
        if ($jiwa_stateful !== null) {
            $headerParams['jiwa-stateful'] = ObjectSerializer::toHeaderValue($jiwa_stateful);
        }


        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json', 'application/xml']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json', 'application/xml'],
                ['application/x-www-form-urlencoded', 'application/json', 'application/xml']
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            
            if($headers['Content-Type'] === 'application/json') {
                // \stdClass has no __toString(), so we should encode it manually
                if ($httpBody instanceof \stdClass) {
                    $httpBody = \GuzzleHttp\json_encode($httpBody);
                }
                // array has no __toString(), so we should encode it manually
                if(is_array($httpBody)) {
                    $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($httpBody));
                }
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\Query::build($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\Query::build($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation webhooksEventsPOSTRequestEvents2Post
     *
     * Adds an event occurance.  Used by Jiwa clients to cause webhooks to be sent to subscribers. Not intended to be invoked externally
     *
     * @param  string $accept Accept Header (required)
     * @param  bool $jiwa_stateful Stateful indicator (optional)
     * @param  string $event_name event_name (optional)
     * @param  string $body body (optional)
     * @param  \Jiwa\Model\WebhooksEventsPOSTRequest $body2 body2 (optional)
     *
     * @throws \Jiwa\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Jiwa\Model\Object
     */
    public function webhooksEventsPOSTRequestEvents2Post($accept, $jiwa_stateful = null, $event_name = null, $body = null, $body2 = null)
    {
        list($response) = $this->webhooksEventsPOSTRequestEvents2PostWithHttpInfo($accept, $jiwa_stateful, $event_name, $body, $body2);
        return $response;
    }

    /**
     * Operation webhooksEventsPOSTRequestEvents2PostWithHttpInfo
     *
     * Adds an event occurance.  Used by Jiwa clients to cause webhooks to be sent to subscribers. Not intended to be invoked externally
     *
     * @param  string $accept Accept Header (required)
     * @param  bool $jiwa_stateful Stateful indicator (optional)
     * @param  string $event_name (optional)
     * @param  string $body (optional)
     * @param  \Jiwa\Model\WebhooksEventsPOSTRequest $body2 (optional)
     *
     * @throws \Jiwa\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Jiwa\Model\Object, HTTP status code, HTTP response headers (array of strings)
     */
    public function webhooksEventsPOSTRequestEvents2PostWithHttpInfo($accept, $jiwa_stateful = null, $event_name = null, $body = null, $body2 = null)
    {
        $returnType = '\Jiwa\Model\Object';
        $request = $this->webhooksEventsPOSTRequestEvents2PostRequest($accept, $jiwa_stateful, $event_name, $body, $body2);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Jiwa\Model\Object',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 403:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Jiwa\Model\Object',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 401:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Jiwa\Model\Object',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 201:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Jiwa\Model\Object',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation webhooksEventsPOSTRequestEvents2PostAsync
     *
     * Adds an event occurance.  Used by Jiwa clients to cause webhooks to be sent to subscribers. Not intended to be invoked externally
     *
     * @param  string $accept Accept Header (required)
     * @param  bool $jiwa_stateful Stateful indicator (optional)
     * @param  string $event_name (optional)
     * @param  string $body (optional)
     * @param  \Jiwa\Model\WebhooksEventsPOSTRequest $body2 (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function webhooksEventsPOSTRequestEvents2PostAsync($accept, $jiwa_stateful = null, $event_name = null, $body = null, $body2 = null)
    {
        return $this->webhooksEventsPOSTRequestEvents2PostAsyncWithHttpInfo($accept, $jiwa_stateful, $event_name, $body, $body2)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation webhooksEventsPOSTRequestEvents2PostAsyncWithHttpInfo
     *
     * Adds an event occurance.  Used by Jiwa clients to cause webhooks to be sent to subscribers. Not intended to be invoked externally
     *
     * @param  string $accept Accept Header (required)
     * @param  bool $jiwa_stateful Stateful indicator (optional)
     * @param  string $event_name (optional)
     * @param  string $body (optional)
     * @param  \Jiwa\Model\WebhooksEventsPOSTRequest $body2 (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function webhooksEventsPOSTRequestEvents2PostAsyncWithHttpInfo($accept, $jiwa_stateful = null, $event_name = null, $body = null, $body2 = null)
    {
        $returnType = '\Jiwa\Model\Object';
        $request = $this->webhooksEventsPOSTRequestEvents2PostRequest($accept, $jiwa_stateful, $event_name, $body, $body2);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'webhooksEventsPOSTRequestEvents2Post'
     *
     * @param  string $accept Accept Header (required)
     * @param  bool $jiwa_stateful Stateful indicator (optional)
     * @param  string $event_name (optional)
     * @param  string $body (optional)
     * @param  \Jiwa\Model\WebhooksEventsPOSTRequest $body2 (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function webhooksEventsPOSTRequestEvents2PostRequest($accept, $jiwa_stateful = null, $event_name = null, $body = null, $body2 = null)
    {
        // verify the required parameter 'accept' is set
        if ($accept === null || (is_array($accept) && count($accept) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $accept when calling webhooksEventsPOSTRequestEvents2Post'
            );
        }

        $resourcePath = '/Webhooks/Events/';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        if ($event_name !== null) {
            $queryParams['EventName'] = ObjectSerializer::toQueryValue($event_name);
        }
        // query params
        if ($body !== null) {
            $queryParams['Body'] = ObjectSerializer::toQueryValue($body);
        }
        // header params
        if ($accept !== null) {
            $headerParams['Accept'] = ObjectSerializer::toHeaderValue($accept);
        }
        // header params
        if ($jiwa_stateful !== null) {
            $headerParams['jiwa-stateful'] = ObjectSerializer::toHeaderValue($jiwa_stateful);
        }


        // body params
        $_tempBody = null;
        if (isset($body2)) {
            $_tempBody = $body2;
        }

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json', 'application/xml']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json', 'application/xml'],
                ['application/x-www-form-urlencoded', 'application/json', 'application/xml']
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            
            if($headers['Content-Type'] === 'application/json') {
                // \stdClass has no __toString(), so we should encode it manually
                if ($httpBody instanceof \stdClass) {
                    $httpBody = \GuzzleHttp\json_encode($httpBody);
                }
                // array has no __toString(), so we should encode it manually
                if(is_array($httpBody)) {
                    $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($httpBody));
                }
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\Query::build($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\Query::build($queryParams);
        return new Request(
            'POST',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation webhooksMessageResponsesGETRequestSubscribersSubscriberIDMessagesResponsesGet
     *
     * Retrieves a list of all Webhook messages responses for a subscriber.
     *
     * @param  string $accept Accept Header (required)
     * @param  string $subscriber_id subscriber_id (required)
     * @param  bool $jiwa_stateful Stateful indicator (optional)
     * @param  int $skip skip (optional)
     * @param  int $take take (optional)
     * @param  string $order_by order_by (optional)
     * @param  string $order_by_desc order_by_desc (optional)
     * @param  string $include include (optional)
     * @param  string $fields fields (optional)
     * @param  string $meta meta (optional)
     *
     * @throws \Jiwa\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Jiwa\Model\QueryResponseVSYWebhookSubscriberMessageResponses_
     */
    public function webhooksMessageResponsesGETRequestSubscribersSubscriberIDMessagesResponsesGet($accept, $subscriber_id, $jiwa_stateful = null, $skip = null, $take = null, $order_by = null, $order_by_desc = null, $include = null, $fields = null, $meta = null)
    {
        list($response) = $this->webhooksMessageResponsesGETRequestSubscribersSubscriberIDMessagesResponsesGetWithHttpInfo($accept, $subscriber_id, $jiwa_stateful, $skip, $take, $order_by, $order_by_desc, $include, $fields, $meta);
        return $response;
    }

    /**
     * Operation webhooksMessageResponsesGETRequestSubscribersSubscriberIDMessagesResponsesGetWithHttpInfo
     *
     * Retrieves a list of all Webhook messages responses for a subscriber.
     *
     * @param  string $accept Accept Header (required)
     * @param  string $subscriber_id (required)
     * @param  bool $jiwa_stateful Stateful indicator (optional)
     * @param  int $skip (optional)
     * @param  int $take (optional)
     * @param  string $order_by (optional)
     * @param  string $order_by_desc (optional)
     * @param  string $include (optional)
     * @param  string $fields (optional)
     * @param  string $meta (optional)
     *
     * @throws \Jiwa\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Jiwa\Model\QueryResponseVSYWebhookSubscriberMessageResponses_, HTTP status code, HTTP response headers (array of strings)
     */
    public function webhooksMessageResponsesGETRequestSubscribersSubscriberIDMessagesResponsesGetWithHttpInfo($accept, $subscriber_id, $jiwa_stateful = null, $skip = null, $take = null, $order_by = null, $order_by_desc = null, $include = null, $fields = null, $meta = null)
    {
        $returnType = '\Jiwa\Model\QueryResponseVSYWebhookSubscriberMessageResponses_';
        $request = $this->webhooksMessageResponsesGETRequestSubscribersSubscriberIDMessagesResponsesGetRequest($accept, $subscriber_id, $jiwa_stateful, $skip, $take, $order_by, $order_by_desc, $include, $fields, $meta);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Jiwa\Model\QueryResponseVSYWebhookSubscriberMessageResponses_',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation webhooksMessageResponsesGETRequestSubscribersSubscriberIDMessagesResponsesGetAsync
     *
     * Retrieves a list of all Webhook messages responses for a subscriber.
     *
     * @param  string $accept Accept Header (required)
     * @param  string $subscriber_id (required)
     * @param  bool $jiwa_stateful Stateful indicator (optional)
     * @param  int $skip (optional)
     * @param  int $take (optional)
     * @param  string $order_by (optional)
     * @param  string $order_by_desc (optional)
     * @param  string $include (optional)
     * @param  string $fields (optional)
     * @param  string $meta (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function webhooksMessageResponsesGETRequestSubscribersSubscriberIDMessagesResponsesGetAsync($accept, $subscriber_id, $jiwa_stateful = null, $skip = null, $take = null, $order_by = null, $order_by_desc = null, $include = null, $fields = null, $meta = null)
    {
        return $this->webhooksMessageResponsesGETRequestSubscribersSubscriberIDMessagesResponsesGetAsyncWithHttpInfo($accept, $subscriber_id, $jiwa_stateful, $skip, $take, $order_by, $order_by_desc, $include, $fields, $meta)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation webhooksMessageResponsesGETRequestSubscribersSubscriberIDMessagesResponsesGetAsyncWithHttpInfo
     *
     * Retrieves a list of all Webhook messages responses for a subscriber.
     *
     * @param  string $accept Accept Header (required)
     * @param  string $subscriber_id (required)
     * @param  bool $jiwa_stateful Stateful indicator (optional)
     * @param  int $skip (optional)
     * @param  int $take (optional)
     * @param  string $order_by (optional)
     * @param  string $order_by_desc (optional)
     * @param  string $include (optional)
     * @param  string $fields (optional)
     * @param  string $meta (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function webhooksMessageResponsesGETRequestSubscribersSubscriberIDMessagesResponsesGetAsyncWithHttpInfo($accept, $subscriber_id, $jiwa_stateful = null, $skip = null, $take = null, $order_by = null, $order_by_desc = null, $include = null, $fields = null, $meta = null)
    {
        $returnType = '\Jiwa\Model\QueryResponseVSYWebhookSubscriberMessageResponses_';
        $request = $this->webhooksMessageResponsesGETRequestSubscribersSubscriberIDMessagesResponsesGetRequest($accept, $subscriber_id, $jiwa_stateful, $skip, $take, $order_by, $order_by_desc, $include, $fields, $meta);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'webhooksMessageResponsesGETRequestSubscribersSubscriberIDMessagesResponsesGet'
     *
     * @param  string $accept Accept Header (required)
     * @param  string $subscriber_id (required)
     * @param  bool $jiwa_stateful Stateful indicator (optional)
     * @param  int $skip (optional)
     * @param  int $take (optional)
     * @param  string $order_by (optional)
     * @param  string $order_by_desc (optional)
     * @param  string $include (optional)
     * @param  string $fields (optional)
     * @param  string $meta (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function webhooksMessageResponsesGETRequestSubscribersSubscriberIDMessagesResponsesGetRequest($accept, $subscriber_id, $jiwa_stateful = null, $skip = null, $take = null, $order_by = null, $order_by_desc = null, $include = null, $fields = null, $meta = null)
    {
        // verify the required parameter 'accept' is set
        if ($accept === null || (is_array($accept) && count($accept) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $accept when calling webhooksMessageResponsesGETRequestSubscribersSubscriberIDMessagesResponsesGet'
            );
        }
        // verify the required parameter 'subscriber_id' is set
        if ($subscriber_id === null || (is_array($subscriber_id) && count($subscriber_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $subscriber_id when calling webhooksMessageResponsesGETRequestSubscribersSubscriberIDMessagesResponsesGet'
            );
        }

        $resourcePath = '/Webhooks/Subscribers/{SubscriberID}/Messages/Responses';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        if ($skip !== null) {
            $queryParams['Skip'] = ObjectSerializer::toQueryValue($skip);
        }
        // query params
        if ($take !== null) {
            $queryParams['Take'] = ObjectSerializer::toQueryValue($take);
        }
        // query params
        if ($order_by !== null) {
            $queryParams['OrderBy'] = ObjectSerializer::toQueryValue($order_by);
        }
        // query params
        if ($order_by_desc !== null) {
            $queryParams['OrderByDesc'] = ObjectSerializer::toQueryValue($order_by_desc);
        }
        // query params
        if ($include !== null) {
            $queryParams['Include'] = ObjectSerializer::toQueryValue($include);
        }
        // query params
        if ($fields !== null) {
            $queryParams['Fields'] = ObjectSerializer::toQueryValue($fields);
        }
        // query params
        if ($meta !== null) {
            $queryParams['Meta'] = ObjectSerializer::toQueryValue($meta);
        }
        // header params
        if ($accept !== null) {
            $headerParams['Accept'] = ObjectSerializer::toHeaderValue($accept);
        }
        // header params
        if ($jiwa_stateful !== null) {
            $headerParams['jiwa-stateful'] = ObjectSerializer::toHeaderValue($jiwa_stateful);
        }

        // path params
        if ($subscriber_id !== null) {
            $resourcePath = str_replace(
                '{' . 'SubscriberID' . '}',
                ObjectSerializer::toPathValue($subscriber_id),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json', 'application/xml']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json', 'application/xml'],
                ['application/x-www-form-urlencoded', 'application/json', 'application/xml']
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            
            if($headers['Content-Type'] === 'application/json') {
                // \stdClass has no __toString(), so we should encode it manually
                if ($httpBody instanceof \stdClass) {
                    $httpBody = \GuzzleHttp\json_encode($httpBody);
                }
                // array has no __toString(), so we should encode it manually
                if(is_array($httpBody)) {
                    $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($httpBody));
                }
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\Query::build($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\Query::build($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation webhooksMessagesDELETERequestSubscribersSubscriberIDSubscriptionsSubscriptionIDMessagesMessageIDDelete
     *
     * Removes a Webhook message for a subscription.
     *
     * @param  string $accept Accept Header (required)
     * @param  string $subscriber_id subscriber_id (required)
     * @param  string $subscription_id subscription_id (required)
     * @param  string $message_id message_id (required)
     * @param  bool $jiwa_stateful Stateful indicator (optional)
     *
     * @throws \Jiwa\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Jiwa\Model\Object
     */
    public function webhooksMessagesDELETERequestSubscribersSubscriberIDSubscriptionsSubscriptionIDMessagesMessageIDDelete($accept, $subscriber_id, $subscription_id, $message_id, $jiwa_stateful = null)
    {
        list($response) = $this->webhooksMessagesDELETERequestSubscribersSubscriberIDSubscriptionsSubscriptionIDMessagesMessageIDDeleteWithHttpInfo($accept, $subscriber_id, $subscription_id, $message_id, $jiwa_stateful);
        return $response;
    }

    /**
     * Operation webhooksMessagesDELETERequestSubscribersSubscriberIDSubscriptionsSubscriptionIDMessagesMessageIDDeleteWithHttpInfo
     *
     * Removes a Webhook message for a subscription.
     *
     * @param  string $accept Accept Header (required)
     * @param  string $subscriber_id (required)
     * @param  string $subscription_id (required)
     * @param  string $message_id (required)
     * @param  bool $jiwa_stateful Stateful indicator (optional)
     *
     * @throws \Jiwa\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Jiwa\Model\Object, HTTP status code, HTTP response headers (array of strings)
     */
    public function webhooksMessagesDELETERequestSubscribersSubscriberIDSubscriptionsSubscriptionIDMessagesMessageIDDeleteWithHttpInfo($accept, $subscriber_id, $subscription_id, $message_id, $jiwa_stateful = null)
    {
        $returnType = '\Jiwa\Model\Object';
        $request = $this->webhooksMessagesDELETERequestSubscribersSubscriberIDSubscriptionsSubscriptionIDMessagesMessageIDDeleteRequest($accept, $subscriber_id, $subscription_id, $message_id, $jiwa_stateful);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Jiwa\Model\Object',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 404:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Jiwa\Model\Object',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 204:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Jiwa\Model\Object',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation webhooksMessagesDELETERequestSubscribersSubscriberIDSubscriptionsSubscriptionIDMessagesMessageIDDeleteAsync
     *
     * Removes a Webhook message for a subscription.
     *
     * @param  string $accept Accept Header (required)
     * @param  string $subscriber_id (required)
     * @param  string $subscription_id (required)
     * @param  string $message_id (required)
     * @param  bool $jiwa_stateful Stateful indicator (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function webhooksMessagesDELETERequestSubscribersSubscriberIDSubscriptionsSubscriptionIDMessagesMessageIDDeleteAsync($accept, $subscriber_id, $subscription_id, $message_id, $jiwa_stateful = null)
    {
        return $this->webhooksMessagesDELETERequestSubscribersSubscriberIDSubscriptionsSubscriptionIDMessagesMessageIDDeleteAsyncWithHttpInfo($accept, $subscriber_id, $subscription_id, $message_id, $jiwa_stateful)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation webhooksMessagesDELETERequestSubscribersSubscriberIDSubscriptionsSubscriptionIDMessagesMessageIDDeleteAsyncWithHttpInfo
     *
     * Removes a Webhook message for a subscription.
     *
     * @param  string $accept Accept Header (required)
     * @param  string $subscriber_id (required)
     * @param  string $subscription_id (required)
     * @param  string $message_id (required)
     * @param  bool $jiwa_stateful Stateful indicator (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function webhooksMessagesDELETERequestSubscribersSubscriberIDSubscriptionsSubscriptionIDMessagesMessageIDDeleteAsyncWithHttpInfo($accept, $subscriber_id, $subscription_id, $message_id, $jiwa_stateful = null)
    {
        $returnType = '\Jiwa\Model\Object';
        $request = $this->webhooksMessagesDELETERequestSubscribersSubscriberIDSubscriptionsSubscriptionIDMessagesMessageIDDeleteRequest($accept, $subscriber_id, $subscription_id, $message_id, $jiwa_stateful);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'webhooksMessagesDELETERequestSubscribersSubscriberIDSubscriptionsSubscriptionIDMessagesMessageIDDelete'
     *
     * @param  string $accept Accept Header (required)
     * @param  string $subscriber_id (required)
     * @param  string $subscription_id (required)
     * @param  string $message_id (required)
     * @param  bool $jiwa_stateful Stateful indicator (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function webhooksMessagesDELETERequestSubscribersSubscriberIDSubscriptionsSubscriptionIDMessagesMessageIDDeleteRequest($accept, $subscriber_id, $subscription_id, $message_id, $jiwa_stateful = null)
    {
        // verify the required parameter 'accept' is set
        if ($accept === null || (is_array($accept) && count($accept) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $accept when calling webhooksMessagesDELETERequestSubscribersSubscriberIDSubscriptionsSubscriptionIDMessagesMessageIDDelete'
            );
        }
        // verify the required parameter 'subscriber_id' is set
        if ($subscriber_id === null || (is_array($subscriber_id) && count($subscriber_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $subscriber_id when calling webhooksMessagesDELETERequestSubscribersSubscriberIDSubscriptionsSubscriptionIDMessagesMessageIDDelete'
            );
        }
        // verify the required parameter 'subscription_id' is set
        if ($subscription_id === null || (is_array($subscription_id) && count($subscription_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $subscription_id when calling webhooksMessagesDELETERequestSubscribersSubscriberIDSubscriptionsSubscriptionIDMessagesMessageIDDelete'
            );
        }
        // verify the required parameter 'message_id' is set
        if ($message_id === null || (is_array($message_id) && count($message_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $message_id when calling webhooksMessagesDELETERequestSubscribersSubscriberIDSubscriptionsSubscriptionIDMessagesMessageIDDelete'
            );
        }

        $resourcePath = '/Webhooks/Subscribers/{SubscriberID}/Subscriptions/{SubscriptionID}/Messages/{MessageID}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // header params
        if ($accept !== null) {
            $headerParams['Accept'] = ObjectSerializer::toHeaderValue($accept);
        }
        // header params
        if ($jiwa_stateful !== null) {
            $headerParams['jiwa-stateful'] = ObjectSerializer::toHeaderValue($jiwa_stateful);
        }

        // path params
        if ($subscriber_id !== null) {
            $resourcePath = str_replace(
                '{' . 'SubscriberID' . '}',
                ObjectSerializer::toPathValue($subscriber_id),
                $resourcePath
            );
        }
        // path params
        if ($subscription_id !== null) {
            $resourcePath = str_replace(
                '{' . 'SubscriptionID' . '}',
                ObjectSerializer::toPathValue($subscription_id),
                $resourcePath
            );
        }
        // path params
        if ($message_id !== null) {
            $resourcePath = str_replace(
                '{' . 'MessageID' . '}',
                ObjectSerializer::toPathValue($message_id),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json', 'application/xml']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json', 'application/xml'],
                ['application/x-www-form-urlencoded', 'application/json', 'application/xml']
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            
            if($headers['Content-Type'] === 'application/json') {
                // \stdClass has no __toString(), so we should encode it manually
                if ($httpBody instanceof \stdClass) {
                    $httpBody = \GuzzleHttp\json_encode($httpBody);
                }
                // array has no __toString(), so we should encode it manually
                if(is_array($httpBody)) {
                    $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($httpBody));
                }
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\Query::build($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\Query::build($queryParams);
        return new Request(
            'DELETE',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation webhooksMessagesGETRequestSubscribersSubscriberIDMessagesGet
     *
     * Retrieves a list of all Webhook messages for a subscriber.
     *
     * @param  string $accept Accept Header (required)
     * @param  string $subscriber_id subscriber_id (required)
     * @param  bool $jiwa_stateful Stateful indicator (optional)
     * @param  int $skip skip (optional)
     * @param  int $take take (optional)
     * @param  string $order_by order_by (optional)
     * @param  string $order_by_desc order_by_desc (optional)
     * @param  string $include include (optional)
     * @param  string $fields fields (optional)
     * @param  string $meta meta (optional)
     *
     * @throws \Jiwa\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Jiwa\Model\QueryResponseVSYWebhookSubscriberMessages_
     */
    public function webhooksMessagesGETRequestSubscribersSubscriberIDMessagesGet($accept, $subscriber_id, $jiwa_stateful = null, $skip = null, $take = null, $order_by = null, $order_by_desc = null, $include = null, $fields = null, $meta = null)
    {
        list($response) = $this->webhooksMessagesGETRequestSubscribersSubscriberIDMessagesGetWithHttpInfo($accept, $subscriber_id, $jiwa_stateful, $skip, $take, $order_by, $order_by_desc, $include, $fields, $meta);
        return $response;
    }

    /**
     * Operation webhooksMessagesGETRequestSubscribersSubscriberIDMessagesGetWithHttpInfo
     *
     * Retrieves a list of all Webhook messages for a subscriber.
     *
     * @param  string $accept Accept Header (required)
     * @param  string $subscriber_id (required)
     * @param  bool $jiwa_stateful Stateful indicator (optional)
     * @param  int $skip (optional)
     * @param  int $take (optional)
     * @param  string $order_by (optional)
     * @param  string $order_by_desc (optional)
     * @param  string $include (optional)
     * @param  string $fields (optional)
     * @param  string $meta (optional)
     *
     * @throws \Jiwa\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Jiwa\Model\QueryResponseVSYWebhookSubscriberMessages_, HTTP status code, HTTP response headers (array of strings)
     */
    public function webhooksMessagesGETRequestSubscribersSubscriberIDMessagesGetWithHttpInfo($accept, $subscriber_id, $jiwa_stateful = null, $skip = null, $take = null, $order_by = null, $order_by_desc = null, $include = null, $fields = null, $meta = null)
    {
        $returnType = '\Jiwa\Model\QueryResponseVSYWebhookSubscriberMessages_';
        $request = $this->webhooksMessagesGETRequestSubscribersSubscriberIDMessagesGetRequest($accept, $subscriber_id, $jiwa_stateful, $skip, $take, $order_by, $order_by_desc, $include, $fields, $meta);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Jiwa\Model\QueryResponseVSYWebhookSubscriberMessages_',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation webhooksMessagesGETRequestSubscribersSubscriberIDMessagesGetAsync
     *
     * Retrieves a list of all Webhook messages for a subscriber.
     *
     * @param  string $accept Accept Header (required)
     * @param  string $subscriber_id (required)
     * @param  bool $jiwa_stateful Stateful indicator (optional)
     * @param  int $skip (optional)
     * @param  int $take (optional)
     * @param  string $order_by (optional)
     * @param  string $order_by_desc (optional)
     * @param  string $include (optional)
     * @param  string $fields (optional)
     * @param  string $meta (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function webhooksMessagesGETRequestSubscribersSubscriberIDMessagesGetAsync($accept, $subscriber_id, $jiwa_stateful = null, $skip = null, $take = null, $order_by = null, $order_by_desc = null, $include = null, $fields = null, $meta = null)
    {
        return $this->webhooksMessagesGETRequestSubscribersSubscriberIDMessagesGetAsyncWithHttpInfo($accept, $subscriber_id, $jiwa_stateful, $skip, $take, $order_by, $order_by_desc, $include, $fields, $meta)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation webhooksMessagesGETRequestSubscribersSubscriberIDMessagesGetAsyncWithHttpInfo
     *
     * Retrieves a list of all Webhook messages for a subscriber.
     *
     * @param  string $accept Accept Header (required)
     * @param  string $subscriber_id (required)
     * @param  bool $jiwa_stateful Stateful indicator (optional)
     * @param  int $skip (optional)
     * @param  int $take (optional)
     * @param  string $order_by (optional)
     * @param  string $order_by_desc (optional)
     * @param  string $include (optional)
     * @param  string $fields (optional)
     * @param  string $meta (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function webhooksMessagesGETRequestSubscribersSubscriberIDMessagesGetAsyncWithHttpInfo($accept, $subscriber_id, $jiwa_stateful = null, $skip = null, $take = null, $order_by = null, $order_by_desc = null, $include = null, $fields = null, $meta = null)
    {
        $returnType = '\Jiwa\Model\QueryResponseVSYWebhookSubscriberMessages_';
        $request = $this->webhooksMessagesGETRequestSubscribersSubscriberIDMessagesGetRequest($accept, $subscriber_id, $jiwa_stateful, $skip, $take, $order_by, $order_by_desc, $include, $fields, $meta);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'webhooksMessagesGETRequestSubscribersSubscriberIDMessagesGet'
     *
     * @param  string $accept Accept Header (required)
     * @param  string $subscriber_id (required)
     * @param  bool $jiwa_stateful Stateful indicator (optional)
     * @param  int $skip (optional)
     * @param  int $take (optional)
     * @param  string $order_by (optional)
     * @param  string $order_by_desc (optional)
     * @param  string $include (optional)
     * @param  string $fields (optional)
     * @param  string $meta (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function webhooksMessagesGETRequestSubscribersSubscriberIDMessagesGetRequest($accept, $subscriber_id, $jiwa_stateful = null, $skip = null, $take = null, $order_by = null, $order_by_desc = null, $include = null, $fields = null, $meta = null)
    {
        // verify the required parameter 'accept' is set
        if ($accept === null || (is_array($accept) && count($accept) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $accept when calling webhooksMessagesGETRequestSubscribersSubscriberIDMessagesGet'
            );
        }
        // verify the required parameter 'subscriber_id' is set
        if ($subscriber_id === null || (is_array($subscriber_id) && count($subscriber_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $subscriber_id when calling webhooksMessagesGETRequestSubscribersSubscriberIDMessagesGet'
            );
        }

        $resourcePath = '/Webhooks/Subscribers/{SubscriberID}/Messages';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        if ($skip !== null) {
            $queryParams['Skip'] = ObjectSerializer::toQueryValue($skip);
        }
        // query params
        if ($take !== null) {
            $queryParams['Take'] = ObjectSerializer::toQueryValue($take);
        }
        // query params
        if ($order_by !== null) {
            $queryParams['OrderBy'] = ObjectSerializer::toQueryValue($order_by);
        }
        // query params
        if ($order_by_desc !== null) {
            $queryParams['OrderByDesc'] = ObjectSerializer::toQueryValue($order_by_desc);
        }
        // query params
        if ($include !== null) {
            $queryParams['Include'] = ObjectSerializer::toQueryValue($include);
        }
        // query params
        if ($fields !== null) {
            $queryParams['Fields'] = ObjectSerializer::toQueryValue($fields);
        }
        // query params
        if ($meta !== null) {
            $queryParams['Meta'] = ObjectSerializer::toQueryValue($meta);
        }
        // header params
        if ($accept !== null) {
            $headerParams['Accept'] = ObjectSerializer::toHeaderValue($accept);
        }
        // header params
        if ($jiwa_stateful !== null) {
            $headerParams['jiwa-stateful'] = ObjectSerializer::toHeaderValue($jiwa_stateful);
        }

        // path params
        if ($subscriber_id !== null) {
            $resourcePath = str_replace(
                '{' . 'SubscriberID' . '}',
                ObjectSerializer::toPathValue($subscriber_id),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json', 'application/xml']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json', 'application/xml'],
                ['application/x-www-form-urlencoded', 'application/json', 'application/xml']
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            
            if($headers['Content-Type'] === 'application/json') {
                // \stdClass has no __toString(), so we should encode it manually
                if ($httpBody instanceof \stdClass) {
                    $httpBody = \GuzzleHttp\json_encode($httpBody);
                }
                // array has no __toString(), so we should encode it manually
                if(is_array($httpBody)) {
                    $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($httpBody));
                }
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\Query::build($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\Query::build($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation webhooksSubscribersDELETERequestSubscribersSubscriberIDDelete
     *
     * Removes a Webhook subscriber.
     *
     * @param  string $accept Accept Header (required)
     * @param  string $subscriber_id subscriber_id (required)
     * @param  bool $jiwa_stateful Stateful indicator (optional)
     *
     * @throws \Jiwa\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Jiwa\Model\Object
     */
    public function webhooksSubscribersDELETERequestSubscribersSubscriberIDDelete($accept, $subscriber_id, $jiwa_stateful = null)
    {
        list($response) = $this->webhooksSubscribersDELETERequestSubscribersSubscriberIDDeleteWithHttpInfo($accept, $subscriber_id, $jiwa_stateful);
        return $response;
    }

    /**
     * Operation webhooksSubscribersDELETERequestSubscribersSubscriberIDDeleteWithHttpInfo
     *
     * Removes a Webhook subscriber.
     *
     * @param  string $accept Accept Header (required)
     * @param  string $subscriber_id (required)
     * @param  bool $jiwa_stateful Stateful indicator (optional)
     *
     * @throws \Jiwa\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Jiwa\Model\Object, HTTP status code, HTTP response headers (array of strings)
     */
    public function webhooksSubscribersDELETERequestSubscribersSubscriberIDDeleteWithHttpInfo($accept, $subscriber_id, $jiwa_stateful = null)
    {
        $returnType = '\Jiwa\Model\Object';
        $request = $this->webhooksSubscribersDELETERequestSubscribersSubscriberIDDeleteRequest($accept, $subscriber_id, $jiwa_stateful);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Jiwa\Model\Object',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 403:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Jiwa\Model\Object',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 404:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Jiwa\Model\Object',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 204:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Jiwa\Model\Object',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 401:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Jiwa\Model\Object',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation webhooksSubscribersDELETERequestSubscribersSubscriberIDDeleteAsync
     *
     * Removes a Webhook subscriber.
     *
     * @param  string $accept Accept Header (required)
     * @param  string $subscriber_id (required)
     * @param  bool $jiwa_stateful Stateful indicator (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function webhooksSubscribersDELETERequestSubscribersSubscriberIDDeleteAsync($accept, $subscriber_id, $jiwa_stateful = null)
    {
        return $this->webhooksSubscribersDELETERequestSubscribersSubscriberIDDeleteAsyncWithHttpInfo($accept, $subscriber_id, $jiwa_stateful)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation webhooksSubscribersDELETERequestSubscribersSubscriberIDDeleteAsyncWithHttpInfo
     *
     * Removes a Webhook subscriber.
     *
     * @param  string $accept Accept Header (required)
     * @param  string $subscriber_id (required)
     * @param  bool $jiwa_stateful Stateful indicator (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function webhooksSubscribersDELETERequestSubscribersSubscriberIDDeleteAsyncWithHttpInfo($accept, $subscriber_id, $jiwa_stateful = null)
    {
        $returnType = '\Jiwa\Model\Object';
        $request = $this->webhooksSubscribersDELETERequestSubscribersSubscriberIDDeleteRequest($accept, $subscriber_id, $jiwa_stateful);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'webhooksSubscribersDELETERequestSubscribersSubscriberIDDelete'
     *
     * @param  string $accept Accept Header (required)
     * @param  string $subscriber_id (required)
     * @param  bool $jiwa_stateful Stateful indicator (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function webhooksSubscribersDELETERequestSubscribersSubscriberIDDeleteRequest($accept, $subscriber_id, $jiwa_stateful = null)
    {
        // verify the required parameter 'accept' is set
        if ($accept === null || (is_array($accept) && count($accept) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $accept when calling webhooksSubscribersDELETERequestSubscribersSubscriberIDDelete'
            );
        }
        // verify the required parameter 'subscriber_id' is set
        if ($subscriber_id === null || (is_array($subscriber_id) && count($subscriber_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $subscriber_id when calling webhooksSubscribersDELETERequestSubscribersSubscriberIDDelete'
            );
        }

        $resourcePath = '/Webhooks/Subscribers/{SubscriberID}/';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // header params
        if ($accept !== null) {
            $headerParams['Accept'] = ObjectSerializer::toHeaderValue($accept);
        }
        // header params
        if ($jiwa_stateful !== null) {
            $headerParams['jiwa-stateful'] = ObjectSerializer::toHeaderValue($jiwa_stateful);
        }

        // path params
        if ($subscriber_id !== null) {
            $resourcePath = str_replace(
                '{' . 'SubscriberID' . '}',
                ObjectSerializer::toPathValue($subscriber_id),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json', 'application/xml']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json', 'application/xml'],
                ['application/x-www-form-urlencoded', 'application/json', 'application/xml']
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            
            if($headers['Content-Type'] === 'application/json') {
                // \stdClass has no __toString(), so we should encode it manually
                if ($httpBody instanceof \stdClass) {
                    $httpBody = \GuzzleHttp\json_encode($httpBody);
                }
                // array has no __toString(), so we should encode it manually
                if(is_array($httpBody)) {
                    $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($httpBody));
                }
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\Query::build($formParams);
            }
        }

        // this endpoint requires HTTP basic authentication
        if ($this->config->getUsername() !== null || $this->config->getPassword() !== null) {
            $headers['Authorization'] = 'Basic ' . base64_encode($this->config->getUsername() . ":" . $this->config->getPassword());
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\Query::build($queryParams);
        return new Request(
            'DELETE',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation webhooksSubscribersGETManyRequestSubscribersGet
     *
     * Retrieves a list of Webhook subscribers.
     *
     * @param  string $accept Accept Header (required)
     * @param  bool $jiwa_stateful Stateful indicator (optional)
     * @param  int $skip skip (optional)
     * @param  int $take take (optional)
     * @param  string $order_by order_by (optional)
     * @param  string $order_by_desc order_by_desc (optional)
     * @param  string $include include (optional)
     * @param  string $fields fields (optional)
     * @param  string $meta meta (optional)
     *
     * @throws \Jiwa\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Jiwa\Model\QueryResponseSYWebhookSubscriber_
     */
    public function webhooksSubscribersGETManyRequestSubscribersGet($accept, $jiwa_stateful = null, $skip = null, $take = null, $order_by = null, $order_by_desc = null, $include = null, $fields = null, $meta = null)
    {
        list($response) = $this->webhooksSubscribersGETManyRequestSubscribersGetWithHttpInfo($accept, $jiwa_stateful, $skip, $take, $order_by, $order_by_desc, $include, $fields, $meta);
        return $response;
    }

    /**
     * Operation webhooksSubscribersGETManyRequestSubscribersGetWithHttpInfo
     *
     * Retrieves a list of Webhook subscribers.
     *
     * @param  string $accept Accept Header (required)
     * @param  bool $jiwa_stateful Stateful indicator (optional)
     * @param  int $skip (optional)
     * @param  int $take (optional)
     * @param  string $order_by (optional)
     * @param  string $order_by_desc (optional)
     * @param  string $include (optional)
     * @param  string $fields (optional)
     * @param  string $meta (optional)
     *
     * @throws \Jiwa\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Jiwa\Model\QueryResponseSYWebhookSubscriber_, HTTP status code, HTTP response headers (array of strings)
     */
    public function webhooksSubscribersGETManyRequestSubscribersGetWithHttpInfo($accept, $jiwa_stateful = null, $skip = null, $take = null, $order_by = null, $order_by_desc = null, $include = null, $fields = null, $meta = null)
    {
        $returnType = '\Jiwa\Model\QueryResponseSYWebhookSubscriber_';
        $request = $this->webhooksSubscribersGETManyRequestSubscribersGetRequest($accept, $jiwa_stateful, $skip, $take, $order_by, $order_by_desc, $include, $fields, $meta);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Jiwa\Model\QueryResponseSYWebhookSubscriber_',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 401:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Jiwa\Model\QueryResponseSYWebhookSubscriber_',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 403:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Jiwa\Model\QueryResponseSYWebhookSubscriber_',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation webhooksSubscribersGETManyRequestSubscribersGetAsync
     *
     * Retrieves a list of Webhook subscribers.
     *
     * @param  string $accept Accept Header (required)
     * @param  bool $jiwa_stateful Stateful indicator (optional)
     * @param  int $skip (optional)
     * @param  int $take (optional)
     * @param  string $order_by (optional)
     * @param  string $order_by_desc (optional)
     * @param  string $include (optional)
     * @param  string $fields (optional)
     * @param  string $meta (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function webhooksSubscribersGETManyRequestSubscribersGetAsync($accept, $jiwa_stateful = null, $skip = null, $take = null, $order_by = null, $order_by_desc = null, $include = null, $fields = null, $meta = null)
    {
        return $this->webhooksSubscribersGETManyRequestSubscribersGetAsyncWithHttpInfo($accept, $jiwa_stateful, $skip, $take, $order_by, $order_by_desc, $include, $fields, $meta)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation webhooksSubscribersGETManyRequestSubscribersGetAsyncWithHttpInfo
     *
     * Retrieves a list of Webhook subscribers.
     *
     * @param  string $accept Accept Header (required)
     * @param  bool $jiwa_stateful Stateful indicator (optional)
     * @param  int $skip (optional)
     * @param  int $take (optional)
     * @param  string $order_by (optional)
     * @param  string $order_by_desc (optional)
     * @param  string $include (optional)
     * @param  string $fields (optional)
     * @param  string $meta (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function webhooksSubscribersGETManyRequestSubscribersGetAsyncWithHttpInfo($accept, $jiwa_stateful = null, $skip = null, $take = null, $order_by = null, $order_by_desc = null, $include = null, $fields = null, $meta = null)
    {
        $returnType = '\Jiwa\Model\QueryResponseSYWebhookSubscriber_';
        $request = $this->webhooksSubscribersGETManyRequestSubscribersGetRequest($accept, $jiwa_stateful, $skip, $take, $order_by, $order_by_desc, $include, $fields, $meta);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'webhooksSubscribersGETManyRequestSubscribersGet'
     *
     * @param  string $accept Accept Header (required)
     * @param  bool $jiwa_stateful Stateful indicator (optional)
     * @param  int $skip (optional)
     * @param  int $take (optional)
     * @param  string $order_by (optional)
     * @param  string $order_by_desc (optional)
     * @param  string $include (optional)
     * @param  string $fields (optional)
     * @param  string $meta (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function webhooksSubscribersGETManyRequestSubscribersGetRequest($accept, $jiwa_stateful = null, $skip = null, $take = null, $order_by = null, $order_by_desc = null, $include = null, $fields = null, $meta = null)
    {
        // verify the required parameter 'accept' is set
        if ($accept === null || (is_array($accept) && count($accept) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $accept when calling webhooksSubscribersGETManyRequestSubscribersGet'
            );
        }

        $resourcePath = '/Webhooks/Subscribers/';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        if ($skip !== null) {
            $queryParams['Skip'] = ObjectSerializer::toQueryValue($skip);
        }
        // query params
        if ($take !== null) {
            $queryParams['Take'] = ObjectSerializer::toQueryValue($take);
        }
        // query params
        if ($order_by !== null) {
            $queryParams['OrderBy'] = ObjectSerializer::toQueryValue($order_by);
        }
        // query params
        if ($order_by_desc !== null) {
            $queryParams['OrderByDesc'] = ObjectSerializer::toQueryValue($order_by_desc);
        }
        // query params
        if ($include !== null) {
            $queryParams['Include'] = ObjectSerializer::toQueryValue($include);
        }
        // query params
        if ($fields !== null) {
            $queryParams['Fields'] = ObjectSerializer::toQueryValue($fields);
        }
        // query params
        if ($meta !== null) {
            $queryParams['Meta'] = ObjectSerializer::toQueryValue($meta);
        }
        // header params
        if ($accept !== null) {
            $headerParams['Accept'] = ObjectSerializer::toHeaderValue($accept);
        }
        // header params
        if ($jiwa_stateful !== null) {
            $headerParams['jiwa-stateful'] = ObjectSerializer::toHeaderValue($jiwa_stateful);
        }


        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json', 'application/xml']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json', 'application/xml'],
                ['application/x-www-form-urlencoded', 'application/json', 'application/xml']
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            
            if($headers['Content-Type'] === 'application/json') {
                // \stdClass has no __toString(), so we should encode it manually
                if ($httpBody instanceof \stdClass) {
                    $httpBody = \GuzzleHttp\json_encode($httpBody);
                }
                // array has no __toString(), so we should encode it manually
                if(is_array($httpBody)) {
                    $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($httpBody));
                }
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\Query::build($formParams);
            }
        }

        // this endpoint requires HTTP basic authentication
        if ($this->config->getUsername() !== null || $this->config->getPassword() !== null) {
            $headers['Authorization'] = 'Basic ' . base64_encode($this->config->getUsername() . ":" . $this->config->getPassword());
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\Query::build($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation webhooksSubscribersGETRequestSubscribersSubscriberIDGet
     *
     * Retrieves a Webhook subscriber.
     *
     * @param  string $accept Accept Header (required)
     * @param  string $subscriber_id subscriber_id (required)
     * @param  bool $jiwa_stateful Stateful indicator (optional)
     *
     * @throws \Jiwa\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Jiwa\Model\WebhookSubscriber
     */
    public function webhooksSubscribersGETRequestSubscribersSubscriberIDGet($accept, $subscriber_id, $jiwa_stateful = null)
    {
        list($response) = $this->webhooksSubscribersGETRequestSubscribersSubscriberIDGetWithHttpInfo($accept, $subscriber_id, $jiwa_stateful);
        return $response;
    }

    /**
     * Operation webhooksSubscribersGETRequestSubscribersSubscriberIDGetWithHttpInfo
     *
     * Retrieves a Webhook subscriber.
     *
     * @param  string $accept Accept Header (required)
     * @param  string $subscriber_id (required)
     * @param  bool $jiwa_stateful Stateful indicator (optional)
     *
     * @throws \Jiwa\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Jiwa\Model\WebhookSubscriber, HTTP status code, HTTP response headers (array of strings)
     */
    public function webhooksSubscribersGETRequestSubscribersSubscriberIDGetWithHttpInfo($accept, $subscriber_id, $jiwa_stateful = null)
    {
        $returnType = '\Jiwa\Model\WebhookSubscriber';
        $request = $this->webhooksSubscribersGETRequestSubscribersSubscriberIDGetRequest($accept, $subscriber_id, $jiwa_stateful);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Jiwa\Model\WebhookSubscriber',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 403:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Jiwa\Model\WebhookSubscriber',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 401:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Jiwa\Model\WebhookSubscriber',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation webhooksSubscribersGETRequestSubscribersSubscriberIDGetAsync
     *
     * Retrieves a Webhook subscriber.
     *
     * @param  string $accept Accept Header (required)
     * @param  string $subscriber_id (required)
     * @param  bool $jiwa_stateful Stateful indicator (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function webhooksSubscribersGETRequestSubscribersSubscriberIDGetAsync($accept, $subscriber_id, $jiwa_stateful = null)
    {
        return $this->webhooksSubscribersGETRequestSubscribersSubscriberIDGetAsyncWithHttpInfo($accept, $subscriber_id, $jiwa_stateful)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation webhooksSubscribersGETRequestSubscribersSubscriberIDGetAsyncWithHttpInfo
     *
     * Retrieves a Webhook subscriber.
     *
     * @param  string $accept Accept Header (required)
     * @param  string $subscriber_id (required)
     * @param  bool $jiwa_stateful Stateful indicator (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function webhooksSubscribersGETRequestSubscribersSubscriberIDGetAsyncWithHttpInfo($accept, $subscriber_id, $jiwa_stateful = null)
    {
        $returnType = '\Jiwa\Model\WebhookSubscriber';
        $request = $this->webhooksSubscribersGETRequestSubscribersSubscriberIDGetRequest($accept, $subscriber_id, $jiwa_stateful);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'webhooksSubscribersGETRequestSubscribersSubscriberIDGet'
     *
     * @param  string $accept Accept Header (required)
     * @param  string $subscriber_id (required)
     * @param  bool $jiwa_stateful Stateful indicator (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function webhooksSubscribersGETRequestSubscribersSubscriberIDGetRequest($accept, $subscriber_id, $jiwa_stateful = null)
    {
        // verify the required parameter 'accept' is set
        if ($accept === null || (is_array($accept) && count($accept) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $accept when calling webhooksSubscribersGETRequestSubscribersSubscriberIDGet'
            );
        }
        // verify the required parameter 'subscriber_id' is set
        if ($subscriber_id === null || (is_array($subscriber_id) && count($subscriber_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $subscriber_id when calling webhooksSubscribersGETRequestSubscribersSubscriberIDGet'
            );
        }

        $resourcePath = '/Webhooks/Subscribers/{SubscriberID}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // header params
        if ($accept !== null) {
            $headerParams['Accept'] = ObjectSerializer::toHeaderValue($accept);
        }
        // header params
        if ($jiwa_stateful !== null) {
            $headerParams['jiwa-stateful'] = ObjectSerializer::toHeaderValue($jiwa_stateful);
        }

        // path params
        if ($subscriber_id !== null) {
            $resourcePath = str_replace(
                '{' . 'SubscriberID' . '}',
                ObjectSerializer::toPathValue($subscriber_id),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json', 'application/xml']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json', 'application/xml'],
                ['application/x-www-form-urlencoded', 'application/json', 'application/xml']
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            
            if($headers['Content-Type'] === 'application/json') {
                // \stdClass has no __toString(), so we should encode it manually
                if ($httpBody instanceof \stdClass) {
                    $httpBody = \GuzzleHttp\json_encode($httpBody);
                }
                // array has no __toString(), so we should encode it manually
                if(is_array($httpBody)) {
                    $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($httpBody));
                }
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\Query::build($formParams);
            }
        }

        // this endpoint requires HTTP basic authentication
        if ($this->config->getUsername() !== null || $this->config->getPassword() !== null) {
            $headers['Authorization'] = 'Basic ' . base64_encode($this->config->getUsername() . ":" . $this->config->getPassword());
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\Query::build($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation webhooksSubscribersPATCHRequestSubscribersSubscriberIDUpdate
     *
     * Updates a Webhook subscriber.
     *
     * @param  string $accept Accept Header (required)
     * @param  string $subscriber_id subscriber_id (required)
     * @param  bool $jiwa_stateful Stateful indicator (optional)
     * @param  string $name name (optional)
     * @param  bool $is_enabled is_enabled (optional)
     * @param  int $item_no item_no (optional)
     * @param  \Jiwa\Model\WebhooksSubscribersPATCHRequest $body body (optional)
     *
     * @throws \Jiwa\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Jiwa\Model\SYWebhookSubscriber
     */
    public function webhooksSubscribersPATCHRequestSubscribersSubscriberIDUpdate($accept, $subscriber_id, $jiwa_stateful = null, $name = null, $is_enabled = null, $item_no = null, $body = null)
    {
        list($response) = $this->webhooksSubscribersPATCHRequestSubscribersSubscriberIDUpdateWithHttpInfo($accept, $subscriber_id, $jiwa_stateful, $name, $is_enabled, $item_no, $body);
        return $response;
    }

    /**
     * Operation webhooksSubscribersPATCHRequestSubscribersSubscriberIDUpdateWithHttpInfo
     *
     * Updates a Webhook subscriber.
     *
     * @param  string $accept Accept Header (required)
     * @param  string $subscriber_id (required)
     * @param  bool $jiwa_stateful Stateful indicator (optional)
     * @param  string $name (optional)
     * @param  bool $is_enabled (optional)
     * @param  int $item_no (optional)
     * @param  \Jiwa\Model\WebhooksSubscribersPATCHRequest $body (optional)
     *
     * @throws \Jiwa\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Jiwa\Model\SYWebhookSubscriber, HTTP status code, HTTP response headers (array of strings)
     */
    public function webhooksSubscribersPATCHRequestSubscribersSubscriberIDUpdateWithHttpInfo($accept, $subscriber_id, $jiwa_stateful = null, $name = null, $is_enabled = null, $item_no = null, $body = null)
    {
        $returnType = '\Jiwa\Model\SYWebhookSubscriber';
        $request = $this->webhooksSubscribersPATCHRequestSubscribersSubscriberIDUpdateRequest($accept, $subscriber_id, $jiwa_stateful, $name, $is_enabled, $item_no, $body);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Jiwa\Model\SYWebhookSubscriber',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 404:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Jiwa\Model\SYWebhookSubscriber',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 401:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Jiwa\Model\SYWebhookSubscriber',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 403:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Jiwa\Model\SYWebhookSubscriber',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation webhooksSubscribersPATCHRequestSubscribersSubscriberIDUpdateAsync
     *
     * Updates a Webhook subscriber.
     *
     * @param  string $accept Accept Header (required)
     * @param  string $subscriber_id (required)
     * @param  bool $jiwa_stateful Stateful indicator (optional)
     * @param  string $name (optional)
     * @param  bool $is_enabled (optional)
     * @param  int $item_no (optional)
     * @param  \Jiwa\Model\WebhooksSubscribersPATCHRequest $body (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function webhooksSubscribersPATCHRequestSubscribersSubscriberIDUpdateAsync($accept, $subscriber_id, $jiwa_stateful = null, $name = null, $is_enabled = null, $item_no = null, $body = null)
    {
        return $this->webhooksSubscribersPATCHRequestSubscribersSubscriberIDUpdateAsyncWithHttpInfo($accept, $subscriber_id, $jiwa_stateful, $name, $is_enabled, $item_no, $body)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation webhooksSubscribersPATCHRequestSubscribersSubscriberIDUpdateAsyncWithHttpInfo
     *
     * Updates a Webhook subscriber.
     *
     * @param  string $accept Accept Header (required)
     * @param  string $subscriber_id (required)
     * @param  bool $jiwa_stateful Stateful indicator (optional)
     * @param  string $name (optional)
     * @param  bool $is_enabled (optional)
     * @param  int $item_no (optional)
     * @param  \Jiwa\Model\WebhooksSubscribersPATCHRequest $body (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function webhooksSubscribersPATCHRequestSubscribersSubscriberIDUpdateAsyncWithHttpInfo($accept, $subscriber_id, $jiwa_stateful = null, $name = null, $is_enabled = null, $item_no = null, $body = null)
    {
        $returnType = '\Jiwa\Model\SYWebhookSubscriber';
        $request = $this->webhooksSubscribersPATCHRequestSubscribersSubscriberIDUpdateRequest($accept, $subscriber_id, $jiwa_stateful, $name, $is_enabled, $item_no, $body);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'webhooksSubscribersPATCHRequestSubscribersSubscriberIDUpdate'
     *
     * @param  string $accept Accept Header (required)
     * @param  string $subscriber_id (required)
     * @param  bool $jiwa_stateful Stateful indicator (optional)
     * @param  string $name (optional)
     * @param  bool $is_enabled (optional)
     * @param  int $item_no (optional)
     * @param  \Jiwa\Model\WebhooksSubscribersPATCHRequest $body (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function webhooksSubscribersPATCHRequestSubscribersSubscriberIDUpdateRequest($accept, $subscriber_id, $jiwa_stateful = null, $name = null, $is_enabled = null, $item_no = null, $body = null)
    {
        // verify the required parameter 'accept' is set
        if ($accept === null || (is_array($accept) && count($accept) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $accept when calling webhooksSubscribersPATCHRequestSubscribersSubscriberIDUpdate'
            );
        }
        // verify the required parameter 'subscriber_id' is set
        if ($subscriber_id === null || (is_array($subscriber_id) && count($subscriber_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $subscriber_id when calling webhooksSubscribersPATCHRequestSubscribersSubscriberIDUpdate'
            );
        }

        $resourcePath = '/Webhooks/Subscribers/{SubscriberID}/';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        if ($name !== null) {
            $queryParams['Name'] = ObjectSerializer::toQueryValue($name);
        }
        // query params
        if ($is_enabled !== null) {
            $queryParams['IsEnabled'] = ObjectSerializer::toQueryValue($is_enabled);
        }
        // query params
        if ($item_no !== null) {
            $queryParams['ItemNo'] = ObjectSerializer::toQueryValue($item_no);
        }
        // header params
        if ($accept !== null) {
            $headerParams['Accept'] = ObjectSerializer::toHeaderValue($accept);
        }
        // header params
        if ($jiwa_stateful !== null) {
            $headerParams['jiwa-stateful'] = ObjectSerializer::toHeaderValue($jiwa_stateful);
        }

        // path params
        if ($subscriber_id !== null) {
            $resourcePath = str_replace(
                '{' . 'SubscriberID' . '}',
                ObjectSerializer::toPathValue($subscriber_id),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;
        if (isset($body)) {
            $_tempBody = $body;
        }

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json', 'application/xml']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json', 'application/xml'],
                ['application/x-www-form-urlencoded', 'application/json', 'application/xml']
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            
            if($headers['Content-Type'] === 'application/json') {
                // \stdClass has no __toString(), so we should encode it manually
                if ($httpBody instanceof \stdClass) {
                    $httpBody = \GuzzleHttp\json_encode($httpBody);
                }
                // array has no __toString(), so we should encode it manually
                if(is_array($httpBody)) {
                    $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($httpBody));
                }
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\Query::build($formParams);
            }
        }

        // this endpoint requires HTTP basic authentication
        if ($this->config->getUsername() !== null || $this->config->getPassword() !== null) {
            $headers['Authorization'] = 'Basic ' . base64_encode($this->config->getUsername() . ":" . $this->config->getPassword());
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\Query::build($queryParams);
        return new Request(
            'PATCH',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation webhooksSubscribersPOSTRequestSubscribersPost
     *
     * Adds a Webhook subscriber.
     *
     * @param  string $accept Accept Header (required)
     * @param  bool $jiwa_stateful Stateful indicator (optional)
     * @param  string $name name (optional)
     * @param  bool $is_enabled is_enabled (optional)
     * @param  \Jiwa\Model\WebhooksSubscribersPOSTRequest $body body (optional)
     *
     * @throws \Jiwa\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Jiwa\Model\SYWebhookSubscriber
     */
    public function webhooksSubscribersPOSTRequestSubscribersPost($accept, $jiwa_stateful = null, $name = null, $is_enabled = null, $body = null)
    {
        list($response) = $this->webhooksSubscribersPOSTRequestSubscribersPostWithHttpInfo($accept, $jiwa_stateful, $name, $is_enabled, $body);
        return $response;
    }

    /**
     * Operation webhooksSubscribersPOSTRequestSubscribersPostWithHttpInfo
     *
     * Adds a Webhook subscriber.
     *
     * @param  string $accept Accept Header (required)
     * @param  bool $jiwa_stateful Stateful indicator (optional)
     * @param  string $name (optional)
     * @param  bool $is_enabled (optional)
     * @param  \Jiwa\Model\WebhooksSubscribersPOSTRequest $body (optional)
     *
     * @throws \Jiwa\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Jiwa\Model\SYWebhookSubscriber, HTTP status code, HTTP response headers (array of strings)
     */
    public function webhooksSubscribersPOSTRequestSubscribersPostWithHttpInfo($accept, $jiwa_stateful = null, $name = null, $is_enabled = null, $body = null)
    {
        $returnType = '\Jiwa\Model\SYWebhookSubscriber';
        $request = $this->webhooksSubscribersPOSTRequestSubscribersPostRequest($accept, $jiwa_stateful, $name, $is_enabled, $body);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Jiwa\Model\SYWebhookSubscriber',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 201:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Jiwa\Model\SYWebhookSubscriber',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 401:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Jiwa\Model\SYWebhookSubscriber',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 403:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Jiwa\Model\SYWebhookSubscriber',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation webhooksSubscribersPOSTRequestSubscribersPostAsync
     *
     * Adds a Webhook subscriber.
     *
     * @param  string $accept Accept Header (required)
     * @param  bool $jiwa_stateful Stateful indicator (optional)
     * @param  string $name (optional)
     * @param  bool $is_enabled (optional)
     * @param  \Jiwa\Model\WebhooksSubscribersPOSTRequest $body (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function webhooksSubscribersPOSTRequestSubscribersPostAsync($accept, $jiwa_stateful = null, $name = null, $is_enabled = null, $body = null)
    {
        return $this->webhooksSubscribersPOSTRequestSubscribersPostAsyncWithHttpInfo($accept, $jiwa_stateful, $name, $is_enabled, $body)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation webhooksSubscribersPOSTRequestSubscribersPostAsyncWithHttpInfo
     *
     * Adds a Webhook subscriber.
     *
     * @param  string $accept Accept Header (required)
     * @param  bool $jiwa_stateful Stateful indicator (optional)
     * @param  string $name (optional)
     * @param  bool $is_enabled (optional)
     * @param  \Jiwa\Model\WebhooksSubscribersPOSTRequest $body (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function webhooksSubscribersPOSTRequestSubscribersPostAsyncWithHttpInfo($accept, $jiwa_stateful = null, $name = null, $is_enabled = null, $body = null)
    {
        $returnType = '\Jiwa\Model\SYWebhookSubscriber';
        $request = $this->webhooksSubscribersPOSTRequestSubscribersPostRequest($accept, $jiwa_stateful, $name, $is_enabled, $body);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'webhooksSubscribersPOSTRequestSubscribersPost'
     *
     * @param  string $accept Accept Header (required)
     * @param  bool $jiwa_stateful Stateful indicator (optional)
     * @param  string $name (optional)
     * @param  bool $is_enabled (optional)
     * @param  \Jiwa\Model\WebhooksSubscribersPOSTRequest $body (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function webhooksSubscribersPOSTRequestSubscribersPostRequest($accept, $jiwa_stateful = null, $name = null, $is_enabled = null, $body = null)
    {
        // verify the required parameter 'accept' is set
        if ($accept === null || (is_array($accept) && count($accept) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $accept when calling webhooksSubscribersPOSTRequestSubscribersPost'
            );
        }

        $resourcePath = '/Webhooks/Subscribers/';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        if ($name !== null) {
            $queryParams['Name'] = ObjectSerializer::toQueryValue($name);
        }
        // query params
        if ($is_enabled !== null) {
            $queryParams['IsEnabled'] = ObjectSerializer::toQueryValue($is_enabled);
        }
        // header params
        if ($accept !== null) {
            $headerParams['Accept'] = ObjectSerializer::toHeaderValue($accept);
        }
        // header params
        if ($jiwa_stateful !== null) {
            $headerParams['jiwa-stateful'] = ObjectSerializer::toHeaderValue($jiwa_stateful);
        }


        // body params
        $_tempBody = null;
        if (isset($body)) {
            $_tempBody = $body;
        }

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json', 'application/xml']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json', 'application/xml'],
                ['application/x-www-form-urlencoded', 'application/json', 'application/xml']
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            
            if($headers['Content-Type'] === 'application/json') {
                // \stdClass has no __toString(), so we should encode it manually
                if ($httpBody instanceof \stdClass) {
                    $httpBody = \GuzzleHttp\json_encode($httpBody);
                }
                // array has no __toString(), so we should encode it manually
                if(is_array($httpBody)) {
                    $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($httpBody));
                }
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\Query::build($formParams);
            }
        }

        // this endpoint requires HTTP basic authentication
        if ($this->config->getUsername() !== null || $this->config->getPassword() !== null) {
            $headers['Authorization'] = 'Basic ' . base64_encode($this->config->getUsername() . ":" . $this->config->getPassword());
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\Query::build($queryParams);
        return new Request(
            'POST',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation webhooksSubscriptionsDELETERequestSubscribersSubscriberIDSubscriptionsSubscriptionIDDelete
     *
     * Removes a Webhook subscription for a subscriber.
     *
     * @param  string $accept Accept Header (required)
     * @param  string $subscriber_id subscriber_id (required)
     * @param  string $subscription_id subscription_id (required)
     * @param  bool $jiwa_stateful Stateful indicator (optional)
     *
     * @throws \Jiwa\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Jiwa\Model\Object
     */
    public function webhooksSubscriptionsDELETERequestSubscribersSubscriberIDSubscriptionsSubscriptionIDDelete($accept, $subscriber_id, $subscription_id, $jiwa_stateful = null)
    {
        list($response) = $this->webhooksSubscriptionsDELETERequestSubscribersSubscriberIDSubscriptionsSubscriptionIDDeleteWithHttpInfo($accept, $subscriber_id, $subscription_id, $jiwa_stateful);
        return $response;
    }

    /**
     * Operation webhooksSubscriptionsDELETERequestSubscribersSubscriberIDSubscriptionsSubscriptionIDDeleteWithHttpInfo
     *
     * Removes a Webhook subscription for a subscriber.
     *
     * @param  string $accept Accept Header (required)
     * @param  string $subscriber_id (required)
     * @param  string $subscription_id (required)
     * @param  bool $jiwa_stateful Stateful indicator (optional)
     *
     * @throws \Jiwa\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Jiwa\Model\Object, HTTP status code, HTTP response headers (array of strings)
     */
    public function webhooksSubscriptionsDELETERequestSubscribersSubscriberIDSubscriptionsSubscriptionIDDeleteWithHttpInfo($accept, $subscriber_id, $subscription_id, $jiwa_stateful = null)
    {
        $returnType = '\Jiwa\Model\Object';
        $request = $this->webhooksSubscriptionsDELETERequestSubscribersSubscriberIDSubscriptionsSubscriptionIDDeleteRequest($accept, $subscriber_id, $subscription_id, $jiwa_stateful);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Jiwa\Model\Object',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 204:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Jiwa\Model\Object',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 404:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Jiwa\Model\Object',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation webhooksSubscriptionsDELETERequestSubscribersSubscriberIDSubscriptionsSubscriptionIDDeleteAsync
     *
     * Removes a Webhook subscription for a subscriber.
     *
     * @param  string $accept Accept Header (required)
     * @param  string $subscriber_id (required)
     * @param  string $subscription_id (required)
     * @param  bool $jiwa_stateful Stateful indicator (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function webhooksSubscriptionsDELETERequestSubscribersSubscriberIDSubscriptionsSubscriptionIDDeleteAsync($accept, $subscriber_id, $subscription_id, $jiwa_stateful = null)
    {
        return $this->webhooksSubscriptionsDELETERequestSubscribersSubscriberIDSubscriptionsSubscriptionIDDeleteAsyncWithHttpInfo($accept, $subscriber_id, $subscription_id, $jiwa_stateful)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation webhooksSubscriptionsDELETERequestSubscribersSubscriberIDSubscriptionsSubscriptionIDDeleteAsyncWithHttpInfo
     *
     * Removes a Webhook subscription for a subscriber.
     *
     * @param  string $accept Accept Header (required)
     * @param  string $subscriber_id (required)
     * @param  string $subscription_id (required)
     * @param  bool $jiwa_stateful Stateful indicator (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function webhooksSubscriptionsDELETERequestSubscribersSubscriberIDSubscriptionsSubscriptionIDDeleteAsyncWithHttpInfo($accept, $subscriber_id, $subscription_id, $jiwa_stateful = null)
    {
        $returnType = '\Jiwa\Model\Object';
        $request = $this->webhooksSubscriptionsDELETERequestSubscribersSubscriberIDSubscriptionsSubscriptionIDDeleteRequest($accept, $subscriber_id, $subscription_id, $jiwa_stateful);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'webhooksSubscriptionsDELETERequestSubscribersSubscriberIDSubscriptionsSubscriptionIDDelete'
     *
     * @param  string $accept Accept Header (required)
     * @param  string $subscriber_id (required)
     * @param  string $subscription_id (required)
     * @param  bool $jiwa_stateful Stateful indicator (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function webhooksSubscriptionsDELETERequestSubscribersSubscriberIDSubscriptionsSubscriptionIDDeleteRequest($accept, $subscriber_id, $subscription_id, $jiwa_stateful = null)
    {
        // verify the required parameter 'accept' is set
        if ($accept === null || (is_array($accept) && count($accept) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $accept when calling webhooksSubscriptionsDELETERequestSubscribersSubscriberIDSubscriptionsSubscriptionIDDelete'
            );
        }
        // verify the required parameter 'subscriber_id' is set
        if ($subscriber_id === null || (is_array($subscriber_id) && count($subscriber_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $subscriber_id when calling webhooksSubscriptionsDELETERequestSubscribersSubscriberIDSubscriptionsSubscriptionIDDelete'
            );
        }
        // verify the required parameter 'subscription_id' is set
        if ($subscription_id === null || (is_array($subscription_id) && count($subscription_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $subscription_id when calling webhooksSubscriptionsDELETERequestSubscribersSubscriberIDSubscriptionsSubscriptionIDDelete'
            );
        }

        $resourcePath = '/Webhooks/Subscribers/{SubscriberID}/Subscriptions/{SubscriptionID}/';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // header params
        if ($accept !== null) {
            $headerParams['Accept'] = ObjectSerializer::toHeaderValue($accept);
        }
        // header params
        if ($jiwa_stateful !== null) {
            $headerParams['jiwa-stateful'] = ObjectSerializer::toHeaderValue($jiwa_stateful);
        }

        // path params
        if ($subscriber_id !== null) {
            $resourcePath = str_replace(
                '{' . 'SubscriberID' . '}',
                ObjectSerializer::toPathValue($subscriber_id),
                $resourcePath
            );
        }
        // path params
        if ($subscription_id !== null) {
            $resourcePath = str_replace(
                '{' . 'SubscriptionID' . '}',
                ObjectSerializer::toPathValue($subscription_id),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json', 'application/xml']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json', 'application/xml'],
                ['application/x-www-form-urlencoded', 'application/json', 'application/xml']
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            
            if($headers['Content-Type'] === 'application/json') {
                // \stdClass has no __toString(), so we should encode it manually
                if ($httpBody instanceof \stdClass) {
                    $httpBody = \GuzzleHttp\json_encode($httpBody);
                }
                // array has no __toString(), so we should encode it manually
                if(is_array($httpBody)) {
                    $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($httpBody));
                }
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\Query::build($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\Query::build($queryParams);
        return new Request(
            'DELETE',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation webhooksSubscriptionsGETRequestSubscribersSubscriberIDSubscriptionsGet
     *
     * Retrieves a list of all Webhook subscriptions for a subscriber.
     *
     * @param  string $accept Accept Header (required)
     * @param  string $subscriber_id subscriber_id (required)
     * @param  bool $jiwa_stateful Stateful indicator (optional)
     *
     * @throws \Jiwa\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Jiwa\Model\SYWebhookSubscription[]
     */
    public function webhooksSubscriptionsGETRequestSubscribersSubscriberIDSubscriptionsGet($accept, $subscriber_id, $jiwa_stateful = null)
    {
        list($response) = $this->webhooksSubscriptionsGETRequestSubscribersSubscriberIDSubscriptionsGetWithHttpInfo($accept, $subscriber_id, $jiwa_stateful);
        return $response;
    }

    /**
     * Operation webhooksSubscriptionsGETRequestSubscribersSubscriberIDSubscriptionsGetWithHttpInfo
     *
     * Retrieves a list of all Webhook subscriptions for a subscriber.
     *
     * @param  string $accept Accept Header (required)
     * @param  string $subscriber_id (required)
     * @param  bool $jiwa_stateful Stateful indicator (optional)
     *
     * @throws \Jiwa\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Jiwa\Model\SYWebhookSubscription[], HTTP status code, HTTP response headers (array of strings)
     */
    public function webhooksSubscriptionsGETRequestSubscribersSubscriberIDSubscriptionsGetWithHttpInfo($accept, $subscriber_id, $jiwa_stateful = null)
    {
        $returnType = '\Jiwa\Model\SYWebhookSubscription[]';
        $request = $this->webhooksSubscriptionsGETRequestSubscribersSubscriberIDSubscriptionsGetRequest($accept, $subscriber_id, $jiwa_stateful);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Jiwa\Model\SYWebhookSubscription[]',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 404:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Jiwa\Model\SYWebhookSubscription[]',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation webhooksSubscriptionsGETRequestSubscribersSubscriberIDSubscriptionsGetAsync
     *
     * Retrieves a list of all Webhook subscriptions for a subscriber.
     *
     * @param  string $accept Accept Header (required)
     * @param  string $subscriber_id (required)
     * @param  bool $jiwa_stateful Stateful indicator (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function webhooksSubscriptionsGETRequestSubscribersSubscriberIDSubscriptionsGetAsync($accept, $subscriber_id, $jiwa_stateful = null)
    {
        return $this->webhooksSubscriptionsGETRequestSubscribersSubscriberIDSubscriptionsGetAsyncWithHttpInfo($accept, $subscriber_id, $jiwa_stateful)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation webhooksSubscriptionsGETRequestSubscribersSubscriberIDSubscriptionsGetAsyncWithHttpInfo
     *
     * Retrieves a list of all Webhook subscriptions for a subscriber.
     *
     * @param  string $accept Accept Header (required)
     * @param  string $subscriber_id (required)
     * @param  bool $jiwa_stateful Stateful indicator (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function webhooksSubscriptionsGETRequestSubscribersSubscriberIDSubscriptionsGetAsyncWithHttpInfo($accept, $subscriber_id, $jiwa_stateful = null)
    {
        $returnType = '\Jiwa\Model\SYWebhookSubscription[]';
        $request = $this->webhooksSubscriptionsGETRequestSubscribersSubscriberIDSubscriptionsGetRequest($accept, $subscriber_id, $jiwa_stateful);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'webhooksSubscriptionsGETRequestSubscribersSubscriberIDSubscriptionsGet'
     *
     * @param  string $accept Accept Header (required)
     * @param  string $subscriber_id (required)
     * @param  bool $jiwa_stateful Stateful indicator (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function webhooksSubscriptionsGETRequestSubscribersSubscriberIDSubscriptionsGetRequest($accept, $subscriber_id, $jiwa_stateful = null)
    {
        // verify the required parameter 'accept' is set
        if ($accept === null || (is_array($accept) && count($accept) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $accept when calling webhooksSubscriptionsGETRequestSubscribersSubscriberIDSubscriptionsGet'
            );
        }
        // verify the required parameter 'subscriber_id' is set
        if ($subscriber_id === null || (is_array($subscriber_id) && count($subscriber_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $subscriber_id when calling webhooksSubscriptionsGETRequestSubscribersSubscriberIDSubscriptionsGet'
            );
        }

        $resourcePath = '/Webhooks/Subscribers/{SubscriberID}/Subscriptions/';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // header params
        if ($accept !== null) {
            $headerParams['Accept'] = ObjectSerializer::toHeaderValue($accept);
        }
        // header params
        if ($jiwa_stateful !== null) {
            $headerParams['jiwa-stateful'] = ObjectSerializer::toHeaderValue($jiwa_stateful);
        }

        // path params
        if ($subscriber_id !== null) {
            $resourcePath = str_replace(
                '{' . 'SubscriberID' . '}',
                ObjectSerializer::toPathValue($subscriber_id),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json', 'application/xml']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json', 'application/xml'],
                ['application/x-www-form-urlencoded', 'application/json', 'application/xml']
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            
            if($headers['Content-Type'] === 'application/json') {
                // \stdClass has no __toString(), so we should encode it manually
                if ($httpBody instanceof \stdClass) {
                    $httpBody = \GuzzleHttp\json_encode($httpBody);
                }
                // array has no __toString(), so we should encode it manually
                if(is_array($httpBody)) {
                    $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($httpBody));
                }
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\Query::build($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\Query::build($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation webhooksSubscriptionsPATCHRequestSubscribersSubscriberIDSubscriptionsUpdate
     *
     * Updates a Webhook subscription for a subscriber.
     *
     * @param  string $accept Accept Header (required)
     * @param  string $subscriber_id subscriber_id (required)
     * @param  bool $jiwa_stateful Stateful indicator (optional)
     * @param  string $subscription_id subscription_id (optional)
     * @param  string $url url (optional)
     * @param  string $event_name event_name (optional)
     * @param  string $headers headers (optional)
     * @param  \Jiwa\Model\WebhooksSubscriptionsPATCHRequest $body body (optional)
     *
     * @throws \Jiwa\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Jiwa\Model\SYWebhookSubscription
     */
    public function webhooksSubscriptionsPATCHRequestSubscribersSubscriberIDSubscriptionsUpdate($accept, $subscriber_id, $jiwa_stateful = null, $subscription_id = null, $url = null, $event_name = null, $headers = null, $body = null)
    {
        list($response) = $this->webhooksSubscriptionsPATCHRequestSubscribersSubscriberIDSubscriptionsUpdateWithHttpInfo($accept, $subscriber_id, $jiwa_stateful, $subscription_id, $url, $event_name, $headers, $body);
        return $response;
    }

    /**
     * Operation webhooksSubscriptionsPATCHRequestSubscribersSubscriberIDSubscriptionsUpdateWithHttpInfo
     *
     * Updates a Webhook subscription for a subscriber.
     *
     * @param  string $accept Accept Header (required)
     * @param  string $subscriber_id (required)
     * @param  bool $jiwa_stateful Stateful indicator (optional)
     * @param  string $subscription_id (optional)
     * @param  string $url (optional)
     * @param  string $event_name (optional)
     * @param  string $headers (optional)
     * @param  \Jiwa\Model\WebhooksSubscriptionsPATCHRequest $body (optional)
     *
     * @throws \Jiwa\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Jiwa\Model\SYWebhookSubscription, HTTP status code, HTTP response headers (array of strings)
     */
    public function webhooksSubscriptionsPATCHRequestSubscribersSubscriberIDSubscriptionsUpdateWithHttpInfo($accept, $subscriber_id, $jiwa_stateful = null, $subscription_id = null, $url = null, $event_name = null, $headers = null, $body = null)
    {
        $returnType = '\Jiwa\Model\SYWebhookSubscription';
        $request = $this->webhooksSubscriptionsPATCHRequestSubscribersSubscriberIDSubscriptionsUpdateRequest($accept, $subscriber_id, $jiwa_stateful, $subscription_id, $url, $event_name, $headers, $body);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Jiwa\Model\SYWebhookSubscription',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 404:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Jiwa\Model\SYWebhookSubscription',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation webhooksSubscriptionsPATCHRequestSubscribersSubscriberIDSubscriptionsUpdateAsync
     *
     * Updates a Webhook subscription for a subscriber.
     *
     * @param  string $accept Accept Header (required)
     * @param  string $subscriber_id (required)
     * @param  bool $jiwa_stateful Stateful indicator (optional)
     * @param  string $subscription_id (optional)
     * @param  string $url (optional)
     * @param  string $event_name (optional)
     * @param  string $headers (optional)
     * @param  \Jiwa\Model\WebhooksSubscriptionsPATCHRequest $body (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function webhooksSubscriptionsPATCHRequestSubscribersSubscriberIDSubscriptionsUpdateAsync($accept, $subscriber_id, $jiwa_stateful = null, $subscription_id = null, $url = null, $event_name = null, $headers = null, $body = null)
    {
        return $this->webhooksSubscriptionsPATCHRequestSubscribersSubscriberIDSubscriptionsUpdateAsyncWithHttpInfo($accept, $subscriber_id, $jiwa_stateful, $subscription_id, $url, $event_name, $headers, $body)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation webhooksSubscriptionsPATCHRequestSubscribersSubscriberIDSubscriptionsUpdateAsyncWithHttpInfo
     *
     * Updates a Webhook subscription for a subscriber.
     *
     * @param  string $accept Accept Header (required)
     * @param  string $subscriber_id (required)
     * @param  bool $jiwa_stateful Stateful indicator (optional)
     * @param  string $subscription_id (optional)
     * @param  string $url (optional)
     * @param  string $event_name (optional)
     * @param  string $headers (optional)
     * @param  \Jiwa\Model\WebhooksSubscriptionsPATCHRequest $body (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function webhooksSubscriptionsPATCHRequestSubscribersSubscriberIDSubscriptionsUpdateAsyncWithHttpInfo($accept, $subscriber_id, $jiwa_stateful = null, $subscription_id = null, $url = null, $event_name = null, $headers = null, $body = null)
    {
        $returnType = '\Jiwa\Model\SYWebhookSubscription';
        $request = $this->webhooksSubscriptionsPATCHRequestSubscribersSubscriberIDSubscriptionsUpdateRequest($accept, $subscriber_id, $jiwa_stateful, $subscription_id, $url, $event_name, $headers, $body);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'webhooksSubscriptionsPATCHRequestSubscribersSubscriberIDSubscriptionsUpdate'
     *
     * @param  string $accept Accept Header (required)
     * @param  string $subscriber_id (required)
     * @param  bool $jiwa_stateful Stateful indicator (optional)
     * @param  string $subscription_id (optional)
     * @param  string $url (optional)
     * @param  string $event_name (optional)
     * @param  string $headers (optional)
     * @param  \Jiwa\Model\WebhooksSubscriptionsPATCHRequest $body (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function webhooksSubscriptionsPATCHRequestSubscribersSubscriberIDSubscriptionsUpdateRequest($accept, $subscriber_id, $jiwa_stateful = null, $subscription_id = null, $url = null, $event_name = null, $headers = null, $body = null)
    {
        // verify the required parameter 'accept' is set
        if ($accept === null || (is_array($accept) && count($accept) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $accept when calling webhooksSubscriptionsPATCHRequestSubscribersSubscriberIDSubscriptionsUpdate'
            );
        }
        // verify the required parameter 'subscriber_id' is set
        if ($subscriber_id === null || (is_array($subscriber_id) && count($subscriber_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $subscriber_id when calling webhooksSubscriptionsPATCHRequestSubscribersSubscriberIDSubscriptionsUpdate'
            );
        }

        $resourcePath = '/Webhooks/Subscribers/{SubscriberID}/Subscriptions/';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        if ($subscription_id !== null) {
            $queryParams['SubscriptionID'] = ObjectSerializer::toQueryValue($subscription_id);
        }
        // query params
        if ($url !== null) {
            $queryParams['URL'] = ObjectSerializer::toQueryValue($url);
        }
        // query params
        if ($event_name !== null) {
            $queryParams['EventName'] = ObjectSerializer::toQueryValue($event_name);
        }
        // query params
        if ($headers !== null) {
            $queryParams['Headers'] = ObjectSerializer::toQueryValue($headers);
        }
        // header params
        if ($accept !== null) {
            $headerParams['Accept'] = ObjectSerializer::toHeaderValue($accept);
        }
        // header params
        if ($jiwa_stateful !== null) {
            $headerParams['jiwa-stateful'] = ObjectSerializer::toHeaderValue($jiwa_stateful);
        }

        // path params
        if ($subscriber_id !== null) {
            $resourcePath = str_replace(
                '{' . 'SubscriberID' . '}',
                ObjectSerializer::toPathValue($subscriber_id),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;
        if (isset($body)) {
            $_tempBody = $body;
        }

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json', 'application/xml']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json', 'application/xml'],
                ['application/x-www-form-urlencoded', 'application/json', 'application/xml']
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            
            if($headers['Content-Type'] === 'application/json') {
                // \stdClass has no __toString(), so we should encode it manually
                if ($httpBody instanceof \stdClass) {
                    $httpBody = \GuzzleHttp\json_encode($httpBody);
                }
                // array has no __toString(), so we should encode it manually
                if(is_array($httpBody)) {
                    $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($httpBody));
                }
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\Query::build($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\Query::build($queryParams);
        return new Request(
            'PATCH',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation webhooksSubscriptionsPOSTRequestSubscribersSubscriberIDSubscriptionsPost
     *
     * Adds a Webhook subscription for a subscriber.
     *
     * @param  string $accept Accept Header (required)
     * @param  string $subscriber_id subscriber_id (required)
     * @param  bool $jiwa_stateful Stateful indicator (optional)
     * @param  string $url url (optional)
     * @param  string $event_name event_name (optional)
     * @param  string $headers headers (optional)
     * @param  \Jiwa\Model\WebhooksSubscriptionsPOSTRequest $body body (optional)
     *
     * @throws \Jiwa\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Jiwa\Model\SYWebhookSubscription
     */
    public function webhooksSubscriptionsPOSTRequestSubscribersSubscriberIDSubscriptionsPost($accept, $subscriber_id, $jiwa_stateful = null, $url = null, $event_name = null, $headers = null, $body = null)
    {
        list($response) = $this->webhooksSubscriptionsPOSTRequestSubscribersSubscriberIDSubscriptionsPostWithHttpInfo($accept, $subscriber_id, $jiwa_stateful, $url, $event_name, $headers, $body);
        return $response;
    }

    /**
     * Operation webhooksSubscriptionsPOSTRequestSubscribersSubscriberIDSubscriptionsPostWithHttpInfo
     *
     * Adds a Webhook subscription for a subscriber.
     *
     * @param  string $accept Accept Header (required)
     * @param  string $subscriber_id (required)
     * @param  bool $jiwa_stateful Stateful indicator (optional)
     * @param  string $url (optional)
     * @param  string $event_name (optional)
     * @param  string $headers (optional)
     * @param  \Jiwa\Model\WebhooksSubscriptionsPOSTRequest $body (optional)
     *
     * @throws \Jiwa\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Jiwa\Model\SYWebhookSubscription, HTTP status code, HTTP response headers (array of strings)
     */
    public function webhooksSubscriptionsPOSTRequestSubscribersSubscriberIDSubscriptionsPostWithHttpInfo($accept, $subscriber_id, $jiwa_stateful = null, $url = null, $event_name = null, $headers = null, $body = null)
    {
        $returnType = '\Jiwa\Model\SYWebhookSubscription';
        $request = $this->webhooksSubscriptionsPOSTRequestSubscribersSubscriberIDSubscriptionsPostRequest($accept, $subscriber_id, $jiwa_stateful, $url, $event_name, $headers, $body);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Jiwa\Model\SYWebhookSubscription',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 201:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Jiwa\Model\SYWebhookSubscription',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 404:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Jiwa\Model\SYWebhookSubscription',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation webhooksSubscriptionsPOSTRequestSubscribersSubscriberIDSubscriptionsPostAsync
     *
     * Adds a Webhook subscription for a subscriber.
     *
     * @param  string $accept Accept Header (required)
     * @param  string $subscriber_id (required)
     * @param  bool $jiwa_stateful Stateful indicator (optional)
     * @param  string $url (optional)
     * @param  string $event_name (optional)
     * @param  string $headers (optional)
     * @param  \Jiwa\Model\WebhooksSubscriptionsPOSTRequest $body (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function webhooksSubscriptionsPOSTRequestSubscribersSubscriberIDSubscriptionsPostAsync($accept, $subscriber_id, $jiwa_stateful = null, $url = null, $event_name = null, $headers = null, $body = null)
    {
        return $this->webhooksSubscriptionsPOSTRequestSubscribersSubscriberIDSubscriptionsPostAsyncWithHttpInfo($accept, $subscriber_id, $jiwa_stateful, $url, $event_name, $headers, $body)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation webhooksSubscriptionsPOSTRequestSubscribersSubscriberIDSubscriptionsPostAsyncWithHttpInfo
     *
     * Adds a Webhook subscription for a subscriber.
     *
     * @param  string $accept Accept Header (required)
     * @param  string $subscriber_id (required)
     * @param  bool $jiwa_stateful Stateful indicator (optional)
     * @param  string $url (optional)
     * @param  string $event_name (optional)
     * @param  string $headers (optional)
     * @param  \Jiwa\Model\WebhooksSubscriptionsPOSTRequest $body (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function webhooksSubscriptionsPOSTRequestSubscribersSubscriberIDSubscriptionsPostAsyncWithHttpInfo($accept, $subscriber_id, $jiwa_stateful = null, $url = null, $event_name = null, $headers = null, $body = null)
    {
        $returnType = '\Jiwa\Model\SYWebhookSubscription';
        $request = $this->webhooksSubscriptionsPOSTRequestSubscribersSubscriberIDSubscriptionsPostRequest($accept, $subscriber_id, $jiwa_stateful, $url, $event_name, $headers, $body);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'webhooksSubscriptionsPOSTRequestSubscribersSubscriberIDSubscriptionsPost'
     *
     * @param  string $accept Accept Header (required)
     * @param  string $subscriber_id (required)
     * @param  bool $jiwa_stateful Stateful indicator (optional)
     * @param  string $url (optional)
     * @param  string $event_name (optional)
     * @param  string $headers (optional)
     * @param  \Jiwa\Model\WebhooksSubscriptionsPOSTRequest $body (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function webhooksSubscriptionsPOSTRequestSubscribersSubscriberIDSubscriptionsPostRequest($accept, $subscriber_id, $jiwa_stateful = null, $url = null, $event_name = null, $headers = null, $body = null)
    {
        // verify the required parameter 'accept' is set
        if ($accept === null || (is_array($accept) && count($accept) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $accept when calling webhooksSubscriptionsPOSTRequestSubscribersSubscriberIDSubscriptionsPost'
            );
        }
        // verify the required parameter 'subscriber_id' is set
        if ($subscriber_id === null || (is_array($subscriber_id) && count($subscriber_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $subscriber_id when calling webhooksSubscriptionsPOSTRequestSubscribersSubscriberIDSubscriptionsPost'
            );
        }

        $resourcePath = '/Webhooks/Subscribers/{SubscriberID}/Subscriptions/';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        if ($url !== null) {
            $queryParams['URL'] = ObjectSerializer::toQueryValue($url);
        }
        // query params
        if ($event_name !== null) {
            $queryParams['EventName'] = ObjectSerializer::toQueryValue($event_name);
        }
        // query params
        if ($headers !== null) {
            $queryParams['Headers'] = ObjectSerializer::toQueryValue($headers);
        }
        // header params
        if ($accept !== null) {
            $headerParams['Accept'] = ObjectSerializer::toHeaderValue($accept);
        }
        // header params
        if ($jiwa_stateful !== null) {
            $headerParams['jiwa-stateful'] = ObjectSerializer::toHeaderValue($jiwa_stateful);
        }

        // path params
        if ($subscriber_id !== null) {
            $resourcePath = str_replace(
                '{' . 'SubscriberID' . '}',
                ObjectSerializer::toPathValue($subscriber_id),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;
        if (isset($body)) {
            $_tempBody = $body;
        }

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json', 'application/xml']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json', 'application/xml'],
                ['application/x-www-form-urlencoded', 'application/json', 'application/xml']
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            
            if($headers['Content-Type'] === 'application/json') {
                // \stdClass has no __toString(), so we should encode it manually
                if ($httpBody instanceof \stdClass) {
                    $httpBody = \GuzzleHttp\json_encode($httpBody);
                }
                // array has no __toString(), so we should encode it manually
                if(is_array($httpBody)) {
                    $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($httpBody));
                }
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\Query::build($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\Query::build($queryParams);
        return new Request(
            'POST',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation webhooksTestPOSTRequestTest2Post
     *
     * Test route for sending webhooks to. Use this as the URL to direct a webhook subscription to.
     *
     * @param  string $accept Accept Header (required)
     * @param  bool $jiwa_stateful Stateful indicator (optional)
     * @param  string $body body (optional)
     * @param  \Jiwa\Model\WebhooksTestPOSTRequest $body2 body2 (optional)
     *
     * @throws \Jiwa\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Jiwa\Model\Object
     */
    public function webhooksTestPOSTRequestTest2Post($accept, $jiwa_stateful = null, $body = null, $body2 = null)
    {
        list($response) = $this->webhooksTestPOSTRequestTest2PostWithHttpInfo($accept, $jiwa_stateful, $body, $body2);
        return $response;
    }

    /**
     * Operation webhooksTestPOSTRequestTest2PostWithHttpInfo
     *
     * Test route for sending webhooks to. Use this as the URL to direct a webhook subscription to.
     *
     * @param  string $accept Accept Header (required)
     * @param  bool $jiwa_stateful Stateful indicator (optional)
     * @param  string $body (optional)
     * @param  \Jiwa\Model\WebhooksTestPOSTRequest $body2 (optional)
     *
     * @throws \Jiwa\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Jiwa\Model\Object, HTTP status code, HTTP response headers (array of strings)
     */
    public function webhooksTestPOSTRequestTest2PostWithHttpInfo($accept, $jiwa_stateful = null, $body = null, $body2 = null)
    {
        $returnType = '\Jiwa\Model\Object';
        $request = $this->webhooksTestPOSTRequestTest2PostRequest($accept, $jiwa_stateful, $body, $body2);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Jiwa\Model\Object',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 201:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Jiwa\Model\Object',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation webhooksTestPOSTRequestTest2PostAsync
     *
     * Test route for sending webhooks to. Use this as the URL to direct a webhook subscription to.
     *
     * @param  string $accept Accept Header (required)
     * @param  bool $jiwa_stateful Stateful indicator (optional)
     * @param  string $body (optional)
     * @param  \Jiwa\Model\WebhooksTestPOSTRequest $body2 (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function webhooksTestPOSTRequestTest2PostAsync($accept, $jiwa_stateful = null, $body = null, $body2 = null)
    {
        return $this->webhooksTestPOSTRequestTest2PostAsyncWithHttpInfo($accept, $jiwa_stateful, $body, $body2)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation webhooksTestPOSTRequestTest2PostAsyncWithHttpInfo
     *
     * Test route for sending webhooks to. Use this as the URL to direct a webhook subscription to.
     *
     * @param  string $accept Accept Header (required)
     * @param  bool $jiwa_stateful Stateful indicator (optional)
     * @param  string $body (optional)
     * @param  \Jiwa\Model\WebhooksTestPOSTRequest $body2 (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function webhooksTestPOSTRequestTest2PostAsyncWithHttpInfo($accept, $jiwa_stateful = null, $body = null, $body2 = null)
    {
        $returnType = '\Jiwa\Model\Object';
        $request = $this->webhooksTestPOSTRequestTest2PostRequest($accept, $jiwa_stateful, $body, $body2);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'webhooksTestPOSTRequestTest2Post'
     *
     * @param  string $accept Accept Header (required)
     * @param  bool $jiwa_stateful Stateful indicator (optional)
     * @param  string $body (optional)
     * @param  \Jiwa\Model\WebhooksTestPOSTRequest $body2 (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function webhooksTestPOSTRequestTest2PostRequest($accept, $jiwa_stateful = null, $body = null, $body2 = null)
    {
        // verify the required parameter 'accept' is set
        if ($accept === null || (is_array($accept) && count($accept) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $accept when calling webhooksTestPOSTRequestTest2Post'
            );
        }

        $resourcePath = '/Webhooks/Test/';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        if ($body !== null) {
            $queryParams['Body'] = ObjectSerializer::toQueryValue($body);
        }
        // header params
        if ($accept !== null) {
            $headerParams['Accept'] = ObjectSerializer::toHeaderValue($accept);
        }
        // header params
        if ($jiwa_stateful !== null) {
            $headerParams['jiwa-stateful'] = ObjectSerializer::toHeaderValue($jiwa_stateful);
        }


        // body params
        $_tempBody = null;
        if (isset($body2)) {
            $_tempBody = $body2;
        }

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json', 'application/xml']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json', 'application/xml'],
                ['application/x-www-form-urlencoded', 'application/json', 'application/xml']
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            
            if($headers['Content-Type'] === 'application/json') {
                // \stdClass has no __toString(), so we should encode it manually
                if ($httpBody instanceof \stdClass) {
                    $httpBody = \GuzzleHttp\json_encode($httpBody);
                }
                // array has no __toString(), so we should encode it manually
                if(is_array($httpBody)) {
                    $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($httpBody));
                }
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\Query::build($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\Query::build($queryParams);
        return new Request(
            'POST',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Create http client option
     *
     * @throws \RuntimeException on file opening failure
     * @return array of http client options
     */
    protected function createHttpClientOption()
    {
        $options = [];
        if ($this->config->getDebug()) {
            $options[RequestOptions::DEBUG] = fopen($this->config->getDebugFile(), 'a');
            if (!$options[RequestOptions::DEBUG]) {
                throw new \RuntimeException('Failed to open the debug file: ' . $this->config->getDebugFile());
            }
        }

        return $options;
    }
}

<?php
/**
 * GoodsReceivedNotesApi
 * PHP version 5
 *
 * @category Class
 * @package  Jiwa
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * JiwaAPI
 *
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: 1.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 * Swagger Codegen version: 2.4.28-SNAPSHOT
 */

/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Jiwa\Api;

use GuzzleHttp\Client;
use GuzzleHttp\ClientInterface;
use GuzzleHttp\Exception\RequestException;
use GuzzleHttp\Psr7\MultipartStream;
use GuzzleHttp\Psr7\Request;
use GuzzleHttp\RequestOptions;
use Jiwa\ApiException;
use Jiwa\Configuration;
use Jiwa\HeaderSelector;
use Jiwa\ObjectSerializer;

/**
 * GoodsReceivedNotesApi Class Doc Comment
 *
 * @category Class
 * @package  Jiwa
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class GoodsReceivedNotesApi
{
    /**
     * @var ClientInterface
     */
    protected $client;

    /**
     * @var Configuration
     */
    protected $config;

    /**
     * @var HeaderSelector
     */
    protected $headerSelector;

    /**
     * @param ClientInterface $client
     * @param Configuration   $config
     * @param HeaderSelector  $selector
     */
    public function __construct(
        ClientInterface $client = null,
        Configuration $config = null,
        HeaderSelector $selector = null
    ) {
        $this->client = $client ?: new Client();
        $this->config = $config ?: new Configuration();
        $this->headerSelector = $selector ?: new HeaderSelector();
    }

    /**
     * @return Configuration
     */
    public function getConfig()
    {
        return $this->config;
    }

    /**
     * Operation goodsReceivedNoteABANDONRequestAbandonDelete
     *
     * Abandons a stateful goods received note.
     *
     * @param  string $accept Accept Header (required)
     * @param  bool $jiwa_stateful Stateful indicator (optional)
     * @param  string $grnid grnid (optional)
     *
     * @throws \Jiwa\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Jiwa\Model\Object
     */
    public function goodsReceivedNoteABANDONRequestAbandonDelete($accept, $jiwa_stateful = null, $grnid = null)
    {
        list($response) = $this->goodsReceivedNoteABANDONRequestAbandonDeleteWithHttpInfo($accept, $jiwa_stateful, $grnid);
        return $response;
    }

    /**
     * Operation goodsReceivedNoteABANDONRequestAbandonDeleteWithHttpInfo
     *
     * Abandons a stateful goods received note.
     *
     * @param  string $accept Accept Header (required)
     * @param  bool $jiwa_stateful Stateful indicator (optional)
     * @param  string $grnid (optional)
     *
     * @throws \Jiwa\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Jiwa\Model\Object, HTTP status code, HTTP response headers (array of strings)
     */
    public function goodsReceivedNoteABANDONRequestAbandonDeleteWithHttpInfo($accept, $jiwa_stateful = null, $grnid = null)
    {
        $returnType = '\Jiwa\Model\Object';
        $request = $this->goodsReceivedNoteABANDONRequestAbandonDeleteRequest($accept, $jiwa_stateful, $grnid);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Jiwa\Model\Object',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 401:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Jiwa\Model\Object',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 404:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Jiwa\Model\Object',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 403:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Jiwa\Model\Object',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation goodsReceivedNoteABANDONRequestAbandonDeleteAsync
     *
     * Abandons a stateful goods received note.
     *
     * @param  string $accept Accept Header (required)
     * @param  bool $jiwa_stateful Stateful indicator (optional)
     * @param  string $grnid (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function goodsReceivedNoteABANDONRequestAbandonDeleteAsync($accept, $jiwa_stateful = null, $grnid = null)
    {
        return $this->goodsReceivedNoteABANDONRequestAbandonDeleteAsyncWithHttpInfo($accept, $jiwa_stateful, $grnid)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation goodsReceivedNoteABANDONRequestAbandonDeleteAsyncWithHttpInfo
     *
     * Abandons a stateful goods received note.
     *
     * @param  string $accept Accept Header (required)
     * @param  bool $jiwa_stateful Stateful indicator (optional)
     * @param  string $grnid (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function goodsReceivedNoteABANDONRequestAbandonDeleteAsyncWithHttpInfo($accept, $jiwa_stateful = null, $grnid = null)
    {
        $returnType = '\Jiwa\Model\Object';
        $request = $this->goodsReceivedNoteABANDONRequestAbandonDeleteRequest($accept, $jiwa_stateful, $grnid);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'goodsReceivedNoteABANDONRequestAbandonDelete'
     *
     * @param  string $accept Accept Header (required)
     * @param  bool $jiwa_stateful Stateful indicator (optional)
     * @param  string $grnid (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function goodsReceivedNoteABANDONRequestAbandonDeleteRequest($accept, $jiwa_stateful = null, $grnid = null)
    {
        // verify the required parameter 'accept' is set
        if ($accept === null || (is_array($accept) && count($accept) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $accept when calling goodsReceivedNoteABANDONRequestAbandonDelete'
            );
        }

        $resourcePath = '/GoodsReceivedNotes/Abandon';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        if ($grnid !== null) {
            $queryParams['GRNID'] = ObjectSerializer::toQueryValue($grnid);
        }
        // header params
        if ($accept !== null) {
            $headerParams['Accept'] = ObjectSerializer::toHeaderValue($accept);
        }
        // header params
        if ($jiwa_stateful !== null) {
            $headerParams['jiwa-stateful'] = ObjectSerializer::toHeaderValue($jiwa_stateful);
        }


        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json', 'application/xml']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json', 'application/xml'],
                ['application/x-www-form-urlencoded', 'application/json', 'application/xml']
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            
            if($headers['Content-Type'] === 'application/json') {
                // \stdClass has no __toString(), so we should encode it manually
                if ($httpBody instanceof \stdClass) {
                    $httpBody = \GuzzleHttp\json_encode($httpBody);
                }
                // array has no __toString(), so we should encode it manually
                if(is_array($httpBody)) {
                    $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($httpBody));
                }
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\Query::build($formParams);
            }
        }

        // this endpoint requires HTTP basic authentication
        if ($this->config->getUsername() !== null || $this->config->getPassword() !== null) {
            $headers['Authorization'] = 'Basic ' . base64_encode($this->config->getUsername() . ":" . $this->config->getPassword());
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\Query::build($queryParams);
        return new Request(
            'DELETE',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation goodsReceivedNoteACTIVATERequestActivateGRNIDPost
     *
     * Activates a GRN.
     *
     * @param  string $accept Accept Header (required)
     * @param  string $grnid grnid (required)
     * @param  bool $jiwa_stateful Stateful indicator (optional)
     * @param  \Jiwa\Model\GoodsReceivedNoteACTIVATERequest $body body (optional)
     *
     * @throws \Jiwa\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Jiwa\Model\GoodsReceivedNote
     */
    public function goodsReceivedNoteACTIVATERequestActivateGRNIDPost($accept, $grnid, $jiwa_stateful = null, $body = null)
    {
        list($response) = $this->goodsReceivedNoteACTIVATERequestActivateGRNIDPostWithHttpInfo($accept, $grnid, $jiwa_stateful, $body);
        return $response;
    }

    /**
     * Operation goodsReceivedNoteACTIVATERequestActivateGRNIDPostWithHttpInfo
     *
     * Activates a GRN.
     *
     * @param  string $accept Accept Header (required)
     * @param  string $grnid (required)
     * @param  bool $jiwa_stateful Stateful indicator (optional)
     * @param  \Jiwa\Model\GoodsReceivedNoteACTIVATERequest $body (optional)
     *
     * @throws \Jiwa\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Jiwa\Model\GoodsReceivedNote, HTTP status code, HTTP response headers (array of strings)
     */
    public function goodsReceivedNoteACTIVATERequestActivateGRNIDPostWithHttpInfo($accept, $grnid, $jiwa_stateful = null, $body = null)
    {
        $returnType = '\Jiwa\Model\GoodsReceivedNote';
        $request = $this->goodsReceivedNoteACTIVATERequestActivateGRNIDPostRequest($accept, $grnid, $jiwa_stateful, $body);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Jiwa\Model\GoodsReceivedNote',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 403:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Jiwa\Model\GoodsReceivedNote',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 404:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Jiwa\Model\GoodsReceivedNote',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 204:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Jiwa\Model\GoodsReceivedNote',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 401:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Jiwa\Model\GoodsReceivedNote',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation goodsReceivedNoteACTIVATERequestActivateGRNIDPostAsync
     *
     * Activates a GRN.
     *
     * @param  string $accept Accept Header (required)
     * @param  string $grnid (required)
     * @param  bool $jiwa_stateful Stateful indicator (optional)
     * @param  \Jiwa\Model\GoodsReceivedNoteACTIVATERequest $body (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function goodsReceivedNoteACTIVATERequestActivateGRNIDPostAsync($accept, $grnid, $jiwa_stateful = null, $body = null)
    {
        return $this->goodsReceivedNoteACTIVATERequestActivateGRNIDPostAsyncWithHttpInfo($accept, $grnid, $jiwa_stateful, $body)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation goodsReceivedNoteACTIVATERequestActivateGRNIDPostAsyncWithHttpInfo
     *
     * Activates a GRN.
     *
     * @param  string $accept Accept Header (required)
     * @param  string $grnid (required)
     * @param  bool $jiwa_stateful Stateful indicator (optional)
     * @param  \Jiwa\Model\GoodsReceivedNoteACTIVATERequest $body (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function goodsReceivedNoteACTIVATERequestActivateGRNIDPostAsyncWithHttpInfo($accept, $grnid, $jiwa_stateful = null, $body = null)
    {
        $returnType = '\Jiwa\Model\GoodsReceivedNote';
        $request = $this->goodsReceivedNoteACTIVATERequestActivateGRNIDPostRequest($accept, $grnid, $jiwa_stateful, $body);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'goodsReceivedNoteACTIVATERequestActivateGRNIDPost'
     *
     * @param  string $accept Accept Header (required)
     * @param  string $grnid (required)
     * @param  bool $jiwa_stateful Stateful indicator (optional)
     * @param  \Jiwa\Model\GoodsReceivedNoteACTIVATERequest $body (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function goodsReceivedNoteACTIVATERequestActivateGRNIDPostRequest($accept, $grnid, $jiwa_stateful = null, $body = null)
    {
        // verify the required parameter 'accept' is set
        if ($accept === null || (is_array($accept) && count($accept) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $accept when calling goodsReceivedNoteACTIVATERequestActivateGRNIDPost'
            );
        }
        // verify the required parameter 'grnid' is set
        if ($grnid === null || (is_array($grnid) && count($grnid) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $grnid when calling goodsReceivedNoteACTIVATERequestActivateGRNIDPost'
            );
        }

        $resourcePath = '/GoodsReceivedNotes/Activate/{GRNID}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // header params
        if ($accept !== null) {
            $headerParams['Accept'] = ObjectSerializer::toHeaderValue($accept);
        }
        // header params
        if ($jiwa_stateful !== null) {
            $headerParams['jiwa-stateful'] = ObjectSerializer::toHeaderValue($jiwa_stateful);
        }

        // path params
        if ($grnid !== null) {
            $resourcePath = str_replace(
                '{' . 'GRNID' . '}',
                ObjectSerializer::toPathValue($grnid),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;
        if (isset($body)) {
            $_tempBody = $body;
        }

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json', 'application/xml']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json', 'application/xml'],
                ['application/x-www-form-urlencoded', 'application/json', 'application/xml']
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            
            if($headers['Content-Type'] === 'application/json') {
                // \stdClass has no __toString(), so we should encode it manually
                if ($httpBody instanceof \stdClass) {
                    $httpBody = \GuzzleHttp\json_encode($httpBody);
                }
                // array has no __toString(), so we should encode it manually
                if(is_array($httpBody)) {
                    $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($httpBody));
                }
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\Query::build($formParams);
            }
        }

        // this endpoint requires HTTP basic authentication
        if ($this->config->getUsername() !== null || $this->config->getPassword() !== null) {
            $headers['Authorization'] = 'Basic ' . base64_encode($this->config->getUsername() . ":" . $this->config->getPassword());
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\Query::build($queryParams);
        return new Request(
            'POST',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation goodsReceivedNoteCREATEFromPOLinesRequestFromPurchaseOrderLinesPost
     *
     * Creates a GRN from the supplied list of ReceivedPOLineQuantity.
     *
     * @param  string $accept Accept Header (required)
     * @param  bool $jiwa_stateful Stateful indicator (optional)
     * @param  string $received_po_line_quantities received_po_line_quantities (optional)
     * @param  \Jiwa\Model\GoodsReceivedNoteCREATEFromPOLinesRequest $body body (optional)
     *
     * @throws \Jiwa\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Jiwa\Model\GoodsReceivedNote
     */
    public function goodsReceivedNoteCREATEFromPOLinesRequestFromPurchaseOrderLinesPost($accept, $jiwa_stateful = null, $received_po_line_quantities = null, $body = null)
    {
        list($response) = $this->goodsReceivedNoteCREATEFromPOLinesRequestFromPurchaseOrderLinesPostWithHttpInfo($accept, $jiwa_stateful, $received_po_line_quantities, $body);
        return $response;
    }

    /**
     * Operation goodsReceivedNoteCREATEFromPOLinesRequestFromPurchaseOrderLinesPostWithHttpInfo
     *
     * Creates a GRN from the supplied list of ReceivedPOLineQuantity.
     *
     * @param  string $accept Accept Header (required)
     * @param  bool $jiwa_stateful Stateful indicator (optional)
     * @param  string $received_po_line_quantities (optional)
     * @param  \Jiwa\Model\GoodsReceivedNoteCREATEFromPOLinesRequest $body (optional)
     *
     * @throws \Jiwa\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Jiwa\Model\GoodsReceivedNote, HTTP status code, HTTP response headers (array of strings)
     */
    public function goodsReceivedNoteCREATEFromPOLinesRequestFromPurchaseOrderLinesPostWithHttpInfo($accept, $jiwa_stateful = null, $received_po_line_quantities = null, $body = null)
    {
        $returnType = '\Jiwa\Model\GoodsReceivedNote';
        $request = $this->goodsReceivedNoteCREATEFromPOLinesRequestFromPurchaseOrderLinesPostRequest($accept, $jiwa_stateful, $received_po_line_quantities, $body);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Jiwa\Model\GoodsReceivedNote',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 401:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Jiwa\Model\GoodsReceivedNote',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 201:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Jiwa\Model\GoodsReceivedNote',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 403:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Jiwa\Model\GoodsReceivedNote',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 404:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Jiwa\Model\GoodsReceivedNote',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation goodsReceivedNoteCREATEFromPOLinesRequestFromPurchaseOrderLinesPostAsync
     *
     * Creates a GRN from the supplied list of ReceivedPOLineQuantity.
     *
     * @param  string $accept Accept Header (required)
     * @param  bool $jiwa_stateful Stateful indicator (optional)
     * @param  string $received_po_line_quantities (optional)
     * @param  \Jiwa\Model\GoodsReceivedNoteCREATEFromPOLinesRequest $body (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function goodsReceivedNoteCREATEFromPOLinesRequestFromPurchaseOrderLinesPostAsync($accept, $jiwa_stateful = null, $received_po_line_quantities = null, $body = null)
    {
        return $this->goodsReceivedNoteCREATEFromPOLinesRequestFromPurchaseOrderLinesPostAsyncWithHttpInfo($accept, $jiwa_stateful, $received_po_line_quantities, $body)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation goodsReceivedNoteCREATEFromPOLinesRequestFromPurchaseOrderLinesPostAsyncWithHttpInfo
     *
     * Creates a GRN from the supplied list of ReceivedPOLineQuantity.
     *
     * @param  string $accept Accept Header (required)
     * @param  bool $jiwa_stateful Stateful indicator (optional)
     * @param  string $received_po_line_quantities (optional)
     * @param  \Jiwa\Model\GoodsReceivedNoteCREATEFromPOLinesRequest $body (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function goodsReceivedNoteCREATEFromPOLinesRequestFromPurchaseOrderLinesPostAsyncWithHttpInfo($accept, $jiwa_stateful = null, $received_po_line_quantities = null, $body = null)
    {
        $returnType = '\Jiwa\Model\GoodsReceivedNote';
        $request = $this->goodsReceivedNoteCREATEFromPOLinesRequestFromPurchaseOrderLinesPostRequest($accept, $jiwa_stateful, $received_po_line_quantities, $body);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'goodsReceivedNoteCREATEFromPOLinesRequestFromPurchaseOrderLinesPost'
     *
     * @param  string $accept Accept Header (required)
     * @param  bool $jiwa_stateful Stateful indicator (optional)
     * @param  string $received_po_line_quantities (optional)
     * @param  \Jiwa\Model\GoodsReceivedNoteCREATEFromPOLinesRequest $body (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function goodsReceivedNoteCREATEFromPOLinesRequestFromPurchaseOrderLinesPostRequest($accept, $jiwa_stateful = null, $received_po_line_quantities = null, $body = null)
    {
        // verify the required parameter 'accept' is set
        if ($accept === null || (is_array($accept) && count($accept) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $accept when calling goodsReceivedNoteCREATEFromPOLinesRequestFromPurchaseOrderLinesPost'
            );
        }

        $resourcePath = '/GoodsReceivedNotes/FromPurchaseOrderLines';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        if ($received_po_line_quantities !== null) {
            $queryParams['ReceivedPOLineQuantities'] = ObjectSerializer::toQueryValue($received_po_line_quantities);
        }
        // header params
        if ($accept !== null) {
            $headerParams['Accept'] = ObjectSerializer::toHeaderValue($accept);
        }
        // header params
        if ($jiwa_stateful !== null) {
            $headerParams['jiwa-stateful'] = ObjectSerializer::toHeaderValue($jiwa_stateful);
        }


        // body params
        $_tempBody = null;
        if (isset($body)) {
            $_tempBody = $body;
        }

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json', 'application/xml']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json', 'application/xml'],
                ['application/x-www-form-urlencoded', 'application/json', 'application/xml']
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            
            if($headers['Content-Type'] === 'application/json') {
                // \stdClass has no __toString(), so we should encode it manually
                if ($httpBody instanceof \stdClass) {
                    $httpBody = \GuzzleHttp\json_encode($httpBody);
                }
                // array has no __toString(), so we should encode it manually
                if(is_array($httpBody)) {
                    $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($httpBody));
                }
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\Query::build($formParams);
            }
        }

        // this endpoint requires HTTP basic authentication
        if ($this->config->getUsername() !== null || $this->config->getPassword() !== null) {
            $headers['Authorization'] = 'Basic ' . base64_encode($this->config->getUsername() . ":" . $this->config->getPassword());
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\Query::build($queryParams);
        return new Request(
            'POST',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation goodsReceivedNoteCREATEFromPORequestFromPurchaseOrdersOrderNosPost
     *
     * Creates a GRN from the supplied purchase orders.
     *
     * @param  string $accept Accept Header (required)
     * @param  string $order_nos order_nos (required)
     * @param  bool $jiwa_stateful Stateful indicator (optional)
     * @param  \Jiwa\Model\GoodsReceivedNoteCREATEFromPORequest $body body (optional)
     *
     * @throws \Jiwa\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Jiwa\Model\GoodsReceivedNote
     */
    public function goodsReceivedNoteCREATEFromPORequestFromPurchaseOrdersOrderNosPost($accept, $order_nos, $jiwa_stateful = null, $body = null)
    {
        list($response) = $this->goodsReceivedNoteCREATEFromPORequestFromPurchaseOrdersOrderNosPostWithHttpInfo($accept, $order_nos, $jiwa_stateful, $body);
        return $response;
    }

    /**
     * Operation goodsReceivedNoteCREATEFromPORequestFromPurchaseOrdersOrderNosPostWithHttpInfo
     *
     * Creates a GRN from the supplied purchase orders.
     *
     * @param  string $accept Accept Header (required)
     * @param  string $order_nos (required)
     * @param  bool $jiwa_stateful Stateful indicator (optional)
     * @param  \Jiwa\Model\GoodsReceivedNoteCREATEFromPORequest $body (optional)
     *
     * @throws \Jiwa\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Jiwa\Model\GoodsReceivedNote, HTTP status code, HTTP response headers (array of strings)
     */
    public function goodsReceivedNoteCREATEFromPORequestFromPurchaseOrdersOrderNosPostWithHttpInfo($accept, $order_nos, $jiwa_stateful = null, $body = null)
    {
        $returnType = '\Jiwa\Model\GoodsReceivedNote';
        $request = $this->goodsReceivedNoteCREATEFromPORequestFromPurchaseOrdersOrderNosPostRequest($accept, $order_nos, $jiwa_stateful, $body);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Jiwa\Model\GoodsReceivedNote',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 404:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Jiwa\Model\GoodsReceivedNote',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 201:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Jiwa\Model\GoodsReceivedNote',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 401:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Jiwa\Model\GoodsReceivedNote',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 403:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Jiwa\Model\GoodsReceivedNote',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation goodsReceivedNoteCREATEFromPORequestFromPurchaseOrdersOrderNosPostAsync
     *
     * Creates a GRN from the supplied purchase orders.
     *
     * @param  string $accept Accept Header (required)
     * @param  string $order_nos (required)
     * @param  bool $jiwa_stateful Stateful indicator (optional)
     * @param  \Jiwa\Model\GoodsReceivedNoteCREATEFromPORequest $body (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function goodsReceivedNoteCREATEFromPORequestFromPurchaseOrdersOrderNosPostAsync($accept, $order_nos, $jiwa_stateful = null, $body = null)
    {
        return $this->goodsReceivedNoteCREATEFromPORequestFromPurchaseOrdersOrderNosPostAsyncWithHttpInfo($accept, $order_nos, $jiwa_stateful, $body)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation goodsReceivedNoteCREATEFromPORequestFromPurchaseOrdersOrderNosPostAsyncWithHttpInfo
     *
     * Creates a GRN from the supplied purchase orders.
     *
     * @param  string $accept Accept Header (required)
     * @param  string $order_nos (required)
     * @param  bool $jiwa_stateful Stateful indicator (optional)
     * @param  \Jiwa\Model\GoodsReceivedNoteCREATEFromPORequest $body (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function goodsReceivedNoteCREATEFromPORequestFromPurchaseOrdersOrderNosPostAsyncWithHttpInfo($accept, $order_nos, $jiwa_stateful = null, $body = null)
    {
        $returnType = '\Jiwa\Model\GoodsReceivedNote';
        $request = $this->goodsReceivedNoteCREATEFromPORequestFromPurchaseOrdersOrderNosPostRequest($accept, $order_nos, $jiwa_stateful, $body);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'goodsReceivedNoteCREATEFromPORequestFromPurchaseOrdersOrderNosPost'
     *
     * @param  string $accept Accept Header (required)
     * @param  string $order_nos (required)
     * @param  bool $jiwa_stateful Stateful indicator (optional)
     * @param  \Jiwa\Model\GoodsReceivedNoteCREATEFromPORequest $body (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function goodsReceivedNoteCREATEFromPORequestFromPurchaseOrdersOrderNosPostRequest($accept, $order_nos, $jiwa_stateful = null, $body = null)
    {
        // verify the required parameter 'accept' is set
        if ($accept === null || (is_array($accept) && count($accept) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $accept when calling goodsReceivedNoteCREATEFromPORequestFromPurchaseOrdersOrderNosPost'
            );
        }
        // verify the required parameter 'order_nos' is set
        if ($order_nos === null || (is_array($order_nos) && count($order_nos) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $order_nos when calling goodsReceivedNoteCREATEFromPORequestFromPurchaseOrdersOrderNosPost'
            );
        }

        $resourcePath = '/GoodsReceivedNotes/FromPurchaseOrders/{OrderNos}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // header params
        if ($accept !== null) {
            $headerParams['Accept'] = ObjectSerializer::toHeaderValue($accept);
        }
        // header params
        if ($jiwa_stateful !== null) {
            $headerParams['jiwa-stateful'] = ObjectSerializer::toHeaderValue($jiwa_stateful);
        }

        // path params
        if ($order_nos !== null) {
            $resourcePath = str_replace(
                '{' . 'OrderNos' . '}',
                ObjectSerializer::toPathValue($order_nos),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;
        if (isset($body)) {
            $_tempBody = $body;
        }

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json', 'application/xml']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json', 'application/xml'],
                ['application/x-www-form-urlencoded', 'application/json', 'application/xml']
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            
            if($headers['Content-Type'] === 'application/json') {
                // \stdClass has no __toString(), so we should encode it manually
                if ($httpBody instanceof \stdClass) {
                    $httpBody = \GuzzleHttp\json_encode($httpBody);
                }
                // array has no __toString(), so we should encode it manually
                if(is_array($httpBody)) {
                    $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($httpBody));
                }
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\Query::build($formParams);
            }
        }

        // this endpoint requires HTTP basic authentication
        if ($this->config->getUsername() !== null || $this->config->getPassword() !== null) {
            $headers['Authorization'] = 'Basic ' . base64_encode($this->config->getUsername() . ":" . $this->config->getPassword());
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\Query::build($queryParams);
        return new Request(
            'POST',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation goodsReceivedNoteDELETERequestGRNIDDelete
     *
     * Deletes a GRN.
     *
     * @param  string $accept Accept Header (required)
     * @param  string $grnid grnid (required)
     * @param  bool $jiwa_stateful Stateful indicator (optional)
     *
     * @throws \Jiwa\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Jiwa\Model\Object
     */
    public function goodsReceivedNoteDELETERequestGRNIDDelete($accept, $grnid, $jiwa_stateful = null)
    {
        list($response) = $this->goodsReceivedNoteDELETERequestGRNIDDeleteWithHttpInfo($accept, $grnid, $jiwa_stateful);
        return $response;
    }

    /**
     * Operation goodsReceivedNoteDELETERequestGRNIDDeleteWithHttpInfo
     *
     * Deletes a GRN.
     *
     * @param  string $accept Accept Header (required)
     * @param  string $grnid (required)
     * @param  bool $jiwa_stateful Stateful indicator (optional)
     *
     * @throws \Jiwa\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Jiwa\Model\Object, HTTP status code, HTTP response headers (array of strings)
     */
    public function goodsReceivedNoteDELETERequestGRNIDDeleteWithHttpInfo($accept, $grnid, $jiwa_stateful = null)
    {
        $returnType = '\Jiwa\Model\Object';
        $request = $this->goodsReceivedNoteDELETERequestGRNIDDeleteRequest($accept, $grnid, $jiwa_stateful);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Jiwa\Model\Object',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 404:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Jiwa\Model\Object',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 204:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Jiwa\Model\Object',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 401:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Jiwa\Model\Object',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 403:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Jiwa\Model\Object',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation goodsReceivedNoteDELETERequestGRNIDDeleteAsync
     *
     * Deletes a GRN.
     *
     * @param  string $accept Accept Header (required)
     * @param  string $grnid (required)
     * @param  bool $jiwa_stateful Stateful indicator (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function goodsReceivedNoteDELETERequestGRNIDDeleteAsync($accept, $grnid, $jiwa_stateful = null)
    {
        return $this->goodsReceivedNoteDELETERequestGRNIDDeleteAsyncWithHttpInfo($accept, $grnid, $jiwa_stateful)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation goodsReceivedNoteDELETERequestGRNIDDeleteAsyncWithHttpInfo
     *
     * Deletes a GRN.
     *
     * @param  string $accept Accept Header (required)
     * @param  string $grnid (required)
     * @param  bool $jiwa_stateful Stateful indicator (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function goodsReceivedNoteDELETERequestGRNIDDeleteAsyncWithHttpInfo($accept, $grnid, $jiwa_stateful = null)
    {
        $returnType = '\Jiwa\Model\Object';
        $request = $this->goodsReceivedNoteDELETERequestGRNIDDeleteRequest($accept, $grnid, $jiwa_stateful);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'goodsReceivedNoteDELETERequestGRNIDDelete'
     *
     * @param  string $accept Accept Header (required)
     * @param  string $grnid (required)
     * @param  bool $jiwa_stateful Stateful indicator (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function goodsReceivedNoteDELETERequestGRNIDDeleteRequest($accept, $grnid, $jiwa_stateful = null)
    {
        // verify the required parameter 'accept' is set
        if ($accept === null || (is_array($accept) && count($accept) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $accept when calling goodsReceivedNoteDELETERequestGRNIDDelete'
            );
        }
        // verify the required parameter 'grnid' is set
        if ($grnid === null || (is_array($grnid) && count($grnid) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $grnid when calling goodsReceivedNoteDELETERequestGRNIDDelete'
            );
        }

        $resourcePath = '/GoodsReceivedNotes/{GRNID}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // header params
        if ($accept !== null) {
            $headerParams['Accept'] = ObjectSerializer::toHeaderValue($accept);
        }
        // header params
        if ($jiwa_stateful !== null) {
            $headerParams['jiwa-stateful'] = ObjectSerializer::toHeaderValue($jiwa_stateful);
        }

        // path params
        if ($grnid !== null) {
            $resourcePath = str_replace(
                '{' . 'GRNID' . '}',
                ObjectSerializer::toPathValue($grnid),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json', 'application/xml']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json', 'application/xml'],
                ['application/x-www-form-urlencoded', 'application/json', 'application/xml']
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            
            if($headers['Content-Type'] === 'application/json') {
                // \stdClass has no __toString(), so we should encode it manually
                if ($httpBody instanceof \stdClass) {
                    $httpBody = \GuzzleHttp\json_encode($httpBody);
                }
                // array has no __toString(), so we should encode it manually
                if(is_array($httpBody)) {
                    $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($httpBody));
                }
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\Query::build($formParams);
            }
        }

        // this endpoint requires HTTP basic authentication
        if ($this->config->getUsername() !== null || $this->config->getPassword() !== null) {
            $headers['Authorization'] = 'Basic ' . base64_encode($this->config->getUsername() . ":" . $this->config->getPassword());
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\Query::build($queryParams);
        return new Request(
            'DELETE',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation goodsReceivedNoteGETRequestGRNIDGet
     *
     * Retrieves a GRN.
     *
     * @param  string $accept Accept Header (required)
     * @param  string $grnid grnid (required)
     * @param  bool $jiwa_stateful Stateful indicator (optional)
     *
     * @throws \Jiwa\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Jiwa\Model\GoodsReceivedNote
     */
    public function goodsReceivedNoteGETRequestGRNIDGet($accept, $grnid, $jiwa_stateful = null)
    {
        list($response) = $this->goodsReceivedNoteGETRequestGRNIDGetWithHttpInfo($accept, $grnid, $jiwa_stateful);
        return $response;
    }

    /**
     * Operation goodsReceivedNoteGETRequestGRNIDGetWithHttpInfo
     *
     * Retrieves a GRN.
     *
     * @param  string $accept Accept Header (required)
     * @param  string $grnid (required)
     * @param  bool $jiwa_stateful Stateful indicator (optional)
     *
     * @throws \Jiwa\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Jiwa\Model\GoodsReceivedNote, HTTP status code, HTTP response headers (array of strings)
     */
    public function goodsReceivedNoteGETRequestGRNIDGetWithHttpInfo($accept, $grnid, $jiwa_stateful = null)
    {
        $returnType = '\Jiwa\Model\GoodsReceivedNote';
        $request = $this->goodsReceivedNoteGETRequestGRNIDGetRequest($accept, $grnid, $jiwa_stateful);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Jiwa\Model\GoodsReceivedNote',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 403:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Jiwa\Model\GoodsReceivedNote',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 404:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Jiwa\Model\GoodsReceivedNote',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 401:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Jiwa\Model\GoodsReceivedNote',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation goodsReceivedNoteGETRequestGRNIDGetAsync
     *
     * Retrieves a GRN.
     *
     * @param  string $accept Accept Header (required)
     * @param  string $grnid (required)
     * @param  bool $jiwa_stateful Stateful indicator (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function goodsReceivedNoteGETRequestGRNIDGetAsync($accept, $grnid, $jiwa_stateful = null)
    {
        return $this->goodsReceivedNoteGETRequestGRNIDGetAsyncWithHttpInfo($accept, $grnid, $jiwa_stateful)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation goodsReceivedNoteGETRequestGRNIDGetAsyncWithHttpInfo
     *
     * Retrieves a GRN.
     *
     * @param  string $accept Accept Header (required)
     * @param  string $grnid (required)
     * @param  bool $jiwa_stateful Stateful indicator (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function goodsReceivedNoteGETRequestGRNIDGetAsyncWithHttpInfo($accept, $grnid, $jiwa_stateful = null)
    {
        $returnType = '\Jiwa\Model\GoodsReceivedNote';
        $request = $this->goodsReceivedNoteGETRequestGRNIDGetRequest($accept, $grnid, $jiwa_stateful);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'goodsReceivedNoteGETRequestGRNIDGet'
     *
     * @param  string $accept Accept Header (required)
     * @param  string $grnid (required)
     * @param  bool $jiwa_stateful Stateful indicator (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function goodsReceivedNoteGETRequestGRNIDGetRequest($accept, $grnid, $jiwa_stateful = null)
    {
        // verify the required parameter 'accept' is set
        if ($accept === null || (is_array($accept) && count($accept) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $accept when calling goodsReceivedNoteGETRequestGRNIDGet'
            );
        }
        // verify the required parameter 'grnid' is set
        if ($grnid === null || (is_array($grnid) && count($grnid) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $grnid when calling goodsReceivedNoteGETRequestGRNIDGet'
            );
        }

        $resourcePath = '/GoodsReceivedNotes/{GRNID}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // header params
        if ($accept !== null) {
            $headerParams['Accept'] = ObjectSerializer::toHeaderValue($accept);
        }
        // header params
        if ($jiwa_stateful !== null) {
            $headerParams['jiwa-stateful'] = ObjectSerializer::toHeaderValue($jiwa_stateful);
        }

        // path params
        if ($grnid !== null) {
            $resourcePath = str_replace(
                '{' . 'GRNID' . '}',
                ObjectSerializer::toPathValue($grnid),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json', 'application/xml']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json', 'application/xml'],
                ['application/x-www-form-urlencoded', 'application/json', 'application/xml']
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            
            if($headers['Content-Type'] === 'application/json') {
                // \stdClass has no __toString(), so we should encode it manually
                if ($httpBody instanceof \stdClass) {
                    $httpBody = \GuzzleHttp\json_encode($httpBody);
                }
                // array has no __toString(), so we should encode it manually
                if(is_array($httpBody)) {
                    $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($httpBody));
                }
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\Query::build($formParams);
            }
        }

        // this endpoint requires HTTP basic authentication
        if ($this->config->getUsername() !== null || $this->config->getPassword() !== null) {
            $headers['Authorization'] = 'Basic ' . base64_encode($this->config->getUsername() . ":" . $this->config->getPassword());
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\Query::build($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation goodsReceivedNoteLineDELETERequestGRNIDLinesLineIDDelete
     *
     * Deletes a line from a goods received note.
     *
     * @param  string $accept Accept Header (required)
     * @param  string $grnid grnid (required)
     * @param  string $line_id line_id (required)
     * @param  bool $jiwa_stateful Stateful indicator (optional)
     * @param  double $quantity_ordered quantity_ordered (optional)
     * @param  double $quantity_delivered quantity_delivered (optional)
     * @param  string $order_id order_id (optional)
     * @param  string $order_no order_no (optional)
     * @param  string $order_line_id order_line_id (optional)
     * @param  double $quantity quantity (optional)
     * @param  string $inventory_id inventory_id (optional)
     * @param  string $part_no part_no (optional)
     * @param  string $aux2 aux2 (optional)
     * @param  string $description description (optional)
     * @param  string $supplier_part_no supplier_part_no (optional)
     * @param  string $grn_line_type grn_line_type (optional)
     * @param  int $quantity_decimal_places quantity_decimal_places (optional)
     * @param  \DateTime $last_saved_date_time last_saved_date_time (optional)
     * @param  string $classification_id classification_id (optional)
     * @param  string $classification_description classification_description (optional)
     * @param  double $tax_amount tax_amount (optional)
     * @param  string $tax_id tax_id (optional)
     * @param  double $tax_rate tax_rate (optional)
     * @param  double $cost cost (optional)
     * @param  double $currency_rate_used currency_rate_used (optional)
     * @param  string $purchasing_classification_id purchasing_classification_id (optional)
     * @param  string $purchasing_classification_description purchasing_classification_description (optional)
     * @param  bool $posted_to_wip posted_to_wip (optional)
     * @param  double $job_charge job_charge (optional)
     * @param  bool $use_serial_no use_serial_no (optional)
     * @param  double $fx_cost fx_cost (optional)
     * @param  bool $physical_item physical_item (optional)
     * @param  string $inventory_expected_liability_ledger_account_id inventory_expected_liability_ledger_account_id (optional)
     * @param  string $inventory_expected_liability_ledger_account_no inventory_expected_liability_ledger_account_no (optional)
     * @param  string $inventory_expected_liability_ledger_account_description inventory_expected_liability_ledger_account_description (optional)
     * @param  string $inventory_expected_asset_ledger_account_id inventory_expected_asset_ledger_account_id (optional)
     * @param  string $inventory_expected_asset_ledger_account_no inventory_expected_asset_ledger_account_no (optional)
     * @param  string $inventory_expected_asset_ledger_account_description inventory_expected_asset_ledger_account_description (optional)
     * @param  string $inventory_delivered_asset_ledger_account_id inventory_delivered_asset_ledger_account_id (optional)
     * @param  string $inventory_delivered_asset_ledger_account_no inventory_delivered_asset_ledger_account_no (optional)
     * @param  string $inventory_delivered_asset_ledger_account_description inventory_delivered_asset_ledger_account_description (optional)
     * @param  string $inventory_value_ledger_account_id inventory_value_ledger_account_id (optional)
     * @param  string $inventory_value_ledger_account_no inventory_value_ledger_account_no (optional)
     * @param  string $inventory_value_ledger_account_description inventory_value_ledger_account_description (optional)
     * @param  string $inventory_delivered_liability_ledger_account_id inventory_delivered_liability_ledger_account_id (optional)
     * @param  string $inventory_delivered_liability_ledger_account_no inventory_delivered_liability_ledger_account_no (optional)
     * @param  string $inventory_delivered_liability_ledger_account_description inventory_delivered_liability_ledger_account_description (optional)
     * @param  string $inventory_wip_ledger_account_id inventory_wip_ledger_account_id (optional)
     * @param  string $inventory_wip_ledger_account_no inventory_wip_ledger_account_no (optional)
     * @param  string $inventory_wip_ledger_account_description inventory_wip_ledger_account_description (optional)
     * @param  \DateTime $po_line_last_saved_date_time po_line_last_saved_date_time (optional)
     * @param  double $order_units order_units (optional)
     * @param  int $item_no item_no (optional)
     * @param  string $in_creditor_rec_id in_creditor_rec_id (optional)
     * @param  string $in_supplier_warehouse_rec_id in_supplier_warehouse_rec_id (optional)
     * @param  string $job_costing_stage_id job_costing_stage_id (optional)
     * @param  string $job_costing_stage_no job_costing_stage_no (optional)
     * @param  string $job_costing_stage_name job_costing_stage_name (optional)
     * @param  string $job_costing_cost_centre_id job_costing_cost_centre_id (optional)
     * @param  string $job_costing_cost_centre_no job_costing_cost_centre_no (optional)
     * @param  string $job_costing_cost_centre_name job_costing_cost_centre_name (optional)
     * @param  string $job_costing_job_id job_costing_job_id (optional)
     * @param  string $job_costing_job_no job_costing_job_no (optional)
     * @param  double $unit_inc_tax unit_inc_tax (optional)
     * @param  double $line_total_inc_tax line_total_inc_tax (optional)
     * @param  double $fx_line_total_ex_tax fx_line_total_ex_tax (optional)
     * @param  int $fx_decimal_places fx_decimal_places (optional)
     * @param  int $home_decimal_places home_decimal_places (optional)
     * @param  bool $use_expiry_date use_expiry_date (optional)
     * @param  string $line_details line_details (optional)
     * @param  string $custom_field_values custom_field_values (optional)
     *
     * @throws \Jiwa\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Jiwa\Model\Object
     */
    public function goodsReceivedNoteLineDELETERequestGRNIDLinesLineIDDelete($accept, $grnid, $line_id, $jiwa_stateful = null, $quantity_ordered = null, $quantity_delivered = null, $order_id = null, $order_no = null, $order_line_id = null, $quantity = null, $inventory_id = null, $part_no = null, $aux2 = null, $description = null, $supplier_part_no = null, $grn_line_type = null, $quantity_decimal_places = null, $last_saved_date_time = null, $classification_id = null, $classification_description = null, $tax_amount = null, $tax_id = null, $tax_rate = null, $cost = null, $currency_rate_used = null, $purchasing_classification_id = null, $purchasing_classification_description = null, $posted_to_wip = null, $job_charge = null, $use_serial_no = null, $fx_cost = null, $physical_item = null, $inventory_expected_liability_ledger_account_id = null, $inventory_expected_liability_ledger_account_no = null, $inventory_expected_liability_ledger_account_description = null, $inventory_expected_asset_ledger_account_id = null, $inventory_expected_asset_ledger_account_no = null, $inventory_expected_asset_ledger_account_description = null, $inventory_delivered_asset_ledger_account_id = null, $inventory_delivered_asset_ledger_account_no = null, $inventory_delivered_asset_ledger_account_description = null, $inventory_value_ledger_account_id = null, $inventory_value_ledger_account_no = null, $inventory_value_ledger_account_description = null, $inventory_delivered_liability_ledger_account_id = null, $inventory_delivered_liability_ledger_account_no = null, $inventory_delivered_liability_ledger_account_description = null, $inventory_wip_ledger_account_id = null, $inventory_wip_ledger_account_no = null, $inventory_wip_ledger_account_description = null, $po_line_last_saved_date_time = null, $order_units = null, $item_no = null, $in_creditor_rec_id = null, $in_supplier_warehouse_rec_id = null, $job_costing_stage_id = null, $job_costing_stage_no = null, $job_costing_stage_name = null, $job_costing_cost_centre_id = null, $job_costing_cost_centre_no = null, $job_costing_cost_centre_name = null, $job_costing_job_id = null, $job_costing_job_no = null, $unit_inc_tax = null, $line_total_inc_tax = null, $fx_line_total_ex_tax = null, $fx_decimal_places = null, $home_decimal_places = null, $use_expiry_date = null, $line_details = null, $custom_field_values = null)
    {
        list($response) = $this->goodsReceivedNoteLineDELETERequestGRNIDLinesLineIDDeleteWithHttpInfo($accept, $grnid, $line_id, $jiwa_stateful, $quantity_ordered, $quantity_delivered, $order_id, $order_no, $order_line_id, $quantity, $inventory_id, $part_no, $aux2, $description, $supplier_part_no, $grn_line_type, $quantity_decimal_places, $last_saved_date_time, $classification_id, $classification_description, $tax_amount, $tax_id, $tax_rate, $cost, $currency_rate_used, $purchasing_classification_id, $purchasing_classification_description, $posted_to_wip, $job_charge, $use_serial_no, $fx_cost, $physical_item, $inventory_expected_liability_ledger_account_id, $inventory_expected_liability_ledger_account_no, $inventory_expected_liability_ledger_account_description, $inventory_expected_asset_ledger_account_id, $inventory_expected_asset_ledger_account_no, $inventory_expected_asset_ledger_account_description, $inventory_delivered_asset_ledger_account_id, $inventory_delivered_asset_ledger_account_no, $inventory_delivered_asset_ledger_account_description, $inventory_value_ledger_account_id, $inventory_value_ledger_account_no, $inventory_value_ledger_account_description, $inventory_delivered_liability_ledger_account_id, $inventory_delivered_liability_ledger_account_no, $inventory_delivered_liability_ledger_account_description, $inventory_wip_ledger_account_id, $inventory_wip_ledger_account_no, $inventory_wip_ledger_account_description, $po_line_last_saved_date_time, $order_units, $item_no, $in_creditor_rec_id, $in_supplier_warehouse_rec_id, $job_costing_stage_id, $job_costing_stage_no, $job_costing_stage_name, $job_costing_cost_centre_id, $job_costing_cost_centre_no, $job_costing_cost_centre_name, $job_costing_job_id, $job_costing_job_no, $unit_inc_tax, $line_total_inc_tax, $fx_line_total_ex_tax, $fx_decimal_places, $home_decimal_places, $use_expiry_date, $line_details, $custom_field_values);
        return $response;
    }

    /**
     * Operation goodsReceivedNoteLineDELETERequestGRNIDLinesLineIDDeleteWithHttpInfo
     *
     * Deletes a line from a goods received note.
     *
     * @param  string $accept Accept Header (required)
     * @param  string $grnid (required)
     * @param  string $line_id (required)
     * @param  bool $jiwa_stateful Stateful indicator (optional)
     * @param  double $quantity_ordered (optional)
     * @param  double $quantity_delivered (optional)
     * @param  string $order_id (optional)
     * @param  string $order_no (optional)
     * @param  string $order_line_id (optional)
     * @param  double $quantity (optional)
     * @param  string $inventory_id (optional)
     * @param  string $part_no (optional)
     * @param  string $aux2 (optional)
     * @param  string $description (optional)
     * @param  string $supplier_part_no (optional)
     * @param  string $grn_line_type (optional)
     * @param  int $quantity_decimal_places (optional)
     * @param  \DateTime $last_saved_date_time (optional)
     * @param  string $classification_id (optional)
     * @param  string $classification_description (optional)
     * @param  double $tax_amount (optional)
     * @param  string $tax_id (optional)
     * @param  double $tax_rate (optional)
     * @param  double $cost (optional)
     * @param  double $currency_rate_used (optional)
     * @param  string $purchasing_classification_id (optional)
     * @param  string $purchasing_classification_description (optional)
     * @param  bool $posted_to_wip (optional)
     * @param  double $job_charge (optional)
     * @param  bool $use_serial_no (optional)
     * @param  double $fx_cost (optional)
     * @param  bool $physical_item (optional)
     * @param  string $inventory_expected_liability_ledger_account_id (optional)
     * @param  string $inventory_expected_liability_ledger_account_no (optional)
     * @param  string $inventory_expected_liability_ledger_account_description (optional)
     * @param  string $inventory_expected_asset_ledger_account_id (optional)
     * @param  string $inventory_expected_asset_ledger_account_no (optional)
     * @param  string $inventory_expected_asset_ledger_account_description (optional)
     * @param  string $inventory_delivered_asset_ledger_account_id (optional)
     * @param  string $inventory_delivered_asset_ledger_account_no (optional)
     * @param  string $inventory_delivered_asset_ledger_account_description (optional)
     * @param  string $inventory_value_ledger_account_id (optional)
     * @param  string $inventory_value_ledger_account_no (optional)
     * @param  string $inventory_value_ledger_account_description (optional)
     * @param  string $inventory_delivered_liability_ledger_account_id (optional)
     * @param  string $inventory_delivered_liability_ledger_account_no (optional)
     * @param  string $inventory_delivered_liability_ledger_account_description (optional)
     * @param  string $inventory_wip_ledger_account_id (optional)
     * @param  string $inventory_wip_ledger_account_no (optional)
     * @param  string $inventory_wip_ledger_account_description (optional)
     * @param  \DateTime $po_line_last_saved_date_time (optional)
     * @param  double $order_units (optional)
     * @param  int $item_no (optional)
     * @param  string $in_creditor_rec_id (optional)
     * @param  string $in_supplier_warehouse_rec_id (optional)
     * @param  string $job_costing_stage_id (optional)
     * @param  string $job_costing_stage_no (optional)
     * @param  string $job_costing_stage_name (optional)
     * @param  string $job_costing_cost_centre_id (optional)
     * @param  string $job_costing_cost_centre_no (optional)
     * @param  string $job_costing_cost_centre_name (optional)
     * @param  string $job_costing_job_id (optional)
     * @param  string $job_costing_job_no (optional)
     * @param  double $unit_inc_tax (optional)
     * @param  double $line_total_inc_tax (optional)
     * @param  double $fx_line_total_ex_tax (optional)
     * @param  int $fx_decimal_places (optional)
     * @param  int $home_decimal_places (optional)
     * @param  bool $use_expiry_date (optional)
     * @param  string $line_details (optional)
     * @param  string $custom_field_values (optional)
     *
     * @throws \Jiwa\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Jiwa\Model\Object, HTTP status code, HTTP response headers (array of strings)
     */
    public function goodsReceivedNoteLineDELETERequestGRNIDLinesLineIDDeleteWithHttpInfo($accept, $grnid, $line_id, $jiwa_stateful = null, $quantity_ordered = null, $quantity_delivered = null, $order_id = null, $order_no = null, $order_line_id = null, $quantity = null, $inventory_id = null, $part_no = null, $aux2 = null, $description = null, $supplier_part_no = null, $grn_line_type = null, $quantity_decimal_places = null, $last_saved_date_time = null, $classification_id = null, $classification_description = null, $tax_amount = null, $tax_id = null, $tax_rate = null, $cost = null, $currency_rate_used = null, $purchasing_classification_id = null, $purchasing_classification_description = null, $posted_to_wip = null, $job_charge = null, $use_serial_no = null, $fx_cost = null, $physical_item = null, $inventory_expected_liability_ledger_account_id = null, $inventory_expected_liability_ledger_account_no = null, $inventory_expected_liability_ledger_account_description = null, $inventory_expected_asset_ledger_account_id = null, $inventory_expected_asset_ledger_account_no = null, $inventory_expected_asset_ledger_account_description = null, $inventory_delivered_asset_ledger_account_id = null, $inventory_delivered_asset_ledger_account_no = null, $inventory_delivered_asset_ledger_account_description = null, $inventory_value_ledger_account_id = null, $inventory_value_ledger_account_no = null, $inventory_value_ledger_account_description = null, $inventory_delivered_liability_ledger_account_id = null, $inventory_delivered_liability_ledger_account_no = null, $inventory_delivered_liability_ledger_account_description = null, $inventory_wip_ledger_account_id = null, $inventory_wip_ledger_account_no = null, $inventory_wip_ledger_account_description = null, $po_line_last_saved_date_time = null, $order_units = null, $item_no = null, $in_creditor_rec_id = null, $in_supplier_warehouse_rec_id = null, $job_costing_stage_id = null, $job_costing_stage_no = null, $job_costing_stage_name = null, $job_costing_cost_centre_id = null, $job_costing_cost_centre_no = null, $job_costing_cost_centre_name = null, $job_costing_job_id = null, $job_costing_job_no = null, $unit_inc_tax = null, $line_total_inc_tax = null, $fx_line_total_ex_tax = null, $fx_decimal_places = null, $home_decimal_places = null, $use_expiry_date = null, $line_details = null, $custom_field_values = null)
    {
        $returnType = '\Jiwa\Model\Object';
        $request = $this->goodsReceivedNoteLineDELETERequestGRNIDLinesLineIDDeleteRequest($accept, $grnid, $line_id, $jiwa_stateful, $quantity_ordered, $quantity_delivered, $order_id, $order_no, $order_line_id, $quantity, $inventory_id, $part_no, $aux2, $description, $supplier_part_no, $grn_line_type, $quantity_decimal_places, $last_saved_date_time, $classification_id, $classification_description, $tax_amount, $tax_id, $tax_rate, $cost, $currency_rate_used, $purchasing_classification_id, $purchasing_classification_description, $posted_to_wip, $job_charge, $use_serial_no, $fx_cost, $physical_item, $inventory_expected_liability_ledger_account_id, $inventory_expected_liability_ledger_account_no, $inventory_expected_liability_ledger_account_description, $inventory_expected_asset_ledger_account_id, $inventory_expected_asset_ledger_account_no, $inventory_expected_asset_ledger_account_description, $inventory_delivered_asset_ledger_account_id, $inventory_delivered_asset_ledger_account_no, $inventory_delivered_asset_ledger_account_description, $inventory_value_ledger_account_id, $inventory_value_ledger_account_no, $inventory_value_ledger_account_description, $inventory_delivered_liability_ledger_account_id, $inventory_delivered_liability_ledger_account_no, $inventory_delivered_liability_ledger_account_description, $inventory_wip_ledger_account_id, $inventory_wip_ledger_account_no, $inventory_wip_ledger_account_description, $po_line_last_saved_date_time, $order_units, $item_no, $in_creditor_rec_id, $in_supplier_warehouse_rec_id, $job_costing_stage_id, $job_costing_stage_no, $job_costing_stage_name, $job_costing_cost_centre_id, $job_costing_cost_centre_no, $job_costing_cost_centre_name, $job_costing_job_id, $job_costing_job_no, $unit_inc_tax, $line_total_inc_tax, $fx_line_total_ex_tax, $fx_decimal_places, $home_decimal_places, $use_expiry_date, $line_details, $custom_field_values);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Jiwa\Model\Object',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 404:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Jiwa\Model\Object',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 204:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Jiwa\Model\Object',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 401:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Jiwa\Model\Object',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 403:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Jiwa\Model\Object',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation goodsReceivedNoteLineDELETERequestGRNIDLinesLineIDDeleteAsync
     *
     * Deletes a line from a goods received note.
     *
     * @param  string $accept Accept Header (required)
     * @param  string $grnid (required)
     * @param  string $line_id (required)
     * @param  bool $jiwa_stateful Stateful indicator (optional)
     * @param  double $quantity_ordered (optional)
     * @param  double $quantity_delivered (optional)
     * @param  string $order_id (optional)
     * @param  string $order_no (optional)
     * @param  string $order_line_id (optional)
     * @param  double $quantity (optional)
     * @param  string $inventory_id (optional)
     * @param  string $part_no (optional)
     * @param  string $aux2 (optional)
     * @param  string $description (optional)
     * @param  string $supplier_part_no (optional)
     * @param  string $grn_line_type (optional)
     * @param  int $quantity_decimal_places (optional)
     * @param  \DateTime $last_saved_date_time (optional)
     * @param  string $classification_id (optional)
     * @param  string $classification_description (optional)
     * @param  double $tax_amount (optional)
     * @param  string $tax_id (optional)
     * @param  double $tax_rate (optional)
     * @param  double $cost (optional)
     * @param  double $currency_rate_used (optional)
     * @param  string $purchasing_classification_id (optional)
     * @param  string $purchasing_classification_description (optional)
     * @param  bool $posted_to_wip (optional)
     * @param  double $job_charge (optional)
     * @param  bool $use_serial_no (optional)
     * @param  double $fx_cost (optional)
     * @param  bool $physical_item (optional)
     * @param  string $inventory_expected_liability_ledger_account_id (optional)
     * @param  string $inventory_expected_liability_ledger_account_no (optional)
     * @param  string $inventory_expected_liability_ledger_account_description (optional)
     * @param  string $inventory_expected_asset_ledger_account_id (optional)
     * @param  string $inventory_expected_asset_ledger_account_no (optional)
     * @param  string $inventory_expected_asset_ledger_account_description (optional)
     * @param  string $inventory_delivered_asset_ledger_account_id (optional)
     * @param  string $inventory_delivered_asset_ledger_account_no (optional)
     * @param  string $inventory_delivered_asset_ledger_account_description (optional)
     * @param  string $inventory_value_ledger_account_id (optional)
     * @param  string $inventory_value_ledger_account_no (optional)
     * @param  string $inventory_value_ledger_account_description (optional)
     * @param  string $inventory_delivered_liability_ledger_account_id (optional)
     * @param  string $inventory_delivered_liability_ledger_account_no (optional)
     * @param  string $inventory_delivered_liability_ledger_account_description (optional)
     * @param  string $inventory_wip_ledger_account_id (optional)
     * @param  string $inventory_wip_ledger_account_no (optional)
     * @param  string $inventory_wip_ledger_account_description (optional)
     * @param  \DateTime $po_line_last_saved_date_time (optional)
     * @param  double $order_units (optional)
     * @param  int $item_no (optional)
     * @param  string $in_creditor_rec_id (optional)
     * @param  string $in_supplier_warehouse_rec_id (optional)
     * @param  string $job_costing_stage_id (optional)
     * @param  string $job_costing_stage_no (optional)
     * @param  string $job_costing_stage_name (optional)
     * @param  string $job_costing_cost_centre_id (optional)
     * @param  string $job_costing_cost_centre_no (optional)
     * @param  string $job_costing_cost_centre_name (optional)
     * @param  string $job_costing_job_id (optional)
     * @param  string $job_costing_job_no (optional)
     * @param  double $unit_inc_tax (optional)
     * @param  double $line_total_inc_tax (optional)
     * @param  double $fx_line_total_ex_tax (optional)
     * @param  int $fx_decimal_places (optional)
     * @param  int $home_decimal_places (optional)
     * @param  bool $use_expiry_date (optional)
     * @param  string $line_details (optional)
     * @param  string $custom_field_values (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function goodsReceivedNoteLineDELETERequestGRNIDLinesLineIDDeleteAsync($accept, $grnid, $line_id, $jiwa_stateful = null, $quantity_ordered = null, $quantity_delivered = null, $order_id = null, $order_no = null, $order_line_id = null, $quantity = null, $inventory_id = null, $part_no = null, $aux2 = null, $description = null, $supplier_part_no = null, $grn_line_type = null, $quantity_decimal_places = null, $last_saved_date_time = null, $classification_id = null, $classification_description = null, $tax_amount = null, $tax_id = null, $tax_rate = null, $cost = null, $currency_rate_used = null, $purchasing_classification_id = null, $purchasing_classification_description = null, $posted_to_wip = null, $job_charge = null, $use_serial_no = null, $fx_cost = null, $physical_item = null, $inventory_expected_liability_ledger_account_id = null, $inventory_expected_liability_ledger_account_no = null, $inventory_expected_liability_ledger_account_description = null, $inventory_expected_asset_ledger_account_id = null, $inventory_expected_asset_ledger_account_no = null, $inventory_expected_asset_ledger_account_description = null, $inventory_delivered_asset_ledger_account_id = null, $inventory_delivered_asset_ledger_account_no = null, $inventory_delivered_asset_ledger_account_description = null, $inventory_value_ledger_account_id = null, $inventory_value_ledger_account_no = null, $inventory_value_ledger_account_description = null, $inventory_delivered_liability_ledger_account_id = null, $inventory_delivered_liability_ledger_account_no = null, $inventory_delivered_liability_ledger_account_description = null, $inventory_wip_ledger_account_id = null, $inventory_wip_ledger_account_no = null, $inventory_wip_ledger_account_description = null, $po_line_last_saved_date_time = null, $order_units = null, $item_no = null, $in_creditor_rec_id = null, $in_supplier_warehouse_rec_id = null, $job_costing_stage_id = null, $job_costing_stage_no = null, $job_costing_stage_name = null, $job_costing_cost_centre_id = null, $job_costing_cost_centre_no = null, $job_costing_cost_centre_name = null, $job_costing_job_id = null, $job_costing_job_no = null, $unit_inc_tax = null, $line_total_inc_tax = null, $fx_line_total_ex_tax = null, $fx_decimal_places = null, $home_decimal_places = null, $use_expiry_date = null, $line_details = null, $custom_field_values = null)
    {
        return $this->goodsReceivedNoteLineDELETERequestGRNIDLinesLineIDDeleteAsyncWithHttpInfo($accept, $grnid, $line_id, $jiwa_stateful, $quantity_ordered, $quantity_delivered, $order_id, $order_no, $order_line_id, $quantity, $inventory_id, $part_no, $aux2, $description, $supplier_part_no, $grn_line_type, $quantity_decimal_places, $last_saved_date_time, $classification_id, $classification_description, $tax_amount, $tax_id, $tax_rate, $cost, $currency_rate_used, $purchasing_classification_id, $purchasing_classification_description, $posted_to_wip, $job_charge, $use_serial_no, $fx_cost, $physical_item, $inventory_expected_liability_ledger_account_id, $inventory_expected_liability_ledger_account_no, $inventory_expected_liability_ledger_account_description, $inventory_expected_asset_ledger_account_id, $inventory_expected_asset_ledger_account_no, $inventory_expected_asset_ledger_account_description, $inventory_delivered_asset_ledger_account_id, $inventory_delivered_asset_ledger_account_no, $inventory_delivered_asset_ledger_account_description, $inventory_value_ledger_account_id, $inventory_value_ledger_account_no, $inventory_value_ledger_account_description, $inventory_delivered_liability_ledger_account_id, $inventory_delivered_liability_ledger_account_no, $inventory_delivered_liability_ledger_account_description, $inventory_wip_ledger_account_id, $inventory_wip_ledger_account_no, $inventory_wip_ledger_account_description, $po_line_last_saved_date_time, $order_units, $item_no, $in_creditor_rec_id, $in_supplier_warehouse_rec_id, $job_costing_stage_id, $job_costing_stage_no, $job_costing_stage_name, $job_costing_cost_centre_id, $job_costing_cost_centre_no, $job_costing_cost_centre_name, $job_costing_job_id, $job_costing_job_no, $unit_inc_tax, $line_total_inc_tax, $fx_line_total_ex_tax, $fx_decimal_places, $home_decimal_places, $use_expiry_date, $line_details, $custom_field_values)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation goodsReceivedNoteLineDELETERequestGRNIDLinesLineIDDeleteAsyncWithHttpInfo
     *
     * Deletes a line from a goods received note.
     *
     * @param  string $accept Accept Header (required)
     * @param  string $grnid (required)
     * @param  string $line_id (required)
     * @param  bool $jiwa_stateful Stateful indicator (optional)
     * @param  double $quantity_ordered (optional)
     * @param  double $quantity_delivered (optional)
     * @param  string $order_id (optional)
     * @param  string $order_no (optional)
     * @param  string $order_line_id (optional)
     * @param  double $quantity (optional)
     * @param  string $inventory_id (optional)
     * @param  string $part_no (optional)
     * @param  string $aux2 (optional)
     * @param  string $description (optional)
     * @param  string $supplier_part_no (optional)
     * @param  string $grn_line_type (optional)
     * @param  int $quantity_decimal_places (optional)
     * @param  \DateTime $last_saved_date_time (optional)
     * @param  string $classification_id (optional)
     * @param  string $classification_description (optional)
     * @param  double $tax_amount (optional)
     * @param  string $tax_id (optional)
     * @param  double $tax_rate (optional)
     * @param  double $cost (optional)
     * @param  double $currency_rate_used (optional)
     * @param  string $purchasing_classification_id (optional)
     * @param  string $purchasing_classification_description (optional)
     * @param  bool $posted_to_wip (optional)
     * @param  double $job_charge (optional)
     * @param  bool $use_serial_no (optional)
     * @param  double $fx_cost (optional)
     * @param  bool $physical_item (optional)
     * @param  string $inventory_expected_liability_ledger_account_id (optional)
     * @param  string $inventory_expected_liability_ledger_account_no (optional)
     * @param  string $inventory_expected_liability_ledger_account_description (optional)
     * @param  string $inventory_expected_asset_ledger_account_id (optional)
     * @param  string $inventory_expected_asset_ledger_account_no (optional)
     * @param  string $inventory_expected_asset_ledger_account_description (optional)
     * @param  string $inventory_delivered_asset_ledger_account_id (optional)
     * @param  string $inventory_delivered_asset_ledger_account_no (optional)
     * @param  string $inventory_delivered_asset_ledger_account_description (optional)
     * @param  string $inventory_value_ledger_account_id (optional)
     * @param  string $inventory_value_ledger_account_no (optional)
     * @param  string $inventory_value_ledger_account_description (optional)
     * @param  string $inventory_delivered_liability_ledger_account_id (optional)
     * @param  string $inventory_delivered_liability_ledger_account_no (optional)
     * @param  string $inventory_delivered_liability_ledger_account_description (optional)
     * @param  string $inventory_wip_ledger_account_id (optional)
     * @param  string $inventory_wip_ledger_account_no (optional)
     * @param  string $inventory_wip_ledger_account_description (optional)
     * @param  \DateTime $po_line_last_saved_date_time (optional)
     * @param  double $order_units (optional)
     * @param  int $item_no (optional)
     * @param  string $in_creditor_rec_id (optional)
     * @param  string $in_supplier_warehouse_rec_id (optional)
     * @param  string $job_costing_stage_id (optional)
     * @param  string $job_costing_stage_no (optional)
     * @param  string $job_costing_stage_name (optional)
     * @param  string $job_costing_cost_centre_id (optional)
     * @param  string $job_costing_cost_centre_no (optional)
     * @param  string $job_costing_cost_centre_name (optional)
     * @param  string $job_costing_job_id (optional)
     * @param  string $job_costing_job_no (optional)
     * @param  double $unit_inc_tax (optional)
     * @param  double $line_total_inc_tax (optional)
     * @param  double $fx_line_total_ex_tax (optional)
     * @param  int $fx_decimal_places (optional)
     * @param  int $home_decimal_places (optional)
     * @param  bool $use_expiry_date (optional)
     * @param  string $line_details (optional)
     * @param  string $custom_field_values (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function goodsReceivedNoteLineDELETERequestGRNIDLinesLineIDDeleteAsyncWithHttpInfo($accept, $grnid, $line_id, $jiwa_stateful = null, $quantity_ordered = null, $quantity_delivered = null, $order_id = null, $order_no = null, $order_line_id = null, $quantity = null, $inventory_id = null, $part_no = null, $aux2 = null, $description = null, $supplier_part_no = null, $grn_line_type = null, $quantity_decimal_places = null, $last_saved_date_time = null, $classification_id = null, $classification_description = null, $tax_amount = null, $tax_id = null, $tax_rate = null, $cost = null, $currency_rate_used = null, $purchasing_classification_id = null, $purchasing_classification_description = null, $posted_to_wip = null, $job_charge = null, $use_serial_no = null, $fx_cost = null, $physical_item = null, $inventory_expected_liability_ledger_account_id = null, $inventory_expected_liability_ledger_account_no = null, $inventory_expected_liability_ledger_account_description = null, $inventory_expected_asset_ledger_account_id = null, $inventory_expected_asset_ledger_account_no = null, $inventory_expected_asset_ledger_account_description = null, $inventory_delivered_asset_ledger_account_id = null, $inventory_delivered_asset_ledger_account_no = null, $inventory_delivered_asset_ledger_account_description = null, $inventory_value_ledger_account_id = null, $inventory_value_ledger_account_no = null, $inventory_value_ledger_account_description = null, $inventory_delivered_liability_ledger_account_id = null, $inventory_delivered_liability_ledger_account_no = null, $inventory_delivered_liability_ledger_account_description = null, $inventory_wip_ledger_account_id = null, $inventory_wip_ledger_account_no = null, $inventory_wip_ledger_account_description = null, $po_line_last_saved_date_time = null, $order_units = null, $item_no = null, $in_creditor_rec_id = null, $in_supplier_warehouse_rec_id = null, $job_costing_stage_id = null, $job_costing_stage_no = null, $job_costing_stage_name = null, $job_costing_cost_centre_id = null, $job_costing_cost_centre_no = null, $job_costing_cost_centre_name = null, $job_costing_job_id = null, $job_costing_job_no = null, $unit_inc_tax = null, $line_total_inc_tax = null, $fx_line_total_ex_tax = null, $fx_decimal_places = null, $home_decimal_places = null, $use_expiry_date = null, $line_details = null, $custom_field_values = null)
    {
        $returnType = '\Jiwa\Model\Object';
        $request = $this->goodsReceivedNoteLineDELETERequestGRNIDLinesLineIDDeleteRequest($accept, $grnid, $line_id, $jiwa_stateful, $quantity_ordered, $quantity_delivered, $order_id, $order_no, $order_line_id, $quantity, $inventory_id, $part_no, $aux2, $description, $supplier_part_no, $grn_line_type, $quantity_decimal_places, $last_saved_date_time, $classification_id, $classification_description, $tax_amount, $tax_id, $tax_rate, $cost, $currency_rate_used, $purchasing_classification_id, $purchasing_classification_description, $posted_to_wip, $job_charge, $use_serial_no, $fx_cost, $physical_item, $inventory_expected_liability_ledger_account_id, $inventory_expected_liability_ledger_account_no, $inventory_expected_liability_ledger_account_description, $inventory_expected_asset_ledger_account_id, $inventory_expected_asset_ledger_account_no, $inventory_expected_asset_ledger_account_description, $inventory_delivered_asset_ledger_account_id, $inventory_delivered_asset_ledger_account_no, $inventory_delivered_asset_ledger_account_description, $inventory_value_ledger_account_id, $inventory_value_ledger_account_no, $inventory_value_ledger_account_description, $inventory_delivered_liability_ledger_account_id, $inventory_delivered_liability_ledger_account_no, $inventory_delivered_liability_ledger_account_description, $inventory_wip_ledger_account_id, $inventory_wip_ledger_account_no, $inventory_wip_ledger_account_description, $po_line_last_saved_date_time, $order_units, $item_no, $in_creditor_rec_id, $in_supplier_warehouse_rec_id, $job_costing_stage_id, $job_costing_stage_no, $job_costing_stage_name, $job_costing_cost_centre_id, $job_costing_cost_centre_no, $job_costing_cost_centre_name, $job_costing_job_id, $job_costing_job_no, $unit_inc_tax, $line_total_inc_tax, $fx_line_total_ex_tax, $fx_decimal_places, $home_decimal_places, $use_expiry_date, $line_details, $custom_field_values);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'goodsReceivedNoteLineDELETERequestGRNIDLinesLineIDDelete'
     *
     * @param  string $accept Accept Header (required)
     * @param  string $grnid (required)
     * @param  string $line_id (required)
     * @param  bool $jiwa_stateful Stateful indicator (optional)
     * @param  double $quantity_ordered (optional)
     * @param  double $quantity_delivered (optional)
     * @param  string $order_id (optional)
     * @param  string $order_no (optional)
     * @param  string $order_line_id (optional)
     * @param  double $quantity (optional)
     * @param  string $inventory_id (optional)
     * @param  string $part_no (optional)
     * @param  string $aux2 (optional)
     * @param  string $description (optional)
     * @param  string $supplier_part_no (optional)
     * @param  string $grn_line_type (optional)
     * @param  int $quantity_decimal_places (optional)
     * @param  \DateTime $last_saved_date_time (optional)
     * @param  string $classification_id (optional)
     * @param  string $classification_description (optional)
     * @param  double $tax_amount (optional)
     * @param  string $tax_id (optional)
     * @param  double $tax_rate (optional)
     * @param  double $cost (optional)
     * @param  double $currency_rate_used (optional)
     * @param  string $purchasing_classification_id (optional)
     * @param  string $purchasing_classification_description (optional)
     * @param  bool $posted_to_wip (optional)
     * @param  double $job_charge (optional)
     * @param  bool $use_serial_no (optional)
     * @param  double $fx_cost (optional)
     * @param  bool $physical_item (optional)
     * @param  string $inventory_expected_liability_ledger_account_id (optional)
     * @param  string $inventory_expected_liability_ledger_account_no (optional)
     * @param  string $inventory_expected_liability_ledger_account_description (optional)
     * @param  string $inventory_expected_asset_ledger_account_id (optional)
     * @param  string $inventory_expected_asset_ledger_account_no (optional)
     * @param  string $inventory_expected_asset_ledger_account_description (optional)
     * @param  string $inventory_delivered_asset_ledger_account_id (optional)
     * @param  string $inventory_delivered_asset_ledger_account_no (optional)
     * @param  string $inventory_delivered_asset_ledger_account_description (optional)
     * @param  string $inventory_value_ledger_account_id (optional)
     * @param  string $inventory_value_ledger_account_no (optional)
     * @param  string $inventory_value_ledger_account_description (optional)
     * @param  string $inventory_delivered_liability_ledger_account_id (optional)
     * @param  string $inventory_delivered_liability_ledger_account_no (optional)
     * @param  string $inventory_delivered_liability_ledger_account_description (optional)
     * @param  string $inventory_wip_ledger_account_id (optional)
     * @param  string $inventory_wip_ledger_account_no (optional)
     * @param  string $inventory_wip_ledger_account_description (optional)
     * @param  \DateTime $po_line_last_saved_date_time (optional)
     * @param  double $order_units (optional)
     * @param  int $item_no (optional)
     * @param  string $in_creditor_rec_id (optional)
     * @param  string $in_supplier_warehouse_rec_id (optional)
     * @param  string $job_costing_stage_id (optional)
     * @param  string $job_costing_stage_no (optional)
     * @param  string $job_costing_stage_name (optional)
     * @param  string $job_costing_cost_centre_id (optional)
     * @param  string $job_costing_cost_centre_no (optional)
     * @param  string $job_costing_cost_centre_name (optional)
     * @param  string $job_costing_job_id (optional)
     * @param  string $job_costing_job_no (optional)
     * @param  double $unit_inc_tax (optional)
     * @param  double $line_total_inc_tax (optional)
     * @param  double $fx_line_total_ex_tax (optional)
     * @param  int $fx_decimal_places (optional)
     * @param  int $home_decimal_places (optional)
     * @param  bool $use_expiry_date (optional)
     * @param  string $line_details (optional)
     * @param  string $custom_field_values (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function goodsReceivedNoteLineDELETERequestGRNIDLinesLineIDDeleteRequest($accept, $grnid, $line_id, $jiwa_stateful = null, $quantity_ordered = null, $quantity_delivered = null, $order_id = null, $order_no = null, $order_line_id = null, $quantity = null, $inventory_id = null, $part_no = null, $aux2 = null, $description = null, $supplier_part_no = null, $grn_line_type = null, $quantity_decimal_places = null, $last_saved_date_time = null, $classification_id = null, $classification_description = null, $tax_amount = null, $tax_id = null, $tax_rate = null, $cost = null, $currency_rate_used = null, $purchasing_classification_id = null, $purchasing_classification_description = null, $posted_to_wip = null, $job_charge = null, $use_serial_no = null, $fx_cost = null, $physical_item = null, $inventory_expected_liability_ledger_account_id = null, $inventory_expected_liability_ledger_account_no = null, $inventory_expected_liability_ledger_account_description = null, $inventory_expected_asset_ledger_account_id = null, $inventory_expected_asset_ledger_account_no = null, $inventory_expected_asset_ledger_account_description = null, $inventory_delivered_asset_ledger_account_id = null, $inventory_delivered_asset_ledger_account_no = null, $inventory_delivered_asset_ledger_account_description = null, $inventory_value_ledger_account_id = null, $inventory_value_ledger_account_no = null, $inventory_value_ledger_account_description = null, $inventory_delivered_liability_ledger_account_id = null, $inventory_delivered_liability_ledger_account_no = null, $inventory_delivered_liability_ledger_account_description = null, $inventory_wip_ledger_account_id = null, $inventory_wip_ledger_account_no = null, $inventory_wip_ledger_account_description = null, $po_line_last_saved_date_time = null, $order_units = null, $item_no = null, $in_creditor_rec_id = null, $in_supplier_warehouse_rec_id = null, $job_costing_stage_id = null, $job_costing_stage_no = null, $job_costing_stage_name = null, $job_costing_cost_centre_id = null, $job_costing_cost_centre_no = null, $job_costing_cost_centre_name = null, $job_costing_job_id = null, $job_costing_job_no = null, $unit_inc_tax = null, $line_total_inc_tax = null, $fx_line_total_ex_tax = null, $fx_decimal_places = null, $home_decimal_places = null, $use_expiry_date = null, $line_details = null, $custom_field_values = null)
    {
        // verify the required parameter 'accept' is set
        if ($accept === null || (is_array($accept) && count($accept) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $accept when calling goodsReceivedNoteLineDELETERequestGRNIDLinesLineIDDelete'
            );
        }
        // verify the required parameter 'grnid' is set
        if ($grnid === null || (is_array($grnid) && count($grnid) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $grnid when calling goodsReceivedNoteLineDELETERequestGRNIDLinesLineIDDelete'
            );
        }
        // verify the required parameter 'line_id' is set
        if ($line_id === null || (is_array($line_id) && count($line_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $line_id when calling goodsReceivedNoteLineDELETERequestGRNIDLinesLineIDDelete'
            );
        }

        $resourcePath = '/GoodsReceivedNotes/{GRNID}/Lines/{LineID}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        if ($quantity_ordered !== null) {
            $queryParams['QuantityOrdered'] = ObjectSerializer::toQueryValue($quantity_ordered);
        }
        // query params
        if ($quantity_delivered !== null) {
            $queryParams['QuantityDelivered'] = ObjectSerializer::toQueryValue($quantity_delivered);
        }
        // query params
        if ($order_id !== null) {
            $queryParams['OrderID'] = ObjectSerializer::toQueryValue($order_id);
        }
        // query params
        if ($order_no !== null) {
            $queryParams['OrderNo'] = ObjectSerializer::toQueryValue($order_no);
        }
        // query params
        if ($order_line_id !== null) {
            $queryParams['OrderLineID'] = ObjectSerializer::toQueryValue($order_line_id);
        }
        // query params
        if ($quantity !== null) {
            $queryParams['Quantity'] = ObjectSerializer::toQueryValue($quantity);
        }
        // query params
        if ($inventory_id !== null) {
            $queryParams['InventoryID'] = ObjectSerializer::toQueryValue($inventory_id);
        }
        // query params
        if ($part_no !== null) {
            $queryParams['PartNo'] = ObjectSerializer::toQueryValue($part_no);
        }
        // query params
        if ($aux2 !== null) {
            $queryParams['Aux2'] = ObjectSerializer::toQueryValue($aux2);
        }
        // query params
        if ($description !== null) {
            $queryParams['Description'] = ObjectSerializer::toQueryValue($description);
        }
        // query params
        if ($supplier_part_no !== null) {
            $queryParams['SupplierPartNo'] = ObjectSerializer::toQueryValue($supplier_part_no);
        }
        // query params
        if ($grn_line_type !== null) {
            $queryParams['GRNLineType'] = ObjectSerializer::toQueryValue($grn_line_type);
        }
        // query params
        if ($quantity_decimal_places !== null) {
            $queryParams['QuantityDecimalPlaces'] = ObjectSerializer::toQueryValue($quantity_decimal_places);
        }
        // query params
        if ($last_saved_date_time !== null) {
            $queryParams['LastSavedDateTime'] = ObjectSerializer::toQueryValue($last_saved_date_time);
        }
        // query params
        if ($classification_id !== null) {
            $queryParams['ClassificationID'] = ObjectSerializer::toQueryValue($classification_id);
        }
        // query params
        if ($classification_description !== null) {
            $queryParams['ClassificationDescription'] = ObjectSerializer::toQueryValue($classification_description);
        }
        // query params
        if ($tax_amount !== null) {
            $queryParams['TaxAmount'] = ObjectSerializer::toQueryValue($tax_amount);
        }
        // query params
        if ($tax_id !== null) {
            $queryParams['TaxID'] = ObjectSerializer::toQueryValue($tax_id);
        }
        // query params
        if ($tax_rate !== null) {
            $queryParams['TaxRate'] = ObjectSerializer::toQueryValue($tax_rate);
        }
        // query params
        if ($cost !== null) {
            $queryParams['Cost'] = ObjectSerializer::toQueryValue($cost);
        }
        // query params
        if ($currency_rate_used !== null) {
            $queryParams['CurrencyRateUsed'] = ObjectSerializer::toQueryValue($currency_rate_used);
        }
        // query params
        if ($purchasing_classification_id !== null) {
            $queryParams['PurchasingClassificationID'] = ObjectSerializer::toQueryValue($purchasing_classification_id);
        }
        // query params
        if ($purchasing_classification_description !== null) {
            $queryParams['PurchasingClassificationDescription'] = ObjectSerializer::toQueryValue($purchasing_classification_description);
        }
        // query params
        if ($posted_to_wip !== null) {
            $queryParams['PostedToWIP'] = ObjectSerializer::toQueryValue($posted_to_wip);
        }
        // query params
        if ($job_charge !== null) {
            $queryParams['JobCharge'] = ObjectSerializer::toQueryValue($job_charge);
        }
        // query params
        if ($use_serial_no !== null) {
            $queryParams['UseSerialNo'] = ObjectSerializer::toQueryValue($use_serial_no);
        }
        // query params
        if ($fx_cost !== null) {
            $queryParams['FXCost'] = ObjectSerializer::toQueryValue($fx_cost);
        }
        // query params
        if ($physical_item !== null) {
            $queryParams['PhysicalItem'] = ObjectSerializer::toQueryValue($physical_item);
        }
        // query params
        if ($inventory_expected_liability_ledger_account_id !== null) {
            $queryParams['InventoryExpectedLiability_LedgerAccountID'] = ObjectSerializer::toQueryValue($inventory_expected_liability_ledger_account_id);
        }
        // query params
        if ($inventory_expected_liability_ledger_account_no !== null) {
            $queryParams['InventoryExpectedLiability_LedgerAccountNo'] = ObjectSerializer::toQueryValue($inventory_expected_liability_ledger_account_no);
        }
        // query params
        if ($inventory_expected_liability_ledger_account_description !== null) {
            $queryParams['InventoryExpectedLiability_LedgerAccountDescription'] = ObjectSerializer::toQueryValue($inventory_expected_liability_ledger_account_description);
        }
        // query params
        if ($inventory_expected_asset_ledger_account_id !== null) {
            $queryParams['InventoryExpectedAsset_LedgerAccountID'] = ObjectSerializer::toQueryValue($inventory_expected_asset_ledger_account_id);
        }
        // query params
        if ($inventory_expected_asset_ledger_account_no !== null) {
            $queryParams['InventoryExpectedAsset_LedgerAccountNo'] = ObjectSerializer::toQueryValue($inventory_expected_asset_ledger_account_no);
        }
        // query params
        if ($inventory_expected_asset_ledger_account_description !== null) {
            $queryParams['InventoryExpectedAsset_LedgerAccountDescription'] = ObjectSerializer::toQueryValue($inventory_expected_asset_ledger_account_description);
        }
        // query params
        if ($inventory_delivered_asset_ledger_account_id !== null) {
            $queryParams['InventoryDeliveredAsset_LedgerAccountID'] = ObjectSerializer::toQueryValue($inventory_delivered_asset_ledger_account_id);
        }
        // query params
        if ($inventory_delivered_asset_ledger_account_no !== null) {
            $queryParams['InventoryDeliveredAsset_LedgerAccountNo'] = ObjectSerializer::toQueryValue($inventory_delivered_asset_ledger_account_no);
        }
        // query params
        if ($inventory_delivered_asset_ledger_account_description !== null) {
            $queryParams['InventoryDeliveredAsset_LedgerAccountDescription'] = ObjectSerializer::toQueryValue($inventory_delivered_asset_ledger_account_description);
        }
        // query params
        if ($inventory_value_ledger_account_id !== null) {
            $queryParams['InventoryValue_LedgerAccountID'] = ObjectSerializer::toQueryValue($inventory_value_ledger_account_id);
        }
        // query params
        if ($inventory_value_ledger_account_no !== null) {
            $queryParams['InventoryValue_LedgerAccountNo'] = ObjectSerializer::toQueryValue($inventory_value_ledger_account_no);
        }
        // query params
        if ($inventory_value_ledger_account_description !== null) {
            $queryParams['InventoryValue_LedgerAccountDescription'] = ObjectSerializer::toQueryValue($inventory_value_ledger_account_description);
        }
        // query params
        if ($inventory_delivered_liability_ledger_account_id !== null) {
            $queryParams['InventoryDeliveredLiability_LedgerAccountID'] = ObjectSerializer::toQueryValue($inventory_delivered_liability_ledger_account_id);
        }
        // query params
        if ($inventory_delivered_liability_ledger_account_no !== null) {
            $queryParams['InventoryDeliveredLiability_LedgerAccountNo'] = ObjectSerializer::toQueryValue($inventory_delivered_liability_ledger_account_no);
        }
        // query params
        if ($inventory_delivered_liability_ledger_account_description !== null) {
            $queryParams['InventoryDeliveredLiability_LedgerAccountDescription'] = ObjectSerializer::toQueryValue($inventory_delivered_liability_ledger_account_description);
        }
        // query params
        if ($inventory_wip_ledger_account_id !== null) {
            $queryParams['InventoryWIP_LedgerAccountID'] = ObjectSerializer::toQueryValue($inventory_wip_ledger_account_id);
        }
        // query params
        if ($inventory_wip_ledger_account_no !== null) {
            $queryParams['InventoryWIP_LedgerAccountNo'] = ObjectSerializer::toQueryValue($inventory_wip_ledger_account_no);
        }
        // query params
        if ($inventory_wip_ledger_account_description !== null) {
            $queryParams['InventoryWIP_LedgerAccountDescription'] = ObjectSerializer::toQueryValue($inventory_wip_ledger_account_description);
        }
        // query params
        if ($po_line_last_saved_date_time !== null) {
            $queryParams['POLineLastSavedDateTime'] = ObjectSerializer::toQueryValue($po_line_last_saved_date_time);
        }
        // query params
        if ($order_units !== null) {
            $queryParams['OrderUnits'] = ObjectSerializer::toQueryValue($order_units);
        }
        // query params
        if ($item_no !== null) {
            $queryParams['ItemNo'] = ObjectSerializer::toQueryValue($item_no);
        }
        // query params
        if ($in_creditor_rec_id !== null) {
            $queryParams['IN_Creditor_RecID'] = ObjectSerializer::toQueryValue($in_creditor_rec_id);
        }
        // query params
        if ($in_supplier_warehouse_rec_id !== null) {
            $queryParams['IN_SupplierWarehouse_RecID'] = ObjectSerializer::toQueryValue($in_supplier_warehouse_rec_id);
        }
        // query params
        if ($job_costing_stage_id !== null) {
            $queryParams['JobCostingStageID'] = ObjectSerializer::toQueryValue($job_costing_stage_id);
        }
        // query params
        if ($job_costing_stage_no !== null) {
            $queryParams['JobCostingStageNo'] = ObjectSerializer::toQueryValue($job_costing_stage_no);
        }
        // query params
        if ($job_costing_stage_name !== null) {
            $queryParams['JobCostingStageName'] = ObjectSerializer::toQueryValue($job_costing_stage_name);
        }
        // query params
        if ($job_costing_cost_centre_id !== null) {
            $queryParams['JobCostingCostCentreID'] = ObjectSerializer::toQueryValue($job_costing_cost_centre_id);
        }
        // query params
        if ($job_costing_cost_centre_no !== null) {
            $queryParams['JobCostingCostCentreNo'] = ObjectSerializer::toQueryValue($job_costing_cost_centre_no);
        }
        // query params
        if ($job_costing_cost_centre_name !== null) {
            $queryParams['JobCostingCostCentreName'] = ObjectSerializer::toQueryValue($job_costing_cost_centre_name);
        }
        // query params
        if ($job_costing_job_id !== null) {
            $queryParams['JobCostingJobID'] = ObjectSerializer::toQueryValue($job_costing_job_id);
        }
        // query params
        if ($job_costing_job_no !== null) {
            $queryParams['JobCostingJobNo'] = ObjectSerializer::toQueryValue($job_costing_job_no);
        }
        // query params
        if ($unit_inc_tax !== null) {
            $queryParams['UnitIncTax'] = ObjectSerializer::toQueryValue($unit_inc_tax);
        }
        // query params
        if ($line_total_inc_tax !== null) {
            $queryParams['LineTotalIncTax'] = ObjectSerializer::toQueryValue($line_total_inc_tax);
        }
        // query params
        if ($fx_line_total_ex_tax !== null) {
            $queryParams['FXLineTotalExTax'] = ObjectSerializer::toQueryValue($fx_line_total_ex_tax);
        }
        // query params
        if ($fx_decimal_places !== null) {
            $queryParams['FXDecimalPlaces'] = ObjectSerializer::toQueryValue($fx_decimal_places);
        }
        // query params
        if ($home_decimal_places !== null) {
            $queryParams['HomeDecimalPlaces'] = ObjectSerializer::toQueryValue($home_decimal_places);
        }
        // query params
        if ($use_expiry_date !== null) {
            $queryParams['UseExpiryDate'] = ObjectSerializer::toQueryValue($use_expiry_date);
        }
        // query params
        if ($line_details !== null) {
            $queryParams['LineDetails'] = ObjectSerializer::toQueryValue($line_details);
        }
        // query params
        if ($custom_field_values !== null) {
            $queryParams['CustomFieldValues'] = ObjectSerializer::toQueryValue($custom_field_values);
        }
        // header params
        if ($accept !== null) {
            $headerParams['Accept'] = ObjectSerializer::toHeaderValue($accept);
        }
        // header params
        if ($jiwa_stateful !== null) {
            $headerParams['jiwa-stateful'] = ObjectSerializer::toHeaderValue($jiwa_stateful);
        }

        // path params
        if ($grnid !== null) {
            $resourcePath = str_replace(
                '{' . 'GRNID' . '}',
                ObjectSerializer::toPathValue($grnid),
                $resourcePath
            );
        }
        // path params
        if ($line_id !== null) {
            $resourcePath = str_replace(
                '{' . 'LineID' . '}',
                ObjectSerializer::toPathValue($line_id),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json', 'application/xml']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json', 'application/xml'],
                ['application/x-www-form-urlencoded', 'application/json', 'application/xml']
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            
            if($headers['Content-Type'] === 'application/json') {
                // \stdClass has no __toString(), so we should encode it manually
                if ($httpBody instanceof \stdClass) {
                    $httpBody = \GuzzleHttp\json_encode($httpBody);
                }
                // array has no __toString(), so we should encode it manually
                if(is_array($httpBody)) {
                    $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($httpBody));
                }
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\Query::build($formParams);
            }
        }

        // this endpoint requires HTTP basic authentication
        if ($this->config->getUsername() !== null || $this->config->getPassword() !== null) {
            $headers['Authorization'] = 'Basic ' . base64_encode($this->config->getUsername() . ":" . $this->config->getPassword());
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\Query::build($queryParams);
        return new Request(
            'DELETE',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation goodsReceivedNoteLineDetailDELETERequestGRNIDLinesLineIDLineDetailsLineDetailIDDelete
     *
     * Deletes a goods received note line detail.
     *
     * @param  string $accept Accept Header (required)
     * @param  string $grnid grnid (required)
     * @param  string $line_id line_id (required)
     * @param  string $line_detail_id line_detail_id (required)
     * @param  bool $jiwa_stateful Stateful indicator (optional)
     *
     * @throws \Jiwa\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Jiwa\Model\Object
     */
    public function goodsReceivedNoteLineDetailDELETERequestGRNIDLinesLineIDLineDetailsLineDetailIDDelete($accept, $grnid, $line_id, $line_detail_id, $jiwa_stateful = null)
    {
        list($response) = $this->goodsReceivedNoteLineDetailDELETERequestGRNIDLinesLineIDLineDetailsLineDetailIDDeleteWithHttpInfo($accept, $grnid, $line_id, $line_detail_id, $jiwa_stateful);
        return $response;
    }

    /**
     * Operation goodsReceivedNoteLineDetailDELETERequestGRNIDLinesLineIDLineDetailsLineDetailIDDeleteWithHttpInfo
     *
     * Deletes a goods received note line detail.
     *
     * @param  string $accept Accept Header (required)
     * @param  string $grnid (required)
     * @param  string $line_id (required)
     * @param  string $line_detail_id (required)
     * @param  bool $jiwa_stateful Stateful indicator (optional)
     *
     * @throws \Jiwa\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Jiwa\Model\Object, HTTP status code, HTTP response headers (array of strings)
     */
    public function goodsReceivedNoteLineDetailDELETERequestGRNIDLinesLineIDLineDetailsLineDetailIDDeleteWithHttpInfo($accept, $grnid, $line_id, $line_detail_id, $jiwa_stateful = null)
    {
        $returnType = '\Jiwa\Model\Object';
        $request = $this->goodsReceivedNoteLineDetailDELETERequestGRNIDLinesLineIDLineDetailsLineDetailIDDeleteRequest($accept, $grnid, $line_id, $line_detail_id, $jiwa_stateful);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Jiwa\Model\Object',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 404:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Jiwa\Model\Object',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 401:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Jiwa\Model\Object',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 403:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Jiwa\Model\Object',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 204:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Jiwa\Model\Object',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation goodsReceivedNoteLineDetailDELETERequestGRNIDLinesLineIDLineDetailsLineDetailIDDeleteAsync
     *
     * Deletes a goods received note line detail.
     *
     * @param  string $accept Accept Header (required)
     * @param  string $grnid (required)
     * @param  string $line_id (required)
     * @param  string $line_detail_id (required)
     * @param  bool $jiwa_stateful Stateful indicator (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function goodsReceivedNoteLineDetailDELETERequestGRNIDLinesLineIDLineDetailsLineDetailIDDeleteAsync($accept, $grnid, $line_id, $line_detail_id, $jiwa_stateful = null)
    {
        return $this->goodsReceivedNoteLineDetailDELETERequestGRNIDLinesLineIDLineDetailsLineDetailIDDeleteAsyncWithHttpInfo($accept, $grnid, $line_id, $line_detail_id, $jiwa_stateful)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation goodsReceivedNoteLineDetailDELETERequestGRNIDLinesLineIDLineDetailsLineDetailIDDeleteAsyncWithHttpInfo
     *
     * Deletes a goods received note line detail.
     *
     * @param  string $accept Accept Header (required)
     * @param  string $grnid (required)
     * @param  string $line_id (required)
     * @param  string $line_detail_id (required)
     * @param  bool $jiwa_stateful Stateful indicator (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function goodsReceivedNoteLineDetailDELETERequestGRNIDLinesLineIDLineDetailsLineDetailIDDeleteAsyncWithHttpInfo($accept, $grnid, $line_id, $line_detail_id, $jiwa_stateful = null)
    {
        $returnType = '\Jiwa\Model\Object';
        $request = $this->goodsReceivedNoteLineDetailDELETERequestGRNIDLinesLineIDLineDetailsLineDetailIDDeleteRequest($accept, $grnid, $line_id, $line_detail_id, $jiwa_stateful);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'goodsReceivedNoteLineDetailDELETERequestGRNIDLinesLineIDLineDetailsLineDetailIDDelete'
     *
     * @param  string $accept Accept Header (required)
     * @param  string $grnid (required)
     * @param  string $line_id (required)
     * @param  string $line_detail_id (required)
     * @param  bool $jiwa_stateful Stateful indicator (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function goodsReceivedNoteLineDetailDELETERequestGRNIDLinesLineIDLineDetailsLineDetailIDDeleteRequest($accept, $grnid, $line_id, $line_detail_id, $jiwa_stateful = null)
    {
        // verify the required parameter 'accept' is set
        if ($accept === null || (is_array($accept) && count($accept) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $accept when calling goodsReceivedNoteLineDetailDELETERequestGRNIDLinesLineIDLineDetailsLineDetailIDDelete'
            );
        }
        // verify the required parameter 'grnid' is set
        if ($grnid === null || (is_array($grnid) && count($grnid) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $grnid when calling goodsReceivedNoteLineDetailDELETERequestGRNIDLinesLineIDLineDetailsLineDetailIDDelete'
            );
        }
        // verify the required parameter 'line_id' is set
        if ($line_id === null || (is_array($line_id) && count($line_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $line_id when calling goodsReceivedNoteLineDetailDELETERequestGRNIDLinesLineIDLineDetailsLineDetailIDDelete'
            );
        }
        // verify the required parameter 'line_detail_id' is set
        if ($line_detail_id === null || (is_array($line_detail_id) && count($line_detail_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $line_detail_id when calling goodsReceivedNoteLineDetailDELETERequestGRNIDLinesLineIDLineDetailsLineDetailIDDelete'
            );
        }

        $resourcePath = '/GoodsReceivedNotes/{GRNID}/Lines/{LineID}/LineDetails/{LineDetailID}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // header params
        if ($accept !== null) {
            $headerParams['Accept'] = ObjectSerializer::toHeaderValue($accept);
        }
        // header params
        if ($jiwa_stateful !== null) {
            $headerParams['jiwa-stateful'] = ObjectSerializer::toHeaderValue($jiwa_stateful);
        }

        // path params
        if ($grnid !== null) {
            $resourcePath = str_replace(
                '{' . 'GRNID' . '}',
                ObjectSerializer::toPathValue($grnid),
                $resourcePath
            );
        }
        // path params
        if ($line_id !== null) {
            $resourcePath = str_replace(
                '{' . 'LineID' . '}',
                ObjectSerializer::toPathValue($line_id),
                $resourcePath
            );
        }
        // path params
        if ($line_detail_id !== null) {
            $resourcePath = str_replace(
                '{' . 'LineDetailID' . '}',
                ObjectSerializer::toPathValue($line_detail_id),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json', 'application/xml']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json', 'application/xml'],
                ['application/x-www-form-urlencoded', 'application/json', 'application/xml']
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            
            if($headers['Content-Type'] === 'application/json') {
                // \stdClass has no __toString(), so we should encode it manually
                if ($httpBody instanceof \stdClass) {
                    $httpBody = \GuzzleHttp\json_encode($httpBody);
                }
                // array has no __toString(), so we should encode it manually
                if(is_array($httpBody)) {
                    $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($httpBody));
                }
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\Query::build($formParams);
            }
        }

        // this endpoint requires HTTP basic authentication
        if ($this->config->getUsername() !== null || $this->config->getPassword() !== null) {
            $headers['Authorization'] = 'Basic ' . base64_encode($this->config->getUsername() . ":" . $this->config->getPassword());
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\Query::build($queryParams);
        return new Request(
            'DELETE',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation goodsReceivedNoteLineDetailGETRequestGRNIDLinesLineIDLineDetailsLineDetailIDGet
     *
     * Retrieves a goods received note line detail.
     *
     * @param  string $accept Accept Header (required)
     * @param  string $grnid grnid (required)
     * @param  string $line_id line_id (required)
     * @param  string $line_detail_id line_detail_id (required)
     * @param  bool $jiwa_stateful Stateful indicator (optional)
     *
     * @throws \Jiwa\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Jiwa\Model\GoodsReceivedNoteLineDetail
     */
    public function goodsReceivedNoteLineDetailGETRequestGRNIDLinesLineIDLineDetailsLineDetailIDGet($accept, $grnid, $line_id, $line_detail_id, $jiwa_stateful = null)
    {
        list($response) = $this->goodsReceivedNoteLineDetailGETRequestGRNIDLinesLineIDLineDetailsLineDetailIDGetWithHttpInfo($accept, $grnid, $line_id, $line_detail_id, $jiwa_stateful);
        return $response;
    }

    /**
     * Operation goodsReceivedNoteLineDetailGETRequestGRNIDLinesLineIDLineDetailsLineDetailIDGetWithHttpInfo
     *
     * Retrieves a goods received note line detail.
     *
     * @param  string $accept Accept Header (required)
     * @param  string $grnid (required)
     * @param  string $line_id (required)
     * @param  string $line_detail_id (required)
     * @param  bool $jiwa_stateful Stateful indicator (optional)
     *
     * @throws \Jiwa\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Jiwa\Model\GoodsReceivedNoteLineDetail, HTTP status code, HTTP response headers (array of strings)
     */
    public function goodsReceivedNoteLineDetailGETRequestGRNIDLinesLineIDLineDetailsLineDetailIDGetWithHttpInfo($accept, $grnid, $line_id, $line_detail_id, $jiwa_stateful = null)
    {
        $returnType = '\Jiwa\Model\GoodsReceivedNoteLineDetail';
        $request = $this->goodsReceivedNoteLineDetailGETRequestGRNIDLinesLineIDLineDetailsLineDetailIDGetRequest($accept, $grnid, $line_id, $line_detail_id, $jiwa_stateful);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Jiwa\Model\GoodsReceivedNoteLineDetail',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 404:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Jiwa\Model\GoodsReceivedNoteLineDetail',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 403:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Jiwa\Model\GoodsReceivedNoteLineDetail',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 401:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Jiwa\Model\GoodsReceivedNoteLineDetail',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation goodsReceivedNoteLineDetailGETRequestGRNIDLinesLineIDLineDetailsLineDetailIDGetAsync
     *
     * Retrieves a goods received note line detail.
     *
     * @param  string $accept Accept Header (required)
     * @param  string $grnid (required)
     * @param  string $line_id (required)
     * @param  string $line_detail_id (required)
     * @param  bool $jiwa_stateful Stateful indicator (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function goodsReceivedNoteLineDetailGETRequestGRNIDLinesLineIDLineDetailsLineDetailIDGetAsync($accept, $grnid, $line_id, $line_detail_id, $jiwa_stateful = null)
    {
        return $this->goodsReceivedNoteLineDetailGETRequestGRNIDLinesLineIDLineDetailsLineDetailIDGetAsyncWithHttpInfo($accept, $grnid, $line_id, $line_detail_id, $jiwa_stateful)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation goodsReceivedNoteLineDetailGETRequestGRNIDLinesLineIDLineDetailsLineDetailIDGetAsyncWithHttpInfo
     *
     * Retrieves a goods received note line detail.
     *
     * @param  string $accept Accept Header (required)
     * @param  string $grnid (required)
     * @param  string $line_id (required)
     * @param  string $line_detail_id (required)
     * @param  bool $jiwa_stateful Stateful indicator (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function goodsReceivedNoteLineDetailGETRequestGRNIDLinesLineIDLineDetailsLineDetailIDGetAsyncWithHttpInfo($accept, $grnid, $line_id, $line_detail_id, $jiwa_stateful = null)
    {
        $returnType = '\Jiwa\Model\GoodsReceivedNoteLineDetail';
        $request = $this->goodsReceivedNoteLineDetailGETRequestGRNIDLinesLineIDLineDetailsLineDetailIDGetRequest($accept, $grnid, $line_id, $line_detail_id, $jiwa_stateful);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'goodsReceivedNoteLineDetailGETRequestGRNIDLinesLineIDLineDetailsLineDetailIDGet'
     *
     * @param  string $accept Accept Header (required)
     * @param  string $grnid (required)
     * @param  string $line_id (required)
     * @param  string $line_detail_id (required)
     * @param  bool $jiwa_stateful Stateful indicator (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function goodsReceivedNoteLineDetailGETRequestGRNIDLinesLineIDLineDetailsLineDetailIDGetRequest($accept, $grnid, $line_id, $line_detail_id, $jiwa_stateful = null)
    {
        // verify the required parameter 'accept' is set
        if ($accept === null || (is_array($accept) && count($accept) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $accept when calling goodsReceivedNoteLineDetailGETRequestGRNIDLinesLineIDLineDetailsLineDetailIDGet'
            );
        }
        // verify the required parameter 'grnid' is set
        if ($grnid === null || (is_array($grnid) && count($grnid) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $grnid when calling goodsReceivedNoteLineDetailGETRequestGRNIDLinesLineIDLineDetailsLineDetailIDGet'
            );
        }
        // verify the required parameter 'line_id' is set
        if ($line_id === null || (is_array($line_id) && count($line_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $line_id when calling goodsReceivedNoteLineDetailGETRequestGRNIDLinesLineIDLineDetailsLineDetailIDGet'
            );
        }
        // verify the required parameter 'line_detail_id' is set
        if ($line_detail_id === null || (is_array($line_detail_id) && count($line_detail_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $line_detail_id when calling goodsReceivedNoteLineDetailGETRequestGRNIDLinesLineIDLineDetailsLineDetailIDGet'
            );
        }

        $resourcePath = '/GoodsReceivedNotes/{GRNID}/Lines/{LineID}/LineDetails/{LineDetailID}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // header params
        if ($accept !== null) {
            $headerParams['Accept'] = ObjectSerializer::toHeaderValue($accept);
        }
        // header params
        if ($jiwa_stateful !== null) {
            $headerParams['jiwa-stateful'] = ObjectSerializer::toHeaderValue($jiwa_stateful);
        }

        // path params
        if ($grnid !== null) {
            $resourcePath = str_replace(
                '{' . 'GRNID' . '}',
                ObjectSerializer::toPathValue($grnid),
                $resourcePath
            );
        }
        // path params
        if ($line_id !== null) {
            $resourcePath = str_replace(
                '{' . 'LineID' . '}',
                ObjectSerializer::toPathValue($line_id),
                $resourcePath
            );
        }
        // path params
        if ($line_detail_id !== null) {
            $resourcePath = str_replace(
                '{' . 'LineDetailID' . '}',
                ObjectSerializer::toPathValue($line_detail_id),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json', 'application/xml']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json', 'application/xml'],
                ['application/x-www-form-urlencoded', 'application/json', 'application/xml']
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            
            if($headers['Content-Type'] === 'application/json') {
                // \stdClass has no __toString(), so we should encode it manually
                if ($httpBody instanceof \stdClass) {
                    $httpBody = \GuzzleHttp\json_encode($httpBody);
                }
                // array has no __toString(), so we should encode it manually
                if(is_array($httpBody)) {
                    $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($httpBody));
                }
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\Query::build($formParams);
            }
        }

        // this endpoint requires HTTP basic authentication
        if ($this->config->getUsername() !== null || $this->config->getPassword() !== null) {
            $headers['Authorization'] = 'Basic ' . base64_encode($this->config->getUsername() . ":" . $this->config->getPassword());
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\Query::build($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation goodsReceivedNoteLineDetailPATCHRequestGRNIDLinesLineIDLineDetailsLineDetailIDUpdate
     *
     * Updates a goods received note line detail.
     *
     * @param  string $accept Accept Header (required)
     * @param  string $grnid grnid (required)
     * @param  string $line_id line_id (required)
     * @param  string $line_detail_id line_detail_id (required)
     * @param  bool $jiwa_stateful Stateful indicator (optional)
     * @param  string $link_id link_id (optional)
     * @param  double $quantity quantity (optional)
     * @param  \DateTime $last_saved_date_time last_saved_date_time (optional)
     * @param  string $serial_no serial_no (optional)
     * @param  string $bin_location_id bin_location_id (optional)
     * @param  string $bin_location_description bin_location_description (optional)
     * @param  \DateTime $expiry_date expiry_date (optional)
     * @param  \Jiwa\Model\GoodsReceivedNoteLineDetailPATCHRequest $body body (optional)
     *
     * @throws \Jiwa\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Jiwa\Model\GoodsReceivedNoteLineDetail
     */
    public function goodsReceivedNoteLineDetailPATCHRequestGRNIDLinesLineIDLineDetailsLineDetailIDUpdate($accept, $grnid, $line_id, $line_detail_id, $jiwa_stateful = null, $link_id = null, $quantity = null, $last_saved_date_time = null, $serial_no = null, $bin_location_id = null, $bin_location_description = null, $expiry_date = null, $body = null)
    {
        list($response) = $this->goodsReceivedNoteLineDetailPATCHRequestGRNIDLinesLineIDLineDetailsLineDetailIDUpdateWithHttpInfo($accept, $grnid, $line_id, $line_detail_id, $jiwa_stateful, $link_id, $quantity, $last_saved_date_time, $serial_no, $bin_location_id, $bin_location_description, $expiry_date, $body);
        return $response;
    }

    /**
     * Operation goodsReceivedNoteLineDetailPATCHRequestGRNIDLinesLineIDLineDetailsLineDetailIDUpdateWithHttpInfo
     *
     * Updates a goods received note line detail.
     *
     * @param  string $accept Accept Header (required)
     * @param  string $grnid (required)
     * @param  string $line_id (required)
     * @param  string $line_detail_id (required)
     * @param  bool $jiwa_stateful Stateful indicator (optional)
     * @param  string $link_id (optional)
     * @param  double $quantity (optional)
     * @param  \DateTime $last_saved_date_time (optional)
     * @param  string $serial_no (optional)
     * @param  string $bin_location_id (optional)
     * @param  string $bin_location_description (optional)
     * @param  \DateTime $expiry_date (optional)
     * @param  \Jiwa\Model\GoodsReceivedNoteLineDetailPATCHRequest $body (optional)
     *
     * @throws \Jiwa\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Jiwa\Model\GoodsReceivedNoteLineDetail, HTTP status code, HTTP response headers (array of strings)
     */
    public function goodsReceivedNoteLineDetailPATCHRequestGRNIDLinesLineIDLineDetailsLineDetailIDUpdateWithHttpInfo($accept, $grnid, $line_id, $line_detail_id, $jiwa_stateful = null, $link_id = null, $quantity = null, $last_saved_date_time = null, $serial_no = null, $bin_location_id = null, $bin_location_description = null, $expiry_date = null, $body = null)
    {
        $returnType = '\Jiwa\Model\GoodsReceivedNoteLineDetail';
        $request = $this->goodsReceivedNoteLineDetailPATCHRequestGRNIDLinesLineIDLineDetailsLineDetailIDUpdateRequest($accept, $grnid, $line_id, $line_detail_id, $jiwa_stateful, $link_id, $quantity, $last_saved_date_time, $serial_no, $bin_location_id, $bin_location_description, $expiry_date, $body);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Jiwa\Model\GoodsReceivedNoteLineDetail',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 404:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Jiwa\Model\GoodsReceivedNoteLineDetail',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 401:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Jiwa\Model\GoodsReceivedNoteLineDetail',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 403:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Jiwa\Model\GoodsReceivedNoteLineDetail',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation goodsReceivedNoteLineDetailPATCHRequestGRNIDLinesLineIDLineDetailsLineDetailIDUpdateAsync
     *
     * Updates a goods received note line detail.
     *
     * @param  string $accept Accept Header (required)
     * @param  string $grnid (required)
     * @param  string $line_id (required)
     * @param  string $line_detail_id (required)
     * @param  bool $jiwa_stateful Stateful indicator (optional)
     * @param  string $link_id (optional)
     * @param  double $quantity (optional)
     * @param  \DateTime $last_saved_date_time (optional)
     * @param  string $serial_no (optional)
     * @param  string $bin_location_id (optional)
     * @param  string $bin_location_description (optional)
     * @param  \DateTime $expiry_date (optional)
     * @param  \Jiwa\Model\GoodsReceivedNoteLineDetailPATCHRequest $body (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function goodsReceivedNoteLineDetailPATCHRequestGRNIDLinesLineIDLineDetailsLineDetailIDUpdateAsync($accept, $grnid, $line_id, $line_detail_id, $jiwa_stateful = null, $link_id = null, $quantity = null, $last_saved_date_time = null, $serial_no = null, $bin_location_id = null, $bin_location_description = null, $expiry_date = null, $body = null)
    {
        return $this->goodsReceivedNoteLineDetailPATCHRequestGRNIDLinesLineIDLineDetailsLineDetailIDUpdateAsyncWithHttpInfo($accept, $grnid, $line_id, $line_detail_id, $jiwa_stateful, $link_id, $quantity, $last_saved_date_time, $serial_no, $bin_location_id, $bin_location_description, $expiry_date, $body)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation goodsReceivedNoteLineDetailPATCHRequestGRNIDLinesLineIDLineDetailsLineDetailIDUpdateAsyncWithHttpInfo
     *
     * Updates a goods received note line detail.
     *
     * @param  string $accept Accept Header (required)
     * @param  string $grnid (required)
     * @param  string $line_id (required)
     * @param  string $line_detail_id (required)
     * @param  bool $jiwa_stateful Stateful indicator (optional)
     * @param  string $link_id (optional)
     * @param  double $quantity (optional)
     * @param  \DateTime $last_saved_date_time (optional)
     * @param  string $serial_no (optional)
     * @param  string $bin_location_id (optional)
     * @param  string $bin_location_description (optional)
     * @param  \DateTime $expiry_date (optional)
     * @param  \Jiwa\Model\GoodsReceivedNoteLineDetailPATCHRequest $body (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function goodsReceivedNoteLineDetailPATCHRequestGRNIDLinesLineIDLineDetailsLineDetailIDUpdateAsyncWithHttpInfo($accept, $grnid, $line_id, $line_detail_id, $jiwa_stateful = null, $link_id = null, $quantity = null, $last_saved_date_time = null, $serial_no = null, $bin_location_id = null, $bin_location_description = null, $expiry_date = null, $body = null)
    {
        $returnType = '\Jiwa\Model\GoodsReceivedNoteLineDetail';
        $request = $this->goodsReceivedNoteLineDetailPATCHRequestGRNIDLinesLineIDLineDetailsLineDetailIDUpdateRequest($accept, $grnid, $line_id, $line_detail_id, $jiwa_stateful, $link_id, $quantity, $last_saved_date_time, $serial_no, $bin_location_id, $bin_location_description, $expiry_date, $body);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'goodsReceivedNoteLineDetailPATCHRequestGRNIDLinesLineIDLineDetailsLineDetailIDUpdate'
     *
     * @param  string $accept Accept Header (required)
     * @param  string $grnid (required)
     * @param  string $line_id (required)
     * @param  string $line_detail_id (required)
     * @param  bool $jiwa_stateful Stateful indicator (optional)
     * @param  string $link_id (optional)
     * @param  double $quantity (optional)
     * @param  \DateTime $last_saved_date_time (optional)
     * @param  string $serial_no (optional)
     * @param  string $bin_location_id (optional)
     * @param  string $bin_location_description (optional)
     * @param  \DateTime $expiry_date (optional)
     * @param  \Jiwa\Model\GoodsReceivedNoteLineDetailPATCHRequest $body (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function goodsReceivedNoteLineDetailPATCHRequestGRNIDLinesLineIDLineDetailsLineDetailIDUpdateRequest($accept, $grnid, $line_id, $line_detail_id, $jiwa_stateful = null, $link_id = null, $quantity = null, $last_saved_date_time = null, $serial_no = null, $bin_location_id = null, $bin_location_description = null, $expiry_date = null, $body = null)
    {
        // verify the required parameter 'accept' is set
        if ($accept === null || (is_array($accept) && count($accept) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $accept when calling goodsReceivedNoteLineDetailPATCHRequestGRNIDLinesLineIDLineDetailsLineDetailIDUpdate'
            );
        }
        // verify the required parameter 'grnid' is set
        if ($grnid === null || (is_array($grnid) && count($grnid) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $grnid when calling goodsReceivedNoteLineDetailPATCHRequestGRNIDLinesLineIDLineDetailsLineDetailIDUpdate'
            );
        }
        // verify the required parameter 'line_id' is set
        if ($line_id === null || (is_array($line_id) && count($line_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $line_id when calling goodsReceivedNoteLineDetailPATCHRequestGRNIDLinesLineIDLineDetailsLineDetailIDUpdate'
            );
        }
        // verify the required parameter 'line_detail_id' is set
        if ($line_detail_id === null || (is_array($line_detail_id) && count($line_detail_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $line_detail_id when calling goodsReceivedNoteLineDetailPATCHRequestGRNIDLinesLineIDLineDetailsLineDetailIDUpdate'
            );
        }

        $resourcePath = '/GoodsReceivedNotes/{GRNID}/Lines/{LineID}/LineDetails/{LineDetailID}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        if ($link_id !== null) {
            $queryParams['LinkID'] = ObjectSerializer::toQueryValue($link_id);
        }
        // query params
        if ($quantity !== null) {
            $queryParams['Quantity'] = ObjectSerializer::toQueryValue($quantity);
        }
        // query params
        if ($last_saved_date_time !== null) {
            $queryParams['LastSavedDateTime'] = ObjectSerializer::toQueryValue($last_saved_date_time);
        }
        // query params
        if ($serial_no !== null) {
            $queryParams['SerialNo'] = ObjectSerializer::toQueryValue($serial_no);
        }
        // query params
        if ($bin_location_id !== null) {
            $queryParams['BinLocationID'] = ObjectSerializer::toQueryValue($bin_location_id);
        }
        // query params
        if ($bin_location_description !== null) {
            $queryParams['BinLocationDescription'] = ObjectSerializer::toQueryValue($bin_location_description);
        }
        // query params
        if ($expiry_date !== null) {
            $queryParams['ExpiryDate'] = ObjectSerializer::toQueryValue($expiry_date);
        }
        // header params
        if ($accept !== null) {
            $headerParams['Accept'] = ObjectSerializer::toHeaderValue($accept);
        }
        // header params
        if ($jiwa_stateful !== null) {
            $headerParams['jiwa-stateful'] = ObjectSerializer::toHeaderValue($jiwa_stateful);
        }

        // path params
        if ($grnid !== null) {
            $resourcePath = str_replace(
                '{' . 'GRNID' . '}',
                ObjectSerializer::toPathValue($grnid),
                $resourcePath
            );
        }
        // path params
        if ($line_id !== null) {
            $resourcePath = str_replace(
                '{' . 'LineID' . '}',
                ObjectSerializer::toPathValue($line_id),
                $resourcePath
            );
        }
        // path params
        if ($line_detail_id !== null) {
            $resourcePath = str_replace(
                '{' . 'LineDetailID' . '}',
                ObjectSerializer::toPathValue($line_detail_id),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;
        if (isset($body)) {
            $_tempBody = $body;
        }

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json', 'application/xml']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json', 'application/xml'],
                ['application/x-www-form-urlencoded', 'application/json', 'application/xml']
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            
            if($headers['Content-Type'] === 'application/json') {
                // \stdClass has no __toString(), so we should encode it manually
                if ($httpBody instanceof \stdClass) {
                    $httpBody = \GuzzleHttp\json_encode($httpBody);
                }
                // array has no __toString(), so we should encode it manually
                if(is_array($httpBody)) {
                    $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($httpBody));
                }
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\Query::build($formParams);
            }
        }

        // this endpoint requires HTTP basic authentication
        if ($this->config->getUsername() !== null || $this->config->getPassword() !== null) {
            $headers['Authorization'] = 'Basic ' . base64_encode($this->config->getUsername() . ":" . $this->config->getPassword());
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\Query::build($queryParams);
        return new Request(
            'PATCH',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation goodsReceivedNoteLineDetailPOSTRequestGRNIDLinesLineIDLineDetailsPost
     *
     * Appends a line detail to a goods received note line.
     *
     * @param  string $accept Accept Header (required)
     * @param  string $grnid grnid (required)
     * @param  string $line_id line_id (required)
     * @param  bool $jiwa_stateful Stateful indicator (optional)
     * @param  string $link_id link_id (optional)
     * @param  double $quantity quantity (optional)
     * @param  \DateTime $last_saved_date_time last_saved_date_time (optional)
     * @param  string $serial_no serial_no (optional)
     * @param  string $bin_location_id bin_location_id (optional)
     * @param  string $bin_location_description bin_location_description (optional)
     * @param  \DateTime $expiry_date expiry_date (optional)
     * @param  \Jiwa\Model\GoodsReceivedNoteLineDetailPOSTRequest $body body (optional)
     *
     * @throws \Jiwa\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Jiwa\Model\GoodsReceivedNoteLineDetail
     */
    public function goodsReceivedNoteLineDetailPOSTRequestGRNIDLinesLineIDLineDetailsPost($accept, $grnid, $line_id, $jiwa_stateful = null, $link_id = null, $quantity = null, $last_saved_date_time = null, $serial_no = null, $bin_location_id = null, $bin_location_description = null, $expiry_date = null, $body = null)
    {
        list($response) = $this->goodsReceivedNoteLineDetailPOSTRequestGRNIDLinesLineIDLineDetailsPostWithHttpInfo($accept, $grnid, $line_id, $jiwa_stateful, $link_id, $quantity, $last_saved_date_time, $serial_no, $bin_location_id, $bin_location_description, $expiry_date, $body);
        return $response;
    }

    /**
     * Operation goodsReceivedNoteLineDetailPOSTRequestGRNIDLinesLineIDLineDetailsPostWithHttpInfo
     *
     * Appends a line detail to a goods received note line.
     *
     * @param  string $accept Accept Header (required)
     * @param  string $grnid (required)
     * @param  string $line_id (required)
     * @param  bool $jiwa_stateful Stateful indicator (optional)
     * @param  string $link_id (optional)
     * @param  double $quantity (optional)
     * @param  \DateTime $last_saved_date_time (optional)
     * @param  string $serial_no (optional)
     * @param  string $bin_location_id (optional)
     * @param  string $bin_location_description (optional)
     * @param  \DateTime $expiry_date (optional)
     * @param  \Jiwa\Model\GoodsReceivedNoteLineDetailPOSTRequest $body (optional)
     *
     * @throws \Jiwa\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Jiwa\Model\GoodsReceivedNoteLineDetail, HTTP status code, HTTP response headers (array of strings)
     */
    public function goodsReceivedNoteLineDetailPOSTRequestGRNIDLinesLineIDLineDetailsPostWithHttpInfo($accept, $grnid, $line_id, $jiwa_stateful = null, $link_id = null, $quantity = null, $last_saved_date_time = null, $serial_no = null, $bin_location_id = null, $bin_location_description = null, $expiry_date = null, $body = null)
    {
        $returnType = '\Jiwa\Model\GoodsReceivedNoteLineDetail';
        $request = $this->goodsReceivedNoteLineDetailPOSTRequestGRNIDLinesLineIDLineDetailsPostRequest($accept, $grnid, $line_id, $jiwa_stateful, $link_id, $quantity, $last_saved_date_time, $serial_no, $bin_location_id, $bin_location_description, $expiry_date, $body);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Jiwa\Model\GoodsReceivedNoteLineDetail',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 403:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Jiwa\Model\GoodsReceivedNoteLineDetail',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 401:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Jiwa\Model\GoodsReceivedNoteLineDetail',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 201:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Jiwa\Model\GoodsReceivedNoteLineDetail',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 404:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Jiwa\Model\GoodsReceivedNoteLineDetail',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation goodsReceivedNoteLineDetailPOSTRequestGRNIDLinesLineIDLineDetailsPostAsync
     *
     * Appends a line detail to a goods received note line.
     *
     * @param  string $accept Accept Header (required)
     * @param  string $grnid (required)
     * @param  string $line_id (required)
     * @param  bool $jiwa_stateful Stateful indicator (optional)
     * @param  string $link_id (optional)
     * @param  double $quantity (optional)
     * @param  \DateTime $last_saved_date_time (optional)
     * @param  string $serial_no (optional)
     * @param  string $bin_location_id (optional)
     * @param  string $bin_location_description (optional)
     * @param  \DateTime $expiry_date (optional)
     * @param  \Jiwa\Model\GoodsReceivedNoteLineDetailPOSTRequest $body (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function goodsReceivedNoteLineDetailPOSTRequestGRNIDLinesLineIDLineDetailsPostAsync($accept, $grnid, $line_id, $jiwa_stateful = null, $link_id = null, $quantity = null, $last_saved_date_time = null, $serial_no = null, $bin_location_id = null, $bin_location_description = null, $expiry_date = null, $body = null)
    {
        return $this->goodsReceivedNoteLineDetailPOSTRequestGRNIDLinesLineIDLineDetailsPostAsyncWithHttpInfo($accept, $grnid, $line_id, $jiwa_stateful, $link_id, $quantity, $last_saved_date_time, $serial_no, $bin_location_id, $bin_location_description, $expiry_date, $body)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation goodsReceivedNoteLineDetailPOSTRequestGRNIDLinesLineIDLineDetailsPostAsyncWithHttpInfo
     *
     * Appends a line detail to a goods received note line.
     *
     * @param  string $accept Accept Header (required)
     * @param  string $grnid (required)
     * @param  string $line_id (required)
     * @param  bool $jiwa_stateful Stateful indicator (optional)
     * @param  string $link_id (optional)
     * @param  double $quantity (optional)
     * @param  \DateTime $last_saved_date_time (optional)
     * @param  string $serial_no (optional)
     * @param  string $bin_location_id (optional)
     * @param  string $bin_location_description (optional)
     * @param  \DateTime $expiry_date (optional)
     * @param  \Jiwa\Model\GoodsReceivedNoteLineDetailPOSTRequest $body (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function goodsReceivedNoteLineDetailPOSTRequestGRNIDLinesLineIDLineDetailsPostAsyncWithHttpInfo($accept, $grnid, $line_id, $jiwa_stateful = null, $link_id = null, $quantity = null, $last_saved_date_time = null, $serial_no = null, $bin_location_id = null, $bin_location_description = null, $expiry_date = null, $body = null)
    {
        $returnType = '\Jiwa\Model\GoodsReceivedNoteLineDetail';
        $request = $this->goodsReceivedNoteLineDetailPOSTRequestGRNIDLinesLineIDLineDetailsPostRequest($accept, $grnid, $line_id, $jiwa_stateful, $link_id, $quantity, $last_saved_date_time, $serial_no, $bin_location_id, $bin_location_description, $expiry_date, $body);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'goodsReceivedNoteLineDetailPOSTRequestGRNIDLinesLineIDLineDetailsPost'
     *
     * @param  string $accept Accept Header (required)
     * @param  string $grnid (required)
     * @param  string $line_id (required)
     * @param  bool $jiwa_stateful Stateful indicator (optional)
     * @param  string $link_id (optional)
     * @param  double $quantity (optional)
     * @param  \DateTime $last_saved_date_time (optional)
     * @param  string $serial_no (optional)
     * @param  string $bin_location_id (optional)
     * @param  string $bin_location_description (optional)
     * @param  \DateTime $expiry_date (optional)
     * @param  \Jiwa\Model\GoodsReceivedNoteLineDetailPOSTRequest $body (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function goodsReceivedNoteLineDetailPOSTRequestGRNIDLinesLineIDLineDetailsPostRequest($accept, $grnid, $line_id, $jiwa_stateful = null, $link_id = null, $quantity = null, $last_saved_date_time = null, $serial_no = null, $bin_location_id = null, $bin_location_description = null, $expiry_date = null, $body = null)
    {
        // verify the required parameter 'accept' is set
        if ($accept === null || (is_array($accept) && count($accept) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $accept when calling goodsReceivedNoteLineDetailPOSTRequestGRNIDLinesLineIDLineDetailsPost'
            );
        }
        // verify the required parameter 'grnid' is set
        if ($grnid === null || (is_array($grnid) && count($grnid) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $grnid when calling goodsReceivedNoteLineDetailPOSTRequestGRNIDLinesLineIDLineDetailsPost'
            );
        }
        // verify the required parameter 'line_id' is set
        if ($line_id === null || (is_array($line_id) && count($line_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $line_id when calling goodsReceivedNoteLineDetailPOSTRequestGRNIDLinesLineIDLineDetailsPost'
            );
        }

        $resourcePath = '/GoodsReceivedNotes/{GRNID}/Lines/{LineID}/LineDetails';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        if ($link_id !== null) {
            $queryParams['LinkID'] = ObjectSerializer::toQueryValue($link_id);
        }
        // query params
        if ($quantity !== null) {
            $queryParams['Quantity'] = ObjectSerializer::toQueryValue($quantity);
        }
        // query params
        if ($last_saved_date_time !== null) {
            $queryParams['LastSavedDateTime'] = ObjectSerializer::toQueryValue($last_saved_date_time);
        }
        // query params
        if ($serial_no !== null) {
            $queryParams['SerialNo'] = ObjectSerializer::toQueryValue($serial_no);
        }
        // query params
        if ($bin_location_id !== null) {
            $queryParams['BinLocationID'] = ObjectSerializer::toQueryValue($bin_location_id);
        }
        // query params
        if ($bin_location_description !== null) {
            $queryParams['BinLocationDescription'] = ObjectSerializer::toQueryValue($bin_location_description);
        }
        // query params
        if ($expiry_date !== null) {
            $queryParams['ExpiryDate'] = ObjectSerializer::toQueryValue($expiry_date);
        }
        // header params
        if ($accept !== null) {
            $headerParams['Accept'] = ObjectSerializer::toHeaderValue($accept);
        }
        // header params
        if ($jiwa_stateful !== null) {
            $headerParams['jiwa-stateful'] = ObjectSerializer::toHeaderValue($jiwa_stateful);
        }

        // path params
        if ($grnid !== null) {
            $resourcePath = str_replace(
                '{' . 'GRNID' . '}',
                ObjectSerializer::toPathValue($grnid),
                $resourcePath
            );
        }
        // path params
        if ($line_id !== null) {
            $resourcePath = str_replace(
                '{' . 'LineID' . '}',
                ObjectSerializer::toPathValue($line_id),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;
        if (isset($body)) {
            $_tempBody = $body;
        }

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json', 'application/xml']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json', 'application/xml'],
                ['application/x-www-form-urlencoded', 'application/json', 'application/xml']
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            
            if($headers['Content-Type'] === 'application/json') {
                // \stdClass has no __toString(), so we should encode it manually
                if ($httpBody instanceof \stdClass) {
                    $httpBody = \GuzzleHttp\json_encode($httpBody);
                }
                // array has no __toString(), so we should encode it manually
                if(is_array($httpBody)) {
                    $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($httpBody));
                }
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\Query::build($formParams);
            }
        }

        // this endpoint requires HTTP basic authentication
        if ($this->config->getUsername() !== null || $this->config->getPassword() !== null) {
            $headers['Authorization'] = 'Basic ' . base64_encode($this->config->getUsername() . ":" . $this->config->getPassword());
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\Query::build($queryParams);
        return new Request(
            'POST',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation goodsReceivedNoteLineDetailPUTRequestGRNIDLinesLineIDLineDetailsCreate
     *
     * Sets the line details for a goods received note line. Existing line details for that line will be replaced.
     *
     * @param  string $accept Accept Header (required)
     * @param  string $grnid grnid (required)
     * @param  string $line_id line_id (required)
     * @param  bool $jiwa_stateful Stateful indicator (optional)
     * @param  int $capacity capacity (optional)
     * @param  int $count count (optional)
     * @param  string $item item (optional)
     * @param  \Jiwa\Model\GoodsReceivedNoteLineDetailPUTRequest $body body (optional)
     *
     * @throws \Jiwa\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Jiwa\Model\GoodsReceivedNoteLineDetail[]
     */
    public function goodsReceivedNoteLineDetailPUTRequestGRNIDLinesLineIDLineDetailsCreate($accept, $grnid, $line_id, $jiwa_stateful = null, $capacity = null, $count = null, $item = null, $body = null)
    {
        list($response) = $this->goodsReceivedNoteLineDetailPUTRequestGRNIDLinesLineIDLineDetailsCreateWithHttpInfo($accept, $grnid, $line_id, $jiwa_stateful, $capacity, $count, $item, $body);
        return $response;
    }

    /**
     * Operation goodsReceivedNoteLineDetailPUTRequestGRNIDLinesLineIDLineDetailsCreateWithHttpInfo
     *
     * Sets the line details for a goods received note line. Existing line details for that line will be replaced.
     *
     * @param  string $accept Accept Header (required)
     * @param  string $grnid (required)
     * @param  string $line_id (required)
     * @param  bool $jiwa_stateful Stateful indicator (optional)
     * @param  int $capacity (optional)
     * @param  int $count (optional)
     * @param  string $item (optional)
     * @param  \Jiwa\Model\GoodsReceivedNoteLineDetailPUTRequest $body (optional)
     *
     * @throws \Jiwa\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Jiwa\Model\GoodsReceivedNoteLineDetail[], HTTP status code, HTTP response headers (array of strings)
     */
    public function goodsReceivedNoteLineDetailPUTRequestGRNIDLinesLineIDLineDetailsCreateWithHttpInfo($accept, $grnid, $line_id, $jiwa_stateful = null, $capacity = null, $count = null, $item = null, $body = null)
    {
        $returnType = '\Jiwa\Model\GoodsReceivedNoteLineDetail[]';
        $request = $this->goodsReceivedNoteLineDetailPUTRequestGRNIDLinesLineIDLineDetailsCreateRequest($accept, $grnid, $line_id, $jiwa_stateful, $capacity, $count, $item, $body);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Jiwa\Model\GoodsReceivedNoteLineDetail[]',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 403:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Jiwa\Model\GoodsReceivedNoteLineDetail[]',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 401:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Jiwa\Model\GoodsReceivedNoteLineDetail[]',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation goodsReceivedNoteLineDetailPUTRequestGRNIDLinesLineIDLineDetailsCreateAsync
     *
     * Sets the line details for a goods received note line. Existing line details for that line will be replaced.
     *
     * @param  string $accept Accept Header (required)
     * @param  string $grnid (required)
     * @param  string $line_id (required)
     * @param  bool $jiwa_stateful Stateful indicator (optional)
     * @param  int $capacity (optional)
     * @param  int $count (optional)
     * @param  string $item (optional)
     * @param  \Jiwa\Model\GoodsReceivedNoteLineDetailPUTRequest $body (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function goodsReceivedNoteLineDetailPUTRequestGRNIDLinesLineIDLineDetailsCreateAsync($accept, $grnid, $line_id, $jiwa_stateful = null, $capacity = null, $count = null, $item = null, $body = null)
    {
        return $this->goodsReceivedNoteLineDetailPUTRequestGRNIDLinesLineIDLineDetailsCreateAsyncWithHttpInfo($accept, $grnid, $line_id, $jiwa_stateful, $capacity, $count, $item, $body)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation goodsReceivedNoteLineDetailPUTRequestGRNIDLinesLineIDLineDetailsCreateAsyncWithHttpInfo
     *
     * Sets the line details for a goods received note line. Existing line details for that line will be replaced.
     *
     * @param  string $accept Accept Header (required)
     * @param  string $grnid (required)
     * @param  string $line_id (required)
     * @param  bool $jiwa_stateful Stateful indicator (optional)
     * @param  int $capacity (optional)
     * @param  int $count (optional)
     * @param  string $item (optional)
     * @param  \Jiwa\Model\GoodsReceivedNoteLineDetailPUTRequest $body (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function goodsReceivedNoteLineDetailPUTRequestGRNIDLinesLineIDLineDetailsCreateAsyncWithHttpInfo($accept, $grnid, $line_id, $jiwa_stateful = null, $capacity = null, $count = null, $item = null, $body = null)
    {
        $returnType = '\Jiwa\Model\GoodsReceivedNoteLineDetail[]';
        $request = $this->goodsReceivedNoteLineDetailPUTRequestGRNIDLinesLineIDLineDetailsCreateRequest($accept, $grnid, $line_id, $jiwa_stateful, $capacity, $count, $item, $body);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'goodsReceivedNoteLineDetailPUTRequestGRNIDLinesLineIDLineDetailsCreate'
     *
     * @param  string $accept Accept Header (required)
     * @param  string $grnid (required)
     * @param  string $line_id (required)
     * @param  bool $jiwa_stateful Stateful indicator (optional)
     * @param  int $capacity (optional)
     * @param  int $count (optional)
     * @param  string $item (optional)
     * @param  \Jiwa\Model\GoodsReceivedNoteLineDetailPUTRequest $body (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function goodsReceivedNoteLineDetailPUTRequestGRNIDLinesLineIDLineDetailsCreateRequest($accept, $grnid, $line_id, $jiwa_stateful = null, $capacity = null, $count = null, $item = null, $body = null)
    {
        // verify the required parameter 'accept' is set
        if ($accept === null || (is_array($accept) && count($accept) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $accept when calling goodsReceivedNoteLineDetailPUTRequestGRNIDLinesLineIDLineDetailsCreate'
            );
        }
        // verify the required parameter 'grnid' is set
        if ($grnid === null || (is_array($grnid) && count($grnid) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $grnid when calling goodsReceivedNoteLineDetailPUTRequestGRNIDLinesLineIDLineDetailsCreate'
            );
        }
        // verify the required parameter 'line_id' is set
        if ($line_id === null || (is_array($line_id) && count($line_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $line_id when calling goodsReceivedNoteLineDetailPUTRequestGRNIDLinesLineIDLineDetailsCreate'
            );
        }

        $resourcePath = '/GoodsReceivedNotes/{GRNID}/Lines/{LineID}/LineDetails';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        if ($capacity !== null) {
            $queryParams['Capacity'] = ObjectSerializer::toQueryValue($capacity);
        }
        // query params
        if ($count !== null) {
            $queryParams['Count'] = ObjectSerializer::toQueryValue($count);
        }
        // query params
        if ($item !== null) {
            $queryParams['Item'] = ObjectSerializer::toQueryValue($item);
        }
        // header params
        if ($accept !== null) {
            $headerParams['Accept'] = ObjectSerializer::toHeaderValue($accept);
        }
        // header params
        if ($jiwa_stateful !== null) {
            $headerParams['jiwa-stateful'] = ObjectSerializer::toHeaderValue($jiwa_stateful);
        }

        // path params
        if ($grnid !== null) {
            $resourcePath = str_replace(
                '{' . 'GRNID' . '}',
                ObjectSerializer::toPathValue($grnid),
                $resourcePath
            );
        }
        // path params
        if ($line_id !== null) {
            $resourcePath = str_replace(
                '{' . 'LineID' . '}',
                ObjectSerializer::toPathValue($line_id),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;
        if (isset($body)) {
            $_tempBody = $body;
        }

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json', 'application/xml']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json', 'application/xml'],
                ['application/x-www-form-urlencoded', 'application/json', 'application/xml']
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            
            if($headers['Content-Type'] === 'application/json') {
                // \stdClass has no __toString(), so we should encode it manually
                if ($httpBody instanceof \stdClass) {
                    $httpBody = \GuzzleHttp\json_encode($httpBody);
                }
                // array has no __toString(), so we should encode it manually
                if(is_array($httpBody)) {
                    $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($httpBody));
                }
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\Query::build($formParams);
            }
        }

        // this endpoint requires HTTP basic authentication
        if ($this->config->getUsername() !== null || $this->config->getPassword() !== null) {
            $headers['Authorization'] = 'Basic ' . base64_encode($this->config->getUsername() . ":" . $this->config->getPassword());
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\Query::build($queryParams);
        return new Request(
            'PUT',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation goodsReceivedNoteLineDetailsGETManyRequestGRNIDLinesLineIDLineDetailsGet
     *
     * Retrieves a list of line details for a goods received note line.
     *
     * @param  string $accept Accept Header (required)
     * @param  string $grnid grnid (required)
     * @param  string $line_id line_id (required)
     * @param  bool $jiwa_stateful Stateful indicator (optional)
     *
     * @throws \Jiwa\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Jiwa\Model\GoodsReceivedNoteLineDetail[]
     */
    public function goodsReceivedNoteLineDetailsGETManyRequestGRNIDLinesLineIDLineDetailsGet($accept, $grnid, $line_id, $jiwa_stateful = null)
    {
        list($response) = $this->goodsReceivedNoteLineDetailsGETManyRequestGRNIDLinesLineIDLineDetailsGetWithHttpInfo($accept, $grnid, $line_id, $jiwa_stateful);
        return $response;
    }

    /**
     * Operation goodsReceivedNoteLineDetailsGETManyRequestGRNIDLinesLineIDLineDetailsGetWithHttpInfo
     *
     * Retrieves a list of line details for a goods received note line.
     *
     * @param  string $accept Accept Header (required)
     * @param  string $grnid (required)
     * @param  string $line_id (required)
     * @param  bool $jiwa_stateful Stateful indicator (optional)
     *
     * @throws \Jiwa\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Jiwa\Model\GoodsReceivedNoteLineDetail[], HTTP status code, HTTP response headers (array of strings)
     */
    public function goodsReceivedNoteLineDetailsGETManyRequestGRNIDLinesLineIDLineDetailsGetWithHttpInfo($accept, $grnid, $line_id, $jiwa_stateful = null)
    {
        $returnType = '\Jiwa\Model\GoodsReceivedNoteLineDetail[]';
        $request = $this->goodsReceivedNoteLineDetailsGETManyRequestGRNIDLinesLineIDLineDetailsGetRequest($accept, $grnid, $line_id, $jiwa_stateful);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Jiwa\Model\GoodsReceivedNoteLineDetail[]',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 404:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Jiwa\Model\GoodsReceivedNoteLineDetail[]',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 401:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Jiwa\Model\GoodsReceivedNoteLineDetail[]',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 403:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Jiwa\Model\GoodsReceivedNoteLineDetail[]',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation goodsReceivedNoteLineDetailsGETManyRequestGRNIDLinesLineIDLineDetailsGetAsync
     *
     * Retrieves a list of line details for a goods received note line.
     *
     * @param  string $accept Accept Header (required)
     * @param  string $grnid (required)
     * @param  string $line_id (required)
     * @param  bool $jiwa_stateful Stateful indicator (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function goodsReceivedNoteLineDetailsGETManyRequestGRNIDLinesLineIDLineDetailsGetAsync($accept, $grnid, $line_id, $jiwa_stateful = null)
    {
        return $this->goodsReceivedNoteLineDetailsGETManyRequestGRNIDLinesLineIDLineDetailsGetAsyncWithHttpInfo($accept, $grnid, $line_id, $jiwa_stateful)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation goodsReceivedNoteLineDetailsGETManyRequestGRNIDLinesLineIDLineDetailsGetAsyncWithHttpInfo
     *
     * Retrieves a list of line details for a goods received note line.
     *
     * @param  string $accept Accept Header (required)
     * @param  string $grnid (required)
     * @param  string $line_id (required)
     * @param  bool $jiwa_stateful Stateful indicator (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function goodsReceivedNoteLineDetailsGETManyRequestGRNIDLinesLineIDLineDetailsGetAsyncWithHttpInfo($accept, $grnid, $line_id, $jiwa_stateful = null)
    {
        $returnType = '\Jiwa\Model\GoodsReceivedNoteLineDetail[]';
        $request = $this->goodsReceivedNoteLineDetailsGETManyRequestGRNIDLinesLineIDLineDetailsGetRequest($accept, $grnid, $line_id, $jiwa_stateful);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'goodsReceivedNoteLineDetailsGETManyRequestGRNIDLinesLineIDLineDetailsGet'
     *
     * @param  string $accept Accept Header (required)
     * @param  string $grnid (required)
     * @param  string $line_id (required)
     * @param  bool $jiwa_stateful Stateful indicator (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function goodsReceivedNoteLineDetailsGETManyRequestGRNIDLinesLineIDLineDetailsGetRequest($accept, $grnid, $line_id, $jiwa_stateful = null)
    {
        // verify the required parameter 'accept' is set
        if ($accept === null || (is_array($accept) && count($accept) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $accept when calling goodsReceivedNoteLineDetailsGETManyRequestGRNIDLinesLineIDLineDetailsGet'
            );
        }
        // verify the required parameter 'grnid' is set
        if ($grnid === null || (is_array($grnid) && count($grnid) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $grnid when calling goodsReceivedNoteLineDetailsGETManyRequestGRNIDLinesLineIDLineDetailsGet'
            );
        }
        // verify the required parameter 'line_id' is set
        if ($line_id === null || (is_array($line_id) && count($line_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $line_id when calling goodsReceivedNoteLineDetailsGETManyRequestGRNIDLinesLineIDLineDetailsGet'
            );
        }

        $resourcePath = '/GoodsReceivedNotes/{GRNID}/Lines/{LineID}/LineDetails';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // header params
        if ($accept !== null) {
            $headerParams['Accept'] = ObjectSerializer::toHeaderValue($accept);
        }
        // header params
        if ($jiwa_stateful !== null) {
            $headerParams['jiwa-stateful'] = ObjectSerializer::toHeaderValue($jiwa_stateful);
        }

        // path params
        if ($grnid !== null) {
            $resourcePath = str_replace(
                '{' . 'GRNID' . '}',
                ObjectSerializer::toPathValue($grnid),
                $resourcePath
            );
        }
        // path params
        if ($line_id !== null) {
            $resourcePath = str_replace(
                '{' . 'LineID' . '}',
                ObjectSerializer::toPathValue($line_id),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json', 'application/xml']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json', 'application/xml'],
                ['application/x-www-form-urlencoded', 'application/json', 'application/xml']
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            
            if($headers['Content-Type'] === 'application/json') {
                // \stdClass has no __toString(), so we should encode it manually
                if ($httpBody instanceof \stdClass) {
                    $httpBody = \GuzzleHttp\json_encode($httpBody);
                }
                // array has no __toString(), so we should encode it manually
                if(is_array($httpBody)) {
                    $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($httpBody));
                }
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\Query::build($formParams);
            }
        }

        // this endpoint requires HTTP basic authentication
        if ($this->config->getUsername() !== null || $this->config->getPassword() !== null) {
            $headers['Authorization'] = 'Basic ' . base64_encode($this->config->getUsername() . ":" . $this->config->getPassword());
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\Query::build($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation goodsReceivedNoteLineGETRequestGRNIDLinesLineIDGet
     *
     * Retrieves a goods received note line.
     *
     * @param  string $accept Accept Header (required)
     * @param  string $grnid grnid (required)
     * @param  string $line_id line_id (required)
     * @param  bool $jiwa_stateful Stateful indicator (optional)
     *
     * @throws \Jiwa\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Jiwa\Model\GoodsReceivedNoteLine
     */
    public function goodsReceivedNoteLineGETRequestGRNIDLinesLineIDGet($accept, $grnid, $line_id, $jiwa_stateful = null)
    {
        list($response) = $this->goodsReceivedNoteLineGETRequestGRNIDLinesLineIDGetWithHttpInfo($accept, $grnid, $line_id, $jiwa_stateful);
        return $response;
    }

    /**
     * Operation goodsReceivedNoteLineGETRequestGRNIDLinesLineIDGetWithHttpInfo
     *
     * Retrieves a goods received note line.
     *
     * @param  string $accept Accept Header (required)
     * @param  string $grnid (required)
     * @param  string $line_id (required)
     * @param  bool $jiwa_stateful Stateful indicator (optional)
     *
     * @throws \Jiwa\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Jiwa\Model\GoodsReceivedNoteLine, HTTP status code, HTTP response headers (array of strings)
     */
    public function goodsReceivedNoteLineGETRequestGRNIDLinesLineIDGetWithHttpInfo($accept, $grnid, $line_id, $jiwa_stateful = null)
    {
        $returnType = '\Jiwa\Model\GoodsReceivedNoteLine';
        $request = $this->goodsReceivedNoteLineGETRequestGRNIDLinesLineIDGetRequest($accept, $grnid, $line_id, $jiwa_stateful);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Jiwa\Model\GoodsReceivedNoteLine',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 401:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Jiwa\Model\GoodsReceivedNoteLine',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 403:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Jiwa\Model\GoodsReceivedNoteLine',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 404:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Jiwa\Model\GoodsReceivedNoteLine',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation goodsReceivedNoteLineGETRequestGRNIDLinesLineIDGetAsync
     *
     * Retrieves a goods received note line.
     *
     * @param  string $accept Accept Header (required)
     * @param  string $grnid (required)
     * @param  string $line_id (required)
     * @param  bool $jiwa_stateful Stateful indicator (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function goodsReceivedNoteLineGETRequestGRNIDLinesLineIDGetAsync($accept, $grnid, $line_id, $jiwa_stateful = null)
    {
        return $this->goodsReceivedNoteLineGETRequestGRNIDLinesLineIDGetAsyncWithHttpInfo($accept, $grnid, $line_id, $jiwa_stateful)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation goodsReceivedNoteLineGETRequestGRNIDLinesLineIDGetAsyncWithHttpInfo
     *
     * Retrieves a goods received note line.
     *
     * @param  string $accept Accept Header (required)
     * @param  string $grnid (required)
     * @param  string $line_id (required)
     * @param  bool $jiwa_stateful Stateful indicator (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function goodsReceivedNoteLineGETRequestGRNIDLinesLineIDGetAsyncWithHttpInfo($accept, $grnid, $line_id, $jiwa_stateful = null)
    {
        $returnType = '\Jiwa\Model\GoodsReceivedNoteLine';
        $request = $this->goodsReceivedNoteLineGETRequestGRNIDLinesLineIDGetRequest($accept, $grnid, $line_id, $jiwa_stateful);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'goodsReceivedNoteLineGETRequestGRNIDLinesLineIDGet'
     *
     * @param  string $accept Accept Header (required)
     * @param  string $grnid (required)
     * @param  string $line_id (required)
     * @param  bool $jiwa_stateful Stateful indicator (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function goodsReceivedNoteLineGETRequestGRNIDLinesLineIDGetRequest($accept, $grnid, $line_id, $jiwa_stateful = null)
    {
        // verify the required parameter 'accept' is set
        if ($accept === null || (is_array($accept) && count($accept) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $accept when calling goodsReceivedNoteLineGETRequestGRNIDLinesLineIDGet'
            );
        }
        // verify the required parameter 'grnid' is set
        if ($grnid === null || (is_array($grnid) && count($grnid) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $grnid when calling goodsReceivedNoteLineGETRequestGRNIDLinesLineIDGet'
            );
        }
        // verify the required parameter 'line_id' is set
        if ($line_id === null || (is_array($line_id) && count($line_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $line_id when calling goodsReceivedNoteLineGETRequestGRNIDLinesLineIDGet'
            );
        }

        $resourcePath = '/GoodsReceivedNotes/{GRNID}/Lines/{LineID}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // header params
        if ($accept !== null) {
            $headerParams['Accept'] = ObjectSerializer::toHeaderValue($accept);
        }
        // header params
        if ($jiwa_stateful !== null) {
            $headerParams['jiwa-stateful'] = ObjectSerializer::toHeaderValue($jiwa_stateful);
        }

        // path params
        if ($grnid !== null) {
            $resourcePath = str_replace(
                '{' . 'GRNID' . '}',
                ObjectSerializer::toPathValue($grnid),
                $resourcePath
            );
        }
        // path params
        if ($line_id !== null) {
            $resourcePath = str_replace(
                '{' . 'LineID' . '}',
                ObjectSerializer::toPathValue($line_id),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json', 'application/xml']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json', 'application/xml'],
                ['application/x-www-form-urlencoded', 'application/json', 'application/xml']
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            
            if($headers['Content-Type'] === 'application/json') {
                // \stdClass has no __toString(), so we should encode it manually
                if ($httpBody instanceof \stdClass) {
                    $httpBody = \GuzzleHttp\json_encode($httpBody);
                }
                // array has no __toString(), so we should encode it manually
                if(is_array($httpBody)) {
                    $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($httpBody));
                }
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\Query::build($formParams);
            }
        }

        // this endpoint requires HTTP basic authentication
        if ($this->config->getUsername() !== null || $this->config->getPassword() !== null) {
            $headers['Authorization'] = 'Basic ' . base64_encode($this->config->getUsername() . ":" . $this->config->getPassword());
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\Query::build($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation goodsReceivedNoteLinePATCHRequestGRNIDLinesLineIDUpdate
     *
     * Updates a line for a goods received note.
     *
     * @param  string $accept Accept Header (required)
     * @param  string $grnid grnid (required)
     * @param  string $line_id line_id (required)
     * @param  bool $jiwa_stateful Stateful indicator (optional)
     * @param  double $quantity_ordered quantity_ordered (optional)
     * @param  double $quantity_delivered quantity_delivered (optional)
     * @param  string $order_id order_id (optional)
     * @param  string $order_no order_no (optional)
     * @param  string $order_line_id order_line_id (optional)
     * @param  double $quantity quantity (optional)
     * @param  string $inventory_id inventory_id (optional)
     * @param  string $part_no part_no (optional)
     * @param  string $aux2 aux2 (optional)
     * @param  string $description description (optional)
     * @param  string $supplier_part_no supplier_part_no (optional)
     * @param  string $grn_line_type grn_line_type (optional)
     * @param  int $quantity_decimal_places quantity_decimal_places (optional)
     * @param  \DateTime $last_saved_date_time last_saved_date_time (optional)
     * @param  string $classification_id classification_id (optional)
     * @param  string $classification_description classification_description (optional)
     * @param  double $tax_amount tax_amount (optional)
     * @param  string $tax_id tax_id (optional)
     * @param  double $tax_rate tax_rate (optional)
     * @param  double $cost cost (optional)
     * @param  double $currency_rate_used currency_rate_used (optional)
     * @param  string $purchasing_classification_id purchasing_classification_id (optional)
     * @param  string $purchasing_classification_description purchasing_classification_description (optional)
     * @param  bool $posted_to_wip posted_to_wip (optional)
     * @param  double $job_charge job_charge (optional)
     * @param  bool $use_serial_no use_serial_no (optional)
     * @param  double $fx_cost fx_cost (optional)
     * @param  bool $physical_item physical_item (optional)
     * @param  string $inventory_expected_liability_ledger_account_id inventory_expected_liability_ledger_account_id (optional)
     * @param  string $inventory_expected_liability_ledger_account_no inventory_expected_liability_ledger_account_no (optional)
     * @param  string $inventory_expected_liability_ledger_account_description inventory_expected_liability_ledger_account_description (optional)
     * @param  string $inventory_expected_asset_ledger_account_id inventory_expected_asset_ledger_account_id (optional)
     * @param  string $inventory_expected_asset_ledger_account_no inventory_expected_asset_ledger_account_no (optional)
     * @param  string $inventory_expected_asset_ledger_account_description inventory_expected_asset_ledger_account_description (optional)
     * @param  string $inventory_delivered_asset_ledger_account_id inventory_delivered_asset_ledger_account_id (optional)
     * @param  string $inventory_delivered_asset_ledger_account_no inventory_delivered_asset_ledger_account_no (optional)
     * @param  string $inventory_delivered_asset_ledger_account_description inventory_delivered_asset_ledger_account_description (optional)
     * @param  string $inventory_value_ledger_account_id inventory_value_ledger_account_id (optional)
     * @param  string $inventory_value_ledger_account_no inventory_value_ledger_account_no (optional)
     * @param  string $inventory_value_ledger_account_description inventory_value_ledger_account_description (optional)
     * @param  string $inventory_delivered_liability_ledger_account_id inventory_delivered_liability_ledger_account_id (optional)
     * @param  string $inventory_delivered_liability_ledger_account_no inventory_delivered_liability_ledger_account_no (optional)
     * @param  string $inventory_delivered_liability_ledger_account_description inventory_delivered_liability_ledger_account_description (optional)
     * @param  string $inventory_wip_ledger_account_id inventory_wip_ledger_account_id (optional)
     * @param  string $inventory_wip_ledger_account_no inventory_wip_ledger_account_no (optional)
     * @param  string $inventory_wip_ledger_account_description inventory_wip_ledger_account_description (optional)
     * @param  \DateTime $po_line_last_saved_date_time po_line_last_saved_date_time (optional)
     * @param  double $order_units order_units (optional)
     * @param  int $item_no item_no (optional)
     * @param  string $in_creditor_rec_id in_creditor_rec_id (optional)
     * @param  string $in_supplier_warehouse_rec_id in_supplier_warehouse_rec_id (optional)
     * @param  string $job_costing_stage_id job_costing_stage_id (optional)
     * @param  string $job_costing_stage_no job_costing_stage_no (optional)
     * @param  string $job_costing_stage_name job_costing_stage_name (optional)
     * @param  string $job_costing_cost_centre_id job_costing_cost_centre_id (optional)
     * @param  string $job_costing_cost_centre_no job_costing_cost_centre_no (optional)
     * @param  string $job_costing_cost_centre_name job_costing_cost_centre_name (optional)
     * @param  string $job_costing_job_id job_costing_job_id (optional)
     * @param  string $job_costing_job_no job_costing_job_no (optional)
     * @param  double $unit_inc_tax unit_inc_tax (optional)
     * @param  double $line_total_inc_tax line_total_inc_tax (optional)
     * @param  double $fx_line_total_ex_tax fx_line_total_ex_tax (optional)
     * @param  int $fx_decimal_places fx_decimal_places (optional)
     * @param  int $home_decimal_places home_decimal_places (optional)
     * @param  bool $use_expiry_date use_expiry_date (optional)
     * @param  string $line_details line_details (optional)
     * @param  string $custom_field_values custom_field_values (optional)
     * @param  \Jiwa\Model\GoodsReceivedNoteLinePATCHRequest $body body (optional)
     *
     * @throws \Jiwa\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Jiwa\Model\GoodsReceivedNoteLine
     */
    public function goodsReceivedNoteLinePATCHRequestGRNIDLinesLineIDUpdate($accept, $grnid, $line_id, $jiwa_stateful = null, $quantity_ordered = null, $quantity_delivered = null, $order_id = null, $order_no = null, $order_line_id = null, $quantity = null, $inventory_id = null, $part_no = null, $aux2 = null, $description = null, $supplier_part_no = null, $grn_line_type = null, $quantity_decimal_places = null, $last_saved_date_time = null, $classification_id = null, $classification_description = null, $tax_amount = null, $tax_id = null, $tax_rate = null, $cost = null, $currency_rate_used = null, $purchasing_classification_id = null, $purchasing_classification_description = null, $posted_to_wip = null, $job_charge = null, $use_serial_no = null, $fx_cost = null, $physical_item = null, $inventory_expected_liability_ledger_account_id = null, $inventory_expected_liability_ledger_account_no = null, $inventory_expected_liability_ledger_account_description = null, $inventory_expected_asset_ledger_account_id = null, $inventory_expected_asset_ledger_account_no = null, $inventory_expected_asset_ledger_account_description = null, $inventory_delivered_asset_ledger_account_id = null, $inventory_delivered_asset_ledger_account_no = null, $inventory_delivered_asset_ledger_account_description = null, $inventory_value_ledger_account_id = null, $inventory_value_ledger_account_no = null, $inventory_value_ledger_account_description = null, $inventory_delivered_liability_ledger_account_id = null, $inventory_delivered_liability_ledger_account_no = null, $inventory_delivered_liability_ledger_account_description = null, $inventory_wip_ledger_account_id = null, $inventory_wip_ledger_account_no = null, $inventory_wip_ledger_account_description = null, $po_line_last_saved_date_time = null, $order_units = null, $item_no = null, $in_creditor_rec_id = null, $in_supplier_warehouse_rec_id = null, $job_costing_stage_id = null, $job_costing_stage_no = null, $job_costing_stage_name = null, $job_costing_cost_centre_id = null, $job_costing_cost_centre_no = null, $job_costing_cost_centre_name = null, $job_costing_job_id = null, $job_costing_job_no = null, $unit_inc_tax = null, $line_total_inc_tax = null, $fx_line_total_ex_tax = null, $fx_decimal_places = null, $home_decimal_places = null, $use_expiry_date = null, $line_details = null, $custom_field_values = null, $body = null)
    {
        list($response) = $this->goodsReceivedNoteLinePATCHRequestGRNIDLinesLineIDUpdateWithHttpInfo($accept, $grnid, $line_id, $jiwa_stateful, $quantity_ordered, $quantity_delivered, $order_id, $order_no, $order_line_id, $quantity, $inventory_id, $part_no, $aux2, $description, $supplier_part_no, $grn_line_type, $quantity_decimal_places, $last_saved_date_time, $classification_id, $classification_description, $tax_amount, $tax_id, $tax_rate, $cost, $currency_rate_used, $purchasing_classification_id, $purchasing_classification_description, $posted_to_wip, $job_charge, $use_serial_no, $fx_cost, $physical_item, $inventory_expected_liability_ledger_account_id, $inventory_expected_liability_ledger_account_no, $inventory_expected_liability_ledger_account_description, $inventory_expected_asset_ledger_account_id, $inventory_expected_asset_ledger_account_no, $inventory_expected_asset_ledger_account_description, $inventory_delivered_asset_ledger_account_id, $inventory_delivered_asset_ledger_account_no, $inventory_delivered_asset_ledger_account_description, $inventory_value_ledger_account_id, $inventory_value_ledger_account_no, $inventory_value_ledger_account_description, $inventory_delivered_liability_ledger_account_id, $inventory_delivered_liability_ledger_account_no, $inventory_delivered_liability_ledger_account_description, $inventory_wip_ledger_account_id, $inventory_wip_ledger_account_no, $inventory_wip_ledger_account_description, $po_line_last_saved_date_time, $order_units, $item_no, $in_creditor_rec_id, $in_supplier_warehouse_rec_id, $job_costing_stage_id, $job_costing_stage_no, $job_costing_stage_name, $job_costing_cost_centre_id, $job_costing_cost_centre_no, $job_costing_cost_centre_name, $job_costing_job_id, $job_costing_job_no, $unit_inc_tax, $line_total_inc_tax, $fx_line_total_ex_tax, $fx_decimal_places, $home_decimal_places, $use_expiry_date, $line_details, $custom_field_values, $body);
        return $response;
    }

    /**
     * Operation goodsReceivedNoteLinePATCHRequestGRNIDLinesLineIDUpdateWithHttpInfo
     *
     * Updates a line for a goods received note.
     *
     * @param  string $accept Accept Header (required)
     * @param  string $grnid (required)
     * @param  string $line_id (required)
     * @param  bool $jiwa_stateful Stateful indicator (optional)
     * @param  double $quantity_ordered (optional)
     * @param  double $quantity_delivered (optional)
     * @param  string $order_id (optional)
     * @param  string $order_no (optional)
     * @param  string $order_line_id (optional)
     * @param  double $quantity (optional)
     * @param  string $inventory_id (optional)
     * @param  string $part_no (optional)
     * @param  string $aux2 (optional)
     * @param  string $description (optional)
     * @param  string $supplier_part_no (optional)
     * @param  string $grn_line_type (optional)
     * @param  int $quantity_decimal_places (optional)
     * @param  \DateTime $last_saved_date_time (optional)
     * @param  string $classification_id (optional)
     * @param  string $classification_description (optional)
     * @param  double $tax_amount (optional)
     * @param  string $tax_id (optional)
     * @param  double $tax_rate (optional)
     * @param  double $cost (optional)
     * @param  double $currency_rate_used (optional)
     * @param  string $purchasing_classification_id (optional)
     * @param  string $purchasing_classification_description (optional)
     * @param  bool $posted_to_wip (optional)
     * @param  double $job_charge (optional)
     * @param  bool $use_serial_no (optional)
     * @param  double $fx_cost (optional)
     * @param  bool $physical_item (optional)
     * @param  string $inventory_expected_liability_ledger_account_id (optional)
     * @param  string $inventory_expected_liability_ledger_account_no (optional)
     * @param  string $inventory_expected_liability_ledger_account_description (optional)
     * @param  string $inventory_expected_asset_ledger_account_id (optional)
     * @param  string $inventory_expected_asset_ledger_account_no (optional)
     * @param  string $inventory_expected_asset_ledger_account_description (optional)
     * @param  string $inventory_delivered_asset_ledger_account_id (optional)
     * @param  string $inventory_delivered_asset_ledger_account_no (optional)
     * @param  string $inventory_delivered_asset_ledger_account_description (optional)
     * @param  string $inventory_value_ledger_account_id (optional)
     * @param  string $inventory_value_ledger_account_no (optional)
     * @param  string $inventory_value_ledger_account_description (optional)
     * @param  string $inventory_delivered_liability_ledger_account_id (optional)
     * @param  string $inventory_delivered_liability_ledger_account_no (optional)
     * @param  string $inventory_delivered_liability_ledger_account_description (optional)
     * @param  string $inventory_wip_ledger_account_id (optional)
     * @param  string $inventory_wip_ledger_account_no (optional)
     * @param  string $inventory_wip_ledger_account_description (optional)
     * @param  \DateTime $po_line_last_saved_date_time (optional)
     * @param  double $order_units (optional)
     * @param  int $item_no (optional)
     * @param  string $in_creditor_rec_id (optional)
     * @param  string $in_supplier_warehouse_rec_id (optional)
     * @param  string $job_costing_stage_id (optional)
     * @param  string $job_costing_stage_no (optional)
     * @param  string $job_costing_stage_name (optional)
     * @param  string $job_costing_cost_centre_id (optional)
     * @param  string $job_costing_cost_centre_no (optional)
     * @param  string $job_costing_cost_centre_name (optional)
     * @param  string $job_costing_job_id (optional)
     * @param  string $job_costing_job_no (optional)
     * @param  double $unit_inc_tax (optional)
     * @param  double $line_total_inc_tax (optional)
     * @param  double $fx_line_total_ex_tax (optional)
     * @param  int $fx_decimal_places (optional)
     * @param  int $home_decimal_places (optional)
     * @param  bool $use_expiry_date (optional)
     * @param  string $line_details (optional)
     * @param  string $custom_field_values (optional)
     * @param  \Jiwa\Model\GoodsReceivedNoteLinePATCHRequest $body (optional)
     *
     * @throws \Jiwa\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Jiwa\Model\GoodsReceivedNoteLine, HTTP status code, HTTP response headers (array of strings)
     */
    public function goodsReceivedNoteLinePATCHRequestGRNIDLinesLineIDUpdateWithHttpInfo($accept, $grnid, $line_id, $jiwa_stateful = null, $quantity_ordered = null, $quantity_delivered = null, $order_id = null, $order_no = null, $order_line_id = null, $quantity = null, $inventory_id = null, $part_no = null, $aux2 = null, $description = null, $supplier_part_no = null, $grn_line_type = null, $quantity_decimal_places = null, $last_saved_date_time = null, $classification_id = null, $classification_description = null, $tax_amount = null, $tax_id = null, $tax_rate = null, $cost = null, $currency_rate_used = null, $purchasing_classification_id = null, $purchasing_classification_description = null, $posted_to_wip = null, $job_charge = null, $use_serial_no = null, $fx_cost = null, $physical_item = null, $inventory_expected_liability_ledger_account_id = null, $inventory_expected_liability_ledger_account_no = null, $inventory_expected_liability_ledger_account_description = null, $inventory_expected_asset_ledger_account_id = null, $inventory_expected_asset_ledger_account_no = null, $inventory_expected_asset_ledger_account_description = null, $inventory_delivered_asset_ledger_account_id = null, $inventory_delivered_asset_ledger_account_no = null, $inventory_delivered_asset_ledger_account_description = null, $inventory_value_ledger_account_id = null, $inventory_value_ledger_account_no = null, $inventory_value_ledger_account_description = null, $inventory_delivered_liability_ledger_account_id = null, $inventory_delivered_liability_ledger_account_no = null, $inventory_delivered_liability_ledger_account_description = null, $inventory_wip_ledger_account_id = null, $inventory_wip_ledger_account_no = null, $inventory_wip_ledger_account_description = null, $po_line_last_saved_date_time = null, $order_units = null, $item_no = null, $in_creditor_rec_id = null, $in_supplier_warehouse_rec_id = null, $job_costing_stage_id = null, $job_costing_stage_no = null, $job_costing_stage_name = null, $job_costing_cost_centre_id = null, $job_costing_cost_centre_no = null, $job_costing_cost_centre_name = null, $job_costing_job_id = null, $job_costing_job_no = null, $unit_inc_tax = null, $line_total_inc_tax = null, $fx_line_total_ex_tax = null, $fx_decimal_places = null, $home_decimal_places = null, $use_expiry_date = null, $line_details = null, $custom_field_values = null, $body = null)
    {
        $returnType = '\Jiwa\Model\GoodsReceivedNoteLine';
        $request = $this->goodsReceivedNoteLinePATCHRequestGRNIDLinesLineIDUpdateRequest($accept, $grnid, $line_id, $jiwa_stateful, $quantity_ordered, $quantity_delivered, $order_id, $order_no, $order_line_id, $quantity, $inventory_id, $part_no, $aux2, $description, $supplier_part_no, $grn_line_type, $quantity_decimal_places, $last_saved_date_time, $classification_id, $classification_description, $tax_amount, $tax_id, $tax_rate, $cost, $currency_rate_used, $purchasing_classification_id, $purchasing_classification_description, $posted_to_wip, $job_charge, $use_serial_no, $fx_cost, $physical_item, $inventory_expected_liability_ledger_account_id, $inventory_expected_liability_ledger_account_no, $inventory_expected_liability_ledger_account_description, $inventory_expected_asset_ledger_account_id, $inventory_expected_asset_ledger_account_no, $inventory_expected_asset_ledger_account_description, $inventory_delivered_asset_ledger_account_id, $inventory_delivered_asset_ledger_account_no, $inventory_delivered_asset_ledger_account_description, $inventory_value_ledger_account_id, $inventory_value_ledger_account_no, $inventory_value_ledger_account_description, $inventory_delivered_liability_ledger_account_id, $inventory_delivered_liability_ledger_account_no, $inventory_delivered_liability_ledger_account_description, $inventory_wip_ledger_account_id, $inventory_wip_ledger_account_no, $inventory_wip_ledger_account_description, $po_line_last_saved_date_time, $order_units, $item_no, $in_creditor_rec_id, $in_supplier_warehouse_rec_id, $job_costing_stage_id, $job_costing_stage_no, $job_costing_stage_name, $job_costing_cost_centre_id, $job_costing_cost_centre_no, $job_costing_cost_centre_name, $job_costing_job_id, $job_costing_job_no, $unit_inc_tax, $line_total_inc_tax, $fx_line_total_ex_tax, $fx_decimal_places, $home_decimal_places, $use_expiry_date, $line_details, $custom_field_values, $body);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Jiwa\Model\GoodsReceivedNoteLine',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 401:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Jiwa\Model\GoodsReceivedNoteLine',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 403:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Jiwa\Model\GoodsReceivedNoteLine',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 404:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Jiwa\Model\GoodsReceivedNoteLine',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation goodsReceivedNoteLinePATCHRequestGRNIDLinesLineIDUpdateAsync
     *
     * Updates a line for a goods received note.
     *
     * @param  string $accept Accept Header (required)
     * @param  string $grnid (required)
     * @param  string $line_id (required)
     * @param  bool $jiwa_stateful Stateful indicator (optional)
     * @param  double $quantity_ordered (optional)
     * @param  double $quantity_delivered (optional)
     * @param  string $order_id (optional)
     * @param  string $order_no (optional)
     * @param  string $order_line_id (optional)
     * @param  double $quantity (optional)
     * @param  string $inventory_id (optional)
     * @param  string $part_no (optional)
     * @param  string $aux2 (optional)
     * @param  string $description (optional)
     * @param  string $supplier_part_no (optional)
     * @param  string $grn_line_type (optional)
     * @param  int $quantity_decimal_places (optional)
     * @param  \DateTime $last_saved_date_time (optional)
     * @param  string $classification_id (optional)
     * @param  string $classification_description (optional)
     * @param  double $tax_amount (optional)
     * @param  string $tax_id (optional)
     * @param  double $tax_rate (optional)
     * @param  double $cost (optional)
     * @param  double $currency_rate_used (optional)
     * @param  string $purchasing_classification_id (optional)
     * @param  string $purchasing_classification_description (optional)
     * @param  bool $posted_to_wip (optional)
     * @param  double $job_charge (optional)
     * @param  bool $use_serial_no (optional)
     * @param  double $fx_cost (optional)
     * @param  bool $physical_item (optional)
     * @param  string $inventory_expected_liability_ledger_account_id (optional)
     * @param  string $inventory_expected_liability_ledger_account_no (optional)
     * @param  string $inventory_expected_liability_ledger_account_description (optional)
     * @param  string $inventory_expected_asset_ledger_account_id (optional)
     * @param  string $inventory_expected_asset_ledger_account_no (optional)
     * @param  string $inventory_expected_asset_ledger_account_description (optional)
     * @param  string $inventory_delivered_asset_ledger_account_id (optional)
     * @param  string $inventory_delivered_asset_ledger_account_no (optional)
     * @param  string $inventory_delivered_asset_ledger_account_description (optional)
     * @param  string $inventory_value_ledger_account_id (optional)
     * @param  string $inventory_value_ledger_account_no (optional)
     * @param  string $inventory_value_ledger_account_description (optional)
     * @param  string $inventory_delivered_liability_ledger_account_id (optional)
     * @param  string $inventory_delivered_liability_ledger_account_no (optional)
     * @param  string $inventory_delivered_liability_ledger_account_description (optional)
     * @param  string $inventory_wip_ledger_account_id (optional)
     * @param  string $inventory_wip_ledger_account_no (optional)
     * @param  string $inventory_wip_ledger_account_description (optional)
     * @param  \DateTime $po_line_last_saved_date_time (optional)
     * @param  double $order_units (optional)
     * @param  int $item_no (optional)
     * @param  string $in_creditor_rec_id (optional)
     * @param  string $in_supplier_warehouse_rec_id (optional)
     * @param  string $job_costing_stage_id (optional)
     * @param  string $job_costing_stage_no (optional)
     * @param  string $job_costing_stage_name (optional)
     * @param  string $job_costing_cost_centre_id (optional)
     * @param  string $job_costing_cost_centre_no (optional)
     * @param  string $job_costing_cost_centre_name (optional)
     * @param  string $job_costing_job_id (optional)
     * @param  string $job_costing_job_no (optional)
     * @param  double $unit_inc_tax (optional)
     * @param  double $line_total_inc_tax (optional)
     * @param  double $fx_line_total_ex_tax (optional)
     * @param  int $fx_decimal_places (optional)
     * @param  int $home_decimal_places (optional)
     * @param  bool $use_expiry_date (optional)
     * @param  string $line_details (optional)
     * @param  string $custom_field_values (optional)
     * @param  \Jiwa\Model\GoodsReceivedNoteLinePATCHRequest $body (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function goodsReceivedNoteLinePATCHRequestGRNIDLinesLineIDUpdateAsync($accept, $grnid, $line_id, $jiwa_stateful = null, $quantity_ordered = null, $quantity_delivered = null, $order_id = null, $order_no = null, $order_line_id = null, $quantity = null, $inventory_id = null, $part_no = null, $aux2 = null, $description = null, $supplier_part_no = null, $grn_line_type = null, $quantity_decimal_places = null, $last_saved_date_time = null, $classification_id = null, $classification_description = null, $tax_amount = null, $tax_id = null, $tax_rate = null, $cost = null, $currency_rate_used = null, $purchasing_classification_id = null, $purchasing_classification_description = null, $posted_to_wip = null, $job_charge = null, $use_serial_no = null, $fx_cost = null, $physical_item = null, $inventory_expected_liability_ledger_account_id = null, $inventory_expected_liability_ledger_account_no = null, $inventory_expected_liability_ledger_account_description = null, $inventory_expected_asset_ledger_account_id = null, $inventory_expected_asset_ledger_account_no = null, $inventory_expected_asset_ledger_account_description = null, $inventory_delivered_asset_ledger_account_id = null, $inventory_delivered_asset_ledger_account_no = null, $inventory_delivered_asset_ledger_account_description = null, $inventory_value_ledger_account_id = null, $inventory_value_ledger_account_no = null, $inventory_value_ledger_account_description = null, $inventory_delivered_liability_ledger_account_id = null, $inventory_delivered_liability_ledger_account_no = null, $inventory_delivered_liability_ledger_account_description = null, $inventory_wip_ledger_account_id = null, $inventory_wip_ledger_account_no = null, $inventory_wip_ledger_account_description = null, $po_line_last_saved_date_time = null, $order_units = null, $item_no = null, $in_creditor_rec_id = null, $in_supplier_warehouse_rec_id = null, $job_costing_stage_id = null, $job_costing_stage_no = null, $job_costing_stage_name = null, $job_costing_cost_centre_id = null, $job_costing_cost_centre_no = null, $job_costing_cost_centre_name = null, $job_costing_job_id = null, $job_costing_job_no = null, $unit_inc_tax = null, $line_total_inc_tax = null, $fx_line_total_ex_tax = null, $fx_decimal_places = null, $home_decimal_places = null, $use_expiry_date = null, $line_details = null, $custom_field_values = null, $body = null)
    {
        return $this->goodsReceivedNoteLinePATCHRequestGRNIDLinesLineIDUpdateAsyncWithHttpInfo($accept, $grnid, $line_id, $jiwa_stateful, $quantity_ordered, $quantity_delivered, $order_id, $order_no, $order_line_id, $quantity, $inventory_id, $part_no, $aux2, $description, $supplier_part_no, $grn_line_type, $quantity_decimal_places, $last_saved_date_time, $classification_id, $classification_description, $tax_amount, $tax_id, $tax_rate, $cost, $currency_rate_used, $purchasing_classification_id, $purchasing_classification_description, $posted_to_wip, $job_charge, $use_serial_no, $fx_cost, $physical_item, $inventory_expected_liability_ledger_account_id, $inventory_expected_liability_ledger_account_no, $inventory_expected_liability_ledger_account_description, $inventory_expected_asset_ledger_account_id, $inventory_expected_asset_ledger_account_no, $inventory_expected_asset_ledger_account_description, $inventory_delivered_asset_ledger_account_id, $inventory_delivered_asset_ledger_account_no, $inventory_delivered_asset_ledger_account_description, $inventory_value_ledger_account_id, $inventory_value_ledger_account_no, $inventory_value_ledger_account_description, $inventory_delivered_liability_ledger_account_id, $inventory_delivered_liability_ledger_account_no, $inventory_delivered_liability_ledger_account_description, $inventory_wip_ledger_account_id, $inventory_wip_ledger_account_no, $inventory_wip_ledger_account_description, $po_line_last_saved_date_time, $order_units, $item_no, $in_creditor_rec_id, $in_supplier_warehouse_rec_id, $job_costing_stage_id, $job_costing_stage_no, $job_costing_stage_name, $job_costing_cost_centre_id, $job_costing_cost_centre_no, $job_costing_cost_centre_name, $job_costing_job_id, $job_costing_job_no, $unit_inc_tax, $line_total_inc_tax, $fx_line_total_ex_tax, $fx_decimal_places, $home_decimal_places, $use_expiry_date, $line_details, $custom_field_values, $body)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation goodsReceivedNoteLinePATCHRequestGRNIDLinesLineIDUpdateAsyncWithHttpInfo
     *
     * Updates a line for a goods received note.
     *
     * @param  string $accept Accept Header (required)
     * @param  string $grnid (required)
     * @param  string $line_id (required)
     * @param  bool $jiwa_stateful Stateful indicator (optional)
     * @param  double $quantity_ordered (optional)
     * @param  double $quantity_delivered (optional)
     * @param  string $order_id (optional)
     * @param  string $order_no (optional)
     * @param  string $order_line_id (optional)
     * @param  double $quantity (optional)
     * @param  string $inventory_id (optional)
     * @param  string $part_no (optional)
     * @param  string $aux2 (optional)
     * @param  string $description (optional)
     * @param  string $supplier_part_no (optional)
     * @param  string $grn_line_type (optional)
     * @param  int $quantity_decimal_places (optional)
     * @param  \DateTime $last_saved_date_time (optional)
     * @param  string $classification_id (optional)
     * @param  string $classification_description (optional)
     * @param  double $tax_amount (optional)
     * @param  string $tax_id (optional)
     * @param  double $tax_rate (optional)
     * @param  double $cost (optional)
     * @param  double $currency_rate_used (optional)
     * @param  string $purchasing_classification_id (optional)
     * @param  string $purchasing_classification_description (optional)
     * @param  bool $posted_to_wip (optional)
     * @param  double $job_charge (optional)
     * @param  bool $use_serial_no (optional)
     * @param  double $fx_cost (optional)
     * @param  bool $physical_item (optional)
     * @param  string $inventory_expected_liability_ledger_account_id (optional)
     * @param  string $inventory_expected_liability_ledger_account_no (optional)
     * @param  string $inventory_expected_liability_ledger_account_description (optional)
     * @param  string $inventory_expected_asset_ledger_account_id (optional)
     * @param  string $inventory_expected_asset_ledger_account_no (optional)
     * @param  string $inventory_expected_asset_ledger_account_description (optional)
     * @param  string $inventory_delivered_asset_ledger_account_id (optional)
     * @param  string $inventory_delivered_asset_ledger_account_no (optional)
     * @param  string $inventory_delivered_asset_ledger_account_description (optional)
     * @param  string $inventory_value_ledger_account_id (optional)
     * @param  string $inventory_value_ledger_account_no (optional)
     * @param  string $inventory_value_ledger_account_description (optional)
     * @param  string $inventory_delivered_liability_ledger_account_id (optional)
     * @param  string $inventory_delivered_liability_ledger_account_no (optional)
     * @param  string $inventory_delivered_liability_ledger_account_description (optional)
     * @param  string $inventory_wip_ledger_account_id (optional)
     * @param  string $inventory_wip_ledger_account_no (optional)
     * @param  string $inventory_wip_ledger_account_description (optional)
     * @param  \DateTime $po_line_last_saved_date_time (optional)
     * @param  double $order_units (optional)
     * @param  int $item_no (optional)
     * @param  string $in_creditor_rec_id (optional)
     * @param  string $in_supplier_warehouse_rec_id (optional)
     * @param  string $job_costing_stage_id (optional)
     * @param  string $job_costing_stage_no (optional)
     * @param  string $job_costing_stage_name (optional)
     * @param  string $job_costing_cost_centre_id (optional)
     * @param  string $job_costing_cost_centre_no (optional)
     * @param  string $job_costing_cost_centre_name (optional)
     * @param  string $job_costing_job_id (optional)
     * @param  string $job_costing_job_no (optional)
     * @param  double $unit_inc_tax (optional)
     * @param  double $line_total_inc_tax (optional)
     * @param  double $fx_line_total_ex_tax (optional)
     * @param  int $fx_decimal_places (optional)
     * @param  int $home_decimal_places (optional)
     * @param  bool $use_expiry_date (optional)
     * @param  string $line_details (optional)
     * @param  string $custom_field_values (optional)
     * @param  \Jiwa\Model\GoodsReceivedNoteLinePATCHRequest $body (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function goodsReceivedNoteLinePATCHRequestGRNIDLinesLineIDUpdateAsyncWithHttpInfo($accept, $grnid, $line_id, $jiwa_stateful = null, $quantity_ordered = null, $quantity_delivered = null, $order_id = null, $order_no = null, $order_line_id = null, $quantity = null, $inventory_id = null, $part_no = null, $aux2 = null, $description = null, $supplier_part_no = null, $grn_line_type = null, $quantity_decimal_places = null, $last_saved_date_time = null, $classification_id = null, $classification_description = null, $tax_amount = null, $tax_id = null, $tax_rate = null, $cost = null, $currency_rate_used = null, $purchasing_classification_id = null, $purchasing_classification_description = null, $posted_to_wip = null, $job_charge = null, $use_serial_no = null, $fx_cost = null, $physical_item = null, $inventory_expected_liability_ledger_account_id = null, $inventory_expected_liability_ledger_account_no = null, $inventory_expected_liability_ledger_account_description = null, $inventory_expected_asset_ledger_account_id = null, $inventory_expected_asset_ledger_account_no = null, $inventory_expected_asset_ledger_account_description = null, $inventory_delivered_asset_ledger_account_id = null, $inventory_delivered_asset_ledger_account_no = null, $inventory_delivered_asset_ledger_account_description = null, $inventory_value_ledger_account_id = null, $inventory_value_ledger_account_no = null, $inventory_value_ledger_account_description = null, $inventory_delivered_liability_ledger_account_id = null, $inventory_delivered_liability_ledger_account_no = null, $inventory_delivered_liability_ledger_account_description = null, $inventory_wip_ledger_account_id = null, $inventory_wip_ledger_account_no = null, $inventory_wip_ledger_account_description = null, $po_line_last_saved_date_time = null, $order_units = null, $item_no = null, $in_creditor_rec_id = null, $in_supplier_warehouse_rec_id = null, $job_costing_stage_id = null, $job_costing_stage_no = null, $job_costing_stage_name = null, $job_costing_cost_centre_id = null, $job_costing_cost_centre_no = null, $job_costing_cost_centre_name = null, $job_costing_job_id = null, $job_costing_job_no = null, $unit_inc_tax = null, $line_total_inc_tax = null, $fx_line_total_ex_tax = null, $fx_decimal_places = null, $home_decimal_places = null, $use_expiry_date = null, $line_details = null, $custom_field_values = null, $body = null)
    {
        $returnType = '\Jiwa\Model\GoodsReceivedNoteLine';
        $request = $this->goodsReceivedNoteLinePATCHRequestGRNIDLinesLineIDUpdateRequest($accept, $grnid, $line_id, $jiwa_stateful, $quantity_ordered, $quantity_delivered, $order_id, $order_no, $order_line_id, $quantity, $inventory_id, $part_no, $aux2, $description, $supplier_part_no, $grn_line_type, $quantity_decimal_places, $last_saved_date_time, $classification_id, $classification_description, $tax_amount, $tax_id, $tax_rate, $cost, $currency_rate_used, $purchasing_classification_id, $purchasing_classification_description, $posted_to_wip, $job_charge, $use_serial_no, $fx_cost, $physical_item, $inventory_expected_liability_ledger_account_id, $inventory_expected_liability_ledger_account_no, $inventory_expected_liability_ledger_account_description, $inventory_expected_asset_ledger_account_id, $inventory_expected_asset_ledger_account_no, $inventory_expected_asset_ledger_account_description, $inventory_delivered_asset_ledger_account_id, $inventory_delivered_asset_ledger_account_no, $inventory_delivered_asset_ledger_account_description, $inventory_value_ledger_account_id, $inventory_value_ledger_account_no, $inventory_value_ledger_account_description, $inventory_delivered_liability_ledger_account_id, $inventory_delivered_liability_ledger_account_no, $inventory_delivered_liability_ledger_account_description, $inventory_wip_ledger_account_id, $inventory_wip_ledger_account_no, $inventory_wip_ledger_account_description, $po_line_last_saved_date_time, $order_units, $item_no, $in_creditor_rec_id, $in_supplier_warehouse_rec_id, $job_costing_stage_id, $job_costing_stage_no, $job_costing_stage_name, $job_costing_cost_centre_id, $job_costing_cost_centre_no, $job_costing_cost_centre_name, $job_costing_job_id, $job_costing_job_no, $unit_inc_tax, $line_total_inc_tax, $fx_line_total_ex_tax, $fx_decimal_places, $home_decimal_places, $use_expiry_date, $line_details, $custom_field_values, $body);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'goodsReceivedNoteLinePATCHRequestGRNIDLinesLineIDUpdate'
     *
     * @param  string $accept Accept Header (required)
     * @param  string $grnid (required)
     * @param  string $line_id (required)
     * @param  bool $jiwa_stateful Stateful indicator (optional)
     * @param  double $quantity_ordered (optional)
     * @param  double $quantity_delivered (optional)
     * @param  string $order_id (optional)
     * @param  string $order_no (optional)
     * @param  string $order_line_id (optional)
     * @param  double $quantity (optional)
     * @param  string $inventory_id (optional)
     * @param  string $part_no (optional)
     * @param  string $aux2 (optional)
     * @param  string $description (optional)
     * @param  string $supplier_part_no (optional)
     * @param  string $grn_line_type (optional)
     * @param  int $quantity_decimal_places (optional)
     * @param  \DateTime $last_saved_date_time (optional)
     * @param  string $classification_id (optional)
     * @param  string $classification_description (optional)
     * @param  double $tax_amount (optional)
     * @param  string $tax_id (optional)
     * @param  double $tax_rate (optional)
     * @param  double $cost (optional)
     * @param  double $currency_rate_used (optional)
     * @param  string $purchasing_classification_id (optional)
     * @param  string $purchasing_classification_description (optional)
     * @param  bool $posted_to_wip (optional)
     * @param  double $job_charge (optional)
     * @param  bool $use_serial_no (optional)
     * @param  double $fx_cost (optional)
     * @param  bool $physical_item (optional)
     * @param  string $inventory_expected_liability_ledger_account_id (optional)
     * @param  string $inventory_expected_liability_ledger_account_no (optional)
     * @param  string $inventory_expected_liability_ledger_account_description (optional)
     * @param  string $inventory_expected_asset_ledger_account_id (optional)
     * @param  string $inventory_expected_asset_ledger_account_no (optional)
     * @param  string $inventory_expected_asset_ledger_account_description (optional)
     * @param  string $inventory_delivered_asset_ledger_account_id (optional)
     * @param  string $inventory_delivered_asset_ledger_account_no (optional)
     * @param  string $inventory_delivered_asset_ledger_account_description (optional)
     * @param  string $inventory_value_ledger_account_id (optional)
     * @param  string $inventory_value_ledger_account_no (optional)
     * @param  string $inventory_value_ledger_account_description (optional)
     * @param  string $inventory_delivered_liability_ledger_account_id (optional)
     * @param  string $inventory_delivered_liability_ledger_account_no (optional)
     * @param  string $inventory_delivered_liability_ledger_account_description (optional)
     * @param  string $inventory_wip_ledger_account_id (optional)
     * @param  string $inventory_wip_ledger_account_no (optional)
     * @param  string $inventory_wip_ledger_account_description (optional)
     * @param  \DateTime $po_line_last_saved_date_time (optional)
     * @param  double $order_units (optional)
     * @param  int $item_no (optional)
     * @param  string $in_creditor_rec_id (optional)
     * @param  string $in_supplier_warehouse_rec_id (optional)
     * @param  string $job_costing_stage_id (optional)
     * @param  string $job_costing_stage_no (optional)
     * @param  string $job_costing_stage_name (optional)
     * @param  string $job_costing_cost_centre_id (optional)
     * @param  string $job_costing_cost_centre_no (optional)
     * @param  string $job_costing_cost_centre_name (optional)
     * @param  string $job_costing_job_id (optional)
     * @param  string $job_costing_job_no (optional)
     * @param  double $unit_inc_tax (optional)
     * @param  double $line_total_inc_tax (optional)
     * @param  double $fx_line_total_ex_tax (optional)
     * @param  int $fx_decimal_places (optional)
     * @param  int $home_decimal_places (optional)
     * @param  bool $use_expiry_date (optional)
     * @param  string $line_details (optional)
     * @param  string $custom_field_values (optional)
     * @param  \Jiwa\Model\GoodsReceivedNoteLinePATCHRequest $body (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function goodsReceivedNoteLinePATCHRequestGRNIDLinesLineIDUpdateRequest($accept, $grnid, $line_id, $jiwa_stateful = null, $quantity_ordered = null, $quantity_delivered = null, $order_id = null, $order_no = null, $order_line_id = null, $quantity = null, $inventory_id = null, $part_no = null, $aux2 = null, $description = null, $supplier_part_no = null, $grn_line_type = null, $quantity_decimal_places = null, $last_saved_date_time = null, $classification_id = null, $classification_description = null, $tax_amount = null, $tax_id = null, $tax_rate = null, $cost = null, $currency_rate_used = null, $purchasing_classification_id = null, $purchasing_classification_description = null, $posted_to_wip = null, $job_charge = null, $use_serial_no = null, $fx_cost = null, $physical_item = null, $inventory_expected_liability_ledger_account_id = null, $inventory_expected_liability_ledger_account_no = null, $inventory_expected_liability_ledger_account_description = null, $inventory_expected_asset_ledger_account_id = null, $inventory_expected_asset_ledger_account_no = null, $inventory_expected_asset_ledger_account_description = null, $inventory_delivered_asset_ledger_account_id = null, $inventory_delivered_asset_ledger_account_no = null, $inventory_delivered_asset_ledger_account_description = null, $inventory_value_ledger_account_id = null, $inventory_value_ledger_account_no = null, $inventory_value_ledger_account_description = null, $inventory_delivered_liability_ledger_account_id = null, $inventory_delivered_liability_ledger_account_no = null, $inventory_delivered_liability_ledger_account_description = null, $inventory_wip_ledger_account_id = null, $inventory_wip_ledger_account_no = null, $inventory_wip_ledger_account_description = null, $po_line_last_saved_date_time = null, $order_units = null, $item_no = null, $in_creditor_rec_id = null, $in_supplier_warehouse_rec_id = null, $job_costing_stage_id = null, $job_costing_stage_no = null, $job_costing_stage_name = null, $job_costing_cost_centre_id = null, $job_costing_cost_centre_no = null, $job_costing_cost_centre_name = null, $job_costing_job_id = null, $job_costing_job_no = null, $unit_inc_tax = null, $line_total_inc_tax = null, $fx_line_total_ex_tax = null, $fx_decimal_places = null, $home_decimal_places = null, $use_expiry_date = null, $line_details = null, $custom_field_values = null, $body = null)
    {
        // verify the required parameter 'accept' is set
        if ($accept === null || (is_array($accept) && count($accept) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $accept when calling goodsReceivedNoteLinePATCHRequestGRNIDLinesLineIDUpdate'
            );
        }
        // verify the required parameter 'grnid' is set
        if ($grnid === null || (is_array($grnid) && count($grnid) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $grnid when calling goodsReceivedNoteLinePATCHRequestGRNIDLinesLineIDUpdate'
            );
        }
        // verify the required parameter 'line_id' is set
        if ($line_id === null || (is_array($line_id) && count($line_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $line_id when calling goodsReceivedNoteLinePATCHRequestGRNIDLinesLineIDUpdate'
            );
        }

        $resourcePath = '/GoodsReceivedNotes/{GRNID}/Lines/{LineID}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        if ($quantity_ordered !== null) {
            $queryParams['QuantityOrdered'] = ObjectSerializer::toQueryValue($quantity_ordered);
        }
        // query params
        if ($quantity_delivered !== null) {
            $queryParams['QuantityDelivered'] = ObjectSerializer::toQueryValue($quantity_delivered);
        }
        // query params
        if ($order_id !== null) {
            $queryParams['OrderID'] = ObjectSerializer::toQueryValue($order_id);
        }
        // query params
        if ($order_no !== null) {
            $queryParams['OrderNo'] = ObjectSerializer::toQueryValue($order_no);
        }
        // query params
        if ($order_line_id !== null) {
            $queryParams['OrderLineID'] = ObjectSerializer::toQueryValue($order_line_id);
        }
        // query params
        if ($quantity !== null) {
            $queryParams['Quantity'] = ObjectSerializer::toQueryValue($quantity);
        }
        // query params
        if ($inventory_id !== null) {
            $queryParams['InventoryID'] = ObjectSerializer::toQueryValue($inventory_id);
        }
        // query params
        if ($part_no !== null) {
            $queryParams['PartNo'] = ObjectSerializer::toQueryValue($part_no);
        }
        // query params
        if ($aux2 !== null) {
            $queryParams['Aux2'] = ObjectSerializer::toQueryValue($aux2);
        }
        // query params
        if ($description !== null) {
            $queryParams['Description'] = ObjectSerializer::toQueryValue($description);
        }
        // query params
        if ($supplier_part_no !== null) {
            $queryParams['SupplierPartNo'] = ObjectSerializer::toQueryValue($supplier_part_no);
        }
        // query params
        if ($grn_line_type !== null) {
            $queryParams['GRNLineType'] = ObjectSerializer::toQueryValue($grn_line_type);
        }
        // query params
        if ($quantity_decimal_places !== null) {
            $queryParams['QuantityDecimalPlaces'] = ObjectSerializer::toQueryValue($quantity_decimal_places);
        }
        // query params
        if ($last_saved_date_time !== null) {
            $queryParams['LastSavedDateTime'] = ObjectSerializer::toQueryValue($last_saved_date_time);
        }
        // query params
        if ($classification_id !== null) {
            $queryParams['ClassificationID'] = ObjectSerializer::toQueryValue($classification_id);
        }
        // query params
        if ($classification_description !== null) {
            $queryParams['ClassificationDescription'] = ObjectSerializer::toQueryValue($classification_description);
        }
        // query params
        if ($tax_amount !== null) {
            $queryParams['TaxAmount'] = ObjectSerializer::toQueryValue($tax_amount);
        }
        // query params
        if ($tax_id !== null) {
            $queryParams['TaxID'] = ObjectSerializer::toQueryValue($tax_id);
        }
        // query params
        if ($tax_rate !== null) {
            $queryParams['TaxRate'] = ObjectSerializer::toQueryValue($tax_rate);
        }
        // query params
        if ($cost !== null) {
            $queryParams['Cost'] = ObjectSerializer::toQueryValue($cost);
        }
        // query params
        if ($currency_rate_used !== null) {
            $queryParams['CurrencyRateUsed'] = ObjectSerializer::toQueryValue($currency_rate_used);
        }
        // query params
        if ($purchasing_classification_id !== null) {
            $queryParams['PurchasingClassificationID'] = ObjectSerializer::toQueryValue($purchasing_classification_id);
        }
        // query params
        if ($purchasing_classification_description !== null) {
            $queryParams['PurchasingClassificationDescription'] = ObjectSerializer::toQueryValue($purchasing_classification_description);
        }
        // query params
        if ($posted_to_wip !== null) {
            $queryParams['PostedToWIP'] = ObjectSerializer::toQueryValue($posted_to_wip);
        }
        // query params
        if ($job_charge !== null) {
            $queryParams['JobCharge'] = ObjectSerializer::toQueryValue($job_charge);
        }
        // query params
        if ($use_serial_no !== null) {
            $queryParams['UseSerialNo'] = ObjectSerializer::toQueryValue($use_serial_no);
        }
        // query params
        if ($fx_cost !== null) {
            $queryParams['FXCost'] = ObjectSerializer::toQueryValue($fx_cost);
        }
        // query params
        if ($physical_item !== null) {
            $queryParams['PhysicalItem'] = ObjectSerializer::toQueryValue($physical_item);
        }
        // query params
        if ($inventory_expected_liability_ledger_account_id !== null) {
            $queryParams['InventoryExpectedLiability_LedgerAccountID'] = ObjectSerializer::toQueryValue($inventory_expected_liability_ledger_account_id);
        }
        // query params
        if ($inventory_expected_liability_ledger_account_no !== null) {
            $queryParams['InventoryExpectedLiability_LedgerAccountNo'] = ObjectSerializer::toQueryValue($inventory_expected_liability_ledger_account_no);
        }
        // query params
        if ($inventory_expected_liability_ledger_account_description !== null) {
            $queryParams['InventoryExpectedLiability_LedgerAccountDescription'] = ObjectSerializer::toQueryValue($inventory_expected_liability_ledger_account_description);
        }
        // query params
        if ($inventory_expected_asset_ledger_account_id !== null) {
            $queryParams['InventoryExpectedAsset_LedgerAccountID'] = ObjectSerializer::toQueryValue($inventory_expected_asset_ledger_account_id);
        }
        // query params
        if ($inventory_expected_asset_ledger_account_no !== null) {
            $queryParams['InventoryExpectedAsset_LedgerAccountNo'] = ObjectSerializer::toQueryValue($inventory_expected_asset_ledger_account_no);
        }
        // query params
        if ($inventory_expected_asset_ledger_account_description !== null) {
            $queryParams['InventoryExpectedAsset_LedgerAccountDescription'] = ObjectSerializer::toQueryValue($inventory_expected_asset_ledger_account_description);
        }
        // query params
        if ($inventory_delivered_asset_ledger_account_id !== null) {
            $queryParams['InventoryDeliveredAsset_LedgerAccountID'] = ObjectSerializer::toQueryValue($inventory_delivered_asset_ledger_account_id);
        }
        // query params
        if ($inventory_delivered_asset_ledger_account_no !== null) {
            $queryParams['InventoryDeliveredAsset_LedgerAccountNo'] = ObjectSerializer::toQueryValue($inventory_delivered_asset_ledger_account_no);
        }
        // query params
        if ($inventory_delivered_asset_ledger_account_description !== null) {
            $queryParams['InventoryDeliveredAsset_LedgerAccountDescription'] = ObjectSerializer::toQueryValue($inventory_delivered_asset_ledger_account_description);
        }
        // query params
        if ($inventory_value_ledger_account_id !== null) {
            $queryParams['InventoryValue_LedgerAccountID'] = ObjectSerializer::toQueryValue($inventory_value_ledger_account_id);
        }
        // query params
        if ($inventory_value_ledger_account_no !== null) {
            $queryParams['InventoryValue_LedgerAccountNo'] = ObjectSerializer::toQueryValue($inventory_value_ledger_account_no);
        }
        // query params
        if ($inventory_value_ledger_account_description !== null) {
            $queryParams['InventoryValue_LedgerAccountDescription'] = ObjectSerializer::toQueryValue($inventory_value_ledger_account_description);
        }
        // query params
        if ($inventory_delivered_liability_ledger_account_id !== null) {
            $queryParams['InventoryDeliveredLiability_LedgerAccountID'] = ObjectSerializer::toQueryValue($inventory_delivered_liability_ledger_account_id);
        }
        // query params
        if ($inventory_delivered_liability_ledger_account_no !== null) {
            $queryParams['InventoryDeliveredLiability_LedgerAccountNo'] = ObjectSerializer::toQueryValue($inventory_delivered_liability_ledger_account_no);
        }
        // query params
        if ($inventory_delivered_liability_ledger_account_description !== null) {
            $queryParams['InventoryDeliveredLiability_LedgerAccountDescription'] = ObjectSerializer::toQueryValue($inventory_delivered_liability_ledger_account_description);
        }
        // query params
        if ($inventory_wip_ledger_account_id !== null) {
            $queryParams['InventoryWIP_LedgerAccountID'] = ObjectSerializer::toQueryValue($inventory_wip_ledger_account_id);
        }
        // query params
        if ($inventory_wip_ledger_account_no !== null) {
            $queryParams['InventoryWIP_LedgerAccountNo'] = ObjectSerializer::toQueryValue($inventory_wip_ledger_account_no);
        }
        // query params
        if ($inventory_wip_ledger_account_description !== null) {
            $queryParams['InventoryWIP_LedgerAccountDescription'] = ObjectSerializer::toQueryValue($inventory_wip_ledger_account_description);
        }
        // query params
        if ($po_line_last_saved_date_time !== null) {
            $queryParams['POLineLastSavedDateTime'] = ObjectSerializer::toQueryValue($po_line_last_saved_date_time);
        }
        // query params
        if ($order_units !== null) {
            $queryParams['OrderUnits'] = ObjectSerializer::toQueryValue($order_units);
        }
        // query params
        if ($item_no !== null) {
            $queryParams['ItemNo'] = ObjectSerializer::toQueryValue($item_no);
        }
        // query params
        if ($in_creditor_rec_id !== null) {
            $queryParams['IN_Creditor_RecID'] = ObjectSerializer::toQueryValue($in_creditor_rec_id);
        }
        // query params
        if ($in_supplier_warehouse_rec_id !== null) {
            $queryParams['IN_SupplierWarehouse_RecID'] = ObjectSerializer::toQueryValue($in_supplier_warehouse_rec_id);
        }
        // query params
        if ($job_costing_stage_id !== null) {
            $queryParams['JobCostingStageID'] = ObjectSerializer::toQueryValue($job_costing_stage_id);
        }
        // query params
        if ($job_costing_stage_no !== null) {
            $queryParams['JobCostingStageNo'] = ObjectSerializer::toQueryValue($job_costing_stage_no);
        }
        // query params
        if ($job_costing_stage_name !== null) {
            $queryParams['JobCostingStageName'] = ObjectSerializer::toQueryValue($job_costing_stage_name);
        }
        // query params
        if ($job_costing_cost_centre_id !== null) {
            $queryParams['JobCostingCostCentreID'] = ObjectSerializer::toQueryValue($job_costing_cost_centre_id);
        }
        // query params
        if ($job_costing_cost_centre_no !== null) {
            $queryParams['JobCostingCostCentreNo'] = ObjectSerializer::toQueryValue($job_costing_cost_centre_no);
        }
        // query params
        if ($job_costing_cost_centre_name !== null) {
            $queryParams['JobCostingCostCentreName'] = ObjectSerializer::toQueryValue($job_costing_cost_centre_name);
        }
        // query params
        if ($job_costing_job_id !== null) {
            $queryParams['JobCostingJobID'] = ObjectSerializer::toQueryValue($job_costing_job_id);
        }
        // query params
        if ($job_costing_job_no !== null) {
            $queryParams['JobCostingJobNo'] = ObjectSerializer::toQueryValue($job_costing_job_no);
        }
        // query params
        if ($unit_inc_tax !== null) {
            $queryParams['UnitIncTax'] = ObjectSerializer::toQueryValue($unit_inc_tax);
        }
        // query params
        if ($line_total_inc_tax !== null) {
            $queryParams['LineTotalIncTax'] = ObjectSerializer::toQueryValue($line_total_inc_tax);
        }
        // query params
        if ($fx_line_total_ex_tax !== null) {
            $queryParams['FXLineTotalExTax'] = ObjectSerializer::toQueryValue($fx_line_total_ex_tax);
        }
        // query params
        if ($fx_decimal_places !== null) {
            $queryParams['FXDecimalPlaces'] = ObjectSerializer::toQueryValue($fx_decimal_places);
        }
        // query params
        if ($home_decimal_places !== null) {
            $queryParams['HomeDecimalPlaces'] = ObjectSerializer::toQueryValue($home_decimal_places);
        }
        // query params
        if ($use_expiry_date !== null) {
            $queryParams['UseExpiryDate'] = ObjectSerializer::toQueryValue($use_expiry_date);
        }
        // query params
        if ($line_details !== null) {
            $queryParams['LineDetails'] = ObjectSerializer::toQueryValue($line_details);
        }
        // query params
        if ($custom_field_values !== null) {
            $queryParams['CustomFieldValues'] = ObjectSerializer::toQueryValue($custom_field_values);
        }
        // header params
        if ($accept !== null) {
            $headerParams['Accept'] = ObjectSerializer::toHeaderValue($accept);
        }
        // header params
        if ($jiwa_stateful !== null) {
            $headerParams['jiwa-stateful'] = ObjectSerializer::toHeaderValue($jiwa_stateful);
        }

        // path params
        if ($grnid !== null) {
            $resourcePath = str_replace(
                '{' . 'GRNID' . '}',
                ObjectSerializer::toPathValue($grnid),
                $resourcePath
            );
        }
        // path params
        if ($line_id !== null) {
            $resourcePath = str_replace(
                '{' . 'LineID' . '}',
                ObjectSerializer::toPathValue($line_id),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;
        if (isset($body)) {
            $_tempBody = $body;
        }

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json', 'application/xml']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json', 'application/xml'],
                ['application/x-www-form-urlencoded', 'application/json', 'application/xml']
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            
            if($headers['Content-Type'] === 'application/json') {
                // \stdClass has no __toString(), so we should encode it manually
                if ($httpBody instanceof \stdClass) {
                    $httpBody = \GuzzleHttp\json_encode($httpBody);
                }
                // array has no __toString(), so we should encode it manually
                if(is_array($httpBody)) {
                    $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($httpBody));
                }
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\Query::build($formParams);
            }
        }

        // this endpoint requires HTTP basic authentication
        if ($this->config->getUsername() !== null || $this->config->getPassword() !== null) {
            $headers['Authorization'] = 'Basic ' . base64_encode($this->config->getUsername() . ":" . $this->config->getPassword());
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\Query::build($queryParams);
        return new Request(
            'PATCH',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation goodsReceivedNoteLinePOSTRequestGRNIDLinesPost
     *
     * Appends a line to a goods received note.
     *
     * @param  string $accept Accept Header (required)
     * @param  string $grnid grnid (required)
     * @param  bool $jiwa_stateful Stateful indicator (optional)
     * @param  double $quantity_ordered quantity_ordered (optional)
     * @param  double $quantity_delivered quantity_delivered (optional)
     * @param  string $order_id order_id (optional)
     * @param  string $order_no order_no (optional)
     * @param  string $order_line_id order_line_id (optional)
     * @param  double $quantity quantity (optional)
     * @param  string $inventory_id inventory_id (optional)
     * @param  string $part_no part_no (optional)
     * @param  string $aux2 aux2 (optional)
     * @param  string $description description (optional)
     * @param  string $supplier_part_no supplier_part_no (optional)
     * @param  string $grn_line_type grn_line_type (optional)
     * @param  int $quantity_decimal_places quantity_decimal_places (optional)
     * @param  \DateTime $last_saved_date_time last_saved_date_time (optional)
     * @param  string $classification_id classification_id (optional)
     * @param  string $classification_description classification_description (optional)
     * @param  double $tax_amount tax_amount (optional)
     * @param  string $tax_id tax_id (optional)
     * @param  double $tax_rate tax_rate (optional)
     * @param  double $cost cost (optional)
     * @param  double $currency_rate_used currency_rate_used (optional)
     * @param  string $purchasing_classification_id purchasing_classification_id (optional)
     * @param  string $purchasing_classification_description purchasing_classification_description (optional)
     * @param  bool $posted_to_wip posted_to_wip (optional)
     * @param  double $job_charge job_charge (optional)
     * @param  bool $use_serial_no use_serial_no (optional)
     * @param  double $fx_cost fx_cost (optional)
     * @param  bool $physical_item physical_item (optional)
     * @param  string $inventory_expected_liability_ledger_account_id inventory_expected_liability_ledger_account_id (optional)
     * @param  string $inventory_expected_liability_ledger_account_no inventory_expected_liability_ledger_account_no (optional)
     * @param  string $inventory_expected_liability_ledger_account_description inventory_expected_liability_ledger_account_description (optional)
     * @param  string $inventory_expected_asset_ledger_account_id inventory_expected_asset_ledger_account_id (optional)
     * @param  string $inventory_expected_asset_ledger_account_no inventory_expected_asset_ledger_account_no (optional)
     * @param  string $inventory_expected_asset_ledger_account_description inventory_expected_asset_ledger_account_description (optional)
     * @param  string $inventory_delivered_asset_ledger_account_id inventory_delivered_asset_ledger_account_id (optional)
     * @param  string $inventory_delivered_asset_ledger_account_no inventory_delivered_asset_ledger_account_no (optional)
     * @param  string $inventory_delivered_asset_ledger_account_description inventory_delivered_asset_ledger_account_description (optional)
     * @param  string $inventory_value_ledger_account_id inventory_value_ledger_account_id (optional)
     * @param  string $inventory_value_ledger_account_no inventory_value_ledger_account_no (optional)
     * @param  string $inventory_value_ledger_account_description inventory_value_ledger_account_description (optional)
     * @param  string $inventory_delivered_liability_ledger_account_id inventory_delivered_liability_ledger_account_id (optional)
     * @param  string $inventory_delivered_liability_ledger_account_no inventory_delivered_liability_ledger_account_no (optional)
     * @param  string $inventory_delivered_liability_ledger_account_description inventory_delivered_liability_ledger_account_description (optional)
     * @param  string $inventory_wip_ledger_account_id inventory_wip_ledger_account_id (optional)
     * @param  string $inventory_wip_ledger_account_no inventory_wip_ledger_account_no (optional)
     * @param  string $inventory_wip_ledger_account_description inventory_wip_ledger_account_description (optional)
     * @param  \DateTime $po_line_last_saved_date_time po_line_last_saved_date_time (optional)
     * @param  double $order_units order_units (optional)
     * @param  int $item_no item_no (optional)
     * @param  string $in_creditor_rec_id in_creditor_rec_id (optional)
     * @param  string $in_supplier_warehouse_rec_id in_supplier_warehouse_rec_id (optional)
     * @param  string $job_costing_stage_id job_costing_stage_id (optional)
     * @param  string $job_costing_stage_no job_costing_stage_no (optional)
     * @param  string $job_costing_stage_name job_costing_stage_name (optional)
     * @param  string $job_costing_cost_centre_id job_costing_cost_centre_id (optional)
     * @param  string $job_costing_cost_centre_no job_costing_cost_centre_no (optional)
     * @param  string $job_costing_cost_centre_name job_costing_cost_centre_name (optional)
     * @param  string $job_costing_job_id job_costing_job_id (optional)
     * @param  string $job_costing_job_no job_costing_job_no (optional)
     * @param  double $unit_inc_tax unit_inc_tax (optional)
     * @param  double $line_total_inc_tax line_total_inc_tax (optional)
     * @param  double $fx_line_total_ex_tax fx_line_total_ex_tax (optional)
     * @param  int $fx_decimal_places fx_decimal_places (optional)
     * @param  int $home_decimal_places home_decimal_places (optional)
     * @param  bool $use_expiry_date use_expiry_date (optional)
     * @param  string $line_details line_details (optional)
     * @param  string $custom_field_values custom_field_values (optional)
     * @param  \Jiwa\Model\GoodsReceivedNoteLinePOSTRequest $body body (optional)
     *
     * @throws \Jiwa\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Jiwa\Model\GoodsReceivedNoteLine
     */
    public function goodsReceivedNoteLinePOSTRequestGRNIDLinesPost($accept, $grnid, $jiwa_stateful = null, $quantity_ordered = null, $quantity_delivered = null, $order_id = null, $order_no = null, $order_line_id = null, $quantity = null, $inventory_id = null, $part_no = null, $aux2 = null, $description = null, $supplier_part_no = null, $grn_line_type = null, $quantity_decimal_places = null, $last_saved_date_time = null, $classification_id = null, $classification_description = null, $tax_amount = null, $tax_id = null, $tax_rate = null, $cost = null, $currency_rate_used = null, $purchasing_classification_id = null, $purchasing_classification_description = null, $posted_to_wip = null, $job_charge = null, $use_serial_no = null, $fx_cost = null, $physical_item = null, $inventory_expected_liability_ledger_account_id = null, $inventory_expected_liability_ledger_account_no = null, $inventory_expected_liability_ledger_account_description = null, $inventory_expected_asset_ledger_account_id = null, $inventory_expected_asset_ledger_account_no = null, $inventory_expected_asset_ledger_account_description = null, $inventory_delivered_asset_ledger_account_id = null, $inventory_delivered_asset_ledger_account_no = null, $inventory_delivered_asset_ledger_account_description = null, $inventory_value_ledger_account_id = null, $inventory_value_ledger_account_no = null, $inventory_value_ledger_account_description = null, $inventory_delivered_liability_ledger_account_id = null, $inventory_delivered_liability_ledger_account_no = null, $inventory_delivered_liability_ledger_account_description = null, $inventory_wip_ledger_account_id = null, $inventory_wip_ledger_account_no = null, $inventory_wip_ledger_account_description = null, $po_line_last_saved_date_time = null, $order_units = null, $item_no = null, $in_creditor_rec_id = null, $in_supplier_warehouse_rec_id = null, $job_costing_stage_id = null, $job_costing_stage_no = null, $job_costing_stage_name = null, $job_costing_cost_centre_id = null, $job_costing_cost_centre_no = null, $job_costing_cost_centre_name = null, $job_costing_job_id = null, $job_costing_job_no = null, $unit_inc_tax = null, $line_total_inc_tax = null, $fx_line_total_ex_tax = null, $fx_decimal_places = null, $home_decimal_places = null, $use_expiry_date = null, $line_details = null, $custom_field_values = null, $body = null)
    {
        list($response) = $this->goodsReceivedNoteLinePOSTRequestGRNIDLinesPostWithHttpInfo($accept, $grnid, $jiwa_stateful, $quantity_ordered, $quantity_delivered, $order_id, $order_no, $order_line_id, $quantity, $inventory_id, $part_no, $aux2, $description, $supplier_part_no, $grn_line_type, $quantity_decimal_places, $last_saved_date_time, $classification_id, $classification_description, $tax_amount, $tax_id, $tax_rate, $cost, $currency_rate_used, $purchasing_classification_id, $purchasing_classification_description, $posted_to_wip, $job_charge, $use_serial_no, $fx_cost, $physical_item, $inventory_expected_liability_ledger_account_id, $inventory_expected_liability_ledger_account_no, $inventory_expected_liability_ledger_account_description, $inventory_expected_asset_ledger_account_id, $inventory_expected_asset_ledger_account_no, $inventory_expected_asset_ledger_account_description, $inventory_delivered_asset_ledger_account_id, $inventory_delivered_asset_ledger_account_no, $inventory_delivered_asset_ledger_account_description, $inventory_value_ledger_account_id, $inventory_value_ledger_account_no, $inventory_value_ledger_account_description, $inventory_delivered_liability_ledger_account_id, $inventory_delivered_liability_ledger_account_no, $inventory_delivered_liability_ledger_account_description, $inventory_wip_ledger_account_id, $inventory_wip_ledger_account_no, $inventory_wip_ledger_account_description, $po_line_last_saved_date_time, $order_units, $item_no, $in_creditor_rec_id, $in_supplier_warehouse_rec_id, $job_costing_stage_id, $job_costing_stage_no, $job_costing_stage_name, $job_costing_cost_centre_id, $job_costing_cost_centre_no, $job_costing_cost_centre_name, $job_costing_job_id, $job_costing_job_no, $unit_inc_tax, $line_total_inc_tax, $fx_line_total_ex_tax, $fx_decimal_places, $home_decimal_places, $use_expiry_date, $line_details, $custom_field_values, $body);
        return $response;
    }

    /**
     * Operation goodsReceivedNoteLinePOSTRequestGRNIDLinesPostWithHttpInfo
     *
     * Appends a line to a goods received note.
     *
     * @param  string $accept Accept Header (required)
     * @param  string $grnid (required)
     * @param  bool $jiwa_stateful Stateful indicator (optional)
     * @param  double $quantity_ordered (optional)
     * @param  double $quantity_delivered (optional)
     * @param  string $order_id (optional)
     * @param  string $order_no (optional)
     * @param  string $order_line_id (optional)
     * @param  double $quantity (optional)
     * @param  string $inventory_id (optional)
     * @param  string $part_no (optional)
     * @param  string $aux2 (optional)
     * @param  string $description (optional)
     * @param  string $supplier_part_no (optional)
     * @param  string $grn_line_type (optional)
     * @param  int $quantity_decimal_places (optional)
     * @param  \DateTime $last_saved_date_time (optional)
     * @param  string $classification_id (optional)
     * @param  string $classification_description (optional)
     * @param  double $tax_amount (optional)
     * @param  string $tax_id (optional)
     * @param  double $tax_rate (optional)
     * @param  double $cost (optional)
     * @param  double $currency_rate_used (optional)
     * @param  string $purchasing_classification_id (optional)
     * @param  string $purchasing_classification_description (optional)
     * @param  bool $posted_to_wip (optional)
     * @param  double $job_charge (optional)
     * @param  bool $use_serial_no (optional)
     * @param  double $fx_cost (optional)
     * @param  bool $physical_item (optional)
     * @param  string $inventory_expected_liability_ledger_account_id (optional)
     * @param  string $inventory_expected_liability_ledger_account_no (optional)
     * @param  string $inventory_expected_liability_ledger_account_description (optional)
     * @param  string $inventory_expected_asset_ledger_account_id (optional)
     * @param  string $inventory_expected_asset_ledger_account_no (optional)
     * @param  string $inventory_expected_asset_ledger_account_description (optional)
     * @param  string $inventory_delivered_asset_ledger_account_id (optional)
     * @param  string $inventory_delivered_asset_ledger_account_no (optional)
     * @param  string $inventory_delivered_asset_ledger_account_description (optional)
     * @param  string $inventory_value_ledger_account_id (optional)
     * @param  string $inventory_value_ledger_account_no (optional)
     * @param  string $inventory_value_ledger_account_description (optional)
     * @param  string $inventory_delivered_liability_ledger_account_id (optional)
     * @param  string $inventory_delivered_liability_ledger_account_no (optional)
     * @param  string $inventory_delivered_liability_ledger_account_description (optional)
     * @param  string $inventory_wip_ledger_account_id (optional)
     * @param  string $inventory_wip_ledger_account_no (optional)
     * @param  string $inventory_wip_ledger_account_description (optional)
     * @param  \DateTime $po_line_last_saved_date_time (optional)
     * @param  double $order_units (optional)
     * @param  int $item_no (optional)
     * @param  string $in_creditor_rec_id (optional)
     * @param  string $in_supplier_warehouse_rec_id (optional)
     * @param  string $job_costing_stage_id (optional)
     * @param  string $job_costing_stage_no (optional)
     * @param  string $job_costing_stage_name (optional)
     * @param  string $job_costing_cost_centre_id (optional)
     * @param  string $job_costing_cost_centre_no (optional)
     * @param  string $job_costing_cost_centre_name (optional)
     * @param  string $job_costing_job_id (optional)
     * @param  string $job_costing_job_no (optional)
     * @param  double $unit_inc_tax (optional)
     * @param  double $line_total_inc_tax (optional)
     * @param  double $fx_line_total_ex_tax (optional)
     * @param  int $fx_decimal_places (optional)
     * @param  int $home_decimal_places (optional)
     * @param  bool $use_expiry_date (optional)
     * @param  string $line_details (optional)
     * @param  string $custom_field_values (optional)
     * @param  \Jiwa\Model\GoodsReceivedNoteLinePOSTRequest $body (optional)
     *
     * @throws \Jiwa\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Jiwa\Model\GoodsReceivedNoteLine, HTTP status code, HTTP response headers (array of strings)
     */
    public function goodsReceivedNoteLinePOSTRequestGRNIDLinesPostWithHttpInfo($accept, $grnid, $jiwa_stateful = null, $quantity_ordered = null, $quantity_delivered = null, $order_id = null, $order_no = null, $order_line_id = null, $quantity = null, $inventory_id = null, $part_no = null, $aux2 = null, $description = null, $supplier_part_no = null, $grn_line_type = null, $quantity_decimal_places = null, $last_saved_date_time = null, $classification_id = null, $classification_description = null, $tax_amount = null, $tax_id = null, $tax_rate = null, $cost = null, $currency_rate_used = null, $purchasing_classification_id = null, $purchasing_classification_description = null, $posted_to_wip = null, $job_charge = null, $use_serial_no = null, $fx_cost = null, $physical_item = null, $inventory_expected_liability_ledger_account_id = null, $inventory_expected_liability_ledger_account_no = null, $inventory_expected_liability_ledger_account_description = null, $inventory_expected_asset_ledger_account_id = null, $inventory_expected_asset_ledger_account_no = null, $inventory_expected_asset_ledger_account_description = null, $inventory_delivered_asset_ledger_account_id = null, $inventory_delivered_asset_ledger_account_no = null, $inventory_delivered_asset_ledger_account_description = null, $inventory_value_ledger_account_id = null, $inventory_value_ledger_account_no = null, $inventory_value_ledger_account_description = null, $inventory_delivered_liability_ledger_account_id = null, $inventory_delivered_liability_ledger_account_no = null, $inventory_delivered_liability_ledger_account_description = null, $inventory_wip_ledger_account_id = null, $inventory_wip_ledger_account_no = null, $inventory_wip_ledger_account_description = null, $po_line_last_saved_date_time = null, $order_units = null, $item_no = null, $in_creditor_rec_id = null, $in_supplier_warehouse_rec_id = null, $job_costing_stage_id = null, $job_costing_stage_no = null, $job_costing_stage_name = null, $job_costing_cost_centre_id = null, $job_costing_cost_centre_no = null, $job_costing_cost_centre_name = null, $job_costing_job_id = null, $job_costing_job_no = null, $unit_inc_tax = null, $line_total_inc_tax = null, $fx_line_total_ex_tax = null, $fx_decimal_places = null, $home_decimal_places = null, $use_expiry_date = null, $line_details = null, $custom_field_values = null, $body = null)
    {
        $returnType = '\Jiwa\Model\GoodsReceivedNoteLine';
        $request = $this->goodsReceivedNoteLinePOSTRequestGRNIDLinesPostRequest($accept, $grnid, $jiwa_stateful, $quantity_ordered, $quantity_delivered, $order_id, $order_no, $order_line_id, $quantity, $inventory_id, $part_no, $aux2, $description, $supplier_part_no, $grn_line_type, $quantity_decimal_places, $last_saved_date_time, $classification_id, $classification_description, $tax_amount, $tax_id, $tax_rate, $cost, $currency_rate_used, $purchasing_classification_id, $purchasing_classification_description, $posted_to_wip, $job_charge, $use_serial_no, $fx_cost, $physical_item, $inventory_expected_liability_ledger_account_id, $inventory_expected_liability_ledger_account_no, $inventory_expected_liability_ledger_account_description, $inventory_expected_asset_ledger_account_id, $inventory_expected_asset_ledger_account_no, $inventory_expected_asset_ledger_account_description, $inventory_delivered_asset_ledger_account_id, $inventory_delivered_asset_ledger_account_no, $inventory_delivered_asset_ledger_account_description, $inventory_value_ledger_account_id, $inventory_value_ledger_account_no, $inventory_value_ledger_account_description, $inventory_delivered_liability_ledger_account_id, $inventory_delivered_liability_ledger_account_no, $inventory_delivered_liability_ledger_account_description, $inventory_wip_ledger_account_id, $inventory_wip_ledger_account_no, $inventory_wip_ledger_account_description, $po_line_last_saved_date_time, $order_units, $item_no, $in_creditor_rec_id, $in_supplier_warehouse_rec_id, $job_costing_stage_id, $job_costing_stage_no, $job_costing_stage_name, $job_costing_cost_centre_id, $job_costing_cost_centre_no, $job_costing_cost_centre_name, $job_costing_job_id, $job_costing_job_no, $unit_inc_tax, $line_total_inc_tax, $fx_line_total_ex_tax, $fx_decimal_places, $home_decimal_places, $use_expiry_date, $line_details, $custom_field_values, $body);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Jiwa\Model\GoodsReceivedNoteLine',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 201:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Jiwa\Model\GoodsReceivedNoteLine',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 404:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Jiwa\Model\GoodsReceivedNoteLine',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 401:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Jiwa\Model\GoodsReceivedNoteLine',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 403:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Jiwa\Model\GoodsReceivedNoteLine',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation goodsReceivedNoteLinePOSTRequestGRNIDLinesPostAsync
     *
     * Appends a line to a goods received note.
     *
     * @param  string $accept Accept Header (required)
     * @param  string $grnid (required)
     * @param  bool $jiwa_stateful Stateful indicator (optional)
     * @param  double $quantity_ordered (optional)
     * @param  double $quantity_delivered (optional)
     * @param  string $order_id (optional)
     * @param  string $order_no (optional)
     * @param  string $order_line_id (optional)
     * @param  double $quantity (optional)
     * @param  string $inventory_id (optional)
     * @param  string $part_no (optional)
     * @param  string $aux2 (optional)
     * @param  string $description (optional)
     * @param  string $supplier_part_no (optional)
     * @param  string $grn_line_type (optional)
     * @param  int $quantity_decimal_places (optional)
     * @param  \DateTime $last_saved_date_time (optional)
     * @param  string $classification_id (optional)
     * @param  string $classification_description (optional)
     * @param  double $tax_amount (optional)
     * @param  string $tax_id (optional)
     * @param  double $tax_rate (optional)
     * @param  double $cost (optional)
     * @param  double $currency_rate_used (optional)
     * @param  string $purchasing_classification_id (optional)
     * @param  string $purchasing_classification_description (optional)
     * @param  bool $posted_to_wip (optional)
     * @param  double $job_charge (optional)
     * @param  bool $use_serial_no (optional)
     * @param  double $fx_cost (optional)
     * @param  bool $physical_item (optional)
     * @param  string $inventory_expected_liability_ledger_account_id (optional)
     * @param  string $inventory_expected_liability_ledger_account_no (optional)
     * @param  string $inventory_expected_liability_ledger_account_description (optional)
     * @param  string $inventory_expected_asset_ledger_account_id (optional)
     * @param  string $inventory_expected_asset_ledger_account_no (optional)
     * @param  string $inventory_expected_asset_ledger_account_description (optional)
     * @param  string $inventory_delivered_asset_ledger_account_id (optional)
     * @param  string $inventory_delivered_asset_ledger_account_no (optional)
     * @param  string $inventory_delivered_asset_ledger_account_description (optional)
     * @param  string $inventory_value_ledger_account_id (optional)
     * @param  string $inventory_value_ledger_account_no (optional)
     * @param  string $inventory_value_ledger_account_description (optional)
     * @param  string $inventory_delivered_liability_ledger_account_id (optional)
     * @param  string $inventory_delivered_liability_ledger_account_no (optional)
     * @param  string $inventory_delivered_liability_ledger_account_description (optional)
     * @param  string $inventory_wip_ledger_account_id (optional)
     * @param  string $inventory_wip_ledger_account_no (optional)
     * @param  string $inventory_wip_ledger_account_description (optional)
     * @param  \DateTime $po_line_last_saved_date_time (optional)
     * @param  double $order_units (optional)
     * @param  int $item_no (optional)
     * @param  string $in_creditor_rec_id (optional)
     * @param  string $in_supplier_warehouse_rec_id (optional)
     * @param  string $job_costing_stage_id (optional)
     * @param  string $job_costing_stage_no (optional)
     * @param  string $job_costing_stage_name (optional)
     * @param  string $job_costing_cost_centre_id (optional)
     * @param  string $job_costing_cost_centre_no (optional)
     * @param  string $job_costing_cost_centre_name (optional)
     * @param  string $job_costing_job_id (optional)
     * @param  string $job_costing_job_no (optional)
     * @param  double $unit_inc_tax (optional)
     * @param  double $line_total_inc_tax (optional)
     * @param  double $fx_line_total_ex_tax (optional)
     * @param  int $fx_decimal_places (optional)
     * @param  int $home_decimal_places (optional)
     * @param  bool $use_expiry_date (optional)
     * @param  string $line_details (optional)
     * @param  string $custom_field_values (optional)
     * @param  \Jiwa\Model\GoodsReceivedNoteLinePOSTRequest $body (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function goodsReceivedNoteLinePOSTRequestGRNIDLinesPostAsync($accept, $grnid, $jiwa_stateful = null, $quantity_ordered = null, $quantity_delivered = null, $order_id = null, $order_no = null, $order_line_id = null, $quantity = null, $inventory_id = null, $part_no = null, $aux2 = null, $description = null, $supplier_part_no = null, $grn_line_type = null, $quantity_decimal_places = null, $last_saved_date_time = null, $classification_id = null, $classification_description = null, $tax_amount = null, $tax_id = null, $tax_rate = null, $cost = null, $currency_rate_used = null, $purchasing_classification_id = null, $purchasing_classification_description = null, $posted_to_wip = null, $job_charge = null, $use_serial_no = null, $fx_cost = null, $physical_item = null, $inventory_expected_liability_ledger_account_id = null, $inventory_expected_liability_ledger_account_no = null, $inventory_expected_liability_ledger_account_description = null, $inventory_expected_asset_ledger_account_id = null, $inventory_expected_asset_ledger_account_no = null, $inventory_expected_asset_ledger_account_description = null, $inventory_delivered_asset_ledger_account_id = null, $inventory_delivered_asset_ledger_account_no = null, $inventory_delivered_asset_ledger_account_description = null, $inventory_value_ledger_account_id = null, $inventory_value_ledger_account_no = null, $inventory_value_ledger_account_description = null, $inventory_delivered_liability_ledger_account_id = null, $inventory_delivered_liability_ledger_account_no = null, $inventory_delivered_liability_ledger_account_description = null, $inventory_wip_ledger_account_id = null, $inventory_wip_ledger_account_no = null, $inventory_wip_ledger_account_description = null, $po_line_last_saved_date_time = null, $order_units = null, $item_no = null, $in_creditor_rec_id = null, $in_supplier_warehouse_rec_id = null, $job_costing_stage_id = null, $job_costing_stage_no = null, $job_costing_stage_name = null, $job_costing_cost_centre_id = null, $job_costing_cost_centre_no = null, $job_costing_cost_centre_name = null, $job_costing_job_id = null, $job_costing_job_no = null, $unit_inc_tax = null, $line_total_inc_tax = null, $fx_line_total_ex_tax = null, $fx_decimal_places = null, $home_decimal_places = null, $use_expiry_date = null, $line_details = null, $custom_field_values = null, $body = null)
    {
        return $this->goodsReceivedNoteLinePOSTRequestGRNIDLinesPostAsyncWithHttpInfo($accept, $grnid, $jiwa_stateful, $quantity_ordered, $quantity_delivered, $order_id, $order_no, $order_line_id, $quantity, $inventory_id, $part_no, $aux2, $description, $supplier_part_no, $grn_line_type, $quantity_decimal_places, $last_saved_date_time, $classification_id, $classification_description, $tax_amount, $tax_id, $tax_rate, $cost, $currency_rate_used, $purchasing_classification_id, $purchasing_classification_description, $posted_to_wip, $job_charge, $use_serial_no, $fx_cost, $physical_item, $inventory_expected_liability_ledger_account_id, $inventory_expected_liability_ledger_account_no, $inventory_expected_liability_ledger_account_description, $inventory_expected_asset_ledger_account_id, $inventory_expected_asset_ledger_account_no, $inventory_expected_asset_ledger_account_description, $inventory_delivered_asset_ledger_account_id, $inventory_delivered_asset_ledger_account_no, $inventory_delivered_asset_ledger_account_description, $inventory_value_ledger_account_id, $inventory_value_ledger_account_no, $inventory_value_ledger_account_description, $inventory_delivered_liability_ledger_account_id, $inventory_delivered_liability_ledger_account_no, $inventory_delivered_liability_ledger_account_description, $inventory_wip_ledger_account_id, $inventory_wip_ledger_account_no, $inventory_wip_ledger_account_description, $po_line_last_saved_date_time, $order_units, $item_no, $in_creditor_rec_id, $in_supplier_warehouse_rec_id, $job_costing_stage_id, $job_costing_stage_no, $job_costing_stage_name, $job_costing_cost_centre_id, $job_costing_cost_centre_no, $job_costing_cost_centre_name, $job_costing_job_id, $job_costing_job_no, $unit_inc_tax, $line_total_inc_tax, $fx_line_total_ex_tax, $fx_decimal_places, $home_decimal_places, $use_expiry_date, $line_details, $custom_field_values, $body)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation goodsReceivedNoteLinePOSTRequestGRNIDLinesPostAsyncWithHttpInfo
     *
     * Appends a line to a goods received note.
     *
     * @param  string $accept Accept Header (required)
     * @param  string $grnid (required)
     * @param  bool $jiwa_stateful Stateful indicator (optional)
     * @param  double $quantity_ordered (optional)
     * @param  double $quantity_delivered (optional)
     * @param  string $order_id (optional)
     * @param  string $order_no (optional)
     * @param  string $order_line_id (optional)
     * @param  double $quantity (optional)
     * @param  string $inventory_id (optional)
     * @param  string $part_no (optional)
     * @param  string $aux2 (optional)
     * @param  string $description (optional)
     * @param  string $supplier_part_no (optional)
     * @param  string $grn_line_type (optional)
     * @param  int $quantity_decimal_places (optional)
     * @param  \DateTime $last_saved_date_time (optional)
     * @param  string $classification_id (optional)
     * @param  string $classification_description (optional)
     * @param  double $tax_amount (optional)
     * @param  string $tax_id (optional)
     * @param  double $tax_rate (optional)
     * @param  double $cost (optional)
     * @param  double $currency_rate_used (optional)
     * @param  string $purchasing_classification_id (optional)
     * @param  string $purchasing_classification_description (optional)
     * @param  bool $posted_to_wip (optional)
     * @param  double $job_charge (optional)
     * @param  bool $use_serial_no (optional)
     * @param  double $fx_cost (optional)
     * @param  bool $physical_item (optional)
     * @param  string $inventory_expected_liability_ledger_account_id (optional)
     * @param  string $inventory_expected_liability_ledger_account_no (optional)
     * @param  string $inventory_expected_liability_ledger_account_description (optional)
     * @param  string $inventory_expected_asset_ledger_account_id (optional)
     * @param  string $inventory_expected_asset_ledger_account_no (optional)
     * @param  string $inventory_expected_asset_ledger_account_description (optional)
     * @param  string $inventory_delivered_asset_ledger_account_id (optional)
     * @param  string $inventory_delivered_asset_ledger_account_no (optional)
     * @param  string $inventory_delivered_asset_ledger_account_description (optional)
     * @param  string $inventory_value_ledger_account_id (optional)
     * @param  string $inventory_value_ledger_account_no (optional)
     * @param  string $inventory_value_ledger_account_description (optional)
     * @param  string $inventory_delivered_liability_ledger_account_id (optional)
     * @param  string $inventory_delivered_liability_ledger_account_no (optional)
     * @param  string $inventory_delivered_liability_ledger_account_description (optional)
     * @param  string $inventory_wip_ledger_account_id (optional)
     * @param  string $inventory_wip_ledger_account_no (optional)
     * @param  string $inventory_wip_ledger_account_description (optional)
     * @param  \DateTime $po_line_last_saved_date_time (optional)
     * @param  double $order_units (optional)
     * @param  int $item_no (optional)
     * @param  string $in_creditor_rec_id (optional)
     * @param  string $in_supplier_warehouse_rec_id (optional)
     * @param  string $job_costing_stage_id (optional)
     * @param  string $job_costing_stage_no (optional)
     * @param  string $job_costing_stage_name (optional)
     * @param  string $job_costing_cost_centre_id (optional)
     * @param  string $job_costing_cost_centre_no (optional)
     * @param  string $job_costing_cost_centre_name (optional)
     * @param  string $job_costing_job_id (optional)
     * @param  string $job_costing_job_no (optional)
     * @param  double $unit_inc_tax (optional)
     * @param  double $line_total_inc_tax (optional)
     * @param  double $fx_line_total_ex_tax (optional)
     * @param  int $fx_decimal_places (optional)
     * @param  int $home_decimal_places (optional)
     * @param  bool $use_expiry_date (optional)
     * @param  string $line_details (optional)
     * @param  string $custom_field_values (optional)
     * @param  \Jiwa\Model\GoodsReceivedNoteLinePOSTRequest $body (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function goodsReceivedNoteLinePOSTRequestGRNIDLinesPostAsyncWithHttpInfo($accept, $grnid, $jiwa_stateful = null, $quantity_ordered = null, $quantity_delivered = null, $order_id = null, $order_no = null, $order_line_id = null, $quantity = null, $inventory_id = null, $part_no = null, $aux2 = null, $description = null, $supplier_part_no = null, $grn_line_type = null, $quantity_decimal_places = null, $last_saved_date_time = null, $classification_id = null, $classification_description = null, $tax_amount = null, $tax_id = null, $tax_rate = null, $cost = null, $currency_rate_used = null, $purchasing_classification_id = null, $purchasing_classification_description = null, $posted_to_wip = null, $job_charge = null, $use_serial_no = null, $fx_cost = null, $physical_item = null, $inventory_expected_liability_ledger_account_id = null, $inventory_expected_liability_ledger_account_no = null, $inventory_expected_liability_ledger_account_description = null, $inventory_expected_asset_ledger_account_id = null, $inventory_expected_asset_ledger_account_no = null, $inventory_expected_asset_ledger_account_description = null, $inventory_delivered_asset_ledger_account_id = null, $inventory_delivered_asset_ledger_account_no = null, $inventory_delivered_asset_ledger_account_description = null, $inventory_value_ledger_account_id = null, $inventory_value_ledger_account_no = null, $inventory_value_ledger_account_description = null, $inventory_delivered_liability_ledger_account_id = null, $inventory_delivered_liability_ledger_account_no = null, $inventory_delivered_liability_ledger_account_description = null, $inventory_wip_ledger_account_id = null, $inventory_wip_ledger_account_no = null, $inventory_wip_ledger_account_description = null, $po_line_last_saved_date_time = null, $order_units = null, $item_no = null, $in_creditor_rec_id = null, $in_supplier_warehouse_rec_id = null, $job_costing_stage_id = null, $job_costing_stage_no = null, $job_costing_stage_name = null, $job_costing_cost_centre_id = null, $job_costing_cost_centre_no = null, $job_costing_cost_centre_name = null, $job_costing_job_id = null, $job_costing_job_no = null, $unit_inc_tax = null, $line_total_inc_tax = null, $fx_line_total_ex_tax = null, $fx_decimal_places = null, $home_decimal_places = null, $use_expiry_date = null, $line_details = null, $custom_field_values = null, $body = null)
    {
        $returnType = '\Jiwa\Model\GoodsReceivedNoteLine';
        $request = $this->goodsReceivedNoteLinePOSTRequestGRNIDLinesPostRequest($accept, $grnid, $jiwa_stateful, $quantity_ordered, $quantity_delivered, $order_id, $order_no, $order_line_id, $quantity, $inventory_id, $part_no, $aux2, $description, $supplier_part_no, $grn_line_type, $quantity_decimal_places, $last_saved_date_time, $classification_id, $classification_description, $tax_amount, $tax_id, $tax_rate, $cost, $currency_rate_used, $purchasing_classification_id, $purchasing_classification_description, $posted_to_wip, $job_charge, $use_serial_no, $fx_cost, $physical_item, $inventory_expected_liability_ledger_account_id, $inventory_expected_liability_ledger_account_no, $inventory_expected_liability_ledger_account_description, $inventory_expected_asset_ledger_account_id, $inventory_expected_asset_ledger_account_no, $inventory_expected_asset_ledger_account_description, $inventory_delivered_asset_ledger_account_id, $inventory_delivered_asset_ledger_account_no, $inventory_delivered_asset_ledger_account_description, $inventory_value_ledger_account_id, $inventory_value_ledger_account_no, $inventory_value_ledger_account_description, $inventory_delivered_liability_ledger_account_id, $inventory_delivered_liability_ledger_account_no, $inventory_delivered_liability_ledger_account_description, $inventory_wip_ledger_account_id, $inventory_wip_ledger_account_no, $inventory_wip_ledger_account_description, $po_line_last_saved_date_time, $order_units, $item_no, $in_creditor_rec_id, $in_supplier_warehouse_rec_id, $job_costing_stage_id, $job_costing_stage_no, $job_costing_stage_name, $job_costing_cost_centre_id, $job_costing_cost_centre_no, $job_costing_cost_centre_name, $job_costing_job_id, $job_costing_job_no, $unit_inc_tax, $line_total_inc_tax, $fx_line_total_ex_tax, $fx_decimal_places, $home_decimal_places, $use_expiry_date, $line_details, $custom_field_values, $body);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'goodsReceivedNoteLinePOSTRequestGRNIDLinesPost'
     *
     * @param  string $accept Accept Header (required)
     * @param  string $grnid (required)
     * @param  bool $jiwa_stateful Stateful indicator (optional)
     * @param  double $quantity_ordered (optional)
     * @param  double $quantity_delivered (optional)
     * @param  string $order_id (optional)
     * @param  string $order_no (optional)
     * @param  string $order_line_id (optional)
     * @param  double $quantity (optional)
     * @param  string $inventory_id (optional)
     * @param  string $part_no (optional)
     * @param  string $aux2 (optional)
     * @param  string $description (optional)
     * @param  string $supplier_part_no (optional)
     * @param  string $grn_line_type (optional)
     * @param  int $quantity_decimal_places (optional)
     * @param  \DateTime $last_saved_date_time (optional)
     * @param  string $classification_id (optional)
     * @param  string $classification_description (optional)
     * @param  double $tax_amount (optional)
     * @param  string $tax_id (optional)
     * @param  double $tax_rate (optional)
     * @param  double $cost (optional)
     * @param  double $currency_rate_used (optional)
     * @param  string $purchasing_classification_id (optional)
     * @param  string $purchasing_classification_description (optional)
     * @param  bool $posted_to_wip (optional)
     * @param  double $job_charge (optional)
     * @param  bool $use_serial_no (optional)
     * @param  double $fx_cost (optional)
     * @param  bool $physical_item (optional)
     * @param  string $inventory_expected_liability_ledger_account_id (optional)
     * @param  string $inventory_expected_liability_ledger_account_no (optional)
     * @param  string $inventory_expected_liability_ledger_account_description (optional)
     * @param  string $inventory_expected_asset_ledger_account_id (optional)
     * @param  string $inventory_expected_asset_ledger_account_no (optional)
     * @param  string $inventory_expected_asset_ledger_account_description (optional)
     * @param  string $inventory_delivered_asset_ledger_account_id (optional)
     * @param  string $inventory_delivered_asset_ledger_account_no (optional)
     * @param  string $inventory_delivered_asset_ledger_account_description (optional)
     * @param  string $inventory_value_ledger_account_id (optional)
     * @param  string $inventory_value_ledger_account_no (optional)
     * @param  string $inventory_value_ledger_account_description (optional)
     * @param  string $inventory_delivered_liability_ledger_account_id (optional)
     * @param  string $inventory_delivered_liability_ledger_account_no (optional)
     * @param  string $inventory_delivered_liability_ledger_account_description (optional)
     * @param  string $inventory_wip_ledger_account_id (optional)
     * @param  string $inventory_wip_ledger_account_no (optional)
     * @param  string $inventory_wip_ledger_account_description (optional)
     * @param  \DateTime $po_line_last_saved_date_time (optional)
     * @param  double $order_units (optional)
     * @param  int $item_no (optional)
     * @param  string $in_creditor_rec_id (optional)
     * @param  string $in_supplier_warehouse_rec_id (optional)
     * @param  string $job_costing_stage_id (optional)
     * @param  string $job_costing_stage_no (optional)
     * @param  string $job_costing_stage_name (optional)
     * @param  string $job_costing_cost_centre_id (optional)
     * @param  string $job_costing_cost_centre_no (optional)
     * @param  string $job_costing_cost_centre_name (optional)
     * @param  string $job_costing_job_id (optional)
     * @param  string $job_costing_job_no (optional)
     * @param  double $unit_inc_tax (optional)
     * @param  double $line_total_inc_tax (optional)
     * @param  double $fx_line_total_ex_tax (optional)
     * @param  int $fx_decimal_places (optional)
     * @param  int $home_decimal_places (optional)
     * @param  bool $use_expiry_date (optional)
     * @param  string $line_details (optional)
     * @param  string $custom_field_values (optional)
     * @param  \Jiwa\Model\GoodsReceivedNoteLinePOSTRequest $body (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function goodsReceivedNoteLinePOSTRequestGRNIDLinesPostRequest($accept, $grnid, $jiwa_stateful = null, $quantity_ordered = null, $quantity_delivered = null, $order_id = null, $order_no = null, $order_line_id = null, $quantity = null, $inventory_id = null, $part_no = null, $aux2 = null, $description = null, $supplier_part_no = null, $grn_line_type = null, $quantity_decimal_places = null, $last_saved_date_time = null, $classification_id = null, $classification_description = null, $tax_amount = null, $tax_id = null, $tax_rate = null, $cost = null, $currency_rate_used = null, $purchasing_classification_id = null, $purchasing_classification_description = null, $posted_to_wip = null, $job_charge = null, $use_serial_no = null, $fx_cost = null, $physical_item = null, $inventory_expected_liability_ledger_account_id = null, $inventory_expected_liability_ledger_account_no = null, $inventory_expected_liability_ledger_account_description = null, $inventory_expected_asset_ledger_account_id = null, $inventory_expected_asset_ledger_account_no = null, $inventory_expected_asset_ledger_account_description = null, $inventory_delivered_asset_ledger_account_id = null, $inventory_delivered_asset_ledger_account_no = null, $inventory_delivered_asset_ledger_account_description = null, $inventory_value_ledger_account_id = null, $inventory_value_ledger_account_no = null, $inventory_value_ledger_account_description = null, $inventory_delivered_liability_ledger_account_id = null, $inventory_delivered_liability_ledger_account_no = null, $inventory_delivered_liability_ledger_account_description = null, $inventory_wip_ledger_account_id = null, $inventory_wip_ledger_account_no = null, $inventory_wip_ledger_account_description = null, $po_line_last_saved_date_time = null, $order_units = null, $item_no = null, $in_creditor_rec_id = null, $in_supplier_warehouse_rec_id = null, $job_costing_stage_id = null, $job_costing_stage_no = null, $job_costing_stage_name = null, $job_costing_cost_centre_id = null, $job_costing_cost_centre_no = null, $job_costing_cost_centre_name = null, $job_costing_job_id = null, $job_costing_job_no = null, $unit_inc_tax = null, $line_total_inc_tax = null, $fx_line_total_ex_tax = null, $fx_decimal_places = null, $home_decimal_places = null, $use_expiry_date = null, $line_details = null, $custom_field_values = null, $body = null)
    {
        // verify the required parameter 'accept' is set
        if ($accept === null || (is_array($accept) && count($accept) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $accept when calling goodsReceivedNoteLinePOSTRequestGRNIDLinesPost'
            );
        }
        // verify the required parameter 'grnid' is set
        if ($grnid === null || (is_array($grnid) && count($grnid) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $grnid when calling goodsReceivedNoteLinePOSTRequestGRNIDLinesPost'
            );
        }

        $resourcePath = '/GoodsReceivedNotes/{GRNID}/Lines';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        if ($quantity_ordered !== null) {
            $queryParams['QuantityOrdered'] = ObjectSerializer::toQueryValue($quantity_ordered);
        }
        // query params
        if ($quantity_delivered !== null) {
            $queryParams['QuantityDelivered'] = ObjectSerializer::toQueryValue($quantity_delivered);
        }
        // query params
        if ($order_id !== null) {
            $queryParams['OrderID'] = ObjectSerializer::toQueryValue($order_id);
        }
        // query params
        if ($order_no !== null) {
            $queryParams['OrderNo'] = ObjectSerializer::toQueryValue($order_no);
        }
        // query params
        if ($order_line_id !== null) {
            $queryParams['OrderLineID'] = ObjectSerializer::toQueryValue($order_line_id);
        }
        // query params
        if ($quantity !== null) {
            $queryParams['Quantity'] = ObjectSerializer::toQueryValue($quantity);
        }
        // query params
        if ($inventory_id !== null) {
            $queryParams['InventoryID'] = ObjectSerializer::toQueryValue($inventory_id);
        }
        // query params
        if ($part_no !== null) {
            $queryParams['PartNo'] = ObjectSerializer::toQueryValue($part_no);
        }
        // query params
        if ($aux2 !== null) {
            $queryParams['Aux2'] = ObjectSerializer::toQueryValue($aux2);
        }
        // query params
        if ($description !== null) {
            $queryParams['Description'] = ObjectSerializer::toQueryValue($description);
        }
        // query params
        if ($supplier_part_no !== null) {
            $queryParams['SupplierPartNo'] = ObjectSerializer::toQueryValue($supplier_part_no);
        }
        // query params
        if ($grn_line_type !== null) {
            $queryParams['GRNLineType'] = ObjectSerializer::toQueryValue($grn_line_type);
        }
        // query params
        if ($quantity_decimal_places !== null) {
            $queryParams['QuantityDecimalPlaces'] = ObjectSerializer::toQueryValue($quantity_decimal_places);
        }
        // query params
        if ($last_saved_date_time !== null) {
            $queryParams['LastSavedDateTime'] = ObjectSerializer::toQueryValue($last_saved_date_time);
        }
        // query params
        if ($classification_id !== null) {
            $queryParams['ClassificationID'] = ObjectSerializer::toQueryValue($classification_id);
        }
        // query params
        if ($classification_description !== null) {
            $queryParams['ClassificationDescription'] = ObjectSerializer::toQueryValue($classification_description);
        }
        // query params
        if ($tax_amount !== null) {
            $queryParams['TaxAmount'] = ObjectSerializer::toQueryValue($tax_amount);
        }
        // query params
        if ($tax_id !== null) {
            $queryParams['TaxID'] = ObjectSerializer::toQueryValue($tax_id);
        }
        // query params
        if ($tax_rate !== null) {
            $queryParams['TaxRate'] = ObjectSerializer::toQueryValue($tax_rate);
        }
        // query params
        if ($cost !== null) {
            $queryParams['Cost'] = ObjectSerializer::toQueryValue($cost);
        }
        // query params
        if ($currency_rate_used !== null) {
            $queryParams['CurrencyRateUsed'] = ObjectSerializer::toQueryValue($currency_rate_used);
        }
        // query params
        if ($purchasing_classification_id !== null) {
            $queryParams['PurchasingClassificationID'] = ObjectSerializer::toQueryValue($purchasing_classification_id);
        }
        // query params
        if ($purchasing_classification_description !== null) {
            $queryParams['PurchasingClassificationDescription'] = ObjectSerializer::toQueryValue($purchasing_classification_description);
        }
        // query params
        if ($posted_to_wip !== null) {
            $queryParams['PostedToWIP'] = ObjectSerializer::toQueryValue($posted_to_wip);
        }
        // query params
        if ($job_charge !== null) {
            $queryParams['JobCharge'] = ObjectSerializer::toQueryValue($job_charge);
        }
        // query params
        if ($use_serial_no !== null) {
            $queryParams['UseSerialNo'] = ObjectSerializer::toQueryValue($use_serial_no);
        }
        // query params
        if ($fx_cost !== null) {
            $queryParams['FXCost'] = ObjectSerializer::toQueryValue($fx_cost);
        }
        // query params
        if ($physical_item !== null) {
            $queryParams['PhysicalItem'] = ObjectSerializer::toQueryValue($physical_item);
        }
        // query params
        if ($inventory_expected_liability_ledger_account_id !== null) {
            $queryParams['InventoryExpectedLiability_LedgerAccountID'] = ObjectSerializer::toQueryValue($inventory_expected_liability_ledger_account_id);
        }
        // query params
        if ($inventory_expected_liability_ledger_account_no !== null) {
            $queryParams['InventoryExpectedLiability_LedgerAccountNo'] = ObjectSerializer::toQueryValue($inventory_expected_liability_ledger_account_no);
        }
        // query params
        if ($inventory_expected_liability_ledger_account_description !== null) {
            $queryParams['InventoryExpectedLiability_LedgerAccountDescription'] = ObjectSerializer::toQueryValue($inventory_expected_liability_ledger_account_description);
        }
        // query params
        if ($inventory_expected_asset_ledger_account_id !== null) {
            $queryParams['InventoryExpectedAsset_LedgerAccountID'] = ObjectSerializer::toQueryValue($inventory_expected_asset_ledger_account_id);
        }
        // query params
        if ($inventory_expected_asset_ledger_account_no !== null) {
            $queryParams['InventoryExpectedAsset_LedgerAccountNo'] = ObjectSerializer::toQueryValue($inventory_expected_asset_ledger_account_no);
        }
        // query params
        if ($inventory_expected_asset_ledger_account_description !== null) {
            $queryParams['InventoryExpectedAsset_LedgerAccountDescription'] = ObjectSerializer::toQueryValue($inventory_expected_asset_ledger_account_description);
        }
        // query params
        if ($inventory_delivered_asset_ledger_account_id !== null) {
            $queryParams['InventoryDeliveredAsset_LedgerAccountID'] = ObjectSerializer::toQueryValue($inventory_delivered_asset_ledger_account_id);
        }
        // query params
        if ($inventory_delivered_asset_ledger_account_no !== null) {
            $queryParams['InventoryDeliveredAsset_LedgerAccountNo'] = ObjectSerializer::toQueryValue($inventory_delivered_asset_ledger_account_no);
        }
        // query params
        if ($inventory_delivered_asset_ledger_account_description !== null) {
            $queryParams['InventoryDeliveredAsset_LedgerAccountDescription'] = ObjectSerializer::toQueryValue($inventory_delivered_asset_ledger_account_description);
        }
        // query params
        if ($inventory_value_ledger_account_id !== null) {
            $queryParams['InventoryValue_LedgerAccountID'] = ObjectSerializer::toQueryValue($inventory_value_ledger_account_id);
        }
        // query params
        if ($inventory_value_ledger_account_no !== null) {
            $queryParams['InventoryValue_LedgerAccountNo'] = ObjectSerializer::toQueryValue($inventory_value_ledger_account_no);
        }
        // query params
        if ($inventory_value_ledger_account_description !== null) {
            $queryParams['InventoryValue_LedgerAccountDescription'] = ObjectSerializer::toQueryValue($inventory_value_ledger_account_description);
        }
        // query params
        if ($inventory_delivered_liability_ledger_account_id !== null) {
            $queryParams['InventoryDeliveredLiability_LedgerAccountID'] = ObjectSerializer::toQueryValue($inventory_delivered_liability_ledger_account_id);
        }
        // query params
        if ($inventory_delivered_liability_ledger_account_no !== null) {
            $queryParams['InventoryDeliveredLiability_LedgerAccountNo'] = ObjectSerializer::toQueryValue($inventory_delivered_liability_ledger_account_no);
        }
        // query params
        if ($inventory_delivered_liability_ledger_account_description !== null) {
            $queryParams['InventoryDeliveredLiability_LedgerAccountDescription'] = ObjectSerializer::toQueryValue($inventory_delivered_liability_ledger_account_description);
        }
        // query params
        if ($inventory_wip_ledger_account_id !== null) {
            $queryParams['InventoryWIP_LedgerAccountID'] = ObjectSerializer::toQueryValue($inventory_wip_ledger_account_id);
        }
        // query params
        if ($inventory_wip_ledger_account_no !== null) {
            $queryParams['InventoryWIP_LedgerAccountNo'] = ObjectSerializer::toQueryValue($inventory_wip_ledger_account_no);
        }
        // query params
        if ($inventory_wip_ledger_account_description !== null) {
            $queryParams['InventoryWIP_LedgerAccountDescription'] = ObjectSerializer::toQueryValue($inventory_wip_ledger_account_description);
        }
        // query params
        if ($po_line_last_saved_date_time !== null) {
            $queryParams['POLineLastSavedDateTime'] = ObjectSerializer::toQueryValue($po_line_last_saved_date_time);
        }
        // query params
        if ($order_units !== null) {
            $queryParams['OrderUnits'] = ObjectSerializer::toQueryValue($order_units);
        }
        // query params
        if ($item_no !== null) {
            $queryParams['ItemNo'] = ObjectSerializer::toQueryValue($item_no);
        }
        // query params
        if ($in_creditor_rec_id !== null) {
            $queryParams['IN_Creditor_RecID'] = ObjectSerializer::toQueryValue($in_creditor_rec_id);
        }
        // query params
        if ($in_supplier_warehouse_rec_id !== null) {
            $queryParams['IN_SupplierWarehouse_RecID'] = ObjectSerializer::toQueryValue($in_supplier_warehouse_rec_id);
        }
        // query params
        if ($job_costing_stage_id !== null) {
            $queryParams['JobCostingStageID'] = ObjectSerializer::toQueryValue($job_costing_stage_id);
        }
        // query params
        if ($job_costing_stage_no !== null) {
            $queryParams['JobCostingStageNo'] = ObjectSerializer::toQueryValue($job_costing_stage_no);
        }
        // query params
        if ($job_costing_stage_name !== null) {
            $queryParams['JobCostingStageName'] = ObjectSerializer::toQueryValue($job_costing_stage_name);
        }
        // query params
        if ($job_costing_cost_centre_id !== null) {
            $queryParams['JobCostingCostCentreID'] = ObjectSerializer::toQueryValue($job_costing_cost_centre_id);
        }
        // query params
        if ($job_costing_cost_centre_no !== null) {
            $queryParams['JobCostingCostCentreNo'] = ObjectSerializer::toQueryValue($job_costing_cost_centre_no);
        }
        // query params
        if ($job_costing_cost_centre_name !== null) {
            $queryParams['JobCostingCostCentreName'] = ObjectSerializer::toQueryValue($job_costing_cost_centre_name);
        }
        // query params
        if ($job_costing_job_id !== null) {
            $queryParams['JobCostingJobID'] = ObjectSerializer::toQueryValue($job_costing_job_id);
        }
        // query params
        if ($job_costing_job_no !== null) {
            $queryParams['JobCostingJobNo'] = ObjectSerializer::toQueryValue($job_costing_job_no);
        }
        // query params
        if ($unit_inc_tax !== null) {
            $queryParams['UnitIncTax'] = ObjectSerializer::toQueryValue($unit_inc_tax);
        }
        // query params
        if ($line_total_inc_tax !== null) {
            $queryParams['LineTotalIncTax'] = ObjectSerializer::toQueryValue($line_total_inc_tax);
        }
        // query params
        if ($fx_line_total_ex_tax !== null) {
            $queryParams['FXLineTotalExTax'] = ObjectSerializer::toQueryValue($fx_line_total_ex_tax);
        }
        // query params
        if ($fx_decimal_places !== null) {
            $queryParams['FXDecimalPlaces'] = ObjectSerializer::toQueryValue($fx_decimal_places);
        }
        // query params
        if ($home_decimal_places !== null) {
            $queryParams['HomeDecimalPlaces'] = ObjectSerializer::toQueryValue($home_decimal_places);
        }
        // query params
        if ($use_expiry_date !== null) {
            $queryParams['UseExpiryDate'] = ObjectSerializer::toQueryValue($use_expiry_date);
        }
        // query params
        if ($line_details !== null) {
            $queryParams['LineDetails'] = ObjectSerializer::toQueryValue($line_details);
        }
        // query params
        if ($custom_field_values !== null) {
            $queryParams['CustomFieldValues'] = ObjectSerializer::toQueryValue($custom_field_values);
        }
        // header params
        if ($accept !== null) {
            $headerParams['Accept'] = ObjectSerializer::toHeaderValue($accept);
        }
        // header params
        if ($jiwa_stateful !== null) {
            $headerParams['jiwa-stateful'] = ObjectSerializer::toHeaderValue($jiwa_stateful);
        }

        // path params
        if ($grnid !== null) {
            $resourcePath = str_replace(
                '{' . 'GRNID' . '}',
                ObjectSerializer::toPathValue($grnid),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;
        if (isset($body)) {
            $_tempBody = $body;
        }

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json', 'application/xml']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json', 'application/xml'],
                ['application/x-www-form-urlencoded', 'application/json', 'application/xml']
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            
            if($headers['Content-Type'] === 'application/json') {
                // \stdClass has no __toString(), so we should encode it manually
                if ($httpBody instanceof \stdClass) {
                    $httpBody = \GuzzleHttp\json_encode($httpBody);
                }
                // array has no __toString(), so we should encode it manually
                if(is_array($httpBody)) {
                    $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($httpBody));
                }
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\Query::build($formParams);
            }
        }

        // this endpoint requires HTTP basic authentication
        if ($this->config->getUsername() !== null || $this->config->getPassword() !== null) {
            $headers['Authorization'] = 'Basic ' . base64_encode($this->config->getUsername() . ":" . $this->config->getPassword());
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\Query::build($queryParams);
        return new Request(
            'POST',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation goodsReceivedNoteLinesGETManyRequestGRNIDLinesGet
     *
     * Retrieves a list of goods received note lines.
     *
     * @param  string $accept Accept Header (required)
     * @param  string $grnid grnid (required)
     * @param  bool $jiwa_stateful Stateful indicator (optional)
     *
     * @throws \Jiwa\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Jiwa\Model\GoodsReceivedNoteLine[]
     */
    public function goodsReceivedNoteLinesGETManyRequestGRNIDLinesGet($accept, $grnid, $jiwa_stateful = null)
    {
        list($response) = $this->goodsReceivedNoteLinesGETManyRequestGRNIDLinesGetWithHttpInfo($accept, $grnid, $jiwa_stateful);
        return $response;
    }

    /**
     * Operation goodsReceivedNoteLinesGETManyRequestGRNIDLinesGetWithHttpInfo
     *
     * Retrieves a list of goods received note lines.
     *
     * @param  string $accept Accept Header (required)
     * @param  string $grnid (required)
     * @param  bool $jiwa_stateful Stateful indicator (optional)
     *
     * @throws \Jiwa\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Jiwa\Model\GoodsReceivedNoteLine[], HTTP status code, HTTP response headers (array of strings)
     */
    public function goodsReceivedNoteLinesGETManyRequestGRNIDLinesGetWithHttpInfo($accept, $grnid, $jiwa_stateful = null)
    {
        $returnType = '\Jiwa\Model\GoodsReceivedNoteLine[]';
        $request = $this->goodsReceivedNoteLinesGETManyRequestGRNIDLinesGetRequest($accept, $grnid, $jiwa_stateful);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Jiwa\Model\GoodsReceivedNoteLine[]',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 401:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Jiwa\Model\GoodsReceivedNoteLine[]',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 403:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Jiwa\Model\GoodsReceivedNoteLine[]',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 404:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Jiwa\Model\GoodsReceivedNoteLine[]',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation goodsReceivedNoteLinesGETManyRequestGRNIDLinesGetAsync
     *
     * Retrieves a list of goods received note lines.
     *
     * @param  string $accept Accept Header (required)
     * @param  string $grnid (required)
     * @param  bool $jiwa_stateful Stateful indicator (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function goodsReceivedNoteLinesGETManyRequestGRNIDLinesGetAsync($accept, $grnid, $jiwa_stateful = null)
    {
        return $this->goodsReceivedNoteLinesGETManyRequestGRNIDLinesGetAsyncWithHttpInfo($accept, $grnid, $jiwa_stateful)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation goodsReceivedNoteLinesGETManyRequestGRNIDLinesGetAsyncWithHttpInfo
     *
     * Retrieves a list of goods received note lines.
     *
     * @param  string $accept Accept Header (required)
     * @param  string $grnid (required)
     * @param  bool $jiwa_stateful Stateful indicator (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function goodsReceivedNoteLinesGETManyRequestGRNIDLinesGetAsyncWithHttpInfo($accept, $grnid, $jiwa_stateful = null)
    {
        $returnType = '\Jiwa\Model\GoodsReceivedNoteLine[]';
        $request = $this->goodsReceivedNoteLinesGETManyRequestGRNIDLinesGetRequest($accept, $grnid, $jiwa_stateful);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'goodsReceivedNoteLinesGETManyRequestGRNIDLinesGet'
     *
     * @param  string $accept Accept Header (required)
     * @param  string $grnid (required)
     * @param  bool $jiwa_stateful Stateful indicator (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function goodsReceivedNoteLinesGETManyRequestGRNIDLinesGetRequest($accept, $grnid, $jiwa_stateful = null)
    {
        // verify the required parameter 'accept' is set
        if ($accept === null || (is_array($accept) && count($accept) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $accept when calling goodsReceivedNoteLinesGETManyRequestGRNIDLinesGet'
            );
        }
        // verify the required parameter 'grnid' is set
        if ($grnid === null || (is_array($grnid) && count($grnid) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $grnid when calling goodsReceivedNoteLinesGETManyRequestGRNIDLinesGet'
            );
        }

        $resourcePath = '/GoodsReceivedNotes/{GRNID}/Lines';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // header params
        if ($accept !== null) {
            $headerParams['Accept'] = ObjectSerializer::toHeaderValue($accept);
        }
        // header params
        if ($jiwa_stateful !== null) {
            $headerParams['jiwa-stateful'] = ObjectSerializer::toHeaderValue($jiwa_stateful);
        }

        // path params
        if ($grnid !== null) {
            $resourcePath = str_replace(
                '{' . 'GRNID' . '}',
                ObjectSerializer::toPathValue($grnid),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json', 'application/xml']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json', 'application/xml'],
                ['application/x-www-form-urlencoded', 'application/json', 'application/xml']
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            
            if($headers['Content-Type'] === 'application/json') {
                // \stdClass has no __toString(), so we should encode it manually
                if ($httpBody instanceof \stdClass) {
                    $httpBody = \GuzzleHttp\json_encode($httpBody);
                }
                // array has no __toString(), so we should encode it manually
                if(is_array($httpBody)) {
                    $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($httpBody));
                }
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\Query::build($formParams);
            }
        }

        // this endpoint requires HTTP basic authentication
        if ($this->config->getUsername() !== null || $this->config->getPassword() !== null) {
            $headers['Authorization'] = 'Basic ' . base64_encode($this->config->getUsername() . ":" . $this->config->getPassword());
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\Query::build($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation goodsReceivedNotePATCHRequestGRNIDUpdate
     *
     * Updates a GRN.
     *
     * @param  string $accept Accept Header (required)
     * @param  string $grnid grnid (required)
     * @param  bool $jiwa_stateful Stateful indicator (optional)
     * @param  string $creditor_id creditor_id (optional)
     * @param  string $creditor_account_no creditor_account_no (optional)
     * @param  string $creditor_name creditor_name (optional)
     * @param  \DateTime $last_saved_date_time last_saved_date_time (optional)
     * @param  string $slip_no slip_no (optional)
     * @param  \DateTime $slip_date slip_date (optional)
     * @param  string $status status (optional)
     * @param  double $freight freight (optional)
     * @param  double $duty duty (optional)
     * @param  bool $invoiced invoiced (optional)
     * @param  string $pi_main_id pi_main_id (optional)
     * @param  double $insurance insurance (optional)
     * @param  string $logical_warehouse_id logical_warehouse_id (optional)
     * @param  string $logical_warehouse_description logical_warehouse_description (optional)
     * @param  string $physical_warehouse_id physical_warehouse_id (optional)
     * @param  string $physical_warehouse_description physical_warehouse_description (optional)
     * @param  double $tax_total tax_total (optional)
     * @param  string $freight_tax_id freight_tax_id (optional)
     * @param  double $freight_tax_rate freight_tax_rate (optional)
     * @param  double $freight_tax_amount freight_tax_amount (optional)
     * @param  string $duty_tax_id duty_tax_id (optional)
     * @param  double $duty_tax_rate duty_tax_rate (optional)
     * @param  double $duty_tax_amount duty_tax_amount (optional)
     * @param  string $insurance_tax_id insurance_tax_id (optional)
     * @param  double $insurance_tax_rate insurance_tax_rate (optional)
     * @param  double $insurance_tax_amount insurance_tax_amount (optional)
     * @param  string $reference reference (optional)
     * @param  double $total_gross total_gross (optional)
     * @param  double $total_net total_net (optional)
     * @param  double $total_fx total_fx (optional)
     * @param  double $freight_inc freight_inc (optional)
     * @param  double $duty_inc duty_inc (optional)
     * @param  double $insurance_inc insurance_inc (optional)
     * @param  double $inventory_total_quantity inventory_total_quantity (optional)
     * @param  double $inventory_total_quantity_decimal_places inventory_total_quantity_decimal_places (optional)
     * @param  string $lines lines (optional)
     * @param  string $purchase_orders purchase_orders (optional)
     * @param  string $custom_field_values custom_field_values (optional)
     * @param  \Jiwa\Model\GoodsReceivedNotePATCHRequest $body body (optional)
     *
     * @throws \Jiwa\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Jiwa\Model\GoodsReceivedNote
     */
    public function goodsReceivedNotePATCHRequestGRNIDUpdate($accept, $grnid, $jiwa_stateful = null, $creditor_id = null, $creditor_account_no = null, $creditor_name = null, $last_saved_date_time = null, $slip_no = null, $slip_date = null, $status = null, $freight = null, $duty = null, $invoiced = null, $pi_main_id = null, $insurance = null, $logical_warehouse_id = null, $logical_warehouse_description = null, $physical_warehouse_id = null, $physical_warehouse_description = null, $tax_total = null, $freight_tax_id = null, $freight_tax_rate = null, $freight_tax_amount = null, $duty_tax_id = null, $duty_tax_rate = null, $duty_tax_amount = null, $insurance_tax_id = null, $insurance_tax_rate = null, $insurance_tax_amount = null, $reference = null, $total_gross = null, $total_net = null, $total_fx = null, $freight_inc = null, $duty_inc = null, $insurance_inc = null, $inventory_total_quantity = null, $inventory_total_quantity_decimal_places = null, $lines = null, $purchase_orders = null, $custom_field_values = null, $body = null)
    {
        list($response) = $this->goodsReceivedNotePATCHRequestGRNIDUpdateWithHttpInfo($accept, $grnid, $jiwa_stateful, $creditor_id, $creditor_account_no, $creditor_name, $last_saved_date_time, $slip_no, $slip_date, $status, $freight, $duty, $invoiced, $pi_main_id, $insurance, $logical_warehouse_id, $logical_warehouse_description, $physical_warehouse_id, $physical_warehouse_description, $tax_total, $freight_tax_id, $freight_tax_rate, $freight_tax_amount, $duty_tax_id, $duty_tax_rate, $duty_tax_amount, $insurance_tax_id, $insurance_tax_rate, $insurance_tax_amount, $reference, $total_gross, $total_net, $total_fx, $freight_inc, $duty_inc, $insurance_inc, $inventory_total_quantity, $inventory_total_quantity_decimal_places, $lines, $purchase_orders, $custom_field_values, $body);
        return $response;
    }

    /**
     * Operation goodsReceivedNotePATCHRequestGRNIDUpdateWithHttpInfo
     *
     * Updates a GRN.
     *
     * @param  string $accept Accept Header (required)
     * @param  string $grnid (required)
     * @param  bool $jiwa_stateful Stateful indicator (optional)
     * @param  string $creditor_id (optional)
     * @param  string $creditor_account_no (optional)
     * @param  string $creditor_name (optional)
     * @param  \DateTime $last_saved_date_time (optional)
     * @param  string $slip_no (optional)
     * @param  \DateTime $slip_date (optional)
     * @param  string $status (optional)
     * @param  double $freight (optional)
     * @param  double $duty (optional)
     * @param  bool $invoiced (optional)
     * @param  string $pi_main_id (optional)
     * @param  double $insurance (optional)
     * @param  string $logical_warehouse_id (optional)
     * @param  string $logical_warehouse_description (optional)
     * @param  string $physical_warehouse_id (optional)
     * @param  string $physical_warehouse_description (optional)
     * @param  double $tax_total (optional)
     * @param  string $freight_tax_id (optional)
     * @param  double $freight_tax_rate (optional)
     * @param  double $freight_tax_amount (optional)
     * @param  string $duty_tax_id (optional)
     * @param  double $duty_tax_rate (optional)
     * @param  double $duty_tax_amount (optional)
     * @param  string $insurance_tax_id (optional)
     * @param  double $insurance_tax_rate (optional)
     * @param  double $insurance_tax_amount (optional)
     * @param  string $reference (optional)
     * @param  double $total_gross (optional)
     * @param  double $total_net (optional)
     * @param  double $total_fx (optional)
     * @param  double $freight_inc (optional)
     * @param  double $duty_inc (optional)
     * @param  double $insurance_inc (optional)
     * @param  double $inventory_total_quantity (optional)
     * @param  double $inventory_total_quantity_decimal_places (optional)
     * @param  string $lines (optional)
     * @param  string $purchase_orders (optional)
     * @param  string $custom_field_values (optional)
     * @param  \Jiwa\Model\GoodsReceivedNotePATCHRequest $body (optional)
     *
     * @throws \Jiwa\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Jiwa\Model\GoodsReceivedNote, HTTP status code, HTTP response headers (array of strings)
     */
    public function goodsReceivedNotePATCHRequestGRNIDUpdateWithHttpInfo($accept, $grnid, $jiwa_stateful = null, $creditor_id = null, $creditor_account_no = null, $creditor_name = null, $last_saved_date_time = null, $slip_no = null, $slip_date = null, $status = null, $freight = null, $duty = null, $invoiced = null, $pi_main_id = null, $insurance = null, $logical_warehouse_id = null, $logical_warehouse_description = null, $physical_warehouse_id = null, $physical_warehouse_description = null, $tax_total = null, $freight_tax_id = null, $freight_tax_rate = null, $freight_tax_amount = null, $duty_tax_id = null, $duty_tax_rate = null, $duty_tax_amount = null, $insurance_tax_id = null, $insurance_tax_rate = null, $insurance_tax_amount = null, $reference = null, $total_gross = null, $total_net = null, $total_fx = null, $freight_inc = null, $duty_inc = null, $insurance_inc = null, $inventory_total_quantity = null, $inventory_total_quantity_decimal_places = null, $lines = null, $purchase_orders = null, $custom_field_values = null, $body = null)
    {
        $returnType = '\Jiwa\Model\GoodsReceivedNote';
        $request = $this->goodsReceivedNotePATCHRequestGRNIDUpdateRequest($accept, $grnid, $jiwa_stateful, $creditor_id, $creditor_account_no, $creditor_name, $last_saved_date_time, $slip_no, $slip_date, $status, $freight, $duty, $invoiced, $pi_main_id, $insurance, $logical_warehouse_id, $logical_warehouse_description, $physical_warehouse_id, $physical_warehouse_description, $tax_total, $freight_tax_id, $freight_tax_rate, $freight_tax_amount, $duty_tax_id, $duty_tax_rate, $duty_tax_amount, $insurance_tax_id, $insurance_tax_rate, $insurance_tax_amount, $reference, $total_gross, $total_net, $total_fx, $freight_inc, $duty_inc, $insurance_inc, $inventory_total_quantity, $inventory_total_quantity_decimal_places, $lines, $purchase_orders, $custom_field_values, $body);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Jiwa\Model\GoodsReceivedNote',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 404:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Jiwa\Model\GoodsReceivedNote',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 201:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Jiwa\Model\GoodsReceivedNote',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 401:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Jiwa\Model\GoodsReceivedNote',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 403:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Jiwa\Model\GoodsReceivedNote',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation goodsReceivedNotePATCHRequestGRNIDUpdateAsync
     *
     * Updates a GRN.
     *
     * @param  string $accept Accept Header (required)
     * @param  string $grnid (required)
     * @param  bool $jiwa_stateful Stateful indicator (optional)
     * @param  string $creditor_id (optional)
     * @param  string $creditor_account_no (optional)
     * @param  string $creditor_name (optional)
     * @param  \DateTime $last_saved_date_time (optional)
     * @param  string $slip_no (optional)
     * @param  \DateTime $slip_date (optional)
     * @param  string $status (optional)
     * @param  double $freight (optional)
     * @param  double $duty (optional)
     * @param  bool $invoiced (optional)
     * @param  string $pi_main_id (optional)
     * @param  double $insurance (optional)
     * @param  string $logical_warehouse_id (optional)
     * @param  string $logical_warehouse_description (optional)
     * @param  string $physical_warehouse_id (optional)
     * @param  string $physical_warehouse_description (optional)
     * @param  double $tax_total (optional)
     * @param  string $freight_tax_id (optional)
     * @param  double $freight_tax_rate (optional)
     * @param  double $freight_tax_amount (optional)
     * @param  string $duty_tax_id (optional)
     * @param  double $duty_tax_rate (optional)
     * @param  double $duty_tax_amount (optional)
     * @param  string $insurance_tax_id (optional)
     * @param  double $insurance_tax_rate (optional)
     * @param  double $insurance_tax_amount (optional)
     * @param  string $reference (optional)
     * @param  double $total_gross (optional)
     * @param  double $total_net (optional)
     * @param  double $total_fx (optional)
     * @param  double $freight_inc (optional)
     * @param  double $duty_inc (optional)
     * @param  double $insurance_inc (optional)
     * @param  double $inventory_total_quantity (optional)
     * @param  double $inventory_total_quantity_decimal_places (optional)
     * @param  string $lines (optional)
     * @param  string $purchase_orders (optional)
     * @param  string $custom_field_values (optional)
     * @param  \Jiwa\Model\GoodsReceivedNotePATCHRequest $body (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function goodsReceivedNotePATCHRequestGRNIDUpdateAsync($accept, $grnid, $jiwa_stateful = null, $creditor_id = null, $creditor_account_no = null, $creditor_name = null, $last_saved_date_time = null, $slip_no = null, $slip_date = null, $status = null, $freight = null, $duty = null, $invoiced = null, $pi_main_id = null, $insurance = null, $logical_warehouse_id = null, $logical_warehouse_description = null, $physical_warehouse_id = null, $physical_warehouse_description = null, $tax_total = null, $freight_tax_id = null, $freight_tax_rate = null, $freight_tax_amount = null, $duty_tax_id = null, $duty_tax_rate = null, $duty_tax_amount = null, $insurance_tax_id = null, $insurance_tax_rate = null, $insurance_tax_amount = null, $reference = null, $total_gross = null, $total_net = null, $total_fx = null, $freight_inc = null, $duty_inc = null, $insurance_inc = null, $inventory_total_quantity = null, $inventory_total_quantity_decimal_places = null, $lines = null, $purchase_orders = null, $custom_field_values = null, $body = null)
    {
        return $this->goodsReceivedNotePATCHRequestGRNIDUpdateAsyncWithHttpInfo($accept, $grnid, $jiwa_stateful, $creditor_id, $creditor_account_no, $creditor_name, $last_saved_date_time, $slip_no, $slip_date, $status, $freight, $duty, $invoiced, $pi_main_id, $insurance, $logical_warehouse_id, $logical_warehouse_description, $physical_warehouse_id, $physical_warehouse_description, $tax_total, $freight_tax_id, $freight_tax_rate, $freight_tax_amount, $duty_tax_id, $duty_tax_rate, $duty_tax_amount, $insurance_tax_id, $insurance_tax_rate, $insurance_tax_amount, $reference, $total_gross, $total_net, $total_fx, $freight_inc, $duty_inc, $insurance_inc, $inventory_total_quantity, $inventory_total_quantity_decimal_places, $lines, $purchase_orders, $custom_field_values, $body)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation goodsReceivedNotePATCHRequestGRNIDUpdateAsyncWithHttpInfo
     *
     * Updates a GRN.
     *
     * @param  string $accept Accept Header (required)
     * @param  string $grnid (required)
     * @param  bool $jiwa_stateful Stateful indicator (optional)
     * @param  string $creditor_id (optional)
     * @param  string $creditor_account_no (optional)
     * @param  string $creditor_name (optional)
     * @param  \DateTime $last_saved_date_time (optional)
     * @param  string $slip_no (optional)
     * @param  \DateTime $slip_date (optional)
     * @param  string $status (optional)
     * @param  double $freight (optional)
     * @param  double $duty (optional)
     * @param  bool $invoiced (optional)
     * @param  string $pi_main_id (optional)
     * @param  double $insurance (optional)
     * @param  string $logical_warehouse_id (optional)
     * @param  string $logical_warehouse_description (optional)
     * @param  string $physical_warehouse_id (optional)
     * @param  string $physical_warehouse_description (optional)
     * @param  double $tax_total (optional)
     * @param  string $freight_tax_id (optional)
     * @param  double $freight_tax_rate (optional)
     * @param  double $freight_tax_amount (optional)
     * @param  string $duty_tax_id (optional)
     * @param  double $duty_tax_rate (optional)
     * @param  double $duty_tax_amount (optional)
     * @param  string $insurance_tax_id (optional)
     * @param  double $insurance_tax_rate (optional)
     * @param  double $insurance_tax_amount (optional)
     * @param  string $reference (optional)
     * @param  double $total_gross (optional)
     * @param  double $total_net (optional)
     * @param  double $total_fx (optional)
     * @param  double $freight_inc (optional)
     * @param  double $duty_inc (optional)
     * @param  double $insurance_inc (optional)
     * @param  double $inventory_total_quantity (optional)
     * @param  double $inventory_total_quantity_decimal_places (optional)
     * @param  string $lines (optional)
     * @param  string $purchase_orders (optional)
     * @param  string $custom_field_values (optional)
     * @param  \Jiwa\Model\GoodsReceivedNotePATCHRequest $body (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function goodsReceivedNotePATCHRequestGRNIDUpdateAsyncWithHttpInfo($accept, $grnid, $jiwa_stateful = null, $creditor_id = null, $creditor_account_no = null, $creditor_name = null, $last_saved_date_time = null, $slip_no = null, $slip_date = null, $status = null, $freight = null, $duty = null, $invoiced = null, $pi_main_id = null, $insurance = null, $logical_warehouse_id = null, $logical_warehouse_description = null, $physical_warehouse_id = null, $physical_warehouse_description = null, $tax_total = null, $freight_tax_id = null, $freight_tax_rate = null, $freight_tax_amount = null, $duty_tax_id = null, $duty_tax_rate = null, $duty_tax_amount = null, $insurance_tax_id = null, $insurance_tax_rate = null, $insurance_tax_amount = null, $reference = null, $total_gross = null, $total_net = null, $total_fx = null, $freight_inc = null, $duty_inc = null, $insurance_inc = null, $inventory_total_quantity = null, $inventory_total_quantity_decimal_places = null, $lines = null, $purchase_orders = null, $custom_field_values = null, $body = null)
    {
        $returnType = '\Jiwa\Model\GoodsReceivedNote';
        $request = $this->goodsReceivedNotePATCHRequestGRNIDUpdateRequest($accept, $grnid, $jiwa_stateful, $creditor_id, $creditor_account_no, $creditor_name, $last_saved_date_time, $slip_no, $slip_date, $status, $freight, $duty, $invoiced, $pi_main_id, $insurance, $logical_warehouse_id, $logical_warehouse_description, $physical_warehouse_id, $physical_warehouse_description, $tax_total, $freight_tax_id, $freight_tax_rate, $freight_tax_amount, $duty_tax_id, $duty_tax_rate, $duty_tax_amount, $insurance_tax_id, $insurance_tax_rate, $insurance_tax_amount, $reference, $total_gross, $total_net, $total_fx, $freight_inc, $duty_inc, $insurance_inc, $inventory_total_quantity, $inventory_total_quantity_decimal_places, $lines, $purchase_orders, $custom_field_values, $body);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'goodsReceivedNotePATCHRequestGRNIDUpdate'
     *
     * @param  string $accept Accept Header (required)
     * @param  string $grnid (required)
     * @param  bool $jiwa_stateful Stateful indicator (optional)
     * @param  string $creditor_id (optional)
     * @param  string $creditor_account_no (optional)
     * @param  string $creditor_name (optional)
     * @param  \DateTime $last_saved_date_time (optional)
     * @param  string $slip_no (optional)
     * @param  \DateTime $slip_date (optional)
     * @param  string $status (optional)
     * @param  double $freight (optional)
     * @param  double $duty (optional)
     * @param  bool $invoiced (optional)
     * @param  string $pi_main_id (optional)
     * @param  double $insurance (optional)
     * @param  string $logical_warehouse_id (optional)
     * @param  string $logical_warehouse_description (optional)
     * @param  string $physical_warehouse_id (optional)
     * @param  string $physical_warehouse_description (optional)
     * @param  double $tax_total (optional)
     * @param  string $freight_tax_id (optional)
     * @param  double $freight_tax_rate (optional)
     * @param  double $freight_tax_amount (optional)
     * @param  string $duty_tax_id (optional)
     * @param  double $duty_tax_rate (optional)
     * @param  double $duty_tax_amount (optional)
     * @param  string $insurance_tax_id (optional)
     * @param  double $insurance_tax_rate (optional)
     * @param  double $insurance_tax_amount (optional)
     * @param  string $reference (optional)
     * @param  double $total_gross (optional)
     * @param  double $total_net (optional)
     * @param  double $total_fx (optional)
     * @param  double $freight_inc (optional)
     * @param  double $duty_inc (optional)
     * @param  double $insurance_inc (optional)
     * @param  double $inventory_total_quantity (optional)
     * @param  double $inventory_total_quantity_decimal_places (optional)
     * @param  string $lines (optional)
     * @param  string $purchase_orders (optional)
     * @param  string $custom_field_values (optional)
     * @param  \Jiwa\Model\GoodsReceivedNotePATCHRequest $body (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function goodsReceivedNotePATCHRequestGRNIDUpdateRequest($accept, $grnid, $jiwa_stateful = null, $creditor_id = null, $creditor_account_no = null, $creditor_name = null, $last_saved_date_time = null, $slip_no = null, $slip_date = null, $status = null, $freight = null, $duty = null, $invoiced = null, $pi_main_id = null, $insurance = null, $logical_warehouse_id = null, $logical_warehouse_description = null, $physical_warehouse_id = null, $physical_warehouse_description = null, $tax_total = null, $freight_tax_id = null, $freight_tax_rate = null, $freight_tax_amount = null, $duty_tax_id = null, $duty_tax_rate = null, $duty_tax_amount = null, $insurance_tax_id = null, $insurance_tax_rate = null, $insurance_tax_amount = null, $reference = null, $total_gross = null, $total_net = null, $total_fx = null, $freight_inc = null, $duty_inc = null, $insurance_inc = null, $inventory_total_quantity = null, $inventory_total_quantity_decimal_places = null, $lines = null, $purchase_orders = null, $custom_field_values = null, $body = null)
    {
        // verify the required parameter 'accept' is set
        if ($accept === null || (is_array($accept) && count($accept) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $accept when calling goodsReceivedNotePATCHRequestGRNIDUpdate'
            );
        }
        // verify the required parameter 'grnid' is set
        if ($grnid === null || (is_array($grnid) && count($grnid) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $grnid when calling goodsReceivedNotePATCHRequestGRNIDUpdate'
            );
        }

        $resourcePath = '/GoodsReceivedNotes/{GRNID}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        if ($creditor_id !== null) {
            $queryParams['CreditorID'] = ObjectSerializer::toQueryValue($creditor_id);
        }
        // query params
        if ($creditor_account_no !== null) {
            $queryParams['CreditorAccountNo'] = ObjectSerializer::toQueryValue($creditor_account_no);
        }
        // query params
        if ($creditor_name !== null) {
            $queryParams['CreditorName'] = ObjectSerializer::toQueryValue($creditor_name);
        }
        // query params
        if ($last_saved_date_time !== null) {
            $queryParams['LastSavedDateTime'] = ObjectSerializer::toQueryValue($last_saved_date_time);
        }
        // query params
        if ($slip_no !== null) {
            $queryParams['SlipNo'] = ObjectSerializer::toQueryValue($slip_no);
        }
        // query params
        if ($slip_date !== null) {
            $queryParams['SlipDate'] = ObjectSerializer::toQueryValue($slip_date);
        }
        // query params
        if ($status !== null) {
            $queryParams['Status'] = ObjectSerializer::toQueryValue($status);
        }
        // query params
        if ($freight !== null) {
            $queryParams['Freight'] = ObjectSerializer::toQueryValue($freight);
        }
        // query params
        if ($duty !== null) {
            $queryParams['Duty'] = ObjectSerializer::toQueryValue($duty);
        }
        // query params
        if ($invoiced !== null) {
            $queryParams['Invoiced'] = ObjectSerializer::toQueryValue($invoiced);
        }
        // query params
        if ($pi_main_id !== null) {
            $queryParams['PI_MainID'] = ObjectSerializer::toQueryValue($pi_main_id);
        }
        // query params
        if ($insurance !== null) {
            $queryParams['Insurance'] = ObjectSerializer::toQueryValue($insurance);
        }
        // query params
        if ($logical_warehouse_id !== null) {
            $queryParams['LogicalWarehouseID'] = ObjectSerializer::toQueryValue($logical_warehouse_id);
        }
        // query params
        if ($logical_warehouse_description !== null) {
            $queryParams['LogicalWarehouseDescription'] = ObjectSerializer::toQueryValue($logical_warehouse_description);
        }
        // query params
        if ($physical_warehouse_id !== null) {
            $queryParams['PhysicalWarehouseID'] = ObjectSerializer::toQueryValue($physical_warehouse_id);
        }
        // query params
        if ($physical_warehouse_description !== null) {
            $queryParams['PhysicalWarehouseDescription'] = ObjectSerializer::toQueryValue($physical_warehouse_description);
        }
        // query params
        if ($tax_total !== null) {
            $queryParams['TaxTotal'] = ObjectSerializer::toQueryValue($tax_total);
        }
        // query params
        if ($freight_tax_id !== null) {
            $queryParams['FreightTaxID'] = ObjectSerializer::toQueryValue($freight_tax_id);
        }
        // query params
        if ($freight_tax_rate !== null) {
            $queryParams['FreightTaxRate'] = ObjectSerializer::toQueryValue($freight_tax_rate);
        }
        // query params
        if ($freight_tax_amount !== null) {
            $queryParams['FreightTaxAmount'] = ObjectSerializer::toQueryValue($freight_tax_amount);
        }
        // query params
        if ($duty_tax_id !== null) {
            $queryParams['DutyTaxID'] = ObjectSerializer::toQueryValue($duty_tax_id);
        }
        // query params
        if ($duty_tax_rate !== null) {
            $queryParams['DutyTaxRate'] = ObjectSerializer::toQueryValue($duty_tax_rate);
        }
        // query params
        if ($duty_tax_amount !== null) {
            $queryParams['DutyTaxAmount'] = ObjectSerializer::toQueryValue($duty_tax_amount);
        }
        // query params
        if ($insurance_tax_id !== null) {
            $queryParams['InsuranceTaxID'] = ObjectSerializer::toQueryValue($insurance_tax_id);
        }
        // query params
        if ($insurance_tax_rate !== null) {
            $queryParams['InsuranceTaxRate'] = ObjectSerializer::toQueryValue($insurance_tax_rate);
        }
        // query params
        if ($insurance_tax_amount !== null) {
            $queryParams['InsuranceTaxAmount'] = ObjectSerializer::toQueryValue($insurance_tax_amount);
        }
        // query params
        if ($reference !== null) {
            $queryParams['Reference'] = ObjectSerializer::toQueryValue($reference);
        }
        // query params
        if ($total_gross !== null) {
            $queryParams['TotalGross'] = ObjectSerializer::toQueryValue($total_gross);
        }
        // query params
        if ($total_net !== null) {
            $queryParams['TotalNet'] = ObjectSerializer::toQueryValue($total_net);
        }
        // query params
        if ($total_fx !== null) {
            $queryParams['TotalFx'] = ObjectSerializer::toQueryValue($total_fx);
        }
        // query params
        if ($freight_inc !== null) {
            $queryParams['FreightInc'] = ObjectSerializer::toQueryValue($freight_inc);
        }
        // query params
        if ($duty_inc !== null) {
            $queryParams['DutyInc'] = ObjectSerializer::toQueryValue($duty_inc);
        }
        // query params
        if ($insurance_inc !== null) {
            $queryParams['InsuranceInc'] = ObjectSerializer::toQueryValue($insurance_inc);
        }
        // query params
        if ($inventory_total_quantity !== null) {
            $queryParams['InventoryTotalQuantity'] = ObjectSerializer::toQueryValue($inventory_total_quantity);
        }
        // query params
        if ($inventory_total_quantity_decimal_places !== null) {
            $queryParams['InventoryTotalQuantityDecimalPlaces'] = ObjectSerializer::toQueryValue($inventory_total_quantity_decimal_places);
        }
        // query params
        if ($lines !== null) {
            $queryParams['Lines'] = ObjectSerializer::toQueryValue($lines);
        }
        // query params
        if ($purchase_orders !== null) {
            $queryParams['PurchaseOrders'] = ObjectSerializer::toQueryValue($purchase_orders);
        }
        // query params
        if ($custom_field_values !== null) {
            $queryParams['CustomFieldValues'] = ObjectSerializer::toQueryValue($custom_field_values);
        }
        // header params
        if ($accept !== null) {
            $headerParams['Accept'] = ObjectSerializer::toHeaderValue($accept);
        }
        // header params
        if ($jiwa_stateful !== null) {
            $headerParams['jiwa-stateful'] = ObjectSerializer::toHeaderValue($jiwa_stateful);
        }

        // path params
        if ($grnid !== null) {
            $resourcePath = str_replace(
                '{' . 'GRNID' . '}',
                ObjectSerializer::toPathValue($grnid),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;
        if (isset($body)) {
            $_tempBody = $body;
        }

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json', 'application/xml']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json', 'application/xml'],
                ['application/x-www-form-urlencoded', 'application/json', 'application/xml']
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            
            if($headers['Content-Type'] === 'application/json') {
                // \stdClass has no __toString(), so we should encode it manually
                if ($httpBody instanceof \stdClass) {
                    $httpBody = \GuzzleHttp\json_encode($httpBody);
                }
                // array has no __toString(), so we should encode it manually
                if(is_array($httpBody)) {
                    $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($httpBody));
                }
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\Query::build($formParams);
            }
        }

        // this endpoint requires HTTP basic authentication
        if ($this->config->getUsername() !== null || $this->config->getPassword() !== null) {
            $headers['Authorization'] = 'Basic ' . base64_encode($this->config->getUsername() . ":" . $this->config->getPassword());
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\Query::build($queryParams);
        return new Request(
            'PATCH',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation goodsReceivedNotePOSTRequestPost
     *
     * Creates a GRN.
     *
     * @param  string $accept Accept Header (required)
     * @param  bool $jiwa_stateful Stateful indicator (optional)
     * @param  string $creditor_id creditor_id (optional)
     * @param  string $creditor_account_no creditor_account_no (optional)
     * @param  string $creditor_name creditor_name (optional)
     * @param  string $slip_no slip_no (optional)
     * @param  \DateTime $slip_date slip_date (optional)
     * @param  string $status status (optional)
     * @param  double $freight freight (optional)
     * @param  double $duty duty (optional)
     * @param  bool $invoiced invoiced (optional)
     * @param  string $pi_main_id pi_main_id (optional)
     * @param  double $insurance insurance (optional)
     * @param  string $logical_warehouse_id logical_warehouse_id (optional)
     * @param  string $logical_warehouse_description logical_warehouse_description (optional)
     * @param  string $physical_warehouse_id physical_warehouse_id (optional)
     * @param  string $physical_warehouse_description physical_warehouse_description (optional)
     * @param  double $tax_total tax_total (optional)
     * @param  string $freight_tax_id freight_tax_id (optional)
     * @param  double $freight_tax_rate freight_tax_rate (optional)
     * @param  double $freight_tax_amount freight_tax_amount (optional)
     * @param  string $duty_tax_id duty_tax_id (optional)
     * @param  double $duty_tax_rate duty_tax_rate (optional)
     * @param  double $duty_tax_amount duty_tax_amount (optional)
     * @param  string $insurance_tax_id insurance_tax_id (optional)
     * @param  double $insurance_tax_rate insurance_tax_rate (optional)
     * @param  double $insurance_tax_amount insurance_tax_amount (optional)
     * @param  string $reference reference (optional)
     * @param  double $total_gross total_gross (optional)
     * @param  double $total_net total_net (optional)
     * @param  double $total_fx total_fx (optional)
     * @param  double $freight_inc freight_inc (optional)
     * @param  double $duty_inc duty_inc (optional)
     * @param  double $insurance_inc insurance_inc (optional)
     * @param  double $inventory_total_quantity inventory_total_quantity (optional)
     * @param  double $inventory_total_quantity_decimal_places inventory_total_quantity_decimal_places (optional)
     * @param  string $lines lines (optional)
     * @param  string $purchase_orders purchase_orders (optional)
     * @param  string $custom_field_values custom_field_values (optional)
     * @param  \Jiwa\Model\GoodsReceivedNotePOSTRequest $body body (optional)
     *
     * @throws \Jiwa\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Jiwa\Model\GoodsReceivedNote
     */
    public function goodsReceivedNotePOSTRequestPost($accept, $jiwa_stateful = null, $creditor_id = null, $creditor_account_no = null, $creditor_name = null, $slip_no = null, $slip_date = null, $status = null, $freight = null, $duty = null, $invoiced = null, $pi_main_id = null, $insurance = null, $logical_warehouse_id = null, $logical_warehouse_description = null, $physical_warehouse_id = null, $physical_warehouse_description = null, $tax_total = null, $freight_tax_id = null, $freight_tax_rate = null, $freight_tax_amount = null, $duty_tax_id = null, $duty_tax_rate = null, $duty_tax_amount = null, $insurance_tax_id = null, $insurance_tax_rate = null, $insurance_tax_amount = null, $reference = null, $total_gross = null, $total_net = null, $total_fx = null, $freight_inc = null, $duty_inc = null, $insurance_inc = null, $inventory_total_quantity = null, $inventory_total_quantity_decimal_places = null, $lines = null, $purchase_orders = null, $custom_field_values = null, $body = null)
    {
        list($response) = $this->goodsReceivedNotePOSTRequestPostWithHttpInfo($accept, $jiwa_stateful, $creditor_id, $creditor_account_no, $creditor_name, $slip_no, $slip_date, $status, $freight, $duty, $invoiced, $pi_main_id, $insurance, $logical_warehouse_id, $logical_warehouse_description, $physical_warehouse_id, $physical_warehouse_description, $tax_total, $freight_tax_id, $freight_tax_rate, $freight_tax_amount, $duty_tax_id, $duty_tax_rate, $duty_tax_amount, $insurance_tax_id, $insurance_tax_rate, $insurance_tax_amount, $reference, $total_gross, $total_net, $total_fx, $freight_inc, $duty_inc, $insurance_inc, $inventory_total_quantity, $inventory_total_quantity_decimal_places, $lines, $purchase_orders, $custom_field_values, $body);
        return $response;
    }

    /**
     * Operation goodsReceivedNotePOSTRequestPostWithHttpInfo
     *
     * Creates a GRN.
     *
     * @param  string $accept Accept Header (required)
     * @param  bool $jiwa_stateful Stateful indicator (optional)
     * @param  string $creditor_id (optional)
     * @param  string $creditor_account_no (optional)
     * @param  string $creditor_name (optional)
     * @param  string $slip_no (optional)
     * @param  \DateTime $slip_date (optional)
     * @param  string $status (optional)
     * @param  double $freight (optional)
     * @param  double $duty (optional)
     * @param  bool $invoiced (optional)
     * @param  string $pi_main_id (optional)
     * @param  double $insurance (optional)
     * @param  string $logical_warehouse_id (optional)
     * @param  string $logical_warehouse_description (optional)
     * @param  string $physical_warehouse_id (optional)
     * @param  string $physical_warehouse_description (optional)
     * @param  double $tax_total (optional)
     * @param  string $freight_tax_id (optional)
     * @param  double $freight_tax_rate (optional)
     * @param  double $freight_tax_amount (optional)
     * @param  string $duty_tax_id (optional)
     * @param  double $duty_tax_rate (optional)
     * @param  double $duty_tax_amount (optional)
     * @param  string $insurance_tax_id (optional)
     * @param  double $insurance_tax_rate (optional)
     * @param  double $insurance_tax_amount (optional)
     * @param  string $reference (optional)
     * @param  double $total_gross (optional)
     * @param  double $total_net (optional)
     * @param  double $total_fx (optional)
     * @param  double $freight_inc (optional)
     * @param  double $duty_inc (optional)
     * @param  double $insurance_inc (optional)
     * @param  double $inventory_total_quantity (optional)
     * @param  double $inventory_total_quantity_decimal_places (optional)
     * @param  string $lines (optional)
     * @param  string $purchase_orders (optional)
     * @param  string $custom_field_values (optional)
     * @param  \Jiwa\Model\GoodsReceivedNotePOSTRequest $body (optional)
     *
     * @throws \Jiwa\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Jiwa\Model\GoodsReceivedNote, HTTP status code, HTTP response headers (array of strings)
     */
    public function goodsReceivedNotePOSTRequestPostWithHttpInfo($accept, $jiwa_stateful = null, $creditor_id = null, $creditor_account_no = null, $creditor_name = null, $slip_no = null, $slip_date = null, $status = null, $freight = null, $duty = null, $invoiced = null, $pi_main_id = null, $insurance = null, $logical_warehouse_id = null, $logical_warehouse_description = null, $physical_warehouse_id = null, $physical_warehouse_description = null, $tax_total = null, $freight_tax_id = null, $freight_tax_rate = null, $freight_tax_amount = null, $duty_tax_id = null, $duty_tax_rate = null, $duty_tax_amount = null, $insurance_tax_id = null, $insurance_tax_rate = null, $insurance_tax_amount = null, $reference = null, $total_gross = null, $total_net = null, $total_fx = null, $freight_inc = null, $duty_inc = null, $insurance_inc = null, $inventory_total_quantity = null, $inventory_total_quantity_decimal_places = null, $lines = null, $purchase_orders = null, $custom_field_values = null, $body = null)
    {
        $returnType = '\Jiwa\Model\GoodsReceivedNote';
        $request = $this->goodsReceivedNotePOSTRequestPostRequest($accept, $jiwa_stateful, $creditor_id, $creditor_account_no, $creditor_name, $slip_no, $slip_date, $status, $freight, $duty, $invoiced, $pi_main_id, $insurance, $logical_warehouse_id, $logical_warehouse_description, $physical_warehouse_id, $physical_warehouse_description, $tax_total, $freight_tax_id, $freight_tax_rate, $freight_tax_amount, $duty_tax_id, $duty_tax_rate, $duty_tax_amount, $insurance_tax_id, $insurance_tax_rate, $insurance_tax_amount, $reference, $total_gross, $total_net, $total_fx, $freight_inc, $duty_inc, $insurance_inc, $inventory_total_quantity, $inventory_total_quantity_decimal_places, $lines, $purchase_orders, $custom_field_values, $body);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Jiwa\Model\GoodsReceivedNote',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 403:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Jiwa\Model\GoodsReceivedNote',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 201:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Jiwa\Model\GoodsReceivedNote',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 401:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Jiwa\Model\GoodsReceivedNote',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation goodsReceivedNotePOSTRequestPostAsync
     *
     * Creates a GRN.
     *
     * @param  string $accept Accept Header (required)
     * @param  bool $jiwa_stateful Stateful indicator (optional)
     * @param  string $creditor_id (optional)
     * @param  string $creditor_account_no (optional)
     * @param  string $creditor_name (optional)
     * @param  string $slip_no (optional)
     * @param  \DateTime $slip_date (optional)
     * @param  string $status (optional)
     * @param  double $freight (optional)
     * @param  double $duty (optional)
     * @param  bool $invoiced (optional)
     * @param  string $pi_main_id (optional)
     * @param  double $insurance (optional)
     * @param  string $logical_warehouse_id (optional)
     * @param  string $logical_warehouse_description (optional)
     * @param  string $physical_warehouse_id (optional)
     * @param  string $physical_warehouse_description (optional)
     * @param  double $tax_total (optional)
     * @param  string $freight_tax_id (optional)
     * @param  double $freight_tax_rate (optional)
     * @param  double $freight_tax_amount (optional)
     * @param  string $duty_tax_id (optional)
     * @param  double $duty_tax_rate (optional)
     * @param  double $duty_tax_amount (optional)
     * @param  string $insurance_tax_id (optional)
     * @param  double $insurance_tax_rate (optional)
     * @param  double $insurance_tax_amount (optional)
     * @param  string $reference (optional)
     * @param  double $total_gross (optional)
     * @param  double $total_net (optional)
     * @param  double $total_fx (optional)
     * @param  double $freight_inc (optional)
     * @param  double $duty_inc (optional)
     * @param  double $insurance_inc (optional)
     * @param  double $inventory_total_quantity (optional)
     * @param  double $inventory_total_quantity_decimal_places (optional)
     * @param  string $lines (optional)
     * @param  string $purchase_orders (optional)
     * @param  string $custom_field_values (optional)
     * @param  \Jiwa\Model\GoodsReceivedNotePOSTRequest $body (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function goodsReceivedNotePOSTRequestPostAsync($accept, $jiwa_stateful = null, $creditor_id = null, $creditor_account_no = null, $creditor_name = null, $slip_no = null, $slip_date = null, $status = null, $freight = null, $duty = null, $invoiced = null, $pi_main_id = null, $insurance = null, $logical_warehouse_id = null, $logical_warehouse_description = null, $physical_warehouse_id = null, $physical_warehouse_description = null, $tax_total = null, $freight_tax_id = null, $freight_tax_rate = null, $freight_tax_amount = null, $duty_tax_id = null, $duty_tax_rate = null, $duty_tax_amount = null, $insurance_tax_id = null, $insurance_tax_rate = null, $insurance_tax_amount = null, $reference = null, $total_gross = null, $total_net = null, $total_fx = null, $freight_inc = null, $duty_inc = null, $insurance_inc = null, $inventory_total_quantity = null, $inventory_total_quantity_decimal_places = null, $lines = null, $purchase_orders = null, $custom_field_values = null, $body = null)
    {
        return $this->goodsReceivedNotePOSTRequestPostAsyncWithHttpInfo($accept, $jiwa_stateful, $creditor_id, $creditor_account_no, $creditor_name, $slip_no, $slip_date, $status, $freight, $duty, $invoiced, $pi_main_id, $insurance, $logical_warehouse_id, $logical_warehouse_description, $physical_warehouse_id, $physical_warehouse_description, $tax_total, $freight_tax_id, $freight_tax_rate, $freight_tax_amount, $duty_tax_id, $duty_tax_rate, $duty_tax_amount, $insurance_tax_id, $insurance_tax_rate, $insurance_tax_amount, $reference, $total_gross, $total_net, $total_fx, $freight_inc, $duty_inc, $insurance_inc, $inventory_total_quantity, $inventory_total_quantity_decimal_places, $lines, $purchase_orders, $custom_field_values, $body)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation goodsReceivedNotePOSTRequestPostAsyncWithHttpInfo
     *
     * Creates a GRN.
     *
     * @param  string $accept Accept Header (required)
     * @param  bool $jiwa_stateful Stateful indicator (optional)
     * @param  string $creditor_id (optional)
     * @param  string $creditor_account_no (optional)
     * @param  string $creditor_name (optional)
     * @param  string $slip_no (optional)
     * @param  \DateTime $slip_date (optional)
     * @param  string $status (optional)
     * @param  double $freight (optional)
     * @param  double $duty (optional)
     * @param  bool $invoiced (optional)
     * @param  string $pi_main_id (optional)
     * @param  double $insurance (optional)
     * @param  string $logical_warehouse_id (optional)
     * @param  string $logical_warehouse_description (optional)
     * @param  string $physical_warehouse_id (optional)
     * @param  string $physical_warehouse_description (optional)
     * @param  double $tax_total (optional)
     * @param  string $freight_tax_id (optional)
     * @param  double $freight_tax_rate (optional)
     * @param  double $freight_tax_amount (optional)
     * @param  string $duty_tax_id (optional)
     * @param  double $duty_tax_rate (optional)
     * @param  double $duty_tax_amount (optional)
     * @param  string $insurance_tax_id (optional)
     * @param  double $insurance_tax_rate (optional)
     * @param  double $insurance_tax_amount (optional)
     * @param  string $reference (optional)
     * @param  double $total_gross (optional)
     * @param  double $total_net (optional)
     * @param  double $total_fx (optional)
     * @param  double $freight_inc (optional)
     * @param  double $duty_inc (optional)
     * @param  double $insurance_inc (optional)
     * @param  double $inventory_total_quantity (optional)
     * @param  double $inventory_total_quantity_decimal_places (optional)
     * @param  string $lines (optional)
     * @param  string $purchase_orders (optional)
     * @param  string $custom_field_values (optional)
     * @param  \Jiwa\Model\GoodsReceivedNotePOSTRequest $body (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function goodsReceivedNotePOSTRequestPostAsyncWithHttpInfo($accept, $jiwa_stateful = null, $creditor_id = null, $creditor_account_no = null, $creditor_name = null, $slip_no = null, $slip_date = null, $status = null, $freight = null, $duty = null, $invoiced = null, $pi_main_id = null, $insurance = null, $logical_warehouse_id = null, $logical_warehouse_description = null, $physical_warehouse_id = null, $physical_warehouse_description = null, $tax_total = null, $freight_tax_id = null, $freight_tax_rate = null, $freight_tax_amount = null, $duty_tax_id = null, $duty_tax_rate = null, $duty_tax_amount = null, $insurance_tax_id = null, $insurance_tax_rate = null, $insurance_tax_amount = null, $reference = null, $total_gross = null, $total_net = null, $total_fx = null, $freight_inc = null, $duty_inc = null, $insurance_inc = null, $inventory_total_quantity = null, $inventory_total_quantity_decimal_places = null, $lines = null, $purchase_orders = null, $custom_field_values = null, $body = null)
    {
        $returnType = '\Jiwa\Model\GoodsReceivedNote';
        $request = $this->goodsReceivedNotePOSTRequestPostRequest($accept, $jiwa_stateful, $creditor_id, $creditor_account_no, $creditor_name, $slip_no, $slip_date, $status, $freight, $duty, $invoiced, $pi_main_id, $insurance, $logical_warehouse_id, $logical_warehouse_description, $physical_warehouse_id, $physical_warehouse_description, $tax_total, $freight_tax_id, $freight_tax_rate, $freight_tax_amount, $duty_tax_id, $duty_tax_rate, $duty_tax_amount, $insurance_tax_id, $insurance_tax_rate, $insurance_tax_amount, $reference, $total_gross, $total_net, $total_fx, $freight_inc, $duty_inc, $insurance_inc, $inventory_total_quantity, $inventory_total_quantity_decimal_places, $lines, $purchase_orders, $custom_field_values, $body);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'goodsReceivedNotePOSTRequestPost'
     *
     * @param  string $accept Accept Header (required)
     * @param  bool $jiwa_stateful Stateful indicator (optional)
     * @param  string $creditor_id (optional)
     * @param  string $creditor_account_no (optional)
     * @param  string $creditor_name (optional)
     * @param  string $slip_no (optional)
     * @param  \DateTime $slip_date (optional)
     * @param  string $status (optional)
     * @param  double $freight (optional)
     * @param  double $duty (optional)
     * @param  bool $invoiced (optional)
     * @param  string $pi_main_id (optional)
     * @param  double $insurance (optional)
     * @param  string $logical_warehouse_id (optional)
     * @param  string $logical_warehouse_description (optional)
     * @param  string $physical_warehouse_id (optional)
     * @param  string $physical_warehouse_description (optional)
     * @param  double $tax_total (optional)
     * @param  string $freight_tax_id (optional)
     * @param  double $freight_tax_rate (optional)
     * @param  double $freight_tax_amount (optional)
     * @param  string $duty_tax_id (optional)
     * @param  double $duty_tax_rate (optional)
     * @param  double $duty_tax_amount (optional)
     * @param  string $insurance_tax_id (optional)
     * @param  double $insurance_tax_rate (optional)
     * @param  double $insurance_tax_amount (optional)
     * @param  string $reference (optional)
     * @param  double $total_gross (optional)
     * @param  double $total_net (optional)
     * @param  double $total_fx (optional)
     * @param  double $freight_inc (optional)
     * @param  double $duty_inc (optional)
     * @param  double $insurance_inc (optional)
     * @param  double $inventory_total_quantity (optional)
     * @param  double $inventory_total_quantity_decimal_places (optional)
     * @param  string $lines (optional)
     * @param  string $purchase_orders (optional)
     * @param  string $custom_field_values (optional)
     * @param  \Jiwa\Model\GoodsReceivedNotePOSTRequest $body (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function goodsReceivedNotePOSTRequestPostRequest($accept, $jiwa_stateful = null, $creditor_id = null, $creditor_account_no = null, $creditor_name = null, $slip_no = null, $slip_date = null, $status = null, $freight = null, $duty = null, $invoiced = null, $pi_main_id = null, $insurance = null, $logical_warehouse_id = null, $logical_warehouse_description = null, $physical_warehouse_id = null, $physical_warehouse_description = null, $tax_total = null, $freight_tax_id = null, $freight_tax_rate = null, $freight_tax_amount = null, $duty_tax_id = null, $duty_tax_rate = null, $duty_tax_amount = null, $insurance_tax_id = null, $insurance_tax_rate = null, $insurance_tax_amount = null, $reference = null, $total_gross = null, $total_net = null, $total_fx = null, $freight_inc = null, $duty_inc = null, $insurance_inc = null, $inventory_total_quantity = null, $inventory_total_quantity_decimal_places = null, $lines = null, $purchase_orders = null, $custom_field_values = null, $body = null)
    {
        // verify the required parameter 'accept' is set
        if ($accept === null || (is_array($accept) && count($accept) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $accept when calling goodsReceivedNotePOSTRequestPost'
            );
        }

        $resourcePath = '/GoodsReceivedNotes';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        if ($creditor_id !== null) {
            $queryParams['CreditorID'] = ObjectSerializer::toQueryValue($creditor_id);
        }
        // query params
        if ($creditor_account_no !== null) {
            $queryParams['CreditorAccountNo'] = ObjectSerializer::toQueryValue($creditor_account_no);
        }
        // query params
        if ($creditor_name !== null) {
            $queryParams['CreditorName'] = ObjectSerializer::toQueryValue($creditor_name);
        }
        // query params
        if ($slip_no !== null) {
            $queryParams['SlipNo'] = ObjectSerializer::toQueryValue($slip_no);
        }
        // query params
        if ($slip_date !== null) {
            $queryParams['SlipDate'] = ObjectSerializer::toQueryValue($slip_date);
        }
        // query params
        if ($status !== null) {
            $queryParams['Status'] = ObjectSerializer::toQueryValue($status);
        }
        // query params
        if ($freight !== null) {
            $queryParams['Freight'] = ObjectSerializer::toQueryValue($freight);
        }
        // query params
        if ($duty !== null) {
            $queryParams['Duty'] = ObjectSerializer::toQueryValue($duty);
        }
        // query params
        if ($invoiced !== null) {
            $queryParams['Invoiced'] = ObjectSerializer::toQueryValue($invoiced);
        }
        // query params
        if ($pi_main_id !== null) {
            $queryParams['PI_MainID'] = ObjectSerializer::toQueryValue($pi_main_id);
        }
        // query params
        if ($insurance !== null) {
            $queryParams['Insurance'] = ObjectSerializer::toQueryValue($insurance);
        }
        // query params
        if ($logical_warehouse_id !== null) {
            $queryParams['LogicalWarehouseID'] = ObjectSerializer::toQueryValue($logical_warehouse_id);
        }
        // query params
        if ($logical_warehouse_description !== null) {
            $queryParams['LogicalWarehouseDescription'] = ObjectSerializer::toQueryValue($logical_warehouse_description);
        }
        // query params
        if ($physical_warehouse_id !== null) {
            $queryParams['PhysicalWarehouseID'] = ObjectSerializer::toQueryValue($physical_warehouse_id);
        }
        // query params
        if ($physical_warehouse_description !== null) {
            $queryParams['PhysicalWarehouseDescription'] = ObjectSerializer::toQueryValue($physical_warehouse_description);
        }
        // query params
        if ($tax_total !== null) {
            $queryParams['TaxTotal'] = ObjectSerializer::toQueryValue($tax_total);
        }
        // query params
        if ($freight_tax_id !== null) {
            $queryParams['FreightTaxID'] = ObjectSerializer::toQueryValue($freight_tax_id);
        }
        // query params
        if ($freight_tax_rate !== null) {
            $queryParams['FreightTaxRate'] = ObjectSerializer::toQueryValue($freight_tax_rate);
        }
        // query params
        if ($freight_tax_amount !== null) {
            $queryParams['FreightTaxAmount'] = ObjectSerializer::toQueryValue($freight_tax_amount);
        }
        // query params
        if ($duty_tax_id !== null) {
            $queryParams['DutyTaxID'] = ObjectSerializer::toQueryValue($duty_tax_id);
        }
        // query params
        if ($duty_tax_rate !== null) {
            $queryParams['DutyTaxRate'] = ObjectSerializer::toQueryValue($duty_tax_rate);
        }
        // query params
        if ($duty_tax_amount !== null) {
            $queryParams['DutyTaxAmount'] = ObjectSerializer::toQueryValue($duty_tax_amount);
        }
        // query params
        if ($insurance_tax_id !== null) {
            $queryParams['InsuranceTaxID'] = ObjectSerializer::toQueryValue($insurance_tax_id);
        }
        // query params
        if ($insurance_tax_rate !== null) {
            $queryParams['InsuranceTaxRate'] = ObjectSerializer::toQueryValue($insurance_tax_rate);
        }
        // query params
        if ($insurance_tax_amount !== null) {
            $queryParams['InsuranceTaxAmount'] = ObjectSerializer::toQueryValue($insurance_tax_amount);
        }
        // query params
        if ($reference !== null) {
            $queryParams['Reference'] = ObjectSerializer::toQueryValue($reference);
        }
        // query params
        if ($total_gross !== null) {
            $queryParams['TotalGross'] = ObjectSerializer::toQueryValue($total_gross);
        }
        // query params
        if ($total_net !== null) {
            $queryParams['TotalNet'] = ObjectSerializer::toQueryValue($total_net);
        }
        // query params
        if ($total_fx !== null) {
            $queryParams['TotalFx'] = ObjectSerializer::toQueryValue($total_fx);
        }
        // query params
        if ($freight_inc !== null) {
            $queryParams['FreightInc'] = ObjectSerializer::toQueryValue($freight_inc);
        }
        // query params
        if ($duty_inc !== null) {
            $queryParams['DutyInc'] = ObjectSerializer::toQueryValue($duty_inc);
        }
        // query params
        if ($insurance_inc !== null) {
            $queryParams['InsuranceInc'] = ObjectSerializer::toQueryValue($insurance_inc);
        }
        // query params
        if ($inventory_total_quantity !== null) {
            $queryParams['InventoryTotalQuantity'] = ObjectSerializer::toQueryValue($inventory_total_quantity);
        }
        // query params
        if ($inventory_total_quantity_decimal_places !== null) {
            $queryParams['InventoryTotalQuantityDecimalPlaces'] = ObjectSerializer::toQueryValue($inventory_total_quantity_decimal_places);
        }
        // query params
        if ($lines !== null) {
            $queryParams['Lines'] = ObjectSerializer::toQueryValue($lines);
        }
        // query params
        if ($purchase_orders !== null) {
            $queryParams['PurchaseOrders'] = ObjectSerializer::toQueryValue($purchase_orders);
        }
        // query params
        if ($custom_field_values !== null) {
            $queryParams['CustomFieldValues'] = ObjectSerializer::toQueryValue($custom_field_values);
        }
        // header params
        if ($accept !== null) {
            $headerParams['Accept'] = ObjectSerializer::toHeaderValue($accept);
        }
        // header params
        if ($jiwa_stateful !== null) {
            $headerParams['jiwa-stateful'] = ObjectSerializer::toHeaderValue($jiwa_stateful);
        }


        // body params
        $_tempBody = null;
        if (isset($body)) {
            $_tempBody = $body;
        }

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json', 'application/xml']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json', 'application/xml'],
                ['application/x-www-form-urlencoded', 'application/json', 'application/xml']
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            
            if($headers['Content-Type'] === 'application/json') {
                // \stdClass has no __toString(), so we should encode it manually
                if ($httpBody instanceof \stdClass) {
                    $httpBody = \GuzzleHttp\json_encode($httpBody);
                }
                // array has no __toString(), so we should encode it manually
                if(is_array($httpBody)) {
                    $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($httpBody));
                }
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\Query::build($formParams);
            }
        }

        // this endpoint requires HTTP basic authentication
        if ($this->config->getUsername() !== null || $this->config->getPassword() !== null) {
            $headers['Authorization'] = 'Basic ' . base64_encode($this->config->getUsername() . ":" . $this->config->getPassword());
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\Query::build($queryParams);
        return new Request(
            'POST',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation goodsReceivedNotePurchaseOrderDELETERequestGRNIDPurchaseOrdersOrderIDDelete
     *
     * Deletes a purchase order from a goods received note.
     *
     * @param  string $accept Accept Header (required)
     * @param  string $grnid grnid (required)
     * @param  string $order_id order_id (required)
     * @param  bool $jiwa_stateful Stateful indicator (optional)
     * @param  string $purchase_order_received_id purchase_order_received_id (optional)
     * @param  string $order_no order_no (optional)
     * @param  string $order_type order_type (optional)
     * @param  \DateTime $ordered_date ordered_date (optional)
     * @param  string $freight_tax_id freight_tax_id (optional)
     * @param  double $freight freight (optional)
     * @param  double $freight_tax_amount freight_tax_amount (optional)
     * @param  string $duty_tax_id duty_tax_id (optional)
     * @param  double $duty duty (optional)
     * @param  double $duty_tax_amount duty_tax_amount (optional)
     * @param  string $insurance_tax_id insurance_tax_id (optional)
     * @param  double $insurance insurance (optional)
     * @param  double $insurance_tax_amount insurance_tax_amount (optional)
     *
     * @throws \Jiwa\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Jiwa\Model\Object
     */
    public function goodsReceivedNotePurchaseOrderDELETERequestGRNIDPurchaseOrdersOrderIDDelete($accept, $grnid, $order_id, $jiwa_stateful = null, $purchase_order_received_id = null, $order_no = null, $order_type = null, $ordered_date = null, $freight_tax_id = null, $freight = null, $freight_tax_amount = null, $duty_tax_id = null, $duty = null, $duty_tax_amount = null, $insurance_tax_id = null, $insurance = null, $insurance_tax_amount = null)
    {
        list($response) = $this->goodsReceivedNotePurchaseOrderDELETERequestGRNIDPurchaseOrdersOrderIDDeleteWithHttpInfo($accept, $grnid, $order_id, $jiwa_stateful, $purchase_order_received_id, $order_no, $order_type, $ordered_date, $freight_tax_id, $freight, $freight_tax_amount, $duty_tax_id, $duty, $duty_tax_amount, $insurance_tax_id, $insurance, $insurance_tax_amount);
        return $response;
    }

    /**
     * Operation goodsReceivedNotePurchaseOrderDELETERequestGRNIDPurchaseOrdersOrderIDDeleteWithHttpInfo
     *
     * Deletes a purchase order from a goods received note.
     *
     * @param  string $accept Accept Header (required)
     * @param  string $grnid (required)
     * @param  string $order_id (required)
     * @param  bool $jiwa_stateful Stateful indicator (optional)
     * @param  string $purchase_order_received_id (optional)
     * @param  string $order_no (optional)
     * @param  string $order_type (optional)
     * @param  \DateTime $ordered_date (optional)
     * @param  string $freight_tax_id (optional)
     * @param  double $freight (optional)
     * @param  double $freight_tax_amount (optional)
     * @param  string $duty_tax_id (optional)
     * @param  double $duty (optional)
     * @param  double $duty_tax_amount (optional)
     * @param  string $insurance_tax_id (optional)
     * @param  double $insurance (optional)
     * @param  double $insurance_tax_amount (optional)
     *
     * @throws \Jiwa\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Jiwa\Model\Object, HTTP status code, HTTP response headers (array of strings)
     */
    public function goodsReceivedNotePurchaseOrderDELETERequestGRNIDPurchaseOrdersOrderIDDeleteWithHttpInfo($accept, $grnid, $order_id, $jiwa_stateful = null, $purchase_order_received_id = null, $order_no = null, $order_type = null, $ordered_date = null, $freight_tax_id = null, $freight = null, $freight_tax_amount = null, $duty_tax_id = null, $duty = null, $duty_tax_amount = null, $insurance_tax_id = null, $insurance = null, $insurance_tax_amount = null)
    {
        $returnType = '\Jiwa\Model\Object';
        $request = $this->goodsReceivedNotePurchaseOrderDELETERequestGRNIDPurchaseOrdersOrderIDDeleteRequest($accept, $grnid, $order_id, $jiwa_stateful, $purchase_order_received_id, $order_no, $order_type, $ordered_date, $freight_tax_id, $freight, $freight_tax_amount, $duty_tax_id, $duty, $duty_tax_amount, $insurance_tax_id, $insurance, $insurance_tax_amount);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Jiwa\Model\Object',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 403:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Jiwa\Model\Object',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 404:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Jiwa\Model\Object',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 204:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Jiwa\Model\Object',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 401:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Jiwa\Model\Object',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation goodsReceivedNotePurchaseOrderDELETERequestGRNIDPurchaseOrdersOrderIDDeleteAsync
     *
     * Deletes a purchase order from a goods received note.
     *
     * @param  string $accept Accept Header (required)
     * @param  string $grnid (required)
     * @param  string $order_id (required)
     * @param  bool $jiwa_stateful Stateful indicator (optional)
     * @param  string $purchase_order_received_id (optional)
     * @param  string $order_no (optional)
     * @param  string $order_type (optional)
     * @param  \DateTime $ordered_date (optional)
     * @param  string $freight_tax_id (optional)
     * @param  double $freight (optional)
     * @param  double $freight_tax_amount (optional)
     * @param  string $duty_tax_id (optional)
     * @param  double $duty (optional)
     * @param  double $duty_tax_amount (optional)
     * @param  string $insurance_tax_id (optional)
     * @param  double $insurance (optional)
     * @param  double $insurance_tax_amount (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function goodsReceivedNotePurchaseOrderDELETERequestGRNIDPurchaseOrdersOrderIDDeleteAsync($accept, $grnid, $order_id, $jiwa_stateful = null, $purchase_order_received_id = null, $order_no = null, $order_type = null, $ordered_date = null, $freight_tax_id = null, $freight = null, $freight_tax_amount = null, $duty_tax_id = null, $duty = null, $duty_tax_amount = null, $insurance_tax_id = null, $insurance = null, $insurance_tax_amount = null)
    {
        return $this->goodsReceivedNotePurchaseOrderDELETERequestGRNIDPurchaseOrdersOrderIDDeleteAsyncWithHttpInfo($accept, $grnid, $order_id, $jiwa_stateful, $purchase_order_received_id, $order_no, $order_type, $ordered_date, $freight_tax_id, $freight, $freight_tax_amount, $duty_tax_id, $duty, $duty_tax_amount, $insurance_tax_id, $insurance, $insurance_tax_amount)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation goodsReceivedNotePurchaseOrderDELETERequestGRNIDPurchaseOrdersOrderIDDeleteAsyncWithHttpInfo
     *
     * Deletes a purchase order from a goods received note.
     *
     * @param  string $accept Accept Header (required)
     * @param  string $grnid (required)
     * @param  string $order_id (required)
     * @param  bool $jiwa_stateful Stateful indicator (optional)
     * @param  string $purchase_order_received_id (optional)
     * @param  string $order_no (optional)
     * @param  string $order_type (optional)
     * @param  \DateTime $ordered_date (optional)
     * @param  string $freight_tax_id (optional)
     * @param  double $freight (optional)
     * @param  double $freight_tax_amount (optional)
     * @param  string $duty_tax_id (optional)
     * @param  double $duty (optional)
     * @param  double $duty_tax_amount (optional)
     * @param  string $insurance_tax_id (optional)
     * @param  double $insurance (optional)
     * @param  double $insurance_tax_amount (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function goodsReceivedNotePurchaseOrderDELETERequestGRNIDPurchaseOrdersOrderIDDeleteAsyncWithHttpInfo($accept, $grnid, $order_id, $jiwa_stateful = null, $purchase_order_received_id = null, $order_no = null, $order_type = null, $ordered_date = null, $freight_tax_id = null, $freight = null, $freight_tax_amount = null, $duty_tax_id = null, $duty = null, $duty_tax_amount = null, $insurance_tax_id = null, $insurance = null, $insurance_tax_amount = null)
    {
        $returnType = '\Jiwa\Model\Object';
        $request = $this->goodsReceivedNotePurchaseOrderDELETERequestGRNIDPurchaseOrdersOrderIDDeleteRequest($accept, $grnid, $order_id, $jiwa_stateful, $purchase_order_received_id, $order_no, $order_type, $ordered_date, $freight_tax_id, $freight, $freight_tax_amount, $duty_tax_id, $duty, $duty_tax_amount, $insurance_tax_id, $insurance, $insurance_tax_amount);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'goodsReceivedNotePurchaseOrderDELETERequestGRNIDPurchaseOrdersOrderIDDelete'
     *
     * @param  string $accept Accept Header (required)
     * @param  string $grnid (required)
     * @param  string $order_id (required)
     * @param  bool $jiwa_stateful Stateful indicator (optional)
     * @param  string $purchase_order_received_id (optional)
     * @param  string $order_no (optional)
     * @param  string $order_type (optional)
     * @param  \DateTime $ordered_date (optional)
     * @param  string $freight_tax_id (optional)
     * @param  double $freight (optional)
     * @param  double $freight_tax_amount (optional)
     * @param  string $duty_tax_id (optional)
     * @param  double $duty (optional)
     * @param  double $duty_tax_amount (optional)
     * @param  string $insurance_tax_id (optional)
     * @param  double $insurance (optional)
     * @param  double $insurance_tax_amount (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function goodsReceivedNotePurchaseOrderDELETERequestGRNIDPurchaseOrdersOrderIDDeleteRequest($accept, $grnid, $order_id, $jiwa_stateful = null, $purchase_order_received_id = null, $order_no = null, $order_type = null, $ordered_date = null, $freight_tax_id = null, $freight = null, $freight_tax_amount = null, $duty_tax_id = null, $duty = null, $duty_tax_amount = null, $insurance_tax_id = null, $insurance = null, $insurance_tax_amount = null)
    {
        // verify the required parameter 'accept' is set
        if ($accept === null || (is_array($accept) && count($accept) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $accept when calling goodsReceivedNotePurchaseOrderDELETERequestGRNIDPurchaseOrdersOrderIDDelete'
            );
        }
        // verify the required parameter 'grnid' is set
        if ($grnid === null || (is_array($grnid) && count($grnid) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $grnid when calling goodsReceivedNotePurchaseOrderDELETERequestGRNIDPurchaseOrdersOrderIDDelete'
            );
        }
        // verify the required parameter 'order_id' is set
        if ($order_id === null || (is_array($order_id) && count($order_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $order_id when calling goodsReceivedNotePurchaseOrderDELETERequestGRNIDPurchaseOrdersOrderIDDelete'
            );
        }

        $resourcePath = '/GoodsReceivedNotes/{GRNID}/PurchaseOrders/{OrderID}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        if ($purchase_order_received_id !== null) {
            $queryParams['PurchaseOrderReceivedID'] = ObjectSerializer::toQueryValue($purchase_order_received_id);
        }
        // query params
        if ($order_no !== null) {
            $queryParams['OrderNo'] = ObjectSerializer::toQueryValue($order_no);
        }
        // query params
        if ($order_type !== null) {
            $queryParams['OrderType'] = ObjectSerializer::toQueryValue($order_type);
        }
        // query params
        if ($ordered_date !== null) {
            $queryParams['OrderedDate'] = ObjectSerializer::toQueryValue($ordered_date);
        }
        // query params
        if ($freight_tax_id !== null) {
            $queryParams['FreightTaxID'] = ObjectSerializer::toQueryValue($freight_tax_id);
        }
        // query params
        if ($freight !== null) {
            $queryParams['Freight'] = ObjectSerializer::toQueryValue($freight);
        }
        // query params
        if ($freight_tax_amount !== null) {
            $queryParams['FreightTaxAmount'] = ObjectSerializer::toQueryValue($freight_tax_amount);
        }
        // query params
        if ($duty_tax_id !== null) {
            $queryParams['DutyTaxID'] = ObjectSerializer::toQueryValue($duty_tax_id);
        }
        // query params
        if ($duty !== null) {
            $queryParams['Duty'] = ObjectSerializer::toQueryValue($duty);
        }
        // query params
        if ($duty_tax_amount !== null) {
            $queryParams['DutyTaxAmount'] = ObjectSerializer::toQueryValue($duty_tax_amount);
        }
        // query params
        if ($insurance_tax_id !== null) {
            $queryParams['InsuranceTaxID'] = ObjectSerializer::toQueryValue($insurance_tax_id);
        }
        // query params
        if ($insurance !== null) {
            $queryParams['Insurance'] = ObjectSerializer::toQueryValue($insurance);
        }
        // query params
        if ($insurance_tax_amount !== null) {
            $queryParams['InsuranceTaxAmount'] = ObjectSerializer::toQueryValue($insurance_tax_amount);
        }
        // header params
        if ($accept !== null) {
            $headerParams['Accept'] = ObjectSerializer::toHeaderValue($accept);
        }
        // header params
        if ($jiwa_stateful !== null) {
            $headerParams['jiwa-stateful'] = ObjectSerializer::toHeaderValue($jiwa_stateful);
        }

        // path params
        if ($grnid !== null) {
            $resourcePath = str_replace(
                '{' . 'GRNID' . '}',
                ObjectSerializer::toPathValue($grnid),
                $resourcePath
            );
        }
        // path params
        if ($order_id !== null) {
            $resourcePath = str_replace(
                '{' . 'OrderID' . '}',
                ObjectSerializer::toPathValue($order_id),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json', 'application/xml']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json', 'application/xml'],
                ['application/x-www-form-urlencoded', 'application/json', 'application/xml']
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            
            if($headers['Content-Type'] === 'application/json') {
                // \stdClass has no __toString(), so we should encode it manually
                if ($httpBody instanceof \stdClass) {
                    $httpBody = \GuzzleHttp\json_encode($httpBody);
                }
                // array has no __toString(), so we should encode it manually
                if(is_array($httpBody)) {
                    $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($httpBody));
                }
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\Query::build($formParams);
            }
        }

        // this endpoint requires HTTP basic authentication
        if ($this->config->getUsername() !== null || $this->config->getPassword() !== null) {
            $headers['Authorization'] = 'Basic ' . base64_encode($this->config->getUsername() . ":" . $this->config->getPassword());
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\Query::build($queryParams);
        return new Request(
            'DELETE',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation goodsReceivedNotePurchaseOrderGETRequestGRNIDPurchaseOrdersOrderIDGet
     *
     * Retrieves a goods received note purchase order.
     *
     * @param  string $accept Accept Header (required)
     * @param  string $grnid grnid (required)
     * @param  string $order_id order_id (required)
     * @param  bool $jiwa_stateful Stateful indicator (optional)
     *
     * @throws \Jiwa\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Jiwa\Model\GoodsReceivedNotePurchaseOrderReceived
     */
    public function goodsReceivedNotePurchaseOrderGETRequestGRNIDPurchaseOrdersOrderIDGet($accept, $grnid, $order_id, $jiwa_stateful = null)
    {
        list($response) = $this->goodsReceivedNotePurchaseOrderGETRequestGRNIDPurchaseOrdersOrderIDGetWithHttpInfo($accept, $grnid, $order_id, $jiwa_stateful);
        return $response;
    }

    /**
     * Operation goodsReceivedNotePurchaseOrderGETRequestGRNIDPurchaseOrdersOrderIDGetWithHttpInfo
     *
     * Retrieves a goods received note purchase order.
     *
     * @param  string $accept Accept Header (required)
     * @param  string $grnid (required)
     * @param  string $order_id (required)
     * @param  bool $jiwa_stateful Stateful indicator (optional)
     *
     * @throws \Jiwa\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Jiwa\Model\GoodsReceivedNotePurchaseOrderReceived, HTTP status code, HTTP response headers (array of strings)
     */
    public function goodsReceivedNotePurchaseOrderGETRequestGRNIDPurchaseOrdersOrderIDGetWithHttpInfo($accept, $grnid, $order_id, $jiwa_stateful = null)
    {
        $returnType = '\Jiwa\Model\GoodsReceivedNotePurchaseOrderReceived';
        $request = $this->goodsReceivedNotePurchaseOrderGETRequestGRNIDPurchaseOrdersOrderIDGetRequest($accept, $grnid, $order_id, $jiwa_stateful);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Jiwa\Model\GoodsReceivedNotePurchaseOrderReceived',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 403:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Jiwa\Model\GoodsReceivedNotePurchaseOrderReceived',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 401:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Jiwa\Model\GoodsReceivedNotePurchaseOrderReceived',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 404:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Jiwa\Model\GoodsReceivedNotePurchaseOrderReceived',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation goodsReceivedNotePurchaseOrderGETRequestGRNIDPurchaseOrdersOrderIDGetAsync
     *
     * Retrieves a goods received note purchase order.
     *
     * @param  string $accept Accept Header (required)
     * @param  string $grnid (required)
     * @param  string $order_id (required)
     * @param  bool $jiwa_stateful Stateful indicator (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function goodsReceivedNotePurchaseOrderGETRequestGRNIDPurchaseOrdersOrderIDGetAsync($accept, $grnid, $order_id, $jiwa_stateful = null)
    {
        return $this->goodsReceivedNotePurchaseOrderGETRequestGRNIDPurchaseOrdersOrderIDGetAsyncWithHttpInfo($accept, $grnid, $order_id, $jiwa_stateful)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation goodsReceivedNotePurchaseOrderGETRequestGRNIDPurchaseOrdersOrderIDGetAsyncWithHttpInfo
     *
     * Retrieves a goods received note purchase order.
     *
     * @param  string $accept Accept Header (required)
     * @param  string $grnid (required)
     * @param  string $order_id (required)
     * @param  bool $jiwa_stateful Stateful indicator (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function goodsReceivedNotePurchaseOrderGETRequestGRNIDPurchaseOrdersOrderIDGetAsyncWithHttpInfo($accept, $grnid, $order_id, $jiwa_stateful = null)
    {
        $returnType = '\Jiwa\Model\GoodsReceivedNotePurchaseOrderReceived';
        $request = $this->goodsReceivedNotePurchaseOrderGETRequestGRNIDPurchaseOrdersOrderIDGetRequest($accept, $grnid, $order_id, $jiwa_stateful);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'goodsReceivedNotePurchaseOrderGETRequestGRNIDPurchaseOrdersOrderIDGet'
     *
     * @param  string $accept Accept Header (required)
     * @param  string $grnid (required)
     * @param  string $order_id (required)
     * @param  bool $jiwa_stateful Stateful indicator (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function goodsReceivedNotePurchaseOrderGETRequestGRNIDPurchaseOrdersOrderIDGetRequest($accept, $grnid, $order_id, $jiwa_stateful = null)
    {
        // verify the required parameter 'accept' is set
        if ($accept === null || (is_array($accept) && count($accept) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $accept when calling goodsReceivedNotePurchaseOrderGETRequestGRNIDPurchaseOrdersOrderIDGet'
            );
        }
        // verify the required parameter 'grnid' is set
        if ($grnid === null || (is_array($grnid) && count($grnid) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $grnid when calling goodsReceivedNotePurchaseOrderGETRequestGRNIDPurchaseOrdersOrderIDGet'
            );
        }
        // verify the required parameter 'order_id' is set
        if ($order_id === null || (is_array($order_id) && count($order_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $order_id when calling goodsReceivedNotePurchaseOrderGETRequestGRNIDPurchaseOrdersOrderIDGet'
            );
        }

        $resourcePath = '/GoodsReceivedNotes/{GRNID}/PurchaseOrders/{OrderID}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // header params
        if ($accept !== null) {
            $headerParams['Accept'] = ObjectSerializer::toHeaderValue($accept);
        }
        // header params
        if ($jiwa_stateful !== null) {
            $headerParams['jiwa-stateful'] = ObjectSerializer::toHeaderValue($jiwa_stateful);
        }

        // path params
        if ($grnid !== null) {
            $resourcePath = str_replace(
                '{' . 'GRNID' . '}',
                ObjectSerializer::toPathValue($grnid),
                $resourcePath
            );
        }
        // path params
        if ($order_id !== null) {
            $resourcePath = str_replace(
                '{' . 'OrderID' . '}',
                ObjectSerializer::toPathValue($order_id),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json', 'application/xml']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json', 'application/xml'],
                ['application/x-www-form-urlencoded', 'application/json', 'application/xml']
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            
            if($headers['Content-Type'] === 'application/json') {
                // \stdClass has no __toString(), so we should encode it manually
                if ($httpBody instanceof \stdClass) {
                    $httpBody = \GuzzleHttp\json_encode($httpBody);
                }
                // array has no __toString(), so we should encode it manually
                if(is_array($httpBody)) {
                    $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($httpBody));
                }
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\Query::build($formParams);
            }
        }

        // this endpoint requires HTTP basic authentication
        if ($this->config->getUsername() !== null || $this->config->getPassword() !== null) {
            $headers['Authorization'] = 'Basic ' . base64_encode($this->config->getUsername() . ":" . $this->config->getPassword());
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\Query::build($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation goodsReceivedNotePurchaseOrderPOSTRequestGRNIDPurchaseOrdersPost
     *
     * Appends a purchase order to a goods received note.
     *
     * @param  string $accept Accept Header (required)
     * @param  string $grnid grnid (required)
     * @param  bool $jiwa_stateful Stateful indicator (optional)
     * @param  string $order_id order_id (optional)
     * @param  string $purchase_order_received_id purchase_order_received_id (optional)
     * @param  string $order_no order_no (optional)
     * @param  string $order_type order_type (optional)
     * @param  \DateTime $ordered_date ordered_date (optional)
     * @param  string $freight_tax_id freight_tax_id (optional)
     * @param  double $freight freight (optional)
     * @param  double $freight_tax_amount freight_tax_amount (optional)
     * @param  string $duty_tax_id duty_tax_id (optional)
     * @param  double $duty duty (optional)
     * @param  double $duty_tax_amount duty_tax_amount (optional)
     * @param  string $insurance_tax_id insurance_tax_id (optional)
     * @param  double $insurance insurance (optional)
     * @param  double $insurance_tax_amount insurance_tax_amount (optional)
     * @param  \Jiwa\Model\GoodsReceivedNotePurchaseOrderPOSTRequest $body body (optional)
     *
     * @throws \Jiwa\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Jiwa\Model\GoodsReceivedNotePurchaseOrderReceived
     */
    public function goodsReceivedNotePurchaseOrderPOSTRequestGRNIDPurchaseOrdersPost($accept, $grnid, $jiwa_stateful = null, $order_id = null, $purchase_order_received_id = null, $order_no = null, $order_type = null, $ordered_date = null, $freight_tax_id = null, $freight = null, $freight_tax_amount = null, $duty_tax_id = null, $duty = null, $duty_tax_amount = null, $insurance_tax_id = null, $insurance = null, $insurance_tax_amount = null, $body = null)
    {
        list($response) = $this->goodsReceivedNotePurchaseOrderPOSTRequestGRNIDPurchaseOrdersPostWithHttpInfo($accept, $grnid, $jiwa_stateful, $order_id, $purchase_order_received_id, $order_no, $order_type, $ordered_date, $freight_tax_id, $freight, $freight_tax_amount, $duty_tax_id, $duty, $duty_tax_amount, $insurance_tax_id, $insurance, $insurance_tax_amount, $body);
        return $response;
    }

    /**
     * Operation goodsReceivedNotePurchaseOrderPOSTRequestGRNIDPurchaseOrdersPostWithHttpInfo
     *
     * Appends a purchase order to a goods received note.
     *
     * @param  string $accept Accept Header (required)
     * @param  string $grnid (required)
     * @param  bool $jiwa_stateful Stateful indicator (optional)
     * @param  string $order_id (optional)
     * @param  string $purchase_order_received_id (optional)
     * @param  string $order_no (optional)
     * @param  string $order_type (optional)
     * @param  \DateTime $ordered_date (optional)
     * @param  string $freight_tax_id (optional)
     * @param  double $freight (optional)
     * @param  double $freight_tax_amount (optional)
     * @param  string $duty_tax_id (optional)
     * @param  double $duty (optional)
     * @param  double $duty_tax_amount (optional)
     * @param  string $insurance_tax_id (optional)
     * @param  double $insurance (optional)
     * @param  double $insurance_tax_amount (optional)
     * @param  \Jiwa\Model\GoodsReceivedNotePurchaseOrderPOSTRequest $body (optional)
     *
     * @throws \Jiwa\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Jiwa\Model\GoodsReceivedNotePurchaseOrderReceived, HTTP status code, HTTP response headers (array of strings)
     */
    public function goodsReceivedNotePurchaseOrderPOSTRequestGRNIDPurchaseOrdersPostWithHttpInfo($accept, $grnid, $jiwa_stateful = null, $order_id = null, $purchase_order_received_id = null, $order_no = null, $order_type = null, $ordered_date = null, $freight_tax_id = null, $freight = null, $freight_tax_amount = null, $duty_tax_id = null, $duty = null, $duty_tax_amount = null, $insurance_tax_id = null, $insurance = null, $insurance_tax_amount = null, $body = null)
    {
        $returnType = '\Jiwa\Model\GoodsReceivedNotePurchaseOrderReceived';
        $request = $this->goodsReceivedNotePurchaseOrderPOSTRequestGRNIDPurchaseOrdersPostRequest($accept, $grnid, $jiwa_stateful, $order_id, $purchase_order_received_id, $order_no, $order_type, $ordered_date, $freight_tax_id, $freight, $freight_tax_amount, $duty_tax_id, $duty, $duty_tax_amount, $insurance_tax_id, $insurance, $insurance_tax_amount, $body);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Jiwa\Model\GoodsReceivedNotePurchaseOrderReceived',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 401:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Jiwa\Model\GoodsReceivedNotePurchaseOrderReceived',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 403:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Jiwa\Model\GoodsReceivedNotePurchaseOrderReceived',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 404:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Jiwa\Model\GoodsReceivedNotePurchaseOrderReceived',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 201:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Jiwa\Model\GoodsReceivedNotePurchaseOrderReceived',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation goodsReceivedNotePurchaseOrderPOSTRequestGRNIDPurchaseOrdersPostAsync
     *
     * Appends a purchase order to a goods received note.
     *
     * @param  string $accept Accept Header (required)
     * @param  string $grnid (required)
     * @param  bool $jiwa_stateful Stateful indicator (optional)
     * @param  string $order_id (optional)
     * @param  string $purchase_order_received_id (optional)
     * @param  string $order_no (optional)
     * @param  string $order_type (optional)
     * @param  \DateTime $ordered_date (optional)
     * @param  string $freight_tax_id (optional)
     * @param  double $freight (optional)
     * @param  double $freight_tax_amount (optional)
     * @param  string $duty_tax_id (optional)
     * @param  double $duty (optional)
     * @param  double $duty_tax_amount (optional)
     * @param  string $insurance_tax_id (optional)
     * @param  double $insurance (optional)
     * @param  double $insurance_tax_amount (optional)
     * @param  \Jiwa\Model\GoodsReceivedNotePurchaseOrderPOSTRequest $body (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function goodsReceivedNotePurchaseOrderPOSTRequestGRNIDPurchaseOrdersPostAsync($accept, $grnid, $jiwa_stateful = null, $order_id = null, $purchase_order_received_id = null, $order_no = null, $order_type = null, $ordered_date = null, $freight_tax_id = null, $freight = null, $freight_tax_amount = null, $duty_tax_id = null, $duty = null, $duty_tax_amount = null, $insurance_tax_id = null, $insurance = null, $insurance_tax_amount = null, $body = null)
    {
        return $this->goodsReceivedNotePurchaseOrderPOSTRequestGRNIDPurchaseOrdersPostAsyncWithHttpInfo($accept, $grnid, $jiwa_stateful, $order_id, $purchase_order_received_id, $order_no, $order_type, $ordered_date, $freight_tax_id, $freight, $freight_tax_amount, $duty_tax_id, $duty, $duty_tax_amount, $insurance_tax_id, $insurance, $insurance_tax_amount, $body)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation goodsReceivedNotePurchaseOrderPOSTRequestGRNIDPurchaseOrdersPostAsyncWithHttpInfo
     *
     * Appends a purchase order to a goods received note.
     *
     * @param  string $accept Accept Header (required)
     * @param  string $grnid (required)
     * @param  bool $jiwa_stateful Stateful indicator (optional)
     * @param  string $order_id (optional)
     * @param  string $purchase_order_received_id (optional)
     * @param  string $order_no (optional)
     * @param  string $order_type (optional)
     * @param  \DateTime $ordered_date (optional)
     * @param  string $freight_tax_id (optional)
     * @param  double $freight (optional)
     * @param  double $freight_tax_amount (optional)
     * @param  string $duty_tax_id (optional)
     * @param  double $duty (optional)
     * @param  double $duty_tax_amount (optional)
     * @param  string $insurance_tax_id (optional)
     * @param  double $insurance (optional)
     * @param  double $insurance_tax_amount (optional)
     * @param  \Jiwa\Model\GoodsReceivedNotePurchaseOrderPOSTRequest $body (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function goodsReceivedNotePurchaseOrderPOSTRequestGRNIDPurchaseOrdersPostAsyncWithHttpInfo($accept, $grnid, $jiwa_stateful = null, $order_id = null, $purchase_order_received_id = null, $order_no = null, $order_type = null, $ordered_date = null, $freight_tax_id = null, $freight = null, $freight_tax_amount = null, $duty_tax_id = null, $duty = null, $duty_tax_amount = null, $insurance_tax_id = null, $insurance = null, $insurance_tax_amount = null, $body = null)
    {
        $returnType = '\Jiwa\Model\GoodsReceivedNotePurchaseOrderReceived';
        $request = $this->goodsReceivedNotePurchaseOrderPOSTRequestGRNIDPurchaseOrdersPostRequest($accept, $grnid, $jiwa_stateful, $order_id, $purchase_order_received_id, $order_no, $order_type, $ordered_date, $freight_tax_id, $freight, $freight_tax_amount, $duty_tax_id, $duty, $duty_tax_amount, $insurance_tax_id, $insurance, $insurance_tax_amount, $body);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'goodsReceivedNotePurchaseOrderPOSTRequestGRNIDPurchaseOrdersPost'
     *
     * @param  string $accept Accept Header (required)
     * @param  string $grnid (required)
     * @param  bool $jiwa_stateful Stateful indicator (optional)
     * @param  string $order_id (optional)
     * @param  string $purchase_order_received_id (optional)
     * @param  string $order_no (optional)
     * @param  string $order_type (optional)
     * @param  \DateTime $ordered_date (optional)
     * @param  string $freight_tax_id (optional)
     * @param  double $freight (optional)
     * @param  double $freight_tax_amount (optional)
     * @param  string $duty_tax_id (optional)
     * @param  double $duty (optional)
     * @param  double $duty_tax_amount (optional)
     * @param  string $insurance_tax_id (optional)
     * @param  double $insurance (optional)
     * @param  double $insurance_tax_amount (optional)
     * @param  \Jiwa\Model\GoodsReceivedNotePurchaseOrderPOSTRequest $body (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function goodsReceivedNotePurchaseOrderPOSTRequestGRNIDPurchaseOrdersPostRequest($accept, $grnid, $jiwa_stateful = null, $order_id = null, $purchase_order_received_id = null, $order_no = null, $order_type = null, $ordered_date = null, $freight_tax_id = null, $freight = null, $freight_tax_amount = null, $duty_tax_id = null, $duty = null, $duty_tax_amount = null, $insurance_tax_id = null, $insurance = null, $insurance_tax_amount = null, $body = null)
    {
        // verify the required parameter 'accept' is set
        if ($accept === null || (is_array($accept) && count($accept) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $accept when calling goodsReceivedNotePurchaseOrderPOSTRequestGRNIDPurchaseOrdersPost'
            );
        }
        // verify the required parameter 'grnid' is set
        if ($grnid === null || (is_array($grnid) && count($grnid) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $grnid when calling goodsReceivedNotePurchaseOrderPOSTRequestGRNIDPurchaseOrdersPost'
            );
        }

        $resourcePath = '/GoodsReceivedNotes/{GRNID}/PurchaseOrders';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        if ($order_id !== null) {
            $queryParams['OrderID'] = ObjectSerializer::toQueryValue($order_id);
        }
        // query params
        if ($purchase_order_received_id !== null) {
            $queryParams['PurchaseOrderReceivedID'] = ObjectSerializer::toQueryValue($purchase_order_received_id);
        }
        // query params
        if ($order_no !== null) {
            $queryParams['OrderNo'] = ObjectSerializer::toQueryValue($order_no);
        }
        // query params
        if ($order_type !== null) {
            $queryParams['OrderType'] = ObjectSerializer::toQueryValue($order_type);
        }
        // query params
        if ($ordered_date !== null) {
            $queryParams['OrderedDate'] = ObjectSerializer::toQueryValue($ordered_date);
        }
        // query params
        if ($freight_tax_id !== null) {
            $queryParams['FreightTaxID'] = ObjectSerializer::toQueryValue($freight_tax_id);
        }
        // query params
        if ($freight !== null) {
            $queryParams['Freight'] = ObjectSerializer::toQueryValue($freight);
        }
        // query params
        if ($freight_tax_amount !== null) {
            $queryParams['FreightTaxAmount'] = ObjectSerializer::toQueryValue($freight_tax_amount);
        }
        // query params
        if ($duty_tax_id !== null) {
            $queryParams['DutyTaxID'] = ObjectSerializer::toQueryValue($duty_tax_id);
        }
        // query params
        if ($duty !== null) {
            $queryParams['Duty'] = ObjectSerializer::toQueryValue($duty);
        }
        // query params
        if ($duty_tax_amount !== null) {
            $queryParams['DutyTaxAmount'] = ObjectSerializer::toQueryValue($duty_tax_amount);
        }
        // query params
        if ($insurance_tax_id !== null) {
            $queryParams['InsuranceTaxID'] = ObjectSerializer::toQueryValue($insurance_tax_id);
        }
        // query params
        if ($insurance !== null) {
            $queryParams['Insurance'] = ObjectSerializer::toQueryValue($insurance);
        }
        // query params
        if ($insurance_tax_amount !== null) {
            $queryParams['InsuranceTaxAmount'] = ObjectSerializer::toQueryValue($insurance_tax_amount);
        }
        // header params
        if ($accept !== null) {
            $headerParams['Accept'] = ObjectSerializer::toHeaderValue($accept);
        }
        // header params
        if ($jiwa_stateful !== null) {
            $headerParams['jiwa-stateful'] = ObjectSerializer::toHeaderValue($jiwa_stateful);
        }

        // path params
        if ($grnid !== null) {
            $resourcePath = str_replace(
                '{' . 'GRNID' . '}',
                ObjectSerializer::toPathValue($grnid),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;
        if (isset($body)) {
            $_tempBody = $body;
        }

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json', 'application/xml']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json', 'application/xml'],
                ['application/x-www-form-urlencoded', 'application/json', 'application/xml']
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            
            if($headers['Content-Type'] === 'application/json') {
                // \stdClass has no __toString(), so we should encode it manually
                if ($httpBody instanceof \stdClass) {
                    $httpBody = \GuzzleHttp\json_encode($httpBody);
                }
                // array has no __toString(), so we should encode it manually
                if(is_array($httpBody)) {
                    $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($httpBody));
                }
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\Query::build($formParams);
            }
        }

        // this endpoint requires HTTP basic authentication
        if ($this->config->getUsername() !== null || $this->config->getPassword() !== null) {
            $headers['Authorization'] = 'Basic ' . base64_encode($this->config->getUsername() . ":" . $this->config->getPassword());
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\Query::build($queryParams);
        return new Request(
            'POST',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation goodsReceivedNotePurchaseOrdersGETManyRequestGRNIDPurchaseOrdersGet
     *
     * Retrieves a list of goods received note purchase orders.
     *
     * @param  string $accept Accept Header (required)
     * @param  string $grnid grnid (required)
     * @param  bool $jiwa_stateful Stateful indicator (optional)
     *
     * @throws \Jiwa\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Jiwa\Model\GoodsReceivedNotePurchaseOrderReceived[]
     */
    public function goodsReceivedNotePurchaseOrdersGETManyRequestGRNIDPurchaseOrdersGet($accept, $grnid, $jiwa_stateful = null)
    {
        list($response) = $this->goodsReceivedNotePurchaseOrdersGETManyRequestGRNIDPurchaseOrdersGetWithHttpInfo($accept, $grnid, $jiwa_stateful);
        return $response;
    }

    /**
     * Operation goodsReceivedNotePurchaseOrdersGETManyRequestGRNIDPurchaseOrdersGetWithHttpInfo
     *
     * Retrieves a list of goods received note purchase orders.
     *
     * @param  string $accept Accept Header (required)
     * @param  string $grnid (required)
     * @param  bool $jiwa_stateful Stateful indicator (optional)
     *
     * @throws \Jiwa\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Jiwa\Model\GoodsReceivedNotePurchaseOrderReceived[], HTTP status code, HTTP response headers (array of strings)
     */
    public function goodsReceivedNotePurchaseOrdersGETManyRequestGRNIDPurchaseOrdersGetWithHttpInfo($accept, $grnid, $jiwa_stateful = null)
    {
        $returnType = '\Jiwa\Model\GoodsReceivedNotePurchaseOrderReceived[]';
        $request = $this->goodsReceivedNotePurchaseOrdersGETManyRequestGRNIDPurchaseOrdersGetRequest($accept, $grnid, $jiwa_stateful);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Jiwa\Model\GoodsReceivedNotePurchaseOrderReceived[]',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 403:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Jiwa\Model\GoodsReceivedNotePurchaseOrderReceived[]',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 404:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Jiwa\Model\GoodsReceivedNotePurchaseOrderReceived[]',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 401:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Jiwa\Model\GoodsReceivedNotePurchaseOrderReceived[]',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation goodsReceivedNotePurchaseOrdersGETManyRequestGRNIDPurchaseOrdersGetAsync
     *
     * Retrieves a list of goods received note purchase orders.
     *
     * @param  string $accept Accept Header (required)
     * @param  string $grnid (required)
     * @param  bool $jiwa_stateful Stateful indicator (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function goodsReceivedNotePurchaseOrdersGETManyRequestGRNIDPurchaseOrdersGetAsync($accept, $grnid, $jiwa_stateful = null)
    {
        return $this->goodsReceivedNotePurchaseOrdersGETManyRequestGRNIDPurchaseOrdersGetAsyncWithHttpInfo($accept, $grnid, $jiwa_stateful)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation goodsReceivedNotePurchaseOrdersGETManyRequestGRNIDPurchaseOrdersGetAsyncWithHttpInfo
     *
     * Retrieves a list of goods received note purchase orders.
     *
     * @param  string $accept Accept Header (required)
     * @param  string $grnid (required)
     * @param  bool $jiwa_stateful Stateful indicator (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function goodsReceivedNotePurchaseOrdersGETManyRequestGRNIDPurchaseOrdersGetAsyncWithHttpInfo($accept, $grnid, $jiwa_stateful = null)
    {
        $returnType = '\Jiwa\Model\GoodsReceivedNotePurchaseOrderReceived[]';
        $request = $this->goodsReceivedNotePurchaseOrdersGETManyRequestGRNIDPurchaseOrdersGetRequest($accept, $grnid, $jiwa_stateful);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'goodsReceivedNotePurchaseOrdersGETManyRequestGRNIDPurchaseOrdersGet'
     *
     * @param  string $accept Accept Header (required)
     * @param  string $grnid (required)
     * @param  bool $jiwa_stateful Stateful indicator (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function goodsReceivedNotePurchaseOrdersGETManyRequestGRNIDPurchaseOrdersGetRequest($accept, $grnid, $jiwa_stateful = null)
    {
        // verify the required parameter 'accept' is set
        if ($accept === null || (is_array($accept) && count($accept) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $accept when calling goodsReceivedNotePurchaseOrdersGETManyRequestGRNIDPurchaseOrdersGet'
            );
        }
        // verify the required parameter 'grnid' is set
        if ($grnid === null || (is_array($grnid) && count($grnid) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $grnid when calling goodsReceivedNotePurchaseOrdersGETManyRequestGRNIDPurchaseOrdersGet'
            );
        }

        $resourcePath = '/GoodsReceivedNotes/{GRNID}/PurchaseOrders';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // header params
        if ($accept !== null) {
            $headerParams['Accept'] = ObjectSerializer::toHeaderValue($accept);
        }
        // header params
        if ($jiwa_stateful !== null) {
            $headerParams['jiwa-stateful'] = ObjectSerializer::toHeaderValue($jiwa_stateful);
        }

        // path params
        if ($grnid !== null) {
            $resourcePath = str_replace(
                '{' . 'GRNID' . '}',
                ObjectSerializer::toPathValue($grnid),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json', 'application/xml']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json', 'application/xml'],
                ['application/x-www-form-urlencoded', 'application/json', 'application/xml']
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            
            if($headers['Content-Type'] === 'application/json') {
                // \stdClass has no __toString(), so we should encode it manually
                if ($httpBody instanceof \stdClass) {
                    $httpBody = \GuzzleHttp\json_encode($httpBody);
                }
                // array has no __toString(), so we should encode it manually
                if(is_array($httpBody)) {
                    $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($httpBody));
                }
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\Query::build($formParams);
            }
        }

        // this endpoint requires HTTP basic authentication
        if ($this->config->getUsername() !== null || $this->config->getPassword() !== null) {
            $headers['Authorization'] = 'Basic ' . base64_encode($this->config->getUsername() . ":" . $this->config->getPassword());
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\Query::build($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation goodsReceivedNoteSAVERequestSaveGet
     *
     * Saves a stateful stateful goods received note.
     *
     * @param  string $accept Accept Header (required)
     * @param  bool $jiwa_stateful Stateful indicator (optional)
     * @param  string $grnid grnid (optional)
     *
     * @throws \Jiwa\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Jiwa\Model\GoodsReceivedNote
     */
    public function goodsReceivedNoteSAVERequestSaveGet($accept, $jiwa_stateful = null, $grnid = null)
    {
        list($response) = $this->goodsReceivedNoteSAVERequestSaveGetWithHttpInfo($accept, $jiwa_stateful, $grnid);
        return $response;
    }

    /**
     * Operation goodsReceivedNoteSAVERequestSaveGetWithHttpInfo
     *
     * Saves a stateful stateful goods received note.
     *
     * @param  string $accept Accept Header (required)
     * @param  bool $jiwa_stateful Stateful indicator (optional)
     * @param  string $grnid (optional)
     *
     * @throws \Jiwa\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Jiwa\Model\GoodsReceivedNote, HTTP status code, HTTP response headers (array of strings)
     */
    public function goodsReceivedNoteSAVERequestSaveGetWithHttpInfo($accept, $jiwa_stateful = null, $grnid = null)
    {
        $returnType = '\Jiwa\Model\GoodsReceivedNote';
        $request = $this->goodsReceivedNoteSAVERequestSaveGetRequest($accept, $jiwa_stateful, $grnid);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Jiwa\Model\GoodsReceivedNote',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 403:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Jiwa\Model\GoodsReceivedNote',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 401:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Jiwa\Model\GoodsReceivedNote',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 404:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Jiwa\Model\GoodsReceivedNote',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation goodsReceivedNoteSAVERequestSaveGetAsync
     *
     * Saves a stateful stateful goods received note.
     *
     * @param  string $accept Accept Header (required)
     * @param  bool $jiwa_stateful Stateful indicator (optional)
     * @param  string $grnid (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function goodsReceivedNoteSAVERequestSaveGetAsync($accept, $jiwa_stateful = null, $grnid = null)
    {
        return $this->goodsReceivedNoteSAVERequestSaveGetAsyncWithHttpInfo($accept, $jiwa_stateful, $grnid)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation goodsReceivedNoteSAVERequestSaveGetAsyncWithHttpInfo
     *
     * Saves a stateful stateful goods received note.
     *
     * @param  string $accept Accept Header (required)
     * @param  bool $jiwa_stateful Stateful indicator (optional)
     * @param  string $grnid (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function goodsReceivedNoteSAVERequestSaveGetAsyncWithHttpInfo($accept, $jiwa_stateful = null, $grnid = null)
    {
        $returnType = '\Jiwa\Model\GoodsReceivedNote';
        $request = $this->goodsReceivedNoteSAVERequestSaveGetRequest($accept, $jiwa_stateful, $grnid);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'goodsReceivedNoteSAVERequestSaveGet'
     *
     * @param  string $accept Accept Header (required)
     * @param  bool $jiwa_stateful Stateful indicator (optional)
     * @param  string $grnid (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function goodsReceivedNoteSAVERequestSaveGetRequest($accept, $jiwa_stateful = null, $grnid = null)
    {
        // verify the required parameter 'accept' is set
        if ($accept === null || (is_array($accept) && count($accept) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $accept when calling goodsReceivedNoteSAVERequestSaveGet'
            );
        }

        $resourcePath = '/GoodsReceivedNotes/Save';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        if ($grnid !== null) {
            $queryParams['GRNID'] = ObjectSerializer::toQueryValue($grnid);
        }
        // header params
        if ($accept !== null) {
            $headerParams['Accept'] = ObjectSerializer::toHeaderValue($accept);
        }
        // header params
        if ($jiwa_stateful !== null) {
            $headerParams['jiwa-stateful'] = ObjectSerializer::toHeaderValue($jiwa_stateful);
        }


        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json', 'application/xml']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json', 'application/xml'],
                ['application/x-www-form-urlencoded', 'application/json', 'application/xml']
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            
            if($headers['Content-Type'] === 'application/json') {
                // \stdClass has no __toString(), so we should encode it manually
                if ($httpBody instanceof \stdClass) {
                    $httpBody = \GuzzleHttp\json_encode($httpBody);
                }
                // array has no __toString(), so we should encode it manually
                if(is_array($httpBody)) {
                    $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($httpBody));
                }
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\Query::build($formParams);
            }
        }

        // this endpoint requires HTTP basic authentication
        if ($this->config->getUsername() !== null || $this->config->getPassword() !== null) {
            $headers['Authorization'] = 'Basic ' . base64_encode($this->config->getUsername() . ":" . $this->config->getPassword());
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\Query::build($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Create http client option
     *
     * @throws \RuntimeException on file opening failure
     * @return array of http client options
     */
    protected function createHttpClientOption()
    {
        $options = [];
        if ($this->config->getDebug()) {
            $options[RequestOptions::DEBUG] = fopen($this->config->getDebugFile(), 'a');
            if (!$options[RequestOptions::DEBUG]) {
                throw new \RuntimeException('Failed to open the debug file: ' . $this->config->getDebugFile());
            }
        }

        return $options;
    }
}

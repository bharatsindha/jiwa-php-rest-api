<?php
/**
 * CurrenciesApi
 * PHP version 5
 *
 * @category Class
 * @package  Jiwa
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * JiwaAPI
 *
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: 1.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 * Swagger Codegen version: 2.4.28-SNAPSHOT
 */

/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Jiwa\Api;

use GuzzleHttp\Client;
use GuzzleHttp\ClientInterface;
use GuzzleHttp\Exception\RequestException;
use GuzzleHttp\Psr7\MultipartStream;
use GuzzleHttp\Psr7\Request;
use GuzzleHttp\RequestOptions;
use Jiwa\ApiException;
use Jiwa\Configuration;
use Jiwa\HeaderSelector;
use Jiwa\ObjectSerializer;

/**
 * CurrenciesApi Class Doc Comment
 *
 * @category Class
 * @package  Jiwa
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class CurrenciesApi
{
    /**
     * @var ClientInterface
     */
    protected $client;

    /**
     * @var Configuration
     */
    protected $config;

    /**
     * @var HeaderSelector
     */
    protected $headerSelector;

    /**
     * @param ClientInterface $client
     * @param Configuration   $config
     * @param HeaderSelector  $selector
     */
    public function __construct(
        ClientInterface $client = null,
        Configuration $config = null,
        HeaderSelector $selector = null
    ) {
        $this->client = $client ?: new Client();
        $this->config = $config ?: new Configuration();
        $this->headerSelector = $selector ?: new HeaderSelector();
    }

    /**
     * @return Configuration
     */
    public function getConfig()
    {
        return $this->config;
    }

    /**
     * Operation currencyABANDONRequestAbandonDelete
     *
     * Abandons a stateful currency.
     *
     * @param  string $accept Accept Header (required)
     * @param  bool $jiwa_stateful Stateful indicator (optional)
     * @param  string $currency_id currency_id (optional)
     *
     * @throws \Jiwa\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Jiwa\Model\Object
     */
    public function currencyABANDONRequestAbandonDelete($accept, $jiwa_stateful = null, $currency_id = null)
    {
        list($response) = $this->currencyABANDONRequestAbandonDeleteWithHttpInfo($accept, $jiwa_stateful, $currency_id);
        return $response;
    }

    /**
     * Operation currencyABANDONRequestAbandonDeleteWithHttpInfo
     *
     * Abandons a stateful currency.
     *
     * @param  string $accept Accept Header (required)
     * @param  bool $jiwa_stateful Stateful indicator (optional)
     * @param  string $currency_id (optional)
     *
     * @throws \Jiwa\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Jiwa\Model\Object, HTTP status code, HTTP response headers (array of strings)
     */
    public function currencyABANDONRequestAbandonDeleteWithHttpInfo($accept, $jiwa_stateful = null, $currency_id = null)
    {
        $returnType = '\Jiwa\Model\Object';
        $request = $this->currencyABANDONRequestAbandonDeleteRequest($accept, $jiwa_stateful, $currency_id);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Jiwa\Model\Object',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 403:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Jiwa\Model\Object',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 404:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Jiwa\Model\Object',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 401:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Jiwa\Model\Object',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation currencyABANDONRequestAbandonDeleteAsync
     *
     * Abandons a stateful currency.
     *
     * @param  string $accept Accept Header (required)
     * @param  bool $jiwa_stateful Stateful indicator (optional)
     * @param  string $currency_id (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function currencyABANDONRequestAbandonDeleteAsync($accept, $jiwa_stateful = null, $currency_id = null)
    {
        return $this->currencyABANDONRequestAbandonDeleteAsyncWithHttpInfo($accept, $jiwa_stateful, $currency_id)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation currencyABANDONRequestAbandonDeleteAsyncWithHttpInfo
     *
     * Abandons a stateful currency.
     *
     * @param  string $accept Accept Header (required)
     * @param  bool $jiwa_stateful Stateful indicator (optional)
     * @param  string $currency_id (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function currencyABANDONRequestAbandonDeleteAsyncWithHttpInfo($accept, $jiwa_stateful = null, $currency_id = null)
    {
        $returnType = '\Jiwa\Model\Object';
        $request = $this->currencyABANDONRequestAbandonDeleteRequest($accept, $jiwa_stateful, $currency_id);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'currencyABANDONRequestAbandonDelete'
     *
     * @param  string $accept Accept Header (required)
     * @param  bool $jiwa_stateful Stateful indicator (optional)
     * @param  string $currency_id (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function currencyABANDONRequestAbandonDeleteRequest($accept, $jiwa_stateful = null, $currency_id = null)
    {
        // verify the required parameter 'accept' is set
        if ($accept === null || (is_array($accept) && count($accept) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $accept when calling currencyABANDONRequestAbandonDelete'
            );
        }

        $resourcePath = '/Currencies/Abandon';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        if ($currency_id !== null) {
            $queryParams['CurrencyID'] = ObjectSerializer::toQueryValue($currency_id);
        }
        // header params
        if ($accept !== null) {
            $headerParams['Accept'] = ObjectSerializer::toHeaderValue($accept);
        }
        // header params
        if ($jiwa_stateful !== null) {
            $headerParams['jiwa-stateful'] = ObjectSerializer::toHeaderValue($jiwa_stateful);
        }


        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json', 'application/xml']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json', 'application/xml'],
                ['application/x-www-form-urlencoded', 'application/json', 'application/xml']
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            
            if($headers['Content-Type'] === 'application/json') {
                // \stdClass has no __toString(), so we should encode it manually
                if ($httpBody instanceof \stdClass) {
                    $httpBody = \GuzzleHttp\json_encode($httpBody);
                }
                // array has no __toString(), so we should encode it manually
                if(is_array($httpBody)) {
                    $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($httpBody));
                }
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\Query::build($formParams);
            }
        }

        // this endpoint requires HTTP basic authentication
        if ($this->config->getUsername() !== null || $this->config->getPassword() !== null) {
            $headers['Authorization'] = 'Basic ' . base64_encode($this->config->getUsername() . ":" . $this->config->getPassword());
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\Query::build($queryParams);
        return new Request(
            'DELETE',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation currencyDELETERequestCurrencyIDDelete
     *
     * Deletes a currency.
     *
     * @param  string $accept Accept Header (required)
     * @param  string $currency_id currency_id (required)
     * @param  bool $jiwa_stateful Stateful indicator (optional)
     *
     * @throws \Jiwa\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Jiwa\Model\Object
     */
    public function currencyDELETERequestCurrencyIDDelete($accept, $currency_id, $jiwa_stateful = null)
    {
        list($response) = $this->currencyDELETERequestCurrencyIDDeleteWithHttpInfo($accept, $currency_id, $jiwa_stateful);
        return $response;
    }

    /**
     * Operation currencyDELETERequestCurrencyIDDeleteWithHttpInfo
     *
     * Deletes a currency.
     *
     * @param  string $accept Accept Header (required)
     * @param  string $currency_id (required)
     * @param  bool $jiwa_stateful Stateful indicator (optional)
     *
     * @throws \Jiwa\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Jiwa\Model\Object, HTTP status code, HTTP response headers (array of strings)
     */
    public function currencyDELETERequestCurrencyIDDeleteWithHttpInfo($accept, $currency_id, $jiwa_stateful = null)
    {
        $returnType = '\Jiwa\Model\Object';
        $request = $this->currencyDELETERequestCurrencyIDDeleteRequest($accept, $currency_id, $jiwa_stateful);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Jiwa\Model\Object',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 401:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Jiwa\Model\Object',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 403:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Jiwa\Model\Object',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 404:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Jiwa\Model\Object',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 204:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Jiwa\Model\Object',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation currencyDELETERequestCurrencyIDDeleteAsync
     *
     * Deletes a currency.
     *
     * @param  string $accept Accept Header (required)
     * @param  string $currency_id (required)
     * @param  bool $jiwa_stateful Stateful indicator (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function currencyDELETERequestCurrencyIDDeleteAsync($accept, $currency_id, $jiwa_stateful = null)
    {
        return $this->currencyDELETERequestCurrencyIDDeleteAsyncWithHttpInfo($accept, $currency_id, $jiwa_stateful)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation currencyDELETERequestCurrencyIDDeleteAsyncWithHttpInfo
     *
     * Deletes a currency.
     *
     * @param  string $accept Accept Header (required)
     * @param  string $currency_id (required)
     * @param  bool $jiwa_stateful Stateful indicator (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function currencyDELETERequestCurrencyIDDeleteAsyncWithHttpInfo($accept, $currency_id, $jiwa_stateful = null)
    {
        $returnType = '\Jiwa\Model\Object';
        $request = $this->currencyDELETERequestCurrencyIDDeleteRequest($accept, $currency_id, $jiwa_stateful);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'currencyDELETERequestCurrencyIDDelete'
     *
     * @param  string $accept Accept Header (required)
     * @param  string $currency_id (required)
     * @param  bool $jiwa_stateful Stateful indicator (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function currencyDELETERequestCurrencyIDDeleteRequest($accept, $currency_id, $jiwa_stateful = null)
    {
        // verify the required parameter 'accept' is set
        if ($accept === null || (is_array($accept) && count($accept) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $accept when calling currencyDELETERequestCurrencyIDDelete'
            );
        }
        // verify the required parameter 'currency_id' is set
        if ($currency_id === null || (is_array($currency_id) && count($currency_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $currency_id when calling currencyDELETERequestCurrencyIDDelete'
            );
        }

        $resourcePath = '/Currencies/{CurrencyID}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // header params
        if ($accept !== null) {
            $headerParams['Accept'] = ObjectSerializer::toHeaderValue($accept);
        }
        // header params
        if ($jiwa_stateful !== null) {
            $headerParams['jiwa-stateful'] = ObjectSerializer::toHeaderValue($jiwa_stateful);
        }

        // path params
        if ($currency_id !== null) {
            $resourcePath = str_replace(
                '{' . 'CurrencyID' . '}',
                ObjectSerializer::toPathValue($currency_id),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json', 'application/xml']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json', 'application/xml'],
                ['application/x-www-form-urlencoded', 'application/json', 'application/xml']
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            
            if($headers['Content-Type'] === 'application/json') {
                // \stdClass has no __toString(), so we should encode it manually
                if ($httpBody instanceof \stdClass) {
                    $httpBody = \GuzzleHttp\json_encode($httpBody);
                }
                // array has no __toString(), so we should encode it manually
                if(is_array($httpBody)) {
                    $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($httpBody));
                }
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\Query::build($formParams);
            }
        }

        // this endpoint requires HTTP basic authentication
        if ($this->config->getUsername() !== null || $this->config->getPassword() !== null) {
            $headers['Authorization'] = 'Basic ' . base64_encode($this->config->getUsername() . ":" . $this->config->getPassword());
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\Query::build($queryParams);
        return new Request(
            'DELETE',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation currencyGETRequestCurrencyIDGet
     *
     * Retrieves a currency.
     *
     * @param  string $accept Accept Header (required)
     * @param  string $currency_id currency_id (required)
     * @param  bool $jiwa_stateful Stateful indicator (optional)
     *
     * @throws \Jiwa\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Jiwa\Model\Currency
     */
    public function currencyGETRequestCurrencyIDGet($accept, $currency_id, $jiwa_stateful = null)
    {
        list($response) = $this->currencyGETRequestCurrencyIDGetWithHttpInfo($accept, $currency_id, $jiwa_stateful);
        return $response;
    }

    /**
     * Operation currencyGETRequestCurrencyIDGetWithHttpInfo
     *
     * Retrieves a currency.
     *
     * @param  string $accept Accept Header (required)
     * @param  string $currency_id (required)
     * @param  bool $jiwa_stateful Stateful indicator (optional)
     *
     * @throws \Jiwa\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Jiwa\Model\Currency, HTTP status code, HTTP response headers (array of strings)
     */
    public function currencyGETRequestCurrencyIDGetWithHttpInfo($accept, $currency_id, $jiwa_stateful = null)
    {
        $returnType = '\Jiwa\Model\Currency';
        $request = $this->currencyGETRequestCurrencyIDGetRequest($accept, $currency_id, $jiwa_stateful);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Jiwa\Model\Currency',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 404:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Jiwa\Model\Currency',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 401:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Jiwa\Model\Currency',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 403:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Jiwa\Model\Currency',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation currencyGETRequestCurrencyIDGetAsync
     *
     * Retrieves a currency.
     *
     * @param  string $accept Accept Header (required)
     * @param  string $currency_id (required)
     * @param  bool $jiwa_stateful Stateful indicator (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function currencyGETRequestCurrencyIDGetAsync($accept, $currency_id, $jiwa_stateful = null)
    {
        return $this->currencyGETRequestCurrencyIDGetAsyncWithHttpInfo($accept, $currency_id, $jiwa_stateful)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation currencyGETRequestCurrencyIDGetAsyncWithHttpInfo
     *
     * Retrieves a currency.
     *
     * @param  string $accept Accept Header (required)
     * @param  string $currency_id (required)
     * @param  bool $jiwa_stateful Stateful indicator (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function currencyGETRequestCurrencyIDGetAsyncWithHttpInfo($accept, $currency_id, $jiwa_stateful = null)
    {
        $returnType = '\Jiwa\Model\Currency';
        $request = $this->currencyGETRequestCurrencyIDGetRequest($accept, $currency_id, $jiwa_stateful);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'currencyGETRequestCurrencyIDGet'
     *
     * @param  string $accept Accept Header (required)
     * @param  string $currency_id (required)
     * @param  bool $jiwa_stateful Stateful indicator (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function currencyGETRequestCurrencyIDGetRequest($accept, $currency_id, $jiwa_stateful = null)
    {
        // verify the required parameter 'accept' is set
        if ($accept === null || (is_array($accept) && count($accept) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $accept when calling currencyGETRequestCurrencyIDGet'
            );
        }
        // verify the required parameter 'currency_id' is set
        if ($currency_id === null || (is_array($currency_id) && count($currency_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $currency_id when calling currencyGETRequestCurrencyIDGet'
            );
        }

        $resourcePath = '/Currencies/{CurrencyID}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // header params
        if ($accept !== null) {
            $headerParams['Accept'] = ObjectSerializer::toHeaderValue($accept);
        }
        // header params
        if ($jiwa_stateful !== null) {
            $headerParams['jiwa-stateful'] = ObjectSerializer::toHeaderValue($jiwa_stateful);
        }

        // path params
        if ($currency_id !== null) {
            $resourcePath = str_replace(
                '{' . 'CurrencyID' . '}',
                ObjectSerializer::toPathValue($currency_id),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json', 'application/xml']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json', 'application/xml'],
                ['application/x-www-form-urlencoded', 'application/json', 'application/xml']
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            
            if($headers['Content-Type'] === 'application/json') {
                // \stdClass has no __toString(), so we should encode it manually
                if ($httpBody instanceof \stdClass) {
                    $httpBody = \GuzzleHttp\json_encode($httpBody);
                }
                // array has no __toString(), so we should encode it manually
                if(is_array($httpBody)) {
                    $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($httpBody));
                }
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\Query::build($formParams);
            }
        }

        // this endpoint requires HTTP basic authentication
        if ($this->config->getUsername() !== null || $this->config->getPassword() !== null) {
            $headers['Authorization'] = 'Basic ' . base64_encode($this->config->getUsername() . ":" . $this->config->getPassword());
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\Query::build($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation currencyPATCHRequestCurrencyIDUpdate
     *
     * Updates a currency.
     *
     * @param  string $accept Accept Header (required)
     * @param  string $currency_id currency_id (required)
     * @param  bool $jiwa_stateful Stateful indicator (optional)
     * @param  string $name name (optional)
     * @param  string $short_name short_name (optional)
     * @param  int $decimal_places decimal_places (optional)
     * @param  bool $is_enabled is_enabled (optional)
     * @param  bool $is_local is_local (optional)
     * @param  \DateTime $last_saved_date_time last_saved_date_time (optional)
     * @param  string $rates rates (optional)
     * @param  \Jiwa\Model\CurrencyPATCHRequest $body body (optional)
     *
     * @throws \Jiwa\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Jiwa\Model\Currency
     */
    public function currencyPATCHRequestCurrencyIDUpdate($accept, $currency_id, $jiwa_stateful = null, $name = null, $short_name = null, $decimal_places = null, $is_enabled = null, $is_local = null, $last_saved_date_time = null, $rates = null, $body = null)
    {
        list($response) = $this->currencyPATCHRequestCurrencyIDUpdateWithHttpInfo($accept, $currency_id, $jiwa_stateful, $name, $short_name, $decimal_places, $is_enabled, $is_local, $last_saved_date_time, $rates, $body);
        return $response;
    }

    /**
     * Operation currencyPATCHRequestCurrencyIDUpdateWithHttpInfo
     *
     * Updates a currency.
     *
     * @param  string $accept Accept Header (required)
     * @param  string $currency_id (required)
     * @param  bool $jiwa_stateful Stateful indicator (optional)
     * @param  string $name (optional)
     * @param  string $short_name (optional)
     * @param  int $decimal_places (optional)
     * @param  bool $is_enabled (optional)
     * @param  bool $is_local (optional)
     * @param  \DateTime $last_saved_date_time (optional)
     * @param  string $rates (optional)
     * @param  \Jiwa\Model\CurrencyPATCHRequest $body (optional)
     *
     * @throws \Jiwa\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Jiwa\Model\Currency, HTTP status code, HTTP response headers (array of strings)
     */
    public function currencyPATCHRequestCurrencyIDUpdateWithHttpInfo($accept, $currency_id, $jiwa_stateful = null, $name = null, $short_name = null, $decimal_places = null, $is_enabled = null, $is_local = null, $last_saved_date_time = null, $rates = null, $body = null)
    {
        $returnType = '\Jiwa\Model\Currency';
        $request = $this->currencyPATCHRequestCurrencyIDUpdateRequest($accept, $currency_id, $jiwa_stateful, $name, $short_name, $decimal_places, $is_enabled, $is_local, $last_saved_date_time, $rates, $body);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Jiwa\Model\Currency',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 404:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Jiwa\Model\Currency',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 401:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Jiwa\Model\Currency',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 403:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Jiwa\Model\Currency',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation currencyPATCHRequestCurrencyIDUpdateAsync
     *
     * Updates a currency.
     *
     * @param  string $accept Accept Header (required)
     * @param  string $currency_id (required)
     * @param  bool $jiwa_stateful Stateful indicator (optional)
     * @param  string $name (optional)
     * @param  string $short_name (optional)
     * @param  int $decimal_places (optional)
     * @param  bool $is_enabled (optional)
     * @param  bool $is_local (optional)
     * @param  \DateTime $last_saved_date_time (optional)
     * @param  string $rates (optional)
     * @param  \Jiwa\Model\CurrencyPATCHRequest $body (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function currencyPATCHRequestCurrencyIDUpdateAsync($accept, $currency_id, $jiwa_stateful = null, $name = null, $short_name = null, $decimal_places = null, $is_enabled = null, $is_local = null, $last_saved_date_time = null, $rates = null, $body = null)
    {
        return $this->currencyPATCHRequestCurrencyIDUpdateAsyncWithHttpInfo($accept, $currency_id, $jiwa_stateful, $name, $short_name, $decimal_places, $is_enabled, $is_local, $last_saved_date_time, $rates, $body)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation currencyPATCHRequestCurrencyIDUpdateAsyncWithHttpInfo
     *
     * Updates a currency.
     *
     * @param  string $accept Accept Header (required)
     * @param  string $currency_id (required)
     * @param  bool $jiwa_stateful Stateful indicator (optional)
     * @param  string $name (optional)
     * @param  string $short_name (optional)
     * @param  int $decimal_places (optional)
     * @param  bool $is_enabled (optional)
     * @param  bool $is_local (optional)
     * @param  \DateTime $last_saved_date_time (optional)
     * @param  string $rates (optional)
     * @param  \Jiwa\Model\CurrencyPATCHRequest $body (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function currencyPATCHRequestCurrencyIDUpdateAsyncWithHttpInfo($accept, $currency_id, $jiwa_stateful = null, $name = null, $short_name = null, $decimal_places = null, $is_enabled = null, $is_local = null, $last_saved_date_time = null, $rates = null, $body = null)
    {
        $returnType = '\Jiwa\Model\Currency';
        $request = $this->currencyPATCHRequestCurrencyIDUpdateRequest($accept, $currency_id, $jiwa_stateful, $name, $short_name, $decimal_places, $is_enabled, $is_local, $last_saved_date_time, $rates, $body);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'currencyPATCHRequestCurrencyIDUpdate'
     *
     * @param  string $accept Accept Header (required)
     * @param  string $currency_id (required)
     * @param  bool $jiwa_stateful Stateful indicator (optional)
     * @param  string $name (optional)
     * @param  string $short_name (optional)
     * @param  int $decimal_places (optional)
     * @param  bool $is_enabled (optional)
     * @param  bool $is_local (optional)
     * @param  \DateTime $last_saved_date_time (optional)
     * @param  string $rates (optional)
     * @param  \Jiwa\Model\CurrencyPATCHRequest $body (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function currencyPATCHRequestCurrencyIDUpdateRequest($accept, $currency_id, $jiwa_stateful = null, $name = null, $short_name = null, $decimal_places = null, $is_enabled = null, $is_local = null, $last_saved_date_time = null, $rates = null, $body = null)
    {
        // verify the required parameter 'accept' is set
        if ($accept === null || (is_array($accept) && count($accept) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $accept when calling currencyPATCHRequestCurrencyIDUpdate'
            );
        }
        // verify the required parameter 'currency_id' is set
        if ($currency_id === null || (is_array($currency_id) && count($currency_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $currency_id when calling currencyPATCHRequestCurrencyIDUpdate'
            );
        }

        $resourcePath = '/Currencies/{CurrencyID}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        if ($name !== null) {
            $queryParams['Name'] = ObjectSerializer::toQueryValue($name);
        }
        // query params
        if ($short_name !== null) {
            $queryParams['ShortName'] = ObjectSerializer::toQueryValue($short_name);
        }
        // query params
        if ($decimal_places !== null) {
            $queryParams['DecimalPlaces'] = ObjectSerializer::toQueryValue($decimal_places);
        }
        // query params
        if ($is_enabled !== null) {
            $queryParams['IsEnabled'] = ObjectSerializer::toQueryValue($is_enabled);
        }
        // query params
        if ($is_local !== null) {
            $queryParams['IsLocal'] = ObjectSerializer::toQueryValue($is_local);
        }
        // query params
        if ($last_saved_date_time !== null) {
            $queryParams['LastSavedDateTime'] = ObjectSerializer::toQueryValue($last_saved_date_time);
        }
        // query params
        if ($rates !== null) {
            $queryParams['Rates'] = ObjectSerializer::toQueryValue($rates);
        }
        // header params
        if ($accept !== null) {
            $headerParams['Accept'] = ObjectSerializer::toHeaderValue($accept);
        }
        // header params
        if ($jiwa_stateful !== null) {
            $headerParams['jiwa-stateful'] = ObjectSerializer::toHeaderValue($jiwa_stateful);
        }

        // path params
        if ($currency_id !== null) {
            $resourcePath = str_replace(
                '{' . 'CurrencyID' . '}',
                ObjectSerializer::toPathValue($currency_id),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;
        if (isset($body)) {
            $_tempBody = $body;
        }

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json', 'application/xml']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json', 'application/xml'],
                ['application/x-www-form-urlencoded', 'application/json', 'application/xml']
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            
            if($headers['Content-Type'] === 'application/json') {
                // \stdClass has no __toString(), so we should encode it manually
                if ($httpBody instanceof \stdClass) {
                    $httpBody = \GuzzleHttp\json_encode($httpBody);
                }
                // array has no __toString(), so we should encode it manually
                if(is_array($httpBody)) {
                    $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($httpBody));
                }
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\Query::build($formParams);
            }
        }

        // this endpoint requires HTTP basic authentication
        if ($this->config->getUsername() !== null || $this->config->getPassword() !== null) {
            $headers['Authorization'] = 'Basic ' . base64_encode($this->config->getUsername() . ":" . $this->config->getPassword());
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\Query::build($queryParams);
        return new Request(
            'PATCH',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation currencyPOSTRequestPost
     *
     * Creates a currency.
     *
     * @param  string $accept Accept Header (required)
     * @param  bool $jiwa_stateful Stateful indicator (optional)
     * @param  string $name name (optional)
     * @param  string $short_name short_name (optional)
     * @param  int $decimal_places decimal_places (optional)
     * @param  bool $is_enabled is_enabled (optional)
     * @param  bool $is_local is_local (optional)
     * @param  string $rates rates (optional)
     * @param  \Jiwa\Model\CurrencyPOSTRequest $body body (optional)
     *
     * @throws \Jiwa\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Jiwa\Model\Currency
     */
    public function currencyPOSTRequestPost($accept, $jiwa_stateful = null, $name = null, $short_name = null, $decimal_places = null, $is_enabled = null, $is_local = null, $rates = null, $body = null)
    {
        list($response) = $this->currencyPOSTRequestPostWithHttpInfo($accept, $jiwa_stateful, $name, $short_name, $decimal_places, $is_enabled, $is_local, $rates, $body);
        return $response;
    }

    /**
     * Operation currencyPOSTRequestPostWithHttpInfo
     *
     * Creates a currency.
     *
     * @param  string $accept Accept Header (required)
     * @param  bool $jiwa_stateful Stateful indicator (optional)
     * @param  string $name (optional)
     * @param  string $short_name (optional)
     * @param  int $decimal_places (optional)
     * @param  bool $is_enabled (optional)
     * @param  bool $is_local (optional)
     * @param  string $rates (optional)
     * @param  \Jiwa\Model\CurrencyPOSTRequest $body (optional)
     *
     * @throws \Jiwa\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Jiwa\Model\Currency, HTTP status code, HTTP response headers (array of strings)
     */
    public function currencyPOSTRequestPostWithHttpInfo($accept, $jiwa_stateful = null, $name = null, $short_name = null, $decimal_places = null, $is_enabled = null, $is_local = null, $rates = null, $body = null)
    {
        $returnType = '\Jiwa\Model\Currency';
        $request = $this->currencyPOSTRequestPostRequest($accept, $jiwa_stateful, $name, $short_name, $decimal_places, $is_enabled, $is_local, $rates, $body);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Jiwa\Model\Currency',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 201:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Jiwa\Model\Currency',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 401:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Jiwa\Model\Currency',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 403:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Jiwa\Model\Currency',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation currencyPOSTRequestPostAsync
     *
     * Creates a currency.
     *
     * @param  string $accept Accept Header (required)
     * @param  bool $jiwa_stateful Stateful indicator (optional)
     * @param  string $name (optional)
     * @param  string $short_name (optional)
     * @param  int $decimal_places (optional)
     * @param  bool $is_enabled (optional)
     * @param  bool $is_local (optional)
     * @param  string $rates (optional)
     * @param  \Jiwa\Model\CurrencyPOSTRequest $body (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function currencyPOSTRequestPostAsync($accept, $jiwa_stateful = null, $name = null, $short_name = null, $decimal_places = null, $is_enabled = null, $is_local = null, $rates = null, $body = null)
    {
        return $this->currencyPOSTRequestPostAsyncWithHttpInfo($accept, $jiwa_stateful, $name, $short_name, $decimal_places, $is_enabled, $is_local, $rates, $body)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation currencyPOSTRequestPostAsyncWithHttpInfo
     *
     * Creates a currency.
     *
     * @param  string $accept Accept Header (required)
     * @param  bool $jiwa_stateful Stateful indicator (optional)
     * @param  string $name (optional)
     * @param  string $short_name (optional)
     * @param  int $decimal_places (optional)
     * @param  bool $is_enabled (optional)
     * @param  bool $is_local (optional)
     * @param  string $rates (optional)
     * @param  \Jiwa\Model\CurrencyPOSTRequest $body (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function currencyPOSTRequestPostAsyncWithHttpInfo($accept, $jiwa_stateful = null, $name = null, $short_name = null, $decimal_places = null, $is_enabled = null, $is_local = null, $rates = null, $body = null)
    {
        $returnType = '\Jiwa\Model\Currency';
        $request = $this->currencyPOSTRequestPostRequest($accept, $jiwa_stateful, $name, $short_name, $decimal_places, $is_enabled, $is_local, $rates, $body);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'currencyPOSTRequestPost'
     *
     * @param  string $accept Accept Header (required)
     * @param  bool $jiwa_stateful Stateful indicator (optional)
     * @param  string $name (optional)
     * @param  string $short_name (optional)
     * @param  int $decimal_places (optional)
     * @param  bool $is_enabled (optional)
     * @param  bool $is_local (optional)
     * @param  string $rates (optional)
     * @param  \Jiwa\Model\CurrencyPOSTRequest $body (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function currencyPOSTRequestPostRequest($accept, $jiwa_stateful = null, $name = null, $short_name = null, $decimal_places = null, $is_enabled = null, $is_local = null, $rates = null, $body = null)
    {
        // verify the required parameter 'accept' is set
        if ($accept === null || (is_array($accept) && count($accept) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $accept when calling currencyPOSTRequestPost'
            );
        }

        $resourcePath = '/Currencies';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        if ($name !== null) {
            $queryParams['Name'] = ObjectSerializer::toQueryValue($name);
        }
        // query params
        if ($short_name !== null) {
            $queryParams['ShortName'] = ObjectSerializer::toQueryValue($short_name);
        }
        // query params
        if ($decimal_places !== null) {
            $queryParams['DecimalPlaces'] = ObjectSerializer::toQueryValue($decimal_places);
        }
        // query params
        if ($is_enabled !== null) {
            $queryParams['IsEnabled'] = ObjectSerializer::toQueryValue($is_enabled);
        }
        // query params
        if ($is_local !== null) {
            $queryParams['IsLocal'] = ObjectSerializer::toQueryValue($is_local);
        }
        // query params
        if ($rates !== null) {
            $queryParams['Rates'] = ObjectSerializer::toQueryValue($rates);
        }
        // header params
        if ($accept !== null) {
            $headerParams['Accept'] = ObjectSerializer::toHeaderValue($accept);
        }
        // header params
        if ($jiwa_stateful !== null) {
            $headerParams['jiwa-stateful'] = ObjectSerializer::toHeaderValue($jiwa_stateful);
        }


        // body params
        $_tempBody = null;
        if (isset($body)) {
            $_tempBody = $body;
        }

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json', 'application/xml']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json', 'application/xml'],
                ['application/x-www-form-urlencoded', 'application/json', 'application/xml']
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            
            if($headers['Content-Type'] === 'application/json') {
                // \stdClass has no __toString(), so we should encode it manually
                if ($httpBody instanceof \stdClass) {
                    $httpBody = \GuzzleHttp\json_encode($httpBody);
                }
                // array has no __toString(), so we should encode it manually
                if(is_array($httpBody)) {
                    $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($httpBody));
                }
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\Query::build($formParams);
            }
        }

        // this endpoint requires HTTP basic authentication
        if ($this->config->getUsername() !== null || $this->config->getPassword() !== null) {
            $headers['Authorization'] = 'Basic ' . base64_encode($this->config->getUsername() . ":" . $this->config->getPassword());
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\Query::build($queryParams);
        return new Request(
            'POST',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation currencyRateDELETERequestCurrencyIDRatesRateIDDelete
     *
     * Deletes a rate from a currency.
     *
     * @param  string $accept Accept Header (required)
     * @param  string $currency_id currency_id (required)
     * @param  string $rate_id rate_id (required)
     * @param  bool $jiwa_stateful Stateful indicator (optional)
     * @param  \DateTime $date_entered date_entered (optional)
     * @param  \DateTime $effective_date effective_date (optional)
     * @param  \DateTime $effective_date_end effective_date_end (optional)
     * @param  double $transaction_rate transaction_rate (optional)
     *
     * @throws \Jiwa\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Jiwa\Model\Object
     */
    public function currencyRateDELETERequestCurrencyIDRatesRateIDDelete($accept, $currency_id, $rate_id, $jiwa_stateful = null, $date_entered = null, $effective_date = null, $effective_date_end = null, $transaction_rate = null)
    {
        list($response) = $this->currencyRateDELETERequestCurrencyIDRatesRateIDDeleteWithHttpInfo($accept, $currency_id, $rate_id, $jiwa_stateful, $date_entered, $effective_date, $effective_date_end, $transaction_rate);
        return $response;
    }

    /**
     * Operation currencyRateDELETERequestCurrencyIDRatesRateIDDeleteWithHttpInfo
     *
     * Deletes a rate from a currency.
     *
     * @param  string $accept Accept Header (required)
     * @param  string $currency_id (required)
     * @param  string $rate_id (required)
     * @param  bool $jiwa_stateful Stateful indicator (optional)
     * @param  \DateTime $date_entered (optional)
     * @param  \DateTime $effective_date (optional)
     * @param  \DateTime $effective_date_end (optional)
     * @param  double $transaction_rate (optional)
     *
     * @throws \Jiwa\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Jiwa\Model\Object, HTTP status code, HTTP response headers (array of strings)
     */
    public function currencyRateDELETERequestCurrencyIDRatesRateIDDeleteWithHttpInfo($accept, $currency_id, $rate_id, $jiwa_stateful = null, $date_entered = null, $effective_date = null, $effective_date_end = null, $transaction_rate = null)
    {
        $returnType = '\Jiwa\Model\Object';
        $request = $this->currencyRateDELETERequestCurrencyIDRatesRateIDDeleteRequest($accept, $currency_id, $rate_id, $jiwa_stateful, $date_entered, $effective_date, $effective_date_end, $transaction_rate);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Jiwa\Model\Object',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 404:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Jiwa\Model\Object',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 204:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Jiwa\Model\Object',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 401:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Jiwa\Model\Object',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 403:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Jiwa\Model\Object',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation currencyRateDELETERequestCurrencyIDRatesRateIDDeleteAsync
     *
     * Deletes a rate from a currency.
     *
     * @param  string $accept Accept Header (required)
     * @param  string $currency_id (required)
     * @param  string $rate_id (required)
     * @param  bool $jiwa_stateful Stateful indicator (optional)
     * @param  \DateTime $date_entered (optional)
     * @param  \DateTime $effective_date (optional)
     * @param  \DateTime $effective_date_end (optional)
     * @param  double $transaction_rate (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function currencyRateDELETERequestCurrencyIDRatesRateIDDeleteAsync($accept, $currency_id, $rate_id, $jiwa_stateful = null, $date_entered = null, $effective_date = null, $effective_date_end = null, $transaction_rate = null)
    {
        return $this->currencyRateDELETERequestCurrencyIDRatesRateIDDeleteAsyncWithHttpInfo($accept, $currency_id, $rate_id, $jiwa_stateful, $date_entered, $effective_date, $effective_date_end, $transaction_rate)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation currencyRateDELETERequestCurrencyIDRatesRateIDDeleteAsyncWithHttpInfo
     *
     * Deletes a rate from a currency.
     *
     * @param  string $accept Accept Header (required)
     * @param  string $currency_id (required)
     * @param  string $rate_id (required)
     * @param  bool $jiwa_stateful Stateful indicator (optional)
     * @param  \DateTime $date_entered (optional)
     * @param  \DateTime $effective_date (optional)
     * @param  \DateTime $effective_date_end (optional)
     * @param  double $transaction_rate (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function currencyRateDELETERequestCurrencyIDRatesRateIDDeleteAsyncWithHttpInfo($accept, $currency_id, $rate_id, $jiwa_stateful = null, $date_entered = null, $effective_date = null, $effective_date_end = null, $transaction_rate = null)
    {
        $returnType = '\Jiwa\Model\Object';
        $request = $this->currencyRateDELETERequestCurrencyIDRatesRateIDDeleteRequest($accept, $currency_id, $rate_id, $jiwa_stateful, $date_entered, $effective_date, $effective_date_end, $transaction_rate);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'currencyRateDELETERequestCurrencyIDRatesRateIDDelete'
     *
     * @param  string $accept Accept Header (required)
     * @param  string $currency_id (required)
     * @param  string $rate_id (required)
     * @param  bool $jiwa_stateful Stateful indicator (optional)
     * @param  \DateTime $date_entered (optional)
     * @param  \DateTime $effective_date (optional)
     * @param  \DateTime $effective_date_end (optional)
     * @param  double $transaction_rate (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function currencyRateDELETERequestCurrencyIDRatesRateIDDeleteRequest($accept, $currency_id, $rate_id, $jiwa_stateful = null, $date_entered = null, $effective_date = null, $effective_date_end = null, $transaction_rate = null)
    {
        // verify the required parameter 'accept' is set
        if ($accept === null || (is_array($accept) && count($accept) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $accept when calling currencyRateDELETERequestCurrencyIDRatesRateIDDelete'
            );
        }
        // verify the required parameter 'currency_id' is set
        if ($currency_id === null || (is_array($currency_id) && count($currency_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $currency_id when calling currencyRateDELETERequestCurrencyIDRatesRateIDDelete'
            );
        }
        // verify the required parameter 'rate_id' is set
        if ($rate_id === null || (is_array($rate_id) && count($rate_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $rate_id when calling currencyRateDELETERequestCurrencyIDRatesRateIDDelete'
            );
        }

        $resourcePath = '/Currencies/{CurrencyID}/Rates/{RateID}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        if ($date_entered !== null) {
            $queryParams['DateEntered'] = ObjectSerializer::toQueryValue($date_entered);
        }
        // query params
        if ($effective_date !== null) {
            $queryParams['EffectiveDate'] = ObjectSerializer::toQueryValue($effective_date);
        }
        // query params
        if ($effective_date_end !== null) {
            $queryParams['EffectiveDateEnd'] = ObjectSerializer::toQueryValue($effective_date_end);
        }
        // query params
        if ($transaction_rate !== null) {
            $queryParams['TransactionRate'] = ObjectSerializer::toQueryValue($transaction_rate);
        }
        // header params
        if ($accept !== null) {
            $headerParams['Accept'] = ObjectSerializer::toHeaderValue($accept);
        }
        // header params
        if ($jiwa_stateful !== null) {
            $headerParams['jiwa-stateful'] = ObjectSerializer::toHeaderValue($jiwa_stateful);
        }

        // path params
        if ($currency_id !== null) {
            $resourcePath = str_replace(
                '{' . 'CurrencyID' . '}',
                ObjectSerializer::toPathValue($currency_id),
                $resourcePath
            );
        }
        // path params
        if ($rate_id !== null) {
            $resourcePath = str_replace(
                '{' . 'RateID' . '}',
                ObjectSerializer::toPathValue($rate_id),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json', 'application/xml']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json', 'application/xml'],
                ['application/x-www-form-urlencoded', 'application/json', 'application/xml']
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            
            if($headers['Content-Type'] === 'application/json') {
                // \stdClass has no __toString(), so we should encode it manually
                if ($httpBody instanceof \stdClass) {
                    $httpBody = \GuzzleHttp\json_encode($httpBody);
                }
                // array has no __toString(), so we should encode it manually
                if(is_array($httpBody)) {
                    $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($httpBody));
                }
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\Query::build($formParams);
            }
        }

        // this endpoint requires HTTP basic authentication
        if ($this->config->getUsername() !== null || $this->config->getPassword() !== null) {
            $headers['Authorization'] = 'Basic ' . base64_encode($this->config->getUsername() . ":" . $this->config->getPassword());
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\Query::build($queryParams);
        return new Request(
            'DELETE',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation currencyRateGETRequestCurrencyIDRatesRateIDGet
     *
     * Retrieves a currency rate.
     *
     * @param  string $accept Accept Header (required)
     * @param  string $currency_id currency_id (required)
     * @param  string $rate_id rate_id (required)
     * @param  bool $jiwa_stateful Stateful indicator (optional)
     *
     * @throws \Jiwa\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Jiwa\Model\CurrencyRate
     */
    public function currencyRateGETRequestCurrencyIDRatesRateIDGet($accept, $currency_id, $rate_id, $jiwa_stateful = null)
    {
        list($response) = $this->currencyRateGETRequestCurrencyIDRatesRateIDGetWithHttpInfo($accept, $currency_id, $rate_id, $jiwa_stateful);
        return $response;
    }

    /**
     * Operation currencyRateGETRequestCurrencyIDRatesRateIDGetWithHttpInfo
     *
     * Retrieves a currency rate.
     *
     * @param  string $accept Accept Header (required)
     * @param  string $currency_id (required)
     * @param  string $rate_id (required)
     * @param  bool $jiwa_stateful Stateful indicator (optional)
     *
     * @throws \Jiwa\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Jiwa\Model\CurrencyRate, HTTP status code, HTTP response headers (array of strings)
     */
    public function currencyRateGETRequestCurrencyIDRatesRateIDGetWithHttpInfo($accept, $currency_id, $rate_id, $jiwa_stateful = null)
    {
        $returnType = '\Jiwa\Model\CurrencyRate';
        $request = $this->currencyRateGETRequestCurrencyIDRatesRateIDGetRequest($accept, $currency_id, $rate_id, $jiwa_stateful);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Jiwa\Model\CurrencyRate',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 404:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Jiwa\Model\CurrencyRate',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 401:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Jiwa\Model\CurrencyRate',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 403:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Jiwa\Model\CurrencyRate',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation currencyRateGETRequestCurrencyIDRatesRateIDGetAsync
     *
     * Retrieves a currency rate.
     *
     * @param  string $accept Accept Header (required)
     * @param  string $currency_id (required)
     * @param  string $rate_id (required)
     * @param  bool $jiwa_stateful Stateful indicator (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function currencyRateGETRequestCurrencyIDRatesRateIDGetAsync($accept, $currency_id, $rate_id, $jiwa_stateful = null)
    {
        return $this->currencyRateGETRequestCurrencyIDRatesRateIDGetAsyncWithHttpInfo($accept, $currency_id, $rate_id, $jiwa_stateful)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation currencyRateGETRequestCurrencyIDRatesRateIDGetAsyncWithHttpInfo
     *
     * Retrieves a currency rate.
     *
     * @param  string $accept Accept Header (required)
     * @param  string $currency_id (required)
     * @param  string $rate_id (required)
     * @param  bool $jiwa_stateful Stateful indicator (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function currencyRateGETRequestCurrencyIDRatesRateIDGetAsyncWithHttpInfo($accept, $currency_id, $rate_id, $jiwa_stateful = null)
    {
        $returnType = '\Jiwa\Model\CurrencyRate';
        $request = $this->currencyRateGETRequestCurrencyIDRatesRateIDGetRequest($accept, $currency_id, $rate_id, $jiwa_stateful);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'currencyRateGETRequestCurrencyIDRatesRateIDGet'
     *
     * @param  string $accept Accept Header (required)
     * @param  string $currency_id (required)
     * @param  string $rate_id (required)
     * @param  bool $jiwa_stateful Stateful indicator (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function currencyRateGETRequestCurrencyIDRatesRateIDGetRequest($accept, $currency_id, $rate_id, $jiwa_stateful = null)
    {
        // verify the required parameter 'accept' is set
        if ($accept === null || (is_array($accept) && count($accept) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $accept when calling currencyRateGETRequestCurrencyIDRatesRateIDGet'
            );
        }
        // verify the required parameter 'currency_id' is set
        if ($currency_id === null || (is_array($currency_id) && count($currency_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $currency_id when calling currencyRateGETRequestCurrencyIDRatesRateIDGet'
            );
        }
        // verify the required parameter 'rate_id' is set
        if ($rate_id === null || (is_array($rate_id) && count($rate_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $rate_id when calling currencyRateGETRequestCurrencyIDRatesRateIDGet'
            );
        }

        $resourcePath = '/Currencies/{CurrencyID}/Rates/{RateID}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // header params
        if ($accept !== null) {
            $headerParams['Accept'] = ObjectSerializer::toHeaderValue($accept);
        }
        // header params
        if ($jiwa_stateful !== null) {
            $headerParams['jiwa-stateful'] = ObjectSerializer::toHeaderValue($jiwa_stateful);
        }

        // path params
        if ($currency_id !== null) {
            $resourcePath = str_replace(
                '{' . 'CurrencyID' . '}',
                ObjectSerializer::toPathValue($currency_id),
                $resourcePath
            );
        }
        // path params
        if ($rate_id !== null) {
            $resourcePath = str_replace(
                '{' . 'RateID' . '}',
                ObjectSerializer::toPathValue($rate_id),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json', 'application/xml']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json', 'application/xml'],
                ['application/x-www-form-urlencoded', 'application/json', 'application/xml']
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            
            if($headers['Content-Type'] === 'application/json') {
                // \stdClass has no __toString(), so we should encode it manually
                if ($httpBody instanceof \stdClass) {
                    $httpBody = \GuzzleHttp\json_encode($httpBody);
                }
                // array has no __toString(), so we should encode it manually
                if(is_array($httpBody)) {
                    $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($httpBody));
                }
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\Query::build($formParams);
            }
        }

        // this endpoint requires HTTP basic authentication
        if ($this->config->getUsername() !== null || $this->config->getPassword() !== null) {
            $headers['Authorization'] = 'Basic ' . base64_encode($this->config->getUsername() . ":" . $this->config->getPassword());
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\Query::build($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation currencyRatePATCHRequestCurrencyIDRatesRateIDUpdate
     *
     * Updates a rate for a currency.
     *
     * @param  string $accept Accept Header (required)
     * @param  string $currency_id currency_id (required)
     * @param  string $rate_id rate_id (required)
     * @param  bool $jiwa_stateful Stateful indicator (optional)
     * @param  \DateTime $date_entered date_entered (optional)
     * @param  \DateTime $effective_date effective_date (optional)
     * @param  \DateTime $effective_date_end effective_date_end (optional)
     * @param  double $transaction_rate transaction_rate (optional)
     * @param  \Jiwa\Model\CurrencyRatePATCHRequest $body body (optional)
     *
     * @throws \Jiwa\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Jiwa\Model\CurrencyRate
     */
    public function currencyRatePATCHRequestCurrencyIDRatesRateIDUpdate($accept, $currency_id, $rate_id, $jiwa_stateful = null, $date_entered = null, $effective_date = null, $effective_date_end = null, $transaction_rate = null, $body = null)
    {
        list($response) = $this->currencyRatePATCHRequestCurrencyIDRatesRateIDUpdateWithHttpInfo($accept, $currency_id, $rate_id, $jiwa_stateful, $date_entered, $effective_date, $effective_date_end, $transaction_rate, $body);
        return $response;
    }

    /**
     * Operation currencyRatePATCHRequestCurrencyIDRatesRateIDUpdateWithHttpInfo
     *
     * Updates a rate for a currency.
     *
     * @param  string $accept Accept Header (required)
     * @param  string $currency_id (required)
     * @param  string $rate_id (required)
     * @param  bool $jiwa_stateful Stateful indicator (optional)
     * @param  \DateTime $date_entered (optional)
     * @param  \DateTime $effective_date (optional)
     * @param  \DateTime $effective_date_end (optional)
     * @param  double $transaction_rate (optional)
     * @param  \Jiwa\Model\CurrencyRatePATCHRequest $body (optional)
     *
     * @throws \Jiwa\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Jiwa\Model\CurrencyRate, HTTP status code, HTTP response headers (array of strings)
     */
    public function currencyRatePATCHRequestCurrencyIDRatesRateIDUpdateWithHttpInfo($accept, $currency_id, $rate_id, $jiwa_stateful = null, $date_entered = null, $effective_date = null, $effective_date_end = null, $transaction_rate = null, $body = null)
    {
        $returnType = '\Jiwa\Model\CurrencyRate';
        $request = $this->currencyRatePATCHRequestCurrencyIDRatesRateIDUpdateRequest($accept, $currency_id, $rate_id, $jiwa_stateful, $date_entered, $effective_date, $effective_date_end, $transaction_rate, $body);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Jiwa\Model\CurrencyRate',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 403:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Jiwa\Model\CurrencyRate',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 404:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Jiwa\Model\CurrencyRate',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 401:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Jiwa\Model\CurrencyRate',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation currencyRatePATCHRequestCurrencyIDRatesRateIDUpdateAsync
     *
     * Updates a rate for a currency.
     *
     * @param  string $accept Accept Header (required)
     * @param  string $currency_id (required)
     * @param  string $rate_id (required)
     * @param  bool $jiwa_stateful Stateful indicator (optional)
     * @param  \DateTime $date_entered (optional)
     * @param  \DateTime $effective_date (optional)
     * @param  \DateTime $effective_date_end (optional)
     * @param  double $transaction_rate (optional)
     * @param  \Jiwa\Model\CurrencyRatePATCHRequest $body (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function currencyRatePATCHRequestCurrencyIDRatesRateIDUpdateAsync($accept, $currency_id, $rate_id, $jiwa_stateful = null, $date_entered = null, $effective_date = null, $effective_date_end = null, $transaction_rate = null, $body = null)
    {
        return $this->currencyRatePATCHRequestCurrencyIDRatesRateIDUpdateAsyncWithHttpInfo($accept, $currency_id, $rate_id, $jiwa_stateful, $date_entered, $effective_date, $effective_date_end, $transaction_rate, $body)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation currencyRatePATCHRequestCurrencyIDRatesRateIDUpdateAsyncWithHttpInfo
     *
     * Updates a rate for a currency.
     *
     * @param  string $accept Accept Header (required)
     * @param  string $currency_id (required)
     * @param  string $rate_id (required)
     * @param  bool $jiwa_stateful Stateful indicator (optional)
     * @param  \DateTime $date_entered (optional)
     * @param  \DateTime $effective_date (optional)
     * @param  \DateTime $effective_date_end (optional)
     * @param  double $transaction_rate (optional)
     * @param  \Jiwa\Model\CurrencyRatePATCHRequest $body (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function currencyRatePATCHRequestCurrencyIDRatesRateIDUpdateAsyncWithHttpInfo($accept, $currency_id, $rate_id, $jiwa_stateful = null, $date_entered = null, $effective_date = null, $effective_date_end = null, $transaction_rate = null, $body = null)
    {
        $returnType = '\Jiwa\Model\CurrencyRate';
        $request = $this->currencyRatePATCHRequestCurrencyIDRatesRateIDUpdateRequest($accept, $currency_id, $rate_id, $jiwa_stateful, $date_entered, $effective_date, $effective_date_end, $transaction_rate, $body);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'currencyRatePATCHRequestCurrencyIDRatesRateIDUpdate'
     *
     * @param  string $accept Accept Header (required)
     * @param  string $currency_id (required)
     * @param  string $rate_id (required)
     * @param  bool $jiwa_stateful Stateful indicator (optional)
     * @param  \DateTime $date_entered (optional)
     * @param  \DateTime $effective_date (optional)
     * @param  \DateTime $effective_date_end (optional)
     * @param  double $transaction_rate (optional)
     * @param  \Jiwa\Model\CurrencyRatePATCHRequest $body (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function currencyRatePATCHRequestCurrencyIDRatesRateIDUpdateRequest($accept, $currency_id, $rate_id, $jiwa_stateful = null, $date_entered = null, $effective_date = null, $effective_date_end = null, $transaction_rate = null, $body = null)
    {
        // verify the required parameter 'accept' is set
        if ($accept === null || (is_array($accept) && count($accept) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $accept when calling currencyRatePATCHRequestCurrencyIDRatesRateIDUpdate'
            );
        }
        // verify the required parameter 'currency_id' is set
        if ($currency_id === null || (is_array($currency_id) && count($currency_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $currency_id when calling currencyRatePATCHRequestCurrencyIDRatesRateIDUpdate'
            );
        }
        // verify the required parameter 'rate_id' is set
        if ($rate_id === null || (is_array($rate_id) && count($rate_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $rate_id when calling currencyRatePATCHRequestCurrencyIDRatesRateIDUpdate'
            );
        }

        $resourcePath = '/Currencies/{CurrencyID}/Rates/{RateID}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        if ($date_entered !== null) {
            $queryParams['DateEntered'] = ObjectSerializer::toQueryValue($date_entered);
        }
        // query params
        if ($effective_date !== null) {
            $queryParams['EffectiveDate'] = ObjectSerializer::toQueryValue($effective_date);
        }
        // query params
        if ($effective_date_end !== null) {
            $queryParams['EffectiveDateEnd'] = ObjectSerializer::toQueryValue($effective_date_end);
        }
        // query params
        if ($transaction_rate !== null) {
            $queryParams['TransactionRate'] = ObjectSerializer::toQueryValue($transaction_rate);
        }
        // header params
        if ($accept !== null) {
            $headerParams['Accept'] = ObjectSerializer::toHeaderValue($accept);
        }
        // header params
        if ($jiwa_stateful !== null) {
            $headerParams['jiwa-stateful'] = ObjectSerializer::toHeaderValue($jiwa_stateful);
        }

        // path params
        if ($currency_id !== null) {
            $resourcePath = str_replace(
                '{' . 'CurrencyID' . '}',
                ObjectSerializer::toPathValue($currency_id),
                $resourcePath
            );
        }
        // path params
        if ($rate_id !== null) {
            $resourcePath = str_replace(
                '{' . 'RateID' . '}',
                ObjectSerializer::toPathValue($rate_id),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;
        if (isset($body)) {
            $_tempBody = $body;
        }

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json', 'application/xml']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json', 'application/xml'],
                ['application/x-www-form-urlencoded', 'application/json', 'application/xml']
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            
            if($headers['Content-Type'] === 'application/json') {
                // \stdClass has no __toString(), so we should encode it manually
                if ($httpBody instanceof \stdClass) {
                    $httpBody = \GuzzleHttp\json_encode($httpBody);
                }
                // array has no __toString(), so we should encode it manually
                if(is_array($httpBody)) {
                    $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($httpBody));
                }
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\Query::build($formParams);
            }
        }

        // this endpoint requires HTTP basic authentication
        if ($this->config->getUsername() !== null || $this->config->getPassword() !== null) {
            $headers['Authorization'] = 'Basic ' . base64_encode($this->config->getUsername() . ":" . $this->config->getPassword());
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\Query::build($queryParams);
        return new Request(
            'PATCH',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation currencyRatePOSTRequestCurrencyIDRatesPost
     *
     * Appends a rate to a currency.
     *
     * @param  string $accept Accept Header (required)
     * @param  string $currency_id currency_id (required)
     * @param  bool $jiwa_stateful Stateful indicator (optional)
     * @param  \DateTime $date_entered date_entered (optional)
     * @param  \DateTime $effective_date effective_date (optional)
     * @param  \DateTime $effective_date_end effective_date_end (optional)
     * @param  double $transaction_rate transaction_rate (optional)
     * @param  \Jiwa\Model\CurrencyRatePOSTRequest $body body (optional)
     *
     * @throws \Jiwa\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Jiwa\Model\CurrencyRate
     */
    public function currencyRatePOSTRequestCurrencyIDRatesPost($accept, $currency_id, $jiwa_stateful = null, $date_entered = null, $effective_date = null, $effective_date_end = null, $transaction_rate = null, $body = null)
    {
        list($response) = $this->currencyRatePOSTRequestCurrencyIDRatesPostWithHttpInfo($accept, $currency_id, $jiwa_stateful, $date_entered, $effective_date, $effective_date_end, $transaction_rate, $body);
        return $response;
    }

    /**
     * Operation currencyRatePOSTRequestCurrencyIDRatesPostWithHttpInfo
     *
     * Appends a rate to a currency.
     *
     * @param  string $accept Accept Header (required)
     * @param  string $currency_id (required)
     * @param  bool $jiwa_stateful Stateful indicator (optional)
     * @param  \DateTime $date_entered (optional)
     * @param  \DateTime $effective_date (optional)
     * @param  \DateTime $effective_date_end (optional)
     * @param  double $transaction_rate (optional)
     * @param  \Jiwa\Model\CurrencyRatePOSTRequest $body (optional)
     *
     * @throws \Jiwa\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Jiwa\Model\CurrencyRate, HTTP status code, HTTP response headers (array of strings)
     */
    public function currencyRatePOSTRequestCurrencyIDRatesPostWithHttpInfo($accept, $currency_id, $jiwa_stateful = null, $date_entered = null, $effective_date = null, $effective_date_end = null, $transaction_rate = null, $body = null)
    {
        $returnType = '\Jiwa\Model\CurrencyRate';
        $request = $this->currencyRatePOSTRequestCurrencyIDRatesPostRequest($accept, $currency_id, $jiwa_stateful, $date_entered, $effective_date, $effective_date_end, $transaction_rate, $body);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Jiwa\Model\CurrencyRate',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 201:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Jiwa\Model\CurrencyRate',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 404:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Jiwa\Model\CurrencyRate',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 401:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Jiwa\Model\CurrencyRate',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 403:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Jiwa\Model\CurrencyRate',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation currencyRatePOSTRequestCurrencyIDRatesPostAsync
     *
     * Appends a rate to a currency.
     *
     * @param  string $accept Accept Header (required)
     * @param  string $currency_id (required)
     * @param  bool $jiwa_stateful Stateful indicator (optional)
     * @param  \DateTime $date_entered (optional)
     * @param  \DateTime $effective_date (optional)
     * @param  \DateTime $effective_date_end (optional)
     * @param  double $transaction_rate (optional)
     * @param  \Jiwa\Model\CurrencyRatePOSTRequest $body (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function currencyRatePOSTRequestCurrencyIDRatesPostAsync($accept, $currency_id, $jiwa_stateful = null, $date_entered = null, $effective_date = null, $effective_date_end = null, $transaction_rate = null, $body = null)
    {
        return $this->currencyRatePOSTRequestCurrencyIDRatesPostAsyncWithHttpInfo($accept, $currency_id, $jiwa_stateful, $date_entered, $effective_date, $effective_date_end, $transaction_rate, $body)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation currencyRatePOSTRequestCurrencyIDRatesPostAsyncWithHttpInfo
     *
     * Appends a rate to a currency.
     *
     * @param  string $accept Accept Header (required)
     * @param  string $currency_id (required)
     * @param  bool $jiwa_stateful Stateful indicator (optional)
     * @param  \DateTime $date_entered (optional)
     * @param  \DateTime $effective_date (optional)
     * @param  \DateTime $effective_date_end (optional)
     * @param  double $transaction_rate (optional)
     * @param  \Jiwa\Model\CurrencyRatePOSTRequest $body (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function currencyRatePOSTRequestCurrencyIDRatesPostAsyncWithHttpInfo($accept, $currency_id, $jiwa_stateful = null, $date_entered = null, $effective_date = null, $effective_date_end = null, $transaction_rate = null, $body = null)
    {
        $returnType = '\Jiwa\Model\CurrencyRate';
        $request = $this->currencyRatePOSTRequestCurrencyIDRatesPostRequest($accept, $currency_id, $jiwa_stateful, $date_entered, $effective_date, $effective_date_end, $transaction_rate, $body);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'currencyRatePOSTRequestCurrencyIDRatesPost'
     *
     * @param  string $accept Accept Header (required)
     * @param  string $currency_id (required)
     * @param  bool $jiwa_stateful Stateful indicator (optional)
     * @param  \DateTime $date_entered (optional)
     * @param  \DateTime $effective_date (optional)
     * @param  \DateTime $effective_date_end (optional)
     * @param  double $transaction_rate (optional)
     * @param  \Jiwa\Model\CurrencyRatePOSTRequest $body (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function currencyRatePOSTRequestCurrencyIDRatesPostRequest($accept, $currency_id, $jiwa_stateful = null, $date_entered = null, $effective_date = null, $effective_date_end = null, $transaction_rate = null, $body = null)
    {
        // verify the required parameter 'accept' is set
        if ($accept === null || (is_array($accept) && count($accept) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $accept when calling currencyRatePOSTRequestCurrencyIDRatesPost'
            );
        }
        // verify the required parameter 'currency_id' is set
        if ($currency_id === null || (is_array($currency_id) && count($currency_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $currency_id when calling currencyRatePOSTRequestCurrencyIDRatesPost'
            );
        }

        $resourcePath = '/Currencies/{CurrencyID}/Rates';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        if ($date_entered !== null) {
            $queryParams['DateEntered'] = ObjectSerializer::toQueryValue($date_entered);
        }
        // query params
        if ($effective_date !== null) {
            $queryParams['EffectiveDate'] = ObjectSerializer::toQueryValue($effective_date);
        }
        // query params
        if ($effective_date_end !== null) {
            $queryParams['EffectiveDateEnd'] = ObjectSerializer::toQueryValue($effective_date_end);
        }
        // query params
        if ($transaction_rate !== null) {
            $queryParams['TransactionRate'] = ObjectSerializer::toQueryValue($transaction_rate);
        }
        // header params
        if ($accept !== null) {
            $headerParams['Accept'] = ObjectSerializer::toHeaderValue($accept);
        }
        // header params
        if ($jiwa_stateful !== null) {
            $headerParams['jiwa-stateful'] = ObjectSerializer::toHeaderValue($jiwa_stateful);
        }

        // path params
        if ($currency_id !== null) {
            $resourcePath = str_replace(
                '{' . 'CurrencyID' . '}',
                ObjectSerializer::toPathValue($currency_id),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;
        if (isset($body)) {
            $_tempBody = $body;
        }

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json', 'application/xml']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json', 'application/xml'],
                ['application/x-www-form-urlencoded', 'application/json', 'application/xml']
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            
            if($headers['Content-Type'] === 'application/json') {
                // \stdClass has no __toString(), so we should encode it manually
                if ($httpBody instanceof \stdClass) {
                    $httpBody = \GuzzleHttp\json_encode($httpBody);
                }
                // array has no __toString(), so we should encode it manually
                if(is_array($httpBody)) {
                    $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($httpBody));
                }
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\Query::build($formParams);
            }
        }

        // this endpoint requires HTTP basic authentication
        if ($this->config->getUsername() !== null || $this->config->getPassword() !== null) {
            $headers['Authorization'] = 'Basic ' . base64_encode($this->config->getUsername() . ":" . $this->config->getPassword());
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\Query::build($queryParams);
        return new Request(
            'POST',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation currencySAVERequestSaveGet
     *
     * Saves a stateful currency.
     *
     * @param  string $accept Accept Header (required)
     * @param  bool $jiwa_stateful Stateful indicator (optional)
     * @param  string $currency_id currency_id (optional)
     *
     * @throws \Jiwa\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Jiwa\Model\Currency
     */
    public function currencySAVERequestSaveGet($accept, $jiwa_stateful = null, $currency_id = null)
    {
        list($response) = $this->currencySAVERequestSaveGetWithHttpInfo($accept, $jiwa_stateful, $currency_id);
        return $response;
    }

    /**
     * Operation currencySAVERequestSaveGetWithHttpInfo
     *
     * Saves a stateful currency.
     *
     * @param  string $accept Accept Header (required)
     * @param  bool $jiwa_stateful Stateful indicator (optional)
     * @param  string $currency_id (optional)
     *
     * @throws \Jiwa\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Jiwa\Model\Currency, HTTP status code, HTTP response headers (array of strings)
     */
    public function currencySAVERequestSaveGetWithHttpInfo($accept, $jiwa_stateful = null, $currency_id = null)
    {
        $returnType = '\Jiwa\Model\Currency';
        $request = $this->currencySAVERequestSaveGetRequest($accept, $jiwa_stateful, $currency_id);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Jiwa\Model\Currency',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 403:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Jiwa\Model\Currency',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 404:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Jiwa\Model\Currency',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 401:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Jiwa\Model\Currency',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation currencySAVERequestSaveGetAsync
     *
     * Saves a stateful currency.
     *
     * @param  string $accept Accept Header (required)
     * @param  bool $jiwa_stateful Stateful indicator (optional)
     * @param  string $currency_id (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function currencySAVERequestSaveGetAsync($accept, $jiwa_stateful = null, $currency_id = null)
    {
        return $this->currencySAVERequestSaveGetAsyncWithHttpInfo($accept, $jiwa_stateful, $currency_id)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation currencySAVERequestSaveGetAsyncWithHttpInfo
     *
     * Saves a stateful currency.
     *
     * @param  string $accept Accept Header (required)
     * @param  bool $jiwa_stateful Stateful indicator (optional)
     * @param  string $currency_id (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function currencySAVERequestSaveGetAsyncWithHttpInfo($accept, $jiwa_stateful = null, $currency_id = null)
    {
        $returnType = '\Jiwa\Model\Currency';
        $request = $this->currencySAVERequestSaveGetRequest($accept, $jiwa_stateful, $currency_id);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'currencySAVERequestSaveGet'
     *
     * @param  string $accept Accept Header (required)
     * @param  bool $jiwa_stateful Stateful indicator (optional)
     * @param  string $currency_id (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function currencySAVERequestSaveGetRequest($accept, $jiwa_stateful = null, $currency_id = null)
    {
        // verify the required parameter 'accept' is set
        if ($accept === null || (is_array($accept) && count($accept) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $accept when calling currencySAVERequestSaveGet'
            );
        }

        $resourcePath = '/Currencies/Save';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        if ($currency_id !== null) {
            $queryParams['CurrencyID'] = ObjectSerializer::toQueryValue($currency_id);
        }
        // header params
        if ($accept !== null) {
            $headerParams['Accept'] = ObjectSerializer::toHeaderValue($accept);
        }
        // header params
        if ($jiwa_stateful !== null) {
            $headerParams['jiwa-stateful'] = ObjectSerializer::toHeaderValue($jiwa_stateful);
        }


        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json', 'application/xml']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json', 'application/xml'],
                ['application/x-www-form-urlencoded', 'application/json', 'application/xml']
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            
            if($headers['Content-Type'] === 'application/json') {
                // \stdClass has no __toString(), so we should encode it manually
                if ($httpBody instanceof \stdClass) {
                    $httpBody = \GuzzleHttp\json_encode($httpBody);
                }
                // array has no __toString(), so we should encode it manually
                if(is_array($httpBody)) {
                    $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($httpBody));
                }
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\Query::build($formParams);
            }
        }

        // this endpoint requires HTTP basic authentication
        if ($this->config->getUsername() !== null || $this->config->getPassword() !== null) {
            $headers['Authorization'] = 'Basic ' . base64_encode($this->config->getUsername() . ":" . $this->config->getPassword());
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\Query::build($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Create http client option
     *
     * @throws \RuntimeException on file opening failure
     * @return array of http client options
     */
    protected function createHttpClientOption()
    {
        $options = [];
        if ($this->config->getDebug()) {
            $options[RequestOptions::DEBUG] = fopen($this->config->getDebugFile(), 'a');
            if (!$options[RequestOptions::DEBUG]) {
                throw new \RuntimeException('Failed to open the debug file: ' . $this->config->getDebugFile());
            }
        }

        return $options;
    }
}

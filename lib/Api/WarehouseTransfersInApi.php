<?php
/**
 * WarehouseTransfersInApi
 * PHP version 5
 *
 * @category Class
 * @package  Jiwa
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * JiwaAPI
 *
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: 1.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 * Swagger Codegen version: 2.4.28-SNAPSHOT
 */

/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Jiwa\Api;

use GuzzleHttp\Client;
use GuzzleHttp\ClientInterface;
use GuzzleHttp\Exception\RequestException;
use GuzzleHttp\Psr7\MultipartStream;
use GuzzleHttp\Psr7\Request;
use GuzzleHttp\RequestOptions;
use Jiwa\ApiException;
use Jiwa\Configuration;
use Jiwa\HeaderSelector;
use Jiwa\ObjectSerializer;

/**
 * WarehouseTransfersInApi Class Doc Comment
 *
 * @category Class
 * @package  Jiwa
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class WarehouseTransfersInApi
{
    /**
     * @var ClientInterface
     */
    protected $client;

    /**
     * @var Configuration
     */
    protected $config;

    /**
     * @var HeaderSelector
     */
    protected $headerSelector;

    /**
     * @param ClientInterface $client
     * @param Configuration   $config
     * @param HeaderSelector  $selector
     */
    public function __construct(
        ClientInterface $client = null,
        Configuration $config = null,
        HeaderSelector $selector = null
    ) {
        $this->client = $client ?: new Client();
        $this->config = $config ?: new Configuration();
        $this->headerSelector = $selector ?: new HeaderSelector();
    }

    /**
     * @return Configuration
     */
    public function getConfig()
    {
        return $this->config;
    }

    /**
     * Operation warehouseTransferInABANDONRequestAbandonDelete
     *
     * Abandons a stateful warehouse transfer in.
     *
     * @param  string $accept Accept Header (required)
     * @param  bool $jiwa_stateful Stateful indicator (optional)
     * @param  string $warehouse_transfer_in_id warehouse_transfer_in_id (optional)
     *
     * @throws \Jiwa\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Jiwa\Model\Object
     */
    public function warehouseTransferInABANDONRequestAbandonDelete($accept, $jiwa_stateful = null, $warehouse_transfer_in_id = null)
    {
        list($response) = $this->warehouseTransferInABANDONRequestAbandonDeleteWithHttpInfo($accept, $jiwa_stateful, $warehouse_transfer_in_id);
        return $response;
    }

    /**
     * Operation warehouseTransferInABANDONRequestAbandonDeleteWithHttpInfo
     *
     * Abandons a stateful warehouse transfer in.
     *
     * @param  string $accept Accept Header (required)
     * @param  bool $jiwa_stateful Stateful indicator (optional)
     * @param  string $warehouse_transfer_in_id (optional)
     *
     * @throws \Jiwa\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Jiwa\Model\Object, HTTP status code, HTTP response headers (array of strings)
     */
    public function warehouseTransferInABANDONRequestAbandonDeleteWithHttpInfo($accept, $jiwa_stateful = null, $warehouse_transfer_in_id = null)
    {
        $returnType = '\Jiwa\Model\Object';
        $request = $this->warehouseTransferInABANDONRequestAbandonDeleteRequest($accept, $jiwa_stateful, $warehouse_transfer_in_id);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Jiwa\Model\Object',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 403:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Jiwa\Model\Object',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 401:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Jiwa\Model\Object',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 404:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Jiwa\Model\Object',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation warehouseTransferInABANDONRequestAbandonDeleteAsync
     *
     * Abandons a stateful warehouse transfer in.
     *
     * @param  string $accept Accept Header (required)
     * @param  bool $jiwa_stateful Stateful indicator (optional)
     * @param  string $warehouse_transfer_in_id (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function warehouseTransferInABANDONRequestAbandonDeleteAsync($accept, $jiwa_stateful = null, $warehouse_transfer_in_id = null)
    {
        return $this->warehouseTransferInABANDONRequestAbandonDeleteAsyncWithHttpInfo($accept, $jiwa_stateful, $warehouse_transfer_in_id)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation warehouseTransferInABANDONRequestAbandonDeleteAsyncWithHttpInfo
     *
     * Abandons a stateful warehouse transfer in.
     *
     * @param  string $accept Accept Header (required)
     * @param  bool $jiwa_stateful Stateful indicator (optional)
     * @param  string $warehouse_transfer_in_id (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function warehouseTransferInABANDONRequestAbandonDeleteAsyncWithHttpInfo($accept, $jiwa_stateful = null, $warehouse_transfer_in_id = null)
    {
        $returnType = '\Jiwa\Model\Object';
        $request = $this->warehouseTransferInABANDONRequestAbandonDeleteRequest($accept, $jiwa_stateful, $warehouse_transfer_in_id);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'warehouseTransferInABANDONRequestAbandonDelete'
     *
     * @param  string $accept Accept Header (required)
     * @param  bool $jiwa_stateful Stateful indicator (optional)
     * @param  string $warehouse_transfer_in_id (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function warehouseTransferInABANDONRequestAbandonDeleteRequest($accept, $jiwa_stateful = null, $warehouse_transfer_in_id = null)
    {
        // verify the required parameter 'accept' is set
        if ($accept === null || (is_array($accept) && count($accept) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $accept when calling warehouseTransferInABANDONRequestAbandonDelete'
            );
        }

        $resourcePath = '/WarehouseTransfersIn/Abandon';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        if ($warehouse_transfer_in_id !== null) {
            $queryParams['WarehouseTransferInID'] = ObjectSerializer::toQueryValue($warehouse_transfer_in_id);
        }
        // header params
        if ($accept !== null) {
            $headerParams['Accept'] = ObjectSerializer::toHeaderValue($accept);
        }
        // header params
        if ($jiwa_stateful !== null) {
            $headerParams['jiwa-stateful'] = ObjectSerializer::toHeaderValue($jiwa_stateful);
        }


        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json', 'application/xml']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json', 'application/xml'],
                ['application/x-www-form-urlencoded', 'application/json', 'application/xml']
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            
            if($headers['Content-Type'] === 'application/json') {
                // \stdClass has no __toString(), so we should encode it manually
                if ($httpBody instanceof \stdClass) {
                    $httpBody = \GuzzleHttp\json_encode($httpBody);
                }
                // array has no __toString(), so we should encode it manually
                if(is_array($httpBody)) {
                    $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($httpBody));
                }
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\Query::build($formParams);
            }
        }

        // this endpoint requires HTTP basic authentication
        if ($this->config->getUsername() !== null || $this->config->getPassword() !== null) {
            $headers['Authorization'] = 'Basic ' . base64_encode($this->config->getUsername() . ":" . $this->config->getPassword());
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\Query::build($queryParams);
        return new Request(
            'DELETE',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation warehouseTransferInACTIVATERequestActivateWarehouseTransferInIDPost
     *
     * Activates a warehouse transfer in.
     *
     * @param  string $accept Accept Header (required)
     * @param  string $warehouse_transfer_in_id warehouse_transfer_in_id (required)
     * @param  bool $jiwa_stateful Stateful indicator (optional)
     * @param  \Jiwa\Model\WarehouseTransferInACTIVATERequest $body body (optional)
     *
     * @throws \Jiwa\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Jiwa\Model\WarehouseTransferIn
     */
    public function warehouseTransferInACTIVATERequestActivateWarehouseTransferInIDPost($accept, $warehouse_transfer_in_id, $jiwa_stateful = null, $body = null)
    {
        list($response) = $this->warehouseTransferInACTIVATERequestActivateWarehouseTransferInIDPostWithHttpInfo($accept, $warehouse_transfer_in_id, $jiwa_stateful, $body);
        return $response;
    }

    /**
     * Operation warehouseTransferInACTIVATERequestActivateWarehouseTransferInIDPostWithHttpInfo
     *
     * Activates a warehouse transfer in.
     *
     * @param  string $accept Accept Header (required)
     * @param  string $warehouse_transfer_in_id (required)
     * @param  bool $jiwa_stateful Stateful indicator (optional)
     * @param  \Jiwa\Model\WarehouseTransferInACTIVATERequest $body (optional)
     *
     * @throws \Jiwa\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Jiwa\Model\WarehouseTransferIn, HTTP status code, HTTP response headers (array of strings)
     */
    public function warehouseTransferInACTIVATERequestActivateWarehouseTransferInIDPostWithHttpInfo($accept, $warehouse_transfer_in_id, $jiwa_stateful = null, $body = null)
    {
        $returnType = '\Jiwa\Model\WarehouseTransferIn';
        $request = $this->warehouseTransferInACTIVATERequestActivateWarehouseTransferInIDPostRequest($accept, $warehouse_transfer_in_id, $jiwa_stateful, $body);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Jiwa\Model\WarehouseTransferIn',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 401:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Jiwa\Model\WarehouseTransferIn',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 403:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Jiwa\Model\WarehouseTransferIn',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 404:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Jiwa\Model\WarehouseTransferIn',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 204:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Jiwa\Model\WarehouseTransferIn',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation warehouseTransferInACTIVATERequestActivateWarehouseTransferInIDPostAsync
     *
     * Activates a warehouse transfer in.
     *
     * @param  string $accept Accept Header (required)
     * @param  string $warehouse_transfer_in_id (required)
     * @param  bool $jiwa_stateful Stateful indicator (optional)
     * @param  \Jiwa\Model\WarehouseTransferInACTIVATERequest $body (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function warehouseTransferInACTIVATERequestActivateWarehouseTransferInIDPostAsync($accept, $warehouse_transfer_in_id, $jiwa_stateful = null, $body = null)
    {
        return $this->warehouseTransferInACTIVATERequestActivateWarehouseTransferInIDPostAsyncWithHttpInfo($accept, $warehouse_transfer_in_id, $jiwa_stateful, $body)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation warehouseTransferInACTIVATERequestActivateWarehouseTransferInIDPostAsyncWithHttpInfo
     *
     * Activates a warehouse transfer in.
     *
     * @param  string $accept Accept Header (required)
     * @param  string $warehouse_transfer_in_id (required)
     * @param  bool $jiwa_stateful Stateful indicator (optional)
     * @param  \Jiwa\Model\WarehouseTransferInACTIVATERequest $body (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function warehouseTransferInACTIVATERequestActivateWarehouseTransferInIDPostAsyncWithHttpInfo($accept, $warehouse_transfer_in_id, $jiwa_stateful = null, $body = null)
    {
        $returnType = '\Jiwa\Model\WarehouseTransferIn';
        $request = $this->warehouseTransferInACTIVATERequestActivateWarehouseTransferInIDPostRequest($accept, $warehouse_transfer_in_id, $jiwa_stateful, $body);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'warehouseTransferInACTIVATERequestActivateWarehouseTransferInIDPost'
     *
     * @param  string $accept Accept Header (required)
     * @param  string $warehouse_transfer_in_id (required)
     * @param  bool $jiwa_stateful Stateful indicator (optional)
     * @param  \Jiwa\Model\WarehouseTransferInACTIVATERequest $body (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function warehouseTransferInACTIVATERequestActivateWarehouseTransferInIDPostRequest($accept, $warehouse_transfer_in_id, $jiwa_stateful = null, $body = null)
    {
        // verify the required parameter 'accept' is set
        if ($accept === null || (is_array($accept) && count($accept) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $accept when calling warehouseTransferInACTIVATERequestActivateWarehouseTransferInIDPost'
            );
        }
        // verify the required parameter 'warehouse_transfer_in_id' is set
        if ($warehouse_transfer_in_id === null || (is_array($warehouse_transfer_in_id) && count($warehouse_transfer_in_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $warehouse_transfer_in_id when calling warehouseTransferInACTIVATERequestActivateWarehouseTransferInIDPost'
            );
        }

        $resourcePath = '/WarehouseTransfersIn/Activate/{WarehouseTransferInID}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // header params
        if ($accept !== null) {
            $headerParams['Accept'] = ObjectSerializer::toHeaderValue($accept);
        }
        // header params
        if ($jiwa_stateful !== null) {
            $headerParams['jiwa-stateful'] = ObjectSerializer::toHeaderValue($jiwa_stateful);
        }

        // path params
        if ($warehouse_transfer_in_id !== null) {
            $resourcePath = str_replace(
                '{' . 'WarehouseTransferInID' . '}',
                ObjectSerializer::toPathValue($warehouse_transfer_in_id),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;
        if (isset($body)) {
            $_tempBody = $body;
        }

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json', 'application/xml']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json', 'application/xml'],
                ['application/x-www-form-urlencoded', 'application/json', 'application/xml']
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            
            if($headers['Content-Type'] === 'application/json') {
                // \stdClass has no __toString(), so we should encode it manually
                if ($httpBody instanceof \stdClass) {
                    $httpBody = \GuzzleHttp\json_encode($httpBody);
                }
                // array has no __toString(), so we should encode it manually
                if(is_array($httpBody)) {
                    $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($httpBody));
                }
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\Query::build($formParams);
            }
        }

        // this endpoint requires HTTP basic authentication
        if ($this->config->getUsername() !== null || $this->config->getPassword() !== null) {
            $headers['Authorization'] = 'Basic ' . base64_encode($this->config->getUsername() . ":" . $this->config->getPassword());
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\Query::build($queryParams);
        return new Request(
            'POST',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation warehouseTransferInGETRequestWarehouseTransferInIDGet
     *
     * Retrieves a warehouse transfer in.
     *
     * @param  string $accept Accept Header (required)
     * @param  string $warehouse_transfer_in_id warehouse_transfer_in_id (required)
     * @param  bool $jiwa_stateful Stateful indicator (optional)
     *
     * @throws \Jiwa\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Jiwa\Model\WarehouseTransferIn
     */
    public function warehouseTransferInGETRequestWarehouseTransferInIDGet($accept, $warehouse_transfer_in_id, $jiwa_stateful = null)
    {
        list($response) = $this->warehouseTransferInGETRequestWarehouseTransferInIDGetWithHttpInfo($accept, $warehouse_transfer_in_id, $jiwa_stateful);
        return $response;
    }

    /**
     * Operation warehouseTransferInGETRequestWarehouseTransferInIDGetWithHttpInfo
     *
     * Retrieves a warehouse transfer in.
     *
     * @param  string $accept Accept Header (required)
     * @param  string $warehouse_transfer_in_id (required)
     * @param  bool $jiwa_stateful Stateful indicator (optional)
     *
     * @throws \Jiwa\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Jiwa\Model\WarehouseTransferIn, HTTP status code, HTTP response headers (array of strings)
     */
    public function warehouseTransferInGETRequestWarehouseTransferInIDGetWithHttpInfo($accept, $warehouse_transfer_in_id, $jiwa_stateful = null)
    {
        $returnType = '\Jiwa\Model\WarehouseTransferIn';
        $request = $this->warehouseTransferInGETRequestWarehouseTransferInIDGetRequest($accept, $warehouse_transfer_in_id, $jiwa_stateful);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Jiwa\Model\WarehouseTransferIn',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 403:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Jiwa\Model\WarehouseTransferIn',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 404:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Jiwa\Model\WarehouseTransferIn',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 401:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Jiwa\Model\WarehouseTransferIn',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation warehouseTransferInGETRequestWarehouseTransferInIDGetAsync
     *
     * Retrieves a warehouse transfer in.
     *
     * @param  string $accept Accept Header (required)
     * @param  string $warehouse_transfer_in_id (required)
     * @param  bool $jiwa_stateful Stateful indicator (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function warehouseTransferInGETRequestWarehouseTransferInIDGetAsync($accept, $warehouse_transfer_in_id, $jiwa_stateful = null)
    {
        return $this->warehouseTransferInGETRequestWarehouseTransferInIDGetAsyncWithHttpInfo($accept, $warehouse_transfer_in_id, $jiwa_stateful)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation warehouseTransferInGETRequestWarehouseTransferInIDGetAsyncWithHttpInfo
     *
     * Retrieves a warehouse transfer in.
     *
     * @param  string $accept Accept Header (required)
     * @param  string $warehouse_transfer_in_id (required)
     * @param  bool $jiwa_stateful Stateful indicator (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function warehouseTransferInGETRequestWarehouseTransferInIDGetAsyncWithHttpInfo($accept, $warehouse_transfer_in_id, $jiwa_stateful = null)
    {
        $returnType = '\Jiwa\Model\WarehouseTransferIn';
        $request = $this->warehouseTransferInGETRequestWarehouseTransferInIDGetRequest($accept, $warehouse_transfer_in_id, $jiwa_stateful);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'warehouseTransferInGETRequestWarehouseTransferInIDGet'
     *
     * @param  string $accept Accept Header (required)
     * @param  string $warehouse_transfer_in_id (required)
     * @param  bool $jiwa_stateful Stateful indicator (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function warehouseTransferInGETRequestWarehouseTransferInIDGetRequest($accept, $warehouse_transfer_in_id, $jiwa_stateful = null)
    {
        // verify the required parameter 'accept' is set
        if ($accept === null || (is_array($accept) && count($accept) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $accept when calling warehouseTransferInGETRequestWarehouseTransferInIDGet'
            );
        }
        // verify the required parameter 'warehouse_transfer_in_id' is set
        if ($warehouse_transfer_in_id === null || (is_array($warehouse_transfer_in_id) && count($warehouse_transfer_in_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $warehouse_transfer_in_id when calling warehouseTransferInGETRequestWarehouseTransferInIDGet'
            );
        }

        $resourcePath = '/WarehouseTransfersIn/{WarehouseTransferInID}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // header params
        if ($accept !== null) {
            $headerParams['Accept'] = ObjectSerializer::toHeaderValue($accept);
        }
        // header params
        if ($jiwa_stateful !== null) {
            $headerParams['jiwa-stateful'] = ObjectSerializer::toHeaderValue($jiwa_stateful);
        }

        // path params
        if ($warehouse_transfer_in_id !== null) {
            $resourcePath = str_replace(
                '{' . 'WarehouseTransferInID' . '}',
                ObjectSerializer::toPathValue($warehouse_transfer_in_id),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json', 'application/xml']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json', 'application/xml'],
                ['application/x-www-form-urlencoded', 'application/json', 'application/xml']
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            
            if($headers['Content-Type'] === 'application/json') {
                // \stdClass has no __toString(), so we should encode it manually
                if ($httpBody instanceof \stdClass) {
                    $httpBody = \GuzzleHttp\json_encode($httpBody);
                }
                // array has no __toString(), so we should encode it manually
                if(is_array($httpBody)) {
                    $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($httpBody));
                }
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\Query::build($formParams);
            }
        }

        // this endpoint requires HTTP basic authentication
        if ($this->config->getUsername() !== null || $this->config->getPassword() !== null) {
            $headers['Authorization'] = 'Basic ' . base64_encode($this->config->getUsername() . ":" . $this->config->getPassword());
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\Query::build($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation warehouseTransferInLineGETRequestWarehouseTransferInIDLinesWarehouseTransferInLineIDGet
     *
     * Retrieves a warehouse transfer in line.
     *
     * @param  string $accept Accept Header (required)
     * @param  string $warehouse_transfer_in_id warehouse_transfer_in_id (required)
     * @param  string $warehouse_transfer_in_line_id warehouse_transfer_in_line_id (required)
     * @param  bool $jiwa_stateful Stateful indicator (optional)
     *
     * @throws \Jiwa\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Jiwa\Model\WarehouseTransferInLine
     */
    public function warehouseTransferInLineGETRequestWarehouseTransferInIDLinesWarehouseTransferInLineIDGet($accept, $warehouse_transfer_in_id, $warehouse_transfer_in_line_id, $jiwa_stateful = null)
    {
        list($response) = $this->warehouseTransferInLineGETRequestWarehouseTransferInIDLinesWarehouseTransferInLineIDGetWithHttpInfo($accept, $warehouse_transfer_in_id, $warehouse_transfer_in_line_id, $jiwa_stateful);
        return $response;
    }

    /**
     * Operation warehouseTransferInLineGETRequestWarehouseTransferInIDLinesWarehouseTransferInLineIDGetWithHttpInfo
     *
     * Retrieves a warehouse transfer in line.
     *
     * @param  string $accept Accept Header (required)
     * @param  string $warehouse_transfer_in_id (required)
     * @param  string $warehouse_transfer_in_line_id (required)
     * @param  bool $jiwa_stateful Stateful indicator (optional)
     *
     * @throws \Jiwa\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Jiwa\Model\WarehouseTransferInLine, HTTP status code, HTTP response headers (array of strings)
     */
    public function warehouseTransferInLineGETRequestWarehouseTransferInIDLinesWarehouseTransferInLineIDGetWithHttpInfo($accept, $warehouse_transfer_in_id, $warehouse_transfer_in_line_id, $jiwa_stateful = null)
    {
        $returnType = '\Jiwa\Model\WarehouseTransferInLine';
        $request = $this->warehouseTransferInLineGETRequestWarehouseTransferInIDLinesWarehouseTransferInLineIDGetRequest($accept, $warehouse_transfer_in_id, $warehouse_transfer_in_line_id, $jiwa_stateful);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Jiwa\Model\WarehouseTransferInLine',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 403:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Jiwa\Model\WarehouseTransferInLine',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 404:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Jiwa\Model\WarehouseTransferInLine',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 401:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Jiwa\Model\WarehouseTransferInLine',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation warehouseTransferInLineGETRequestWarehouseTransferInIDLinesWarehouseTransferInLineIDGetAsync
     *
     * Retrieves a warehouse transfer in line.
     *
     * @param  string $accept Accept Header (required)
     * @param  string $warehouse_transfer_in_id (required)
     * @param  string $warehouse_transfer_in_line_id (required)
     * @param  bool $jiwa_stateful Stateful indicator (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function warehouseTransferInLineGETRequestWarehouseTransferInIDLinesWarehouseTransferInLineIDGetAsync($accept, $warehouse_transfer_in_id, $warehouse_transfer_in_line_id, $jiwa_stateful = null)
    {
        return $this->warehouseTransferInLineGETRequestWarehouseTransferInIDLinesWarehouseTransferInLineIDGetAsyncWithHttpInfo($accept, $warehouse_transfer_in_id, $warehouse_transfer_in_line_id, $jiwa_stateful)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation warehouseTransferInLineGETRequestWarehouseTransferInIDLinesWarehouseTransferInLineIDGetAsyncWithHttpInfo
     *
     * Retrieves a warehouse transfer in line.
     *
     * @param  string $accept Accept Header (required)
     * @param  string $warehouse_transfer_in_id (required)
     * @param  string $warehouse_transfer_in_line_id (required)
     * @param  bool $jiwa_stateful Stateful indicator (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function warehouseTransferInLineGETRequestWarehouseTransferInIDLinesWarehouseTransferInLineIDGetAsyncWithHttpInfo($accept, $warehouse_transfer_in_id, $warehouse_transfer_in_line_id, $jiwa_stateful = null)
    {
        $returnType = '\Jiwa\Model\WarehouseTransferInLine';
        $request = $this->warehouseTransferInLineGETRequestWarehouseTransferInIDLinesWarehouseTransferInLineIDGetRequest($accept, $warehouse_transfer_in_id, $warehouse_transfer_in_line_id, $jiwa_stateful);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'warehouseTransferInLineGETRequestWarehouseTransferInIDLinesWarehouseTransferInLineIDGet'
     *
     * @param  string $accept Accept Header (required)
     * @param  string $warehouse_transfer_in_id (required)
     * @param  string $warehouse_transfer_in_line_id (required)
     * @param  bool $jiwa_stateful Stateful indicator (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function warehouseTransferInLineGETRequestWarehouseTransferInIDLinesWarehouseTransferInLineIDGetRequest($accept, $warehouse_transfer_in_id, $warehouse_transfer_in_line_id, $jiwa_stateful = null)
    {
        // verify the required parameter 'accept' is set
        if ($accept === null || (is_array($accept) && count($accept) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $accept when calling warehouseTransferInLineGETRequestWarehouseTransferInIDLinesWarehouseTransferInLineIDGet'
            );
        }
        // verify the required parameter 'warehouse_transfer_in_id' is set
        if ($warehouse_transfer_in_id === null || (is_array($warehouse_transfer_in_id) && count($warehouse_transfer_in_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $warehouse_transfer_in_id when calling warehouseTransferInLineGETRequestWarehouseTransferInIDLinesWarehouseTransferInLineIDGet'
            );
        }
        // verify the required parameter 'warehouse_transfer_in_line_id' is set
        if ($warehouse_transfer_in_line_id === null || (is_array($warehouse_transfer_in_line_id) && count($warehouse_transfer_in_line_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $warehouse_transfer_in_line_id when calling warehouseTransferInLineGETRequestWarehouseTransferInIDLinesWarehouseTransferInLineIDGet'
            );
        }

        $resourcePath = '/WarehouseTransfersIn/{WarehouseTransferInID}/Lines/{WarehouseTransferInLineID}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // header params
        if ($accept !== null) {
            $headerParams['Accept'] = ObjectSerializer::toHeaderValue($accept);
        }
        // header params
        if ($jiwa_stateful !== null) {
            $headerParams['jiwa-stateful'] = ObjectSerializer::toHeaderValue($jiwa_stateful);
        }

        // path params
        if ($warehouse_transfer_in_id !== null) {
            $resourcePath = str_replace(
                '{' . 'WarehouseTransferInID' . '}',
                ObjectSerializer::toPathValue($warehouse_transfer_in_id),
                $resourcePath
            );
        }
        // path params
        if ($warehouse_transfer_in_line_id !== null) {
            $resourcePath = str_replace(
                '{' . 'WarehouseTransferInLineID' . '}',
                ObjectSerializer::toPathValue($warehouse_transfer_in_line_id),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json', 'application/xml']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json', 'application/xml'],
                ['application/x-www-form-urlencoded', 'application/json', 'application/xml']
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            
            if($headers['Content-Type'] === 'application/json') {
                // \stdClass has no __toString(), so we should encode it manually
                if ($httpBody instanceof \stdClass) {
                    $httpBody = \GuzzleHttp\json_encode($httpBody);
                }
                // array has no __toString(), so we should encode it manually
                if(is_array($httpBody)) {
                    $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($httpBody));
                }
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\Query::build($formParams);
            }
        }

        // this endpoint requires HTTP basic authentication
        if ($this->config->getUsername() !== null || $this->config->getPassword() !== null) {
            $headers['Authorization'] = 'Basic ' . base64_encode($this->config->getUsername() . ":" . $this->config->getPassword());
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\Query::build($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation warehouseTransferInLinePATCHRequestWarehouseTransferInIDLinesWarehouseTransferInLineIDUpdate
     *
     * Updates a line for a warehouse transfer in.
     *
     * @param  string $accept Accept Header (required)
     * @param  string $warehouse_transfer_in_id warehouse_transfer_in_id (required)
     * @param  string $warehouse_transfer_in_line_id warehouse_transfer_in_line_id (required)
     * @param  bool $jiwa_stateful Stateful indicator (optional)
     * @param  int $item_no item_no (optional)
     * @param  string $inventory_id inventory_id (optional)
     * @param  string $part_no part_no (optional)
     * @param  string $description description (optional)
     * @param  int $decimal_places decimal_places (optional)
     * @param  double $quantity_wanted quantity_wanted (optional)
     * @param  double $quantity_transferred quantity_transferred (optional)
     * @param  double $quantity_back_ordered quantity_back_ordered (optional)
     * @param  double $quantity_received quantity_received (optional)
     * @param  double $cost cost (optional)
     * @param  string $ref ref (optional)
     * @param  string $back_order_id back_order_id (optional)
     * @param  string $purchase_order_id purchase_order_id (optional)
     * @param  string $purchase_order_line_id purchase_order_line_id (optional)
     * @param  double $total_cost_transferred total_cost_transferred (optional)
     * @param  double $total_cost_received total_cost_received (optional)
     * @param  string $added_cost_ledger1_rec_id added_cost_ledger1_rec_id (optional)
     * @param  string $added_cost_ledger1_account_no added_cost_ledger1_account_no (optional)
     * @param  string $added_cost_ledger1_description added_cost_ledger1_description (optional)
     * @param  string $added_cost_ledger2_rec_id added_cost_ledger2_rec_id (optional)
     * @param  string $added_cost_ledger2_account_no added_cost_ledger2_account_no (optional)
     * @param  string $added_cost_ledger2_description added_cost_ledger2_description (optional)
     * @param  string $added_cost_ledger3_rec_id added_cost_ledger3_rec_id (optional)
     * @param  string $added_cost_ledger3_account_no added_cost_ledger3_account_no (optional)
     * @param  string $added_cost_ledger3_description added_cost_ledger3_description (optional)
     * @param  string $line_details line_details (optional)
     * @param  \Jiwa\Model\WarehouseTransferInLinePATCHRequest $body body (optional)
     *
     * @throws \Jiwa\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Jiwa\Model\WarehouseTransferInLine
     */
    public function warehouseTransferInLinePATCHRequestWarehouseTransferInIDLinesWarehouseTransferInLineIDUpdate($accept, $warehouse_transfer_in_id, $warehouse_transfer_in_line_id, $jiwa_stateful = null, $item_no = null, $inventory_id = null, $part_no = null, $description = null, $decimal_places = null, $quantity_wanted = null, $quantity_transferred = null, $quantity_back_ordered = null, $quantity_received = null, $cost = null, $ref = null, $back_order_id = null, $purchase_order_id = null, $purchase_order_line_id = null, $total_cost_transferred = null, $total_cost_received = null, $added_cost_ledger1_rec_id = null, $added_cost_ledger1_account_no = null, $added_cost_ledger1_description = null, $added_cost_ledger2_rec_id = null, $added_cost_ledger2_account_no = null, $added_cost_ledger2_description = null, $added_cost_ledger3_rec_id = null, $added_cost_ledger3_account_no = null, $added_cost_ledger3_description = null, $line_details = null, $body = null)
    {
        list($response) = $this->warehouseTransferInLinePATCHRequestWarehouseTransferInIDLinesWarehouseTransferInLineIDUpdateWithHttpInfo($accept, $warehouse_transfer_in_id, $warehouse_transfer_in_line_id, $jiwa_stateful, $item_no, $inventory_id, $part_no, $description, $decimal_places, $quantity_wanted, $quantity_transferred, $quantity_back_ordered, $quantity_received, $cost, $ref, $back_order_id, $purchase_order_id, $purchase_order_line_id, $total_cost_transferred, $total_cost_received, $added_cost_ledger1_rec_id, $added_cost_ledger1_account_no, $added_cost_ledger1_description, $added_cost_ledger2_rec_id, $added_cost_ledger2_account_no, $added_cost_ledger2_description, $added_cost_ledger3_rec_id, $added_cost_ledger3_account_no, $added_cost_ledger3_description, $line_details, $body);
        return $response;
    }

    /**
     * Operation warehouseTransferInLinePATCHRequestWarehouseTransferInIDLinesWarehouseTransferInLineIDUpdateWithHttpInfo
     *
     * Updates a line for a warehouse transfer in.
     *
     * @param  string $accept Accept Header (required)
     * @param  string $warehouse_transfer_in_id (required)
     * @param  string $warehouse_transfer_in_line_id (required)
     * @param  bool $jiwa_stateful Stateful indicator (optional)
     * @param  int $item_no (optional)
     * @param  string $inventory_id (optional)
     * @param  string $part_no (optional)
     * @param  string $description (optional)
     * @param  int $decimal_places (optional)
     * @param  double $quantity_wanted (optional)
     * @param  double $quantity_transferred (optional)
     * @param  double $quantity_back_ordered (optional)
     * @param  double $quantity_received (optional)
     * @param  double $cost (optional)
     * @param  string $ref (optional)
     * @param  string $back_order_id (optional)
     * @param  string $purchase_order_id (optional)
     * @param  string $purchase_order_line_id (optional)
     * @param  double $total_cost_transferred (optional)
     * @param  double $total_cost_received (optional)
     * @param  string $added_cost_ledger1_rec_id (optional)
     * @param  string $added_cost_ledger1_account_no (optional)
     * @param  string $added_cost_ledger1_description (optional)
     * @param  string $added_cost_ledger2_rec_id (optional)
     * @param  string $added_cost_ledger2_account_no (optional)
     * @param  string $added_cost_ledger2_description (optional)
     * @param  string $added_cost_ledger3_rec_id (optional)
     * @param  string $added_cost_ledger3_account_no (optional)
     * @param  string $added_cost_ledger3_description (optional)
     * @param  string $line_details (optional)
     * @param  \Jiwa\Model\WarehouseTransferInLinePATCHRequest $body (optional)
     *
     * @throws \Jiwa\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Jiwa\Model\WarehouseTransferInLine, HTTP status code, HTTP response headers (array of strings)
     */
    public function warehouseTransferInLinePATCHRequestWarehouseTransferInIDLinesWarehouseTransferInLineIDUpdateWithHttpInfo($accept, $warehouse_transfer_in_id, $warehouse_transfer_in_line_id, $jiwa_stateful = null, $item_no = null, $inventory_id = null, $part_no = null, $description = null, $decimal_places = null, $quantity_wanted = null, $quantity_transferred = null, $quantity_back_ordered = null, $quantity_received = null, $cost = null, $ref = null, $back_order_id = null, $purchase_order_id = null, $purchase_order_line_id = null, $total_cost_transferred = null, $total_cost_received = null, $added_cost_ledger1_rec_id = null, $added_cost_ledger1_account_no = null, $added_cost_ledger1_description = null, $added_cost_ledger2_rec_id = null, $added_cost_ledger2_account_no = null, $added_cost_ledger2_description = null, $added_cost_ledger3_rec_id = null, $added_cost_ledger3_account_no = null, $added_cost_ledger3_description = null, $line_details = null, $body = null)
    {
        $returnType = '\Jiwa\Model\WarehouseTransferInLine';
        $request = $this->warehouseTransferInLinePATCHRequestWarehouseTransferInIDLinesWarehouseTransferInLineIDUpdateRequest($accept, $warehouse_transfer_in_id, $warehouse_transfer_in_line_id, $jiwa_stateful, $item_no, $inventory_id, $part_no, $description, $decimal_places, $quantity_wanted, $quantity_transferred, $quantity_back_ordered, $quantity_received, $cost, $ref, $back_order_id, $purchase_order_id, $purchase_order_line_id, $total_cost_transferred, $total_cost_received, $added_cost_ledger1_rec_id, $added_cost_ledger1_account_no, $added_cost_ledger1_description, $added_cost_ledger2_rec_id, $added_cost_ledger2_account_no, $added_cost_ledger2_description, $added_cost_ledger3_rec_id, $added_cost_ledger3_account_no, $added_cost_ledger3_description, $line_details, $body);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Jiwa\Model\WarehouseTransferInLine',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 404:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Jiwa\Model\WarehouseTransferInLine',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 401:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Jiwa\Model\WarehouseTransferInLine',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 403:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Jiwa\Model\WarehouseTransferInLine',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation warehouseTransferInLinePATCHRequestWarehouseTransferInIDLinesWarehouseTransferInLineIDUpdateAsync
     *
     * Updates a line for a warehouse transfer in.
     *
     * @param  string $accept Accept Header (required)
     * @param  string $warehouse_transfer_in_id (required)
     * @param  string $warehouse_transfer_in_line_id (required)
     * @param  bool $jiwa_stateful Stateful indicator (optional)
     * @param  int $item_no (optional)
     * @param  string $inventory_id (optional)
     * @param  string $part_no (optional)
     * @param  string $description (optional)
     * @param  int $decimal_places (optional)
     * @param  double $quantity_wanted (optional)
     * @param  double $quantity_transferred (optional)
     * @param  double $quantity_back_ordered (optional)
     * @param  double $quantity_received (optional)
     * @param  double $cost (optional)
     * @param  string $ref (optional)
     * @param  string $back_order_id (optional)
     * @param  string $purchase_order_id (optional)
     * @param  string $purchase_order_line_id (optional)
     * @param  double $total_cost_transferred (optional)
     * @param  double $total_cost_received (optional)
     * @param  string $added_cost_ledger1_rec_id (optional)
     * @param  string $added_cost_ledger1_account_no (optional)
     * @param  string $added_cost_ledger1_description (optional)
     * @param  string $added_cost_ledger2_rec_id (optional)
     * @param  string $added_cost_ledger2_account_no (optional)
     * @param  string $added_cost_ledger2_description (optional)
     * @param  string $added_cost_ledger3_rec_id (optional)
     * @param  string $added_cost_ledger3_account_no (optional)
     * @param  string $added_cost_ledger3_description (optional)
     * @param  string $line_details (optional)
     * @param  \Jiwa\Model\WarehouseTransferInLinePATCHRequest $body (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function warehouseTransferInLinePATCHRequestWarehouseTransferInIDLinesWarehouseTransferInLineIDUpdateAsync($accept, $warehouse_transfer_in_id, $warehouse_transfer_in_line_id, $jiwa_stateful = null, $item_no = null, $inventory_id = null, $part_no = null, $description = null, $decimal_places = null, $quantity_wanted = null, $quantity_transferred = null, $quantity_back_ordered = null, $quantity_received = null, $cost = null, $ref = null, $back_order_id = null, $purchase_order_id = null, $purchase_order_line_id = null, $total_cost_transferred = null, $total_cost_received = null, $added_cost_ledger1_rec_id = null, $added_cost_ledger1_account_no = null, $added_cost_ledger1_description = null, $added_cost_ledger2_rec_id = null, $added_cost_ledger2_account_no = null, $added_cost_ledger2_description = null, $added_cost_ledger3_rec_id = null, $added_cost_ledger3_account_no = null, $added_cost_ledger3_description = null, $line_details = null, $body = null)
    {
        return $this->warehouseTransferInLinePATCHRequestWarehouseTransferInIDLinesWarehouseTransferInLineIDUpdateAsyncWithHttpInfo($accept, $warehouse_transfer_in_id, $warehouse_transfer_in_line_id, $jiwa_stateful, $item_no, $inventory_id, $part_no, $description, $decimal_places, $quantity_wanted, $quantity_transferred, $quantity_back_ordered, $quantity_received, $cost, $ref, $back_order_id, $purchase_order_id, $purchase_order_line_id, $total_cost_transferred, $total_cost_received, $added_cost_ledger1_rec_id, $added_cost_ledger1_account_no, $added_cost_ledger1_description, $added_cost_ledger2_rec_id, $added_cost_ledger2_account_no, $added_cost_ledger2_description, $added_cost_ledger3_rec_id, $added_cost_ledger3_account_no, $added_cost_ledger3_description, $line_details, $body)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation warehouseTransferInLinePATCHRequestWarehouseTransferInIDLinesWarehouseTransferInLineIDUpdateAsyncWithHttpInfo
     *
     * Updates a line for a warehouse transfer in.
     *
     * @param  string $accept Accept Header (required)
     * @param  string $warehouse_transfer_in_id (required)
     * @param  string $warehouse_transfer_in_line_id (required)
     * @param  bool $jiwa_stateful Stateful indicator (optional)
     * @param  int $item_no (optional)
     * @param  string $inventory_id (optional)
     * @param  string $part_no (optional)
     * @param  string $description (optional)
     * @param  int $decimal_places (optional)
     * @param  double $quantity_wanted (optional)
     * @param  double $quantity_transferred (optional)
     * @param  double $quantity_back_ordered (optional)
     * @param  double $quantity_received (optional)
     * @param  double $cost (optional)
     * @param  string $ref (optional)
     * @param  string $back_order_id (optional)
     * @param  string $purchase_order_id (optional)
     * @param  string $purchase_order_line_id (optional)
     * @param  double $total_cost_transferred (optional)
     * @param  double $total_cost_received (optional)
     * @param  string $added_cost_ledger1_rec_id (optional)
     * @param  string $added_cost_ledger1_account_no (optional)
     * @param  string $added_cost_ledger1_description (optional)
     * @param  string $added_cost_ledger2_rec_id (optional)
     * @param  string $added_cost_ledger2_account_no (optional)
     * @param  string $added_cost_ledger2_description (optional)
     * @param  string $added_cost_ledger3_rec_id (optional)
     * @param  string $added_cost_ledger3_account_no (optional)
     * @param  string $added_cost_ledger3_description (optional)
     * @param  string $line_details (optional)
     * @param  \Jiwa\Model\WarehouseTransferInLinePATCHRequest $body (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function warehouseTransferInLinePATCHRequestWarehouseTransferInIDLinesWarehouseTransferInLineIDUpdateAsyncWithHttpInfo($accept, $warehouse_transfer_in_id, $warehouse_transfer_in_line_id, $jiwa_stateful = null, $item_no = null, $inventory_id = null, $part_no = null, $description = null, $decimal_places = null, $quantity_wanted = null, $quantity_transferred = null, $quantity_back_ordered = null, $quantity_received = null, $cost = null, $ref = null, $back_order_id = null, $purchase_order_id = null, $purchase_order_line_id = null, $total_cost_transferred = null, $total_cost_received = null, $added_cost_ledger1_rec_id = null, $added_cost_ledger1_account_no = null, $added_cost_ledger1_description = null, $added_cost_ledger2_rec_id = null, $added_cost_ledger2_account_no = null, $added_cost_ledger2_description = null, $added_cost_ledger3_rec_id = null, $added_cost_ledger3_account_no = null, $added_cost_ledger3_description = null, $line_details = null, $body = null)
    {
        $returnType = '\Jiwa\Model\WarehouseTransferInLine';
        $request = $this->warehouseTransferInLinePATCHRequestWarehouseTransferInIDLinesWarehouseTransferInLineIDUpdateRequest($accept, $warehouse_transfer_in_id, $warehouse_transfer_in_line_id, $jiwa_stateful, $item_no, $inventory_id, $part_no, $description, $decimal_places, $quantity_wanted, $quantity_transferred, $quantity_back_ordered, $quantity_received, $cost, $ref, $back_order_id, $purchase_order_id, $purchase_order_line_id, $total_cost_transferred, $total_cost_received, $added_cost_ledger1_rec_id, $added_cost_ledger1_account_no, $added_cost_ledger1_description, $added_cost_ledger2_rec_id, $added_cost_ledger2_account_no, $added_cost_ledger2_description, $added_cost_ledger3_rec_id, $added_cost_ledger3_account_no, $added_cost_ledger3_description, $line_details, $body);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'warehouseTransferInLinePATCHRequestWarehouseTransferInIDLinesWarehouseTransferInLineIDUpdate'
     *
     * @param  string $accept Accept Header (required)
     * @param  string $warehouse_transfer_in_id (required)
     * @param  string $warehouse_transfer_in_line_id (required)
     * @param  bool $jiwa_stateful Stateful indicator (optional)
     * @param  int $item_no (optional)
     * @param  string $inventory_id (optional)
     * @param  string $part_no (optional)
     * @param  string $description (optional)
     * @param  int $decimal_places (optional)
     * @param  double $quantity_wanted (optional)
     * @param  double $quantity_transferred (optional)
     * @param  double $quantity_back_ordered (optional)
     * @param  double $quantity_received (optional)
     * @param  double $cost (optional)
     * @param  string $ref (optional)
     * @param  string $back_order_id (optional)
     * @param  string $purchase_order_id (optional)
     * @param  string $purchase_order_line_id (optional)
     * @param  double $total_cost_transferred (optional)
     * @param  double $total_cost_received (optional)
     * @param  string $added_cost_ledger1_rec_id (optional)
     * @param  string $added_cost_ledger1_account_no (optional)
     * @param  string $added_cost_ledger1_description (optional)
     * @param  string $added_cost_ledger2_rec_id (optional)
     * @param  string $added_cost_ledger2_account_no (optional)
     * @param  string $added_cost_ledger2_description (optional)
     * @param  string $added_cost_ledger3_rec_id (optional)
     * @param  string $added_cost_ledger3_account_no (optional)
     * @param  string $added_cost_ledger3_description (optional)
     * @param  string $line_details (optional)
     * @param  \Jiwa\Model\WarehouseTransferInLinePATCHRequest $body (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function warehouseTransferInLinePATCHRequestWarehouseTransferInIDLinesWarehouseTransferInLineIDUpdateRequest($accept, $warehouse_transfer_in_id, $warehouse_transfer_in_line_id, $jiwa_stateful = null, $item_no = null, $inventory_id = null, $part_no = null, $description = null, $decimal_places = null, $quantity_wanted = null, $quantity_transferred = null, $quantity_back_ordered = null, $quantity_received = null, $cost = null, $ref = null, $back_order_id = null, $purchase_order_id = null, $purchase_order_line_id = null, $total_cost_transferred = null, $total_cost_received = null, $added_cost_ledger1_rec_id = null, $added_cost_ledger1_account_no = null, $added_cost_ledger1_description = null, $added_cost_ledger2_rec_id = null, $added_cost_ledger2_account_no = null, $added_cost_ledger2_description = null, $added_cost_ledger3_rec_id = null, $added_cost_ledger3_account_no = null, $added_cost_ledger3_description = null, $line_details = null, $body = null)
    {
        // verify the required parameter 'accept' is set
        if ($accept === null || (is_array($accept) && count($accept) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $accept when calling warehouseTransferInLinePATCHRequestWarehouseTransferInIDLinesWarehouseTransferInLineIDUpdate'
            );
        }
        // verify the required parameter 'warehouse_transfer_in_id' is set
        if ($warehouse_transfer_in_id === null || (is_array($warehouse_transfer_in_id) && count($warehouse_transfer_in_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $warehouse_transfer_in_id when calling warehouseTransferInLinePATCHRequestWarehouseTransferInIDLinesWarehouseTransferInLineIDUpdate'
            );
        }
        // verify the required parameter 'warehouse_transfer_in_line_id' is set
        if ($warehouse_transfer_in_line_id === null || (is_array($warehouse_transfer_in_line_id) && count($warehouse_transfer_in_line_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $warehouse_transfer_in_line_id when calling warehouseTransferInLinePATCHRequestWarehouseTransferInIDLinesWarehouseTransferInLineIDUpdate'
            );
        }

        $resourcePath = '/WarehouseTransfersIn/{WarehouseTransferInID}/Lines/{WarehouseTransferInLineID}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        if ($item_no !== null) {
            $queryParams['ItemNo'] = ObjectSerializer::toQueryValue($item_no);
        }
        // query params
        if ($inventory_id !== null) {
            $queryParams['InventoryID'] = ObjectSerializer::toQueryValue($inventory_id);
        }
        // query params
        if ($part_no !== null) {
            $queryParams['PartNo'] = ObjectSerializer::toQueryValue($part_no);
        }
        // query params
        if ($description !== null) {
            $queryParams['Description'] = ObjectSerializer::toQueryValue($description);
        }
        // query params
        if ($decimal_places !== null) {
            $queryParams['DecimalPlaces'] = ObjectSerializer::toQueryValue($decimal_places);
        }
        // query params
        if ($quantity_wanted !== null) {
            $queryParams['QuantityWanted'] = ObjectSerializer::toQueryValue($quantity_wanted);
        }
        // query params
        if ($quantity_transferred !== null) {
            $queryParams['QuantityTransferred'] = ObjectSerializer::toQueryValue($quantity_transferred);
        }
        // query params
        if ($quantity_back_ordered !== null) {
            $queryParams['QuantityBackOrdered'] = ObjectSerializer::toQueryValue($quantity_back_ordered);
        }
        // query params
        if ($quantity_received !== null) {
            $queryParams['QuantityReceived'] = ObjectSerializer::toQueryValue($quantity_received);
        }
        // query params
        if ($cost !== null) {
            $queryParams['Cost'] = ObjectSerializer::toQueryValue($cost);
        }
        // query params
        if ($ref !== null) {
            $queryParams['Ref'] = ObjectSerializer::toQueryValue($ref);
        }
        // query params
        if ($back_order_id !== null) {
            $queryParams['BackOrderID'] = ObjectSerializer::toQueryValue($back_order_id);
        }
        // query params
        if ($purchase_order_id !== null) {
            $queryParams['PurchaseOrderID'] = ObjectSerializer::toQueryValue($purchase_order_id);
        }
        // query params
        if ($purchase_order_line_id !== null) {
            $queryParams['PurchaseOrderLineID'] = ObjectSerializer::toQueryValue($purchase_order_line_id);
        }
        // query params
        if ($total_cost_transferred !== null) {
            $queryParams['TotalCostTransferred'] = ObjectSerializer::toQueryValue($total_cost_transferred);
        }
        // query params
        if ($total_cost_received !== null) {
            $queryParams['TotalCostReceived'] = ObjectSerializer::toQueryValue($total_cost_received);
        }
        // query params
        if ($added_cost_ledger1_rec_id !== null) {
            $queryParams['AddedCostLedger1RecID'] = ObjectSerializer::toQueryValue($added_cost_ledger1_rec_id);
        }
        // query params
        if ($added_cost_ledger1_account_no !== null) {
            $queryParams['AddedCostLedger1AccountNo'] = ObjectSerializer::toQueryValue($added_cost_ledger1_account_no);
        }
        // query params
        if ($added_cost_ledger1_description !== null) {
            $queryParams['AddedCostLedger1Description'] = ObjectSerializer::toQueryValue($added_cost_ledger1_description);
        }
        // query params
        if ($added_cost_ledger2_rec_id !== null) {
            $queryParams['AddedCostLedger2RecID'] = ObjectSerializer::toQueryValue($added_cost_ledger2_rec_id);
        }
        // query params
        if ($added_cost_ledger2_account_no !== null) {
            $queryParams['AddedCostLedger2AccountNo'] = ObjectSerializer::toQueryValue($added_cost_ledger2_account_no);
        }
        // query params
        if ($added_cost_ledger2_description !== null) {
            $queryParams['AddedCostLedger2Description'] = ObjectSerializer::toQueryValue($added_cost_ledger2_description);
        }
        // query params
        if ($added_cost_ledger3_rec_id !== null) {
            $queryParams['AddedCostLedger3RecID'] = ObjectSerializer::toQueryValue($added_cost_ledger3_rec_id);
        }
        // query params
        if ($added_cost_ledger3_account_no !== null) {
            $queryParams['AddedCostLedger3AccountNo'] = ObjectSerializer::toQueryValue($added_cost_ledger3_account_no);
        }
        // query params
        if ($added_cost_ledger3_description !== null) {
            $queryParams['AddedCostLedger3Description'] = ObjectSerializer::toQueryValue($added_cost_ledger3_description);
        }
        // query params
        if ($line_details !== null) {
            $queryParams['LineDetails'] = ObjectSerializer::toQueryValue($line_details);
        }
        // header params
        if ($accept !== null) {
            $headerParams['Accept'] = ObjectSerializer::toHeaderValue($accept);
        }
        // header params
        if ($jiwa_stateful !== null) {
            $headerParams['jiwa-stateful'] = ObjectSerializer::toHeaderValue($jiwa_stateful);
        }

        // path params
        if ($warehouse_transfer_in_id !== null) {
            $resourcePath = str_replace(
                '{' . 'WarehouseTransferInID' . '}',
                ObjectSerializer::toPathValue($warehouse_transfer_in_id),
                $resourcePath
            );
        }
        // path params
        if ($warehouse_transfer_in_line_id !== null) {
            $resourcePath = str_replace(
                '{' . 'WarehouseTransferInLineID' . '}',
                ObjectSerializer::toPathValue($warehouse_transfer_in_line_id),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;
        if (isset($body)) {
            $_tempBody = $body;
        }

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json', 'application/xml']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json', 'application/xml'],
                ['application/x-www-form-urlencoded', 'application/json', 'application/xml']
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            
            if($headers['Content-Type'] === 'application/json') {
                // \stdClass has no __toString(), so we should encode it manually
                if ($httpBody instanceof \stdClass) {
                    $httpBody = \GuzzleHttp\json_encode($httpBody);
                }
                // array has no __toString(), so we should encode it manually
                if(is_array($httpBody)) {
                    $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($httpBody));
                }
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\Query::build($formParams);
            }
        }

        // this endpoint requires HTTP basic authentication
        if ($this->config->getUsername() !== null || $this->config->getPassword() !== null) {
            $headers['Authorization'] = 'Basic ' . base64_encode($this->config->getUsername() . ":" . $this->config->getPassword());
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\Query::build($queryParams);
        return new Request(
            'PATCH',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation warehouseTransferInLinesGETManyRequestWarehouseTransferInIDLinesGet
     *
     * Retrieves a list of warehouse transfer in lines.
     *
     * @param  string $accept Accept Header (required)
     * @param  string $warehouse_transfer_in_id warehouse_transfer_in_id (required)
     * @param  bool $jiwa_stateful Stateful indicator (optional)
     *
     * @throws \Jiwa\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Jiwa\Model\WarehouseTransferInLine[]
     */
    public function warehouseTransferInLinesGETManyRequestWarehouseTransferInIDLinesGet($accept, $warehouse_transfer_in_id, $jiwa_stateful = null)
    {
        list($response) = $this->warehouseTransferInLinesGETManyRequestWarehouseTransferInIDLinesGetWithHttpInfo($accept, $warehouse_transfer_in_id, $jiwa_stateful);
        return $response;
    }

    /**
     * Operation warehouseTransferInLinesGETManyRequestWarehouseTransferInIDLinesGetWithHttpInfo
     *
     * Retrieves a list of warehouse transfer in lines.
     *
     * @param  string $accept Accept Header (required)
     * @param  string $warehouse_transfer_in_id (required)
     * @param  bool $jiwa_stateful Stateful indicator (optional)
     *
     * @throws \Jiwa\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Jiwa\Model\WarehouseTransferInLine[], HTTP status code, HTTP response headers (array of strings)
     */
    public function warehouseTransferInLinesGETManyRequestWarehouseTransferInIDLinesGetWithHttpInfo($accept, $warehouse_transfer_in_id, $jiwa_stateful = null)
    {
        $returnType = '\Jiwa\Model\WarehouseTransferInLine[]';
        $request = $this->warehouseTransferInLinesGETManyRequestWarehouseTransferInIDLinesGetRequest($accept, $warehouse_transfer_in_id, $jiwa_stateful);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Jiwa\Model\WarehouseTransferInLine[]',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 403:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Jiwa\Model\WarehouseTransferInLine[]',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 404:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Jiwa\Model\WarehouseTransferInLine[]',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 401:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Jiwa\Model\WarehouseTransferInLine[]',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation warehouseTransferInLinesGETManyRequestWarehouseTransferInIDLinesGetAsync
     *
     * Retrieves a list of warehouse transfer in lines.
     *
     * @param  string $accept Accept Header (required)
     * @param  string $warehouse_transfer_in_id (required)
     * @param  bool $jiwa_stateful Stateful indicator (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function warehouseTransferInLinesGETManyRequestWarehouseTransferInIDLinesGetAsync($accept, $warehouse_transfer_in_id, $jiwa_stateful = null)
    {
        return $this->warehouseTransferInLinesGETManyRequestWarehouseTransferInIDLinesGetAsyncWithHttpInfo($accept, $warehouse_transfer_in_id, $jiwa_stateful)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation warehouseTransferInLinesGETManyRequestWarehouseTransferInIDLinesGetAsyncWithHttpInfo
     *
     * Retrieves a list of warehouse transfer in lines.
     *
     * @param  string $accept Accept Header (required)
     * @param  string $warehouse_transfer_in_id (required)
     * @param  bool $jiwa_stateful Stateful indicator (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function warehouseTransferInLinesGETManyRequestWarehouseTransferInIDLinesGetAsyncWithHttpInfo($accept, $warehouse_transfer_in_id, $jiwa_stateful = null)
    {
        $returnType = '\Jiwa\Model\WarehouseTransferInLine[]';
        $request = $this->warehouseTransferInLinesGETManyRequestWarehouseTransferInIDLinesGetRequest($accept, $warehouse_transfer_in_id, $jiwa_stateful);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'warehouseTransferInLinesGETManyRequestWarehouseTransferInIDLinesGet'
     *
     * @param  string $accept Accept Header (required)
     * @param  string $warehouse_transfer_in_id (required)
     * @param  bool $jiwa_stateful Stateful indicator (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function warehouseTransferInLinesGETManyRequestWarehouseTransferInIDLinesGetRequest($accept, $warehouse_transfer_in_id, $jiwa_stateful = null)
    {
        // verify the required parameter 'accept' is set
        if ($accept === null || (is_array($accept) && count($accept) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $accept when calling warehouseTransferInLinesGETManyRequestWarehouseTransferInIDLinesGet'
            );
        }
        // verify the required parameter 'warehouse_transfer_in_id' is set
        if ($warehouse_transfer_in_id === null || (is_array($warehouse_transfer_in_id) && count($warehouse_transfer_in_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $warehouse_transfer_in_id when calling warehouseTransferInLinesGETManyRequestWarehouseTransferInIDLinesGet'
            );
        }

        $resourcePath = '/WarehouseTransfersIn/{WarehouseTransferInID}/Lines';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // header params
        if ($accept !== null) {
            $headerParams['Accept'] = ObjectSerializer::toHeaderValue($accept);
        }
        // header params
        if ($jiwa_stateful !== null) {
            $headerParams['jiwa-stateful'] = ObjectSerializer::toHeaderValue($jiwa_stateful);
        }

        // path params
        if ($warehouse_transfer_in_id !== null) {
            $resourcePath = str_replace(
                '{' . 'WarehouseTransferInID' . '}',
                ObjectSerializer::toPathValue($warehouse_transfer_in_id),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json', 'application/xml']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json', 'application/xml'],
                ['application/x-www-form-urlencoded', 'application/json', 'application/xml']
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            
            if($headers['Content-Type'] === 'application/json') {
                // \stdClass has no __toString(), so we should encode it manually
                if ($httpBody instanceof \stdClass) {
                    $httpBody = \GuzzleHttp\json_encode($httpBody);
                }
                // array has no __toString(), so we should encode it manually
                if(is_array($httpBody)) {
                    $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($httpBody));
                }
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\Query::build($formParams);
            }
        }

        // this endpoint requires HTTP basic authentication
        if ($this->config->getUsername() !== null || $this->config->getPassword() !== null) {
            $headers['Authorization'] = 'Basic ' . base64_encode($this->config->getUsername() . ":" . $this->config->getPassword());
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\Query::build($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation warehouseTransferInPATCHRequestWarehouseTransferInIDUpdate
     *
     * Updates a warehouse transfer in.
     *
     * @param  string $accept Accept Header (required)
     * @param  string $warehouse_transfer_in_id warehouse_transfer_in_id (required)
     * @param  bool $jiwa_stateful Stateful indicator (optional)
     * @param  string $warehouse_transfer_out_id warehouse_transfer_out_id (optional)
     * @param  \DateTime $last_saved_date_time last_saved_date_time (optional)
     * @param  \DateTime $transfer_date transfer_date (optional)
     * @param  \DateTime $activated_date activated_date (optional)
     * @param  string $status status (optional)
     * @param  string $created_by_staff_id created_by_staff_id (optional)
     * @param  string $created_by_staff_user_name created_by_staff_user_name (optional)
     * @param  string $created_by_staff_title created_by_staff_title (optional)
     * @param  string $created_by_staff_first_name created_by_staff_first_name (optional)
     * @param  string $created_by_staff_surname created_by_staff_surname (optional)
     * @param  string $source source (optional)
     * @param  string $source_type source_type (optional)
     * @param  string $source_id source_id (optional)
     * @param  string $source_no source_no (optional)
     * @param  string $notes notes (optional)
     * @param  string $source_warehouse_id source_warehouse_id (optional)
     * @param  string $source_warehouse_logical_description source_warehouse_logical_description (optional)
     * @param  string $source_warehouse_physical_description source_warehouse_physical_description (optional)
     * @param  string $source_warehouse_mask source_warehouse_mask (optional)
     * @param  string $destination_warehouse_id destination_warehouse_id (optional)
     * @param  string $destination_warehouse_logical_description destination_warehouse_logical_description (optional)
     * @param  string $destination_warehouse_physical_description destination_warehouse_physical_description (optional)
     * @param  string $destination_warehouse_mask destination_warehouse_mask (optional)
     * @param  string $transfer_no transfer_no (optional)
     * @param  bool $use_in_transit use_in_transit (optional)
     * @param  string $transit_notes transit_notes (optional)
     * @param  string $in_transit_warehouse_id in_transit_warehouse_id (optional)
     * @param  string $in_transit_warehouse_logical_description in_transit_warehouse_logical_description (optional)
     * @param  string $in_transit_warehouse_physical_description in_transit_warehouse_physical_description (optional)
     * @param  string $in_transit_warehouse_mask in_transit_warehouse_mask (optional)
     * @param  double $added_cost1 added_cost1 (optional)
     * @param  double $added_cost2 added_cost2 (optional)
     * @param  double $added_cost3 added_cost3 (optional)
     * @param  string $picked_by_staff_id picked_by_staff_id (optional)
     * @param  string $picked_by_staff_user_name picked_by_staff_user_name (optional)
     * @param  string $picked_by_staff_title picked_by_staff_title (optional)
     * @param  string $picked_by_staff_first_name picked_by_staff_first_name (optional)
     * @param  string $picked_by_staff_surname picked_by_staff_surname (optional)
     * @param  string $added_cost_method_name added_cost_method_name (optional)
     * @param  double $transferred_cost transferred_cost (optional)
     * @param  double $total_cost total_cost (optional)
     * @param  string $receive_ins receive_ins (optional)
     * @param  string $lines lines (optional)
     * @param  \Jiwa\Model\WarehouseTransferInPATCHRequest $body body (optional)
     *
     * @throws \Jiwa\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Jiwa\Model\WarehouseTransferIn
     */
    public function warehouseTransferInPATCHRequestWarehouseTransferInIDUpdate($accept, $warehouse_transfer_in_id, $jiwa_stateful = null, $warehouse_transfer_out_id = null, $last_saved_date_time = null, $transfer_date = null, $activated_date = null, $status = null, $created_by_staff_id = null, $created_by_staff_user_name = null, $created_by_staff_title = null, $created_by_staff_first_name = null, $created_by_staff_surname = null, $source = null, $source_type = null, $source_id = null, $source_no = null, $notes = null, $source_warehouse_id = null, $source_warehouse_logical_description = null, $source_warehouse_physical_description = null, $source_warehouse_mask = null, $destination_warehouse_id = null, $destination_warehouse_logical_description = null, $destination_warehouse_physical_description = null, $destination_warehouse_mask = null, $transfer_no = null, $use_in_transit = null, $transit_notes = null, $in_transit_warehouse_id = null, $in_transit_warehouse_logical_description = null, $in_transit_warehouse_physical_description = null, $in_transit_warehouse_mask = null, $added_cost1 = null, $added_cost2 = null, $added_cost3 = null, $picked_by_staff_id = null, $picked_by_staff_user_name = null, $picked_by_staff_title = null, $picked_by_staff_first_name = null, $picked_by_staff_surname = null, $added_cost_method_name = null, $transferred_cost = null, $total_cost = null, $receive_ins = null, $lines = null, $body = null)
    {
        list($response) = $this->warehouseTransferInPATCHRequestWarehouseTransferInIDUpdateWithHttpInfo($accept, $warehouse_transfer_in_id, $jiwa_stateful, $warehouse_transfer_out_id, $last_saved_date_time, $transfer_date, $activated_date, $status, $created_by_staff_id, $created_by_staff_user_name, $created_by_staff_title, $created_by_staff_first_name, $created_by_staff_surname, $source, $source_type, $source_id, $source_no, $notes, $source_warehouse_id, $source_warehouse_logical_description, $source_warehouse_physical_description, $source_warehouse_mask, $destination_warehouse_id, $destination_warehouse_logical_description, $destination_warehouse_physical_description, $destination_warehouse_mask, $transfer_no, $use_in_transit, $transit_notes, $in_transit_warehouse_id, $in_transit_warehouse_logical_description, $in_transit_warehouse_physical_description, $in_transit_warehouse_mask, $added_cost1, $added_cost2, $added_cost3, $picked_by_staff_id, $picked_by_staff_user_name, $picked_by_staff_title, $picked_by_staff_first_name, $picked_by_staff_surname, $added_cost_method_name, $transferred_cost, $total_cost, $receive_ins, $lines, $body);
        return $response;
    }

    /**
     * Operation warehouseTransferInPATCHRequestWarehouseTransferInIDUpdateWithHttpInfo
     *
     * Updates a warehouse transfer in.
     *
     * @param  string $accept Accept Header (required)
     * @param  string $warehouse_transfer_in_id (required)
     * @param  bool $jiwa_stateful Stateful indicator (optional)
     * @param  string $warehouse_transfer_out_id (optional)
     * @param  \DateTime $last_saved_date_time (optional)
     * @param  \DateTime $transfer_date (optional)
     * @param  \DateTime $activated_date (optional)
     * @param  string $status (optional)
     * @param  string $created_by_staff_id (optional)
     * @param  string $created_by_staff_user_name (optional)
     * @param  string $created_by_staff_title (optional)
     * @param  string $created_by_staff_first_name (optional)
     * @param  string $created_by_staff_surname (optional)
     * @param  string $source (optional)
     * @param  string $source_type (optional)
     * @param  string $source_id (optional)
     * @param  string $source_no (optional)
     * @param  string $notes (optional)
     * @param  string $source_warehouse_id (optional)
     * @param  string $source_warehouse_logical_description (optional)
     * @param  string $source_warehouse_physical_description (optional)
     * @param  string $source_warehouse_mask (optional)
     * @param  string $destination_warehouse_id (optional)
     * @param  string $destination_warehouse_logical_description (optional)
     * @param  string $destination_warehouse_physical_description (optional)
     * @param  string $destination_warehouse_mask (optional)
     * @param  string $transfer_no (optional)
     * @param  bool $use_in_transit (optional)
     * @param  string $transit_notes (optional)
     * @param  string $in_transit_warehouse_id (optional)
     * @param  string $in_transit_warehouse_logical_description (optional)
     * @param  string $in_transit_warehouse_physical_description (optional)
     * @param  string $in_transit_warehouse_mask (optional)
     * @param  double $added_cost1 (optional)
     * @param  double $added_cost2 (optional)
     * @param  double $added_cost3 (optional)
     * @param  string $picked_by_staff_id (optional)
     * @param  string $picked_by_staff_user_name (optional)
     * @param  string $picked_by_staff_title (optional)
     * @param  string $picked_by_staff_first_name (optional)
     * @param  string $picked_by_staff_surname (optional)
     * @param  string $added_cost_method_name (optional)
     * @param  double $transferred_cost (optional)
     * @param  double $total_cost (optional)
     * @param  string $receive_ins (optional)
     * @param  string $lines (optional)
     * @param  \Jiwa\Model\WarehouseTransferInPATCHRequest $body (optional)
     *
     * @throws \Jiwa\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Jiwa\Model\WarehouseTransferIn, HTTP status code, HTTP response headers (array of strings)
     */
    public function warehouseTransferInPATCHRequestWarehouseTransferInIDUpdateWithHttpInfo($accept, $warehouse_transfer_in_id, $jiwa_stateful = null, $warehouse_transfer_out_id = null, $last_saved_date_time = null, $transfer_date = null, $activated_date = null, $status = null, $created_by_staff_id = null, $created_by_staff_user_name = null, $created_by_staff_title = null, $created_by_staff_first_name = null, $created_by_staff_surname = null, $source = null, $source_type = null, $source_id = null, $source_no = null, $notes = null, $source_warehouse_id = null, $source_warehouse_logical_description = null, $source_warehouse_physical_description = null, $source_warehouse_mask = null, $destination_warehouse_id = null, $destination_warehouse_logical_description = null, $destination_warehouse_physical_description = null, $destination_warehouse_mask = null, $transfer_no = null, $use_in_transit = null, $transit_notes = null, $in_transit_warehouse_id = null, $in_transit_warehouse_logical_description = null, $in_transit_warehouse_physical_description = null, $in_transit_warehouse_mask = null, $added_cost1 = null, $added_cost2 = null, $added_cost3 = null, $picked_by_staff_id = null, $picked_by_staff_user_name = null, $picked_by_staff_title = null, $picked_by_staff_first_name = null, $picked_by_staff_surname = null, $added_cost_method_name = null, $transferred_cost = null, $total_cost = null, $receive_ins = null, $lines = null, $body = null)
    {
        $returnType = '\Jiwa\Model\WarehouseTransferIn';
        $request = $this->warehouseTransferInPATCHRequestWarehouseTransferInIDUpdateRequest($accept, $warehouse_transfer_in_id, $jiwa_stateful, $warehouse_transfer_out_id, $last_saved_date_time, $transfer_date, $activated_date, $status, $created_by_staff_id, $created_by_staff_user_name, $created_by_staff_title, $created_by_staff_first_name, $created_by_staff_surname, $source, $source_type, $source_id, $source_no, $notes, $source_warehouse_id, $source_warehouse_logical_description, $source_warehouse_physical_description, $source_warehouse_mask, $destination_warehouse_id, $destination_warehouse_logical_description, $destination_warehouse_physical_description, $destination_warehouse_mask, $transfer_no, $use_in_transit, $transit_notes, $in_transit_warehouse_id, $in_transit_warehouse_logical_description, $in_transit_warehouse_physical_description, $in_transit_warehouse_mask, $added_cost1, $added_cost2, $added_cost3, $picked_by_staff_id, $picked_by_staff_user_name, $picked_by_staff_title, $picked_by_staff_first_name, $picked_by_staff_surname, $added_cost_method_name, $transferred_cost, $total_cost, $receive_ins, $lines, $body);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Jiwa\Model\WarehouseTransferIn',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 401:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Jiwa\Model\WarehouseTransferIn',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 201:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Jiwa\Model\WarehouseTransferIn',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 403:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Jiwa\Model\WarehouseTransferIn',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 404:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Jiwa\Model\WarehouseTransferIn',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation warehouseTransferInPATCHRequestWarehouseTransferInIDUpdateAsync
     *
     * Updates a warehouse transfer in.
     *
     * @param  string $accept Accept Header (required)
     * @param  string $warehouse_transfer_in_id (required)
     * @param  bool $jiwa_stateful Stateful indicator (optional)
     * @param  string $warehouse_transfer_out_id (optional)
     * @param  \DateTime $last_saved_date_time (optional)
     * @param  \DateTime $transfer_date (optional)
     * @param  \DateTime $activated_date (optional)
     * @param  string $status (optional)
     * @param  string $created_by_staff_id (optional)
     * @param  string $created_by_staff_user_name (optional)
     * @param  string $created_by_staff_title (optional)
     * @param  string $created_by_staff_first_name (optional)
     * @param  string $created_by_staff_surname (optional)
     * @param  string $source (optional)
     * @param  string $source_type (optional)
     * @param  string $source_id (optional)
     * @param  string $source_no (optional)
     * @param  string $notes (optional)
     * @param  string $source_warehouse_id (optional)
     * @param  string $source_warehouse_logical_description (optional)
     * @param  string $source_warehouse_physical_description (optional)
     * @param  string $source_warehouse_mask (optional)
     * @param  string $destination_warehouse_id (optional)
     * @param  string $destination_warehouse_logical_description (optional)
     * @param  string $destination_warehouse_physical_description (optional)
     * @param  string $destination_warehouse_mask (optional)
     * @param  string $transfer_no (optional)
     * @param  bool $use_in_transit (optional)
     * @param  string $transit_notes (optional)
     * @param  string $in_transit_warehouse_id (optional)
     * @param  string $in_transit_warehouse_logical_description (optional)
     * @param  string $in_transit_warehouse_physical_description (optional)
     * @param  string $in_transit_warehouse_mask (optional)
     * @param  double $added_cost1 (optional)
     * @param  double $added_cost2 (optional)
     * @param  double $added_cost3 (optional)
     * @param  string $picked_by_staff_id (optional)
     * @param  string $picked_by_staff_user_name (optional)
     * @param  string $picked_by_staff_title (optional)
     * @param  string $picked_by_staff_first_name (optional)
     * @param  string $picked_by_staff_surname (optional)
     * @param  string $added_cost_method_name (optional)
     * @param  double $transferred_cost (optional)
     * @param  double $total_cost (optional)
     * @param  string $receive_ins (optional)
     * @param  string $lines (optional)
     * @param  \Jiwa\Model\WarehouseTransferInPATCHRequest $body (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function warehouseTransferInPATCHRequestWarehouseTransferInIDUpdateAsync($accept, $warehouse_transfer_in_id, $jiwa_stateful = null, $warehouse_transfer_out_id = null, $last_saved_date_time = null, $transfer_date = null, $activated_date = null, $status = null, $created_by_staff_id = null, $created_by_staff_user_name = null, $created_by_staff_title = null, $created_by_staff_first_name = null, $created_by_staff_surname = null, $source = null, $source_type = null, $source_id = null, $source_no = null, $notes = null, $source_warehouse_id = null, $source_warehouse_logical_description = null, $source_warehouse_physical_description = null, $source_warehouse_mask = null, $destination_warehouse_id = null, $destination_warehouse_logical_description = null, $destination_warehouse_physical_description = null, $destination_warehouse_mask = null, $transfer_no = null, $use_in_transit = null, $transit_notes = null, $in_transit_warehouse_id = null, $in_transit_warehouse_logical_description = null, $in_transit_warehouse_physical_description = null, $in_transit_warehouse_mask = null, $added_cost1 = null, $added_cost2 = null, $added_cost3 = null, $picked_by_staff_id = null, $picked_by_staff_user_name = null, $picked_by_staff_title = null, $picked_by_staff_first_name = null, $picked_by_staff_surname = null, $added_cost_method_name = null, $transferred_cost = null, $total_cost = null, $receive_ins = null, $lines = null, $body = null)
    {
        return $this->warehouseTransferInPATCHRequestWarehouseTransferInIDUpdateAsyncWithHttpInfo($accept, $warehouse_transfer_in_id, $jiwa_stateful, $warehouse_transfer_out_id, $last_saved_date_time, $transfer_date, $activated_date, $status, $created_by_staff_id, $created_by_staff_user_name, $created_by_staff_title, $created_by_staff_first_name, $created_by_staff_surname, $source, $source_type, $source_id, $source_no, $notes, $source_warehouse_id, $source_warehouse_logical_description, $source_warehouse_physical_description, $source_warehouse_mask, $destination_warehouse_id, $destination_warehouse_logical_description, $destination_warehouse_physical_description, $destination_warehouse_mask, $transfer_no, $use_in_transit, $transit_notes, $in_transit_warehouse_id, $in_transit_warehouse_logical_description, $in_transit_warehouse_physical_description, $in_transit_warehouse_mask, $added_cost1, $added_cost2, $added_cost3, $picked_by_staff_id, $picked_by_staff_user_name, $picked_by_staff_title, $picked_by_staff_first_name, $picked_by_staff_surname, $added_cost_method_name, $transferred_cost, $total_cost, $receive_ins, $lines, $body)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation warehouseTransferInPATCHRequestWarehouseTransferInIDUpdateAsyncWithHttpInfo
     *
     * Updates a warehouse transfer in.
     *
     * @param  string $accept Accept Header (required)
     * @param  string $warehouse_transfer_in_id (required)
     * @param  bool $jiwa_stateful Stateful indicator (optional)
     * @param  string $warehouse_transfer_out_id (optional)
     * @param  \DateTime $last_saved_date_time (optional)
     * @param  \DateTime $transfer_date (optional)
     * @param  \DateTime $activated_date (optional)
     * @param  string $status (optional)
     * @param  string $created_by_staff_id (optional)
     * @param  string $created_by_staff_user_name (optional)
     * @param  string $created_by_staff_title (optional)
     * @param  string $created_by_staff_first_name (optional)
     * @param  string $created_by_staff_surname (optional)
     * @param  string $source (optional)
     * @param  string $source_type (optional)
     * @param  string $source_id (optional)
     * @param  string $source_no (optional)
     * @param  string $notes (optional)
     * @param  string $source_warehouse_id (optional)
     * @param  string $source_warehouse_logical_description (optional)
     * @param  string $source_warehouse_physical_description (optional)
     * @param  string $source_warehouse_mask (optional)
     * @param  string $destination_warehouse_id (optional)
     * @param  string $destination_warehouse_logical_description (optional)
     * @param  string $destination_warehouse_physical_description (optional)
     * @param  string $destination_warehouse_mask (optional)
     * @param  string $transfer_no (optional)
     * @param  bool $use_in_transit (optional)
     * @param  string $transit_notes (optional)
     * @param  string $in_transit_warehouse_id (optional)
     * @param  string $in_transit_warehouse_logical_description (optional)
     * @param  string $in_transit_warehouse_physical_description (optional)
     * @param  string $in_transit_warehouse_mask (optional)
     * @param  double $added_cost1 (optional)
     * @param  double $added_cost2 (optional)
     * @param  double $added_cost3 (optional)
     * @param  string $picked_by_staff_id (optional)
     * @param  string $picked_by_staff_user_name (optional)
     * @param  string $picked_by_staff_title (optional)
     * @param  string $picked_by_staff_first_name (optional)
     * @param  string $picked_by_staff_surname (optional)
     * @param  string $added_cost_method_name (optional)
     * @param  double $transferred_cost (optional)
     * @param  double $total_cost (optional)
     * @param  string $receive_ins (optional)
     * @param  string $lines (optional)
     * @param  \Jiwa\Model\WarehouseTransferInPATCHRequest $body (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function warehouseTransferInPATCHRequestWarehouseTransferInIDUpdateAsyncWithHttpInfo($accept, $warehouse_transfer_in_id, $jiwa_stateful = null, $warehouse_transfer_out_id = null, $last_saved_date_time = null, $transfer_date = null, $activated_date = null, $status = null, $created_by_staff_id = null, $created_by_staff_user_name = null, $created_by_staff_title = null, $created_by_staff_first_name = null, $created_by_staff_surname = null, $source = null, $source_type = null, $source_id = null, $source_no = null, $notes = null, $source_warehouse_id = null, $source_warehouse_logical_description = null, $source_warehouse_physical_description = null, $source_warehouse_mask = null, $destination_warehouse_id = null, $destination_warehouse_logical_description = null, $destination_warehouse_physical_description = null, $destination_warehouse_mask = null, $transfer_no = null, $use_in_transit = null, $transit_notes = null, $in_transit_warehouse_id = null, $in_transit_warehouse_logical_description = null, $in_transit_warehouse_physical_description = null, $in_transit_warehouse_mask = null, $added_cost1 = null, $added_cost2 = null, $added_cost3 = null, $picked_by_staff_id = null, $picked_by_staff_user_name = null, $picked_by_staff_title = null, $picked_by_staff_first_name = null, $picked_by_staff_surname = null, $added_cost_method_name = null, $transferred_cost = null, $total_cost = null, $receive_ins = null, $lines = null, $body = null)
    {
        $returnType = '\Jiwa\Model\WarehouseTransferIn';
        $request = $this->warehouseTransferInPATCHRequestWarehouseTransferInIDUpdateRequest($accept, $warehouse_transfer_in_id, $jiwa_stateful, $warehouse_transfer_out_id, $last_saved_date_time, $transfer_date, $activated_date, $status, $created_by_staff_id, $created_by_staff_user_name, $created_by_staff_title, $created_by_staff_first_name, $created_by_staff_surname, $source, $source_type, $source_id, $source_no, $notes, $source_warehouse_id, $source_warehouse_logical_description, $source_warehouse_physical_description, $source_warehouse_mask, $destination_warehouse_id, $destination_warehouse_logical_description, $destination_warehouse_physical_description, $destination_warehouse_mask, $transfer_no, $use_in_transit, $transit_notes, $in_transit_warehouse_id, $in_transit_warehouse_logical_description, $in_transit_warehouse_physical_description, $in_transit_warehouse_mask, $added_cost1, $added_cost2, $added_cost3, $picked_by_staff_id, $picked_by_staff_user_name, $picked_by_staff_title, $picked_by_staff_first_name, $picked_by_staff_surname, $added_cost_method_name, $transferred_cost, $total_cost, $receive_ins, $lines, $body);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'warehouseTransferInPATCHRequestWarehouseTransferInIDUpdate'
     *
     * @param  string $accept Accept Header (required)
     * @param  string $warehouse_transfer_in_id (required)
     * @param  bool $jiwa_stateful Stateful indicator (optional)
     * @param  string $warehouse_transfer_out_id (optional)
     * @param  \DateTime $last_saved_date_time (optional)
     * @param  \DateTime $transfer_date (optional)
     * @param  \DateTime $activated_date (optional)
     * @param  string $status (optional)
     * @param  string $created_by_staff_id (optional)
     * @param  string $created_by_staff_user_name (optional)
     * @param  string $created_by_staff_title (optional)
     * @param  string $created_by_staff_first_name (optional)
     * @param  string $created_by_staff_surname (optional)
     * @param  string $source (optional)
     * @param  string $source_type (optional)
     * @param  string $source_id (optional)
     * @param  string $source_no (optional)
     * @param  string $notes (optional)
     * @param  string $source_warehouse_id (optional)
     * @param  string $source_warehouse_logical_description (optional)
     * @param  string $source_warehouse_physical_description (optional)
     * @param  string $source_warehouse_mask (optional)
     * @param  string $destination_warehouse_id (optional)
     * @param  string $destination_warehouse_logical_description (optional)
     * @param  string $destination_warehouse_physical_description (optional)
     * @param  string $destination_warehouse_mask (optional)
     * @param  string $transfer_no (optional)
     * @param  bool $use_in_transit (optional)
     * @param  string $transit_notes (optional)
     * @param  string $in_transit_warehouse_id (optional)
     * @param  string $in_transit_warehouse_logical_description (optional)
     * @param  string $in_transit_warehouse_physical_description (optional)
     * @param  string $in_transit_warehouse_mask (optional)
     * @param  double $added_cost1 (optional)
     * @param  double $added_cost2 (optional)
     * @param  double $added_cost3 (optional)
     * @param  string $picked_by_staff_id (optional)
     * @param  string $picked_by_staff_user_name (optional)
     * @param  string $picked_by_staff_title (optional)
     * @param  string $picked_by_staff_first_name (optional)
     * @param  string $picked_by_staff_surname (optional)
     * @param  string $added_cost_method_name (optional)
     * @param  double $transferred_cost (optional)
     * @param  double $total_cost (optional)
     * @param  string $receive_ins (optional)
     * @param  string $lines (optional)
     * @param  \Jiwa\Model\WarehouseTransferInPATCHRequest $body (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function warehouseTransferInPATCHRequestWarehouseTransferInIDUpdateRequest($accept, $warehouse_transfer_in_id, $jiwa_stateful = null, $warehouse_transfer_out_id = null, $last_saved_date_time = null, $transfer_date = null, $activated_date = null, $status = null, $created_by_staff_id = null, $created_by_staff_user_name = null, $created_by_staff_title = null, $created_by_staff_first_name = null, $created_by_staff_surname = null, $source = null, $source_type = null, $source_id = null, $source_no = null, $notes = null, $source_warehouse_id = null, $source_warehouse_logical_description = null, $source_warehouse_physical_description = null, $source_warehouse_mask = null, $destination_warehouse_id = null, $destination_warehouse_logical_description = null, $destination_warehouse_physical_description = null, $destination_warehouse_mask = null, $transfer_no = null, $use_in_transit = null, $transit_notes = null, $in_transit_warehouse_id = null, $in_transit_warehouse_logical_description = null, $in_transit_warehouse_physical_description = null, $in_transit_warehouse_mask = null, $added_cost1 = null, $added_cost2 = null, $added_cost3 = null, $picked_by_staff_id = null, $picked_by_staff_user_name = null, $picked_by_staff_title = null, $picked_by_staff_first_name = null, $picked_by_staff_surname = null, $added_cost_method_name = null, $transferred_cost = null, $total_cost = null, $receive_ins = null, $lines = null, $body = null)
    {
        // verify the required parameter 'accept' is set
        if ($accept === null || (is_array($accept) && count($accept) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $accept when calling warehouseTransferInPATCHRequestWarehouseTransferInIDUpdate'
            );
        }
        // verify the required parameter 'warehouse_transfer_in_id' is set
        if ($warehouse_transfer_in_id === null || (is_array($warehouse_transfer_in_id) && count($warehouse_transfer_in_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $warehouse_transfer_in_id when calling warehouseTransferInPATCHRequestWarehouseTransferInIDUpdate'
            );
        }

        $resourcePath = '/WarehouseTransfersIn/{WarehouseTransferInID}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        if ($warehouse_transfer_out_id !== null) {
            $queryParams['WarehouseTransferOutID'] = ObjectSerializer::toQueryValue($warehouse_transfer_out_id);
        }
        // query params
        if ($last_saved_date_time !== null) {
            $queryParams['LastSavedDateTime'] = ObjectSerializer::toQueryValue($last_saved_date_time);
        }
        // query params
        if ($transfer_date !== null) {
            $queryParams['TransferDate'] = ObjectSerializer::toQueryValue($transfer_date);
        }
        // query params
        if ($activated_date !== null) {
            $queryParams['ActivatedDate'] = ObjectSerializer::toQueryValue($activated_date);
        }
        // query params
        if ($status !== null) {
            $queryParams['Status'] = ObjectSerializer::toQueryValue($status);
        }
        // query params
        if ($created_by_staff_id !== null) {
            $queryParams['CreatedByStaffID'] = ObjectSerializer::toQueryValue($created_by_staff_id);
        }
        // query params
        if ($created_by_staff_user_name !== null) {
            $queryParams['CreatedByStaffUserName'] = ObjectSerializer::toQueryValue($created_by_staff_user_name);
        }
        // query params
        if ($created_by_staff_title !== null) {
            $queryParams['CreatedByStaffTitle'] = ObjectSerializer::toQueryValue($created_by_staff_title);
        }
        // query params
        if ($created_by_staff_first_name !== null) {
            $queryParams['CreatedByStaffFirstName'] = ObjectSerializer::toQueryValue($created_by_staff_first_name);
        }
        // query params
        if ($created_by_staff_surname !== null) {
            $queryParams['CreatedByStaffSurname'] = ObjectSerializer::toQueryValue($created_by_staff_surname);
        }
        // query params
        if ($source !== null) {
            $queryParams['Source'] = ObjectSerializer::toQueryValue($source);
        }
        // query params
        if ($source_type !== null) {
            $queryParams['SourceType'] = ObjectSerializer::toQueryValue($source_type);
        }
        // query params
        if ($source_id !== null) {
            $queryParams['SourceID'] = ObjectSerializer::toQueryValue($source_id);
        }
        // query params
        if ($source_no !== null) {
            $queryParams['SourceNo'] = ObjectSerializer::toQueryValue($source_no);
        }
        // query params
        if ($notes !== null) {
            $queryParams['Notes'] = ObjectSerializer::toQueryValue($notes);
        }
        // query params
        if ($source_warehouse_id !== null) {
            $queryParams['SourceWarehouseID'] = ObjectSerializer::toQueryValue($source_warehouse_id);
        }
        // query params
        if ($source_warehouse_logical_description !== null) {
            $queryParams['SourceWarehouseLogicalDescription'] = ObjectSerializer::toQueryValue($source_warehouse_logical_description);
        }
        // query params
        if ($source_warehouse_physical_description !== null) {
            $queryParams['SourceWarehousePhysicalDescription'] = ObjectSerializer::toQueryValue($source_warehouse_physical_description);
        }
        // query params
        if ($source_warehouse_mask !== null) {
            $queryParams['SourceWarehouseMask'] = ObjectSerializer::toQueryValue($source_warehouse_mask);
        }
        // query params
        if ($destination_warehouse_id !== null) {
            $queryParams['DestinationWarehouseID'] = ObjectSerializer::toQueryValue($destination_warehouse_id);
        }
        // query params
        if ($destination_warehouse_logical_description !== null) {
            $queryParams['DestinationWarehouseLogicalDescription'] = ObjectSerializer::toQueryValue($destination_warehouse_logical_description);
        }
        // query params
        if ($destination_warehouse_physical_description !== null) {
            $queryParams['DestinationWarehousePhysicalDescription'] = ObjectSerializer::toQueryValue($destination_warehouse_physical_description);
        }
        // query params
        if ($destination_warehouse_mask !== null) {
            $queryParams['DestinationWarehouseMask'] = ObjectSerializer::toQueryValue($destination_warehouse_mask);
        }
        // query params
        if ($transfer_no !== null) {
            $queryParams['TransferNo'] = ObjectSerializer::toQueryValue($transfer_no);
        }
        // query params
        if ($use_in_transit !== null) {
            $queryParams['UseInTransit'] = ObjectSerializer::toQueryValue($use_in_transit);
        }
        // query params
        if ($transit_notes !== null) {
            $queryParams['TransitNotes'] = ObjectSerializer::toQueryValue($transit_notes);
        }
        // query params
        if ($in_transit_warehouse_id !== null) {
            $queryParams['InTransitWarehouseID'] = ObjectSerializer::toQueryValue($in_transit_warehouse_id);
        }
        // query params
        if ($in_transit_warehouse_logical_description !== null) {
            $queryParams['InTransitWarehouseLogicalDescription'] = ObjectSerializer::toQueryValue($in_transit_warehouse_logical_description);
        }
        // query params
        if ($in_transit_warehouse_physical_description !== null) {
            $queryParams['InTransitWarehousePhysicalDescription'] = ObjectSerializer::toQueryValue($in_transit_warehouse_physical_description);
        }
        // query params
        if ($in_transit_warehouse_mask !== null) {
            $queryParams['InTransitWarehouseMask'] = ObjectSerializer::toQueryValue($in_transit_warehouse_mask);
        }
        // query params
        if ($added_cost1 !== null) {
            $queryParams['AddedCost1'] = ObjectSerializer::toQueryValue($added_cost1);
        }
        // query params
        if ($added_cost2 !== null) {
            $queryParams['AddedCost2'] = ObjectSerializer::toQueryValue($added_cost2);
        }
        // query params
        if ($added_cost3 !== null) {
            $queryParams['AddedCost3'] = ObjectSerializer::toQueryValue($added_cost3);
        }
        // query params
        if ($picked_by_staff_id !== null) {
            $queryParams['PickedByStaffID'] = ObjectSerializer::toQueryValue($picked_by_staff_id);
        }
        // query params
        if ($picked_by_staff_user_name !== null) {
            $queryParams['PickedByStaffUserName'] = ObjectSerializer::toQueryValue($picked_by_staff_user_name);
        }
        // query params
        if ($picked_by_staff_title !== null) {
            $queryParams['PickedByStaffTitle'] = ObjectSerializer::toQueryValue($picked_by_staff_title);
        }
        // query params
        if ($picked_by_staff_first_name !== null) {
            $queryParams['PickedByStaffFirstName'] = ObjectSerializer::toQueryValue($picked_by_staff_first_name);
        }
        // query params
        if ($picked_by_staff_surname !== null) {
            $queryParams['PickedByStaffSurname'] = ObjectSerializer::toQueryValue($picked_by_staff_surname);
        }
        // query params
        if ($added_cost_method_name !== null) {
            $queryParams['AddedCostMethodName'] = ObjectSerializer::toQueryValue($added_cost_method_name);
        }
        // query params
        if ($transferred_cost !== null) {
            $queryParams['TransferredCost'] = ObjectSerializer::toQueryValue($transferred_cost);
        }
        // query params
        if ($total_cost !== null) {
            $queryParams['TotalCost'] = ObjectSerializer::toQueryValue($total_cost);
        }
        // query params
        if ($receive_ins !== null) {
            $queryParams['ReceiveIns'] = ObjectSerializer::toQueryValue($receive_ins);
        }
        // query params
        if ($lines !== null) {
            $queryParams['Lines'] = ObjectSerializer::toQueryValue($lines);
        }
        // header params
        if ($accept !== null) {
            $headerParams['Accept'] = ObjectSerializer::toHeaderValue($accept);
        }
        // header params
        if ($jiwa_stateful !== null) {
            $headerParams['jiwa-stateful'] = ObjectSerializer::toHeaderValue($jiwa_stateful);
        }

        // path params
        if ($warehouse_transfer_in_id !== null) {
            $resourcePath = str_replace(
                '{' . 'WarehouseTransferInID' . '}',
                ObjectSerializer::toPathValue($warehouse_transfer_in_id),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;
        if (isset($body)) {
            $_tempBody = $body;
        }

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json', 'application/xml']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json', 'application/xml'],
                ['application/x-www-form-urlencoded', 'application/json', 'application/xml']
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            
            if($headers['Content-Type'] === 'application/json') {
                // \stdClass has no __toString(), so we should encode it manually
                if ($httpBody instanceof \stdClass) {
                    $httpBody = \GuzzleHttp\json_encode($httpBody);
                }
                // array has no __toString(), so we should encode it manually
                if(is_array($httpBody)) {
                    $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($httpBody));
                }
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\Query::build($formParams);
            }
        }

        // this endpoint requires HTTP basic authentication
        if ($this->config->getUsername() !== null || $this->config->getPassword() !== null) {
            $headers['Authorization'] = 'Basic ' . base64_encode($this->config->getUsername() . ":" . $this->config->getPassword());
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\Query::build($queryParams);
        return new Request(
            'PATCH',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation warehouseTransferInPOSTRequestPost
     *
     * Creates a warehouse transfer in.
     *
     * @param  string $accept Accept Header (required)
     * @param  bool $jiwa_stateful Stateful indicator (optional)
     * @param  string $warehouse_transfer_out_id warehouse_transfer_out_id (optional)
     * @param  \DateTime $last_saved_date_time last_saved_date_time (optional)
     * @param  \DateTime $transfer_date transfer_date (optional)
     * @param  \DateTime $activated_date activated_date (optional)
     * @param  string $status status (optional)
     * @param  string $created_by_staff_id created_by_staff_id (optional)
     * @param  string $created_by_staff_user_name created_by_staff_user_name (optional)
     * @param  string $created_by_staff_title created_by_staff_title (optional)
     * @param  string $created_by_staff_first_name created_by_staff_first_name (optional)
     * @param  string $created_by_staff_surname created_by_staff_surname (optional)
     * @param  string $source source (optional)
     * @param  string $source_type source_type (optional)
     * @param  string $source_id source_id (optional)
     * @param  string $source_no source_no (optional)
     * @param  string $notes notes (optional)
     * @param  string $source_warehouse_id source_warehouse_id (optional)
     * @param  string $source_warehouse_logical_description source_warehouse_logical_description (optional)
     * @param  string $source_warehouse_physical_description source_warehouse_physical_description (optional)
     * @param  string $source_warehouse_mask source_warehouse_mask (optional)
     * @param  string $destination_warehouse_id destination_warehouse_id (optional)
     * @param  string $destination_warehouse_logical_description destination_warehouse_logical_description (optional)
     * @param  string $destination_warehouse_physical_description destination_warehouse_physical_description (optional)
     * @param  string $destination_warehouse_mask destination_warehouse_mask (optional)
     * @param  string $transfer_no transfer_no (optional)
     * @param  bool $use_in_transit use_in_transit (optional)
     * @param  string $transit_notes transit_notes (optional)
     * @param  string $in_transit_warehouse_id in_transit_warehouse_id (optional)
     * @param  string $in_transit_warehouse_logical_description in_transit_warehouse_logical_description (optional)
     * @param  string $in_transit_warehouse_physical_description in_transit_warehouse_physical_description (optional)
     * @param  string $in_transit_warehouse_mask in_transit_warehouse_mask (optional)
     * @param  double $added_cost1 added_cost1 (optional)
     * @param  double $added_cost2 added_cost2 (optional)
     * @param  double $added_cost3 added_cost3 (optional)
     * @param  string $picked_by_staff_id picked_by_staff_id (optional)
     * @param  string $picked_by_staff_user_name picked_by_staff_user_name (optional)
     * @param  string $picked_by_staff_title picked_by_staff_title (optional)
     * @param  string $picked_by_staff_first_name picked_by_staff_first_name (optional)
     * @param  string $picked_by_staff_surname picked_by_staff_surname (optional)
     * @param  string $added_cost_method_name added_cost_method_name (optional)
     * @param  double $transferred_cost transferred_cost (optional)
     * @param  double $total_cost total_cost (optional)
     * @param  string $receive_ins receive_ins (optional)
     * @param  string $lines lines (optional)
     * @param  \Jiwa\Model\WarehouseTransferInPOSTRequest $body body (optional)
     *
     * @throws \Jiwa\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Jiwa\Model\WarehouseTransferIn
     */
    public function warehouseTransferInPOSTRequestPost($accept, $jiwa_stateful = null, $warehouse_transfer_out_id = null, $last_saved_date_time = null, $transfer_date = null, $activated_date = null, $status = null, $created_by_staff_id = null, $created_by_staff_user_name = null, $created_by_staff_title = null, $created_by_staff_first_name = null, $created_by_staff_surname = null, $source = null, $source_type = null, $source_id = null, $source_no = null, $notes = null, $source_warehouse_id = null, $source_warehouse_logical_description = null, $source_warehouse_physical_description = null, $source_warehouse_mask = null, $destination_warehouse_id = null, $destination_warehouse_logical_description = null, $destination_warehouse_physical_description = null, $destination_warehouse_mask = null, $transfer_no = null, $use_in_transit = null, $transit_notes = null, $in_transit_warehouse_id = null, $in_transit_warehouse_logical_description = null, $in_transit_warehouse_physical_description = null, $in_transit_warehouse_mask = null, $added_cost1 = null, $added_cost2 = null, $added_cost3 = null, $picked_by_staff_id = null, $picked_by_staff_user_name = null, $picked_by_staff_title = null, $picked_by_staff_first_name = null, $picked_by_staff_surname = null, $added_cost_method_name = null, $transferred_cost = null, $total_cost = null, $receive_ins = null, $lines = null, $body = null)
    {
        list($response) = $this->warehouseTransferInPOSTRequestPostWithHttpInfo($accept, $jiwa_stateful, $warehouse_transfer_out_id, $last_saved_date_time, $transfer_date, $activated_date, $status, $created_by_staff_id, $created_by_staff_user_name, $created_by_staff_title, $created_by_staff_first_name, $created_by_staff_surname, $source, $source_type, $source_id, $source_no, $notes, $source_warehouse_id, $source_warehouse_logical_description, $source_warehouse_physical_description, $source_warehouse_mask, $destination_warehouse_id, $destination_warehouse_logical_description, $destination_warehouse_physical_description, $destination_warehouse_mask, $transfer_no, $use_in_transit, $transit_notes, $in_transit_warehouse_id, $in_transit_warehouse_logical_description, $in_transit_warehouse_physical_description, $in_transit_warehouse_mask, $added_cost1, $added_cost2, $added_cost3, $picked_by_staff_id, $picked_by_staff_user_name, $picked_by_staff_title, $picked_by_staff_first_name, $picked_by_staff_surname, $added_cost_method_name, $transferred_cost, $total_cost, $receive_ins, $lines, $body);
        return $response;
    }

    /**
     * Operation warehouseTransferInPOSTRequestPostWithHttpInfo
     *
     * Creates a warehouse transfer in.
     *
     * @param  string $accept Accept Header (required)
     * @param  bool $jiwa_stateful Stateful indicator (optional)
     * @param  string $warehouse_transfer_out_id (optional)
     * @param  \DateTime $last_saved_date_time (optional)
     * @param  \DateTime $transfer_date (optional)
     * @param  \DateTime $activated_date (optional)
     * @param  string $status (optional)
     * @param  string $created_by_staff_id (optional)
     * @param  string $created_by_staff_user_name (optional)
     * @param  string $created_by_staff_title (optional)
     * @param  string $created_by_staff_first_name (optional)
     * @param  string $created_by_staff_surname (optional)
     * @param  string $source (optional)
     * @param  string $source_type (optional)
     * @param  string $source_id (optional)
     * @param  string $source_no (optional)
     * @param  string $notes (optional)
     * @param  string $source_warehouse_id (optional)
     * @param  string $source_warehouse_logical_description (optional)
     * @param  string $source_warehouse_physical_description (optional)
     * @param  string $source_warehouse_mask (optional)
     * @param  string $destination_warehouse_id (optional)
     * @param  string $destination_warehouse_logical_description (optional)
     * @param  string $destination_warehouse_physical_description (optional)
     * @param  string $destination_warehouse_mask (optional)
     * @param  string $transfer_no (optional)
     * @param  bool $use_in_transit (optional)
     * @param  string $transit_notes (optional)
     * @param  string $in_transit_warehouse_id (optional)
     * @param  string $in_transit_warehouse_logical_description (optional)
     * @param  string $in_transit_warehouse_physical_description (optional)
     * @param  string $in_transit_warehouse_mask (optional)
     * @param  double $added_cost1 (optional)
     * @param  double $added_cost2 (optional)
     * @param  double $added_cost3 (optional)
     * @param  string $picked_by_staff_id (optional)
     * @param  string $picked_by_staff_user_name (optional)
     * @param  string $picked_by_staff_title (optional)
     * @param  string $picked_by_staff_first_name (optional)
     * @param  string $picked_by_staff_surname (optional)
     * @param  string $added_cost_method_name (optional)
     * @param  double $transferred_cost (optional)
     * @param  double $total_cost (optional)
     * @param  string $receive_ins (optional)
     * @param  string $lines (optional)
     * @param  \Jiwa\Model\WarehouseTransferInPOSTRequest $body (optional)
     *
     * @throws \Jiwa\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Jiwa\Model\WarehouseTransferIn, HTTP status code, HTTP response headers (array of strings)
     */
    public function warehouseTransferInPOSTRequestPostWithHttpInfo($accept, $jiwa_stateful = null, $warehouse_transfer_out_id = null, $last_saved_date_time = null, $transfer_date = null, $activated_date = null, $status = null, $created_by_staff_id = null, $created_by_staff_user_name = null, $created_by_staff_title = null, $created_by_staff_first_name = null, $created_by_staff_surname = null, $source = null, $source_type = null, $source_id = null, $source_no = null, $notes = null, $source_warehouse_id = null, $source_warehouse_logical_description = null, $source_warehouse_physical_description = null, $source_warehouse_mask = null, $destination_warehouse_id = null, $destination_warehouse_logical_description = null, $destination_warehouse_physical_description = null, $destination_warehouse_mask = null, $transfer_no = null, $use_in_transit = null, $transit_notes = null, $in_transit_warehouse_id = null, $in_transit_warehouse_logical_description = null, $in_transit_warehouse_physical_description = null, $in_transit_warehouse_mask = null, $added_cost1 = null, $added_cost2 = null, $added_cost3 = null, $picked_by_staff_id = null, $picked_by_staff_user_name = null, $picked_by_staff_title = null, $picked_by_staff_first_name = null, $picked_by_staff_surname = null, $added_cost_method_name = null, $transferred_cost = null, $total_cost = null, $receive_ins = null, $lines = null, $body = null)
    {
        $returnType = '\Jiwa\Model\WarehouseTransferIn';
        $request = $this->warehouseTransferInPOSTRequestPostRequest($accept, $jiwa_stateful, $warehouse_transfer_out_id, $last_saved_date_time, $transfer_date, $activated_date, $status, $created_by_staff_id, $created_by_staff_user_name, $created_by_staff_title, $created_by_staff_first_name, $created_by_staff_surname, $source, $source_type, $source_id, $source_no, $notes, $source_warehouse_id, $source_warehouse_logical_description, $source_warehouse_physical_description, $source_warehouse_mask, $destination_warehouse_id, $destination_warehouse_logical_description, $destination_warehouse_physical_description, $destination_warehouse_mask, $transfer_no, $use_in_transit, $transit_notes, $in_transit_warehouse_id, $in_transit_warehouse_logical_description, $in_transit_warehouse_physical_description, $in_transit_warehouse_mask, $added_cost1, $added_cost2, $added_cost3, $picked_by_staff_id, $picked_by_staff_user_name, $picked_by_staff_title, $picked_by_staff_first_name, $picked_by_staff_surname, $added_cost_method_name, $transferred_cost, $total_cost, $receive_ins, $lines, $body);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Jiwa\Model\WarehouseTransferIn',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 401:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Jiwa\Model\WarehouseTransferIn',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 403:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Jiwa\Model\WarehouseTransferIn',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 201:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Jiwa\Model\WarehouseTransferIn',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation warehouseTransferInPOSTRequestPostAsync
     *
     * Creates a warehouse transfer in.
     *
     * @param  string $accept Accept Header (required)
     * @param  bool $jiwa_stateful Stateful indicator (optional)
     * @param  string $warehouse_transfer_out_id (optional)
     * @param  \DateTime $last_saved_date_time (optional)
     * @param  \DateTime $transfer_date (optional)
     * @param  \DateTime $activated_date (optional)
     * @param  string $status (optional)
     * @param  string $created_by_staff_id (optional)
     * @param  string $created_by_staff_user_name (optional)
     * @param  string $created_by_staff_title (optional)
     * @param  string $created_by_staff_first_name (optional)
     * @param  string $created_by_staff_surname (optional)
     * @param  string $source (optional)
     * @param  string $source_type (optional)
     * @param  string $source_id (optional)
     * @param  string $source_no (optional)
     * @param  string $notes (optional)
     * @param  string $source_warehouse_id (optional)
     * @param  string $source_warehouse_logical_description (optional)
     * @param  string $source_warehouse_physical_description (optional)
     * @param  string $source_warehouse_mask (optional)
     * @param  string $destination_warehouse_id (optional)
     * @param  string $destination_warehouse_logical_description (optional)
     * @param  string $destination_warehouse_physical_description (optional)
     * @param  string $destination_warehouse_mask (optional)
     * @param  string $transfer_no (optional)
     * @param  bool $use_in_transit (optional)
     * @param  string $transit_notes (optional)
     * @param  string $in_transit_warehouse_id (optional)
     * @param  string $in_transit_warehouse_logical_description (optional)
     * @param  string $in_transit_warehouse_physical_description (optional)
     * @param  string $in_transit_warehouse_mask (optional)
     * @param  double $added_cost1 (optional)
     * @param  double $added_cost2 (optional)
     * @param  double $added_cost3 (optional)
     * @param  string $picked_by_staff_id (optional)
     * @param  string $picked_by_staff_user_name (optional)
     * @param  string $picked_by_staff_title (optional)
     * @param  string $picked_by_staff_first_name (optional)
     * @param  string $picked_by_staff_surname (optional)
     * @param  string $added_cost_method_name (optional)
     * @param  double $transferred_cost (optional)
     * @param  double $total_cost (optional)
     * @param  string $receive_ins (optional)
     * @param  string $lines (optional)
     * @param  \Jiwa\Model\WarehouseTransferInPOSTRequest $body (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function warehouseTransferInPOSTRequestPostAsync($accept, $jiwa_stateful = null, $warehouse_transfer_out_id = null, $last_saved_date_time = null, $transfer_date = null, $activated_date = null, $status = null, $created_by_staff_id = null, $created_by_staff_user_name = null, $created_by_staff_title = null, $created_by_staff_first_name = null, $created_by_staff_surname = null, $source = null, $source_type = null, $source_id = null, $source_no = null, $notes = null, $source_warehouse_id = null, $source_warehouse_logical_description = null, $source_warehouse_physical_description = null, $source_warehouse_mask = null, $destination_warehouse_id = null, $destination_warehouse_logical_description = null, $destination_warehouse_physical_description = null, $destination_warehouse_mask = null, $transfer_no = null, $use_in_transit = null, $transit_notes = null, $in_transit_warehouse_id = null, $in_transit_warehouse_logical_description = null, $in_transit_warehouse_physical_description = null, $in_transit_warehouse_mask = null, $added_cost1 = null, $added_cost2 = null, $added_cost3 = null, $picked_by_staff_id = null, $picked_by_staff_user_name = null, $picked_by_staff_title = null, $picked_by_staff_first_name = null, $picked_by_staff_surname = null, $added_cost_method_name = null, $transferred_cost = null, $total_cost = null, $receive_ins = null, $lines = null, $body = null)
    {
        return $this->warehouseTransferInPOSTRequestPostAsyncWithHttpInfo($accept, $jiwa_stateful, $warehouse_transfer_out_id, $last_saved_date_time, $transfer_date, $activated_date, $status, $created_by_staff_id, $created_by_staff_user_name, $created_by_staff_title, $created_by_staff_first_name, $created_by_staff_surname, $source, $source_type, $source_id, $source_no, $notes, $source_warehouse_id, $source_warehouse_logical_description, $source_warehouse_physical_description, $source_warehouse_mask, $destination_warehouse_id, $destination_warehouse_logical_description, $destination_warehouse_physical_description, $destination_warehouse_mask, $transfer_no, $use_in_transit, $transit_notes, $in_transit_warehouse_id, $in_transit_warehouse_logical_description, $in_transit_warehouse_physical_description, $in_transit_warehouse_mask, $added_cost1, $added_cost2, $added_cost3, $picked_by_staff_id, $picked_by_staff_user_name, $picked_by_staff_title, $picked_by_staff_first_name, $picked_by_staff_surname, $added_cost_method_name, $transferred_cost, $total_cost, $receive_ins, $lines, $body)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation warehouseTransferInPOSTRequestPostAsyncWithHttpInfo
     *
     * Creates a warehouse transfer in.
     *
     * @param  string $accept Accept Header (required)
     * @param  bool $jiwa_stateful Stateful indicator (optional)
     * @param  string $warehouse_transfer_out_id (optional)
     * @param  \DateTime $last_saved_date_time (optional)
     * @param  \DateTime $transfer_date (optional)
     * @param  \DateTime $activated_date (optional)
     * @param  string $status (optional)
     * @param  string $created_by_staff_id (optional)
     * @param  string $created_by_staff_user_name (optional)
     * @param  string $created_by_staff_title (optional)
     * @param  string $created_by_staff_first_name (optional)
     * @param  string $created_by_staff_surname (optional)
     * @param  string $source (optional)
     * @param  string $source_type (optional)
     * @param  string $source_id (optional)
     * @param  string $source_no (optional)
     * @param  string $notes (optional)
     * @param  string $source_warehouse_id (optional)
     * @param  string $source_warehouse_logical_description (optional)
     * @param  string $source_warehouse_physical_description (optional)
     * @param  string $source_warehouse_mask (optional)
     * @param  string $destination_warehouse_id (optional)
     * @param  string $destination_warehouse_logical_description (optional)
     * @param  string $destination_warehouse_physical_description (optional)
     * @param  string $destination_warehouse_mask (optional)
     * @param  string $transfer_no (optional)
     * @param  bool $use_in_transit (optional)
     * @param  string $transit_notes (optional)
     * @param  string $in_transit_warehouse_id (optional)
     * @param  string $in_transit_warehouse_logical_description (optional)
     * @param  string $in_transit_warehouse_physical_description (optional)
     * @param  string $in_transit_warehouse_mask (optional)
     * @param  double $added_cost1 (optional)
     * @param  double $added_cost2 (optional)
     * @param  double $added_cost3 (optional)
     * @param  string $picked_by_staff_id (optional)
     * @param  string $picked_by_staff_user_name (optional)
     * @param  string $picked_by_staff_title (optional)
     * @param  string $picked_by_staff_first_name (optional)
     * @param  string $picked_by_staff_surname (optional)
     * @param  string $added_cost_method_name (optional)
     * @param  double $transferred_cost (optional)
     * @param  double $total_cost (optional)
     * @param  string $receive_ins (optional)
     * @param  string $lines (optional)
     * @param  \Jiwa\Model\WarehouseTransferInPOSTRequest $body (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function warehouseTransferInPOSTRequestPostAsyncWithHttpInfo($accept, $jiwa_stateful = null, $warehouse_transfer_out_id = null, $last_saved_date_time = null, $transfer_date = null, $activated_date = null, $status = null, $created_by_staff_id = null, $created_by_staff_user_name = null, $created_by_staff_title = null, $created_by_staff_first_name = null, $created_by_staff_surname = null, $source = null, $source_type = null, $source_id = null, $source_no = null, $notes = null, $source_warehouse_id = null, $source_warehouse_logical_description = null, $source_warehouse_physical_description = null, $source_warehouse_mask = null, $destination_warehouse_id = null, $destination_warehouse_logical_description = null, $destination_warehouse_physical_description = null, $destination_warehouse_mask = null, $transfer_no = null, $use_in_transit = null, $transit_notes = null, $in_transit_warehouse_id = null, $in_transit_warehouse_logical_description = null, $in_transit_warehouse_physical_description = null, $in_transit_warehouse_mask = null, $added_cost1 = null, $added_cost2 = null, $added_cost3 = null, $picked_by_staff_id = null, $picked_by_staff_user_name = null, $picked_by_staff_title = null, $picked_by_staff_first_name = null, $picked_by_staff_surname = null, $added_cost_method_name = null, $transferred_cost = null, $total_cost = null, $receive_ins = null, $lines = null, $body = null)
    {
        $returnType = '\Jiwa\Model\WarehouseTransferIn';
        $request = $this->warehouseTransferInPOSTRequestPostRequest($accept, $jiwa_stateful, $warehouse_transfer_out_id, $last_saved_date_time, $transfer_date, $activated_date, $status, $created_by_staff_id, $created_by_staff_user_name, $created_by_staff_title, $created_by_staff_first_name, $created_by_staff_surname, $source, $source_type, $source_id, $source_no, $notes, $source_warehouse_id, $source_warehouse_logical_description, $source_warehouse_physical_description, $source_warehouse_mask, $destination_warehouse_id, $destination_warehouse_logical_description, $destination_warehouse_physical_description, $destination_warehouse_mask, $transfer_no, $use_in_transit, $transit_notes, $in_transit_warehouse_id, $in_transit_warehouse_logical_description, $in_transit_warehouse_physical_description, $in_transit_warehouse_mask, $added_cost1, $added_cost2, $added_cost3, $picked_by_staff_id, $picked_by_staff_user_name, $picked_by_staff_title, $picked_by_staff_first_name, $picked_by_staff_surname, $added_cost_method_name, $transferred_cost, $total_cost, $receive_ins, $lines, $body);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'warehouseTransferInPOSTRequestPost'
     *
     * @param  string $accept Accept Header (required)
     * @param  bool $jiwa_stateful Stateful indicator (optional)
     * @param  string $warehouse_transfer_out_id (optional)
     * @param  \DateTime $last_saved_date_time (optional)
     * @param  \DateTime $transfer_date (optional)
     * @param  \DateTime $activated_date (optional)
     * @param  string $status (optional)
     * @param  string $created_by_staff_id (optional)
     * @param  string $created_by_staff_user_name (optional)
     * @param  string $created_by_staff_title (optional)
     * @param  string $created_by_staff_first_name (optional)
     * @param  string $created_by_staff_surname (optional)
     * @param  string $source (optional)
     * @param  string $source_type (optional)
     * @param  string $source_id (optional)
     * @param  string $source_no (optional)
     * @param  string $notes (optional)
     * @param  string $source_warehouse_id (optional)
     * @param  string $source_warehouse_logical_description (optional)
     * @param  string $source_warehouse_physical_description (optional)
     * @param  string $source_warehouse_mask (optional)
     * @param  string $destination_warehouse_id (optional)
     * @param  string $destination_warehouse_logical_description (optional)
     * @param  string $destination_warehouse_physical_description (optional)
     * @param  string $destination_warehouse_mask (optional)
     * @param  string $transfer_no (optional)
     * @param  bool $use_in_transit (optional)
     * @param  string $transit_notes (optional)
     * @param  string $in_transit_warehouse_id (optional)
     * @param  string $in_transit_warehouse_logical_description (optional)
     * @param  string $in_transit_warehouse_physical_description (optional)
     * @param  string $in_transit_warehouse_mask (optional)
     * @param  double $added_cost1 (optional)
     * @param  double $added_cost2 (optional)
     * @param  double $added_cost3 (optional)
     * @param  string $picked_by_staff_id (optional)
     * @param  string $picked_by_staff_user_name (optional)
     * @param  string $picked_by_staff_title (optional)
     * @param  string $picked_by_staff_first_name (optional)
     * @param  string $picked_by_staff_surname (optional)
     * @param  string $added_cost_method_name (optional)
     * @param  double $transferred_cost (optional)
     * @param  double $total_cost (optional)
     * @param  string $receive_ins (optional)
     * @param  string $lines (optional)
     * @param  \Jiwa\Model\WarehouseTransferInPOSTRequest $body (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function warehouseTransferInPOSTRequestPostRequest($accept, $jiwa_stateful = null, $warehouse_transfer_out_id = null, $last_saved_date_time = null, $transfer_date = null, $activated_date = null, $status = null, $created_by_staff_id = null, $created_by_staff_user_name = null, $created_by_staff_title = null, $created_by_staff_first_name = null, $created_by_staff_surname = null, $source = null, $source_type = null, $source_id = null, $source_no = null, $notes = null, $source_warehouse_id = null, $source_warehouse_logical_description = null, $source_warehouse_physical_description = null, $source_warehouse_mask = null, $destination_warehouse_id = null, $destination_warehouse_logical_description = null, $destination_warehouse_physical_description = null, $destination_warehouse_mask = null, $transfer_no = null, $use_in_transit = null, $transit_notes = null, $in_transit_warehouse_id = null, $in_transit_warehouse_logical_description = null, $in_transit_warehouse_physical_description = null, $in_transit_warehouse_mask = null, $added_cost1 = null, $added_cost2 = null, $added_cost3 = null, $picked_by_staff_id = null, $picked_by_staff_user_name = null, $picked_by_staff_title = null, $picked_by_staff_first_name = null, $picked_by_staff_surname = null, $added_cost_method_name = null, $transferred_cost = null, $total_cost = null, $receive_ins = null, $lines = null, $body = null)
    {
        // verify the required parameter 'accept' is set
        if ($accept === null || (is_array($accept) && count($accept) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $accept when calling warehouseTransferInPOSTRequestPost'
            );
        }

        $resourcePath = '/WarehouseTransfersIn';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        if ($warehouse_transfer_out_id !== null) {
            $queryParams['WarehouseTransferOutID'] = ObjectSerializer::toQueryValue($warehouse_transfer_out_id);
        }
        // query params
        if ($last_saved_date_time !== null) {
            $queryParams['LastSavedDateTime'] = ObjectSerializer::toQueryValue($last_saved_date_time);
        }
        // query params
        if ($transfer_date !== null) {
            $queryParams['TransferDate'] = ObjectSerializer::toQueryValue($transfer_date);
        }
        // query params
        if ($activated_date !== null) {
            $queryParams['ActivatedDate'] = ObjectSerializer::toQueryValue($activated_date);
        }
        // query params
        if ($status !== null) {
            $queryParams['Status'] = ObjectSerializer::toQueryValue($status);
        }
        // query params
        if ($created_by_staff_id !== null) {
            $queryParams['CreatedByStaffID'] = ObjectSerializer::toQueryValue($created_by_staff_id);
        }
        // query params
        if ($created_by_staff_user_name !== null) {
            $queryParams['CreatedByStaffUserName'] = ObjectSerializer::toQueryValue($created_by_staff_user_name);
        }
        // query params
        if ($created_by_staff_title !== null) {
            $queryParams['CreatedByStaffTitle'] = ObjectSerializer::toQueryValue($created_by_staff_title);
        }
        // query params
        if ($created_by_staff_first_name !== null) {
            $queryParams['CreatedByStaffFirstName'] = ObjectSerializer::toQueryValue($created_by_staff_first_name);
        }
        // query params
        if ($created_by_staff_surname !== null) {
            $queryParams['CreatedByStaffSurname'] = ObjectSerializer::toQueryValue($created_by_staff_surname);
        }
        // query params
        if ($source !== null) {
            $queryParams['Source'] = ObjectSerializer::toQueryValue($source);
        }
        // query params
        if ($source_type !== null) {
            $queryParams['SourceType'] = ObjectSerializer::toQueryValue($source_type);
        }
        // query params
        if ($source_id !== null) {
            $queryParams['SourceID'] = ObjectSerializer::toQueryValue($source_id);
        }
        // query params
        if ($source_no !== null) {
            $queryParams['SourceNo'] = ObjectSerializer::toQueryValue($source_no);
        }
        // query params
        if ($notes !== null) {
            $queryParams['Notes'] = ObjectSerializer::toQueryValue($notes);
        }
        // query params
        if ($source_warehouse_id !== null) {
            $queryParams['SourceWarehouseID'] = ObjectSerializer::toQueryValue($source_warehouse_id);
        }
        // query params
        if ($source_warehouse_logical_description !== null) {
            $queryParams['SourceWarehouseLogicalDescription'] = ObjectSerializer::toQueryValue($source_warehouse_logical_description);
        }
        // query params
        if ($source_warehouse_physical_description !== null) {
            $queryParams['SourceWarehousePhysicalDescription'] = ObjectSerializer::toQueryValue($source_warehouse_physical_description);
        }
        // query params
        if ($source_warehouse_mask !== null) {
            $queryParams['SourceWarehouseMask'] = ObjectSerializer::toQueryValue($source_warehouse_mask);
        }
        // query params
        if ($destination_warehouse_id !== null) {
            $queryParams['DestinationWarehouseID'] = ObjectSerializer::toQueryValue($destination_warehouse_id);
        }
        // query params
        if ($destination_warehouse_logical_description !== null) {
            $queryParams['DestinationWarehouseLogicalDescription'] = ObjectSerializer::toQueryValue($destination_warehouse_logical_description);
        }
        // query params
        if ($destination_warehouse_physical_description !== null) {
            $queryParams['DestinationWarehousePhysicalDescription'] = ObjectSerializer::toQueryValue($destination_warehouse_physical_description);
        }
        // query params
        if ($destination_warehouse_mask !== null) {
            $queryParams['DestinationWarehouseMask'] = ObjectSerializer::toQueryValue($destination_warehouse_mask);
        }
        // query params
        if ($transfer_no !== null) {
            $queryParams['TransferNo'] = ObjectSerializer::toQueryValue($transfer_no);
        }
        // query params
        if ($use_in_transit !== null) {
            $queryParams['UseInTransit'] = ObjectSerializer::toQueryValue($use_in_transit);
        }
        // query params
        if ($transit_notes !== null) {
            $queryParams['TransitNotes'] = ObjectSerializer::toQueryValue($transit_notes);
        }
        // query params
        if ($in_transit_warehouse_id !== null) {
            $queryParams['InTransitWarehouseID'] = ObjectSerializer::toQueryValue($in_transit_warehouse_id);
        }
        // query params
        if ($in_transit_warehouse_logical_description !== null) {
            $queryParams['InTransitWarehouseLogicalDescription'] = ObjectSerializer::toQueryValue($in_transit_warehouse_logical_description);
        }
        // query params
        if ($in_transit_warehouse_physical_description !== null) {
            $queryParams['InTransitWarehousePhysicalDescription'] = ObjectSerializer::toQueryValue($in_transit_warehouse_physical_description);
        }
        // query params
        if ($in_transit_warehouse_mask !== null) {
            $queryParams['InTransitWarehouseMask'] = ObjectSerializer::toQueryValue($in_transit_warehouse_mask);
        }
        // query params
        if ($added_cost1 !== null) {
            $queryParams['AddedCost1'] = ObjectSerializer::toQueryValue($added_cost1);
        }
        // query params
        if ($added_cost2 !== null) {
            $queryParams['AddedCost2'] = ObjectSerializer::toQueryValue($added_cost2);
        }
        // query params
        if ($added_cost3 !== null) {
            $queryParams['AddedCost3'] = ObjectSerializer::toQueryValue($added_cost3);
        }
        // query params
        if ($picked_by_staff_id !== null) {
            $queryParams['PickedByStaffID'] = ObjectSerializer::toQueryValue($picked_by_staff_id);
        }
        // query params
        if ($picked_by_staff_user_name !== null) {
            $queryParams['PickedByStaffUserName'] = ObjectSerializer::toQueryValue($picked_by_staff_user_name);
        }
        // query params
        if ($picked_by_staff_title !== null) {
            $queryParams['PickedByStaffTitle'] = ObjectSerializer::toQueryValue($picked_by_staff_title);
        }
        // query params
        if ($picked_by_staff_first_name !== null) {
            $queryParams['PickedByStaffFirstName'] = ObjectSerializer::toQueryValue($picked_by_staff_first_name);
        }
        // query params
        if ($picked_by_staff_surname !== null) {
            $queryParams['PickedByStaffSurname'] = ObjectSerializer::toQueryValue($picked_by_staff_surname);
        }
        // query params
        if ($added_cost_method_name !== null) {
            $queryParams['AddedCostMethodName'] = ObjectSerializer::toQueryValue($added_cost_method_name);
        }
        // query params
        if ($transferred_cost !== null) {
            $queryParams['TransferredCost'] = ObjectSerializer::toQueryValue($transferred_cost);
        }
        // query params
        if ($total_cost !== null) {
            $queryParams['TotalCost'] = ObjectSerializer::toQueryValue($total_cost);
        }
        // query params
        if ($receive_ins !== null) {
            $queryParams['ReceiveIns'] = ObjectSerializer::toQueryValue($receive_ins);
        }
        // query params
        if ($lines !== null) {
            $queryParams['Lines'] = ObjectSerializer::toQueryValue($lines);
        }
        // header params
        if ($accept !== null) {
            $headerParams['Accept'] = ObjectSerializer::toHeaderValue($accept);
        }
        // header params
        if ($jiwa_stateful !== null) {
            $headerParams['jiwa-stateful'] = ObjectSerializer::toHeaderValue($jiwa_stateful);
        }


        // body params
        $_tempBody = null;
        if (isset($body)) {
            $_tempBody = $body;
        }

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json', 'application/xml']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json', 'application/xml'],
                ['application/x-www-form-urlencoded', 'application/json', 'application/xml']
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            
            if($headers['Content-Type'] === 'application/json') {
                // \stdClass has no __toString(), so we should encode it manually
                if ($httpBody instanceof \stdClass) {
                    $httpBody = \GuzzleHttp\json_encode($httpBody);
                }
                // array has no __toString(), so we should encode it manually
                if(is_array($httpBody)) {
                    $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($httpBody));
                }
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\Query::build($formParams);
            }
        }

        // this endpoint requires HTTP basic authentication
        if ($this->config->getUsername() !== null || $this->config->getPassword() !== null) {
            $headers['Authorization'] = 'Basic ' . base64_encode($this->config->getUsername() . ":" . $this->config->getPassword());
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\Query::build($queryParams);
        return new Request(
            'POST',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation warehouseTransferInReceiveInsGETManyRequestWarehouseTransferInIDReceiveInsGet
     *
     * Retrieves a list of warehouse transfer in receive ins.
     *
     * @param  string $accept Accept Header (required)
     * @param  string $warehouse_transfer_in_id warehouse_transfer_in_id (required)
     * @param  bool $jiwa_stateful Stateful indicator (optional)
     *
     * @throws \Jiwa\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Jiwa\Model\WarehouseTransferInReceiveIn[]
     */
    public function warehouseTransferInReceiveInsGETManyRequestWarehouseTransferInIDReceiveInsGet($accept, $warehouse_transfer_in_id, $jiwa_stateful = null)
    {
        list($response) = $this->warehouseTransferInReceiveInsGETManyRequestWarehouseTransferInIDReceiveInsGetWithHttpInfo($accept, $warehouse_transfer_in_id, $jiwa_stateful);
        return $response;
    }

    /**
     * Operation warehouseTransferInReceiveInsGETManyRequestWarehouseTransferInIDReceiveInsGetWithHttpInfo
     *
     * Retrieves a list of warehouse transfer in receive ins.
     *
     * @param  string $accept Accept Header (required)
     * @param  string $warehouse_transfer_in_id (required)
     * @param  bool $jiwa_stateful Stateful indicator (optional)
     *
     * @throws \Jiwa\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Jiwa\Model\WarehouseTransferInReceiveIn[], HTTP status code, HTTP response headers (array of strings)
     */
    public function warehouseTransferInReceiveInsGETManyRequestWarehouseTransferInIDReceiveInsGetWithHttpInfo($accept, $warehouse_transfer_in_id, $jiwa_stateful = null)
    {
        $returnType = '\Jiwa\Model\WarehouseTransferInReceiveIn[]';
        $request = $this->warehouseTransferInReceiveInsGETManyRequestWarehouseTransferInIDReceiveInsGetRequest($accept, $warehouse_transfer_in_id, $jiwa_stateful);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Jiwa\Model\WarehouseTransferInReceiveIn[]',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 403:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Jiwa\Model\WarehouseTransferInReceiveIn[]',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 404:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Jiwa\Model\WarehouseTransferInReceiveIn[]',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 401:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Jiwa\Model\WarehouseTransferInReceiveIn[]',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation warehouseTransferInReceiveInsGETManyRequestWarehouseTransferInIDReceiveInsGetAsync
     *
     * Retrieves a list of warehouse transfer in receive ins.
     *
     * @param  string $accept Accept Header (required)
     * @param  string $warehouse_transfer_in_id (required)
     * @param  bool $jiwa_stateful Stateful indicator (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function warehouseTransferInReceiveInsGETManyRequestWarehouseTransferInIDReceiveInsGetAsync($accept, $warehouse_transfer_in_id, $jiwa_stateful = null)
    {
        return $this->warehouseTransferInReceiveInsGETManyRequestWarehouseTransferInIDReceiveInsGetAsyncWithHttpInfo($accept, $warehouse_transfer_in_id, $jiwa_stateful)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation warehouseTransferInReceiveInsGETManyRequestWarehouseTransferInIDReceiveInsGetAsyncWithHttpInfo
     *
     * Retrieves a list of warehouse transfer in receive ins.
     *
     * @param  string $accept Accept Header (required)
     * @param  string $warehouse_transfer_in_id (required)
     * @param  bool $jiwa_stateful Stateful indicator (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function warehouseTransferInReceiveInsGETManyRequestWarehouseTransferInIDReceiveInsGetAsyncWithHttpInfo($accept, $warehouse_transfer_in_id, $jiwa_stateful = null)
    {
        $returnType = '\Jiwa\Model\WarehouseTransferInReceiveIn[]';
        $request = $this->warehouseTransferInReceiveInsGETManyRequestWarehouseTransferInIDReceiveInsGetRequest($accept, $warehouse_transfer_in_id, $jiwa_stateful);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'warehouseTransferInReceiveInsGETManyRequestWarehouseTransferInIDReceiveInsGet'
     *
     * @param  string $accept Accept Header (required)
     * @param  string $warehouse_transfer_in_id (required)
     * @param  bool $jiwa_stateful Stateful indicator (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function warehouseTransferInReceiveInsGETManyRequestWarehouseTransferInIDReceiveInsGetRequest($accept, $warehouse_transfer_in_id, $jiwa_stateful = null)
    {
        // verify the required parameter 'accept' is set
        if ($accept === null || (is_array($accept) && count($accept) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $accept when calling warehouseTransferInReceiveInsGETManyRequestWarehouseTransferInIDReceiveInsGet'
            );
        }
        // verify the required parameter 'warehouse_transfer_in_id' is set
        if ($warehouse_transfer_in_id === null || (is_array($warehouse_transfer_in_id) && count($warehouse_transfer_in_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $warehouse_transfer_in_id when calling warehouseTransferInReceiveInsGETManyRequestWarehouseTransferInIDReceiveInsGet'
            );
        }

        $resourcePath = '/WarehouseTransfersIn/{WarehouseTransferInID}/ReceiveIns';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // header params
        if ($accept !== null) {
            $headerParams['Accept'] = ObjectSerializer::toHeaderValue($accept);
        }
        // header params
        if ($jiwa_stateful !== null) {
            $headerParams['jiwa-stateful'] = ObjectSerializer::toHeaderValue($jiwa_stateful);
        }

        // path params
        if ($warehouse_transfer_in_id !== null) {
            $resourcePath = str_replace(
                '{' . 'WarehouseTransferInID' . '}',
                ObjectSerializer::toPathValue($warehouse_transfer_in_id),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json', 'application/xml']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json', 'application/xml'],
                ['application/x-www-form-urlencoded', 'application/json', 'application/xml']
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            
            if($headers['Content-Type'] === 'application/json') {
                // \stdClass has no __toString(), so we should encode it manually
                if ($httpBody instanceof \stdClass) {
                    $httpBody = \GuzzleHttp\json_encode($httpBody);
                }
                // array has no __toString(), so we should encode it manually
                if(is_array($httpBody)) {
                    $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($httpBody));
                }
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\Query::build($formParams);
            }
        }

        // this endpoint requires HTTP basic authentication
        if ($this->config->getUsername() !== null || $this->config->getPassword() !== null) {
            $headers['Authorization'] = 'Basic ' . base64_encode($this->config->getUsername() . ":" . $this->config->getPassword());
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\Query::build($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation warehouseTransferInSAVERequestSaveGet
     *
     * Saves a stateful stateful warehouse transfer in.
     *
     * @param  string $accept Accept Header (required)
     * @param  bool $jiwa_stateful Stateful indicator (optional)
     * @param  string $warehouse_transfer_in_id warehouse_transfer_in_id (optional)
     *
     * @throws \Jiwa\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Jiwa\Model\WarehouseTransferIn
     */
    public function warehouseTransferInSAVERequestSaveGet($accept, $jiwa_stateful = null, $warehouse_transfer_in_id = null)
    {
        list($response) = $this->warehouseTransferInSAVERequestSaveGetWithHttpInfo($accept, $jiwa_stateful, $warehouse_transfer_in_id);
        return $response;
    }

    /**
     * Operation warehouseTransferInSAVERequestSaveGetWithHttpInfo
     *
     * Saves a stateful stateful warehouse transfer in.
     *
     * @param  string $accept Accept Header (required)
     * @param  bool $jiwa_stateful Stateful indicator (optional)
     * @param  string $warehouse_transfer_in_id (optional)
     *
     * @throws \Jiwa\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Jiwa\Model\WarehouseTransferIn, HTTP status code, HTTP response headers (array of strings)
     */
    public function warehouseTransferInSAVERequestSaveGetWithHttpInfo($accept, $jiwa_stateful = null, $warehouse_transfer_in_id = null)
    {
        $returnType = '\Jiwa\Model\WarehouseTransferIn';
        $request = $this->warehouseTransferInSAVERequestSaveGetRequest($accept, $jiwa_stateful, $warehouse_transfer_in_id);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Jiwa\Model\WarehouseTransferIn',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 404:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Jiwa\Model\WarehouseTransferIn',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 401:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Jiwa\Model\WarehouseTransferIn',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 403:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Jiwa\Model\WarehouseTransferIn',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation warehouseTransferInSAVERequestSaveGetAsync
     *
     * Saves a stateful stateful warehouse transfer in.
     *
     * @param  string $accept Accept Header (required)
     * @param  bool $jiwa_stateful Stateful indicator (optional)
     * @param  string $warehouse_transfer_in_id (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function warehouseTransferInSAVERequestSaveGetAsync($accept, $jiwa_stateful = null, $warehouse_transfer_in_id = null)
    {
        return $this->warehouseTransferInSAVERequestSaveGetAsyncWithHttpInfo($accept, $jiwa_stateful, $warehouse_transfer_in_id)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation warehouseTransferInSAVERequestSaveGetAsyncWithHttpInfo
     *
     * Saves a stateful stateful warehouse transfer in.
     *
     * @param  string $accept Accept Header (required)
     * @param  bool $jiwa_stateful Stateful indicator (optional)
     * @param  string $warehouse_transfer_in_id (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function warehouseTransferInSAVERequestSaveGetAsyncWithHttpInfo($accept, $jiwa_stateful = null, $warehouse_transfer_in_id = null)
    {
        $returnType = '\Jiwa\Model\WarehouseTransferIn';
        $request = $this->warehouseTransferInSAVERequestSaveGetRequest($accept, $jiwa_stateful, $warehouse_transfer_in_id);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'warehouseTransferInSAVERequestSaveGet'
     *
     * @param  string $accept Accept Header (required)
     * @param  bool $jiwa_stateful Stateful indicator (optional)
     * @param  string $warehouse_transfer_in_id (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function warehouseTransferInSAVERequestSaveGetRequest($accept, $jiwa_stateful = null, $warehouse_transfer_in_id = null)
    {
        // verify the required parameter 'accept' is set
        if ($accept === null || (is_array($accept) && count($accept) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $accept when calling warehouseTransferInSAVERequestSaveGet'
            );
        }

        $resourcePath = '/WarehouseTransfersIn/Save';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        if ($warehouse_transfer_in_id !== null) {
            $queryParams['WarehouseTransferInID'] = ObjectSerializer::toQueryValue($warehouse_transfer_in_id);
        }
        // header params
        if ($accept !== null) {
            $headerParams['Accept'] = ObjectSerializer::toHeaderValue($accept);
        }
        // header params
        if ($jiwa_stateful !== null) {
            $headerParams['jiwa-stateful'] = ObjectSerializer::toHeaderValue($jiwa_stateful);
        }


        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json', 'application/xml']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json', 'application/xml'],
                ['application/x-www-form-urlencoded', 'application/json', 'application/xml']
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            
            if($headers['Content-Type'] === 'application/json') {
                // \stdClass has no __toString(), so we should encode it manually
                if ($httpBody instanceof \stdClass) {
                    $httpBody = \GuzzleHttp\json_encode($httpBody);
                }
                // array has no __toString(), so we should encode it manually
                if(is_array($httpBody)) {
                    $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($httpBody));
                }
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\Query::build($formParams);
            }
        }

        // this endpoint requires HTTP basic authentication
        if ($this->config->getUsername() !== null || $this->config->getPassword() !== null) {
            $headers['Authorization'] = 'Basic ' . base64_encode($this->config->getUsername() . ":" . $this->config->getPassword());
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\Query::build($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Create http client option
     *
     * @throws \RuntimeException on file opening failure
     * @return array of http client options
     */
    protected function createHttpClientOption()
    {
        $options = [];
        if ($this->config->getDebug()) {
            $options[RequestOptions::DEBUG] = fopen($this->config->getDebugFile(), 'a');
            if (!$options[RequestOptions::DEBUG]) {
                throw new \RuntimeException('Failed to open the debug file: ' . $this->config->getDebugFile());
            }
        }

        return $options;
    }
}

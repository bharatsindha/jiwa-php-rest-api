<?php
/**
 * SalesQuotesApi
 * PHP version 5
 *
 * @category Class
 * @package  Jiwa
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * JiwaAPI
 *
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: 1.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 * Swagger Codegen version: 2.4.28-SNAPSHOT
 */

/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Jiwa\Api;

use GuzzleHttp\Client;
use GuzzleHttp\ClientInterface;
use GuzzleHttp\Exception\RequestException;
use GuzzleHttp\Psr7\MultipartStream;
use GuzzleHttp\Psr7\Request;
use GuzzleHttp\RequestOptions;
use Jiwa\ApiException;
use Jiwa\Configuration;
use Jiwa\HeaderSelector;
use Jiwa\ObjectSerializer;

/**
 * SalesQuotesApi Class Doc Comment
 *
 * @category Class
 * @package  Jiwa
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class SalesQuotesApi
{
    /**
     * @var ClientInterface
     */
    protected $client;

    /**
     * @var Configuration
     */
    protected $config;

    /**
     * @var HeaderSelector
     */
    protected $headerSelector;

    /**
     * @param ClientInterface $client
     * @param Configuration   $config
     * @param HeaderSelector  $selector
     */
    public function __construct(
        ClientInterface $client = null,
        Configuration $config = null,
        HeaderSelector $selector = null
    ) {
        $this->client = $client ?: new Client();
        $this->config = $config ?: new Configuration();
        $this->headerSelector = $selector ?: new HeaderSelector();
    }

    /**
     * @return Configuration
     */
    public function getConfig()
    {
        return $this->config;
    }

    /**
     * Operation salesQuoteABANDONRequestQuoteIDAbandonDelete
     *
     * Abandons a stateful sales Quote.
     *
     * @param  string $accept Accept Header (required)
     * @param  string $quote_id quote_id (required)
     * @param  bool $jiwa_stateful Stateful indicator (optional)
     *
     * @throws \Jiwa\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Jiwa\Model\Object
     */
    public function salesQuoteABANDONRequestQuoteIDAbandonDelete($accept, $quote_id, $jiwa_stateful = null)
    {
        list($response) = $this->salesQuoteABANDONRequestQuoteIDAbandonDeleteWithHttpInfo($accept, $quote_id, $jiwa_stateful);
        return $response;
    }

    /**
     * Operation salesQuoteABANDONRequestQuoteIDAbandonDeleteWithHttpInfo
     *
     * Abandons a stateful sales Quote.
     *
     * @param  string $accept Accept Header (required)
     * @param  string $quote_id (required)
     * @param  bool $jiwa_stateful Stateful indicator (optional)
     *
     * @throws \Jiwa\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Jiwa\Model\Object, HTTP status code, HTTP response headers (array of strings)
     */
    public function salesQuoteABANDONRequestQuoteIDAbandonDeleteWithHttpInfo($accept, $quote_id, $jiwa_stateful = null)
    {
        $returnType = '\Jiwa\Model\Object';
        $request = $this->salesQuoteABANDONRequestQuoteIDAbandonDeleteRequest($accept, $quote_id, $jiwa_stateful);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Jiwa\Model\Object',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 403:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Jiwa\Model\Object',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 404:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Jiwa\Model\Object',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 401:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Jiwa\Model\Object',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation salesQuoteABANDONRequestQuoteIDAbandonDeleteAsync
     *
     * Abandons a stateful sales Quote.
     *
     * @param  string $accept Accept Header (required)
     * @param  string $quote_id (required)
     * @param  bool $jiwa_stateful Stateful indicator (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function salesQuoteABANDONRequestQuoteIDAbandonDeleteAsync($accept, $quote_id, $jiwa_stateful = null)
    {
        return $this->salesQuoteABANDONRequestQuoteIDAbandonDeleteAsyncWithHttpInfo($accept, $quote_id, $jiwa_stateful)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation salesQuoteABANDONRequestQuoteIDAbandonDeleteAsyncWithHttpInfo
     *
     * Abandons a stateful sales Quote.
     *
     * @param  string $accept Accept Header (required)
     * @param  string $quote_id (required)
     * @param  bool $jiwa_stateful Stateful indicator (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function salesQuoteABANDONRequestQuoteIDAbandonDeleteAsyncWithHttpInfo($accept, $quote_id, $jiwa_stateful = null)
    {
        $returnType = '\Jiwa\Model\Object';
        $request = $this->salesQuoteABANDONRequestQuoteIDAbandonDeleteRequest($accept, $quote_id, $jiwa_stateful);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'salesQuoteABANDONRequestQuoteIDAbandonDelete'
     *
     * @param  string $accept Accept Header (required)
     * @param  string $quote_id (required)
     * @param  bool $jiwa_stateful Stateful indicator (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function salesQuoteABANDONRequestQuoteIDAbandonDeleteRequest($accept, $quote_id, $jiwa_stateful = null)
    {
        // verify the required parameter 'accept' is set
        if ($accept === null || (is_array($accept) && count($accept) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $accept when calling salesQuoteABANDONRequestQuoteIDAbandonDelete'
            );
        }
        // verify the required parameter 'quote_id' is set
        if ($quote_id === null || (is_array($quote_id) && count($quote_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $quote_id when calling salesQuoteABANDONRequestQuoteIDAbandonDelete'
            );
        }

        $resourcePath = '/SalesQuotes/{QuoteID}/Abandon';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // header params
        if ($accept !== null) {
            $headerParams['Accept'] = ObjectSerializer::toHeaderValue($accept);
        }
        // header params
        if ($jiwa_stateful !== null) {
            $headerParams['jiwa-stateful'] = ObjectSerializer::toHeaderValue($jiwa_stateful);
        }

        // path params
        if ($quote_id !== null) {
            $resourcePath = str_replace(
                '{' . 'QuoteID' . '}',
                ObjectSerializer::toPathValue($quote_id),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json', 'application/xml']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json', 'application/xml'],
                ['application/x-www-form-urlencoded', 'application/json', 'application/xml']
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            
            if($headers['Content-Type'] === 'application/json') {
                // \stdClass has no __toString(), so we should encode it manually
                if ($httpBody instanceof \stdClass) {
                    $httpBody = \GuzzleHttp\json_encode($httpBody);
                }
                // array has no __toString(), so we should encode it manually
                if(is_array($httpBody)) {
                    $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($httpBody));
                }
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\Query::build($formParams);
            }
        }

        // this endpoint requires HTTP basic authentication
        if ($this->config->getUsername() !== null || $this->config->getPassword() !== null) {
            $headers['Authorization'] = 'Basic ' . base64_encode($this->config->getUsername() . ":" . $this->config->getPassword());
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\Query::build($queryParams);
        return new Request(
            'DELETE',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation salesQuoteCustomFieldValueGETRequestQuoteIDCustomFieldValuesSettingIDGet
     *
     * Retrieves a sales Quote custom field value.
     *
     * @param  string $accept Accept Header (required)
     * @param  string $quote_id quote_id (required)
     * @param  string $setting_id setting_id (required)
     * @param  bool $jiwa_stateful Stateful indicator (optional)
     *
     * @throws \Jiwa\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Jiwa\Model\CustomFieldValue
     */
    public function salesQuoteCustomFieldValueGETRequestQuoteIDCustomFieldValuesSettingIDGet($accept, $quote_id, $setting_id, $jiwa_stateful = null)
    {
        list($response) = $this->salesQuoteCustomFieldValueGETRequestQuoteIDCustomFieldValuesSettingIDGetWithHttpInfo($accept, $quote_id, $setting_id, $jiwa_stateful);
        return $response;
    }

    /**
     * Operation salesQuoteCustomFieldValueGETRequestQuoteIDCustomFieldValuesSettingIDGetWithHttpInfo
     *
     * Retrieves a sales Quote custom field value.
     *
     * @param  string $accept Accept Header (required)
     * @param  string $quote_id (required)
     * @param  string $setting_id (required)
     * @param  bool $jiwa_stateful Stateful indicator (optional)
     *
     * @throws \Jiwa\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Jiwa\Model\CustomFieldValue, HTTP status code, HTTP response headers (array of strings)
     */
    public function salesQuoteCustomFieldValueGETRequestQuoteIDCustomFieldValuesSettingIDGetWithHttpInfo($accept, $quote_id, $setting_id, $jiwa_stateful = null)
    {
        $returnType = '\Jiwa\Model\CustomFieldValue';
        $request = $this->salesQuoteCustomFieldValueGETRequestQuoteIDCustomFieldValuesSettingIDGetRequest($accept, $quote_id, $setting_id, $jiwa_stateful);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Jiwa\Model\CustomFieldValue',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 404:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Jiwa\Model\CustomFieldValue',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 401:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Jiwa\Model\CustomFieldValue',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 403:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Jiwa\Model\CustomFieldValue',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation salesQuoteCustomFieldValueGETRequestQuoteIDCustomFieldValuesSettingIDGetAsync
     *
     * Retrieves a sales Quote custom field value.
     *
     * @param  string $accept Accept Header (required)
     * @param  string $quote_id (required)
     * @param  string $setting_id (required)
     * @param  bool $jiwa_stateful Stateful indicator (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function salesQuoteCustomFieldValueGETRequestQuoteIDCustomFieldValuesSettingIDGetAsync($accept, $quote_id, $setting_id, $jiwa_stateful = null)
    {
        return $this->salesQuoteCustomFieldValueGETRequestQuoteIDCustomFieldValuesSettingIDGetAsyncWithHttpInfo($accept, $quote_id, $setting_id, $jiwa_stateful)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation salesQuoteCustomFieldValueGETRequestQuoteIDCustomFieldValuesSettingIDGetAsyncWithHttpInfo
     *
     * Retrieves a sales Quote custom field value.
     *
     * @param  string $accept Accept Header (required)
     * @param  string $quote_id (required)
     * @param  string $setting_id (required)
     * @param  bool $jiwa_stateful Stateful indicator (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function salesQuoteCustomFieldValueGETRequestQuoteIDCustomFieldValuesSettingIDGetAsyncWithHttpInfo($accept, $quote_id, $setting_id, $jiwa_stateful = null)
    {
        $returnType = '\Jiwa\Model\CustomFieldValue';
        $request = $this->salesQuoteCustomFieldValueGETRequestQuoteIDCustomFieldValuesSettingIDGetRequest($accept, $quote_id, $setting_id, $jiwa_stateful);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'salesQuoteCustomFieldValueGETRequestQuoteIDCustomFieldValuesSettingIDGet'
     *
     * @param  string $accept Accept Header (required)
     * @param  string $quote_id (required)
     * @param  string $setting_id (required)
     * @param  bool $jiwa_stateful Stateful indicator (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function salesQuoteCustomFieldValueGETRequestQuoteIDCustomFieldValuesSettingIDGetRequest($accept, $quote_id, $setting_id, $jiwa_stateful = null)
    {
        // verify the required parameter 'accept' is set
        if ($accept === null || (is_array($accept) && count($accept) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $accept when calling salesQuoteCustomFieldValueGETRequestQuoteIDCustomFieldValuesSettingIDGet'
            );
        }
        // verify the required parameter 'quote_id' is set
        if ($quote_id === null || (is_array($quote_id) && count($quote_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $quote_id when calling salesQuoteCustomFieldValueGETRequestQuoteIDCustomFieldValuesSettingIDGet'
            );
        }
        // verify the required parameter 'setting_id' is set
        if ($setting_id === null || (is_array($setting_id) && count($setting_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $setting_id when calling salesQuoteCustomFieldValueGETRequestQuoteIDCustomFieldValuesSettingIDGet'
            );
        }

        $resourcePath = '/SalesQuotes/{QuoteID}/CustomFieldValues/{SettingID}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // header params
        if ($accept !== null) {
            $headerParams['Accept'] = ObjectSerializer::toHeaderValue($accept);
        }
        // header params
        if ($jiwa_stateful !== null) {
            $headerParams['jiwa-stateful'] = ObjectSerializer::toHeaderValue($jiwa_stateful);
        }

        // path params
        if ($quote_id !== null) {
            $resourcePath = str_replace(
                '{' . 'QuoteID' . '}',
                ObjectSerializer::toPathValue($quote_id),
                $resourcePath
            );
        }
        // path params
        if ($setting_id !== null) {
            $resourcePath = str_replace(
                '{' . 'SettingID' . '}',
                ObjectSerializer::toPathValue($setting_id),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json', 'application/xml']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json', 'application/xml'],
                ['application/x-www-form-urlencoded', 'application/json', 'application/xml']
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            
            if($headers['Content-Type'] === 'application/json') {
                // \stdClass has no __toString(), so we should encode it manually
                if ($httpBody instanceof \stdClass) {
                    $httpBody = \GuzzleHttp\json_encode($httpBody);
                }
                // array has no __toString(), so we should encode it manually
                if(is_array($httpBody)) {
                    $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($httpBody));
                }
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\Query::build($formParams);
            }
        }

        // this endpoint requires HTTP basic authentication
        if ($this->config->getUsername() !== null || $this->config->getPassword() !== null) {
            $headers['Authorization'] = 'Basic ' . base64_encode($this->config->getUsername() . ":" . $this->config->getPassword());
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\Query::build($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation salesQuoteCustomFieldValuePATCHRequestQuoteIDCustomFieldValuesSettingIDUpdate
     *
     * Updates a sales Quote custom field value.
     *
     * @param  string $accept Accept Header (required)
     * @param  string $quote_id quote_id (required)
     * @param  string $setting_id setting_id (required)
     * @param  bool $jiwa_stateful Stateful indicator (optional)
     * @param  string $contents contents (optional)
     * @param  \Jiwa\Model\SalesQuoteCustomFieldValuePATCHRequest $body body (optional)
     *
     * @throws \Jiwa\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Jiwa\Model\CustomFieldValue
     */
    public function salesQuoteCustomFieldValuePATCHRequestQuoteIDCustomFieldValuesSettingIDUpdate($accept, $quote_id, $setting_id, $jiwa_stateful = null, $contents = null, $body = null)
    {
        list($response) = $this->salesQuoteCustomFieldValuePATCHRequestQuoteIDCustomFieldValuesSettingIDUpdateWithHttpInfo($accept, $quote_id, $setting_id, $jiwa_stateful, $contents, $body);
        return $response;
    }

    /**
     * Operation salesQuoteCustomFieldValuePATCHRequestQuoteIDCustomFieldValuesSettingIDUpdateWithHttpInfo
     *
     * Updates a sales Quote custom field value.
     *
     * @param  string $accept Accept Header (required)
     * @param  string $quote_id (required)
     * @param  string $setting_id (required)
     * @param  bool $jiwa_stateful Stateful indicator (optional)
     * @param  string $contents (optional)
     * @param  \Jiwa\Model\SalesQuoteCustomFieldValuePATCHRequest $body (optional)
     *
     * @throws \Jiwa\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Jiwa\Model\CustomFieldValue, HTTP status code, HTTP response headers (array of strings)
     */
    public function salesQuoteCustomFieldValuePATCHRequestQuoteIDCustomFieldValuesSettingIDUpdateWithHttpInfo($accept, $quote_id, $setting_id, $jiwa_stateful = null, $contents = null, $body = null)
    {
        $returnType = '\Jiwa\Model\CustomFieldValue';
        $request = $this->salesQuoteCustomFieldValuePATCHRequestQuoteIDCustomFieldValuesSettingIDUpdateRequest($accept, $quote_id, $setting_id, $jiwa_stateful, $contents, $body);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Jiwa\Model\CustomFieldValue',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 404:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Jiwa\Model\CustomFieldValue',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 401:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Jiwa\Model\CustomFieldValue',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 403:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Jiwa\Model\CustomFieldValue',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation salesQuoteCustomFieldValuePATCHRequestQuoteIDCustomFieldValuesSettingIDUpdateAsync
     *
     * Updates a sales Quote custom field value.
     *
     * @param  string $accept Accept Header (required)
     * @param  string $quote_id (required)
     * @param  string $setting_id (required)
     * @param  bool $jiwa_stateful Stateful indicator (optional)
     * @param  string $contents (optional)
     * @param  \Jiwa\Model\SalesQuoteCustomFieldValuePATCHRequest $body (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function salesQuoteCustomFieldValuePATCHRequestQuoteIDCustomFieldValuesSettingIDUpdateAsync($accept, $quote_id, $setting_id, $jiwa_stateful = null, $contents = null, $body = null)
    {
        return $this->salesQuoteCustomFieldValuePATCHRequestQuoteIDCustomFieldValuesSettingIDUpdateAsyncWithHttpInfo($accept, $quote_id, $setting_id, $jiwa_stateful, $contents, $body)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation salesQuoteCustomFieldValuePATCHRequestQuoteIDCustomFieldValuesSettingIDUpdateAsyncWithHttpInfo
     *
     * Updates a sales Quote custom field value.
     *
     * @param  string $accept Accept Header (required)
     * @param  string $quote_id (required)
     * @param  string $setting_id (required)
     * @param  bool $jiwa_stateful Stateful indicator (optional)
     * @param  string $contents (optional)
     * @param  \Jiwa\Model\SalesQuoteCustomFieldValuePATCHRequest $body (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function salesQuoteCustomFieldValuePATCHRequestQuoteIDCustomFieldValuesSettingIDUpdateAsyncWithHttpInfo($accept, $quote_id, $setting_id, $jiwa_stateful = null, $contents = null, $body = null)
    {
        $returnType = '\Jiwa\Model\CustomFieldValue';
        $request = $this->salesQuoteCustomFieldValuePATCHRequestQuoteIDCustomFieldValuesSettingIDUpdateRequest($accept, $quote_id, $setting_id, $jiwa_stateful, $contents, $body);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'salesQuoteCustomFieldValuePATCHRequestQuoteIDCustomFieldValuesSettingIDUpdate'
     *
     * @param  string $accept Accept Header (required)
     * @param  string $quote_id (required)
     * @param  string $setting_id (required)
     * @param  bool $jiwa_stateful Stateful indicator (optional)
     * @param  string $contents (optional)
     * @param  \Jiwa\Model\SalesQuoteCustomFieldValuePATCHRequest $body (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function salesQuoteCustomFieldValuePATCHRequestQuoteIDCustomFieldValuesSettingIDUpdateRequest($accept, $quote_id, $setting_id, $jiwa_stateful = null, $contents = null, $body = null)
    {
        // verify the required parameter 'accept' is set
        if ($accept === null || (is_array($accept) && count($accept) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $accept when calling salesQuoteCustomFieldValuePATCHRequestQuoteIDCustomFieldValuesSettingIDUpdate'
            );
        }
        // verify the required parameter 'quote_id' is set
        if ($quote_id === null || (is_array($quote_id) && count($quote_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $quote_id when calling salesQuoteCustomFieldValuePATCHRequestQuoteIDCustomFieldValuesSettingIDUpdate'
            );
        }
        // verify the required parameter 'setting_id' is set
        if ($setting_id === null || (is_array($setting_id) && count($setting_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $setting_id when calling salesQuoteCustomFieldValuePATCHRequestQuoteIDCustomFieldValuesSettingIDUpdate'
            );
        }

        $resourcePath = '/SalesQuotes/{QuoteID}/CustomFieldValues/{SettingID}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        if ($contents !== null) {
            $queryParams['Contents'] = ObjectSerializer::toQueryValue($contents);
        }
        // header params
        if ($accept !== null) {
            $headerParams['Accept'] = ObjectSerializer::toHeaderValue($accept);
        }
        // header params
        if ($jiwa_stateful !== null) {
            $headerParams['jiwa-stateful'] = ObjectSerializer::toHeaderValue($jiwa_stateful);
        }

        // path params
        if ($quote_id !== null) {
            $resourcePath = str_replace(
                '{' . 'QuoteID' . '}',
                ObjectSerializer::toPathValue($quote_id),
                $resourcePath
            );
        }
        // path params
        if ($setting_id !== null) {
            $resourcePath = str_replace(
                '{' . 'SettingID' . '}',
                ObjectSerializer::toPathValue($setting_id),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;
        if (isset($body)) {
            $_tempBody = $body;
        }

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json', 'application/xml']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json', 'application/xml'],
                ['application/x-www-form-urlencoded', 'application/json', 'application/xml']
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            
            if($headers['Content-Type'] === 'application/json') {
                // \stdClass has no __toString(), so we should encode it manually
                if ($httpBody instanceof \stdClass) {
                    $httpBody = \GuzzleHttp\json_encode($httpBody);
                }
                // array has no __toString(), so we should encode it manually
                if(is_array($httpBody)) {
                    $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($httpBody));
                }
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\Query::build($formParams);
            }
        }

        // this endpoint requires HTTP basic authentication
        if ($this->config->getUsername() !== null || $this->config->getPassword() !== null) {
            $headers['Authorization'] = 'Basic ' . base64_encode($this->config->getUsername() . ":" . $this->config->getPassword());
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\Query::build($queryParams);
        return new Request(
            'PATCH',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation salesQuoteCustomFieldValuesGETManyRequestQuoteIDCustomFieldValuesGet
     *
     * Retrieves a list of custom field values for a sales Quote.
     *
     * @param  string $accept Accept Header (required)
     * @param  string $quote_id quote_id (required)
     * @param  bool $jiwa_stateful Stateful indicator (optional)
     *
     * @throws \Jiwa\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Jiwa\Model\CustomFieldValue[]
     */
    public function salesQuoteCustomFieldValuesGETManyRequestQuoteIDCustomFieldValuesGet($accept, $quote_id, $jiwa_stateful = null)
    {
        list($response) = $this->salesQuoteCustomFieldValuesGETManyRequestQuoteIDCustomFieldValuesGetWithHttpInfo($accept, $quote_id, $jiwa_stateful);
        return $response;
    }

    /**
     * Operation salesQuoteCustomFieldValuesGETManyRequestQuoteIDCustomFieldValuesGetWithHttpInfo
     *
     * Retrieves a list of custom field values for a sales Quote.
     *
     * @param  string $accept Accept Header (required)
     * @param  string $quote_id (required)
     * @param  bool $jiwa_stateful Stateful indicator (optional)
     *
     * @throws \Jiwa\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Jiwa\Model\CustomFieldValue[], HTTP status code, HTTP response headers (array of strings)
     */
    public function salesQuoteCustomFieldValuesGETManyRequestQuoteIDCustomFieldValuesGetWithHttpInfo($accept, $quote_id, $jiwa_stateful = null)
    {
        $returnType = '\Jiwa\Model\CustomFieldValue[]';
        $request = $this->salesQuoteCustomFieldValuesGETManyRequestQuoteIDCustomFieldValuesGetRequest($accept, $quote_id, $jiwa_stateful);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Jiwa\Model\CustomFieldValue[]',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 403:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Jiwa\Model\CustomFieldValue[]',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 404:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Jiwa\Model\CustomFieldValue[]',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 401:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Jiwa\Model\CustomFieldValue[]',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation salesQuoteCustomFieldValuesGETManyRequestQuoteIDCustomFieldValuesGetAsync
     *
     * Retrieves a list of custom field values for a sales Quote.
     *
     * @param  string $accept Accept Header (required)
     * @param  string $quote_id (required)
     * @param  bool $jiwa_stateful Stateful indicator (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function salesQuoteCustomFieldValuesGETManyRequestQuoteIDCustomFieldValuesGetAsync($accept, $quote_id, $jiwa_stateful = null)
    {
        return $this->salesQuoteCustomFieldValuesGETManyRequestQuoteIDCustomFieldValuesGetAsyncWithHttpInfo($accept, $quote_id, $jiwa_stateful)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation salesQuoteCustomFieldValuesGETManyRequestQuoteIDCustomFieldValuesGetAsyncWithHttpInfo
     *
     * Retrieves a list of custom field values for a sales Quote.
     *
     * @param  string $accept Accept Header (required)
     * @param  string $quote_id (required)
     * @param  bool $jiwa_stateful Stateful indicator (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function salesQuoteCustomFieldValuesGETManyRequestQuoteIDCustomFieldValuesGetAsyncWithHttpInfo($accept, $quote_id, $jiwa_stateful = null)
    {
        $returnType = '\Jiwa\Model\CustomFieldValue[]';
        $request = $this->salesQuoteCustomFieldValuesGETManyRequestQuoteIDCustomFieldValuesGetRequest($accept, $quote_id, $jiwa_stateful);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'salesQuoteCustomFieldValuesGETManyRequestQuoteIDCustomFieldValuesGet'
     *
     * @param  string $accept Accept Header (required)
     * @param  string $quote_id (required)
     * @param  bool $jiwa_stateful Stateful indicator (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function salesQuoteCustomFieldValuesGETManyRequestQuoteIDCustomFieldValuesGetRequest($accept, $quote_id, $jiwa_stateful = null)
    {
        // verify the required parameter 'accept' is set
        if ($accept === null || (is_array($accept) && count($accept) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $accept when calling salesQuoteCustomFieldValuesGETManyRequestQuoteIDCustomFieldValuesGet'
            );
        }
        // verify the required parameter 'quote_id' is set
        if ($quote_id === null || (is_array($quote_id) && count($quote_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $quote_id when calling salesQuoteCustomFieldValuesGETManyRequestQuoteIDCustomFieldValuesGet'
            );
        }

        $resourcePath = '/SalesQuotes/{QuoteID}/CustomFieldValues';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // header params
        if ($accept !== null) {
            $headerParams['Accept'] = ObjectSerializer::toHeaderValue($accept);
        }
        // header params
        if ($jiwa_stateful !== null) {
            $headerParams['jiwa-stateful'] = ObjectSerializer::toHeaderValue($jiwa_stateful);
        }

        // path params
        if ($quote_id !== null) {
            $resourcePath = str_replace(
                '{' . 'QuoteID' . '}',
                ObjectSerializer::toPathValue($quote_id),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json', 'application/xml']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json', 'application/xml'],
                ['application/x-www-form-urlencoded', 'application/json', 'application/xml']
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            
            if($headers['Content-Type'] === 'application/json') {
                // \stdClass has no __toString(), so we should encode it manually
                if ($httpBody instanceof \stdClass) {
                    $httpBody = \GuzzleHttp\json_encode($httpBody);
                }
                // array has no __toString(), so we should encode it manually
                if(is_array($httpBody)) {
                    $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($httpBody));
                }
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\Query::build($formParams);
            }
        }

        // this endpoint requires HTTP basic authentication
        if ($this->config->getUsername() !== null || $this->config->getPassword() !== null) {
            $headers['Authorization'] = 'Basic ' . base64_encode($this->config->getUsername() . ":" . $this->config->getPassword());
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\Query::build($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation salesQuoteCustomFieldsGETManyRequestCustomFieldsGet
     *
     * Retrieves a list of sales Quote custom fields.
     *
     * @param  string $accept Accept Header (required)
     * @param  bool $jiwa_stateful Stateful indicator (optional)
     *
     * @throws \Jiwa\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Jiwa\Model\CustomField[]
     */
    public function salesQuoteCustomFieldsGETManyRequestCustomFieldsGet($accept, $jiwa_stateful = null)
    {
        list($response) = $this->salesQuoteCustomFieldsGETManyRequestCustomFieldsGetWithHttpInfo($accept, $jiwa_stateful);
        return $response;
    }

    /**
     * Operation salesQuoteCustomFieldsGETManyRequestCustomFieldsGetWithHttpInfo
     *
     * Retrieves a list of sales Quote custom fields.
     *
     * @param  string $accept Accept Header (required)
     * @param  bool $jiwa_stateful Stateful indicator (optional)
     *
     * @throws \Jiwa\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Jiwa\Model\CustomField[], HTTP status code, HTTP response headers (array of strings)
     */
    public function salesQuoteCustomFieldsGETManyRequestCustomFieldsGetWithHttpInfo($accept, $jiwa_stateful = null)
    {
        $returnType = '\Jiwa\Model\CustomField[]';
        $request = $this->salesQuoteCustomFieldsGETManyRequestCustomFieldsGetRequest($accept, $jiwa_stateful);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Jiwa\Model\CustomField[]',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 403:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Jiwa\Model\CustomField[]',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 401:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Jiwa\Model\CustomField[]',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation salesQuoteCustomFieldsGETManyRequestCustomFieldsGetAsync
     *
     * Retrieves a list of sales Quote custom fields.
     *
     * @param  string $accept Accept Header (required)
     * @param  bool $jiwa_stateful Stateful indicator (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function salesQuoteCustomFieldsGETManyRequestCustomFieldsGetAsync($accept, $jiwa_stateful = null)
    {
        return $this->salesQuoteCustomFieldsGETManyRequestCustomFieldsGetAsyncWithHttpInfo($accept, $jiwa_stateful)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation salesQuoteCustomFieldsGETManyRequestCustomFieldsGetAsyncWithHttpInfo
     *
     * Retrieves a list of sales Quote custom fields.
     *
     * @param  string $accept Accept Header (required)
     * @param  bool $jiwa_stateful Stateful indicator (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function salesQuoteCustomFieldsGETManyRequestCustomFieldsGetAsyncWithHttpInfo($accept, $jiwa_stateful = null)
    {
        $returnType = '\Jiwa\Model\CustomField[]';
        $request = $this->salesQuoteCustomFieldsGETManyRequestCustomFieldsGetRequest($accept, $jiwa_stateful);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'salesQuoteCustomFieldsGETManyRequestCustomFieldsGet'
     *
     * @param  string $accept Accept Header (required)
     * @param  bool $jiwa_stateful Stateful indicator (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function salesQuoteCustomFieldsGETManyRequestCustomFieldsGetRequest($accept, $jiwa_stateful = null)
    {
        // verify the required parameter 'accept' is set
        if ($accept === null || (is_array($accept) && count($accept) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $accept when calling salesQuoteCustomFieldsGETManyRequestCustomFieldsGet'
            );
        }

        $resourcePath = '/SalesQuotes/CustomFields';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // header params
        if ($accept !== null) {
            $headerParams['Accept'] = ObjectSerializer::toHeaderValue($accept);
        }
        // header params
        if ($jiwa_stateful !== null) {
            $headerParams['jiwa-stateful'] = ObjectSerializer::toHeaderValue($jiwa_stateful);
        }


        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json', 'application/xml']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json', 'application/xml'],
                ['application/x-www-form-urlencoded', 'application/json', 'application/xml']
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            
            if($headers['Content-Type'] === 'application/json') {
                // \stdClass has no __toString(), so we should encode it manually
                if ($httpBody instanceof \stdClass) {
                    $httpBody = \GuzzleHttp\json_encode($httpBody);
                }
                // array has no __toString(), so we should encode it manually
                if(is_array($httpBody)) {
                    $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($httpBody));
                }
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\Query::build($formParams);
            }
        }

        // this endpoint requires HTTP basic authentication
        if ($this->config->getUsername() !== null || $this->config->getPassword() !== null) {
            $headers['Authorization'] = 'Basic ' . base64_encode($this->config->getUsername() . ":" . $this->config->getPassword());
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\Query::build($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation salesQuoteDocumentDELETERequestQuoteIDDocumentsDocumentIDDelete
     *
     * Deletes a sales Quote document.
     *
     * @param  string $accept Accept Header (required)
     * @param  string $quote_id quote_id (required)
     * @param  string $document_id document_id (required)
     * @param  bool $jiwa_stateful Stateful indicator (optional)
     *
     * @throws \Jiwa\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Jiwa\Model\Object
     */
    public function salesQuoteDocumentDELETERequestQuoteIDDocumentsDocumentIDDelete($accept, $quote_id, $document_id, $jiwa_stateful = null)
    {
        list($response) = $this->salesQuoteDocumentDELETERequestQuoteIDDocumentsDocumentIDDeleteWithHttpInfo($accept, $quote_id, $document_id, $jiwa_stateful);
        return $response;
    }

    /**
     * Operation salesQuoteDocumentDELETERequestQuoteIDDocumentsDocumentIDDeleteWithHttpInfo
     *
     * Deletes a sales Quote document.
     *
     * @param  string $accept Accept Header (required)
     * @param  string $quote_id (required)
     * @param  string $document_id (required)
     * @param  bool $jiwa_stateful Stateful indicator (optional)
     *
     * @throws \Jiwa\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Jiwa\Model\Object, HTTP status code, HTTP response headers (array of strings)
     */
    public function salesQuoteDocumentDELETERequestQuoteIDDocumentsDocumentIDDeleteWithHttpInfo($accept, $quote_id, $document_id, $jiwa_stateful = null)
    {
        $returnType = '\Jiwa\Model\Object';
        $request = $this->salesQuoteDocumentDELETERequestQuoteIDDocumentsDocumentIDDeleteRequest($accept, $quote_id, $document_id, $jiwa_stateful);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Jiwa\Model\Object',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 401:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Jiwa\Model\Object',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 204:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Jiwa\Model\Object',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 403:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Jiwa\Model\Object',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 404:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Jiwa\Model\Object',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation salesQuoteDocumentDELETERequestQuoteIDDocumentsDocumentIDDeleteAsync
     *
     * Deletes a sales Quote document.
     *
     * @param  string $accept Accept Header (required)
     * @param  string $quote_id (required)
     * @param  string $document_id (required)
     * @param  bool $jiwa_stateful Stateful indicator (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function salesQuoteDocumentDELETERequestQuoteIDDocumentsDocumentIDDeleteAsync($accept, $quote_id, $document_id, $jiwa_stateful = null)
    {
        return $this->salesQuoteDocumentDELETERequestQuoteIDDocumentsDocumentIDDeleteAsyncWithHttpInfo($accept, $quote_id, $document_id, $jiwa_stateful)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation salesQuoteDocumentDELETERequestQuoteIDDocumentsDocumentIDDeleteAsyncWithHttpInfo
     *
     * Deletes a sales Quote document.
     *
     * @param  string $accept Accept Header (required)
     * @param  string $quote_id (required)
     * @param  string $document_id (required)
     * @param  bool $jiwa_stateful Stateful indicator (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function salesQuoteDocumentDELETERequestQuoteIDDocumentsDocumentIDDeleteAsyncWithHttpInfo($accept, $quote_id, $document_id, $jiwa_stateful = null)
    {
        $returnType = '\Jiwa\Model\Object';
        $request = $this->salesQuoteDocumentDELETERequestQuoteIDDocumentsDocumentIDDeleteRequest($accept, $quote_id, $document_id, $jiwa_stateful);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'salesQuoteDocumentDELETERequestQuoteIDDocumentsDocumentIDDelete'
     *
     * @param  string $accept Accept Header (required)
     * @param  string $quote_id (required)
     * @param  string $document_id (required)
     * @param  bool $jiwa_stateful Stateful indicator (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function salesQuoteDocumentDELETERequestQuoteIDDocumentsDocumentIDDeleteRequest($accept, $quote_id, $document_id, $jiwa_stateful = null)
    {
        // verify the required parameter 'accept' is set
        if ($accept === null || (is_array($accept) && count($accept) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $accept when calling salesQuoteDocumentDELETERequestQuoteIDDocumentsDocumentIDDelete'
            );
        }
        // verify the required parameter 'quote_id' is set
        if ($quote_id === null || (is_array($quote_id) && count($quote_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $quote_id when calling salesQuoteDocumentDELETERequestQuoteIDDocumentsDocumentIDDelete'
            );
        }
        // verify the required parameter 'document_id' is set
        if ($document_id === null || (is_array($document_id) && count($document_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $document_id when calling salesQuoteDocumentDELETERequestQuoteIDDocumentsDocumentIDDelete'
            );
        }

        $resourcePath = '/SalesQuotes/{QuoteID}/Documents/{DocumentID}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // header params
        if ($accept !== null) {
            $headerParams['Accept'] = ObjectSerializer::toHeaderValue($accept);
        }
        // header params
        if ($jiwa_stateful !== null) {
            $headerParams['jiwa-stateful'] = ObjectSerializer::toHeaderValue($jiwa_stateful);
        }

        // path params
        if ($quote_id !== null) {
            $resourcePath = str_replace(
                '{' . 'QuoteID' . '}',
                ObjectSerializer::toPathValue($quote_id),
                $resourcePath
            );
        }
        // path params
        if ($document_id !== null) {
            $resourcePath = str_replace(
                '{' . 'DocumentID' . '}',
                ObjectSerializer::toPathValue($document_id),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json', 'application/xml']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json', 'application/xml'],
                ['application/x-www-form-urlencoded', 'application/json', 'application/xml']
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            
            if($headers['Content-Type'] === 'application/json') {
                // \stdClass has no __toString(), so we should encode it manually
                if ($httpBody instanceof \stdClass) {
                    $httpBody = \GuzzleHttp\json_encode($httpBody);
                }
                // array has no __toString(), so we should encode it manually
                if(is_array($httpBody)) {
                    $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($httpBody));
                }
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\Query::build($formParams);
            }
        }

        // this endpoint requires HTTP basic authentication
        if ($this->config->getUsername() !== null || $this->config->getPassword() !== null) {
            $headers['Authorization'] = 'Basic ' . base64_encode($this->config->getUsername() . ":" . $this->config->getPassword());
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\Query::build($queryParams);
        return new Request(
            'DELETE',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation salesQuoteDocumentGETRequestQuoteIDDocumentsDocumentIDGet
     *
     * Retrieves a sales Quote document.
     *
     * @param  string $accept Accept Header (required)
     * @param  string $quote_id quote_id (required)
     * @param  string $document_id document_id (required)
     * @param  bool $jiwa_stateful Stateful indicator (optional)
     *
     * @throws \Jiwa\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Jiwa\Model\Document
     */
    public function salesQuoteDocumentGETRequestQuoteIDDocumentsDocumentIDGet($accept, $quote_id, $document_id, $jiwa_stateful = null)
    {
        list($response) = $this->salesQuoteDocumentGETRequestQuoteIDDocumentsDocumentIDGetWithHttpInfo($accept, $quote_id, $document_id, $jiwa_stateful);
        return $response;
    }

    /**
     * Operation salesQuoteDocumentGETRequestQuoteIDDocumentsDocumentIDGetWithHttpInfo
     *
     * Retrieves a sales Quote document.
     *
     * @param  string $accept Accept Header (required)
     * @param  string $quote_id (required)
     * @param  string $document_id (required)
     * @param  bool $jiwa_stateful Stateful indicator (optional)
     *
     * @throws \Jiwa\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Jiwa\Model\Document, HTTP status code, HTTP response headers (array of strings)
     */
    public function salesQuoteDocumentGETRequestQuoteIDDocumentsDocumentIDGetWithHttpInfo($accept, $quote_id, $document_id, $jiwa_stateful = null)
    {
        $returnType = '\Jiwa\Model\Document';
        $request = $this->salesQuoteDocumentGETRequestQuoteIDDocumentsDocumentIDGetRequest($accept, $quote_id, $document_id, $jiwa_stateful);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Jiwa\Model\Document',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 401:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Jiwa\Model\Document',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 404:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Jiwa\Model\Document',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 403:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Jiwa\Model\Document',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation salesQuoteDocumentGETRequestQuoteIDDocumentsDocumentIDGetAsync
     *
     * Retrieves a sales Quote document.
     *
     * @param  string $accept Accept Header (required)
     * @param  string $quote_id (required)
     * @param  string $document_id (required)
     * @param  bool $jiwa_stateful Stateful indicator (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function salesQuoteDocumentGETRequestQuoteIDDocumentsDocumentIDGetAsync($accept, $quote_id, $document_id, $jiwa_stateful = null)
    {
        return $this->salesQuoteDocumentGETRequestQuoteIDDocumentsDocumentIDGetAsyncWithHttpInfo($accept, $quote_id, $document_id, $jiwa_stateful)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation salesQuoteDocumentGETRequestQuoteIDDocumentsDocumentIDGetAsyncWithHttpInfo
     *
     * Retrieves a sales Quote document.
     *
     * @param  string $accept Accept Header (required)
     * @param  string $quote_id (required)
     * @param  string $document_id (required)
     * @param  bool $jiwa_stateful Stateful indicator (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function salesQuoteDocumentGETRequestQuoteIDDocumentsDocumentIDGetAsyncWithHttpInfo($accept, $quote_id, $document_id, $jiwa_stateful = null)
    {
        $returnType = '\Jiwa\Model\Document';
        $request = $this->salesQuoteDocumentGETRequestQuoteIDDocumentsDocumentIDGetRequest($accept, $quote_id, $document_id, $jiwa_stateful);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'salesQuoteDocumentGETRequestQuoteIDDocumentsDocumentIDGet'
     *
     * @param  string $accept Accept Header (required)
     * @param  string $quote_id (required)
     * @param  string $document_id (required)
     * @param  bool $jiwa_stateful Stateful indicator (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function salesQuoteDocumentGETRequestQuoteIDDocumentsDocumentIDGetRequest($accept, $quote_id, $document_id, $jiwa_stateful = null)
    {
        // verify the required parameter 'accept' is set
        if ($accept === null || (is_array($accept) && count($accept) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $accept when calling salesQuoteDocumentGETRequestQuoteIDDocumentsDocumentIDGet'
            );
        }
        // verify the required parameter 'quote_id' is set
        if ($quote_id === null || (is_array($quote_id) && count($quote_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $quote_id when calling salesQuoteDocumentGETRequestQuoteIDDocumentsDocumentIDGet'
            );
        }
        // verify the required parameter 'document_id' is set
        if ($document_id === null || (is_array($document_id) && count($document_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $document_id when calling salesQuoteDocumentGETRequestQuoteIDDocumentsDocumentIDGet'
            );
        }

        $resourcePath = '/SalesQuotes/{QuoteID}/Documents/{DocumentID}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // header params
        if ($accept !== null) {
            $headerParams['Accept'] = ObjectSerializer::toHeaderValue($accept);
        }
        // header params
        if ($jiwa_stateful !== null) {
            $headerParams['jiwa-stateful'] = ObjectSerializer::toHeaderValue($jiwa_stateful);
        }

        // path params
        if ($quote_id !== null) {
            $resourcePath = str_replace(
                '{' . 'QuoteID' . '}',
                ObjectSerializer::toPathValue($quote_id),
                $resourcePath
            );
        }
        // path params
        if ($document_id !== null) {
            $resourcePath = str_replace(
                '{' . 'DocumentID' . '}',
                ObjectSerializer::toPathValue($document_id),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json', 'application/xml']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json', 'application/xml'],
                ['application/x-www-form-urlencoded', 'application/json', 'application/xml']
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            
            if($headers['Content-Type'] === 'application/json') {
                // \stdClass has no __toString(), so we should encode it manually
                if ($httpBody instanceof \stdClass) {
                    $httpBody = \GuzzleHttp\json_encode($httpBody);
                }
                // array has no __toString(), so we should encode it manually
                if(is_array($httpBody)) {
                    $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($httpBody));
                }
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\Query::build($formParams);
            }
        }

        // this endpoint requires HTTP basic authentication
        if ($this->config->getUsername() !== null || $this->config->getPassword() !== null) {
            $headers['Authorization'] = 'Basic ' . base64_encode($this->config->getUsername() . ":" . $this->config->getPassword());
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\Query::build($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation salesQuoteDocumentPATCHRequestQuoteIDDocumentsDocumentIDUpdate
     *
     * Updates a sales Quote document.
     *
     * @param  string $accept Accept Header (required)
     * @param  string $quote_id quote_id (required)
     * @param  string $document_id document_id (required)
     * @param  bool $jiwa_stateful Stateful indicator (optional)
     * @param  string $document_type document_type (optional)
     * @param  string $file_id file_id (optional)
     * @param  string $physical_file_name physical_file_name (optional)
     * @param  string $full_physical_file_name full_physical_file_name (optional)
     * @param  string $description description (optional)
     * @param  \DateTime $last_saved_date_time last_saved_date_time (optional)
     * @param  string $last_modified_by_staff_id last_modified_by_staff_id (optional)
     * @param  string $last_modified_by_staff_username last_modified_by_staff_username (optional)
     * @param  string $last_modified_by_staff_title last_modified_by_staff_title (optional)
     * @param  string $last_modified_by_staff_first_name last_modified_by_staff_first_name (optional)
     * @param  string $last_modified_by_staff_surname last_modified_by_staff_surname (optional)
     * @param  string $file_binary file_binary (optional)
     * @param  \Jiwa\Model\SalesQuoteDocumentPATCHRequest $body body (optional)
     *
     * @throws \Jiwa\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Jiwa\Model\Document
     */
    public function salesQuoteDocumentPATCHRequestQuoteIDDocumentsDocumentIDUpdate($accept, $quote_id, $document_id, $jiwa_stateful = null, $document_type = null, $file_id = null, $physical_file_name = null, $full_physical_file_name = null, $description = null, $last_saved_date_time = null, $last_modified_by_staff_id = null, $last_modified_by_staff_username = null, $last_modified_by_staff_title = null, $last_modified_by_staff_first_name = null, $last_modified_by_staff_surname = null, $file_binary = null, $body = null)
    {
        list($response) = $this->salesQuoteDocumentPATCHRequestQuoteIDDocumentsDocumentIDUpdateWithHttpInfo($accept, $quote_id, $document_id, $jiwa_stateful, $document_type, $file_id, $physical_file_name, $full_physical_file_name, $description, $last_saved_date_time, $last_modified_by_staff_id, $last_modified_by_staff_username, $last_modified_by_staff_title, $last_modified_by_staff_first_name, $last_modified_by_staff_surname, $file_binary, $body);
        return $response;
    }

    /**
     * Operation salesQuoteDocumentPATCHRequestQuoteIDDocumentsDocumentIDUpdateWithHttpInfo
     *
     * Updates a sales Quote document.
     *
     * @param  string $accept Accept Header (required)
     * @param  string $quote_id (required)
     * @param  string $document_id (required)
     * @param  bool $jiwa_stateful Stateful indicator (optional)
     * @param  string $document_type (optional)
     * @param  string $file_id (optional)
     * @param  string $physical_file_name (optional)
     * @param  string $full_physical_file_name (optional)
     * @param  string $description (optional)
     * @param  \DateTime $last_saved_date_time (optional)
     * @param  string $last_modified_by_staff_id (optional)
     * @param  string $last_modified_by_staff_username (optional)
     * @param  string $last_modified_by_staff_title (optional)
     * @param  string $last_modified_by_staff_first_name (optional)
     * @param  string $last_modified_by_staff_surname (optional)
     * @param  string $file_binary (optional)
     * @param  \Jiwa\Model\SalesQuoteDocumentPATCHRequest $body (optional)
     *
     * @throws \Jiwa\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Jiwa\Model\Document, HTTP status code, HTTP response headers (array of strings)
     */
    public function salesQuoteDocumentPATCHRequestQuoteIDDocumentsDocumentIDUpdateWithHttpInfo($accept, $quote_id, $document_id, $jiwa_stateful = null, $document_type = null, $file_id = null, $physical_file_name = null, $full_physical_file_name = null, $description = null, $last_saved_date_time = null, $last_modified_by_staff_id = null, $last_modified_by_staff_username = null, $last_modified_by_staff_title = null, $last_modified_by_staff_first_name = null, $last_modified_by_staff_surname = null, $file_binary = null, $body = null)
    {
        $returnType = '\Jiwa\Model\Document';
        $request = $this->salesQuoteDocumentPATCHRequestQuoteIDDocumentsDocumentIDUpdateRequest($accept, $quote_id, $document_id, $jiwa_stateful, $document_type, $file_id, $physical_file_name, $full_physical_file_name, $description, $last_saved_date_time, $last_modified_by_staff_id, $last_modified_by_staff_username, $last_modified_by_staff_title, $last_modified_by_staff_first_name, $last_modified_by_staff_surname, $file_binary, $body);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Jiwa\Model\Document',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 403:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Jiwa\Model\Document',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 404:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Jiwa\Model\Document',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 401:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Jiwa\Model\Document',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation salesQuoteDocumentPATCHRequestQuoteIDDocumentsDocumentIDUpdateAsync
     *
     * Updates a sales Quote document.
     *
     * @param  string $accept Accept Header (required)
     * @param  string $quote_id (required)
     * @param  string $document_id (required)
     * @param  bool $jiwa_stateful Stateful indicator (optional)
     * @param  string $document_type (optional)
     * @param  string $file_id (optional)
     * @param  string $physical_file_name (optional)
     * @param  string $full_physical_file_name (optional)
     * @param  string $description (optional)
     * @param  \DateTime $last_saved_date_time (optional)
     * @param  string $last_modified_by_staff_id (optional)
     * @param  string $last_modified_by_staff_username (optional)
     * @param  string $last_modified_by_staff_title (optional)
     * @param  string $last_modified_by_staff_first_name (optional)
     * @param  string $last_modified_by_staff_surname (optional)
     * @param  string $file_binary (optional)
     * @param  \Jiwa\Model\SalesQuoteDocumentPATCHRequest $body (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function salesQuoteDocumentPATCHRequestQuoteIDDocumentsDocumentIDUpdateAsync($accept, $quote_id, $document_id, $jiwa_stateful = null, $document_type = null, $file_id = null, $physical_file_name = null, $full_physical_file_name = null, $description = null, $last_saved_date_time = null, $last_modified_by_staff_id = null, $last_modified_by_staff_username = null, $last_modified_by_staff_title = null, $last_modified_by_staff_first_name = null, $last_modified_by_staff_surname = null, $file_binary = null, $body = null)
    {
        return $this->salesQuoteDocumentPATCHRequestQuoteIDDocumentsDocumentIDUpdateAsyncWithHttpInfo($accept, $quote_id, $document_id, $jiwa_stateful, $document_type, $file_id, $physical_file_name, $full_physical_file_name, $description, $last_saved_date_time, $last_modified_by_staff_id, $last_modified_by_staff_username, $last_modified_by_staff_title, $last_modified_by_staff_first_name, $last_modified_by_staff_surname, $file_binary, $body)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation salesQuoteDocumentPATCHRequestQuoteIDDocumentsDocumentIDUpdateAsyncWithHttpInfo
     *
     * Updates a sales Quote document.
     *
     * @param  string $accept Accept Header (required)
     * @param  string $quote_id (required)
     * @param  string $document_id (required)
     * @param  bool $jiwa_stateful Stateful indicator (optional)
     * @param  string $document_type (optional)
     * @param  string $file_id (optional)
     * @param  string $physical_file_name (optional)
     * @param  string $full_physical_file_name (optional)
     * @param  string $description (optional)
     * @param  \DateTime $last_saved_date_time (optional)
     * @param  string $last_modified_by_staff_id (optional)
     * @param  string $last_modified_by_staff_username (optional)
     * @param  string $last_modified_by_staff_title (optional)
     * @param  string $last_modified_by_staff_first_name (optional)
     * @param  string $last_modified_by_staff_surname (optional)
     * @param  string $file_binary (optional)
     * @param  \Jiwa\Model\SalesQuoteDocumentPATCHRequest $body (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function salesQuoteDocumentPATCHRequestQuoteIDDocumentsDocumentIDUpdateAsyncWithHttpInfo($accept, $quote_id, $document_id, $jiwa_stateful = null, $document_type = null, $file_id = null, $physical_file_name = null, $full_physical_file_name = null, $description = null, $last_saved_date_time = null, $last_modified_by_staff_id = null, $last_modified_by_staff_username = null, $last_modified_by_staff_title = null, $last_modified_by_staff_first_name = null, $last_modified_by_staff_surname = null, $file_binary = null, $body = null)
    {
        $returnType = '\Jiwa\Model\Document';
        $request = $this->salesQuoteDocumentPATCHRequestQuoteIDDocumentsDocumentIDUpdateRequest($accept, $quote_id, $document_id, $jiwa_stateful, $document_type, $file_id, $physical_file_name, $full_physical_file_name, $description, $last_saved_date_time, $last_modified_by_staff_id, $last_modified_by_staff_username, $last_modified_by_staff_title, $last_modified_by_staff_first_name, $last_modified_by_staff_surname, $file_binary, $body);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'salesQuoteDocumentPATCHRequestQuoteIDDocumentsDocumentIDUpdate'
     *
     * @param  string $accept Accept Header (required)
     * @param  string $quote_id (required)
     * @param  string $document_id (required)
     * @param  bool $jiwa_stateful Stateful indicator (optional)
     * @param  string $document_type (optional)
     * @param  string $file_id (optional)
     * @param  string $physical_file_name (optional)
     * @param  string $full_physical_file_name (optional)
     * @param  string $description (optional)
     * @param  \DateTime $last_saved_date_time (optional)
     * @param  string $last_modified_by_staff_id (optional)
     * @param  string $last_modified_by_staff_username (optional)
     * @param  string $last_modified_by_staff_title (optional)
     * @param  string $last_modified_by_staff_first_name (optional)
     * @param  string $last_modified_by_staff_surname (optional)
     * @param  string $file_binary (optional)
     * @param  \Jiwa\Model\SalesQuoteDocumentPATCHRequest $body (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function salesQuoteDocumentPATCHRequestQuoteIDDocumentsDocumentIDUpdateRequest($accept, $quote_id, $document_id, $jiwa_stateful = null, $document_type = null, $file_id = null, $physical_file_name = null, $full_physical_file_name = null, $description = null, $last_saved_date_time = null, $last_modified_by_staff_id = null, $last_modified_by_staff_username = null, $last_modified_by_staff_title = null, $last_modified_by_staff_first_name = null, $last_modified_by_staff_surname = null, $file_binary = null, $body = null)
    {
        // verify the required parameter 'accept' is set
        if ($accept === null || (is_array($accept) && count($accept) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $accept when calling salesQuoteDocumentPATCHRequestQuoteIDDocumentsDocumentIDUpdate'
            );
        }
        // verify the required parameter 'quote_id' is set
        if ($quote_id === null || (is_array($quote_id) && count($quote_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $quote_id when calling salesQuoteDocumentPATCHRequestQuoteIDDocumentsDocumentIDUpdate'
            );
        }
        // verify the required parameter 'document_id' is set
        if ($document_id === null || (is_array($document_id) && count($document_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $document_id when calling salesQuoteDocumentPATCHRequestQuoteIDDocumentsDocumentIDUpdate'
            );
        }

        $resourcePath = '/SalesQuotes/{QuoteID}/Documents/{DocumentID}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        if ($document_type !== null) {
            $queryParams['DocumentType'] = ObjectSerializer::toQueryValue($document_type);
        }
        // query params
        if ($file_id !== null) {
            $queryParams['FileID'] = ObjectSerializer::toQueryValue($file_id);
        }
        // query params
        if ($physical_file_name !== null) {
            $queryParams['PhysicalFileName'] = ObjectSerializer::toQueryValue($physical_file_name);
        }
        // query params
        if ($full_physical_file_name !== null) {
            $queryParams['FullPhysicalFileName'] = ObjectSerializer::toQueryValue($full_physical_file_name);
        }
        // query params
        if ($description !== null) {
            $queryParams['Description'] = ObjectSerializer::toQueryValue($description);
        }
        // query params
        if ($last_saved_date_time !== null) {
            $queryParams['LastSavedDateTime'] = ObjectSerializer::toQueryValue($last_saved_date_time);
        }
        // query params
        if ($last_modified_by_staff_id !== null) {
            $queryParams['LastModifiedByStaffID'] = ObjectSerializer::toQueryValue($last_modified_by_staff_id);
        }
        // query params
        if ($last_modified_by_staff_username !== null) {
            $queryParams['LastModifiedByStaffUsername'] = ObjectSerializer::toQueryValue($last_modified_by_staff_username);
        }
        // query params
        if ($last_modified_by_staff_title !== null) {
            $queryParams['LastModifiedByStaffTitle'] = ObjectSerializer::toQueryValue($last_modified_by_staff_title);
        }
        // query params
        if ($last_modified_by_staff_first_name !== null) {
            $queryParams['LastModifiedByStaffFirstName'] = ObjectSerializer::toQueryValue($last_modified_by_staff_first_name);
        }
        // query params
        if ($last_modified_by_staff_surname !== null) {
            $queryParams['LastModifiedByStaffSurname'] = ObjectSerializer::toQueryValue($last_modified_by_staff_surname);
        }
        // query params
        if ($file_binary !== null) {
            $queryParams['FileBinary'] = ObjectSerializer::toQueryValue($file_binary);
        }
        // header params
        if ($accept !== null) {
            $headerParams['Accept'] = ObjectSerializer::toHeaderValue($accept);
        }
        // header params
        if ($jiwa_stateful !== null) {
            $headerParams['jiwa-stateful'] = ObjectSerializer::toHeaderValue($jiwa_stateful);
        }

        // path params
        if ($quote_id !== null) {
            $resourcePath = str_replace(
                '{' . 'QuoteID' . '}',
                ObjectSerializer::toPathValue($quote_id),
                $resourcePath
            );
        }
        // path params
        if ($document_id !== null) {
            $resourcePath = str_replace(
                '{' . 'DocumentID' . '}',
                ObjectSerializer::toPathValue($document_id),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;
        if (isset($body)) {
            $_tempBody = $body;
        }

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json', 'application/xml']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json', 'application/xml'],
                ['application/x-www-form-urlencoded', 'application/json', 'application/xml']
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            
            if($headers['Content-Type'] === 'application/json') {
                // \stdClass has no __toString(), so we should encode it manually
                if ($httpBody instanceof \stdClass) {
                    $httpBody = \GuzzleHttp\json_encode($httpBody);
                }
                // array has no __toString(), so we should encode it manually
                if(is_array($httpBody)) {
                    $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($httpBody));
                }
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\Query::build($formParams);
            }
        }

        // this endpoint requires HTTP basic authentication
        if ($this->config->getUsername() !== null || $this->config->getPassword() !== null) {
            $headers['Authorization'] = 'Basic ' . base64_encode($this->config->getUsername() . ":" . $this->config->getPassword());
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\Query::build($queryParams);
        return new Request(
            'PATCH',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation salesQuoteDocumentPOSTRequestQuoteIDDocumentsPost
     *
     * Appends a document to a sales Quote.
     *
     * @param  string $accept Accept Header (required)
     * @param  string $quote_id quote_id (required)
     * @param  bool $jiwa_stateful Stateful indicator (optional)
     * @param  string $document_type document_type (optional)
     * @param  string $file_id file_id (optional)
     * @param  string $physical_file_name physical_file_name (optional)
     * @param  string $full_physical_file_name full_physical_file_name (optional)
     * @param  string $description description (optional)
     * @param  string $last_modified_by_staff_id last_modified_by_staff_id (optional)
     * @param  string $last_modified_by_staff_username last_modified_by_staff_username (optional)
     * @param  string $last_modified_by_staff_title last_modified_by_staff_title (optional)
     * @param  string $last_modified_by_staff_first_name last_modified_by_staff_first_name (optional)
     * @param  string $last_modified_by_staff_surname last_modified_by_staff_surname (optional)
     * @param  string $file_binary file_binary (optional)
     * @param  \Jiwa\Model\SalesQuoteDocumentPOSTRequest $body body (optional)
     *
     * @throws \Jiwa\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Jiwa\Model\Document
     */
    public function salesQuoteDocumentPOSTRequestQuoteIDDocumentsPost($accept, $quote_id, $jiwa_stateful = null, $document_type = null, $file_id = null, $physical_file_name = null, $full_physical_file_name = null, $description = null, $last_modified_by_staff_id = null, $last_modified_by_staff_username = null, $last_modified_by_staff_title = null, $last_modified_by_staff_first_name = null, $last_modified_by_staff_surname = null, $file_binary = null, $body = null)
    {
        list($response) = $this->salesQuoteDocumentPOSTRequestQuoteIDDocumentsPostWithHttpInfo($accept, $quote_id, $jiwa_stateful, $document_type, $file_id, $physical_file_name, $full_physical_file_name, $description, $last_modified_by_staff_id, $last_modified_by_staff_username, $last_modified_by_staff_title, $last_modified_by_staff_first_name, $last_modified_by_staff_surname, $file_binary, $body);
        return $response;
    }

    /**
     * Operation salesQuoteDocumentPOSTRequestQuoteIDDocumentsPostWithHttpInfo
     *
     * Appends a document to a sales Quote.
     *
     * @param  string $accept Accept Header (required)
     * @param  string $quote_id (required)
     * @param  bool $jiwa_stateful Stateful indicator (optional)
     * @param  string $document_type (optional)
     * @param  string $file_id (optional)
     * @param  string $physical_file_name (optional)
     * @param  string $full_physical_file_name (optional)
     * @param  string $description (optional)
     * @param  string $last_modified_by_staff_id (optional)
     * @param  string $last_modified_by_staff_username (optional)
     * @param  string $last_modified_by_staff_title (optional)
     * @param  string $last_modified_by_staff_first_name (optional)
     * @param  string $last_modified_by_staff_surname (optional)
     * @param  string $file_binary (optional)
     * @param  \Jiwa\Model\SalesQuoteDocumentPOSTRequest $body (optional)
     *
     * @throws \Jiwa\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Jiwa\Model\Document, HTTP status code, HTTP response headers (array of strings)
     */
    public function salesQuoteDocumentPOSTRequestQuoteIDDocumentsPostWithHttpInfo($accept, $quote_id, $jiwa_stateful = null, $document_type = null, $file_id = null, $physical_file_name = null, $full_physical_file_name = null, $description = null, $last_modified_by_staff_id = null, $last_modified_by_staff_username = null, $last_modified_by_staff_title = null, $last_modified_by_staff_first_name = null, $last_modified_by_staff_surname = null, $file_binary = null, $body = null)
    {
        $returnType = '\Jiwa\Model\Document';
        $request = $this->salesQuoteDocumentPOSTRequestQuoteIDDocumentsPostRequest($accept, $quote_id, $jiwa_stateful, $document_type, $file_id, $physical_file_name, $full_physical_file_name, $description, $last_modified_by_staff_id, $last_modified_by_staff_username, $last_modified_by_staff_title, $last_modified_by_staff_first_name, $last_modified_by_staff_surname, $file_binary, $body);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Jiwa\Model\Document',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 404:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Jiwa\Model\Document',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 201:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Jiwa\Model\Document',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 401:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Jiwa\Model\Document',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 403:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Jiwa\Model\Document',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation salesQuoteDocumentPOSTRequestQuoteIDDocumentsPostAsync
     *
     * Appends a document to a sales Quote.
     *
     * @param  string $accept Accept Header (required)
     * @param  string $quote_id (required)
     * @param  bool $jiwa_stateful Stateful indicator (optional)
     * @param  string $document_type (optional)
     * @param  string $file_id (optional)
     * @param  string $physical_file_name (optional)
     * @param  string $full_physical_file_name (optional)
     * @param  string $description (optional)
     * @param  string $last_modified_by_staff_id (optional)
     * @param  string $last_modified_by_staff_username (optional)
     * @param  string $last_modified_by_staff_title (optional)
     * @param  string $last_modified_by_staff_first_name (optional)
     * @param  string $last_modified_by_staff_surname (optional)
     * @param  string $file_binary (optional)
     * @param  \Jiwa\Model\SalesQuoteDocumentPOSTRequest $body (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function salesQuoteDocumentPOSTRequestQuoteIDDocumentsPostAsync($accept, $quote_id, $jiwa_stateful = null, $document_type = null, $file_id = null, $physical_file_name = null, $full_physical_file_name = null, $description = null, $last_modified_by_staff_id = null, $last_modified_by_staff_username = null, $last_modified_by_staff_title = null, $last_modified_by_staff_first_name = null, $last_modified_by_staff_surname = null, $file_binary = null, $body = null)
    {
        return $this->salesQuoteDocumentPOSTRequestQuoteIDDocumentsPostAsyncWithHttpInfo($accept, $quote_id, $jiwa_stateful, $document_type, $file_id, $physical_file_name, $full_physical_file_name, $description, $last_modified_by_staff_id, $last_modified_by_staff_username, $last_modified_by_staff_title, $last_modified_by_staff_first_name, $last_modified_by_staff_surname, $file_binary, $body)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation salesQuoteDocumentPOSTRequestQuoteIDDocumentsPostAsyncWithHttpInfo
     *
     * Appends a document to a sales Quote.
     *
     * @param  string $accept Accept Header (required)
     * @param  string $quote_id (required)
     * @param  bool $jiwa_stateful Stateful indicator (optional)
     * @param  string $document_type (optional)
     * @param  string $file_id (optional)
     * @param  string $physical_file_name (optional)
     * @param  string $full_physical_file_name (optional)
     * @param  string $description (optional)
     * @param  string $last_modified_by_staff_id (optional)
     * @param  string $last_modified_by_staff_username (optional)
     * @param  string $last_modified_by_staff_title (optional)
     * @param  string $last_modified_by_staff_first_name (optional)
     * @param  string $last_modified_by_staff_surname (optional)
     * @param  string $file_binary (optional)
     * @param  \Jiwa\Model\SalesQuoteDocumentPOSTRequest $body (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function salesQuoteDocumentPOSTRequestQuoteIDDocumentsPostAsyncWithHttpInfo($accept, $quote_id, $jiwa_stateful = null, $document_type = null, $file_id = null, $physical_file_name = null, $full_physical_file_name = null, $description = null, $last_modified_by_staff_id = null, $last_modified_by_staff_username = null, $last_modified_by_staff_title = null, $last_modified_by_staff_first_name = null, $last_modified_by_staff_surname = null, $file_binary = null, $body = null)
    {
        $returnType = '\Jiwa\Model\Document';
        $request = $this->salesQuoteDocumentPOSTRequestQuoteIDDocumentsPostRequest($accept, $quote_id, $jiwa_stateful, $document_type, $file_id, $physical_file_name, $full_physical_file_name, $description, $last_modified_by_staff_id, $last_modified_by_staff_username, $last_modified_by_staff_title, $last_modified_by_staff_first_name, $last_modified_by_staff_surname, $file_binary, $body);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'salesQuoteDocumentPOSTRequestQuoteIDDocumentsPost'
     *
     * @param  string $accept Accept Header (required)
     * @param  string $quote_id (required)
     * @param  bool $jiwa_stateful Stateful indicator (optional)
     * @param  string $document_type (optional)
     * @param  string $file_id (optional)
     * @param  string $physical_file_name (optional)
     * @param  string $full_physical_file_name (optional)
     * @param  string $description (optional)
     * @param  string $last_modified_by_staff_id (optional)
     * @param  string $last_modified_by_staff_username (optional)
     * @param  string $last_modified_by_staff_title (optional)
     * @param  string $last_modified_by_staff_first_name (optional)
     * @param  string $last_modified_by_staff_surname (optional)
     * @param  string $file_binary (optional)
     * @param  \Jiwa\Model\SalesQuoteDocumentPOSTRequest $body (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function salesQuoteDocumentPOSTRequestQuoteIDDocumentsPostRequest($accept, $quote_id, $jiwa_stateful = null, $document_type = null, $file_id = null, $physical_file_name = null, $full_physical_file_name = null, $description = null, $last_modified_by_staff_id = null, $last_modified_by_staff_username = null, $last_modified_by_staff_title = null, $last_modified_by_staff_first_name = null, $last_modified_by_staff_surname = null, $file_binary = null, $body = null)
    {
        // verify the required parameter 'accept' is set
        if ($accept === null || (is_array($accept) && count($accept) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $accept when calling salesQuoteDocumentPOSTRequestQuoteIDDocumentsPost'
            );
        }
        // verify the required parameter 'quote_id' is set
        if ($quote_id === null || (is_array($quote_id) && count($quote_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $quote_id when calling salesQuoteDocumentPOSTRequestQuoteIDDocumentsPost'
            );
        }

        $resourcePath = '/SalesQuotes/{QuoteID}/Documents';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        if ($document_type !== null) {
            $queryParams['DocumentType'] = ObjectSerializer::toQueryValue($document_type);
        }
        // query params
        if ($file_id !== null) {
            $queryParams['FileID'] = ObjectSerializer::toQueryValue($file_id);
        }
        // query params
        if ($physical_file_name !== null) {
            $queryParams['PhysicalFileName'] = ObjectSerializer::toQueryValue($physical_file_name);
        }
        // query params
        if ($full_physical_file_name !== null) {
            $queryParams['FullPhysicalFileName'] = ObjectSerializer::toQueryValue($full_physical_file_name);
        }
        // query params
        if ($description !== null) {
            $queryParams['Description'] = ObjectSerializer::toQueryValue($description);
        }
        // query params
        if ($last_modified_by_staff_id !== null) {
            $queryParams['LastModifiedByStaffID'] = ObjectSerializer::toQueryValue($last_modified_by_staff_id);
        }
        // query params
        if ($last_modified_by_staff_username !== null) {
            $queryParams['LastModifiedByStaffUsername'] = ObjectSerializer::toQueryValue($last_modified_by_staff_username);
        }
        // query params
        if ($last_modified_by_staff_title !== null) {
            $queryParams['LastModifiedByStaffTitle'] = ObjectSerializer::toQueryValue($last_modified_by_staff_title);
        }
        // query params
        if ($last_modified_by_staff_first_name !== null) {
            $queryParams['LastModifiedByStaffFirstName'] = ObjectSerializer::toQueryValue($last_modified_by_staff_first_name);
        }
        // query params
        if ($last_modified_by_staff_surname !== null) {
            $queryParams['LastModifiedByStaffSurname'] = ObjectSerializer::toQueryValue($last_modified_by_staff_surname);
        }
        // query params
        if ($file_binary !== null) {
            $queryParams['FileBinary'] = ObjectSerializer::toQueryValue($file_binary);
        }
        // header params
        if ($accept !== null) {
            $headerParams['Accept'] = ObjectSerializer::toHeaderValue($accept);
        }
        // header params
        if ($jiwa_stateful !== null) {
            $headerParams['jiwa-stateful'] = ObjectSerializer::toHeaderValue($jiwa_stateful);
        }

        // path params
        if ($quote_id !== null) {
            $resourcePath = str_replace(
                '{' . 'QuoteID' . '}',
                ObjectSerializer::toPathValue($quote_id),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;
        if (isset($body)) {
            $_tempBody = $body;
        }

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json', 'application/xml']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json', 'application/xml'],
                ['application/x-www-form-urlencoded', 'application/json', 'application/xml']
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            
            if($headers['Content-Type'] === 'application/json') {
                // \stdClass has no __toString(), so we should encode it manually
                if ($httpBody instanceof \stdClass) {
                    $httpBody = \GuzzleHttp\json_encode($httpBody);
                }
                // array has no __toString(), so we should encode it manually
                if(is_array($httpBody)) {
                    $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($httpBody));
                }
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\Query::build($formParams);
            }
        }

        // this endpoint requires HTTP basic authentication
        if ($this->config->getUsername() !== null || $this->config->getPassword() !== null) {
            $headers['Authorization'] = 'Basic ' . base64_encode($this->config->getUsername() . ":" . $this->config->getPassword());
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\Query::build($queryParams);
        return new Request(
            'POST',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation salesQuoteDocumentTypeDELETERequestDocumentTypesDocumentTypeIDDelete
     *
     * Deletes a sales Quote document type.
     *
     * @param  string $accept Accept Header (required)
     * @param  string $document_type_id document_type_id (required)
     * @param  bool $jiwa_stateful Stateful indicator (optional)
     *
     * @throws \Jiwa\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Jiwa\Model\Object
     */
    public function salesQuoteDocumentTypeDELETERequestDocumentTypesDocumentTypeIDDelete($accept, $document_type_id, $jiwa_stateful = null)
    {
        list($response) = $this->salesQuoteDocumentTypeDELETERequestDocumentTypesDocumentTypeIDDeleteWithHttpInfo($accept, $document_type_id, $jiwa_stateful);
        return $response;
    }

    /**
     * Operation salesQuoteDocumentTypeDELETERequestDocumentTypesDocumentTypeIDDeleteWithHttpInfo
     *
     * Deletes a sales Quote document type.
     *
     * @param  string $accept Accept Header (required)
     * @param  string $document_type_id (required)
     * @param  bool $jiwa_stateful Stateful indicator (optional)
     *
     * @throws \Jiwa\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Jiwa\Model\Object, HTTP status code, HTTP response headers (array of strings)
     */
    public function salesQuoteDocumentTypeDELETERequestDocumentTypesDocumentTypeIDDeleteWithHttpInfo($accept, $document_type_id, $jiwa_stateful = null)
    {
        $returnType = '\Jiwa\Model\Object';
        $request = $this->salesQuoteDocumentTypeDELETERequestDocumentTypesDocumentTypeIDDeleteRequest($accept, $document_type_id, $jiwa_stateful);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Jiwa\Model\Object',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 404:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Jiwa\Model\Object',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 204:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Jiwa\Model\Object',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 401:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Jiwa\Model\Object',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 403:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Jiwa\Model\Object',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation salesQuoteDocumentTypeDELETERequestDocumentTypesDocumentTypeIDDeleteAsync
     *
     * Deletes a sales Quote document type.
     *
     * @param  string $accept Accept Header (required)
     * @param  string $document_type_id (required)
     * @param  bool $jiwa_stateful Stateful indicator (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function salesQuoteDocumentTypeDELETERequestDocumentTypesDocumentTypeIDDeleteAsync($accept, $document_type_id, $jiwa_stateful = null)
    {
        return $this->salesQuoteDocumentTypeDELETERequestDocumentTypesDocumentTypeIDDeleteAsyncWithHttpInfo($accept, $document_type_id, $jiwa_stateful)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation salesQuoteDocumentTypeDELETERequestDocumentTypesDocumentTypeIDDeleteAsyncWithHttpInfo
     *
     * Deletes a sales Quote document type.
     *
     * @param  string $accept Accept Header (required)
     * @param  string $document_type_id (required)
     * @param  bool $jiwa_stateful Stateful indicator (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function salesQuoteDocumentTypeDELETERequestDocumentTypesDocumentTypeIDDeleteAsyncWithHttpInfo($accept, $document_type_id, $jiwa_stateful = null)
    {
        $returnType = '\Jiwa\Model\Object';
        $request = $this->salesQuoteDocumentTypeDELETERequestDocumentTypesDocumentTypeIDDeleteRequest($accept, $document_type_id, $jiwa_stateful);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'salesQuoteDocumentTypeDELETERequestDocumentTypesDocumentTypeIDDelete'
     *
     * @param  string $accept Accept Header (required)
     * @param  string $document_type_id (required)
     * @param  bool $jiwa_stateful Stateful indicator (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function salesQuoteDocumentTypeDELETERequestDocumentTypesDocumentTypeIDDeleteRequest($accept, $document_type_id, $jiwa_stateful = null)
    {
        // verify the required parameter 'accept' is set
        if ($accept === null || (is_array($accept) && count($accept) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $accept when calling salesQuoteDocumentTypeDELETERequestDocumentTypesDocumentTypeIDDelete'
            );
        }
        // verify the required parameter 'document_type_id' is set
        if ($document_type_id === null || (is_array($document_type_id) && count($document_type_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $document_type_id when calling salesQuoteDocumentTypeDELETERequestDocumentTypesDocumentTypeIDDelete'
            );
        }

        $resourcePath = '/SalesQuotes/DocumentTypes/{DocumentTypeID}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // header params
        if ($accept !== null) {
            $headerParams['Accept'] = ObjectSerializer::toHeaderValue($accept);
        }
        // header params
        if ($jiwa_stateful !== null) {
            $headerParams['jiwa-stateful'] = ObjectSerializer::toHeaderValue($jiwa_stateful);
        }

        // path params
        if ($document_type_id !== null) {
            $resourcePath = str_replace(
                '{' . 'DocumentTypeID' . '}',
                ObjectSerializer::toPathValue($document_type_id),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json', 'application/xml']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json', 'application/xml'],
                ['application/x-www-form-urlencoded', 'application/json', 'application/xml']
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            
            if($headers['Content-Type'] === 'application/json') {
                // \stdClass has no __toString(), so we should encode it manually
                if ($httpBody instanceof \stdClass) {
                    $httpBody = \GuzzleHttp\json_encode($httpBody);
                }
                // array has no __toString(), so we should encode it manually
                if(is_array($httpBody)) {
                    $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($httpBody));
                }
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\Query::build($formParams);
            }
        }

        // this endpoint requires HTTP basic authentication
        if ($this->config->getUsername() !== null || $this->config->getPassword() !== null) {
            $headers['Authorization'] = 'Basic ' . base64_encode($this->config->getUsername() . ":" . $this->config->getPassword());
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\Query::build($queryParams);
        return new Request(
            'DELETE',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation salesQuoteDocumentTypeGETRequestDocumentTypesDocumentTypeIDGet
     *
     * Retrieves a sales Quote document type.
     *
     * @param  string $accept Accept Header (required)
     * @param  string $document_type_id document_type_id (required)
     * @param  bool $jiwa_stateful Stateful indicator (optional)
     *
     * @throws \Jiwa\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Jiwa\Model\DocumentType
     */
    public function salesQuoteDocumentTypeGETRequestDocumentTypesDocumentTypeIDGet($accept, $document_type_id, $jiwa_stateful = null)
    {
        list($response) = $this->salesQuoteDocumentTypeGETRequestDocumentTypesDocumentTypeIDGetWithHttpInfo($accept, $document_type_id, $jiwa_stateful);
        return $response;
    }

    /**
     * Operation salesQuoteDocumentTypeGETRequestDocumentTypesDocumentTypeIDGetWithHttpInfo
     *
     * Retrieves a sales Quote document type.
     *
     * @param  string $accept Accept Header (required)
     * @param  string $document_type_id (required)
     * @param  bool $jiwa_stateful Stateful indicator (optional)
     *
     * @throws \Jiwa\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Jiwa\Model\DocumentType, HTTP status code, HTTP response headers (array of strings)
     */
    public function salesQuoteDocumentTypeGETRequestDocumentTypesDocumentTypeIDGetWithHttpInfo($accept, $document_type_id, $jiwa_stateful = null)
    {
        $returnType = '\Jiwa\Model\DocumentType';
        $request = $this->salesQuoteDocumentTypeGETRequestDocumentTypesDocumentTypeIDGetRequest($accept, $document_type_id, $jiwa_stateful);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Jiwa\Model\DocumentType',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 404:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Jiwa\Model\DocumentType',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 403:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Jiwa\Model\DocumentType',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 401:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Jiwa\Model\DocumentType',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation salesQuoteDocumentTypeGETRequestDocumentTypesDocumentTypeIDGetAsync
     *
     * Retrieves a sales Quote document type.
     *
     * @param  string $accept Accept Header (required)
     * @param  string $document_type_id (required)
     * @param  bool $jiwa_stateful Stateful indicator (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function salesQuoteDocumentTypeGETRequestDocumentTypesDocumentTypeIDGetAsync($accept, $document_type_id, $jiwa_stateful = null)
    {
        return $this->salesQuoteDocumentTypeGETRequestDocumentTypesDocumentTypeIDGetAsyncWithHttpInfo($accept, $document_type_id, $jiwa_stateful)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation salesQuoteDocumentTypeGETRequestDocumentTypesDocumentTypeIDGetAsyncWithHttpInfo
     *
     * Retrieves a sales Quote document type.
     *
     * @param  string $accept Accept Header (required)
     * @param  string $document_type_id (required)
     * @param  bool $jiwa_stateful Stateful indicator (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function salesQuoteDocumentTypeGETRequestDocumentTypesDocumentTypeIDGetAsyncWithHttpInfo($accept, $document_type_id, $jiwa_stateful = null)
    {
        $returnType = '\Jiwa\Model\DocumentType';
        $request = $this->salesQuoteDocumentTypeGETRequestDocumentTypesDocumentTypeIDGetRequest($accept, $document_type_id, $jiwa_stateful);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'salesQuoteDocumentTypeGETRequestDocumentTypesDocumentTypeIDGet'
     *
     * @param  string $accept Accept Header (required)
     * @param  string $document_type_id (required)
     * @param  bool $jiwa_stateful Stateful indicator (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function salesQuoteDocumentTypeGETRequestDocumentTypesDocumentTypeIDGetRequest($accept, $document_type_id, $jiwa_stateful = null)
    {
        // verify the required parameter 'accept' is set
        if ($accept === null || (is_array($accept) && count($accept) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $accept when calling salesQuoteDocumentTypeGETRequestDocumentTypesDocumentTypeIDGet'
            );
        }
        // verify the required parameter 'document_type_id' is set
        if ($document_type_id === null || (is_array($document_type_id) && count($document_type_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $document_type_id when calling salesQuoteDocumentTypeGETRequestDocumentTypesDocumentTypeIDGet'
            );
        }

        $resourcePath = '/SalesQuotes/DocumentTypes/{DocumentTypeID}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // header params
        if ($accept !== null) {
            $headerParams['Accept'] = ObjectSerializer::toHeaderValue($accept);
        }
        // header params
        if ($jiwa_stateful !== null) {
            $headerParams['jiwa-stateful'] = ObjectSerializer::toHeaderValue($jiwa_stateful);
        }

        // path params
        if ($document_type_id !== null) {
            $resourcePath = str_replace(
                '{' . 'DocumentTypeID' . '}',
                ObjectSerializer::toPathValue($document_type_id),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json', 'application/xml']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json', 'application/xml'],
                ['application/x-www-form-urlencoded', 'application/json', 'application/xml']
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            
            if($headers['Content-Type'] === 'application/json') {
                // \stdClass has no __toString(), so we should encode it manually
                if ($httpBody instanceof \stdClass) {
                    $httpBody = \GuzzleHttp\json_encode($httpBody);
                }
                // array has no __toString(), so we should encode it manually
                if(is_array($httpBody)) {
                    $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($httpBody));
                }
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\Query::build($formParams);
            }
        }

        // this endpoint requires HTTP basic authentication
        if ($this->config->getUsername() !== null || $this->config->getPassword() !== null) {
            $headers['Authorization'] = 'Basic ' . base64_encode($this->config->getUsername() . ":" . $this->config->getPassword());
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\Query::build($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation salesQuoteDocumentTypePATCHRequestDocumentTypesDocumentTypeIDUpdate
     *
     * Updates a sales Quote document type.
     *
     * @param  string $accept Accept Header (required)
     * @param  string $document_type_id document_type_id (required)
     * @param  bool $jiwa_stateful Stateful indicator (optional)
     * @param  string $description description (optional)
     * @param  bool $default_type default_type (optional)
     * @param  int $item_no item_no (optional)
     * @param  \Jiwa\Model\SalesQuoteDocumentTypePATCHRequest $body body (optional)
     *
     * @throws \Jiwa\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Jiwa\Model\DocumentType
     */
    public function salesQuoteDocumentTypePATCHRequestDocumentTypesDocumentTypeIDUpdate($accept, $document_type_id, $jiwa_stateful = null, $description = null, $default_type = null, $item_no = null, $body = null)
    {
        list($response) = $this->salesQuoteDocumentTypePATCHRequestDocumentTypesDocumentTypeIDUpdateWithHttpInfo($accept, $document_type_id, $jiwa_stateful, $description, $default_type, $item_no, $body);
        return $response;
    }

    /**
     * Operation salesQuoteDocumentTypePATCHRequestDocumentTypesDocumentTypeIDUpdateWithHttpInfo
     *
     * Updates a sales Quote document type.
     *
     * @param  string $accept Accept Header (required)
     * @param  string $document_type_id (required)
     * @param  bool $jiwa_stateful Stateful indicator (optional)
     * @param  string $description (optional)
     * @param  bool $default_type (optional)
     * @param  int $item_no (optional)
     * @param  \Jiwa\Model\SalesQuoteDocumentTypePATCHRequest $body (optional)
     *
     * @throws \Jiwa\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Jiwa\Model\DocumentType, HTTP status code, HTTP response headers (array of strings)
     */
    public function salesQuoteDocumentTypePATCHRequestDocumentTypesDocumentTypeIDUpdateWithHttpInfo($accept, $document_type_id, $jiwa_stateful = null, $description = null, $default_type = null, $item_no = null, $body = null)
    {
        $returnType = '\Jiwa\Model\DocumentType';
        $request = $this->salesQuoteDocumentTypePATCHRequestDocumentTypesDocumentTypeIDUpdateRequest($accept, $document_type_id, $jiwa_stateful, $description, $default_type, $item_no, $body);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Jiwa\Model\DocumentType',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 403:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Jiwa\Model\DocumentType',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 404:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Jiwa\Model\DocumentType',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 401:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Jiwa\Model\DocumentType',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation salesQuoteDocumentTypePATCHRequestDocumentTypesDocumentTypeIDUpdateAsync
     *
     * Updates a sales Quote document type.
     *
     * @param  string $accept Accept Header (required)
     * @param  string $document_type_id (required)
     * @param  bool $jiwa_stateful Stateful indicator (optional)
     * @param  string $description (optional)
     * @param  bool $default_type (optional)
     * @param  int $item_no (optional)
     * @param  \Jiwa\Model\SalesQuoteDocumentTypePATCHRequest $body (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function salesQuoteDocumentTypePATCHRequestDocumentTypesDocumentTypeIDUpdateAsync($accept, $document_type_id, $jiwa_stateful = null, $description = null, $default_type = null, $item_no = null, $body = null)
    {
        return $this->salesQuoteDocumentTypePATCHRequestDocumentTypesDocumentTypeIDUpdateAsyncWithHttpInfo($accept, $document_type_id, $jiwa_stateful, $description, $default_type, $item_no, $body)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation salesQuoteDocumentTypePATCHRequestDocumentTypesDocumentTypeIDUpdateAsyncWithHttpInfo
     *
     * Updates a sales Quote document type.
     *
     * @param  string $accept Accept Header (required)
     * @param  string $document_type_id (required)
     * @param  bool $jiwa_stateful Stateful indicator (optional)
     * @param  string $description (optional)
     * @param  bool $default_type (optional)
     * @param  int $item_no (optional)
     * @param  \Jiwa\Model\SalesQuoteDocumentTypePATCHRequest $body (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function salesQuoteDocumentTypePATCHRequestDocumentTypesDocumentTypeIDUpdateAsyncWithHttpInfo($accept, $document_type_id, $jiwa_stateful = null, $description = null, $default_type = null, $item_no = null, $body = null)
    {
        $returnType = '\Jiwa\Model\DocumentType';
        $request = $this->salesQuoteDocumentTypePATCHRequestDocumentTypesDocumentTypeIDUpdateRequest($accept, $document_type_id, $jiwa_stateful, $description, $default_type, $item_no, $body);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'salesQuoteDocumentTypePATCHRequestDocumentTypesDocumentTypeIDUpdate'
     *
     * @param  string $accept Accept Header (required)
     * @param  string $document_type_id (required)
     * @param  bool $jiwa_stateful Stateful indicator (optional)
     * @param  string $description (optional)
     * @param  bool $default_type (optional)
     * @param  int $item_no (optional)
     * @param  \Jiwa\Model\SalesQuoteDocumentTypePATCHRequest $body (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function salesQuoteDocumentTypePATCHRequestDocumentTypesDocumentTypeIDUpdateRequest($accept, $document_type_id, $jiwa_stateful = null, $description = null, $default_type = null, $item_no = null, $body = null)
    {
        // verify the required parameter 'accept' is set
        if ($accept === null || (is_array($accept) && count($accept) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $accept when calling salesQuoteDocumentTypePATCHRequestDocumentTypesDocumentTypeIDUpdate'
            );
        }
        // verify the required parameter 'document_type_id' is set
        if ($document_type_id === null || (is_array($document_type_id) && count($document_type_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $document_type_id when calling salesQuoteDocumentTypePATCHRequestDocumentTypesDocumentTypeIDUpdate'
            );
        }

        $resourcePath = '/SalesQuotes/DocumentTypes/{DocumentTypeID}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        if ($description !== null) {
            $queryParams['Description'] = ObjectSerializer::toQueryValue($description);
        }
        // query params
        if ($default_type !== null) {
            $queryParams['DefaultType'] = ObjectSerializer::toQueryValue($default_type);
        }
        // query params
        if ($item_no !== null) {
            $queryParams['ItemNo'] = ObjectSerializer::toQueryValue($item_no);
        }
        // header params
        if ($accept !== null) {
            $headerParams['Accept'] = ObjectSerializer::toHeaderValue($accept);
        }
        // header params
        if ($jiwa_stateful !== null) {
            $headerParams['jiwa-stateful'] = ObjectSerializer::toHeaderValue($jiwa_stateful);
        }

        // path params
        if ($document_type_id !== null) {
            $resourcePath = str_replace(
                '{' . 'DocumentTypeID' . '}',
                ObjectSerializer::toPathValue($document_type_id),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;
        if (isset($body)) {
            $_tempBody = $body;
        }

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json', 'application/xml']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json', 'application/xml'],
                ['application/x-www-form-urlencoded', 'application/json', 'application/xml']
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            
            if($headers['Content-Type'] === 'application/json') {
                // \stdClass has no __toString(), so we should encode it manually
                if ($httpBody instanceof \stdClass) {
                    $httpBody = \GuzzleHttp\json_encode($httpBody);
                }
                // array has no __toString(), so we should encode it manually
                if(is_array($httpBody)) {
                    $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($httpBody));
                }
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\Query::build($formParams);
            }
        }

        // this endpoint requires HTTP basic authentication
        if ($this->config->getUsername() !== null || $this->config->getPassword() !== null) {
            $headers['Authorization'] = 'Basic ' . base64_encode($this->config->getUsername() . ":" . $this->config->getPassword());
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\Query::build($queryParams);
        return new Request(
            'PATCH',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation salesQuoteDocumentTypePOSTRequestDocumentTypesPost
     *
     * Creates a new sales Quote document type.
     *
     * @param  string $accept Accept Header (required)
     * @param  bool $jiwa_stateful Stateful indicator (optional)
     * @param  string $description description (optional)
     * @param  bool $default_type default_type (optional)
     * @param  int $item_no item_no (optional)
     * @param  \Jiwa\Model\SalesQuoteDocumentTypePOSTRequest $body body (optional)
     *
     * @throws \Jiwa\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Jiwa\Model\DocumentType
     */
    public function salesQuoteDocumentTypePOSTRequestDocumentTypesPost($accept, $jiwa_stateful = null, $description = null, $default_type = null, $item_no = null, $body = null)
    {
        list($response) = $this->salesQuoteDocumentTypePOSTRequestDocumentTypesPostWithHttpInfo($accept, $jiwa_stateful, $description, $default_type, $item_no, $body);
        return $response;
    }

    /**
     * Operation salesQuoteDocumentTypePOSTRequestDocumentTypesPostWithHttpInfo
     *
     * Creates a new sales Quote document type.
     *
     * @param  string $accept Accept Header (required)
     * @param  bool $jiwa_stateful Stateful indicator (optional)
     * @param  string $description (optional)
     * @param  bool $default_type (optional)
     * @param  int $item_no (optional)
     * @param  \Jiwa\Model\SalesQuoteDocumentTypePOSTRequest $body (optional)
     *
     * @throws \Jiwa\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Jiwa\Model\DocumentType, HTTP status code, HTTP response headers (array of strings)
     */
    public function salesQuoteDocumentTypePOSTRequestDocumentTypesPostWithHttpInfo($accept, $jiwa_stateful = null, $description = null, $default_type = null, $item_no = null, $body = null)
    {
        $returnType = '\Jiwa\Model\DocumentType';
        $request = $this->salesQuoteDocumentTypePOSTRequestDocumentTypesPostRequest($accept, $jiwa_stateful, $description, $default_type, $item_no, $body);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Jiwa\Model\DocumentType',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 401:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Jiwa\Model\DocumentType',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 403:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Jiwa\Model\DocumentType',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 201:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Jiwa\Model\DocumentType',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation salesQuoteDocumentTypePOSTRequestDocumentTypesPostAsync
     *
     * Creates a new sales Quote document type.
     *
     * @param  string $accept Accept Header (required)
     * @param  bool $jiwa_stateful Stateful indicator (optional)
     * @param  string $description (optional)
     * @param  bool $default_type (optional)
     * @param  int $item_no (optional)
     * @param  \Jiwa\Model\SalesQuoteDocumentTypePOSTRequest $body (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function salesQuoteDocumentTypePOSTRequestDocumentTypesPostAsync($accept, $jiwa_stateful = null, $description = null, $default_type = null, $item_no = null, $body = null)
    {
        return $this->salesQuoteDocumentTypePOSTRequestDocumentTypesPostAsyncWithHttpInfo($accept, $jiwa_stateful, $description, $default_type, $item_no, $body)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation salesQuoteDocumentTypePOSTRequestDocumentTypesPostAsyncWithHttpInfo
     *
     * Creates a new sales Quote document type.
     *
     * @param  string $accept Accept Header (required)
     * @param  bool $jiwa_stateful Stateful indicator (optional)
     * @param  string $description (optional)
     * @param  bool $default_type (optional)
     * @param  int $item_no (optional)
     * @param  \Jiwa\Model\SalesQuoteDocumentTypePOSTRequest $body (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function salesQuoteDocumentTypePOSTRequestDocumentTypesPostAsyncWithHttpInfo($accept, $jiwa_stateful = null, $description = null, $default_type = null, $item_no = null, $body = null)
    {
        $returnType = '\Jiwa\Model\DocumentType';
        $request = $this->salesQuoteDocumentTypePOSTRequestDocumentTypesPostRequest($accept, $jiwa_stateful, $description, $default_type, $item_no, $body);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'salesQuoteDocumentTypePOSTRequestDocumentTypesPost'
     *
     * @param  string $accept Accept Header (required)
     * @param  bool $jiwa_stateful Stateful indicator (optional)
     * @param  string $description (optional)
     * @param  bool $default_type (optional)
     * @param  int $item_no (optional)
     * @param  \Jiwa\Model\SalesQuoteDocumentTypePOSTRequest $body (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function salesQuoteDocumentTypePOSTRequestDocumentTypesPostRequest($accept, $jiwa_stateful = null, $description = null, $default_type = null, $item_no = null, $body = null)
    {
        // verify the required parameter 'accept' is set
        if ($accept === null || (is_array($accept) && count($accept) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $accept when calling salesQuoteDocumentTypePOSTRequestDocumentTypesPost'
            );
        }

        $resourcePath = '/SalesQuotes/DocumentTypes';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        if ($description !== null) {
            $queryParams['Description'] = ObjectSerializer::toQueryValue($description);
        }
        // query params
        if ($default_type !== null) {
            $queryParams['DefaultType'] = ObjectSerializer::toQueryValue($default_type);
        }
        // query params
        if ($item_no !== null) {
            $queryParams['ItemNo'] = ObjectSerializer::toQueryValue($item_no);
        }
        // header params
        if ($accept !== null) {
            $headerParams['Accept'] = ObjectSerializer::toHeaderValue($accept);
        }
        // header params
        if ($jiwa_stateful !== null) {
            $headerParams['jiwa-stateful'] = ObjectSerializer::toHeaderValue($jiwa_stateful);
        }


        // body params
        $_tempBody = null;
        if (isset($body)) {
            $_tempBody = $body;
        }

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json', 'application/xml']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json', 'application/xml'],
                ['application/x-www-form-urlencoded', 'application/json', 'application/xml']
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            
            if($headers['Content-Type'] === 'application/json') {
                // \stdClass has no __toString(), so we should encode it manually
                if ($httpBody instanceof \stdClass) {
                    $httpBody = \GuzzleHttp\json_encode($httpBody);
                }
                // array has no __toString(), so we should encode it manually
                if(is_array($httpBody)) {
                    $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($httpBody));
                }
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\Query::build($formParams);
            }
        }

        // this endpoint requires HTTP basic authentication
        if ($this->config->getUsername() !== null || $this->config->getPassword() !== null) {
            $headers['Authorization'] = 'Basic ' . base64_encode($this->config->getUsername() . ":" . $this->config->getPassword());
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\Query::build($queryParams);
        return new Request(
            'POST',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation salesQuoteDocumentTypesGETManyRequestDocumentTypesGet
     *
     * Retrieves a list of sales Quote document types.
     *
     * @param  string $accept Accept Header (required)
     * @param  bool $jiwa_stateful Stateful indicator (optional)
     *
     * @throws \Jiwa\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Jiwa\Model\DocumentType[]
     */
    public function salesQuoteDocumentTypesGETManyRequestDocumentTypesGet($accept, $jiwa_stateful = null)
    {
        list($response) = $this->salesQuoteDocumentTypesGETManyRequestDocumentTypesGetWithHttpInfo($accept, $jiwa_stateful);
        return $response;
    }

    /**
     * Operation salesQuoteDocumentTypesGETManyRequestDocumentTypesGetWithHttpInfo
     *
     * Retrieves a list of sales Quote document types.
     *
     * @param  string $accept Accept Header (required)
     * @param  bool $jiwa_stateful Stateful indicator (optional)
     *
     * @throws \Jiwa\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Jiwa\Model\DocumentType[], HTTP status code, HTTP response headers (array of strings)
     */
    public function salesQuoteDocumentTypesGETManyRequestDocumentTypesGetWithHttpInfo($accept, $jiwa_stateful = null)
    {
        $returnType = '\Jiwa\Model\DocumentType[]';
        $request = $this->salesQuoteDocumentTypesGETManyRequestDocumentTypesGetRequest($accept, $jiwa_stateful);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Jiwa\Model\DocumentType[]',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 403:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Jiwa\Model\DocumentType[]',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 401:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Jiwa\Model\DocumentType[]',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation salesQuoteDocumentTypesGETManyRequestDocumentTypesGetAsync
     *
     * Retrieves a list of sales Quote document types.
     *
     * @param  string $accept Accept Header (required)
     * @param  bool $jiwa_stateful Stateful indicator (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function salesQuoteDocumentTypesGETManyRequestDocumentTypesGetAsync($accept, $jiwa_stateful = null)
    {
        return $this->salesQuoteDocumentTypesGETManyRequestDocumentTypesGetAsyncWithHttpInfo($accept, $jiwa_stateful)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation salesQuoteDocumentTypesGETManyRequestDocumentTypesGetAsyncWithHttpInfo
     *
     * Retrieves a list of sales Quote document types.
     *
     * @param  string $accept Accept Header (required)
     * @param  bool $jiwa_stateful Stateful indicator (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function salesQuoteDocumentTypesGETManyRequestDocumentTypesGetAsyncWithHttpInfo($accept, $jiwa_stateful = null)
    {
        $returnType = '\Jiwa\Model\DocumentType[]';
        $request = $this->salesQuoteDocumentTypesGETManyRequestDocumentTypesGetRequest($accept, $jiwa_stateful);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'salesQuoteDocumentTypesGETManyRequestDocumentTypesGet'
     *
     * @param  string $accept Accept Header (required)
     * @param  bool $jiwa_stateful Stateful indicator (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function salesQuoteDocumentTypesGETManyRequestDocumentTypesGetRequest($accept, $jiwa_stateful = null)
    {
        // verify the required parameter 'accept' is set
        if ($accept === null || (is_array($accept) && count($accept) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $accept when calling salesQuoteDocumentTypesGETManyRequestDocumentTypesGet'
            );
        }

        $resourcePath = '/SalesQuotes/DocumentTypes';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // header params
        if ($accept !== null) {
            $headerParams['Accept'] = ObjectSerializer::toHeaderValue($accept);
        }
        // header params
        if ($jiwa_stateful !== null) {
            $headerParams['jiwa-stateful'] = ObjectSerializer::toHeaderValue($jiwa_stateful);
        }


        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json', 'application/xml']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json', 'application/xml'],
                ['application/x-www-form-urlencoded', 'application/json', 'application/xml']
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            
            if($headers['Content-Type'] === 'application/json') {
                // \stdClass has no __toString(), so we should encode it manually
                if ($httpBody instanceof \stdClass) {
                    $httpBody = \GuzzleHttp\json_encode($httpBody);
                }
                // array has no __toString(), so we should encode it manually
                if(is_array($httpBody)) {
                    $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($httpBody));
                }
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\Query::build($formParams);
            }
        }

        // this endpoint requires HTTP basic authentication
        if ($this->config->getUsername() !== null || $this->config->getPassword() !== null) {
            $headers['Authorization'] = 'Basic ' . base64_encode($this->config->getUsername() . ":" . $this->config->getPassword());
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\Query::build($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation salesQuoteDocumentsGETManyRequestQuoteIDDocumentsGet
     *
     * Retrieves a list of sales Quote documents.
     *
     * @param  string $accept Accept Header (required)
     * @param  string $quote_id quote_id (required)
     * @param  bool $jiwa_stateful Stateful indicator (optional)
     *
     * @throws \Jiwa\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Jiwa\Model\Document[]
     */
    public function salesQuoteDocumentsGETManyRequestQuoteIDDocumentsGet($accept, $quote_id, $jiwa_stateful = null)
    {
        list($response) = $this->salesQuoteDocumentsGETManyRequestQuoteIDDocumentsGetWithHttpInfo($accept, $quote_id, $jiwa_stateful);
        return $response;
    }

    /**
     * Operation salesQuoteDocumentsGETManyRequestQuoteIDDocumentsGetWithHttpInfo
     *
     * Retrieves a list of sales Quote documents.
     *
     * @param  string $accept Accept Header (required)
     * @param  string $quote_id (required)
     * @param  bool $jiwa_stateful Stateful indicator (optional)
     *
     * @throws \Jiwa\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Jiwa\Model\Document[], HTTP status code, HTTP response headers (array of strings)
     */
    public function salesQuoteDocumentsGETManyRequestQuoteIDDocumentsGetWithHttpInfo($accept, $quote_id, $jiwa_stateful = null)
    {
        $returnType = '\Jiwa\Model\Document[]';
        $request = $this->salesQuoteDocumentsGETManyRequestQuoteIDDocumentsGetRequest($accept, $quote_id, $jiwa_stateful);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Jiwa\Model\Document[]',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 401:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Jiwa\Model\Document[]',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 403:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Jiwa\Model\Document[]',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 404:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Jiwa\Model\Document[]',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation salesQuoteDocumentsGETManyRequestQuoteIDDocumentsGetAsync
     *
     * Retrieves a list of sales Quote documents.
     *
     * @param  string $accept Accept Header (required)
     * @param  string $quote_id (required)
     * @param  bool $jiwa_stateful Stateful indicator (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function salesQuoteDocumentsGETManyRequestQuoteIDDocumentsGetAsync($accept, $quote_id, $jiwa_stateful = null)
    {
        return $this->salesQuoteDocumentsGETManyRequestQuoteIDDocumentsGetAsyncWithHttpInfo($accept, $quote_id, $jiwa_stateful)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation salesQuoteDocumentsGETManyRequestQuoteIDDocumentsGetAsyncWithHttpInfo
     *
     * Retrieves a list of sales Quote documents.
     *
     * @param  string $accept Accept Header (required)
     * @param  string $quote_id (required)
     * @param  bool $jiwa_stateful Stateful indicator (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function salesQuoteDocumentsGETManyRequestQuoteIDDocumentsGetAsyncWithHttpInfo($accept, $quote_id, $jiwa_stateful = null)
    {
        $returnType = '\Jiwa\Model\Document[]';
        $request = $this->salesQuoteDocumentsGETManyRequestQuoteIDDocumentsGetRequest($accept, $quote_id, $jiwa_stateful);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'salesQuoteDocumentsGETManyRequestQuoteIDDocumentsGet'
     *
     * @param  string $accept Accept Header (required)
     * @param  string $quote_id (required)
     * @param  bool $jiwa_stateful Stateful indicator (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function salesQuoteDocumentsGETManyRequestQuoteIDDocumentsGetRequest($accept, $quote_id, $jiwa_stateful = null)
    {
        // verify the required parameter 'accept' is set
        if ($accept === null || (is_array($accept) && count($accept) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $accept when calling salesQuoteDocumentsGETManyRequestQuoteIDDocumentsGet'
            );
        }
        // verify the required parameter 'quote_id' is set
        if ($quote_id === null || (is_array($quote_id) && count($quote_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $quote_id when calling salesQuoteDocumentsGETManyRequestQuoteIDDocumentsGet'
            );
        }

        $resourcePath = '/SalesQuotes/{QuoteID}/Documents';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // header params
        if ($accept !== null) {
            $headerParams['Accept'] = ObjectSerializer::toHeaderValue($accept);
        }
        // header params
        if ($jiwa_stateful !== null) {
            $headerParams['jiwa-stateful'] = ObjectSerializer::toHeaderValue($jiwa_stateful);
        }

        // path params
        if ($quote_id !== null) {
            $resourcePath = str_replace(
                '{' . 'QuoteID' . '}',
                ObjectSerializer::toPathValue($quote_id),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json', 'application/xml']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json', 'application/xml'],
                ['application/x-www-form-urlencoded', 'application/json', 'application/xml']
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            
            if($headers['Content-Type'] === 'application/json') {
                // \stdClass has no __toString(), so we should encode it manually
                if ($httpBody instanceof \stdClass) {
                    $httpBody = \GuzzleHttp\json_encode($httpBody);
                }
                // array has no __toString(), so we should encode it manually
                if(is_array($httpBody)) {
                    $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($httpBody));
                }
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\Query::build($formParams);
            }
        }

        // this endpoint requires HTTP basic authentication
        if ($this->config->getUsername() !== null || $this->config->getPassword() !== null) {
            $headers['Authorization'] = 'Basic ' . base64_encode($this->config->getUsername() . ":" . $this->config->getPassword());
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\Query::build($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation salesQuoteGETRequestQuoteIDGet
     *
     * Retrieves a sales Quote.
     *
     * @param  string $accept Accept Header (required)
     * @param  string $quote_id quote_id (required)
     * @param  bool $jiwa_stateful Stateful indicator (optional)
     *
     * @throws \Jiwa\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Jiwa\Model\SalesQuote
     */
    public function salesQuoteGETRequestQuoteIDGet($accept, $quote_id, $jiwa_stateful = null)
    {
        list($response) = $this->salesQuoteGETRequestQuoteIDGetWithHttpInfo($accept, $quote_id, $jiwa_stateful);
        return $response;
    }

    /**
     * Operation salesQuoteGETRequestQuoteIDGetWithHttpInfo
     *
     * Retrieves a sales Quote.
     *
     * @param  string $accept Accept Header (required)
     * @param  string $quote_id (required)
     * @param  bool $jiwa_stateful Stateful indicator (optional)
     *
     * @throws \Jiwa\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Jiwa\Model\SalesQuote, HTTP status code, HTTP response headers (array of strings)
     */
    public function salesQuoteGETRequestQuoteIDGetWithHttpInfo($accept, $quote_id, $jiwa_stateful = null)
    {
        $returnType = '\Jiwa\Model\SalesQuote';
        $request = $this->salesQuoteGETRequestQuoteIDGetRequest($accept, $quote_id, $jiwa_stateful);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Jiwa\Model\SalesQuote',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 401:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Jiwa\Model\SalesQuote',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 403:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Jiwa\Model\SalesQuote',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 404:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Jiwa\Model\SalesQuote',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation salesQuoteGETRequestQuoteIDGetAsync
     *
     * Retrieves a sales Quote.
     *
     * @param  string $accept Accept Header (required)
     * @param  string $quote_id (required)
     * @param  bool $jiwa_stateful Stateful indicator (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function salesQuoteGETRequestQuoteIDGetAsync($accept, $quote_id, $jiwa_stateful = null)
    {
        return $this->salesQuoteGETRequestQuoteIDGetAsyncWithHttpInfo($accept, $quote_id, $jiwa_stateful)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation salesQuoteGETRequestQuoteIDGetAsyncWithHttpInfo
     *
     * Retrieves a sales Quote.
     *
     * @param  string $accept Accept Header (required)
     * @param  string $quote_id (required)
     * @param  bool $jiwa_stateful Stateful indicator (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function salesQuoteGETRequestQuoteIDGetAsyncWithHttpInfo($accept, $quote_id, $jiwa_stateful = null)
    {
        $returnType = '\Jiwa\Model\SalesQuote';
        $request = $this->salesQuoteGETRequestQuoteIDGetRequest($accept, $quote_id, $jiwa_stateful);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'salesQuoteGETRequestQuoteIDGet'
     *
     * @param  string $accept Accept Header (required)
     * @param  string $quote_id (required)
     * @param  bool $jiwa_stateful Stateful indicator (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function salesQuoteGETRequestQuoteIDGetRequest($accept, $quote_id, $jiwa_stateful = null)
    {
        // verify the required parameter 'accept' is set
        if ($accept === null || (is_array($accept) && count($accept) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $accept when calling salesQuoteGETRequestQuoteIDGet'
            );
        }
        // verify the required parameter 'quote_id' is set
        if ($quote_id === null || (is_array($quote_id) && count($quote_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $quote_id when calling salesQuoteGETRequestQuoteIDGet'
            );
        }

        $resourcePath = '/SalesQuotes/{QuoteID}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // header params
        if ($accept !== null) {
            $headerParams['Accept'] = ObjectSerializer::toHeaderValue($accept);
        }
        // header params
        if ($jiwa_stateful !== null) {
            $headerParams['jiwa-stateful'] = ObjectSerializer::toHeaderValue($jiwa_stateful);
        }

        // path params
        if ($quote_id !== null) {
            $resourcePath = str_replace(
                '{' . 'QuoteID' . '}',
                ObjectSerializer::toPathValue($quote_id),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json', 'application/xml']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json', 'application/xml'],
                ['application/x-www-form-urlencoded', 'application/json', 'application/xml']
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            
            if($headers['Content-Type'] === 'application/json') {
                // \stdClass has no __toString(), so we should encode it manually
                if ($httpBody instanceof \stdClass) {
                    $httpBody = \GuzzleHttp\json_encode($httpBody);
                }
                // array has no __toString(), so we should encode it manually
                if(is_array($httpBody)) {
                    $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($httpBody));
                }
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\Query::build($formParams);
            }
        }

        // this endpoint requires HTTP basic authentication
        if ($this->config->getUsername() !== null || $this->config->getPassword() !== null) {
            $headers['Authorization'] = 'Basic ' . base64_encode($this->config->getUsername() . ":" . $this->config->getPassword());
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\Query::build($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation salesQuoteHistorysGETManyRequestQuoteIDHistorysGet
     *
     * Retrieves a list of sales Quote histories.
     *
     * @param  string $accept Accept Header (required)
     * @param  string $quote_id quote_id (required)
     * @param  bool $jiwa_stateful Stateful indicator (optional)
     *
     * @throws \Jiwa\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Jiwa\Model\SalesQuoteHistory[]
     */
    public function salesQuoteHistorysGETManyRequestQuoteIDHistorysGet($accept, $quote_id, $jiwa_stateful = null)
    {
        list($response) = $this->salesQuoteHistorysGETManyRequestQuoteIDHistorysGetWithHttpInfo($accept, $quote_id, $jiwa_stateful);
        return $response;
    }

    /**
     * Operation salesQuoteHistorysGETManyRequestQuoteIDHistorysGetWithHttpInfo
     *
     * Retrieves a list of sales Quote histories.
     *
     * @param  string $accept Accept Header (required)
     * @param  string $quote_id (required)
     * @param  bool $jiwa_stateful Stateful indicator (optional)
     *
     * @throws \Jiwa\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Jiwa\Model\SalesQuoteHistory[], HTTP status code, HTTP response headers (array of strings)
     */
    public function salesQuoteHistorysGETManyRequestQuoteIDHistorysGetWithHttpInfo($accept, $quote_id, $jiwa_stateful = null)
    {
        $returnType = '\Jiwa\Model\SalesQuoteHistory[]';
        $request = $this->salesQuoteHistorysGETManyRequestQuoteIDHistorysGetRequest($accept, $quote_id, $jiwa_stateful);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Jiwa\Model\SalesQuoteHistory[]',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 401:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Jiwa\Model\SalesQuoteHistory[]',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 403:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Jiwa\Model\SalesQuoteHistory[]',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 404:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Jiwa\Model\SalesQuoteHistory[]',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation salesQuoteHistorysGETManyRequestQuoteIDHistorysGetAsync
     *
     * Retrieves a list of sales Quote histories.
     *
     * @param  string $accept Accept Header (required)
     * @param  string $quote_id (required)
     * @param  bool $jiwa_stateful Stateful indicator (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function salesQuoteHistorysGETManyRequestQuoteIDHistorysGetAsync($accept, $quote_id, $jiwa_stateful = null)
    {
        return $this->salesQuoteHistorysGETManyRequestQuoteIDHistorysGetAsyncWithHttpInfo($accept, $quote_id, $jiwa_stateful)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation salesQuoteHistorysGETManyRequestQuoteIDHistorysGetAsyncWithHttpInfo
     *
     * Retrieves a list of sales Quote histories.
     *
     * @param  string $accept Accept Header (required)
     * @param  string $quote_id (required)
     * @param  bool $jiwa_stateful Stateful indicator (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function salesQuoteHistorysGETManyRequestQuoteIDHistorysGetAsyncWithHttpInfo($accept, $quote_id, $jiwa_stateful = null)
    {
        $returnType = '\Jiwa\Model\SalesQuoteHistory[]';
        $request = $this->salesQuoteHistorysGETManyRequestQuoteIDHistorysGetRequest($accept, $quote_id, $jiwa_stateful);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'salesQuoteHistorysGETManyRequestQuoteIDHistorysGet'
     *
     * @param  string $accept Accept Header (required)
     * @param  string $quote_id (required)
     * @param  bool $jiwa_stateful Stateful indicator (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function salesQuoteHistorysGETManyRequestQuoteIDHistorysGetRequest($accept, $quote_id, $jiwa_stateful = null)
    {
        // verify the required parameter 'accept' is set
        if ($accept === null || (is_array($accept) && count($accept) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $accept when calling salesQuoteHistorysGETManyRequestQuoteIDHistorysGet'
            );
        }
        // verify the required parameter 'quote_id' is set
        if ($quote_id === null || (is_array($quote_id) && count($quote_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $quote_id when calling salesQuoteHistorysGETManyRequestQuoteIDHistorysGet'
            );
        }

        $resourcePath = '/SalesQuotes/{QuoteID}/Historys';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // header params
        if ($accept !== null) {
            $headerParams['Accept'] = ObjectSerializer::toHeaderValue($accept);
        }
        // header params
        if ($jiwa_stateful !== null) {
            $headerParams['jiwa-stateful'] = ObjectSerializer::toHeaderValue($jiwa_stateful);
        }

        // path params
        if ($quote_id !== null) {
            $resourcePath = str_replace(
                '{' . 'QuoteID' . '}',
                ObjectSerializer::toPathValue($quote_id),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json', 'application/xml']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json', 'application/xml'],
                ['application/x-www-form-urlencoded', 'application/json', 'application/xml']
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            
            if($headers['Content-Type'] === 'application/json') {
                // \stdClass has no __toString(), so we should encode it manually
                if ($httpBody instanceof \stdClass) {
                    $httpBody = \GuzzleHttp\json_encode($httpBody);
                }
                // array has no __toString(), so we should encode it manually
                if(is_array($httpBody)) {
                    $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($httpBody));
                }
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\Query::build($formParams);
            }
        }

        // this endpoint requires HTTP basic authentication
        if ($this->config->getUsername() !== null || $this->config->getPassword() !== null) {
            $headers['Authorization'] = 'Basic ' . base64_encode($this->config->getUsername() . ":" . $this->config->getPassword());
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\Query::build($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation salesQuoteHistorysGETRequestQuoteIDHistorysQuoteHistoryIDGet
     *
     * Retrieves a sales Quote history.
     *
     * @param  string $accept Accept Header (required)
     * @param  string $quote_id quote_id (required)
     * @param  string $quote_history_id quote_history_id (required)
     * @param  bool $jiwa_stateful Stateful indicator (optional)
     *
     * @throws \Jiwa\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Jiwa\Model\SalesQuoteHistory
     */
    public function salesQuoteHistorysGETRequestQuoteIDHistorysQuoteHistoryIDGet($accept, $quote_id, $quote_history_id, $jiwa_stateful = null)
    {
        list($response) = $this->salesQuoteHistorysGETRequestQuoteIDHistorysQuoteHistoryIDGetWithHttpInfo($accept, $quote_id, $quote_history_id, $jiwa_stateful);
        return $response;
    }

    /**
     * Operation salesQuoteHistorysGETRequestQuoteIDHistorysQuoteHistoryIDGetWithHttpInfo
     *
     * Retrieves a sales Quote history.
     *
     * @param  string $accept Accept Header (required)
     * @param  string $quote_id (required)
     * @param  string $quote_history_id (required)
     * @param  bool $jiwa_stateful Stateful indicator (optional)
     *
     * @throws \Jiwa\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Jiwa\Model\SalesQuoteHistory, HTTP status code, HTTP response headers (array of strings)
     */
    public function salesQuoteHistorysGETRequestQuoteIDHistorysQuoteHistoryIDGetWithHttpInfo($accept, $quote_id, $quote_history_id, $jiwa_stateful = null)
    {
        $returnType = '\Jiwa\Model\SalesQuoteHistory';
        $request = $this->salesQuoteHistorysGETRequestQuoteIDHistorysQuoteHistoryIDGetRequest($accept, $quote_id, $quote_history_id, $jiwa_stateful);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Jiwa\Model\SalesQuoteHistory',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 404:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Jiwa\Model\SalesQuoteHistory',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 401:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Jiwa\Model\SalesQuoteHistory',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 403:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Jiwa\Model\SalesQuoteHistory',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation salesQuoteHistorysGETRequestQuoteIDHistorysQuoteHistoryIDGetAsync
     *
     * Retrieves a sales Quote history.
     *
     * @param  string $accept Accept Header (required)
     * @param  string $quote_id (required)
     * @param  string $quote_history_id (required)
     * @param  bool $jiwa_stateful Stateful indicator (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function salesQuoteHistorysGETRequestQuoteIDHistorysQuoteHistoryIDGetAsync($accept, $quote_id, $quote_history_id, $jiwa_stateful = null)
    {
        return $this->salesQuoteHistorysGETRequestQuoteIDHistorysQuoteHistoryIDGetAsyncWithHttpInfo($accept, $quote_id, $quote_history_id, $jiwa_stateful)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation salesQuoteHistorysGETRequestQuoteIDHistorysQuoteHistoryIDGetAsyncWithHttpInfo
     *
     * Retrieves a sales Quote history.
     *
     * @param  string $accept Accept Header (required)
     * @param  string $quote_id (required)
     * @param  string $quote_history_id (required)
     * @param  bool $jiwa_stateful Stateful indicator (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function salesQuoteHistorysGETRequestQuoteIDHistorysQuoteHistoryIDGetAsyncWithHttpInfo($accept, $quote_id, $quote_history_id, $jiwa_stateful = null)
    {
        $returnType = '\Jiwa\Model\SalesQuoteHistory';
        $request = $this->salesQuoteHistorysGETRequestQuoteIDHistorysQuoteHistoryIDGetRequest($accept, $quote_id, $quote_history_id, $jiwa_stateful);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'salesQuoteHistorysGETRequestQuoteIDHistorysQuoteHistoryIDGet'
     *
     * @param  string $accept Accept Header (required)
     * @param  string $quote_id (required)
     * @param  string $quote_history_id (required)
     * @param  bool $jiwa_stateful Stateful indicator (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function salesQuoteHistorysGETRequestQuoteIDHistorysQuoteHistoryIDGetRequest($accept, $quote_id, $quote_history_id, $jiwa_stateful = null)
    {
        // verify the required parameter 'accept' is set
        if ($accept === null || (is_array($accept) && count($accept) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $accept when calling salesQuoteHistorysGETRequestQuoteIDHistorysQuoteHistoryIDGet'
            );
        }
        // verify the required parameter 'quote_id' is set
        if ($quote_id === null || (is_array($quote_id) && count($quote_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $quote_id when calling salesQuoteHistorysGETRequestQuoteIDHistorysQuoteHistoryIDGet'
            );
        }
        // verify the required parameter 'quote_history_id' is set
        if ($quote_history_id === null || (is_array($quote_history_id) && count($quote_history_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $quote_history_id when calling salesQuoteHistorysGETRequestQuoteIDHistorysQuoteHistoryIDGet'
            );
        }

        $resourcePath = '/SalesQuotes/{QuoteID}/Historys/{QuoteHistoryID}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // header params
        if ($accept !== null) {
            $headerParams['Accept'] = ObjectSerializer::toHeaderValue($accept);
        }
        // header params
        if ($jiwa_stateful !== null) {
            $headerParams['jiwa-stateful'] = ObjectSerializer::toHeaderValue($jiwa_stateful);
        }

        // path params
        if ($quote_id !== null) {
            $resourcePath = str_replace(
                '{' . 'QuoteID' . '}',
                ObjectSerializer::toPathValue($quote_id),
                $resourcePath
            );
        }
        // path params
        if ($quote_history_id !== null) {
            $resourcePath = str_replace(
                '{' . 'QuoteHistoryID' . '}',
                ObjectSerializer::toPathValue($quote_history_id),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json', 'application/xml']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json', 'application/xml'],
                ['application/x-www-form-urlencoded', 'application/json', 'application/xml']
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            
            if($headers['Content-Type'] === 'application/json') {
                // \stdClass has no __toString(), so we should encode it manually
                if ($httpBody instanceof \stdClass) {
                    $httpBody = \GuzzleHttp\json_encode($httpBody);
                }
                // array has no __toString(), so we should encode it manually
                if(is_array($httpBody)) {
                    $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($httpBody));
                }
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\Query::build($formParams);
            }
        }

        // this endpoint requires HTTP basic authentication
        if ($this->config->getUsername() !== null || $this->config->getPassword() !== null) {
            $headers['Authorization'] = 'Basic ' . base64_encode($this->config->getUsername() . ":" . $this->config->getPassword());
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\Query::build($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation salesQuoteHistorysPATCHRequestQuoteIDHistorysQuoteHistoryIDUpdate
     *
     * Updates a sales Quote history.
     *
     * @param  string $accept Accept Header (required)
     * @param  string $quote_id quote_id (required)
     * @param  string $quote_history_id quote_history_id (required)
     * @param  bool $jiwa_stateful Stateful indicator (optional)
     * @param  int $history_no history_no (optional)
     * @param  string $sales_stage sales_stage (optional)
     * @param  string $cartage_charge1 cartage_charge1 (optional)
     * @param  string $cartage_charge2 cartage_charge2 (optional)
     * @param  string $cartage_charge3 cartage_charge3 (optional)
     * @param  string $opportunity_status_reason opportunity_status_reason (optional)
     * @param  string $ref ref (optional)
     * @param  string $last_modified_by last_modified_by (optional)
     * @param  double $history_total history_total (optional)
     * @param  \DateTime $record_date record_date (optional)
     * @param  \DateTime $expiry_date expiry_date (optional)
     * @param  int $expiry_days expiry_days (optional)
     * @param  bool $docket_printed docket_printed (optional)
     * @param  string $del_address1 del_address1 (optional)
     * @param  string $del_address2 del_address2 (optional)
     * @param  string $del_address3 del_address3 (optional)
     * @param  string $del_address4 del_address4 (optional)
     * @param  string $post_code post_code (optional)
     * @param  string $delivery_address_country delivery_address_country (optional)
     * @param  string $notes notes (optional)
     * @param  string $courier_details courier_details (optional)
     * @param  string $freight_forward_address1 freight_forward_address1 (optional)
     * @param  string $freight_forward_address2 freight_forward_address2 (optional)
     * @param  string $freight_forward_address3 freight_forward_address3 (optional)
     * @param  string $freight_forward_address4 freight_forward_address4 (optional)
     * @param  string $freight_forward_address_country freight_forward_address_country (optional)
     * @param  string $freight_forward_notes freight_forward_notes (optional)
     * @param  bool $invoice_printed invoice_printed (optional)
     * @param  string $del_contact_name del_contact_name (optional)
     * @param  \DateTime $expected_close_date expected_close_date (optional)
     * @param  string $opportunity_status opportunity_status (optional)
     * @param  string $opportunity_note opportunity_note (optional)
     * @param  bool $invoice_emailed invoice_emailed (optional)
     * @param  bool $drop_shipment drop_shipment (optional)
     * @param  string $delivery_addressee delivery_addressee (optional)
     * @param  \Jiwa\Model\SalesQuoteHistorysPATCHRequest $body body (optional)
     *
     * @throws \Jiwa\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Jiwa\Model\SalesQuoteHistory
     */
    public function salesQuoteHistorysPATCHRequestQuoteIDHistorysQuoteHistoryIDUpdate($accept, $quote_id, $quote_history_id, $jiwa_stateful = null, $history_no = null, $sales_stage = null, $cartage_charge1 = null, $cartage_charge2 = null, $cartage_charge3 = null, $opportunity_status_reason = null, $ref = null, $last_modified_by = null, $history_total = null, $record_date = null, $expiry_date = null, $expiry_days = null, $docket_printed = null, $del_address1 = null, $del_address2 = null, $del_address3 = null, $del_address4 = null, $post_code = null, $delivery_address_country = null, $notes = null, $courier_details = null, $freight_forward_address1 = null, $freight_forward_address2 = null, $freight_forward_address3 = null, $freight_forward_address4 = null, $freight_forward_address_country = null, $freight_forward_notes = null, $invoice_printed = null, $del_contact_name = null, $expected_close_date = null, $opportunity_status = null, $opportunity_note = null, $invoice_emailed = null, $drop_shipment = null, $delivery_addressee = null, $body = null)
    {
        list($response) = $this->salesQuoteHistorysPATCHRequestQuoteIDHistorysQuoteHistoryIDUpdateWithHttpInfo($accept, $quote_id, $quote_history_id, $jiwa_stateful, $history_no, $sales_stage, $cartage_charge1, $cartage_charge2, $cartage_charge3, $opportunity_status_reason, $ref, $last_modified_by, $history_total, $record_date, $expiry_date, $expiry_days, $docket_printed, $del_address1, $del_address2, $del_address3, $del_address4, $post_code, $delivery_address_country, $notes, $courier_details, $freight_forward_address1, $freight_forward_address2, $freight_forward_address3, $freight_forward_address4, $freight_forward_address_country, $freight_forward_notes, $invoice_printed, $del_contact_name, $expected_close_date, $opportunity_status, $opportunity_note, $invoice_emailed, $drop_shipment, $delivery_addressee, $body);
        return $response;
    }

    /**
     * Operation salesQuoteHistorysPATCHRequestQuoteIDHistorysQuoteHistoryIDUpdateWithHttpInfo
     *
     * Updates a sales Quote history.
     *
     * @param  string $accept Accept Header (required)
     * @param  string $quote_id (required)
     * @param  string $quote_history_id (required)
     * @param  bool $jiwa_stateful Stateful indicator (optional)
     * @param  int $history_no (optional)
     * @param  string $sales_stage (optional)
     * @param  string $cartage_charge1 (optional)
     * @param  string $cartage_charge2 (optional)
     * @param  string $cartage_charge3 (optional)
     * @param  string $opportunity_status_reason (optional)
     * @param  string $ref (optional)
     * @param  string $last_modified_by (optional)
     * @param  double $history_total (optional)
     * @param  \DateTime $record_date (optional)
     * @param  \DateTime $expiry_date (optional)
     * @param  int $expiry_days (optional)
     * @param  bool $docket_printed (optional)
     * @param  string $del_address1 (optional)
     * @param  string $del_address2 (optional)
     * @param  string $del_address3 (optional)
     * @param  string $del_address4 (optional)
     * @param  string $post_code (optional)
     * @param  string $delivery_address_country (optional)
     * @param  string $notes (optional)
     * @param  string $courier_details (optional)
     * @param  string $freight_forward_address1 (optional)
     * @param  string $freight_forward_address2 (optional)
     * @param  string $freight_forward_address3 (optional)
     * @param  string $freight_forward_address4 (optional)
     * @param  string $freight_forward_address_country (optional)
     * @param  string $freight_forward_notes (optional)
     * @param  bool $invoice_printed (optional)
     * @param  string $del_contact_name (optional)
     * @param  \DateTime $expected_close_date (optional)
     * @param  string $opportunity_status (optional)
     * @param  string $opportunity_note (optional)
     * @param  bool $invoice_emailed (optional)
     * @param  bool $drop_shipment (optional)
     * @param  string $delivery_addressee (optional)
     * @param  \Jiwa\Model\SalesQuoteHistorysPATCHRequest $body (optional)
     *
     * @throws \Jiwa\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Jiwa\Model\SalesQuoteHistory, HTTP status code, HTTP response headers (array of strings)
     */
    public function salesQuoteHistorysPATCHRequestQuoteIDHistorysQuoteHistoryIDUpdateWithHttpInfo($accept, $quote_id, $quote_history_id, $jiwa_stateful = null, $history_no = null, $sales_stage = null, $cartage_charge1 = null, $cartage_charge2 = null, $cartage_charge3 = null, $opportunity_status_reason = null, $ref = null, $last_modified_by = null, $history_total = null, $record_date = null, $expiry_date = null, $expiry_days = null, $docket_printed = null, $del_address1 = null, $del_address2 = null, $del_address3 = null, $del_address4 = null, $post_code = null, $delivery_address_country = null, $notes = null, $courier_details = null, $freight_forward_address1 = null, $freight_forward_address2 = null, $freight_forward_address3 = null, $freight_forward_address4 = null, $freight_forward_address_country = null, $freight_forward_notes = null, $invoice_printed = null, $del_contact_name = null, $expected_close_date = null, $opportunity_status = null, $opportunity_note = null, $invoice_emailed = null, $drop_shipment = null, $delivery_addressee = null, $body = null)
    {
        $returnType = '\Jiwa\Model\SalesQuoteHistory';
        $request = $this->salesQuoteHistorysPATCHRequestQuoteIDHistorysQuoteHistoryIDUpdateRequest($accept, $quote_id, $quote_history_id, $jiwa_stateful, $history_no, $sales_stage, $cartage_charge1, $cartage_charge2, $cartage_charge3, $opportunity_status_reason, $ref, $last_modified_by, $history_total, $record_date, $expiry_date, $expiry_days, $docket_printed, $del_address1, $del_address2, $del_address3, $del_address4, $post_code, $delivery_address_country, $notes, $courier_details, $freight_forward_address1, $freight_forward_address2, $freight_forward_address3, $freight_forward_address4, $freight_forward_address_country, $freight_forward_notes, $invoice_printed, $del_contact_name, $expected_close_date, $opportunity_status, $opportunity_note, $invoice_emailed, $drop_shipment, $delivery_addressee, $body);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Jiwa\Model\SalesQuoteHistory',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 403:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Jiwa\Model\SalesQuoteHistory',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 404:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Jiwa\Model\SalesQuoteHistory',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 401:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Jiwa\Model\SalesQuoteHistory',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation salesQuoteHistorysPATCHRequestQuoteIDHistorysQuoteHistoryIDUpdateAsync
     *
     * Updates a sales Quote history.
     *
     * @param  string $accept Accept Header (required)
     * @param  string $quote_id (required)
     * @param  string $quote_history_id (required)
     * @param  bool $jiwa_stateful Stateful indicator (optional)
     * @param  int $history_no (optional)
     * @param  string $sales_stage (optional)
     * @param  string $cartage_charge1 (optional)
     * @param  string $cartage_charge2 (optional)
     * @param  string $cartage_charge3 (optional)
     * @param  string $opportunity_status_reason (optional)
     * @param  string $ref (optional)
     * @param  string $last_modified_by (optional)
     * @param  double $history_total (optional)
     * @param  \DateTime $record_date (optional)
     * @param  \DateTime $expiry_date (optional)
     * @param  int $expiry_days (optional)
     * @param  bool $docket_printed (optional)
     * @param  string $del_address1 (optional)
     * @param  string $del_address2 (optional)
     * @param  string $del_address3 (optional)
     * @param  string $del_address4 (optional)
     * @param  string $post_code (optional)
     * @param  string $delivery_address_country (optional)
     * @param  string $notes (optional)
     * @param  string $courier_details (optional)
     * @param  string $freight_forward_address1 (optional)
     * @param  string $freight_forward_address2 (optional)
     * @param  string $freight_forward_address3 (optional)
     * @param  string $freight_forward_address4 (optional)
     * @param  string $freight_forward_address_country (optional)
     * @param  string $freight_forward_notes (optional)
     * @param  bool $invoice_printed (optional)
     * @param  string $del_contact_name (optional)
     * @param  \DateTime $expected_close_date (optional)
     * @param  string $opportunity_status (optional)
     * @param  string $opportunity_note (optional)
     * @param  bool $invoice_emailed (optional)
     * @param  bool $drop_shipment (optional)
     * @param  string $delivery_addressee (optional)
     * @param  \Jiwa\Model\SalesQuoteHistorysPATCHRequest $body (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function salesQuoteHistorysPATCHRequestQuoteIDHistorysQuoteHistoryIDUpdateAsync($accept, $quote_id, $quote_history_id, $jiwa_stateful = null, $history_no = null, $sales_stage = null, $cartage_charge1 = null, $cartage_charge2 = null, $cartage_charge3 = null, $opportunity_status_reason = null, $ref = null, $last_modified_by = null, $history_total = null, $record_date = null, $expiry_date = null, $expiry_days = null, $docket_printed = null, $del_address1 = null, $del_address2 = null, $del_address3 = null, $del_address4 = null, $post_code = null, $delivery_address_country = null, $notes = null, $courier_details = null, $freight_forward_address1 = null, $freight_forward_address2 = null, $freight_forward_address3 = null, $freight_forward_address4 = null, $freight_forward_address_country = null, $freight_forward_notes = null, $invoice_printed = null, $del_contact_name = null, $expected_close_date = null, $opportunity_status = null, $opportunity_note = null, $invoice_emailed = null, $drop_shipment = null, $delivery_addressee = null, $body = null)
    {
        return $this->salesQuoteHistorysPATCHRequestQuoteIDHistorysQuoteHistoryIDUpdateAsyncWithHttpInfo($accept, $quote_id, $quote_history_id, $jiwa_stateful, $history_no, $sales_stage, $cartage_charge1, $cartage_charge2, $cartage_charge3, $opportunity_status_reason, $ref, $last_modified_by, $history_total, $record_date, $expiry_date, $expiry_days, $docket_printed, $del_address1, $del_address2, $del_address3, $del_address4, $post_code, $delivery_address_country, $notes, $courier_details, $freight_forward_address1, $freight_forward_address2, $freight_forward_address3, $freight_forward_address4, $freight_forward_address_country, $freight_forward_notes, $invoice_printed, $del_contact_name, $expected_close_date, $opportunity_status, $opportunity_note, $invoice_emailed, $drop_shipment, $delivery_addressee, $body)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation salesQuoteHistorysPATCHRequestQuoteIDHistorysQuoteHistoryIDUpdateAsyncWithHttpInfo
     *
     * Updates a sales Quote history.
     *
     * @param  string $accept Accept Header (required)
     * @param  string $quote_id (required)
     * @param  string $quote_history_id (required)
     * @param  bool $jiwa_stateful Stateful indicator (optional)
     * @param  int $history_no (optional)
     * @param  string $sales_stage (optional)
     * @param  string $cartage_charge1 (optional)
     * @param  string $cartage_charge2 (optional)
     * @param  string $cartage_charge3 (optional)
     * @param  string $opportunity_status_reason (optional)
     * @param  string $ref (optional)
     * @param  string $last_modified_by (optional)
     * @param  double $history_total (optional)
     * @param  \DateTime $record_date (optional)
     * @param  \DateTime $expiry_date (optional)
     * @param  int $expiry_days (optional)
     * @param  bool $docket_printed (optional)
     * @param  string $del_address1 (optional)
     * @param  string $del_address2 (optional)
     * @param  string $del_address3 (optional)
     * @param  string $del_address4 (optional)
     * @param  string $post_code (optional)
     * @param  string $delivery_address_country (optional)
     * @param  string $notes (optional)
     * @param  string $courier_details (optional)
     * @param  string $freight_forward_address1 (optional)
     * @param  string $freight_forward_address2 (optional)
     * @param  string $freight_forward_address3 (optional)
     * @param  string $freight_forward_address4 (optional)
     * @param  string $freight_forward_address_country (optional)
     * @param  string $freight_forward_notes (optional)
     * @param  bool $invoice_printed (optional)
     * @param  string $del_contact_name (optional)
     * @param  \DateTime $expected_close_date (optional)
     * @param  string $opportunity_status (optional)
     * @param  string $opportunity_note (optional)
     * @param  bool $invoice_emailed (optional)
     * @param  bool $drop_shipment (optional)
     * @param  string $delivery_addressee (optional)
     * @param  \Jiwa\Model\SalesQuoteHistorysPATCHRequest $body (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function salesQuoteHistorysPATCHRequestQuoteIDHistorysQuoteHistoryIDUpdateAsyncWithHttpInfo($accept, $quote_id, $quote_history_id, $jiwa_stateful = null, $history_no = null, $sales_stage = null, $cartage_charge1 = null, $cartage_charge2 = null, $cartage_charge3 = null, $opportunity_status_reason = null, $ref = null, $last_modified_by = null, $history_total = null, $record_date = null, $expiry_date = null, $expiry_days = null, $docket_printed = null, $del_address1 = null, $del_address2 = null, $del_address3 = null, $del_address4 = null, $post_code = null, $delivery_address_country = null, $notes = null, $courier_details = null, $freight_forward_address1 = null, $freight_forward_address2 = null, $freight_forward_address3 = null, $freight_forward_address4 = null, $freight_forward_address_country = null, $freight_forward_notes = null, $invoice_printed = null, $del_contact_name = null, $expected_close_date = null, $opportunity_status = null, $opportunity_note = null, $invoice_emailed = null, $drop_shipment = null, $delivery_addressee = null, $body = null)
    {
        $returnType = '\Jiwa\Model\SalesQuoteHistory';
        $request = $this->salesQuoteHistorysPATCHRequestQuoteIDHistorysQuoteHistoryIDUpdateRequest($accept, $quote_id, $quote_history_id, $jiwa_stateful, $history_no, $sales_stage, $cartage_charge1, $cartage_charge2, $cartage_charge3, $opportunity_status_reason, $ref, $last_modified_by, $history_total, $record_date, $expiry_date, $expiry_days, $docket_printed, $del_address1, $del_address2, $del_address3, $del_address4, $post_code, $delivery_address_country, $notes, $courier_details, $freight_forward_address1, $freight_forward_address2, $freight_forward_address3, $freight_forward_address4, $freight_forward_address_country, $freight_forward_notes, $invoice_printed, $del_contact_name, $expected_close_date, $opportunity_status, $opportunity_note, $invoice_emailed, $drop_shipment, $delivery_addressee, $body);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'salesQuoteHistorysPATCHRequestQuoteIDHistorysQuoteHistoryIDUpdate'
     *
     * @param  string $accept Accept Header (required)
     * @param  string $quote_id (required)
     * @param  string $quote_history_id (required)
     * @param  bool $jiwa_stateful Stateful indicator (optional)
     * @param  int $history_no (optional)
     * @param  string $sales_stage (optional)
     * @param  string $cartage_charge1 (optional)
     * @param  string $cartage_charge2 (optional)
     * @param  string $cartage_charge3 (optional)
     * @param  string $opportunity_status_reason (optional)
     * @param  string $ref (optional)
     * @param  string $last_modified_by (optional)
     * @param  double $history_total (optional)
     * @param  \DateTime $record_date (optional)
     * @param  \DateTime $expiry_date (optional)
     * @param  int $expiry_days (optional)
     * @param  bool $docket_printed (optional)
     * @param  string $del_address1 (optional)
     * @param  string $del_address2 (optional)
     * @param  string $del_address3 (optional)
     * @param  string $del_address4 (optional)
     * @param  string $post_code (optional)
     * @param  string $delivery_address_country (optional)
     * @param  string $notes (optional)
     * @param  string $courier_details (optional)
     * @param  string $freight_forward_address1 (optional)
     * @param  string $freight_forward_address2 (optional)
     * @param  string $freight_forward_address3 (optional)
     * @param  string $freight_forward_address4 (optional)
     * @param  string $freight_forward_address_country (optional)
     * @param  string $freight_forward_notes (optional)
     * @param  bool $invoice_printed (optional)
     * @param  string $del_contact_name (optional)
     * @param  \DateTime $expected_close_date (optional)
     * @param  string $opportunity_status (optional)
     * @param  string $opportunity_note (optional)
     * @param  bool $invoice_emailed (optional)
     * @param  bool $drop_shipment (optional)
     * @param  string $delivery_addressee (optional)
     * @param  \Jiwa\Model\SalesQuoteHistorysPATCHRequest $body (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function salesQuoteHistorysPATCHRequestQuoteIDHistorysQuoteHistoryIDUpdateRequest($accept, $quote_id, $quote_history_id, $jiwa_stateful = null, $history_no = null, $sales_stage = null, $cartage_charge1 = null, $cartage_charge2 = null, $cartage_charge3 = null, $opportunity_status_reason = null, $ref = null, $last_modified_by = null, $history_total = null, $record_date = null, $expiry_date = null, $expiry_days = null, $docket_printed = null, $del_address1 = null, $del_address2 = null, $del_address3 = null, $del_address4 = null, $post_code = null, $delivery_address_country = null, $notes = null, $courier_details = null, $freight_forward_address1 = null, $freight_forward_address2 = null, $freight_forward_address3 = null, $freight_forward_address4 = null, $freight_forward_address_country = null, $freight_forward_notes = null, $invoice_printed = null, $del_contact_name = null, $expected_close_date = null, $opportunity_status = null, $opportunity_note = null, $invoice_emailed = null, $drop_shipment = null, $delivery_addressee = null, $body = null)
    {
        // verify the required parameter 'accept' is set
        if ($accept === null || (is_array($accept) && count($accept) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $accept when calling salesQuoteHistorysPATCHRequestQuoteIDHistorysQuoteHistoryIDUpdate'
            );
        }
        // verify the required parameter 'quote_id' is set
        if ($quote_id === null || (is_array($quote_id) && count($quote_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $quote_id when calling salesQuoteHistorysPATCHRequestQuoteIDHistorysQuoteHistoryIDUpdate'
            );
        }
        // verify the required parameter 'quote_history_id' is set
        if ($quote_history_id === null || (is_array($quote_history_id) && count($quote_history_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $quote_history_id when calling salesQuoteHistorysPATCHRequestQuoteIDHistorysQuoteHistoryIDUpdate'
            );
        }

        $resourcePath = '/SalesQuotes/{QuoteID}/Historys/{QuoteHistoryID}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        if ($history_no !== null) {
            $queryParams['HistoryNo'] = ObjectSerializer::toQueryValue($history_no);
        }
        // query params
        if ($sales_stage !== null) {
            $queryParams['SalesStage'] = ObjectSerializer::toQueryValue($sales_stage);
        }
        // query params
        if ($cartage_charge1 !== null) {
            $queryParams['CartageCharge1'] = ObjectSerializer::toQueryValue($cartage_charge1);
        }
        // query params
        if ($cartage_charge2 !== null) {
            $queryParams['CartageCharge2'] = ObjectSerializer::toQueryValue($cartage_charge2);
        }
        // query params
        if ($cartage_charge3 !== null) {
            $queryParams['CartageCharge3'] = ObjectSerializer::toQueryValue($cartage_charge3);
        }
        // query params
        if ($opportunity_status_reason !== null) {
            $queryParams['OpportunityStatusReason'] = ObjectSerializer::toQueryValue($opportunity_status_reason);
        }
        // query params
        if ($ref !== null) {
            $queryParams['Ref'] = ObjectSerializer::toQueryValue($ref);
        }
        // query params
        if ($last_modified_by !== null) {
            $queryParams['LastModifiedBy'] = ObjectSerializer::toQueryValue($last_modified_by);
        }
        // query params
        if ($history_total !== null) {
            $queryParams['HistoryTotal'] = ObjectSerializer::toQueryValue($history_total);
        }
        // query params
        if ($record_date !== null) {
            $queryParams['RecordDate'] = ObjectSerializer::toQueryValue($record_date);
        }
        // query params
        if ($expiry_date !== null) {
            $queryParams['ExpiryDate'] = ObjectSerializer::toQueryValue($expiry_date);
        }
        // query params
        if ($expiry_days !== null) {
            $queryParams['ExpiryDays'] = ObjectSerializer::toQueryValue($expiry_days);
        }
        // query params
        if ($docket_printed !== null) {
            $queryParams['DocketPrinted'] = ObjectSerializer::toQueryValue($docket_printed);
        }
        // query params
        if ($del_address1 !== null) {
            $queryParams['DelAddress1'] = ObjectSerializer::toQueryValue($del_address1);
        }
        // query params
        if ($del_address2 !== null) {
            $queryParams['DelAddress2'] = ObjectSerializer::toQueryValue($del_address2);
        }
        // query params
        if ($del_address3 !== null) {
            $queryParams['DelAddress3'] = ObjectSerializer::toQueryValue($del_address3);
        }
        // query params
        if ($del_address4 !== null) {
            $queryParams['DelAddress4'] = ObjectSerializer::toQueryValue($del_address4);
        }
        // query params
        if ($post_code !== null) {
            $queryParams['PostCode'] = ObjectSerializer::toQueryValue($post_code);
        }
        // query params
        if ($delivery_address_country !== null) {
            $queryParams['DeliveryAddressCountry'] = ObjectSerializer::toQueryValue($delivery_address_country);
        }
        // query params
        if ($notes !== null) {
            $queryParams['Notes'] = ObjectSerializer::toQueryValue($notes);
        }
        // query params
        if ($courier_details !== null) {
            $queryParams['CourierDetails'] = ObjectSerializer::toQueryValue($courier_details);
        }
        // query params
        if ($freight_forward_address1 !== null) {
            $queryParams['FreightForwardAddress1'] = ObjectSerializer::toQueryValue($freight_forward_address1);
        }
        // query params
        if ($freight_forward_address2 !== null) {
            $queryParams['FreightForwardAddress2'] = ObjectSerializer::toQueryValue($freight_forward_address2);
        }
        // query params
        if ($freight_forward_address3 !== null) {
            $queryParams['FreightForwardAddress3'] = ObjectSerializer::toQueryValue($freight_forward_address3);
        }
        // query params
        if ($freight_forward_address4 !== null) {
            $queryParams['FreightForwardAddress4'] = ObjectSerializer::toQueryValue($freight_forward_address4);
        }
        // query params
        if ($freight_forward_address_country !== null) {
            $queryParams['FreightForwardAddressCountry'] = ObjectSerializer::toQueryValue($freight_forward_address_country);
        }
        // query params
        if ($freight_forward_notes !== null) {
            $queryParams['FreightForwardNotes'] = ObjectSerializer::toQueryValue($freight_forward_notes);
        }
        // query params
        if ($invoice_printed !== null) {
            $queryParams['InvoicePrinted'] = ObjectSerializer::toQueryValue($invoice_printed);
        }
        // query params
        if ($del_contact_name !== null) {
            $queryParams['DelContactName'] = ObjectSerializer::toQueryValue($del_contact_name);
        }
        // query params
        if ($expected_close_date !== null) {
            $queryParams['ExpectedCloseDate'] = ObjectSerializer::toQueryValue($expected_close_date);
        }
        // query params
        if ($opportunity_status !== null) {
            $queryParams['OpportunityStatus'] = ObjectSerializer::toQueryValue($opportunity_status);
        }
        // query params
        if ($opportunity_note !== null) {
            $queryParams['OpportunityNote'] = ObjectSerializer::toQueryValue($opportunity_note);
        }
        // query params
        if ($invoice_emailed !== null) {
            $queryParams['InvoiceEmailed'] = ObjectSerializer::toQueryValue($invoice_emailed);
        }
        // query params
        if ($drop_shipment !== null) {
            $queryParams['DropShipment'] = ObjectSerializer::toQueryValue($drop_shipment);
        }
        // query params
        if ($delivery_addressee !== null) {
            $queryParams['DeliveryAddressee'] = ObjectSerializer::toQueryValue($delivery_addressee);
        }
        // header params
        if ($accept !== null) {
            $headerParams['Accept'] = ObjectSerializer::toHeaderValue($accept);
        }
        // header params
        if ($jiwa_stateful !== null) {
            $headerParams['jiwa-stateful'] = ObjectSerializer::toHeaderValue($jiwa_stateful);
        }

        // path params
        if ($quote_id !== null) {
            $resourcePath = str_replace(
                '{' . 'QuoteID' . '}',
                ObjectSerializer::toPathValue($quote_id),
                $resourcePath
            );
        }
        // path params
        if ($quote_history_id !== null) {
            $resourcePath = str_replace(
                '{' . 'QuoteHistoryID' . '}',
                ObjectSerializer::toPathValue($quote_history_id),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;
        if (isset($body)) {
            $_tempBody = $body;
        }

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json', 'application/xml']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json', 'application/xml'],
                ['application/x-www-form-urlencoded', 'application/json', 'application/xml']
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            
            if($headers['Content-Type'] === 'application/json') {
                // \stdClass has no __toString(), so we should encode it manually
                if ($httpBody instanceof \stdClass) {
                    $httpBody = \GuzzleHttp\json_encode($httpBody);
                }
                // array has no __toString(), so we should encode it manually
                if(is_array($httpBody)) {
                    $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($httpBody));
                }
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\Query::build($formParams);
            }
        }

        // this endpoint requires HTTP basic authentication
        if ($this->config->getUsername() !== null || $this->config->getPassword() !== null) {
            $headers['Authorization'] = 'Basic ' . base64_encode($this->config->getUsername() . ":" . $this->config->getPassword());
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\Query::build($queryParams);
        return new Request(
            'PATCH',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation salesQuoteLineCustomFieldValueGETRequestQuoteIDHistorysQuoteHistoryIDLinesQuoteLineIDCustomFieldValuesSettingIDGet
     *
     * Retrieves a sales Quote line custom field value.
     *
     * @param  string $accept Accept Header (required)
     * @param  string $quote_id quote_id (required)
     * @param  string $quote_history_id quote_history_id (required)
     * @param  string $quote_line_id quote_line_id (required)
     * @param  string $setting_id setting_id (required)
     * @param  bool $jiwa_stateful Stateful indicator (optional)
     *
     * @throws \Jiwa\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Jiwa\Model\CustomFieldValue
     */
    public function salesQuoteLineCustomFieldValueGETRequestQuoteIDHistorysQuoteHistoryIDLinesQuoteLineIDCustomFieldValuesSettingIDGet($accept, $quote_id, $quote_history_id, $quote_line_id, $setting_id, $jiwa_stateful = null)
    {
        list($response) = $this->salesQuoteLineCustomFieldValueGETRequestQuoteIDHistorysQuoteHistoryIDLinesQuoteLineIDCustomFieldValuesSettingIDGetWithHttpInfo($accept, $quote_id, $quote_history_id, $quote_line_id, $setting_id, $jiwa_stateful);
        return $response;
    }

    /**
     * Operation salesQuoteLineCustomFieldValueGETRequestQuoteIDHistorysQuoteHistoryIDLinesQuoteLineIDCustomFieldValuesSettingIDGetWithHttpInfo
     *
     * Retrieves a sales Quote line custom field value.
     *
     * @param  string $accept Accept Header (required)
     * @param  string $quote_id (required)
     * @param  string $quote_history_id (required)
     * @param  string $quote_line_id (required)
     * @param  string $setting_id (required)
     * @param  bool $jiwa_stateful Stateful indicator (optional)
     *
     * @throws \Jiwa\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Jiwa\Model\CustomFieldValue, HTTP status code, HTTP response headers (array of strings)
     */
    public function salesQuoteLineCustomFieldValueGETRequestQuoteIDHistorysQuoteHistoryIDLinesQuoteLineIDCustomFieldValuesSettingIDGetWithHttpInfo($accept, $quote_id, $quote_history_id, $quote_line_id, $setting_id, $jiwa_stateful = null)
    {
        $returnType = '\Jiwa\Model\CustomFieldValue';
        $request = $this->salesQuoteLineCustomFieldValueGETRequestQuoteIDHistorysQuoteHistoryIDLinesQuoteLineIDCustomFieldValuesSettingIDGetRequest($accept, $quote_id, $quote_history_id, $quote_line_id, $setting_id, $jiwa_stateful);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Jiwa\Model\CustomFieldValue',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 403:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Jiwa\Model\CustomFieldValue',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 401:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Jiwa\Model\CustomFieldValue',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 404:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Jiwa\Model\CustomFieldValue',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation salesQuoteLineCustomFieldValueGETRequestQuoteIDHistorysQuoteHistoryIDLinesQuoteLineIDCustomFieldValuesSettingIDGetAsync
     *
     * Retrieves a sales Quote line custom field value.
     *
     * @param  string $accept Accept Header (required)
     * @param  string $quote_id (required)
     * @param  string $quote_history_id (required)
     * @param  string $quote_line_id (required)
     * @param  string $setting_id (required)
     * @param  bool $jiwa_stateful Stateful indicator (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function salesQuoteLineCustomFieldValueGETRequestQuoteIDHistorysQuoteHistoryIDLinesQuoteLineIDCustomFieldValuesSettingIDGetAsync($accept, $quote_id, $quote_history_id, $quote_line_id, $setting_id, $jiwa_stateful = null)
    {
        return $this->salesQuoteLineCustomFieldValueGETRequestQuoteIDHistorysQuoteHistoryIDLinesQuoteLineIDCustomFieldValuesSettingIDGetAsyncWithHttpInfo($accept, $quote_id, $quote_history_id, $quote_line_id, $setting_id, $jiwa_stateful)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation salesQuoteLineCustomFieldValueGETRequestQuoteIDHistorysQuoteHistoryIDLinesQuoteLineIDCustomFieldValuesSettingIDGetAsyncWithHttpInfo
     *
     * Retrieves a sales Quote line custom field value.
     *
     * @param  string $accept Accept Header (required)
     * @param  string $quote_id (required)
     * @param  string $quote_history_id (required)
     * @param  string $quote_line_id (required)
     * @param  string $setting_id (required)
     * @param  bool $jiwa_stateful Stateful indicator (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function salesQuoteLineCustomFieldValueGETRequestQuoteIDHistorysQuoteHistoryIDLinesQuoteLineIDCustomFieldValuesSettingIDGetAsyncWithHttpInfo($accept, $quote_id, $quote_history_id, $quote_line_id, $setting_id, $jiwa_stateful = null)
    {
        $returnType = '\Jiwa\Model\CustomFieldValue';
        $request = $this->salesQuoteLineCustomFieldValueGETRequestQuoteIDHistorysQuoteHistoryIDLinesQuoteLineIDCustomFieldValuesSettingIDGetRequest($accept, $quote_id, $quote_history_id, $quote_line_id, $setting_id, $jiwa_stateful);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'salesQuoteLineCustomFieldValueGETRequestQuoteIDHistorysQuoteHistoryIDLinesQuoteLineIDCustomFieldValuesSettingIDGet'
     *
     * @param  string $accept Accept Header (required)
     * @param  string $quote_id (required)
     * @param  string $quote_history_id (required)
     * @param  string $quote_line_id (required)
     * @param  string $setting_id (required)
     * @param  bool $jiwa_stateful Stateful indicator (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function salesQuoteLineCustomFieldValueGETRequestQuoteIDHistorysQuoteHistoryIDLinesQuoteLineIDCustomFieldValuesSettingIDGetRequest($accept, $quote_id, $quote_history_id, $quote_line_id, $setting_id, $jiwa_stateful = null)
    {
        // verify the required parameter 'accept' is set
        if ($accept === null || (is_array($accept) && count($accept) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $accept when calling salesQuoteLineCustomFieldValueGETRequestQuoteIDHistorysQuoteHistoryIDLinesQuoteLineIDCustomFieldValuesSettingIDGet'
            );
        }
        // verify the required parameter 'quote_id' is set
        if ($quote_id === null || (is_array($quote_id) && count($quote_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $quote_id when calling salesQuoteLineCustomFieldValueGETRequestQuoteIDHistorysQuoteHistoryIDLinesQuoteLineIDCustomFieldValuesSettingIDGet'
            );
        }
        // verify the required parameter 'quote_history_id' is set
        if ($quote_history_id === null || (is_array($quote_history_id) && count($quote_history_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $quote_history_id when calling salesQuoteLineCustomFieldValueGETRequestQuoteIDHistorysQuoteHistoryIDLinesQuoteLineIDCustomFieldValuesSettingIDGet'
            );
        }
        // verify the required parameter 'quote_line_id' is set
        if ($quote_line_id === null || (is_array($quote_line_id) && count($quote_line_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $quote_line_id when calling salesQuoteLineCustomFieldValueGETRequestQuoteIDHistorysQuoteHistoryIDLinesQuoteLineIDCustomFieldValuesSettingIDGet'
            );
        }
        // verify the required parameter 'setting_id' is set
        if ($setting_id === null || (is_array($setting_id) && count($setting_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $setting_id when calling salesQuoteLineCustomFieldValueGETRequestQuoteIDHistorysQuoteHistoryIDLinesQuoteLineIDCustomFieldValuesSettingIDGet'
            );
        }

        $resourcePath = '/SalesQuotes/{QuoteID}/Historys/{QuoteHistoryID}/Lines/{QuoteLineID}/CustomFieldValues/{SettingID}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // header params
        if ($accept !== null) {
            $headerParams['Accept'] = ObjectSerializer::toHeaderValue($accept);
        }
        // header params
        if ($jiwa_stateful !== null) {
            $headerParams['jiwa-stateful'] = ObjectSerializer::toHeaderValue($jiwa_stateful);
        }

        // path params
        if ($quote_id !== null) {
            $resourcePath = str_replace(
                '{' . 'QuoteID' . '}',
                ObjectSerializer::toPathValue($quote_id),
                $resourcePath
            );
        }
        // path params
        if ($quote_history_id !== null) {
            $resourcePath = str_replace(
                '{' . 'QuoteHistoryID' . '}',
                ObjectSerializer::toPathValue($quote_history_id),
                $resourcePath
            );
        }
        // path params
        if ($quote_line_id !== null) {
            $resourcePath = str_replace(
                '{' . 'QuoteLineID' . '}',
                ObjectSerializer::toPathValue($quote_line_id),
                $resourcePath
            );
        }
        // path params
        if ($setting_id !== null) {
            $resourcePath = str_replace(
                '{' . 'SettingID' . '}',
                ObjectSerializer::toPathValue($setting_id),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json', 'application/xml']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json', 'application/xml'],
                ['application/x-www-form-urlencoded', 'application/json', 'application/xml']
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            
            if($headers['Content-Type'] === 'application/json') {
                // \stdClass has no __toString(), so we should encode it manually
                if ($httpBody instanceof \stdClass) {
                    $httpBody = \GuzzleHttp\json_encode($httpBody);
                }
                // array has no __toString(), so we should encode it manually
                if(is_array($httpBody)) {
                    $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($httpBody));
                }
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\Query::build($formParams);
            }
        }

        // this endpoint requires HTTP basic authentication
        if ($this->config->getUsername() !== null || $this->config->getPassword() !== null) {
            $headers['Authorization'] = 'Basic ' . base64_encode($this->config->getUsername() . ":" . $this->config->getPassword());
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\Query::build($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation salesQuoteLineCustomFieldValuePATCHRequestQuoteIDHistorysQuoteHistoryIDLinesQuoteLineIDCustomFieldValuesSettingIDUpdate
     *
     * Updates a sales Quote line custom field value.
     *
     * @param  string $accept Accept Header (required)
     * @param  string $quote_id quote_id (required)
     * @param  string $quote_history_id quote_history_id (required)
     * @param  string $quote_line_id quote_line_id (required)
     * @param  string $setting_id setting_id (required)
     * @param  bool $jiwa_stateful Stateful indicator (optional)
     * @param  string $contents contents (optional)
     * @param  \Jiwa\Model\SalesQuoteLineCustomFieldValuePATCHRequest $body body (optional)
     *
     * @throws \Jiwa\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Jiwa\Model\CustomFieldValue
     */
    public function salesQuoteLineCustomFieldValuePATCHRequestQuoteIDHistorysQuoteHistoryIDLinesQuoteLineIDCustomFieldValuesSettingIDUpdate($accept, $quote_id, $quote_history_id, $quote_line_id, $setting_id, $jiwa_stateful = null, $contents = null, $body = null)
    {
        list($response) = $this->salesQuoteLineCustomFieldValuePATCHRequestQuoteIDHistorysQuoteHistoryIDLinesQuoteLineIDCustomFieldValuesSettingIDUpdateWithHttpInfo($accept, $quote_id, $quote_history_id, $quote_line_id, $setting_id, $jiwa_stateful, $contents, $body);
        return $response;
    }

    /**
     * Operation salesQuoteLineCustomFieldValuePATCHRequestQuoteIDHistorysQuoteHistoryIDLinesQuoteLineIDCustomFieldValuesSettingIDUpdateWithHttpInfo
     *
     * Updates a sales Quote line custom field value.
     *
     * @param  string $accept Accept Header (required)
     * @param  string $quote_id (required)
     * @param  string $quote_history_id (required)
     * @param  string $quote_line_id (required)
     * @param  string $setting_id (required)
     * @param  bool $jiwa_stateful Stateful indicator (optional)
     * @param  string $contents (optional)
     * @param  \Jiwa\Model\SalesQuoteLineCustomFieldValuePATCHRequest $body (optional)
     *
     * @throws \Jiwa\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Jiwa\Model\CustomFieldValue, HTTP status code, HTTP response headers (array of strings)
     */
    public function salesQuoteLineCustomFieldValuePATCHRequestQuoteIDHistorysQuoteHistoryIDLinesQuoteLineIDCustomFieldValuesSettingIDUpdateWithHttpInfo($accept, $quote_id, $quote_history_id, $quote_line_id, $setting_id, $jiwa_stateful = null, $contents = null, $body = null)
    {
        $returnType = '\Jiwa\Model\CustomFieldValue';
        $request = $this->salesQuoteLineCustomFieldValuePATCHRequestQuoteIDHistorysQuoteHistoryIDLinesQuoteLineIDCustomFieldValuesSettingIDUpdateRequest($accept, $quote_id, $quote_history_id, $quote_line_id, $setting_id, $jiwa_stateful, $contents, $body);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Jiwa\Model\CustomFieldValue',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 404:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Jiwa\Model\CustomFieldValue',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 401:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Jiwa\Model\CustomFieldValue',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 403:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Jiwa\Model\CustomFieldValue',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation salesQuoteLineCustomFieldValuePATCHRequestQuoteIDHistorysQuoteHistoryIDLinesQuoteLineIDCustomFieldValuesSettingIDUpdateAsync
     *
     * Updates a sales Quote line custom field value.
     *
     * @param  string $accept Accept Header (required)
     * @param  string $quote_id (required)
     * @param  string $quote_history_id (required)
     * @param  string $quote_line_id (required)
     * @param  string $setting_id (required)
     * @param  bool $jiwa_stateful Stateful indicator (optional)
     * @param  string $contents (optional)
     * @param  \Jiwa\Model\SalesQuoteLineCustomFieldValuePATCHRequest $body (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function salesQuoteLineCustomFieldValuePATCHRequestQuoteIDHistorysQuoteHistoryIDLinesQuoteLineIDCustomFieldValuesSettingIDUpdateAsync($accept, $quote_id, $quote_history_id, $quote_line_id, $setting_id, $jiwa_stateful = null, $contents = null, $body = null)
    {
        return $this->salesQuoteLineCustomFieldValuePATCHRequestQuoteIDHistorysQuoteHistoryIDLinesQuoteLineIDCustomFieldValuesSettingIDUpdateAsyncWithHttpInfo($accept, $quote_id, $quote_history_id, $quote_line_id, $setting_id, $jiwa_stateful, $contents, $body)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation salesQuoteLineCustomFieldValuePATCHRequestQuoteIDHistorysQuoteHistoryIDLinesQuoteLineIDCustomFieldValuesSettingIDUpdateAsyncWithHttpInfo
     *
     * Updates a sales Quote line custom field value.
     *
     * @param  string $accept Accept Header (required)
     * @param  string $quote_id (required)
     * @param  string $quote_history_id (required)
     * @param  string $quote_line_id (required)
     * @param  string $setting_id (required)
     * @param  bool $jiwa_stateful Stateful indicator (optional)
     * @param  string $contents (optional)
     * @param  \Jiwa\Model\SalesQuoteLineCustomFieldValuePATCHRequest $body (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function salesQuoteLineCustomFieldValuePATCHRequestQuoteIDHistorysQuoteHistoryIDLinesQuoteLineIDCustomFieldValuesSettingIDUpdateAsyncWithHttpInfo($accept, $quote_id, $quote_history_id, $quote_line_id, $setting_id, $jiwa_stateful = null, $contents = null, $body = null)
    {
        $returnType = '\Jiwa\Model\CustomFieldValue';
        $request = $this->salesQuoteLineCustomFieldValuePATCHRequestQuoteIDHistorysQuoteHistoryIDLinesQuoteLineIDCustomFieldValuesSettingIDUpdateRequest($accept, $quote_id, $quote_history_id, $quote_line_id, $setting_id, $jiwa_stateful, $contents, $body);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'salesQuoteLineCustomFieldValuePATCHRequestQuoteIDHistorysQuoteHistoryIDLinesQuoteLineIDCustomFieldValuesSettingIDUpdate'
     *
     * @param  string $accept Accept Header (required)
     * @param  string $quote_id (required)
     * @param  string $quote_history_id (required)
     * @param  string $quote_line_id (required)
     * @param  string $setting_id (required)
     * @param  bool $jiwa_stateful Stateful indicator (optional)
     * @param  string $contents (optional)
     * @param  \Jiwa\Model\SalesQuoteLineCustomFieldValuePATCHRequest $body (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function salesQuoteLineCustomFieldValuePATCHRequestQuoteIDHistorysQuoteHistoryIDLinesQuoteLineIDCustomFieldValuesSettingIDUpdateRequest($accept, $quote_id, $quote_history_id, $quote_line_id, $setting_id, $jiwa_stateful = null, $contents = null, $body = null)
    {
        // verify the required parameter 'accept' is set
        if ($accept === null || (is_array($accept) && count($accept) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $accept when calling salesQuoteLineCustomFieldValuePATCHRequestQuoteIDHistorysQuoteHistoryIDLinesQuoteLineIDCustomFieldValuesSettingIDUpdate'
            );
        }
        // verify the required parameter 'quote_id' is set
        if ($quote_id === null || (is_array($quote_id) && count($quote_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $quote_id when calling salesQuoteLineCustomFieldValuePATCHRequestQuoteIDHistorysQuoteHistoryIDLinesQuoteLineIDCustomFieldValuesSettingIDUpdate'
            );
        }
        // verify the required parameter 'quote_history_id' is set
        if ($quote_history_id === null || (is_array($quote_history_id) && count($quote_history_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $quote_history_id when calling salesQuoteLineCustomFieldValuePATCHRequestQuoteIDHistorysQuoteHistoryIDLinesQuoteLineIDCustomFieldValuesSettingIDUpdate'
            );
        }
        // verify the required parameter 'quote_line_id' is set
        if ($quote_line_id === null || (is_array($quote_line_id) && count($quote_line_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $quote_line_id when calling salesQuoteLineCustomFieldValuePATCHRequestQuoteIDHistorysQuoteHistoryIDLinesQuoteLineIDCustomFieldValuesSettingIDUpdate'
            );
        }
        // verify the required parameter 'setting_id' is set
        if ($setting_id === null || (is_array($setting_id) && count($setting_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $setting_id when calling salesQuoteLineCustomFieldValuePATCHRequestQuoteIDHistorysQuoteHistoryIDLinesQuoteLineIDCustomFieldValuesSettingIDUpdate'
            );
        }

        $resourcePath = '/SalesQuotes/{QuoteID}/Historys/{QuoteHistoryID}/Lines/{QuoteLineID}/CustomFieldValues/{SettingID}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        if ($contents !== null) {
            $queryParams['Contents'] = ObjectSerializer::toQueryValue($contents);
        }
        // header params
        if ($accept !== null) {
            $headerParams['Accept'] = ObjectSerializer::toHeaderValue($accept);
        }
        // header params
        if ($jiwa_stateful !== null) {
            $headerParams['jiwa-stateful'] = ObjectSerializer::toHeaderValue($jiwa_stateful);
        }

        // path params
        if ($quote_id !== null) {
            $resourcePath = str_replace(
                '{' . 'QuoteID' . '}',
                ObjectSerializer::toPathValue($quote_id),
                $resourcePath
            );
        }
        // path params
        if ($quote_history_id !== null) {
            $resourcePath = str_replace(
                '{' . 'QuoteHistoryID' . '}',
                ObjectSerializer::toPathValue($quote_history_id),
                $resourcePath
            );
        }
        // path params
        if ($quote_line_id !== null) {
            $resourcePath = str_replace(
                '{' . 'QuoteLineID' . '}',
                ObjectSerializer::toPathValue($quote_line_id),
                $resourcePath
            );
        }
        // path params
        if ($setting_id !== null) {
            $resourcePath = str_replace(
                '{' . 'SettingID' . '}',
                ObjectSerializer::toPathValue($setting_id),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;
        if (isset($body)) {
            $_tempBody = $body;
        }

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json', 'application/xml']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json', 'application/xml'],
                ['application/x-www-form-urlencoded', 'application/json', 'application/xml']
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            
            if($headers['Content-Type'] === 'application/json') {
                // \stdClass has no __toString(), so we should encode it manually
                if ($httpBody instanceof \stdClass) {
                    $httpBody = \GuzzleHttp\json_encode($httpBody);
                }
                // array has no __toString(), so we should encode it manually
                if(is_array($httpBody)) {
                    $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($httpBody));
                }
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\Query::build($formParams);
            }
        }

        // this endpoint requires HTTP basic authentication
        if ($this->config->getUsername() !== null || $this->config->getPassword() !== null) {
            $headers['Authorization'] = 'Basic ' . base64_encode($this->config->getUsername() . ":" . $this->config->getPassword());
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\Query::build($queryParams);
        return new Request(
            'PATCH',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation salesQuoteLineCustomFieldValuesGETManyRequestQuoteIDHistorysQuoteHistoryIDLinesQuoteLineIDCustomFieldValuesGet
     *
     * Retrieves a list of custom field values for a sales Quote line.
     *
     * @param  string $accept Accept Header (required)
     * @param  string $quote_id quote_id (required)
     * @param  string $quote_history_id quote_history_id (required)
     * @param  string $quote_line_id quote_line_id (required)
     * @param  bool $jiwa_stateful Stateful indicator (optional)
     *
     * @throws \Jiwa\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Jiwa\Model\CustomFieldValue[]
     */
    public function salesQuoteLineCustomFieldValuesGETManyRequestQuoteIDHistorysQuoteHistoryIDLinesQuoteLineIDCustomFieldValuesGet($accept, $quote_id, $quote_history_id, $quote_line_id, $jiwa_stateful = null)
    {
        list($response) = $this->salesQuoteLineCustomFieldValuesGETManyRequestQuoteIDHistorysQuoteHistoryIDLinesQuoteLineIDCustomFieldValuesGetWithHttpInfo($accept, $quote_id, $quote_history_id, $quote_line_id, $jiwa_stateful);
        return $response;
    }

    /**
     * Operation salesQuoteLineCustomFieldValuesGETManyRequestQuoteIDHistorysQuoteHistoryIDLinesQuoteLineIDCustomFieldValuesGetWithHttpInfo
     *
     * Retrieves a list of custom field values for a sales Quote line.
     *
     * @param  string $accept Accept Header (required)
     * @param  string $quote_id (required)
     * @param  string $quote_history_id (required)
     * @param  string $quote_line_id (required)
     * @param  bool $jiwa_stateful Stateful indicator (optional)
     *
     * @throws \Jiwa\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Jiwa\Model\CustomFieldValue[], HTTP status code, HTTP response headers (array of strings)
     */
    public function salesQuoteLineCustomFieldValuesGETManyRequestQuoteIDHistorysQuoteHistoryIDLinesQuoteLineIDCustomFieldValuesGetWithHttpInfo($accept, $quote_id, $quote_history_id, $quote_line_id, $jiwa_stateful = null)
    {
        $returnType = '\Jiwa\Model\CustomFieldValue[]';
        $request = $this->salesQuoteLineCustomFieldValuesGETManyRequestQuoteIDHistorysQuoteHistoryIDLinesQuoteLineIDCustomFieldValuesGetRequest($accept, $quote_id, $quote_history_id, $quote_line_id, $jiwa_stateful);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Jiwa\Model\CustomFieldValue[]',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 403:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Jiwa\Model\CustomFieldValue[]',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 401:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Jiwa\Model\CustomFieldValue[]',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 404:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Jiwa\Model\CustomFieldValue[]',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation salesQuoteLineCustomFieldValuesGETManyRequestQuoteIDHistorysQuoteHistoryIDLinesQuoteLineIDCustomFieldValuesGetAsync
     *
     * Retrieves a list of custom field values for a sales Quote line.
     *
     * @param  string $accept Accept Header (required)
     * @param  string $quote_id (required)
     * @param  string $quote_history_id (required)
     * @param  string $quote_line_id (required)
     * @param  bool $jiwa_stateful Stateful indicator (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function salesQuoteLineCustomFieldValuesGETManyRequestQuoteIDHistorysQuoteHistoryIDLinesQuoteLineIDCustomFieldValuesGetAsync($accept, $quote_id, $quote_history_id, $quote_line_id, $jiwa_stateful = null)
    {
        return $this->salesQuoteLineCustomFieldValuesGETManyRequestQuoteIDHistorysQuoteHistoryIDLinesQuoteLineIDCustomFieldValuesGetAsyncWithHttpInfo($accept, $quote_id, $quote_history_id, $quote_line_id, $jiwa_stateful)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation salesQuoteLineCustomFieldValuesGETManyRequestQuoteIDHistorysQuoteHistoryIDLinesQuoteLineIDCustomFieldValuesGetAsyncWithHttpInfo
     *
     * Retrieves a list of custom field values for a sales Quote line.
     *
     * @param  string $accept Accept Header (required)
     * @param  string $quote_id (required)
     * @param  string $quote_history_id (required)
     * @param  string $quote_line_id (required)
     * @param  bool $jiwa_stateful Stateful indicator (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function salesQuoteLineCustomFieldValuesGETManyRequestQuoteIDHistorysQuoteHistoryIDLinesQuoteLineIDCustomFieldValuesGetAsyncWithHttpInfo($accept, $quote_id, $quote_history_id, $quote_line_id, $jiwa_stateful = null)
    {
        $returnType = '\Jiwa\Model\CustomFieldValue[]';
        $request = $this->salesQuoteLineCustomFieldValuesGETManyRequestQuoteIDHistorysQuoteHistoryIDLinesQuoteLineIDCustomFieldValuesGetRequest($accept, $quote_id, $quote_history_id, $quote_line_id, $jiwa_stateful);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'salesQuoteLineCustomFieldValuesGETManyRequestQuoteIDHistorysQuoteHistoryIDLinesQuoteLineIDCustomFieldValuesGet'
     *
     * @param  string $accept Accept Header (required)
     * @param  string $quote_id (required)
     * @param  string $quote_history_id (required)
     * @param  string $quote_line_id (required)
     * @param  bool $jiwa_stateful Stateful indicator (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function salesQuoteLineCustomFieldValuesGETManyRequestQuoteIDHistorysQuoteHistoryIDLinesQuoteLineIDCustomFieldValuesGetRequest($accept, $quote_id, $quote_history_id, $quote_line_id, $jiwa_stateful = null)
    {
        // verify the required parameter 'accept' is set
        if ($accept === null || (is_array($accept) && count($accept) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $accept when calling salesQuoteLineCustomFieldValuesGETManyRequestQuoteIDHistorysQuoteHistoryIDLinesQuoteLineIDCustomFieldValuesGet'
            );
        }
        // verify the required parameter 'quote_id' is set
        if ($quote_id === null || (is_array($quote_id) && count($quote_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $quote_id when calling salesQuoteLineCustomFieldValuesGETManyRequestQuoteIDHistorysQuoteHistoryIDLinesQuoteLineIDCustomFieldValuesGet'
            );
        }
        // verify the required parameter 'quote_history_id' is set
        if ($quote_history_id === null || (is_array($quote_history_id) && count($quote_history_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $quote_history_id when calling salesQuoteLineCustomFieldValuesGETManyRequestQuoteIDHistorysQuoteHistoryIDLinesQuoteLineIDCustomFieldValuesGet'
            );
        }
        // verify the required parameter 'quote_line_id' is set
        if ($quote_line_id === null || (is_array($quote_line_id) && count($quote_line_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $quote_line_id when calling salesQuoteLineCustomFieldValuesGETManyRequestQuoteIDHistorysQuoteHistoryIDLinesQuoteLineIDCustomFieldValuesGet'
            );
        }

        $resourcePath = '/SalesQuotes/{QuoteID}/Historys/{QuoteHistoryID}/Lines/{QuoteLineID}/CustomFieldValues';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // header params
        if ($accept !== null) {
            $headerParams['Accept'] = ObjectSerializer::toHeaderValue($accept);
        }
        // header params
        if ($jiwa_stateful !== null) {
            $headerParams['jiwa-stateful'] = ObjectSerializer::toHeaderValue($jiwa_stateful);
        }

        // path params
        if ($quote_id !== null) {
            $resourcePath = str_replace(
                '{' . 'QuoteID' . '}',
                ObjectSerializer::toPathValue($quote_id),
                $resourcePath
            );
        }
        // path params
        if ($quote_history_id !== null) {
            $resourcePath = str_replace(
                '{' . 'QuoteHistoryID' . '}',
                ObjectSerializer::toPathValue($quote_history_id),
                $resourcePath
            );
        }
        // path params
        if ($quote_line_id !== null) {
            $resourcePath = str_replace(
                '{' . 'QuoteLineID' . '}',
                ObjectSerializer::toPathValue($quote_line_id),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json', 'application/xml']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json', 'application/xml'],
                ['application/x-www-form-urlencoded', 'application/json', 'application/xml']
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            
            if($headers['Content-Type'] === 'application/json') {
                // \stdClass has no __toString(), so we should encode it manually
                if ($httpBody instanceof \stdClass) {
                    $httpBody = \GuzzleHttp\json_encode($httpBody);
                }
                // array has no __toString(), so we should encode it manually
                if(is_array($httpBody)) {
                    $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($httpBody));
                }
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\Query::build($formParams);
            }
        }

        // this endpoint requires HTTP basic authentication
        if ($this->config->getUsername() !== null || $this->config->getPassword() !== null) {
            $headers['Authorization'] = 'Basic ' . base64_encode($this->config->getUsername() . ":" . $this->config->getPassword());
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\Query::build($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation salesQuoteLineCustomFieldsGETManyRequestLinesCustomFieldsGet
     *
     * Retrieves a list of sales Quote line custom fields.
     *
     * @param  string $accept Accept Header (required)
     * @param  bool $jiwa_stateful Stateful indicator (optional)
     *
     * @throws \Jiwa\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Jiwa\Model\CustomField[]
     */
    public function salesQuoteLineCustomFieldsGETManyRequestLinesCustomFieldsGet($accept, $jiwa_stateful = null)
    {
        list($response) = $this->salesQuoteLineCustomFieldsGETManyRequestLinesCustomFieldsGetWithHttpInfo($accept, $jiwa_stateful);
        return $response;
    }

    /**
     * Operation salesQuoteLineCustomFieldsGETManyRequestLinesCustomFieldsGetWithHttpInfo
     *
     * Retrieves a list of sales Quote line custom fields.
     *
     * @param  string $accept Accept Header (required)
     * @param  bool $jiwa_stateful Stateful indicator (optional)
     *
     * @throws \Jiwa\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Jiwa\Model\CustomField[], HTTP status code, HTTP response headers (array of strings)
     */
    public function salesQuoteLineCustomFieldsGETManyRequestLinesCustomFieldsGetWithHttpInfo($accept, $jiwa_stateful = null)
    {
        $returnType = '\Jiwa\Model\CustomField[]';
        $request = $this->salesQuoteLineCustomFieldsGETManyRequestLinesCustomFieldsGetRequest($accept, $jiwa_stateful);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Jiwa\Model\CustomField[]',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 403:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Jiwa\Model\CustomField[]',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 401:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Jiwa\Model\CustomField[]',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation salesQuoteLineCustomFieldsGETManyRequestLinesCustomFieldsGetAsync
     *
     * Retrieves a list of sales Quote line custom fields.
     *
     * @param  string $accept Accept Header (required)
     * @param  bool $jiwa_stateful Stateful indicator (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function salesQuoteLineCustomFieldsGETManyRequestLinesCustomFieldsGetAsync($accept, $jiwa_stateful = null)
    {
        return $this->salesQuoteLineCustomFieldsGETManyRequestLinesCustomFieldsGetAsyncWithHttpInfo($accept, $jiwa_stateful)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation salesQuoteLineCustomFieldsGETManyRequestLinesCustomFieldsGetAsyncWithHttpInfo
     *
     * Retrieves a list of sales Quote line custom fields.
     *
     * @param  string $accept Accept Header (required)
     * @param  bool $jiwa_stateful Stateful indicator (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function salesQuoteLineCustomFieldsGETManyRequestLinesCustomFieldsGetAsyncWithHttpInfo($accept, $jiwa_stateful = null)
    {
        $returnType = '\Jiwa\Model\CustomField[]';
        $request = $this->salesQuoteLineCustomFieldsGETManyRequestLinesCustomFieldsGetRequest($accept, $jiwa_stateful);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'salesQuoteLineCustomFieldsGETManyRequestLinesCustomFieldsGet'
     *
     * @param  string $accept Accept Header (required)
     * @param  bool $jiwa_stateful Stateful indicator (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function salesQuoteLineCustomFieldsGETManyRequestLinesCustomFieldsGetRequest($accept, $jiwa_stateful = null)
    {
        // verify the required parameter 'accept' is set
        if ($accept === null || (is_array($accept) && count($accept) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $accept when calling salesQuoteLineCustomFieldsGETManyRequestLinesCustomFieldsGet'
            );
        }

        $resourcePath = '/SalesQuotes/Lines/CustomFields';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // header params
        if ($accept !== null) {
            $headerParams['Accept'] = ObjectSerializer::toHeaderValue($accept);
        }
        // header params
        if ($jiwa_stateful !== null) {
            $headerParams['jiwa-stateful'] = ObjectSerializer::toHeaderValue($jiwa_stateful);
        }


        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json', 'application/xml']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json', 'application/xml'],
                ['application/x-www-form-urlencoded', 'application/json', 'application/xml']
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            
            if($headers['Content-Type'] === 'application/json') {
                // \stdClass has no __toString(), so we should encode it manually
                if ($httpBody instanceof \stdClass) {
                    $httpBody = \GuzzleHttp\json_encode($httpBody);
                }
                // array has no __toString(), so we should encode it manually
                if(is_array($httpBody)) {
                    $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($httpBody));
                }
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\Query::build($formParams);
            }
        }

        // this endpoint requires HTTP basic authentication
        if ($this->config->getUsername() !== null || $this->config->getPassword() !== null) {
            $headers['Authorization'] = 'Basic ' . base64_encode($this->config->getUsername() . ":" . $this->config->getPassword());
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\Query::build($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation salesQuoteLineDELETERequestQuoteIDHistorysQuoteHistoryIDLinesQuoteLineIDDelete
     *
     * Deletes a sales Quote line.
     *
     * @param  string $accept Accept Header (required)
     * @param  string $quote_id quote_id (required)
     * @param  string $quote_history_id quote_history_id (required)
     * @param  string $quote_line_id quote_line_id (required)
     * @param  bool $jiwa_stateful Stateful indicator (optional)
     *
     * @throws \Jiwa\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Jiwa\Model\Object
     */
    public function salesQuoteLineDELETERequestQuoteIDHistorysQuoteHistoryIDLinesQuoteLineIDDelete($accept, $quote_id, $quote_history_id, $quote_line_id, $jiwa_stateful = null)
    {
        list($response) = $this->salesQuoteLineDELETERequestQuoteIDHistorysQuoteHistoryIDLinesQuoteLineIDDeleteWithHttpInfo($accept, $quote_id, $quote_history_id, $quote_line_id, $jiwa_stateful);
        return $response;
    }

    /**
     * Operation salesQuoteLineDELETERequestQuoteIDHistorysQuoteHistoryIDLinesQuoteLineIDDeleteWithHttpInfo
     *
     * Deletes a sales Quote line.
     *
     * @param  string $accept Accept Header (required)
     * @param  string $quote_id (required)
     * @param  string $quote_history_id (required)
     * @param  string $quote_line_id (required)
     * @param  bool $jiwa_stateful Stateful indicator (optional)
     *
     * @throws \Jiwa\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Jiwa\Model\Object, HTTP status code, HTTP response headers (array of strings)
     */
    public function salesQuoteLineDELETERequestQuoteIDHistorysQuoteHistoryIDLinesQuoteLineIDDeleteWithHttpInfo($accept, $quote_id, $quote_history_id, $quote_line_id, $jiwa_stateful = null)
    {
        $returnType = '\Jiwa\Model\Object';
        $request = $this->salesQuoteLineDELETERequestQuoteIDHistorysQuoteHistoryIDLinesQuoteLineIDDeleteRequest($accept, $quote_id, $quote_history_id, $quote_line_id, $jiwa_stateful);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Jiwa\Model\Object',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 403:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Jiwa\Model\Object',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 401:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Jiwa\Model\Object',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 404:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Jiwa\Model\Object',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 204:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Jiwa\Model\Object',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation salesQuoteLineDELETERequestQuoteIDHistorysQuoteHistoryIDLinesQuoteLineIDDeleteAsync
     *
     * Deletes a sales Quote line.
     *
     * @param  string $accept Accept Header (required)
     * @param  string $quote_id (required)
     * @param  string $quote_history_id (required)
     * @param  string $quote_line_id (required)
     * @param  bool $jiwa_stateful Stateful indicator (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function salesQuoteLineDELETERequestQuoteIDHistorysQuoteHistoryIDLinesQuoteLineIDDeleteAsync($accept, $quote_id, $quote_history_id, $quote_line_id, $jiwa_stateful = null)
    {
        return $this->salesQuoteLineDELETERequestQuoteIDHistorysQuoteHistoryIDLinesQuoteLineIDDeleteAsyncWithHttpInfo($accept, $quote_id, $quote_history_id, $quote_line_id, $jiwa_stateful)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation salesQuoteLineDELETERequestQuoteIDHistorysQuoteHistoryIDLinesQuoteLineIDDeleteAsyncWithHttpInfo
     *
     * Deletes a sales Quote line.
     *
     * @param  string $accept Accept Header (required)
     * @param  string $quote_id (required)
     * @param  string $quote_history_id (required)
     * @param  string $quote_line_id (required)
     * @param  bool $jiwa_stateful Stateful indicator (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function salesQuoteLineDELETERequestQuoteIDHistorysQuoteHistoryIDLinesQuoteLineIDDeleteAsyncWithHttpInfo($accept, $quote_id, $quote_history_id, $quote_line_id, $jiwa_stateful = null)
    {
        $returnType = '\Jiwa\Model\Object';
        $request = $this->salesQuoteLineDELETERequestQuoteIDHistorysQuoteHistoryIDLinesQuoteLineIDDeleteRequest($accept, $quote_id, $quote_history_id, $quote_line_id, $jiwa_stateful);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'salesQuoteLineDELETERequestQuoteIDHistorysQuoteHistoryIDLinesQuoteLineIDDelete'
     *
     * @param  string $accept Accept Header (required)
     * @param  string $quote_id (required)
     * @param  string $quote_history_id (required)
     * @param  string $quote_line_id (required)
     * @param  bool $jiwa_stateful Stateful indicator (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function salesQuoteLineDELETERequestQuoteIDHistorysQuoteHistoryIDLinesQuoteLineIDDeleteRequest($accept, $quote_id, $quote_history_id, $quote_line_id, $jiwa_stateful = null)
    {
        // verify the required parameter 'accept' is set
        if ($accept === null || (is_array($accept) && count($accept) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $accept when calling salesQuoteLineDELETERequestQuoteIDHistorysQuoteHistoryIDLinesQuoteLineIDDelete'
            );
        }
        // verify the required parameter 'quote_id' is set
        if ($quote_id === null || (is_array($quote_id) && count($quote_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $quote_id when calling salesQuoteLineDELETERequestQuoteIDHistorysQuoteHistoryIDLinesQuoteLineIDDelete'
            );
        }
        // verify the required parameter 'quote_history_id' is set
        if ($quote_history_id === null || (is_array($quote_history_id) && count($quote_history_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $quote_history_id when calling salesQuoteLineDELETERequestQuoteIDHistorysQuoteHistoryIDLinesQuoteLineIDDelete'
            );
        }
        // verify the required parameter 'quote_line_id' is set
        if ($quote_line_id === null || (is_array($quote_line_id) && count($quote_line_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $quote_line_id when calling salesQuoteLineDELETERequestQuoteIDHistorysQuoteHistoryIDLinesQuoteLineIDDelete'
            );
        }

        $resourcePath = '/SalesQuotes/{QuoteID}/Historys/{QuoteHistoryID}/Lines/{QuoteLineID}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // header params
        if ($accept !== null) {
            $headerParams['Accept'] = ObjectSerializer::toHeaderValue($accept);
        }
        // header params
        if ($jiwa_stateful !== null) {
            $headerParams['jiwa-stateful'] = ObjectSerializer::toHeaderValue($jiwa_stateful);
        }

        // path params
        if ($quote_id !== null) {
            $resourcePath = str_replace(
                '{' . 'QuoteID' . '}',
                ObjectSerializer::toPathValue($quote_id),
                $resourcePath
            );
        }
        // path params
        if ($quote_history_id !== null) {
            $resourcePath = str_replace(
                '{' . 'QuoteHistoryID' . '}',
                ObjectSerializer::toPathValue($quote_history_id),
                $resourcePath
            );
        }
        // path params
        if ($quote_line_id !== null) {
            $resourcePath = str_replace(
                '{' . 'QuoteLineID' . '}',
                ObjectSerializer::toPathValue($quote_line_id),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json', 'application/xml']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json', 'application/xml'],
                ['application/x-www-form-urlencoded', 'application/json', 'application/xml']
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            
            if($headers['Content-Type'] === 'application/json') {
                // \stdClass has no __toString(), so we should encode it manually
                if ($httpBody instanceof \stdClass) {
                    $httpBody = \GuzzleHttp\json_encode($httpBody);
                }
                // array has no __toString(), so we should encode it manually
                if(is_array($httpBody)) {
                    $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($httpBody));
                }
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\Query::build($formParams);
            }
        }

        // this endpoint requires HTTP basic authentication
        if ($this->config->getUsername() !== null || $this->config->getPassword() !== null) {
            $headers['Authorization'] = 'Basic ' . base64_encode($this->config->getUsername() . ":" . $this->config->getPassword());
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\Query::build($queryParams);
        return new Request(
            'DELETE',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation salesQuoteLineGETRequestQuoteIDHistorysQuoteHistoryIDLinesQuoteLineIDGet
     *
     * Retrieves a sales Quote line.
     *
     * @param  string $accept Accept Header (required)
     * @param  string $quote_id quote_id (required)
     * @param  string $quote_history_id quote_history_id (required)
     * @param  string $quote_line_id quote_line_id (required)
     * @param  bool $jiwa_stateful Stateful indicator (optional)
     *
     * @throws \Jiwa\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Jiwa\Model\SalesQuoteLine
     */
    public function salesQuoteLineGETRequestQuoteIDHistorysQuoteHistoryIDLinesQuoteLineIDGet($accept, $quote_id, $quote_history_id, $quote_line_id, $jiwa_stateful = null)
    {
        list($response) = $this->salesQuoteLineGETRequestQuoteIDHistorysQuoteHistoryIDLinesQuoteLineIDGetWithHttpInfo($accept, $quote_id, $quote_history_id, $quote_line_id, $jiwa_stateful);
        return $response;
    }

    /**
     * Operation salesQuoteLineGETRequestQuoteIDHistorysQuoteHistoryIDLinesQuoteLineIDGetWithHttpInfo
     *
     * Retrieves a sales Quote line.
     *
     * @param  string $accept Accept Header (required)
     * @param  string $quote_id (required)
     * @param  string $quote_history_id (required)
     * @param  string $quote_line_id (required)
     * @param  bool $jiwa_stateful Stateful indicator (optional)
     *
     * @throws \Jiwa\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Jiwa\Model\SalesQuoteLine, HTTP status code, HTTP response headers (array of strings)
     */
    public function salesQuoteLineGETRequestQuoteIDHistorysQuoteHistoryIDLinesQuoteLineIDGetWithHttpInfo($accept, $quote_id, $quote_history_id, $quote_line_id, $jiwa_stateful = null)
    {
        $returnType = '\Jiwa\Model\SalesQuoteLine';
        $request = $this->salesQuoteLineGETRequestQuoteIDHistorysQuoteHistoryIDLinesQuoteLineIDGetRequest($accept, $quote_id, $quote_history_id, $quote_line_id, $jiwa_stateful);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Jiwa\Model\SalesQuoteLine',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 401:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Jiwa\Model\SalesQuoteLine',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 403:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Jiwa\Model\SalesQuoteLine',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 404:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Jiwa\Model\SalesQuoteLine',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation salesQuoteLineGETRequestQuoteIDHistorysQuoteHistoryIDLinesQuoteLineIDGetAsync
     *
     * Retrieves a sales Quote line.
     *
     * @param  string $accept Accept Header (required)
     * @param  string $quote_id (required)
     * @param  string $quote_history_id (required)
     * @param  string $quote_line_id (required)
     * @param  bool $jiwa_stateful Stateful indicator (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function salesQuoteLineGETRequestQuoteIDHistorysQuoteHistoryIDLinesQuoteLineIDGetAsync($accept, $quote_id, $quote_history_id, $quote_line_id, $jiwa_stateful = null)
    {
        return $this->salesQuoteLineGETRequestQuoteIDHistorysQuoteHistoryIDLinesQuoteLineIDGetAsyncWithHttpInfo($accept, $quote_id, $quote_history_id, $quote_line_id, $jiwa_stateful)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation salesQuoteLineGETRequestQuoteIDHistorysQuoteHistoryIDLinesQuoteLineIDGetAsyncWithHttpInfo
     *
     * Retrieves a sales Quote line.
     *
     * @param  string $accept Accept Header (required)
     * @param  string $quote_id (required)
     * @param  string $quote_history_id (required)
     * @param  string $quote_line_id (required)
     * @param  bool $jiwa_stateful Stateful indicator (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function salesQuoteLineGETRequestQuoteIDHistorysQuoteHistoryIDLinesQuoteLineIDGetAsyncWithHttpInfo($accept, $quote_id, $quote_history_id, $quote_line_id, $jiwa_stateful = null)
    {
        $returnType = '\Jiwa\Model\SalesQuoteLine';
        $request = $this->salesQuoteLineGETRequestQuoteIDHistorysQuoteHistoryIDLinesQuoteLineIDGetRequest($accept, $quote_id, $quote_history_id, $quote_line_id, $jiwa_stateful);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'salesQuoteLineGETRequestQuoteIDHistorysQuoteHistoryIDLinesQuoteLineIDGet'
     *
     * @param  string $accept Accept Header (required)
     * @param  string $quote_id (required)
     * @param  string $quote_history_id (required)
     * @param  string $quote_line_id (required)
     * @param  bool $jiwa_stateful Stateful indicator (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function salesQuoteLineGETRequestQuoteIDHistorysQuoteHistoryIDLinesQuoteLineIDGetRequest($accept, $quote_id, $quote_history_id, $quote_line_id, $jiwa_stateful = null)
    {
        // verify the required parameter 'accept' is set
        if ($accept === null || (is_array($accept) && count($accept) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $accept when calling salesQuoteLineGETRequestQuoteIDHistorysQuoteHistoryIDLinesQuoteLineIDGet'
            );
        }
        // verify the required parameter 'quote_id' is set
        if ($quote_id === null || (is_array($quote_id) && count($quote_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $quote_id when calling salesQuoteLineGETRequestQuoteIDHistorysQuoteHistoryIDLinesQuoteLineIDGet'
            );
        }
        // verify the required parameter 'quote_history_id' is set
        if ($quote_history_id === null || (is_array($quote_history_id) && count($quote_history_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $quote_history_id when calling salesQuoteLineGETRequestQuoteIDHistorysQuoteHistoryIDLinesQuoteLineIDGet'
            );
        }
        // verify the required parameter 'quote_line_id' is set
        if ($quote_line_id === null || (is_array($quote_line_id) && count($quote_line_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $quote_line_id when calling salesQuoteLineGETRequestQuoteIDHistorysQuoteHistoryIDLinesQuoteLineIDGet'
            );
        }

        $resourcePath = '/SalesQuotes/{QuoteID}/Historys/{QuoteHistoryID}/Lines/{QuoteLineID}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // header params
        if ($accept !== null) {
            $headerParams['Accept'] = ObjectSerializer::toHeaderValue($accept);
        }
        // header params
        if ($jiwa_stateful !== null) {
            $headerParams['jiwa-stateful'] = ObjectSerializer::toHeaderValue($jiwa_stateful);
        }

        // path params
        if ($quote_id !== null) {
            $resourcePath = str_replace(
                '{' . 'QuoteID' . '}',
                ObjectSerializer::toPathValue($quote_id),
                $resourcePath
            );
        }
        // path params
        if ($quote_history_id !== null) {
            $resourcePath = str_replace(
                '{' . 'QuoteHistoryID' . '}',
                ObjectSerializer::toPathValue($quote_history_id),
                $resourcePath
            );
        }
        // path params
        if ($quote_line_id !== null) {
            $resourcePath = str_replace(
                '{' . 'QuoteLineID' . '}',
                ObjectSerializer::toPathValue($quote_line_id),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json', 'application/xml']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json', 'application/xml'],
                ['application/x-www-form-urlencoded', 'application/json', 'application/xml']
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            
            if($headers['Content-Type'] === 'application/json') {
                // \stdClass has no __toString(), so we should encode it manually
                if ($httpBody instanceof \stdClass) {
                    $httpBody = \GuzzleHttp\json_encode($httpBody);
                }
                // array has no __toString(), so we should encode it manually
                if(is_array($httpBody)) {
                    $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($httpBody));
                }
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\Query::build($formParams);
            }
        }

        // this endpoint requires HTTP basic authentication
        if ($this->config->getUsername() !== null || $this->config->getPassword() !== null) {
            $headers['Authorization'] = 'Basic ' . base64_encode($this->config->getUsername() . ":" . $this->config->getPassword());
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\Query::build($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation salesQuoteLinePATCHRequestQuoteIDHistorysQuoteHistoryIDLinesQuoteLineIDUpdate
     *
     * Updates a sales Quote line.
     *
     * @param  string $accept Accept Header (required)
     * @param  string $quote_id quote_id (required)
     * @param  string $quote_history_id quote_history_id (required)
     * @param  string $quote_line_id quote_line_id (required)
     * @param  bool $jiwa_stateful Stateful indicator (optional)
     * @param  int $item_no item_no (optional)
     * @param  string $inventory_id inventory_id (optional)
     * @param  string $part_no part_no (optional)
     * @param  string $description description (optional)
     * @param  bool $comment_line comment_line (optional)
     * @param  string $comment_text comment_text (optional)
     * @param  double $quantity_ordered quantity_ordered (optional)
     * @param  double $price_ex_gst price_ex_gst (optional)
     * @param  double $price_inc_gst price_inc_gst (optional)
     * @param  double $discounted_price discounted_price (optional)
     * @param  double $tax_to_charge tax_to_charge (optional)
     * @param  double $tax_rate tax_rate (optional)
     * @param  double $unit_cost unit_cost (optional)
     * @param  string $line_link_id line_link_id (optional)
     * @param  bool $fix_sell_price fix_sell_price (optional)
     * @param  double $user_defined_float1 user_defined_float1 (optional)
     * @param  double $user_defined_float2 user_defined_float2 (optional)
     * @param  double $user_defined_float3 user_defined_float3 (optional)
     * @param  double $line_total line_total (optional)
     * @param  double $weight weight (optional)
     * @param  double $cubic cubic (optional)
     * @param  double $discounted_percentage discounted_percentage (optional)
     * @param  double $discount_given discount_given (optional)
     * @param  double $quantity_decimal_places quantity_decimal_places (optional)
     * @param  double $quantity_original_ordered quantity_original_ordered (optional)
     * @param  bool $non_inventory non_inventory (optional)
     * @param  string $custom_field_values custom_field_values (optional)
     * @param  string $kit_line_type kit_line_type (optional)
     * @param  double $kit_units kit_units (optional)
     * @param  string $kit_header_line_id kit_header_line_id (optional)
     * @param  \Jiwa\Model\SalesQuoteLinePATCHRequest $body body (optional)
     *
     * @throws \Jiwa\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Jiwa\Model\SalesQuoteLine
     */
    public function salesQuoteLinePATCHRequestQuoteIDHistorysQuoteHistoryIDLinesQuoteLineIDUpdate($accept, $quote_id, $quote_history_id, $quote_line_id, $jiwa_stateful = null, $item_no = null, $inventory_id = null, $part_no = null, $description = null, $comment_line = null, $comment_text = null, $quantity_ordered = null, $price_ex_gst = null, $price_inc_gst = null, $discounted_price = null, $tax_to_charge = null, $tax_rate = null, $unit_cost = null, $line_link_id = null, $fix_sell_price = null, $user_defined_float1 = null, $user_defined_float2 = null, $user_defined_float3 = null, $line_total = null, $weight = null, $cubic = null, $discounted_percentage = null, $discount_given = null, $quantity_decimal_places = null, $quantity_original_ordered = null, $non_inventory = null, $custom_field_values = null, $kit_line_type = null, $kit_units = null, $kit_header_line_id = null, $body = null)
    {
        list($response) = $this->salesQuoteLinePATCHRequestQuoteIDHistorysQuoteHistoryIDLinesQuoteLineIDUpdateWithHttpInfo($accept, $quote_id, $quote_history_id, $quote_line_id, $jiwa_stateful, $item_no, $inventory_id, $part_no, $description, $comment_line, $comment_text, $quantity_ordered, $price_ex_gst, $price_inc_gst, $discounted_price, $tax_to_charge, $tax_rate, $unit_cost, $line_link_id, $fix_sell_price, $user_defined_float1, $user_defined_float2, $user_defined_float3, $line_total, $weight, $cubic, $discounted_percentage, $discount_given, $quantity_decimal_places, $quantity_original_ordered, $non_inventory, $custom_field_values, $kit_line_type, $kit_units, $kit_header_line_id, $body);
        return $response;
    }

    /**
     * Operation salesQuoteLinePATCHRequestQuoteIDHistorysQuoteHistoryIDLinesQuoteLineIDUpdateWithHttpInfo
     *
     * Updates a sales Quote line.
     *
     * @param  string $accept Accept Header (required)
     * @param  string $quote_id (required)
     * @param  string $quote_history_id (required)
     * @param  string $quote_line_id (required)
     * @param  bool $jiwa_stateful Stateful indicator (optional)
     * @param  int $item_no (optional)
     * @param  string $inventory_id (optional)
     * @param  string $part_no (optional)
     * @param  string $description (optional)
     * @param  bool $comment_line (optional)
     * @param  string $comment_text (optional)
     * @param  double $quantity_ordered (optional)
     * @param  double $price_ex_gst (optional)
     * @param  double $price_inc_gst (optional)
     * @param  double $discounted_price (optional)
     * @param  double $tax_to_charge (optional)
     * @param  double $tax_rate (optional)
     * @param  double $unit_cost (optional)
     * @param  string $line_link_id (optional)
     * @param  bool $fix_sell_price (optional)
     * @param  double $user_defined_float1 (optional)
     * @param  double $user_defined_float2 (optional)
     * @param  double $user_defined_float3 (optional)
     * @param  double $line_total (optional)
     * @param  double $weight (optional)
     * @param  double $cubic (optional)
     * @param  double $discounted_percentage (optional)
     * @param  double $discount_given (optional)
     * @param  double $quantity_decimal_places (optional)
     * @param  double $quantity_original_ordered (optional)
     * @param  bool $non_inventory (optional)
     * @param  string $custom_field_values (optional)
     * @param  string $kit_line_type (optional)
     * @param  double $kit_units (optional)
     * @param  string $kit_header_line_id (optional)
     * @param  \Jiwa\Model\SalesQuoteLinePATCHRequest $body (optional)
     *
     * @throws \Jiwa\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Jiwa\Model\SalesQuoteLine, HTTP status code, HTTP response headers (array of strings)
     */
    public function salesQuoteLinePATCHRequestQuoteIDHistorysQuoteHistoryIDLinesQuoteLineIDUpdateWithHttpInfo($accept, $quote_id, $quote_history_id, $quote_line_id, $jiwa_stateful = null, $item_no = null, $inventory_id = null, $part_no = null, $description = null, $comment_line = null, $comment_text = null, $quantity_ordered = null, $price_ex_gst = null, $price_inc_gst = null, $discounted_price = null, $tax_to_charge = null, $tax_rate = null, $unit_cost = null, $line_link_id = null, $fix_sell_price = null, $user_defined_float1 = null, $user_defined_float2 = null, $user_defined_float3 = null, $line_total = null, $weight = null, $cubic = null, $discounted_percentage = null, $discount_given = null, $quantity_decimal_places = null, $quantity_original_ordered = null, $non_inventory = null, $custom_field_values = null, $kit_line_type = null, $kit_units = null, $kit_header_line_id = null, $body = null)
    {
        $returnType = '\Jiwa\Model\SalesQuoteLine';
        $request = $this->salesQuoteLinePATCHRequestQuoteIDHistorysQuoteHistoryIDLinesQuoteLineIDUpdateRequest($accept, $quote_id, $quote_history_id, $quote_line_id, $jiwa_stateful, $item_no, $inventory_id, $part_no, $description, $comment_line, $comment_text, $quantity_ordered, $price_ex_gst, $price_inc_gst, $discounted_price, $tax_to_charge, $tax_rate, $unit_cost, $line_link_id, $fix_sell_price, $user_defined_float1, $user_defined_float2, $user_defined_float3, $line_total, $weight, $cubic, $discounted_percentage, $discount_given, $quantity_decimal_places, $quantity_original_ordered, $non_inventory, $custom_field_values, $kit_line_type, $kit_units, $kit_header_line_id, $body);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Jiwa\Model\SalesQuoteLine',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 403:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Jiwa\Model\SalesQuoteLine',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 404:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Jiwa\Model\SalesQuoteLine',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 401:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Jiwa\Model\SalesQuoteLine',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation salesQuoteLinePATCHRequestQuoteIDHistorysQuoteHistoryIDLinesQuoteLineIDUpdateAsync
     *
     * Updates a sales Quote line.
     *
     * @param  string $accept Accept Header (required)
     * @param  string $quote_id (required)
     * @param  string $quote_history_id (required)
     * @param  string $quote_line_id (required)
     * @param  bool $jiwa_stateful Stateful indicator (optional)
     * @param  int $item_no (optional)
     * @param  string $inventory_id (optional)
     * @param  string $part_no (optional)
     * @param  string $description (optional)
     * @param  bool $comment_line (optional)
     * @param  string $comment_text (optional)
     * @param  double $quantity_ordered (optional)
     * @param  double $price_ex_gst (optional)
     * @param  double $price_inc_gst (optional)
     * @param  double $discounted_price (optional)
     * @param  double $tax_to_charge (optional)
     * @param  double $tax_rate (optional)
     * @param  double $unit_cost (optional)
     * @param  string $line_link_id (optional)
     * @param  bool $fix_sell_price (optional)
     * @param  double $user_defined_float1 (optional)
     * @param  double $user_defined_float2 (optional)
     * @param  double $user_defined_float3 (optional)
     * @param  double $line_total (optional)
     * @param  double $weight (optional)
     * @param  double $cubic (optional)
     * @param  double $discounted_percentage (optional)
     * @param  double $discount_given (optional)
     * @param  double $quantity_decimal_places (optional)
     * @param  double $quantity_original_ordered (optional)
     * @param  bool $non_inventory (optional)
     * @param  string $custom_field_values (optional)
     * @param  string $kit_line_type (optional)
     * @param  double $kit_units (optional)
     * @param  string $kit_header_line_id (optional)
     * @param  \Jiwa\Model\SalesQuoteLinePATCHRequest $body (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function salesQuoteLinePATCHRequestQuoteIDHistorysQuoteHistoryIDLinesQuoteLineIDUpdateAsync($accept, $quote_id, $quote_history_id, $quote_line_id, $jiwa_stateful = null, $item_no = null, $inventory_id = null, $part_no = null, $description = null, $comment_line = null, $comment_text = null, $quantity_ordered = null, $price_ex_gst = null, $price_inc_gst = null, $discounted_price = null, $tax_to_charge = null, $tax_rate = null, $unit_cost = null, $line_link_id = null, $fix_sell_price = null, $user_defined_float1 = null, $user_defined_float2 = null, $user_defined_float3 = null, $line_total = null, $weight = null, $cubic = null, $discounted_percentage = null, $discount_given = null, $quantity_decimal_places = null, $quantity_original_ordered = null, $non_inventory = null, $custom_field_values = null, $kit_line_type = null, $kit_units = null, $kit_header_line_id = null, $body = null)
    {
        return $this->salesQuoteLinePATCHRequestQuoteIDHistorysQuoteHistoryIDLinesQuoteLineIDUpdateAsyncWithHttpInfo($accept, $quote_id, $quote_history_id, $quote_line_id, $jiwa_stateful, $item_no, $inventory_id, $part_no, $description, $comment_line, $comment_text, $quantity_ordered, $price_ex_gst, $price_inc_gst, $discounted_price, $tax_to_charge, $tax_rate, $unit_cost, $line_link_id, $fix_sell_price, $user_defined_float1, $user_defined_float2, $user_defined_float3, $line_total, $weight, $cubic, $discounted_percentage, $discount_given, $quantity_decimal_places, $quantity_original_ordered, $non_inventory, $custom_field_values, $kit_line_type, $kit_units, $kit_header_line_id, $body)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation salesQuoteLinePATCHRequestQuoteIDHistorysQuoteHistoryIDLinesQuoteLineIDUpdateAsyncWithHttpInfo
     *
     * Updates a sales Quote line.
     *
     * @param  string $accept Accept Header (required)
     * @param  string $quote_id (required)
     * @param  string $quote_history_id (required)
     * @param  string $quote_line_id (required)
     * @param  bool $jiwa_stateful Stateful indicator (optional)
     * @param  int $item_no (optional)
     * @param  string $inventory_id (optional)
     * @param  string $part_no (optional)
     * @param  string $description (optional)
     * @param  bool $comment_line (optional)
     * @param  string $comment_text (optional)
     * @param  double $quantity_ordered (optional)
     * @param  double $price_ex_gst (optional)
     * @param  double $price_inc_gst (optional)
     * @param  double $discounted_price (optional)
     * @param  double $tax_to_charge (optional)
     * @param  double $tax_rate (optional)
     * @param  double $unit_cost (optional)
     * @param  string $line_link_id (optional)
     * @param  bool $fix_sell_price (optional)
     * @param  double $user_defined_float1 (optional)
     * @param  double $user_defined_float2 (optional)
     * @param  double $user_defined_float3 (optional)
     * @param  double $line_total (optional)
     * @param  double $weight (optional)
     * @param  double $cubic (optional)
     * @param  double $discounted_percentage (optional)
     * @param  double $discount_given (optional)
     * @param  double $quantity_decimal_places (optional)
     * @param  double $quantity_original_ordered (optional)
     * @param  bool $non_inventory (optional)
     * @param  string $custom_field_values (optional)
     * @param  string $kit_line_type (optional)
     * @param  double $kit_units (optional)
     * @param  string $kit_header_line_id (optional)
     * @param  \Jiwa\Model\SalesQuoteLinePATCHRequest $body (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function salesQuoteLinePATCHRequestQuoteIDHistorysQuoteHistoryIDLinesQuoteLineIDUpdateAsyncWithHttpInfo($accept, $quote_id, $quote_history_id, $quote_line_id, $jiwa_stateful = null, $item_no = null, $inventory_id = null, $part_no = null, $description = null, $comment_line = null, $comment_text = null, $quantity_ordered = null, $price_ex_gst = null, $price_inc_gst = null, $discounted_price = null, $tax_to_charge = null, $tax_rate = null, $unit_cost = null, $line_link_id = null, $fix_sell_price = null, $user_defined_float1 = null, $user_defined_float2 = null, $user_defined_float3 = null, $line_total = null, $weight = null, $cubic = null, $discounted_percentage = null, $discount_given = null, $quantity_decimal_places = null, $quantity_original_ordered = null, $non_inventory = null, $custom_field_values = null, $kit_line_type = null, $kit_units = null, $kit_header_line_id = null, $body = null)
    {
        $returnType = '\Jiwa\Model\SalesQuoteLine';
        $request = $this->salesQuoteLinePATCHRequestQuoteIDHistorysQuoteHistoryIDLinesQuoteLineIDUpdateRequest($accept, $quote_id, $quote_history_id, $quote_line_id, $jiwa_stateful, $item_no, $inventory_id, $part_no, $description, $comment_line, $comment_text, $quantity_ordered, $price_ex_gst, $price_inc_gst, $discounted_price, $tax_to_charge, $tax_rate, $unit_cost, $line_link_id, $fix_sell_price, $user_defined_float1, $user_defined_float2, $user_defined_float3, $line_total, $weight, $cubic, $discounted_percentage, $discount_given, $quantity_decimal_places, $quantity_original_ordered, $non_inventory, $custom_field_values, $kit_line_type, $kit_units, $kit_header_line_id, $body);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'salesQuoteLinePATCHRequestQuoteIDHistorysQuoteHistoryIDLinesQuoteLineIDUpdate'
     *
     * @param  string $accept Accept Header (required)
     * @param  string $quote_id (required)
     * @param  string $quote_history_id (required)
     * @param  string $quote_line_id (required)
     * @param  bool $jiwa_stateful Stateful indicator (optional)
     * @param  int $item_no (optional)
     * @param  string $inventory_id (optional)
     * @param  string $part_no (optional)
     * @param  string $description (optional)
     * @param  bool $comment_line (optional)
     * @param  string $comment_text (optional)
     * @param  double $quantity_ordered (optional)
     * @param  double $price_ex_gst (optional)
     * @param  double $price_inc_gst (optional)
     * @param  double $discounted_price (optional)
     * @param  double $tax_to_charge (optional)
     * @param  double $tax_rate (optional)
     * @param  double $unit_cost (optional)
     * @param  string $line_link_id (optional)
     * @param  bool $fix_sell_price (optional)
     * @param  double $user_defined_float1 (optional)
     * @param  double $user_defined_float2 (optional)
     * @param  double $user_defined_float3 (optional)
     * @param  double $line_total (optional)
     * @param  double $weight (optional)
     * @param  double $cubic (optional)
     * @param  double $discounted_percentage (optional)
     * @param  double $discount_given (optional)
     * @param  double $quantity_decimal_places (optional)
     * @param  double $quantity_original_ordered (optional)
     * @param  bool $non_inventory (optional)
     * @param  string $custom_field_values (optional)
     * @param  string $kit_line_type (optional)
     * @param  double $kit_units (optional)
     * @param  string $kit_header_line_id (optional)
     * @param  \Jiwa\Model\SalesQuoteLinePATCHRequest $body (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function salesQuoteLinePATCHRequestQuoteIDHistorysQuoteHistoryIDLinesQuoteLineIDUpdateRequest($accept, $quote_id, $quote_history_id, $quote_line_id, $jiwa_stateful = null, $item_no = null, $inventory_id = null, $part_no = null, $description = null, $comment_line = null, $comment_text = null, $quantity_ordered = null, $price_ex_gst = null, $price_inc_gst = null, $discounted_price = null, $tax_to_charge = null, $tax_rate = null, $unit_cost = null, $line_link_id = null, $fix_sell_price = null, $user_defined_float1 = null, $user_defined_float2 = null, $user_defined_float3 = null, $line_total = null, $weight = null, $cubic = null, $discounted_percentage = null, $discount_given = null, $quantity_decimal_places = null, $quantity_original_ordered = null, $non_inventory = null, $custom_field_values = null, $kit_line_type = null, $kit_units = null, $kit_header_line_id = null, $body = null)
    {
        // verify the required parameter 'accept' is set
        if ($accept === null || (is_array($accept) && count($accept) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $accept when calling salesQuoteLinePATCHRequestQuoteIDHistorysQuoteHistoryIDLinesQuoteLineIDUpdate'
            );
        }
        // verify the required parameter 'quote_id' is set
        if ($quote_id === null || (is_array($quote_id) && count($quote_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $quote_id when calling salesQuoteLinePATCHRequestQuoteIDHistorysQuoteHistoryIDLinesQuoteLineIDUpdate'
            );
        }
        // verify the required parameter 'quote_history_id' is set
        if ($quote_history_id === null || (is_array($quote_history_id) && count($quote_history_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $quote_history_id when calling salesQuoteLinePATCHRequestQuoteIDHistorysQuoteHistoryIDLinesQuoteLineIDUpdate'
            );
        }
        // verify the required parameter 'quote_line_id' is set
        if ($quote_line_id === null || (is_array($quote_line_id) && count($quote_line_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $quote_line_id when calling salesQuoteLinePATCHRequestQuoteIDHistorysQuoteHistoryIDLinesQuoteLineIDUpdate'
            );
        }

        $resourcePath = '/SalesQuotes/{QuoteID}/Historys/{QuoteHistoryID}/Lines/{QuoteLineID}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        if ($item_no !== null) {
            $queryParams['ItemNo'] = ObjectSerializer::toQueryValue($item_no);
        }
        // query params
        if ($inventory_id !== null) {
            $queryParams['InventoryID'] = ObjectSerializer::toQueryValue($inventory_id);
        }
        // query params
        if ($part_no !== null) {
            $queryParams['PartNo'] = ObjectSerializer::toQueryValue($part_no);
        }
        // query params
        if ($description !== null) {
            $queryParams['Description'] = ObjectSerializer::toQueryValue($description);
        }
        // query params
        if ($comment_line !== null) {
            $queryParams['CommentLine'] = ObjectSerializer::toQueryValue($comment_line);
        }
        // query params
        if ($comment_text !== null) {
            $queryParams['CommentText'] = ObjectSerializer::toQueryValue($comment_text);
        }
        // query params
        if ($quantity_ordered !== null) {
            $queryParams['QuantityOrdered'] = ObjectSerializer::toQueryValue($quantity_ordered);
        }
        // query params
        if ($price_ex_gst !== null) {
            $queryParams['PriceExGst'] = ObjectSerializer::toQueryValue($price_ex_gst);
        }
        // query params
        if ($price_inc_gst !== null) {
            $queryParams['PriceIncGst'] = ObjectSerializer::toQueryValue($price_inc_gst);
        }
        // query params
        if ($discounted_price !== null) {
            $queryParams['DiscountedPrice'] = ObjectSerializer::toQueryValue($discounted_price);
        }
        // query params
        if ($tax_to_charge !== null) {
            $queryParams['TaxToCharge'] = ObjectSerializer::toQueryValue($tax_to_charge);
        }
        // query params
        if ($tax_rate !== null) {
            $queryParams['TaxRate'] = ObjectSerializer::toQueryValue($tax_rate);
        }
        // query params
        if ($unit_cost !== null) {
            $queryParams['UnitCost'] = ObjectSerializer::toQueryValue($unit_cost);
        }
        // query params
        if ($line_link_id !== null) {
            $queryParams['LineLinkID'] = ObjectSerializer::toQueryValue($line_link_id);
        }
        // query params
        if ($fix_sell_price !== null) {
            $queryParams['FixSellPrice'] = ObjectSerializer::toQueryValue($fix_sell_price);
        }
        // query params
        if ($user_defined_float1 !== null) {
            $queryParams['UserDefinedFloat1'] = ObjectSerializer::toQueryValue($user_defined_float1);
        }
        // query params
        if ($user_defined_float2 !== null) {
            $queryParams['UserDefinedFloat2'] = ObjectSerializer::toQueryValue($user_defined_float2);
        }
        // query params
        if ($user_defined_float3 !== null) {
            $queryParams['UserDefinedFloat3'] = ObjectSerializer::toQueryValue($user_defined_float3);
        }
        // query params
        if ($line_total !== null) {
            $queryParams['LineTotal'] = ObjectSerializer::toQueryValue($line_total);
        }
        // query params
        if ($weight !== null) {
            $queryParams['Weight'] = ObjectSerializer::toQueryValue($weight);
        }
        // query params
        if ($cubic !== null) {
            $queryParams['Cubic'] = ObjectSerializer::toQueryValue($cubic);
        }
        // query params
        if ($discounted_percentage !== null) {
            $queryParams['DiscountedPercentage'] = ObjectSerializer::toQueryValue($discounted_percentage);
        }
        // query params
        if ($discount_given !== null) {
            $queryParams['DiscountGiven'] = ObjectSerializer::toQueryValue($discount_given);
        }
        // query params
        if ($quantity_decimal_places !== null) {
            $queryParams['QuantityDecimalPlaces'] = ObjectSerializer::toQueryValue($quantity_decimal_places);
        }
        // query params
        if ($quantity_original_ordered !== null) {
            $queryParams['QuantityOriginalOrdered'] = ObjectSerializer::toQueryValue($quantity_original_ordered);
        }
        // query params
        if ($non_inventory !== null) {
            $queryParams['NonInventory'] = ObjectSerializer::toQueryValue($non_inventory);
        }
        // query params
        if ($custom_field_values !== null) {
            $queryParams['CustomFieldValues'] = ObjectSerializer::toQueryValue($custom_field_values);
        }
        // query params
        if ($kit_line_type !== null) {
            $queryParams['KitLineType'] = ObjectSerializer::toQueryValue($kit_line_type);
        }
        // query params
        if ($kit_units !== null) {
            $queryParams['KitUnits'] = ObjectSerializer::toQueryValue($kit_units);
        }
        // query params
        if ($kit_header_line_id !== null) {
            $queryParams['KitHeaderLineID'] = ObjectSerializer::toQueryValue($kit_header_line_id);
        }
        // header params
        if ($accept !== null) {
            $headerParams['Accept'] = ObjectSerializer::toHeaderValue($accept);
        }
        // header params
        if ($jiwa_stateful !== null) {
            $headerParams['jiwa-stateful'] = ObjectSerializer::toHeaderValue($jiwa_stateful);
        }

        // path params
        if ($quote_id !== null) {
            $resourcePath = str_replace(
                '{' . 'QuoteID' . '}',
                ObjectSerializer::toPathValue($quote_id),
                $resourcePath
            );
        }
        // path params
        if ($quote_history_id !== null) {
            $resourcePath = str_replace(
                '{' . 'QuoteHistoryID' . '}',
                ObjectSerializer::toPathValue($quote_history_id),
                $resourcePath
            );
        }
        // path params
        if ($quote_line_id !== null) {
            $resourcePath = str_replace(
                '{' . 'QuoteLineID' . '}',
                ObjectSerializer::toPathValue($quote_line_id),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;
        if (isset($body)) {
            $_tempBody = $body;
        }

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json', 'application/xml']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json', 'application/xml'],
                ['application/x-www-form-urlencoded', 'application/json', 'application/xml']
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            
            if($headers['Content-Type'] === 'application/json') {
                // \stdClass has no __toString(), so we should encode it manually
                if ($httpBody instanceof \stdClass) {
                    $httpBody = \GuzzleHttp\json_encode($httpBody);
                }
                // array has no __toString(), so we should encode it manually
                if(is_array($httpBody)) {
                    $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($httpBody));
                }
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\Query::build($formParams);
            }
        }

        // this endpoint requires HTTP basic authentication
        if ($this->config->getUsername() !== null || $this->config->getPassword() !== null) {
            $headers['Authorization'] = 'Basic ' . base64_encode($this->config->getUsername() . ":" . $this->config->getPassword());
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\Query::build($queryParams);
        return new Request(
            'PATCH',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation salesQuoteLinePOSTRequestQuoteIDHistorysQuoteHistoryIDLinesPost
     *
     * Appends a line to a sales Quote.
     *
     * @param  string $accept Accept Header (required)
     * @param  string $quote_id quote_id (required)
     * @param  string $quote_history_id quote_history_id (required)
     * @param  bool $jiwa_stateful Stateful indicator (optional)
     * @param  int $item_no item_no (optional)
     * @param  string $inventory_id inventory_id (optional)
     * @param  string $part_no part_no (optional)
     * @param  string $description description (optional)
     * @param  bool $comment_line comment_line (optional)
     * @param  string $comment_text comment_text (optional)
     * @param  double $quantity_ordered quantity_ordered (optional)
     * @param  double $price_ex_gst price_ex_gst (optional)
     * @param  double $price_inc_gst price_inc_gst (optional)
     * @param  double $discounted_price discounted_price (optional)
     * @param  double $tax_to_charge tax_to_charge (optional)
     * @param  double $tax_rate tax_rate (optional)
     * @param  double $unit_cost unit_cost (optional)
     * @param  string $line_link_id line_link_id (optional)
     * @param  bool $fix_sell_price fix_sell_price (optional)
     * @param  double $user_defined_float1 user_defined_float1 (optional)
     * @param  double $user_defined_float2 user_defined_float2 (optional)
     * @param  double $user_defined_float3 user_defined_float3 (optional)
     * @param  double $line_total line_total (optional)
     * @param  double $weight weight (optional)
     * @param  double $cubic cubic (optional)
     * @param  double $discounted_percentage discounted_percentage (optional)
     * @param  double $discount_given discount_given (optional)
     * @param  double $quantity_decimal_places quantity_decimal_places (optional)
     * @param  double $quantity_original_ordered quantity_original_ordered (optional)
     * @param  bool $non_inventory non_inventory (optional)
     * @param  string $custom_field_values custom_field_values (optional)
     * @param  string $kit_line_type kit_line_type (optional)
     * @param  double $kit_units kit_units (optional)
     * @param  string $kit_header_line_id kit_header_line_id (optional)
     * @param  \Jiwa\Model\SalesQuoteLinePOSTRequest $body body (optional)
     *
     * @throws \Jiwa\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Jiwa\Model\SalesQuoteLine
     */
    public function salesQuoteLinePOSTRequestQuoteIDHistorysQuoteHistoryIDLinesPost($accept, $quote_id, $quote_history_id, $jiwa_stateful = null, $item_no = null, $inventory_id = null, $part_no = null, $description = null, $comment_line = null, $comment_text = null, $quantity_ordered = null, $price_ex_gst = null, $price_inc_gst = null, $discounted_price = null, $tax_to_charge = null, $tax_rate = null, $unit_cost = null, $line_link_id = null, $fix_sell_price = null, $user_defined_float1 = null, $user_defined_float2 = null, $user_defined_float3 = null, $line_total = null, $weight = null, $cubic = null, $discounted_percentage = null, $discount_given = null, $quantity_decimal_places = null, $quantity_original_ordered = null, $non_inventory = null, $custom_field_values = null, $kit_line_type = null, $kit_units = null, $kit_header_line_id = null, $body = null)
    {
        list($response) = $this->salesQuoteLinePOSTRequestQuoteIDHistorysQuoteHistoryIDLinesPostWithHttpInfo($accept, $quote_id, $quote_history_id, $jiwa_stateful, $item_no, $inventory_id, $part_no, $description, $comment_line, $comment_text, $quantity_ordered, $price_ex_gst, $price_inc_gst, $discounted_price, $tax_to_charge, $tax_rate, $unit_cost, $line_link_id, $fix_sell_price, $user_defined_float1, $user_defined_float2, $user_defined_float3, $line_total, $weight, $cubic, $discounted_percentage, $discount_given, $quantity_decimal_places, $quantity_original_ordered, $non_inventory, $custom_field_values, $kit_line_type, $kit_units, $kit_header_line_id, $body);
        return $response;
    }

    /**
     * Operation salesQuoteLinePOSTRequestQuoteIDHistorysQuoteHistoryIDLinesPostWithHttpInfo
     *
     * Appends a line to a sales Quote.
     *
     * @param  string $accept Accept Header (required)
     * @param  string $quote_id (required)
     * @param  string $quote_history_id (required)
     * @param  bool $jiwa_stateful Stateful indicator (optional)
     * @param  int $item_no (optional)
     * @param  string $inventory_id (optional)
     * @param  string $part_no (optional)
     * @param  string $description (optional)
     * @param  bool $comment_line (optional)
     * @param  string $comment_text (optional)
     * @param  double $quantity_ordered (optional)
     * @param  double $price_ex_gst (optional)
     * @param  double $price_inc_gst (optional)
     * @param  double $discounted_price (optional)
     * @param  double $tax_to_charge (optional)
     * @param  double $tax_rate (optional)
     * @param  double $unit_cost (optional)
     * @param  string $line_link_id (optional)
     * @param  bool $fix_sell_price (optional)
     * @param  double $user_defined_float1 (optional)
     * @param  double $user_defined_float2 (optional)
     * @param  double $user_defined_float3 (optional)
     * @param  double $line_total (optional)
     * @param  double $weight (optional)
     * @param  double $cubic (optional)
     * @param  double $discounted_percentage (optional)
     * @param  double $discount_given (optional)
     * @param  double $quantity_decimal_places (optional)
     * @param  double $quantity_original_ordered (optional)
     * @param  bool $non_inventory (optional)
     * @param  string $custom_field_values (optional)
     * @param  string $kit_line_type (optional)
     * @param  double $kit_units (optional)
     * @param  string $kit_header_line_id (optional)
     * @param  \Jiwa\Model\SalesQuoteLinePOSTRequest $body (optional)
     *
     * @throws \Jiwa\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Jiwa\Model\SalesQuoteLine, HTTP status code, HTTP response headers (array of strings)
     */
    public function salesQuoteLinePOSTRequestQuoteIDHistorysQuoteHistoryIDLinesPostWithHttpInfo($accept, $quote_id, $quote_history_id, $jiwa_stateful = null, $item_no = null, $inventory_id = null, $part_no = null, $description = null, $comment_line = null, $comment_text = null, $quantity_ordered = null, $price_ex_gst = null, $price_inc_gst = null, $discounted_price = null, $tax_to_charge = null, $tax_rate = null, $unit_cost = null, $line_link_id = null, $fix_sell_price = null, $user_defined_float1 = null, $user_defined_float2 = null, $user_defined_float3 = null, $line_total = null, $weight = null, $cubic = null, $discounted_percentage = null, $discount_given = null, $quantity_decimal_places = null, $quantity_original_ordered = null, $non_inventory = null, $custom_field_values = null, $kit_line_type = null, $kit_units = null, $kit_header_line_id = null, $body = null)
    {
        $returnType = '\Jiwa\Model\SalesQuoteLine';
        $request = $this->salesQuoteLinePOSTRequestQuoteIDHistorysQuoteHistoryIDLinesPostRequest($accept, $quote_id, $quote_history_id, $jiwa_stateful, $item_no, $inventory_id, $part_no, $description, $comment_line, $comment_text, $quantity_ordered, $price_ex_gst, $price_inc_gst, $discounted_price, $tax_to_charge, $tax_rate, $unit_cost, $line_link_id, $fix_sell_price, $user_defined_float1, $user_defined_float2, $user_defined_float3, $line_total, $weight, $cubic, $discounted_percentage, $discount_given, $quantity_decimal_places, $quantity_original_ordered, $non_inventory, $custom_field_values, $kit_line_type, $kit_units, $kit_header_line_id, $body);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Jiwa\Model\SalesQuoteLine',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 403:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Jiwa\Model\SalesQuoteLine',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 404:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Jiwa\Model\SalesQuoteLine',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 201:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Jiwa\Model\SalesQuoteLine',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 401:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Jiwa\Model\SalesQuoteLine',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation salesQuoteLinePOSTRequestQuoteIDHistorysQuoteHistoryIDLinesPostAsync
     *
     * Appends a line to a sales Quote.
     *
     * @param  string $accept Accept Header (required)
     * @param  string $quote_id (required)
     * @param  string $quote_history_id (required)
     * @param  bool $jiwa_stateful Stateful indicator (optional)
     * @param  int $item_no (optional)
     * @param  string $inventory_id (optional)
     * @param  string $part_no (optional)
     * @param  string $description (optional)
     * @param  bool $comment_line (optional)
     * @param  string $comment_text (optional)
     * @param  double $quantity_ordered (optional)
     * @param  double $price_ex_gst (optional)
     * @param  double $price_inc_gst (optional)
     * @param  double $discounted_price (optional)
     * @param  double $tax_to_charge (optional)
     * @param  double $tax_rate (optional)
     * @param  double $unit_cost (optional)
     * @param  string $line_link_id (optional)
     * @param  bool $fix_sell_price (optional)
     * @param  double $user_defined_float1 (optional)
     * @param  double $user_defined_float2 (optional)
     * @param  double $user_defined_float3 (optional)
     * @param  double $line_total (optional)
     * @param  double $weight (optional)
     * @param  double $cubic (optional)
     * @param  double $discounted_percentage (optional)
     * @param  double $discount_given (optional)
     * @param  double $quantity_decimal_places (optional)
     * @param  double $quantity_original_ordered (optional)
     * @param  bool $non_inventory (optional)
     * @param  string $custom_field_values (optional)
     * @param  string $kit_line_type (optional)
     * @param  double $kit_units (optional)
     * @param  string $kit_header_line_id (optional)
     * @param  \Jiwa\Model\SalesQuoteLinePOSTRequest $body (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function salesQuoteLinePOSTRequestQuoteIDHistorysQuoteHistoryIDLinesPostAsync($accept, $quote_id, $quote_history_id, $jiwa_stateful = null, $item_no = null, $inventory_id = null, $part_no = null, $description = null, $comment_line = null, $comment_text = null, $quantity_ordered = null, $price_ex_gst = null, $price_inc_gst = null, $discounted_price = null, $tax_to_charge = null, $tax_rate = null, $unit_cost = null, $line_link_id = null, $fix_sell_price = null, $user_defined_float1 = null, $user_defined_float2 = null, $user_defined_float3 = null, $line_total = null, $weight = null, $cubic = null, $discounted_percentage = null, $discount_given = null, $quantity_decimal_places = null, $quantity_original_ordered = null, $non_inventory = null, $custom_field_values = null, $kit_line_type = null, $kit_units = null, $kit_header_line_id = null, $body = null)
    {
        return $this->salesQuoteLinePOSTRequestQuoteIDHistorysQuoteHistoryIDLinesPostAsyncWithHttpInfo($accept, $quote_id, $quote_history_id, $jiwa_stateful, $item_no, $inventory_id, $part_no, $description, $comment_line, $comment_text, $quantity_ordered, $price_ex_gst, $price_inc_gst, $discounted_price, $tax_to_charge, $tax_rate, $unit_cost, $line_link_id, $fix_sell_price, $user_defined_float1, $user_defined_float2, $user_defined_float3, $line_total, $weight, $cubic, $discounted_percentage, $discount_given, $quantity_decimal_places, $quantity_original_ordered, $non_inventory, $custom_field_values, $kit_line_type, $kit_units, $kit_header_line_id, $body)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation salesQuoteLinePOSTRequestQuoteIDHistorysQuoteHistoryIDLinesPostAsyncWithHttpInfo
     *
     * Appends a line to a sales Quote.
     *
     * @param  string $accept Accept Header (required)
     * @param  string $quote_id (required)
     * @param  string $quote_history_id (required)
     * @param  bool $jiwa_stateful Stateful indicator (optional)
     * @param  int $item_no (optional)
     * @param  string $inventory_id (optional)
     * @param  string $part_no (optional)
     * @param  string $description (optional)
     * @param  bool $comment_line (optional)
     * @param  string $comment_text (optional)
     * @param  double $quantity_ordered (optional)
     * @param  double $price_ex_gst (optional)
     * @param  double $price_inc_gst (optional)
     * @param  double $discounted_price (optional)
     * @param  double $tax_to_charge (optional)
     * @param  double $tax_rate (optional)
     * @param  double $unit_cost (optional)
     * @param  string $line_link_id (optional)
     * @param  bool $fix_sell_price (optional)
     * @param  double $user_defined_float1 (optional)
     * @param  double $user_defined_float2 (optional)
     * @param  double $user_defined_float3 (optional)
     * @param  double $line_total (optional)
     * @param  double $weight (optional)
     * @param  double $cubic (optional)
     * @param  double $discounted_percentage (optional)
     * @param  double $discount_given (optional)
     * @param  double $quantity_decimal_places (optional)
     * @param  double $quantity_original_ordered (optional)
     * @param  bool $non_inventory (optional)
     * @param  string $custom_field_values (optional)
     * @param  string $kit_line_type (optional)
     * @param  double $kit_units (optional)
     * @param  string $kit_header_line_id (optional)
     * @param  \Jiwa\Model\SalesQuoteLinePOSTRequest $body (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function salesQuoteLinePOSTRequestQuoteIDHistorysQuoteHistoryIDLinesPostAsyncWithHttpInfo($accept, $quote_id, $quote_history_id, $jiwa_stateful = null, $item_no = null, $inventory_id = null, $part_no = null, $description = null, $comment_line = null, $comment_text = null, $quantity_ordered = null, $price_ex_gst = null, $price_inc_gst = null, $discounted_price = null, $tax_to_charge = null, $tax_rate = null, $unit_cost = null, $line_link_id = null, $fix_sell_price = null, $user_defined_float1 = null, $user_defined_float2 = null, $user_defined_float3 = null, $line_total = null, $weight = null, $cubic = null, $discounted_percentage = null, $discount_given = null, $quantity_decimal_places = null, $quantity_original_ordered = null, $non_inventory = null, $custom_field_values = null, $kit_line_type = null, $kit_units = null, $kit_header_line_id = null, $body = null)
    {
        $returnType = '\Jiwa\Model\SalesQuoteLine';
        $request = $this->salesQuoteLinePOSTRequestQuoteIDHistorysQuoteHistoryIDLinesPostRequest($accept, $quote_id, $quote_history_id, $jiwa_stateful, $item_no, $inventory_id, $part_no, $description, $comment_line, $comment_text, $quantity_ordered, $price_ex_gst, $price_inc_gst, $discounted_price, $tax_to_charge, $tax_rate, $unit_cost, $line_link_id, $fix_sell_price, $user_defined_float1, $user_defined_float2, $user_defined_float3, $line_total, $weight, $cubic, $discounted_percentage, $discount_given, $quantity_decimal_places, $quantity_original_ordered, $non_inventory, $custom_field_values, $kit_line_type, $kit_units, $kit_header_line_id, $body);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'salesQuoteLinePOSTRequestQuoteIDHistorysQuoteHistoryIDLinesPost'
     *
     * @param  string $accept Accept Header (required)
     * @param  string $quote_id (required)
     * @param  string $quote_history_id (required)
     * @param  bool $jiwa_stateful Stateful indicator (optional)
     * @param  int $item_no (optional)
     * @param  string $inventory_id (optional)
     * @param  string $part_no (optional)
     * @param  string $description (optional)
     * @param  bool $comment_line (optional)
     * @param  string $comment_text (optional)
     * @param  double $quantity_ordered (optional)
     * @param  double $price_ex_gst (optional)
     * @param  double $price_inc_gst (optional)
     * @param  double $discounted_price (optional)
     * @param  double $tax_to_charge (optional)
     * @param  double $tax_rate (optional)
     * @param  double $unit_cost (optional)
     * @param  string $line_link_id (optional)
     * @param  bool $fix_sell_price (optional)
     * @param  double $user_defined_float1 (optional)
     * @param  double $user_defined_float2 (optional)
     * @param  double $user_defined_float3 (optional)
     * @param  double $line_total (optional)
     * @param  double $weight (optional)
     * @param  double $cubic (optional)
     * @param  double $discounted_percentage (optional)
     * @param  double $discount_given (optional)
     * @param  double $quantity_decimal_places (optional)
     * @param  double $quantity_original_ordered (optional)
     * @param  bool $non_inventory (optional)
     * @param  string $custom_field_values (optional)
     * @param  string $kit_line_type (optional)
     * @param  double $kit_units (optional)
     * @param  string $kit_header_line_id (optional)
     * @param  \Jiwa\Model\SalesQuoteLinePOSTRequest $body (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function salesQuoteLinePOSTRequestQuoteIDHistorysQuoteHistoryIDLinesPostRequest($accept, $quote_id, $quote_history_id, $jiwa_stateful = null, $item_no = null, $inventory_id = null, $part_no = null, $description = null, $comment_line = null, $comment_text = null, $quantity_ordered = null, $price_ex_gst = null, $price_inc_gst = null, $discounted_price = null, $tax_to_charge = null, $tax_rate = null, $unit_cost = null, $line_link_id = null, $fix_sell_price = null, $user_defined_float1 = null, $user_defined_float2 = null, $user_defined_float3 = null, $line_total = null, $weight = null, $cubic = null, $discounted_percentage = null, $discount_given = null, $quantity_decimal_places = null, $quantity_original_ordered = null, $non_inventory = null, $custom_field_values = null, $kit_line_type = null, $kit_units = null, $kit_header_line_id = null, $body = null)
    {
        // verify the required parameter 'accept' is set
        if ($accept === null || (is_array($accept) && count($accept) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $accept when calling salesQuoteLinePOSTRequestQuoteIDHistorysQuoteHistoryIDLinesPost'
            );
        }
        // verify the required parameter 'quote_id' is set
        if ($quote_id === null || (is_array($quote_id) && count($quote_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $quote_id when calling salesQuoteLinePOSTRequestQuoteIDHistorysQuoteHistoryIDLinesPost'
            );
        }
        // verify the required parameter 'quote_history_id' is set
        if ($quote_history_id === null || (is_array($quote_history_id) && count($quote_history_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $quote_history_id when calling salesQuoteLinePOSTRequestQuoteIDHistorysQuoteHistoryIDLinesPost'
            );
        }

        $resourcePath = '/SalesQuotes/{QuoteID}/Historys/{QuoteHistoryID}/Lines';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        if ($item_no !== null) {
            $queryParams['ItemNo'] = ObjectSerializer::toQueryValue($item_no);
        }
        // query params
        if ($inventory_id !== null) {
            $queryParams['InventoryID'] = ObjectSerializer::toQueryValue($inventory_id);
        }
        // query params
        if ($part_no !== null) {
            $queryParams['PartNo'] = ObjectSerializer::toQueryValue($part_no);
        }
        // query params
        if ($description !== null) {
            $queryParams['Description'] = ObjectSerializer::toQueryValue($description);
        }
        // query params
        if ($comment_line !== null) {
            $queryParams['CommentLine'] = ObjectSerializer::toQueryValue($comment_line);
        }
        // query params
        if ($comment_text !== null) {
            $queryParams['CommentText'] = ObjectSerializer::toQueryValue($comment_text);
        }
        // query params
        if ($quantity_ordered !== null) {
            $queryParams['QuantityOrdered'] = ObjectSerializer::toQueryValue($quantity_ordered);
        }
        // query params
        if ($price_ex_gst !== null) {
            $queryParams['PriceExGst'] = ObjectSerializer::toQueryValue($price_ex_gst);
        }
        // query params
        if ($price_inc_gst !== null) {
            $queryParams['PriceIncGst'] = ObjectSerializer::toQueryValue($price_inc_gst);
        }
        // query params
        if ($discounted_price !== null) {
            $queryParams['DiscountedPrice'] = ObjectSerializer::toQueryValue($discounted_price);
        }
        // query params
        if ($tax_to_charge !== null) {
            $queryParams['TaxToCharge'] = ObjectSerializer::toQueryValue($tax_to_charge);
        }
        // query params
        if ($tax_rate !== null) {
            $queryParams['TaxRate'] = ObjectSerializer::toQueryValue($tax_rate);
        }
        // query params
        if ($unit_cost !== null) {
            $queryParams['UnitCost'] = ObjectSerializer::toQueryValue($unit_cost);
        }
        // query params
        if ($line_link_id !== null) {
            $queryParams['LineLinkID'] = ObjectSerializer::toQueryValue($line_link_id);
        }
        // query params
        if ($fix_sell_price !== null) {
            $queryParams['FixSellPrice'] = ObjectSerializer::toQueryValue($fix_sell_price);
        }
        // query params
        if ($user_defined_float1 !== null) {
            $queryParams['UserDefinedFloat1'] = ObjectSerializer::toQueryValue($user_defined_float1);
        }
        // query params
        if ($user_defined_float2 !== null) {
            $queryParams['UserDefinedFloat2'] = ObjectSerializer::toQueryValue($user_defined_float2);
        }
        // query params
        if ($user_defined_float3 !== null) {
            $queryParams['UserDefinedFloat3'] = ObjectSerializer::toQueryValue($user_defined_float3);
        }
        // query params
        if ($line_total !== null) {
            $queryParams['LineTotal'] = ObjectSerializer::toQueryValue($line_total);
        }
        // query params
        if ($weight !== null) {
            $queryParams['Weight'] = ObjectSerializer::toQueryValue($weight);
        }
        // query params
        if ($cubic !== null) {
            $queryParams['Cubic'] = ObjectSerializer::toQueryValue($cubic);
        }
        // query params
        if ($discounted_percentage !== null) {
            $queryParams['DiscountedPercentage'] = ObjectSerializer::toQueryValue($discounted_percentage);
        }
        // query params
        if ($discount_given !== null) {
            $queryParams['DiscountGiven'] = ObjectSerializer::toQueryValue($discount_given);
        }
        // query params
        if ($quantity_decimal_places !== null) {
            $queryParams['QuantityDecimalPlaces'] = ObjectSerializer::toQueryValue($quantity_decimal_places);
        }
        // query params
        if ($quantity_original_ordered !== null) {
            $queryParams['QuantityOriginalOrdered'] = ObjectSerializer::toQueryValue($quantity_original_ordered);
        }
        // query params
        if ($non_inventory !== null) {
            $queryParams['NonInventory'] = ObjectSerializer::toQueryValue($non_inventory);
        }
        // query params
        if ($custom_field_values !== null) {
            $queryParams['CustomFieldValues'] = ObjectSerializer::toQueryValue($custom_field_values);
        }
        // query params
        if ($kit_line_type !== null) {
            $queryParams['KitLineType'] = ObjectSerializer::toQueryValue($kit_line_type);
        }
        // query params
        if ($kit_units !== null) {
            $queryParams['KitUnits'] = ObjectSerializer::toQueryValue($kit_units);
        }
        // query params
        if ($kit_header_line_id !== null) {
            $queryParams['KitHeaderLineID'] = ObjectSerializer::toQueryValue($kit_header_line_id);
        }
        // header params
        if ($accept !== null) {
            $headerParams['Accept'] = ObjectSerializer::toHeaderValue($accept);
        }
        // header params
        if ($jiwa_stateful !== null) {
            $headerParams['jiwa-stateful'] = ObjectSerializer::toHeaderValue($jiwa_stateful);
        }

        // path params
        if ($quote_id !== null) {
            $resourcePath = str_replace(
                '{' . 'QuoteID' . '}',
                ObjectSerializer::toPathValue($quote_id),
                $resourcePath
            );
        }
        // path params
        if ($quote_history_id !== null) {
            $resourcePath = str_replace(
                '{' . 'QuoteHistoryID' . '}',
                ObjectSerializer::toPathValue($quote_history_id),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;
        if (isset($body)) {
            $_tempBody = $body;
        }

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json', 'application/xml']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json', 'application/xml'],
                ['application/x-www-form-urlencoded', 'application/json', 'application/xml']
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            
            if($headers['Content-Type'] === 'application/json') {
                // \stdClass has no __toString(), so we should encode it manually
                if ($httpBody instanceof \stdClass) {
                    $httpBody = \GuzzleHttp\json_encode($httpBody);
                }
                // array has no __toString(), so we should encode it manually
                if(is_array($httpBody)) {
                    $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($httpBody));
                }
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\Query::build($formParams);
            }
        }

        // this endpoint requires HTTP basic authentication
        if ($this->config->getUsername() !== null || $this->config->getPassword() !== null) {
            $headers['Authorization'] = 'Basic ' . base64_encode($this->config->getUsername() . ":" . $this->config->getPassword());
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\Query::build($queryParams);
        return new Request(
            'POST',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation salesQuoteLinesGETManyRequestQuoteIDHistorysQuoteHistoryIDLinesGet
     *
     * Retrieves a list of sales Quote lines.
     *
     * @param  string $accept Accept Header (required)
     * @param  string $quote_id quote_id (required)
     * @param  string $quote_history_id quote_history_id (required)
     * @param  bool $jiwa_stateful Stateful indicator (optional)
     *
     * @throws \Jiwa\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Jiwa\Model\SalesQuoteLine[]
     */
    public function salesQuoteLinesGETManyRequestQuoteIDHistorysQuoteHistoryIDLinesGet($accept, $quote_id, $quote_history_id, $jiwa_stateful = null)
    {
        list($response) = $this->salesQuoteLinesGETManyRequestQuoteIDHistorysQuoteHistoryIDLinesGetWithHttpInfo($accept, $quote_id, $quote_history_id, $jiwa_stateful);
        return $response;
    }

    /**
     * Operation salesQuoteLinesGETManyRequestQuoteIDHistorysQuoteHistoryIDLinesGetWithHttpInfo
     *
     * Retrieves a list of sales Quote lines.
     *
     * @param  string $accept Accept Header (required)
     * @param  string $quote_id (required)
     * @param  string $quote_history_id (required)
     * @param  bool $jiwa_stateful Stateful indicator (optional)
     *
     * @throws \Jiwa\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Jiwa\Model\SalesQuoteLine[], HTTP status code, HTTP response headers (array of strings)
     */
    public function salesQuoteLinesGETManyRequestQuoteIDHistorysQuoteHistoryIDLinesGetWithHttpInfo($accept, $quote_id, $quote_history_id, $jiwa_stateful = null)
    {
        $returnType = '\Jiwa\Model\SalesQuoteLine[]';
        $request = $this->salesQuoteLinesGETManyRequestQuoteIDHistorysQuoteHistoryIDLinesGetRequest($accept, $quote_id, $quote_history_id, $jiwa_stateful);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Jiwa\Model\SalesQuoteLine[]',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 401:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Jiwa\Model\SalesQuoteLine[]',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 403:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Jiwa\Model\SalesQuoteLine[]',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 404:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Jiwa\Model\SalesQuoteLine[]',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation salesQuoteLinesGETManyRequestQuoteIDHistorysQuoteHistoryIDLinesGetAsync
     *
     * Retrieves a list of sales Quote lines.
     *
     * @param  string $accept Accept Header (required)
     * @param  string $quote_id (required)
     * @param  string $quote_history_id (required)
     * @param  bool $jiwa_stateful Stateful indicator (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function salesQuoteLinesGETManyRequestQuoteIDHistorysQuoteHistoryIDLinesGetAsync($accept, $quote_id, $quote_history_id, $jiwa_stateful = null)
    {
        return $this->salesQuoteLinesGETManyRequestQuoteIDHistorysQuoteHistoryIDLinesGetAsyncWithHttpInfo($accept, $quote_id, $quote_history_id, $jiwa_stateful)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation salesQuoteLinesGETManyRequestQuoteIDHistorysQuoteHistoryIDLinesGetAsyncWithHttpInfo
     *
     * Retrieves a list of sales Quote lines.
     *
     * @param  string $accept Accept Header (required)
     * @param  string $quote_id (required)
     * @param  string $quote_history_id (required)
     * @param  bool $jiwa_stateful Stateful indicator (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function salesQuoteLinesGETManyRequestQuoteIDHistorysQuoteHistoryIDLinesGetAsyncWithHttpInfo($accept, $quote_id, $quote_history_id, $jiwa_stateful = null)
    {
        $returnType = '\Jiwa\Model\SalesQuoteLine[]';
        $request = $this->salesQuoteLinesGETManyRequestQuoteIDHistorysQuoteHistoryIDLinesGetRequest($accept, $quote_id, $quote_history_id, $jiwa_stateful);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'salesQuoteLinesGETManyRequestQuoteIDHistorysQuoteHistoryIDLinesGet'
     *
     * @param  string $accept Accept Header (required)
     * @param  string $quote_id (required)
     * @param  string $quote_history_id (required)
     * @param  bool $jiwa_stateful Stateful indicator (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function salesQuoteLinesGETManyRequestQuoteIDHistorysQuoteHistoryIDLinesGetRequest($accept, $quote_id, $quote_history_id, $jiwa_stateful = null)
    {
        // verify the required parameter 'accept' is set
        if ($accept === null || (is_array($accept) && count($accept) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $accept when calling salesQuoteLinesGETManyRequestQuoteIDHistorysQuoteHistoryIDLinesGet'
            );
        }
        // verify the required parameter 'quote_id' is set
        if ($quote_id === null || (is_array($quote_id) && count($quote_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $quote_id when calling salesQuoteLinesGETManyRequestQuoteIDHistorysQuoteHistoryIDLinesGet'
            );
        }
        // verify the required parameter 'quote_history_id' is set
        if ($quote_history_id === null || (is_array($quote_history_id) && count($quote_history_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $quote_history_id when calling salesQuoteLinesGETManyRequestQuoteIDHistorysQuoteHistoryIDLinesGet'
            );
        }

        $resourcePath = '/SalesQuotes/{QuoteID}/Historys/{QuoteHistoryID}/Lines';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // header params
        if ($accept !== null) {
            $headerParams['Accept'] = ObjectSerializer::toHeaderValue($accept);
        }
        // header params
        if ($jiwa_stateful !== null) {
            $headerParams['jiwa-stateful'] = ObjectSerializer::toHeaderValue($jiwa_stateful);
        }

        // path params
        if ($quote_id !== null) {
            $resourcePath = str_replace(
                '{' . 'QuoteID' . '}',
                ObjectSerializer::toPathValue($quote_id),
                $resourcePath
            );
        }
        // path params
        if ($quote_history_id !== null) {
            $resourcePath = str_replace(
                '{' . 'QuoteHistoryID' . '}',
                ObjectSerializer::toPathValue($quote_history_id),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json', 'application/xml']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json', 'application/xml'],
                ['application/x-www-form-urlencoded', 'application/json', 'application/xml']
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            
            if($headers['Content-Type'] === 'application/json') {
                // \stdClass has no __toString(), so we should encode it manually
                if ($httpBody instanceof \stdClass) {
                    $httpBody = \GuzzleHttp\json_encode($httpBody);
                }
                // array has no __toString(), so we should encode it manually
                if(is_array($httpBody)) {
                    $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($httpBody));
                }
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\Query::build($formParams);
            }
        }

        // this endpoint requires HTTP basic authentication
        if ($this->config->getUsername() !== null || $this->config->getPassword() !== null) {
            $headers['Authorization'] = 'Basic ' . base64_encode($this->config->getUsername() . ":" . $this->config->getPassword());
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\Query::build($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation salesQuoteMAKEORDERB2BRequestQuoteIDMakeOrderB2BPost
     *
     * Makes a back to back sales order from a quote.
     *
     * @param  string $accept Accept Header (required)
     * @param  string $quote_id quote_id (required)
     * @param  bool $jiwa_stateful Stateful indicator (optional)
     * @param  \Jiwa\Model\SalesQuoteMAKEORDERB2BRequest $body body (optional)
     *
     * @throws \Jiwa\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Jiwa\Model\SalesQuote
     */
    public function salesQuoteMAKEORDERB2BRequestQuoteIDMakeOrderB2BPost($accept, $quote_id, $jiwa_stateful = null, $body = null)
    {
        list($response) = $this->salesQuoteMAKEORDERB2BRequestQuoteIDMakeOrderB2BPostWithHttpInfo($accept, $quote_id, $jiwa_stateful, $body);
        return $response;
    }

    /**
     * Operation salesQuoteMAKEORDERB2BRequestQuoteIDMakeOrderB2BPostWithHttpInfo
     *
     * Makes a back to back sales order from a quote.
     *
     * @param  string $accept Accept Header (required)
     * @param  string $quote_id (required)
     * @param  bool $jiwa_stateful Stateful indicator (optional)
     * @param  \Jiwa\Model\SalesQuoteMAKEORDERB2BRequest $body (optional)
     *
     * @throws \Jiwa\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Jiwa\Model\SalesQuote, HTTP status code, HTTP response headers (array of strings)
     */
    public function salesQuoteMAKEORDERB2BRequestQuoteIDMakeOrderB2BPostWithHttpInfo($accept, $quote_id, $jiwa_stateful = null, $body = null)
    {
        $returnType = '\Jiwa\Model\SalesQuote';
        $request = $this->salesQuoteMAKEORDERB2BRequestQuoteIDMakeOrderB2BPostRequest($accept, $quote_id, $jiwa_stateful, $body);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Jiwa\Model\SalesQuote',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 403:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Jiwa\Model\SalesQuote',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 404:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Jiwa\Model\SalesQuote',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 401:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Jiwa\Model\SalesQuote',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation salesQuoteMAKEORDERB2BRequestQuoteIDMakeOrderB2BPostAsync
     *
     * Makes a back to back sales order from a quote.
     *
     * @param  string $accept Accept Header (required)
     * @param  string $quote_id (required)
     * @param  bool $jiwa_stateful Stateful indicator (optional)
     * @param  \Jiwa\Model\SalesQuoteMAKEORDERB2BRequest $body (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function salesQuoteMAKEORDERB2BRequestQuoteIDMakeOrderB2BPostAsync($accept, $quote_id, $jiwa_stateful = null, $body = null)
    {
        return $this->salesQuoteMAKEORDERB2BRequestQuoteIDMakeOrderB2BPostAsyncWithHttpInfo($accept, $quote_id, $jiwa_stateful, $body)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation salesQuoteMAKEORDERB2BRequestQuoteIDMakeOrderB2BPostAsyncWithHttpInfo
     *
     * Makes a back to back sales order from a quote.
     *
     * @param  string $accept Accept Header (required)
     * @param  string $quote_id (required)
     * @param  bool $jiwa_stateful Stateful indicator (optional)
     * @param  \Jiwa\Model\SalesQuoteMAKEORDERB2BRequest $body (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function salesQuoteMAKEORDERB2BRequestQuoteIDMakeOrderB2BPostAsyncWithHttpInfo($accept, $quote_id, $jiwa_stateful = null, $body = null)
    {
        $returnType = '\Jiwa\Model\SalesQuote';
        $request = $this->salesQuoteMAKEORDERB2BRequestQuoteIDMakeOrderB2BPostRequest($accept, $quote_id, $jiwa_stateful, $body);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'salesQuoteMAKEORDERB2BRequestQuoteIDMakeOrderB2BPost'
     *
     * @param  string $accept Accept Header (required)
     * @param  string $quote_id (required)
     * @param  bool $jiwa_stateful Stateful indicator (optional)
     * @param  \Jiwa\Model\SalesQuoteMAKEORDERB2BRequest $body (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function salesQuoteMAKEORDERB2BRequestQuoteIDMakeOrderB2BPostRequest($accept, $quote_id, $jiwa_stateful = null, $body = null)
    {
        // verify the required parameter 'accept' is set
        if ($accept === null || (is_array($accept) && count($accept) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $accept when calling salesQuoteMAKEORDERB2BRequestQuoteIDMakeOrderB2BPost'
            );
        }
        // verify the required parameter 'quote_id' is set
        if ($quote_id === null || (is_array($quote_id) && count($quote_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $quote_id when calling salesQuoteMAKEORDERB2BRequestQuoteIDMakeOrderB2BPost'
            );
        }

        $resourcePath = '/SalesQuotes/{QuoteID}/MakeOrderB2B';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // header params
        if ($accept !== null) {
            $headerParams['Accept'] = ObjectSerializer::toHeaderValue($accept);
        }
        // header params
        if ($jiwa_stateful !== null) {
            $headerParams['jiwa-stateful'] = ObjectSerializer::toHeaderValue($jiwa_stateful);
        }

        // path params
        if ($quote_id !== null) {
            $resourcePath = str_replace(
                '{' . 'QuoteID' . '}',
                ObjectSerializer::toPathValue($quote_id),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;
        if (isset($body)) {
            $_tempBody = $body;
        }

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json', 'application/xml']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json', 'application/xml'],
                ['application/x-www-form-urlencoded', 'application/json', 'application/xml']
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            
            if($headers['Content-Type'] === 'application/json') {
                // \stdClass has no __toString(), so we should encode it manually
                if ($httpBody instanceof \stdClass) {
                    $httpBody = \GuzzleHttp\json_encode($httpBody);
                }
                // array has no __toString(), so we should encode it manually
                if(is_array($httpBody)) {
                    $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($httpBody));
                }
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\Query::build($formParams);
            }
        }

        // this endpoint requires HTTP basic authentication
        if ($this->config->getUsername() !== null || $this->config->getPassword() !== null) {
            $headers['Authorization'] = 'Basic ' . base64_encode($this->config->getUsername() . ":" . $this->config->getPassword());
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\Query::build($queryParams);
        return new Request(
            'POST',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation salesQuoteMAKEORDERRequestQuoteIDMakeOrderPost
     *
     * Makes a sales order from a quote.
     *
     * @param  string $accept Accept Header (required)
     * @param  string $quote_id quote_id (required)
     * @param  bool $jiwa_stateful Stateful indicator (optional)
     * @param  \Jiwa\Model\SalesQuoteMAKEORDERRequest $body body (optional)
     *
     * @throws \Jiwa\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Jiwa\Model\SalesQuote
     */
    public function salesQuoteMAKEORDERRequestQuoteIDMakeOrderPost($accept, $quote_id, $jiwa_stateful = null, $body = null)
    {
        list($response) = $this->salesQuoteMAKEORDERRequestQuoteIDMakeOrderPostWithHttpInfo($accept, $quote_id, $jiwa_stateful, $body);
        return $response;
    }

    /**
     * Operation salesQuoteMAKEORDERRequestQuoteIDMakeOrderPostWithHttpInfo
     *
     * Makes a sales order from a quote.
     *
     * @param  string $accept Accept Header (required)
     * @param  string $quote_id (required)
     * @param  bool $jiwa_stateful Stateful indicator (optional)
     * @param  \Jiwa\Model\SalesQuoteMAKEORDERRequest $body (optional)
     *
     * @throws \Jiwa\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Jiwa\Model\SalesQuote, HTTP status code, HTTP response headers (array of strings)
     */
    public function salesQuoteMAKEORDERRequestQuoteIDMakeOrderPostWithHttpInfo($accept, $quote_id, $jiwa_stateful = null, $body = null)
    {
        $returnType = '\Jiwa\Model\SalesQuote';
        $request = $this->salesQuoteMAKEORDERRequestQuoteIDMakeOrderPostRequest($accept, $quote_id, $jiwa_stateful, $body);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Jiwa\Model\SalesQuote',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 404:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Jiwa\Model\SalesQuote',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 401:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Jiwa\Model\SalesQuote',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 403:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Jiwa\Model\SalesQuote',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation salesQuoteMAKEORDERRequestQuoteIDMakeOrderPostAsync
     *
     * Makes a sales order from a quote.
     *
     * @param  string $accept Accept Header (required)
     * @param  string $quote_id (required)
     * @param  bool $jiwa_stateful Stateful indicator (optional)
     * @param  \Jiwa\Model\SalesQuoteMAKEORDERRequest $body (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function salesQuoteMAKEORDERRequestQuoteIDMakeOrderPostAsync($accept, $quote_id, $jiwa_stateful = null, $body = null)
    {
        return $this->salesQuoteMAKEORDERRequestQuoteIDMakeOrderPostAsyncWithHttpInfo($accept, $quote_id, $jiwa_stateful, $body)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation salesQuoteMAKEORDERRequestQuoteIDMakeOrderPostAsyncWithHttpInfo
     *
     * Makes a sales order from a quote.
     *
     * @param  string $accept Accept Header (required)
     * @param  string $quote_id (required)
     * @param  bool $jiwa_stateful Stateful indicator (optional)
     * @param  \Jiwa\Model\SalesQuoteMAKEORDERRequest $body (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function salesQuoteMAKEORDERRequestQuoteIDMakeOrderPostAsyncWithHttpInfo($accept, $quote_id, $jiwa_stateful = null, $body = null)
    {
        $returnType = '\Jiwa\Model\SalesQuote';
        $request = $this->salesQuoteMAKEORDERRequestQuoteIDMakeOrderPostRequest($accept, $quote_id, $jiwa_stateful, $body);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'salesQuoteMAKEORDERRequestQuoteIDMakeOrderPost'
     *
     * @param  string $accept Accept Header (required)
     * @param  string $quote_id (required)
     * @param  bool $jiwa_stateful Stateful indicator (optional)
     * @param  \Jiwa\Model\SalesQuoteMAKEORDERRequest $body (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function salesQuoteMAKEORDERRequestQuoteIDMakeOrderPostRequest($accept, $quote_id, $jiwa_stateful = null, $body = null)
    {
        // verify the required parameter 'accept' is set
        if ($accept === null || (is_array($accept) && count($accept) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $accept when calling salesQuoteMAKEORDERRequestQuoteIDMakeOrderPost'
            );
        }
        // verify the required parameter 'quote_id' is set
        if ($quote_id === null || (is_array($quote_id) && count($quote_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $quote_id when calling salesQuoteMAKEORDERRequestQuoteIDMakeOrderPost'
            );
        }

        $resourcePath = '/SalesQuotes/{QuoteID}/MakeOrder';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // header params
        if ($accept !== null) {
            $headerParams['Accept'] = ObjectSerializer::toHeaderValue($accept);
        }
        // header params
        if ($jiwa_stateful !== null) {
            $headerParams['jiwa-stateful'] = ObjectSerializer::toHeaderValue($jiwa_stateful);
        }

        // path params
        if ($quote_id !== null) {
            $resourcePath = str_replace(
                '{' . 'QuoteID' . '}',
                ObjectSerializer::toPathValue($quote_id),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;
        if (isset($body)) {
            $_tempBody = $body;
        }

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json', 'application/xml']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json', 'application/xml'],
                ['application/x-www-form-urlencoded', 'application/json', 'application/xml']
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            
            if($headers['Content-Type'] === 'application/json') {
                // \stdClass has no __toString(), so we should encode it manually
                if ($httpBody instanceof \stdClass) {
                    $httpBody = \GuzzleHttp\json_encode($httpBody);
                }
                // array has no __toString(), so we should encode it manually
                if(is_array($httpBody)) {
                    $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($httpBody));
                }
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\Query::build($formParams);
            }
        }

        // this endpoint requires HTTP basic authentication
        if ($this->config->getUsername() !== null || $this->config->getPassword() !== null) {
            $headers['Authorization'] = 'Basic ' . base64_encode($this->config->getUsername() . ":" . $this->config->getPassword());
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\Query::build($queryParams);
        return new Request(
            'POST',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation salesQuoteNoteDELETERequestQuoteIDNotesNoteIDDelete
     *
     * Deletes a sales Quote note.
     *
     * @param  string $accept Accept Header (required)
     * @param  string $quote_id quote_id (required)
     * @param  string $note_id note_id (required)
     * @param  bool $jiwa_stateful Stateful indicator (optional)
     *
     * @throws \Jiwa\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Jiwa\Model\Object
     */
    public function salesQuoteNoteDELETERequestQuoteIDNotesNoteIDDelete($accept, $quote_id, $note_id, $jiwa_stateful = null)
    {
        list($response) = $this->salesQuoteNoteDELETERequestQuoteIDNotesNoteIDDeleteWithHttpInfo($accept, $quote_id, $note_id, $jiwa_stateful);
        return $response;
    }

    /**
     * Operation salesQuoteNoteDELETERequestQuoteIDNotesNoteIDDeleteWithHttpInfo
     *
     * Deletes a sales Quote note.
     *
     * @param  string $accept Accept Header (required)
     * @param  string $quote_id (required)
     * @param  string $note_id (required)
     * @param  bool $jiwa_stateful Stateful indicator (optional)
     *
     * @throws \Jiwa\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Jiwa\Model\Object, HTTP status code, HTTP response headers (array of strings)
     */
    public function salesQuoteNoteDELETERequestQuoteIDNotesNoteIDDeleteWithHttpInfo($accept, $quote_id, $note_id, $jiwa_stateful = null)
    {
        $returnType = '\Jiwa\Model\Object';
        $request = $this->salesQuoteNoteDELETERequestQuoteIDNotesNoteIDDeleteRequest($accept, $quote_id, $note_id, $jiwa_stateful);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Jiwa\Model\Object',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 404:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Jiwa\Model\Object',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 204:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Jiwa\Model\Object',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 401:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Jiwa\Model\Object',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 403:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Jiwa\Model\Object',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation salesQuoteNoteDELETERequestQuoteIDNotesNoteIDDeleteAsync
     *
     * Deletes a sales Quote note.
     *
     * @param  string $accept Accept Header (required)
     * @param  string $quote_id (required)
     * @param  string $note_id (required)
     * @param  bool $jiwa_stateful Stateful indicator (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function salesQuoteNoteDELETERequestQuoteIDNotesNoteIDDeleteAsync($accept, $quote_id, $note_id, $jiwa_stateful = null)
    {
        return $this->salesQuoteNoteDELETERequestQuoteIDNotesNoteIDDeleteAsyncWithHttpInfo($accept, $quote_id, $note_id, $jiwa_stateful)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation salesQuoteNoteDELETERequestQuoteIDNotesNoteIDDeleteAsyncWithHttpInfo
     *
     * Deletes a sales Quote note.
     *
     * @param  string $accept Accept Header (required)
     * @param  string $quote_id (required)
     * @param  string $note_id (required)
     * @param  bool $jiwa_stateful Stateful indicator (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function salesQuoteNoteDELETERequestQuoteIDNotesNoteIDDeleteAsyncWithHttpInfo($accept, $quote_id, $note_id, $jiwa_stateful = null)
    {
        $returnType = '\Jiwa\Model\Object';
        $request = $this->salesQuoteNoteDELETERequestQuoteIDNotesNoteIDDeleteRequest($accept, $quote_id, $note_id, $jiwa_stateful);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'salesQuoteNoteDELETERequestQuoteIDNotesNoteIDDelete'
     *
     * @param  string $accept Accept Header (required)
     * @param  string $quote_id (required)
     * @param  string $note_id (required)
     * @param  bool $jiwa_stateful Stateful indicator (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function salesQuoteNoteDELETERequestQuoteIDNotesNoteIDDeleteRequest($accept, $quote_id, $note_id, $jiwa_stateful = null)
    {
        // verify the required parameter 'accept' is set
        if ($accept === null || (is_array($accept) && count($accept) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $accept when calling salesQuoteNoteDELETERequestQuoteIDNotesNoteIDDelete'
            );
        }
        // verify the required parameter 'quote_id' is set
        if ($quote_id === null || (is_array($quote_id) && count($quote_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $quote_id when calling salesQuoteNoteDELETERequestQuoteIDNotesNoteIDDelete'
            );
        }
        // verify the required parameter 'note_id' is set
        if ($note_id === null || (is_array($note_id) && count($note_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $note_id when calling salesQuoteNoteDELETERequestQuoteIDNotesNoteIDDelete'
            );
        }

        $resourcePath = '/SalesQuotes/{QuoteID}/Notes/{NoteID}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // header params
        if ($accept !== null) {
            $headerParams['Accept'] = ObjectSerializer::toHeaderValue($accept);
        }
        // header params
        if ($jiwa_stateful !== null) {
            $headerParams['jiwa-stateful'] = ObjectSerializer::toHeaderValue($jiwa_stateful);
        }

        // path params
        if ($quote_id !== null) {
            $resourcePath = str_replace(
                '{' . 'QuoteID' . '}',
                ObjectSerializer::toPathValue($quote_id),
                $resourcePath
            );
        }
        // path params
        if ($note_id !== null) {
            $resourcePath = str_replace(
                '{' . 'NoteID' . '}',
                ObjectSerializer::toPathValue($note_id),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json', 'application/xml']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json', 'application/xml'],
                ['application/x-www-form-urlencoded', 'application/json', 'application/xml']
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            
            if($headers['Content-Type'] === 'application/json') {
                // \stdClass has no __toString(), so we should encode it manually
                if ($httpBody instanceof \stdClass) {
                    $httpBody = \GuzzleHttp\json_encode($httpBody);
                }
                // array has no __toString(), so we should encode it manually
                if(is_array($httpBody)) {
                    $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($httpBody));
                }
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\Query::build($formParams);
            }
        }

        // this endpoint requires HTTP basic authentication
        if ($this->config->getUsername() !== null || $this->config->getPassword() !== null) {
            $headers['Authorization'] = 'Basic ' . base64_encode($this->config->getUsername() . ":" . $this->config->getPassword());
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\Query::build($queryParams);
        return new Request(
            'DELETE',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation salesQuoteNoteGETRequestQuoteIDNotesNoteIDGet
     *
     * Retrieves a sales Quote note.
     *
     * @param  string $accept Accept Header (required)
     * @param  string $quote_id quote_id (required)
     * @param  string $note_id note_id (required)
     * @param  bool $jiwa_stateful Stateful indicator (optional)
     *
     * @throws \Jiwa\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Jiwa\Model\Note
     */
    public function salesQuoteNoteGETRequestQuoteIDNotesNoteIDGet($accept, $quote_id, $note_id, $jiwa_stateful = null)
    {
        list($response) = $this->salesQuoteNoteGETRequestQuoteIDNotesNoteIDGetWithHttpInfo($accept, $quote_id, $note_id, $jiwa_stateful);
        return $response;
    }

    /**
     * Operation salesQuoteNoteGETRequestQuoteIDNotesNoteIDGetWithHttpInfo
     *
     * Retrieves a sales Quote note.
     *
     * @param  string $accept Accept Header (required)
     * @param  string $quote_id (required)
     * @param  string $note_id (required)
     * @param  bool $jiwa_stateful Stateful indicator (optional)
     *
     * @throws \Jiwa\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Jiwa\Model\Note, HTTP status code, HTTP response headers (array of strings)
     */
    public function salesQuoteNoteGETRequestQuoteIDNotesNoteIDGetWithHttpInfo($accept, $quote_id, $note_id, $jiwa_stateful = null)
    {
        $returnType = '\Jiwa\Model\Note';
        $request = $this->salesQuoteNoteGETRequestQuoteIDNotesNoteIDGetRequest($accept, $quote_id, $note_id, $jiwa_stateful);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Jiwa\Model\Note',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 401:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Jiwa\Model\Note',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 404:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Jiwa\Model\Note',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 403:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Jiwa\Model\Note',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation salesQuoteNoteGETRequestQuoteIDNotesNoteIDGetAsync
     *
     * Retrieves a sales Quote note.
     *
     * @param  string $accept Accept Header (required)
     * @param  string $quote_id (required)
     * @param  string $note_id (required)
     * @param  bool $jiwa_stateful Stateful indicator (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function salesQuoteNoteGETRequestQuoteIDNotesNoteIDGetAsync($accept, $quote_id, $note_id, $jiwa_stateful = null)
    {
        return $this->salesQuoteNoteGETRequestQuoteIDNotesNoteIDGetAsyncWithHttpInfo($accept, $quote_id, $note_id, $jiwa_stateful)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation salesQuoteNoteGETRequestQuoteIDNotesNoteIDGetAsyncWithHttpInfo
     *
     * Retrieves a sales Quote note.
     *
     * @param  string $accept Accept Header (required)
     * @param  string $quote_id (required)
     * @param  string $note_id (required)
     * @param  bool $jiwa_stateful Stateful indicator (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function salesQuoteNoteGETRequestQuoteIDNotesNoteIDGetAsyncWithHttpInfo($accept, $quote_id, $note_id, $jiwa_stateful = null)
    {
        $returnType = '\Jiwa\Model\Note';
        $request = $this->salesQuoteNoteGETRequestQuoteIDNotesNoteIDGetRequest($accept, $quote_id, $note_id, $jiwa_stateful);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'salesQuoteNoteGETRequestQuoteIDNotesNoteIDGet'
     *
     * @param  string $accept Accept Header (required)
     * @param  string $quote_id (required)
     * @param  string $note_id (required)
     * @param  bool $jiwa_stateful Stateful indicator (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function salesQuoteNoteGETRequestQuoteIDNotesNoteIDGetRequest($accept, $quote_id, $note_id, $jiwa_stateful = null)
    {
        // verify the required parameter 'accept' is set
        if ($accept === null || (is_array($accept) && count($accept) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $accept when calling salesQuoteNoteGETRequestQuoteIDNotesNoteIDGet'
            );
        }
        // verify the required parameter 'quote_id' is set
        if ($quote_id === null || (is_array($quote_id) && count($quote_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $quote_id when calling salesQuoteNoteGETRequestQuoteIDNotesNoteIDGet'
            );
        }
        // verify the required parameter 'note_id' is set
        if ($note_id === null || (is_array($note_id) && count($note_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $note_id when calling salesQuoteNoteGETRequestQuoteIDNotesNoteIDGet'
            );
        }

        $resourcePath = '/SalesQuotes/{QuoteID}/Notes/{NoteID}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // header params
        if ($accept !== null) {
            $headerParams['Accept'] = ObjectSerializer::toHeaderValue($accept);
        }
        // header params
        if ($jiwa_stateful !== null) {
            $headerParams['jiwa-stateful'] = ObjectSerializer::toHeaderValue($jiwa_stateful);
        }

        // path params
        if ($quote_id !== null) {
            $resourcePath = str_replace(
                '{' . 'QuoteID' . '}',
                ObjectSerializer::toPathValue($quote_id),
                $resourcePath
            );
        }
        // path params
        if ($note_id !== null) {
            $resourcePath = str_replace(
                '{' . 'NoteID' . '}',
                ObjectSerializer::toPathValue($note_id),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json', 'application/xml']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json', 'application/xml'],
                ['application/x-www-form-urlencoded', 'application/json', 'application/xml']
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            
            if($headers['Content-Type'] === 'application/json') {
                // \stdClass has no __toString(), so we should encode it manually
                if ($httpBody instanceof \stdClass) {
                    $httpBody = \GuzzleHttp\json_encode($httpBody);
                }
                // array has no __toString(), so we should encode it manually
                if(is_array($httpBody)) {
                    $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($httpBody));
                }
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\Query::build($formParams);
            }
        }

        // this endpoint requires HTTP basic authentication
        if ($this->config->getUsername() !== null || $this->config->getPassword() !== null) {
            $headers['Authorization'] = 'Basic ' . base64_encode($this->config->getUsername() . ":" . $this->config->getPassword());
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\Query::build($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation salesQuoteNotePATCHRequestQuoteIDNotesNoteIDUpdate
     *
     * Updates a sales Quote note.
     *
     * @param  string $accept Accept Header (required)
     * @param  string $quote_id quote_id (required)
     * @param  string $note_id note_id (required)
     * @param  bool $jiwa_stateful Stateful indicator (optional)
     * @param  string $note_type note_type (optional)
     * @param  int $line_no line_no (optional)
     * @param  \DateTime $last_saved_date_time last_saved_date_time (optional)
     * @param  string $last_modified_by_staff_id last_modified_by_staff_id (optional)
     * @param  string $last_modified_by_staff_username last_modified_by_staff_username (optional)
     * @param  string $last_modified_by_staff_title last_modified_by_staff_title (optional)
     * @param  string $last_modified_by_staff_first_name last_modified_by_staff_first_name (optional)
     * @param  string $last_modified_by_staff_surname last_modified_by_staff_surname (optional)
     * @param  string $note_text note_text (optional)
     * @param  \Jiwa\Model\SalesQuoteNotePATCHRequest $body body (optional)
     *
     * @throws \Jiwa\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Jiwa\Model\Note
     */
    public function salesQuoteNotePATCHRequestQuoteIDNotesNoteIDUpdate($accept, $quote_id, $note_id, $jiwa_stateful = null, $note_type = null, $line_no = null, $last_saved_date_time = null, $last_modified_by_staff_id = null, $last_modified_by_staff_username = null, $last_modified_by_staff_title = null, $last_modified_by_staff_first_name = null, $last_modified_by_staff_surname = null, $note_text = null, $body = null)
    {
        list($response) = $this->salesQuoteNotePATCHRequestQuoteIDNotesNoteIDUpdateWithHttpInfo($accept, $quote_id, $note_id, $jiwa_stateful, $note_type, $line_no, $last_saved_date_time, $last_modified_by_staff_id, $last_modified_by_staff_username, $last_modified_by_staff_title, $last_modified_by_staff_first_name, $last_modified_by_staff_surname, $note_text, $body);
        return $response;
    }

    /**
     * Operation salesQuoteNotePATCHRequestQuoteIDNotesNoteIDUpdateWithHttpInfo
     *
     * Updates a sales Quote note.
     *
     * @param  string $accept Accept Header (required)
     * @param  string $quote_id (required)
     * @param  string $note_id (required)
     * @param  bool $jiwa_stateful Stateful indicator (optional)
     * @param  string $note_type (optional)
     * @param  int $line_no (optional)
     * @param  \DateTime $last_saved_date_time (optional)
     * @param  string $last_modified_by_staff_id (optional)
     * @param  string $last_modified_by_staff_username (optional)
     * @param  string $last_modified_by_staff_title (optional)
     * @param  string $last_modified_by_staff_first_name (optional)
     * @param  string $last_modified_by_staff_surname (optional)
     * @param  string $note_text (optional)
     * @param  \Jiwa\Model\SalesQuoteNotePATCHRequest $body (optional)
     *
     * @throws \Jiwa\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Jiwa\Model\Note, HTTP status code, HTTP response headers (array of strings)
     */
    public function salesQuoteNotePATCHRequestQuoteIDNotesNoteIDUpdateWithHttpInfo($accept, $quote_id, $note_id, $jiwa_stateful = null, $note_type = null, $line_no = null, $last_saved_date_time = null, $last_modified_by_staff_id = null, $last_modified_by_staff_username = null, $last_modified_by_staff_title = null, $last_modified_by_staff_first_name = null, $last_modified_by_staff_surname = null, $note_text = null, $body = null)
    {
        $returnType = '\Jiwa\Model\Note';
        $request = $this->salesQuoteNotePATCHRequestQuoteIDNotesNoteIDUpdateRequest($accept, $quote_id, $note_id, $jiwa_stateful, $note_type, $line_no, $last_saved_date_time, $last_modified_by_staff_id, $last_modified_by_staff_username, $last_modified_by_staff_title, $last_modified_by_staff_first_name, $last_modified_by_staff_surname, $note_text, $body);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Jiwa\Model\Note',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 403:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Jiwa\Model\Note',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 404:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Jiwa\Model\Note',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 401:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Jiwa\Model\Note',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation salesQuoteNotePATCHRequestQuoteIDNotesNoteIDUpdateAsync
     *
     * Updates a sales Quote note.
     *
     * @param  string $accept Accept Header (required)
     * @param  string $quote_id (required)
     * @param  string $note_id (required)
     * @param  bool $jiwa_stateful Stateful indicator (optional)
     * @param  string $note_type (optional)
     * @param  int $line_no (optional)
     * @param  \DateTime $last_saved_date_time (optional)
     * @param  string $last_modified_by_staff_id (optional)
     * @param  string $last_modified_by_staff_username (optional)
     * @param  string $last_modified_by_staff_title (optional)
     * @param  string $last_modified_by_staff_first_name (optional)
     * @param  string $last_modified_by_staff_surname (optional)
     * @param  string $note_text (optional)
     * @param  \Jiwa\Model\SalesQuoteNotePATCHRequest $body (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function salesQuoteNotePATCHRequestQuoteIDNotesNoteIDUpdateAsync($accept, $quote_id, $note_id, $jiwa_stateful = null, $note_type = null, $line_no = null, $last_saved_date_time = null, $last_modified_by_staff_id = null, $last_modified_by_staff_username = null, $last_modified_by_staff_title = null, $last_modified_by_staff_first_name = null, $last_modified_by_staff_surname = null, $note_text = null, $body = null)
    {
        return $this->salesQuoteNotePATCHRequestQuoteIDNotesNoteIDUpdateAsyncWithHttpInfo($accept, $quote_id, $note_id, $jiwa_stateful, $note_type, $line_no, $last_saved_date_time, $last_modified_by_staff_id, $last_modified_by_staff_username, $last_modified_by_staff_title, $last_modified_by_staff_first_name, $last_modified_by_staff_surname, $note_text, $body)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation salesQuoteNotePATCHRequestQuoteIDNotesNoteIDUpdateAsyncWithHttpInfo
     *
     * Updates a sales Quote note.
     *
     * @param  string $accept Accept Header (required)
     * @param  string $quote_id (required)
     * @param  string $note_id (required)
     * @param  bool $jiwa_stateful Stateful indicator (optional)
     * @param  string $note_type (optional)
     * @param  int $line_no (optional)
     * @param  \DateTime $last_saved_date_time (optional)
     * @param  string $last_modified_by_staff_id (optional)
     * @param  string $last_modified_by_staff_username (optional)
     * @param  string $last_modified_by_staff_title (optional)
     * @param  string $last_modified_by_staff_first_name (optional)
     * @param  string $last_modified_by_staff_surname (optional)
     * @param  string $note_text (optional)
     * @param  \Jiwa\Model\SalesQuoteNotePATCHRequest $body (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function salesQuoteNotePATCHRequestQuoteIDNotesNoteIDUpdateAsyncWithHttpInfo($accept, $quote_id, $note_id, $jiwa_stateful = null, $note_type = null, $line_no = null, $last_saved_date_time = null, $last_modified_by_staff_id = null, $last_modified_by_staff_username = null, $last_modified_by_staff_title = null, $last_modified_by_staff_first_name = null, $last_modified_by_staff_surname = null, $note_text = null, $body = null)
    {
        $returnType = '\Jiwa\Model\Note';
        $request = $this->salesQuoteNotePATCHRequestQuoteIDNotesNoteIDUpdateRequest($accept, $quote_id, $note_id, $jiwa_stateful, $note_type, $line_no, $last_saved_date_time, $last_modified_by_staff_id, $last_modified_by_staff_username, $last_modified_by_staff_title, $last_modified_by_staff_first_name, $last_modified_by_staff_surname, $note_text, $body);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'salesQuoteNotePATCHRequestQuoteIDNotesNoteIDUpdate'
     *
     * @param  string $accept Accept Header (required)
     * @param  string $quote_id (required)
     * @param  string $note_id (required)
     * @param  bool $jiwa_stateful Stateful indicator (optional)
     * @param  string $note_type (optional)
     * @param  int $line_no (optional)
     * @param  \DateTime $last_saved_date_time (optional)
     * @param  string $last_modified_by_staff_id (optional)
     * @param  string $last_modified_by_staff_username (optional)
     * @param  string $last_modified_by_staff_title (optional)
     * @param  string $last_modified_by_staff_first_name (optional)
     * @param  string $last_modified_by_staff_surname (optional)
     * @param  string $note_text (optional)
     * @param  \Jiwa\Model\SalesQuoteNotePATCHRequest $body (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function salesQuoteNotePATCHRequestQuoteIDNotesNoteIDUpdateRequest($accept, $quote_id, $note_id, $jiwa_stateful = null, $note_type = null, $line_no = null, $last_saved_date_time = null, $last_modified_by_staff_id = null, $last_modified_by_staff_username = null, $last_modified_by_staff_title = null, $last_modified_by_staff_first_name = null, $last_modified_by_staff_surname = null, $note_text = null, $body = null)
    {
        // verify the required parameter 'accept' is set
        if ($accept === null || (is_array($accept) && count($accept) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $accept when calling salesQuoteNotePATCHRequestQuoteIDNotesNoteIDUpdate'
            );
        }
        // verify the required parameter 'quote_id' is set
        if ($quote_id === null || (is_array($quote_id) && count($quote_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $quote_id when calling salesQuoteNotePATCHRequestQuoteIDNotesNoteIDUpdate'
            );
        }
        // verify the required parameter 'note_id' is set
        if ($note_id === null || (is_array($note_id) && count($note_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $note_id when calling salesQuoteNotePATCHRequestQuoteIDNotesNoteIDUpdate'
            );
        }

        $resourcePath = '/SalesQuotes/{QuoteID}/Notes/{NoteID}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        if ($note_type !== null) {
            $queryParams['NoteType'] = ObjectSerializer::toQueryValue($note_type);
        }
        // query params
        if ($line_no !== null) {
            $queryParams['LineNo'] = ObjectSerializer::toQueryValue($line_no);
        }
        // query params
        if ($last_saved_date_time !== null) {
            $queryParams['LastSavedDateTime'] = ObjectSerializer::toQueryValue($last_saved_date_time);
        }
        // query params
        if ($last_modified_by_staff_id !== null) {
            $queryParams['LastModifiedByStaffID'] = ObjectSerializer::toQueryValue($last_modified_by_staff_id);
        }
        // query params
        if ($last_modified_by_staff_username !== null) {
            $queryParams['LastModifiedByStaffUsername'] = ObjectSerializer::toQueryValue($last_modified_by_staff_username);
        }
        // query params
        if ($last_modified_by_staff_title !== null) {
            $queryParams['LastModifiedByStaffTitle'] = ObjectSerializer::toQueryValue($last_modified_by_staff_title);
        }
        // query params
        if ($last_modified_by_staff_first_name !== null) {
            $queryParams['LastModifiedByStaffFirstName'] = ObjectSerializer::toQueryValue($last_modified_by_staff_first_name);
        }
        // query params
        if ($last_modified_by_staff_surname !== null) {
            $queryParams['LastModifiedByStaffSurname'] = ObjectSerializer::toQueryValue($last_modified_by_staff_surname);
        }
        // query params
        if ($note_text !== null) {
            $queryParams['NoteText'] = ObjectSerializer::toQueryValue($note_text);
        }
        // header params
        if ($accept !== null) {
            $headerParams['Accept'] = ObjectSerializer::toHeaderValue($accept);
        }
        // header params
        if ($jiwa_stateful !== null) {
            $headerParams['jiwa-stateful'] = ObjectSerializer::toHeaderValue($jiwa_stateful);
        }

        // path params
        if ($quote_id !== null) {
            $resourcePath = str_replace(
                '{' . 'QuoteID' . '}',
                ObjectSerializer::toPathValue($quote_id),
                $resourcePath
            );
        }
        // path params
        if ($note_id !== null) {
            $resourcePath = str_replace(
                '{' . 'NoteID' . '}',
                ObjectSerializer::toPathValue($note_id),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;
        if (isset($body)) {
            $_tempBody = $body;
        }

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json', 'application/xml']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json', 'application/xml'],
                ['application/x-www-form-urlencoded', 'application/json', 'application/xml']
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            
            if($headers['Content-Type'] === 'application/json') {
                // \stdClass has no __toString(), so we should encode it manually
                if ($httpBody instanceof \stdClass) {
                    $httpBody = \GuzzleHttp\json_encode($httpBody);
                }
                // array has no __toString(), so we should encode it manually
                if(is_array($httpBody)) {
                    $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($httpBody));
                }
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\Query::build($formParams);
            }
        }

        // this endpoint requires HTTP basic authentication
        if ($this->config->getUsername() !== null || $this->config->getPassword() !== null) {
            $headers['Authorization'] = 'Basic ' . base64_encode($this->config->getUsername() . ":" . $this->config->getPassword());
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\Query::build($queryParams);
        return new Request(
            'PATCH',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation salesQuoteNotePOSTRequestQuoteIDNotesPost
     *
     * Appends a note to a sales Quote.
     *
     * @param  string $accept Accept Header (required)
     * @param  string $quote_id quote_id (required)
     * @param  bool $jiwa_stateful Stateful indicator (optional)
     * @param  string $note_type note_type (optional)
     * @param  int $line_no line_no (optional)
     * @param  \DateTime $last_saved_date_time last_saved_date_time (optional)
     * @param  string $last_modified_by_staff_id last_modified_by_staff_id (optional)
     * @param  string $last_modified_by_staff_username last_modified_by_staff_username (optional)
     * @param  string $last_modified_by_staff_title last_modified_by_staff_title (optional)
     * @param  string $last_modified_by_staff_first_name last_modified_by_staff_first_name (optional)
     * @param  string $last_modified_by_staff_surname last_modified_by_staff_surname (optional)
     * @param  string $note_text note_text (optional)
     * @param  \Jiwa\Model\SalesQuoteNotePOSTRequest $body body (optional)
     *
     * @throws \Jiwa\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Jiwa\Model\Note
     */
    public function salesQuoteNotePOSTRequestQuoteIDNotesPost($accept, $quote_id, $jiwa_stateful = null, $note_type = null, $line_no = null, $last_saved_date_time = null, $last_modified_by_staff_id = null, $last_modified_by_staff_username = null, $last_modified_by_staff_title = null, $last_modified_by_staff_first_name = null, $last_modified_by_staff_surname = null, $note_text = null, $body = null)
    {
        list($response) = $this->salesQuoteNotePOSTRequestQuoteIDNotesPostWithHttpInfo($accept, $quote_id, $jiwa_stateful, $note_type, $line_no, $last_saved_date_time, $last_modified_by_staff_id, $last_modified_by_staff_username, $last_modified_by_staff_title, $last_modified_by_staff_first_name, $last_modified_by_staff_surname, $note_text, $body);
        return $response;
    }

    /**
     * Operation salesQuoteNotePOSTRequestQuoteIDNotesPostWithHttpInfo
     *
     * Appends a note to a sales Quote.
     *
     * @param  string $accept Accept Header (required)
     * @param  string $quote_id (required)
     * @param  bool $jiwa_stateful Stateful indicator (optional)
     * @param  string $note_type (optional)
     * @param  int $line_no (optional)
     * @param  \DateTime $last_saved_date_time (optional)
     * @param  string $last_modified_by_staff_id (optional)
     * @param  string $last_modified_by_staff_username (optional)
     * @param  string $last_modified_by_staff_title (optional)
     * @param  string $last_modified_by_staff_first_name (optional)
     * @param  string $last_modified_by_staff_surname (optional)
     * @param  string $note_text (optional)
     * @param  \Jiwa\Model\SalesQuoteNotePOSTRequest $body (optional)
     *
     * @throws \Jiwa\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Jiwa\Model\Note, HTTP status code, HTTP response headers (array of strings)
     */
    public function salesQuoteNotePOSTRequestQuoteIDNotesPostWithHttpInfo($accept, $quote_id, $jiwa_stateful = null, $note_type = null, $line_no = null, $last_saved_date_time = null, $last_modified_by_staff_id = null, $last_modified_by_staff_username = null, $last_modified_by_staff_title = null, $last_modified_by_staff_first_name = null, $last_modified_by_staff_surname = null, $note_text = null, $body = null)
    {
        $returnType = '\Jiwa\Model\Note';
        $request = $this->salesQuoteNotePOSTRequestQuoteIDNotesPostRequest($accept, $quote_id, $jiwa_stateful, $note_type, $line_no, $last_saved_date_time, $last_modified_by_staff_id, $last_modified_by_staff_username, $last_modified_by_staff_title, $last_modified_by_staff_first_name, $last_modified_by_staff_surname, $note_text, $body);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Jiwa\Model\Note',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 403:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Jiwa\Model\Note',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 401:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Jiwa\Model\Note',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 404:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Jiwa\Model\Note',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 201:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Jiwa\Model\Note',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation salesQuoteNotePOSTRequestQuoteIDNotesPostAsync
     *
     * Appends a note to a sales Quote.
     *
     * @param  string $accept Accept Header (required)
     * @param  string $quote_id (required)
     * @param  bool $jiwa_stateful Stateful indicator (optional)
     * @param  string $note_type (optional)
     * @param  int $line_no (optional)
     * @param  \DateTime $last_saved_date_time (optional)
     * @param  string $last_modified_by_staff_id (optional)
     * @param  string $last_modified_by_staff_username (optional)
     * @param  string $last_modified_by_staff_title (optional)
     * @param  string $last_modified_by_staff_first_name (optional)
     * @param  string $last_modified_by_staff_surname (optional)
     * @param  string $note_text (optional)
     * @param  \Jiwa\Model\SalesQuoteNotePOSTRequest $body (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function salesQuoteNotePOSTRequestQuoteIDNotesPostAsync($accept, $quote_id, $jiwa_stateful = null, $note_type = null, $line_no = null, $last_saved_date_time = null, $last_modified_by_staff_id = null, $last_modified_by_staff_username = null, $last_modified_by_staff_title = null, $last_modified_by_staff_first_name = null, $last_modified_by_staff_surname = null, $note_text = null, $body = null)
    {
        return $this->salesQuoteNotePOSTRequestQuoteIDNotesPostAsyncWithHttpInfo($accept, $quote_id, $jiwa_stateful, $note_type, $line_no, $last_saved_date_time, $last_modified_by_staff_id, $last_modified_by_staff_username, $last_modified_by_staff_title, $last_modified_by_staff_first_name, $last_modified_by_staff_surname, $note_text, $body)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation salesQuoteNotePOSTRequestQuoteIDNotesPostAsyncWithHttpInfo
     *
     * Appends a note to a sales Quote.
     *
     * @param  string $accept Accept Header (required)
     * @param  string $quote_id (required)
     * @param  bool $jiwa_stateful Stateful indicator (optional)
     * @param  string $note_type (optional)
     * @param  int $line_no (optional)
     * @param  \DateTime $last_saved_date_time (optional)
     * @param  string $last_modified_by_staff_id (optional)
     * @param  string $last_modified_by_staff_username (optional)
     * @param  string $last_modified_by_staff_title (optional)
     * @param  string $last_modified_by_staff_first_name (optional)
     * @param  string $last_modified_by_staff_surname (optional)
     * @param  string $note_text (optional)
     * @param  \Jiwa\Model\SalesQuoteNotePOSTRequest $body (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function salesQuoteNotePOSTRequestQuoteIDNotesPostAsyncWithHttpInfo($accept, $quote_id, $jiwa_stateful = null, $note_type = null, $line_no = null, $last_saved_date_time = null, $last_modified_by_staff_id = null, $last_modified_by_staff_username = null, $last_modified_by_staff_title = null, $last_modified_by_staff_first_name = null, $last_modified_by_staff_surname = null, $note_text = null, $body = null)
    {
        $returnType = '\Jiwa\Model\Note';
        $request = $this->salesQuoteNotePOSTRequestQuoteIDNotesPostRequest($accept, $quote_id, $jiwa_stateful, $note_type, $line_no, $last_saved_date_time, $last_modified_by_staff_id, $last_modified_by_staff_username, $last_modified_by_staff_title, $last_modified_by_staff_first_name, $last_modified_by_staff_surname, $note_text, $body);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'salesQuoteNotePOSTRequestQuoteIDNotesPost'
     *
     * @param  string $accept Accept Header (required)
     * @param  string $quote_id (required)
     * @param  bool $jiwa_stateful Stateful indicator (optional)
     * @param  string $note_type (optional)
     * @param  int $line_no (optional)
     * @param  \DateTime $last_saved_date_time (optional)
     * @param  string $last_modified_by_staff_id (optional)
     * @param  string $last_modified_by_staff_username (optional)
     * @param  string $last_modified_by_staff_title (optional)
     * @param  string $last_modified_by_staff_first_name (optional)
     * @param  string $last_modified_by_staff_surname (optional)
     * @param  string $note_text (optional)
     * @param  \Jiwa\Model\SalesQuoteNotePOSTRequest $body (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function salesQuoteNotePOSTRequestQuoteIDNotesPostRequest($accept, $quote_id, $jiwa_stateful = null, $note_type = null, $line_no = null, $last_saved_date_time = null, $last_modified_by_staff_id = null, $last_modified_by_staff_username = null, $last_modified_by_staff_title = null, $last_modified_by_staff_first_name = null, $last_modified_by_staff_surname = null, $note_text = null, $body = null)
    {
        // verify the required parameter 'accept' is set
        if ($accept === null || (is_array($accept) && count($accept) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $accept when calling salesQuoteNotePOSTRequestQuoteIDNotesPost'
            );
        }
        // verify the required parameter 'quote_id' is set
        if ($quote_id === null || (is_array($quote_id) && count($quote_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $quote_id when calling salesQuoteNotePOSTRequestQuoteIDNotesPost'
            );
        }

        $resourcePath = '/SalesQuotes/{QuoteID}/Notes';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        if ($note_type !== null) {
            $queryParams['NoteType'] = ObjectSerializer::toQueryValue($note_type);
        }
        // query params
        if ($line_no !== null) {
            $queryParams['LineNo'] = ObjectSerializer::toQueryValue($line_no);
        }
        // query params
        if ($last_saved_date_time !== null) {
            $queryParams['LastSavedDateTime'] = ObjectSerializer::toQueryValue($last_saved_date_time);
        }
        // query params
        if ($last_modified_by_staff_id !== null) {
            $queryParams['LastModifiedByStaffID'] = ObjectSerializer::toQueryValue($last_modified_by_staff_id);
        }
        // query params
        if ($last_modified_by_staff_username !== null) {
            $queryParams['LastModifiedByStaffUsername'] = ObjectSerializer::toQueryValue($last_modified_by_staff_username);
        }
        // query params
        if ($last_modified_by_staff_title !== null) {
            $queryParams['LastModifiedByStaffTitle'] = ObjectSerializer::toQueryValue($last_modified_by_staff_title);
        }
        // query params
        if ($last_modified_by_staff_first_name !== null) {
            $queryParams['LastModifiedByStaffFirstName'] = ObjectSerializer::toQueryValue($last_modified_by_staff_first_name);
        }
        // query params
        if ($last_modified_by_staff_surname !== null) {
            $queryParams['LastModifiedByStaffSurname'] = ObjectSerializer::toQueryValue($last_modified_by_staff_surname);
        }
        // query params
        if ($note_text !== null) {
            $queryParams['NoteText'] = ObjectSerializer::toQueryValue($note_text);
        }
        // header params
        if ($accept !== null) {
            $headerParams['Accept'] = ObjectSerializer::toHeaderValue($accept);
        }
        // header params
        if ($jiwa_stateful !== null) {
            $headerParams['jiwa-stateful'] = ObjectSerializer::toHeaderValue($jiwa_stateful);
        }

        // path params
        if ($quote_id !== null) {
            $resourcePath = str_replace(
                '{' . 'QuoteID' . '}',
                ObjectSerializer::toPathValue($quote_id),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;
        if (isset($body)) {
            $_tempBody = $body;
        }

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json', 'application/xml']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json', 'application/xml'],
                ['application/x-www-form-urlencoded', 'application/json', 'application/xml']
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            
            if($headers['Content-Type'] === 'application/json') {
                // \stdClass has no __toString(), so we should encode it manually
                if ($httpBody instanceof \stdClass) {
                    $httpBody = \GuzzleHttp\json_encode($httpBody);
                }
                // array has no __toString(), so we should encode it manually
                if(is_array($httpBody)) {
                    $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($httpBody));
                }
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\Query::build($formParams);
            }
        }

        // this endpoint requires HTTP basic authentication
        if ($this->config->getUsername() !== null || $this->config->getPassword() !== null) {
            $headers['Authorization'] = 'Basic ' . base64_encode($this->config->getUsername() . ":" . $this->config->getPassword());
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\Query::build($queryParams);
        return new Request(
            'POST',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation salesQuoteNoteTypeDELETERequestNoteTypesNoteTypeIDDelete
     *
     * Deletes a sales Quote note type.
     *
     * @param  string $accept Accept Header (required)
     * @param  string $note_type_id note_type_id (required)
     * @param  bool $jiwa_stateful Stateful indicator (optional)
     *
     * @throws \Jiwa\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Jiwa\Model\Object
     */
    public function salesQuoteNoteTypeDELETERequestNoteTypesNoteTypeIDDelete($accept, $note_type_id, $jiwa_stateful = null)
    {
        list($response) = $this->salesQuoteNoteTypeDELETERequestNoteTypesNoteTypeIDDeleteWithHttpInfo($accept, $note_type_id, $jiwa_stateful);
        return $response;
    }

    /**
     * Operation salesQuoteNoteTypeDELETERequestNoteTypesNoteTypeIDDeleteWithHttpInfo
     *
     * Deletes a sales Quote note type.
     *
     * @param  string $accept Accept Header (required)
     * @param  string $note_type_id (required)
     * @param  bool $jiwa_stateful Stateful indicator (optional)
     *
     * @throws \Jiwa\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Jiwa\Model\Object, HTTP status code, HTTP response headers (array of strings)
     */
    public function salesQuoteNoteTypeDELETERequestNoteTypesNoteTypeIDDeleteWithHttpInfo($accept, $note_type_id, $jiwa_stateful = null)
    {
        $returnType = '\Jiwa\Model\Object';
        $request = $this->salesQuoteNoteTypeDELETERequestNoteTypesNoteTypeIDDeleteRequest($accept, $note_type_id, $jiwa_stateful);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Jiwa\Model\Object',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 204:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Jiwa\Model\Object',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 401:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Jiwa\Model\Object',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 404:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Jiwa\Model\Object',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 403:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Jiwa\Model\Object',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation salesQuoteNoteTypeDELETERequestNoteTypesNoteTypeIDDeleteAsync
     *
     * Deletes a sales Quote note type.
     *
     * @param  string $accept Accept Header (required)
     * @param  string $note_type_id (required)
     * @param  bool $jiwa_stateful Stateful indicator (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function salesQuoteNoteTypeDELETERequestNoteTypesNoteTypeIDDeleteAsync($accept, $note_type_id, $jiwa_stateful = null)
    {
        return $this->salesQuoteNoteTypeDELETERequestNoteTypesNoteTypeIDDeleteAsyncWithHttpInfo($accept, $note_type_id, $jiwa_stateful)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation salesQuoteNoteTypeDELETERequestNoteTypesNoteTypeIDDeleteAsyncWithHttpInfo
     *
     * Deletes a sales Quote note type.
     *
     * @param  string $accept Accept Header (required)
     * @param  string $note_type_id (required)
     * @param  bool $jiwa_stateful Stateful indicator (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function salesQuoteNoteTypeDELETERequestNoteTypesNoteTypeIDDeleteAsyncWithHttpInfo($accept, $note_type_id, $jiwa_stateful = null)
    {
        $returnType = '\Jiwa\Model\Object';
        $request = $this->salesQuoteNoteTypeDELETERequestNoteTypesNoteTypeIDDeleteRequest($accept, $note_type_id, $jiwa_stateful);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'salesQuoteNoteTypeDELETERequestNoteTypesNoteTypeIDDelete'
     *
     * @param  string $accept Accept Header (required)
     * @param  string $note_type_id (required)
     * @param  bool $jiwa_stateful Stateful indicator (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function salesQuoteNoteTypeDELETERequestNoteTypesNoteTypeIDDeleteRequest($accept, $note_type_id, $jiwa_stateful = null)
    {
        // verify the required parameter 'accept' is set
        if ($accept === null || (is_array($accept) && count($accept) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $accept when calling salesQuoteNoteTypeDELETERequestNoteTypesNoteTypeIDDelete'
            );
        }
        // verify the required parameter 'note_type_id' is set
        if ($note_type_id === null || (is_array($note_type_id) && count($note_type_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $note_type_id when calling salesQuoteNoteTypeDELETERequestNoteTypesNoteTypeIDDelete'
            );
        }

        $resourcePath = '/SalesQuotes/NoteTypes/{NoteTypeID}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // header params
        if ($accept !== null) {
            $headerParams['Accept'] = ObjectSerializer::toHeaderValue($accept);
        }
        // header params
        if ($jiwa_stateful !== null) {
            $headerParams['jiwa-stateful'] = ObjectSerializer::toHeaderValue($jiwa_stateful);
        }

        // path params
        if ($note_type_id !== null) {
            $resourcePath = str_replace(
                '{' . 'NoteTypeID' . '}',
                ObjectSerializer::toPathValue($note_type_id),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json', 'application/xml']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json', 'application/xml'],
                ['application/x-www-form-urlencoded', 'application/json', 'application/xml']
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            
            if($headers['Content-Type'] === 'application/json') {
                // \stdClass has no __toString(), so we should encode it manually
                if ($httpBody instanceof \stdClass) {
                    $httpBody = \GuzzleHttp\json_encode($httpBody);
                }
                // array has no __toString(), so we should encode it manually
                if(is_array($httpBody)) {
                    $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($httpBody));
                }
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\Query::build($formParams);
            }
        }

        // this endpoint requires HTTP basic authentication
        if ($this->config->getUsername() !== null || $this->config->getPassword() !== null) {
            $headers['Authorization'] = 'Basic ' . base64_encode($this->config->getUsername() . ":" . $this->config->getPassword());
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\Query::build($queryParams);
        return new Request(
            'DELETE',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation salesQuoteNoteTypeGETRequestNoteTypesNoteTypeIDGet
     *
     * Retrieves a sales Quote note type.
     *
     * @param  string $accept Accept Header (required)
     * @param  string $note_type_id note_type_id (required)
     * @param  bool $jiwa_stateful Stateful indicator (optional)
     *
     * @throws \Jiwa\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Jiwa\Model\NoteType
     */
    public function salesQuoteNoteTypeGETRequestNoteTypesNoteTypeIDGet($accept, $note_type_id, $jiwa_stateful = null)
    {
        list($response) = $this->salesQuoteNoteTypeGETRequestNoteTypesNoteTypeIDGetWithHttpInfo($accept, $note_type_id, $jiwa_stateful);
        return $response;
    }

    /**
     * Operation salesQuoteNoteTypeGETRequestNoteTypesNoteTypeIDGetWithHttpInfo
     *
     * Retrieves a sales Quote note type.
     *
     * @param  string $accept Accept Header (required)
     * @param  string $note_type_id (required)
     * @param  bool $jiwa_stateful Stateful indicator (optional)
     *
     * @throws \Jiwa\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Jiwa\Model\NoteType, HTTP status code, HTTP response headers (array of strings)
     */
    public function salesQuoteNoteTypeGETRequestNoteTypesNoteTypeIDGetWithHttpInfo($accept, $note_type_id, $jiwa_stateful = null)
    {
        $returnType = '\Jiwa\Model\NoteType';
        $request = $this->salesQuoteNoteTypeGETRequestNoteTypesNoteTypeIDGetRequest($accept, $note_type_id, $jiwa_stateful);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Jiwa\Model\NoteType',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 401:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Jiwa\Model\NoteType',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 403:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Jiwa\Model\NoteType',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 404:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Jiwa\Model\NoteType',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation salesQuoteNoteTypeGETRequestNoteTypesNoteTypeIDGetAsync
     *
     * Retrieves a sales Quote note type.
     *
     * @param  string $accept Accept Header (required)
     * @param  string $note_type_id (required)
     * @param  bool $jiwa_stateful Stateful indicator (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function salesQuoteNoteTypeGETRequestNoteTypesNoteTypeIDGetAsync($accept, $note_type_id, $jiwa_stateful = null)
    {
        return $this->salesQuoteNoteTypeGETRequestNoteTypesNoteTypeIDGetAsyncWithHttpInfo($accept, $note_type_id, $jiwa_stateful)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation salesQuoteNoteTypeGETRequestNoteTypesNoteTypeIDGetAsyncWithHttpInfo
     *
     * Retrieves a sales Quote note type.
     *
     * @param  string $accept Accept Header (required)
     * @param  string $note_type_id (required)
     * @param  bool $jiwa_stateful Stateful indicator (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function salesQuoteNoteTypeGETRequestNoteTypesNoteTypeIDGetAsyncWithHttpInfo($accept, $note_type_id, $jiwa_stateful = null)
    {
        $returnType = '\Jiwa\Model\NoteType';
        $request = $this->salesQuoteNoteTypeGETRequestNoteTypesNoteTypeIDGetRequest($accept, $note_type_id, $jiwa_stateful);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'salesQuoteNoteTypeGETRequestNoteTypesNoteTypeIDGet'
     *
     * @param  string $accept Accept Header (required)
     * @param  string $note_type_id (required)
     * @param  bool $jiwa_stateful Stateful indicator (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function salesQuoteNoteTypeGETRequestNoteTypesNoteTypeIDGetRequest($accept, $note_type_id, $jiwa_stateful = null)
    {
        // verify the required parameter 'accept' is set
        if ($accept === null || (is_array($accept) && count($accept) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $accept when calling salesQuoteNoteTypeGETRequestNoteTypesNoteTypeIDGet'
            );
        }
        // verify the required parameter 'note_type_id' is set
        if ($note_type_id === null || (is_array($note_type_id) && count($note_type_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $note_type_id when calling salesQuoteNoteTypeGETRequestNoteTypesNoteTypeIDGet'
            );
        }

        $resourcePath = '/SalesQuotes/NoteTypes/{NoteTypeID}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // header params
        if ($accept !== null) {
            $headerParams['Accept'] = ObjectSerializer::toHeaderValue($accept);
        }
        // header params
        if ($jiwa_stateful !== null) {
            $headerParams['jiwa-stateful'] = ObjectSerializer::toHeaderValue($jiwa_stateful);
        }

        // path params
        if ($note_type_id !== null) {
            $resourcePath = str_replace(
                '{' . 'NoteTypeID' . '}',
                ObjectSerializer::toPathValue($note_type_id),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json', 'application/xml']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json', 'application/xml'],
                ['application/x-www-form-urlencoded', 'application/json', 'application/xml']
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            
            if($headers['Content-Type'] === 'application/json') {
                // \stdClass has no __toString(), so we should encode it manually
                if ($httpBody instanceof \stdClass) {
                    $httpBody = \GuzzleHttp\json_encode($httpBody);
                }
                // array has no __toString(), so we should encode it manually
                if(is_array($httpBody)) {
                    $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($httpBody));
                }
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\Query::build($formParams);
            }
        }

        // this endpoint requires HTTP basic authentication
        if ($this->config->getUsername() !== null || $this->config->getPassword() !== null) {
            $headers['Authorization'] = 'Basic ' . base64_encode($this->config->getUsername() . ":" . $this->config->getPassword());
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\Query::build($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation salesQuoteNoteTypePATCHRequestNoteTypesNoteTypeIDUpdate
     *
     * Updates a sales Quote note type.
     *
     * @param  string $accept Accept Header (required)
     * @param  string $note_type_id note_type_id (required)
     * @param  bool $jiwa_stateful Stateful indicator (optional)
     * @param  string $description description (optional)
     * @param  bool $default_type default_type (optional)
     * @param  int $item_no item_no (optional)
     * @param  \Jiwa\Model\SalesQuoteNoteTypePATCHRequest $body body (optional)
     *
     * @throws \Jiwa\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Jiwa\Model\NoteType
     */
    public function salesQuoteNoteTypePATCHRequestNoteTypesNoteTypeIDUpdate($accept, $note_type_id, $jiwa_stateful = null, $description = null, $default_type = null, $item_no = null, $body = null)
    {
        list($response) = $this->salesQuoteNoteTypePATCHRequestNoteTypesNoteTypeIDUpdateWithHttpInfo($accept, $note_type_id, $jiwa_stateful, $description, $default_type, $item_no, $body);
        return $response;
    }

    /**
     * Operation salesQuoteNoteTypePATCHRequestNoteTypesNoteTypeIDUpdateWithHttpInfo
     *
     * Updates a sales Quote note type.
     *
     * @param  string $accept Accept Header (required)
     * @param  string $note_type_id (required)
     * @param  bool $jiwa_stateful Stateful indicator (optional)
     * @param  string $description (optional)
     * @param  bool $default_type (optional)
     * @param  int $item_no (optional)
     * @param  \Jiwa\Model\SalesQuoteNoteTypePATCHRequest $body (optional)
     *
     * @throws \Jiwa\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Jiwa\Model\NoteType, HTTP status code, HTTP response headers (array of strings)
     */
    public function salesQuoteNoteTypePATCHRequestNoteTypesNoteTypeIDUpdateWithHttpInfo($accept, $note_type_id, $jiwa_stateful = null, $description = null, $default_type = null, $item_no = null, $body = null)
    {
        $returnType = '\Jiwa\Model\NoteType';
        $request = $this->salesQuoteNoteTypePATCHRequestNoteTypesNoteTypeIDUpdateRequest($accept, $note_type_id, $jiwa_stateful, $description, $default_type, $item_no, $body);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Jiwa\Model\NoteType',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 404:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Jiwa\Model\NoteType',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 401:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Jiwa\Model\NoteType',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 403:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Jiwa\Model\NoteType',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation salesQuoteNoteTypePATCHRequestNoteTypesNoteTypeIDUpdateAsync
     *
     * Updates a sales Quote note type.
     *
     * @param  string $accept Accept Header (required)
     * @param  string $note_type_id (required)
     * @param  bool $jiwa_stateful Stateful indicator (optional)
     * @param  string $description (optional)
     * @param  bool $default_type (optional)
     * @param  int $item_no (optional)
     * @param  \Jiwa\Model\SalesQuoteNoteTypePATCHRequest $body (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function salesQuoteNoteTypePATCHRequestNoteTypesNoteTypeIDUpdateAsync($accept, $note_type_id, $jiwa_stateful = null, $description = null, $default_type = null, $item_no = null, $body = null)
    {
        return $this->salesQuoteNoteTypePATCHRequestNoteTypesNoteTypeIDUpdateAsyncWithHttpInfo($accept, $note_type_id, $jiwa_stateful, $description, $default_type, $item_no, $body)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation salesQuoteNoteTypePATCHRequestNoteTypesNoteTypeIDUpdateAsyncWithHttpInfo
     *
     * Updates a sales Quote note type.
     *
     * @param  string $accept Accept Header (required)
     * @param  string $note_type_id (required)
     * @param  bool $jiwa_stateful Stateful indicator (optional)
     * @param  string $description (optional)
     * @param  bool $default_type (optional)
     * @param  int $item_no (optional)
     * @param  \Jiwa\Model\SalesQuoteNoteTypePATCHRequest $body (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function salesQuoteNoteTypePATCHRequestNoteTypesNoteTypeIDUpdateAsyncWithHttpInfo($accept, $note_type_id, $jiwa_stateful = null, $description = null, $default_type = null, $item_no = null, $body = null)
    {
        $returnType = '\Jiwa\Model\NoteType';
        $request = $this->salesQuoteNoteTypePATCHRequestNoteTypesNoteTypeIDUpdateRequest($accept, $note_type_id, $jiwa_stateful, $description, $default_type, $item_no, $body);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'salesQuoteNoteTypePATCHRequestNoteTypesNoteTypeIDUpdate'
     *
     * @param  string $accept Accept Header (required)
     * @param  string $note_type_id (required)
     * @param  bool $jiwa_stateful Stateful indicator (optional)
     * @param  string $description (optional)
     * @param  bool $default_type (optional)
     * @param  int $item_no (optional)
     * @param  \Jiwa\Model\SalesQuoteNoteTypePATCHRequest $body (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function salesQuoteNoteTypePATCHRequestNoteTypesNoteTypeIDUpdateRequest($accept, $note_type_id, $jiwa_stateful = null, $description = null, $default_type = null, $item_no = null, $body = null)
    {
        // verify the required parameter 'accept' is set
        if ($accept === null || (is_array($accept) && count($accept) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $accept when calling salesQuoteNoteTypePATCHRequestNoteTypesNoteTypeIDUpdate'
            );
        }
        // verify the required parameter 'note_type_id' is set
        if ($note_type_id === null || (is_array($note_type_id) && count($note_type_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $note_type_id when calling salesQuoteNoteTypePATCHRequestNoteTypesNoteTypeIDUpdate'
            );
        }

        $resourcePath = '/SalesQuotes/NoteTypes/{NoteTypeID}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        if ($description !== null) {
            $queryParams['Description'] = ObjectSerializer::toQueryValue($description);
        }
        // query params
        if ($default_type !== null) {
            $queryParams['DefaultType'] = ObjectSerializer::toQueryValue($default_type);
        }
        // query params
        if ($item_no !== null) {
            $queryParams['ItemNo'] = ObjectSerializer::toQueryValue($item_no);
        }
        // header params
        if ($accept !== null) {
            $headerParams['Accept'] = ObjectSerializer::toHeaderValue($accept);
        }
        // header params
        if ($jiwa_stateful !== null) {
            $headerParams['jiwa-stateful'] = ObjectSerializer::toHeaderValue($jiwa_stateful);
        }

        // path params
        if ($note_type_id !== null) {
            $resourcePath = str_replace(
                '{' . 'NoteTypeID' . '}',
                ObjectSerializer::toPathValue($note_type_id),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;
        if (isset($body)) {
            $_tempBody = $body;
        }

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json', 'application/xml']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json', 'application/xml'],
                ['application/x-www-form-urlencoded', 'application/json', 'application/xml']
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            
            if($headers['Content-Type'] === 'application/json') {
                // \stdClass has no __toString(), so we should encode it manually
                if ($httpBody instanceof \stdClass) {
                    $httpBody = \GuzzleHttp\json_encode($httpBody);
                }
                // array has no __toString(), so we should encode it manually
                if(is_array($httpBody)) {
                    $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($httpBody));
                }
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\Query::build($formParams);
            }
        }

        // this endpoint requires HTTP basic authentication
        if ($this->config->getUsername() !== null || $this->config->getPassword() !== null) {
            $headers['Authorization'] = 'Basic ' . base64_encode($this->config->getUsername() . ":" . $this->config->getPassword());
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\Query::build($queryParams);
        return new Request(
            'PATCH',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation salesQuoteNoteTypePOSTRequestNoteTypesPost
     *
     * Creates a new sales Quote note type.
     *
     * @param  string $accept Accept Header (required)
     * @param  bool $jiwa_stateful Stateful indicator (optional)
     * @param  string $description description (optional)
     * @param  bool $default_type default_type (optional)
     * @param  int $item_no item_no (optional)
     * @param  \Jiwa\Model\SalesQuoteNoteTypePOSTRequest $body body (optional)
     *
     * @throws \Jiwa\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Jiwa\Model\NoteType
     */
    public function salesQuoteNoteTypePOSTRequestNoteTypesPost($accept, $jiwa_stateful = null, $description = null, $default_type = null, $item_no = null, $body = null)
    {
        list($response) = $this->salesQuoteNoteTypePOSTRequestNoteTypesPostWithHttpInfo($accept, $jiwa_stateful, $description, $default_type, $item_no, $body);
        return $response;
    }

    /**
     * Operation salesQuoteNoteTypePOSTRequestNoteTypesPostWithHttpInfo
     *
     * Creates a new sales Quote note type.
     *
     * @param  string $accept Accept Header (required)
     * @param  bool $jiwa_stateful Stateful indicator (optional)
     * @param  string $description (optional)
     * @param  bool $default_type (optional)
     * @param  int $item_no (optional)
     * @param  \Jiwa\Model\SalesQuoteNoteTypePOSTRequest $body (optional)
     *
     * @throws \Jiwa\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Jiwa\Model\NoteType, HTTP status code, HTTP response headers (array of strings)
     */
    public function salesQuoteNoteTypePOSTRequestNoteTypesPostWithHttpInfo($accept, $jiwa_stateful = null, $description = null, $default_type = null, $item_no = null, $body = null)
    {
        $returnType = '\Jiwa\Model\NoteType';
        $request = $this->salesQuoteNoteTypePOSTRequestNoteTypesPostRequest($accept, $jiwa_stateful, $description, $default_type, $item_no, $body);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Jiwa\Model\NoteType',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 401:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Jiwa\Model\NoteType',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 201:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Jiwa\Model\NoteType',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 403:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Jiwa\Model\NoteType',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation salesQuoteNoteTypePOSTRequestNoteTypesPostAsync
     *
     * Creates a new sales Quote note type.
     *
     * @param  string $accept Accept Header (required)
     * @param  bool $jiwa_stateful Stateful indicator (optional)
     * @param  string $description (optional)
     * @param  bool $default_type (optional)
     * @param  int $item_no (optional)
     * @param  \Jiwa\Model\SalesQuoteNoteTypePOSTRequest $body (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function salesQuoteNoteTypePOSTRequestNoteTypesPostAsync($accept, $jiwa_stateful = null, $description = null, $default_type = null, $item_no = null, $body = null)
    {
        return $this->salesQuoteNoteTypePOSTRequestNoteTypesPostAsyncWithHttpInfo($accept, $jiwa_stateful, $description, $default_type, $item_no, $body)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation salesQuoteNoteTypePOSTRequestNoteTypesPostAsyncWithHttpInfo
     *
     * Creates a new sales Quote note type.
     *
     * @param  string $accept Accept Header (required)
     * @param  bool $jiwa_stateful Stateful indicator (optional)
     * @param  string $description (optional)
     * @param  bool $default_type (optional)
     * @param  int $item_no (optional)
     * @param  \Jiwa\Model\SalesQuoteNoteTypePOSTRequest $body (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function salesQuoteNoteTypePOSTRequestNoteTypesPostAsyncWithHttpInfo($accept, $jiwa_stateful = null, $description = null, $default_type = null, $item_no = null, $body = null)
    {
        $returnType = '\Jiwa\Model\NoteType';
        $request = $this->salesQuoteNoteTypePOSTRequestNoteTypesPostRequest($accept, $jiwa_stateful, $description, $default_type, $item_no, $body);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'salesQuoteNoteTypePOSTRequestNoteTypesPost'
     *
     * @param  string $accept Accept Header (required)
     * @param  bool $jiwa_stateful Stateful indicator (optional)
     * @param  string $description (optional)
     * @param  bool $default_type (optional)
     * @param  int $item_no (optional)
     * @param  \Jiwa\Model\SalesQuoteNoteTypePOSTRequest $body (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function salesQuoteNoteTypePOSTRequestNoteTypesPostRequest($accept, $jiwa_stateful = null, $description = null, $default_type = null, $item_no = null, $body = null)
    {
        // verify the required parameter 'accept' is set
        if ($accept === null || (is_array($accept) && count($accept) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $accept when calling salesQuoteNoteTypePOSTRequestNoteTypesPost'
            );
        }

        $resourcePath = '/SalesQuotes/NoteTypes';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        if ($description !== null) {
            $queryParams['Description'] = ObjectSerializer::toQueryValue($description);
        }
        // query params
        if ($default_type !== null) {
            $queryParams['DefaultType'] = ObjectSerializer::toQueryValue($default_type);
        }
        // query params
        if ($item_no !== null) {
            $queryParams['ItemNo'] = ObjectSerializer::toQueryValue($item_no);
        }
        // header params
        if ($accept !== null) {
            $headerParams['Accept'] = ObjectSerializer::toHeaderValue($accept);
        }
        // header params
        if ($jiwa_stateful !== null) {
            $headerParams['jiwa-stateful'] = ObjectSerializer::toHeaderValue($jiwa_stateful);
        }


        // body params
        $_tempBody = null;
        if (isset($body)) {
            $_tempBody = $body;
        }

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json', 'application/xml']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json', 'application/xml'],
                ['application/x-www-form-urlencoded', 'application/json', 'application/xml']
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            
            if($headers['Content-Type'] === 'application/json') {
                // \stdClass has no __toString(), so we should encode it manually
                if ($httpBody instanceof \stdClass) {
                    $httpBody = \GuzzleHttp\json_encode($httpBody);
                }
                // array has no __toString(), so we should encode it manually
                if(is_array($httpBody)) {
                    $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($httpBody));
                }
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\Query::build($formParams);
            }
        }

        // this endpoint requires HTTP basic authentication
        if ($this->config->getUsername() !== null || $this->config->getPassword() !== null) {
            $headers['Authorization'] = 'Basic ' . base64_encode($this->config->getUsername() . ":" . $this->config->getPassword());
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\Query::build($queryParams);
        return new Request(
            'POST',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation salesQuoteNoteTypesGETManyRequestNoteTypesGet
     *
     * Retrieves a list of sales Quote note types.
     *
     * @param  string $accept Accept Header (required)
     * @param  bool $jiwa_stateful Stateful indicator (optional)
     *
     * @throws \Jiwa\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Jiwa\Model\NoteType[]
     */
    public function salesQuoteNoteTypesGETManyRequestNoteTypesGet($accept, $jiwa_stateful = null)
    {
        list($response) = $this->salesQuoteNoteTypesGETManyRequestNoteTypesGetWithHttpInfo($accept, $jiwa_stateful);
        return $response;
    }

    /**
     * Operation salesQuoteNoteTypesGETManyRequestNoteTypesGetWithHttpInfo
     *
     * Retrieves a list of sales Quote note types.
     *
     * @param  string $accept Accept Header (required)
     * @param  bool $jiwa_stateful Stateful indicator (optional)
     *
     * @throws \Jiwa\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Jiwa\Model\NoteType[], HTTP status code, HTTP response headers (array of strings)
     */
    public function salesQuoteNoteTypesGETManyRequestNoteTypesGetWithHttpInfo($accept, $jiwa_stateful = null)
    {
        $returnType = '\Jiwa\Model\NoteType[]';
        $request = $this->salesQuoteNoteTypesGETManyRequestNoteTypesGetRequest($accept, $jiwa_stateful);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Jiwa\Model\NoteType[]',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 401:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Jiwa\Model\NoteType[]',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 403:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Jiwa\Model\NoteType[]',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation salesQuoteNoteTypesGETManyRequestNoteTypesGetAsync
     *
     * Retrieves a list of sales Quote note types.
     *
     * @param  string $accept Accept Header (required)
     * @param  bool $jiwa_stateful Stateful indicator (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function salesQuoteNoteTypesGETManyRequestNoteTypesGetAsync($accept, $jiwa_stateful = null)
    {
        return $this->salesQuoteNoteTypesGETManyRequestNoteTypesGetAsyncWithHttpInfo($accept, $jiwa_stateful)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation salesQuoteNoteTypesGETManyRequestNoteTypesGetAsyncWithHttpInfo
     *
     * Retrieves a list of sales Quote note types.
     *
     * @param  string $accept Accept Header (required)
     * @param  bool $jiwa_stateful Stateful indicator (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function salesQuoteNoteTypesGETManyRequestNoteTypesGetAsyncWithHttpInfo($accept, $jiwa_stateful = null)
    {
        $returnType = '\Jiwa\Model\NoteType[]';
        $request = $this->salesQuoteNoteTypesGETManyRequestNoteTypesGetRequest($accept, $jiwa_stateful);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'salesQuoteNoteTypesGETManyRequestNoteTypesGet'
     *
     * @param  string $accept Accept Header (required)
     * @param  bool $jiwa_stateful Stateful indicator (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function salesQuoteNoteTypesGETManyRequestNoteTypesGetRequest($accept, $jiwa_stateful = null)
    {
        // verify the required parameter 'accept' is set
        if ($accept === null || (is_array($accept) && count($accept) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $accept when calling salesQuoteNoteTypesGETManyRequestNoteTypesGet'
            );
        }

        $resourcePath = '/SalesQuotes/NoteTypes';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // header params
        if ($accept !== null) {
            $headerParams['Accept'] = ObjectSerializer::toHeaderValue($accept);
        }
        // header params
        if ($jiwa_stateful !== null) {
            $headerParams['jiwa-stateful'] = ObjectSerializer::toHeaderValue($jiwa_stateful);
        }


        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json', 'application/xml']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json', 'application/xml'],
                ['application/x-www-form-urlencoded', 'application/json', 'application/xml']
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            
            if($headers['Content-Type'] === 'application/json') {
                // \stdClass has no __toString(), so we should encode it manually
                if ($httpBody instanceof \stdClass) {
                    $httpBody = \GuzzleHttp\json_encode($httpBody);
                }
                // array has no __toString(), so we should encode it manually
                if(is_array($httpBody)) {
                    $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($httpBody));
                }
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\Query::build($formParams);
            }
        }

        // this endpoint requires HTTP basic authentication
        if ($this->config->getUsername() !== null || $this->config->getPassword() !== null) {
            $headers['Authorization'] = 'Basic ' . base64_encode($this->config->getUsername() . ":" . $this->config->getPassword());
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\Query::build($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation salesQuoteNotesGETManyRequestQuoteIDNotesGet
     *
     * Retrieves a list of sales Quote notes.
     *
     * @param  string $accept Accept Header (required)
     * @param  string $quote_id quote_id (required)
     * @param  bool $jiwa_stateful Stateful indicator (optional)
     *
     * @throws \Jiwa\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Jiwa\Model\Note[]
     */
    public function salesQuoteNotesGETManyRequestQuoteIDNotesGet($accept, $quote_id, $jiwa_stateful = null)
    {
        list($response) = $this->salesQuoteNotesGETManyRequestQuoteIDNotesGetWithHttpInfo($accept, $quote_id, $jiwa_stateful);
        return $response;
    }

    /**
     * Operation salesQuoteNotesGETManyRequestQuoteIDNotesGetWithHttpInfo
     *
     * Retrieves a list of sales Quote notes.
     *
     * @param  string $accept Accept Header (required)
     * @param  string $quote_id (required)
     * @param  bool $jiwa_stateful Stateful indicator (optional)
     *
     * @throws \Jiwa\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Jiwa\Model\Note[], HTTP status code, HTTP response headers (array of strings)
     */
    public function salesQuoteNotesGETManyRequestQuoteIDNotesGetWithHttpInfo($accept, $quote_id, $jiwa_stateful = null)
    {
        $returnType = '\Jiwa\Model\Note[]';
        $request = $this->salesQuoteNotesGETManyRequestQuoteIDNotesGetRequest($accept, $quote_id, $jiwa_stateful);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Jiwa\Model\Note[]',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 403:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Jiwa\Model\Note[]',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 404:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Jiwa\Model\Note[]',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 401:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Jiwa\Model\Note[]',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation salesQuoteNotesGETManyRequestQuoteIDNotesGetAsync
     *
     * Retrieves a list of sales Quote notes.
     *
     * @param  string $accept Accept Header (required)
     * @param  string $quote_id (required)
     * @param  bool $jiwa_stateful Stateful indicator (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function salesQuoteNotesGETManyRequestQuoteIDNotesGetAsync($accept, $quote_id, $jiwa_stateful = null)
    {
        return $this->salesQuoteNotesGETManyRequestQuoteIDNotesGetAsyncWithHttpInfo($accept, $quote_id, $jiwa_stateful)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation salesQuoteNotesGETManyRequestQuoteIDNotesGetAsyncWithHttpInfo
     *
     * Retrieves a list of sales Quote notes.
     *
     * @param  string $accept Accept Header (required)
     * @param  string $quote_id (required)
     * @param  bool $jiwa_stateful Stateful indicator (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function salesQuoteNotesGETManyRequestQuoteIDNotesGetAsyncWithHttpInfo($accept, $quote_id, $jiwa_stateful = null)
    {
        $returnType = '\Jiwa\Model\Note[]';
        $request = $this->salesQuoteNotesGETManyRequestQuoteIDNotesGetRequest($accept, $quote_id, $jiwa_stateful);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'salesQuoteNotesGETManyRequestQuoteIDNotesGet'
     *
     * @param  string $accept Accept Header (required)
     * @param  string $quote_id (required)
     * @param  bool $jiwa_stateful Stateful indicator (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function salesQuoteNotesGETManyRequestQuoteIDNotesGetRequest($accept, $quote_id, $jiwa_stateful = null)
    {
        // verify the required parameter 'accept' is set
        if ($accept === null || (is_array($accept) && count($accept) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $accept when calling salesQuoteNotesGETManyRequestQuoteIDNotesGet'
            );
        }
        // verify the required parameter 'quote_id' is set
        if ($quote_id === null || (is_array($quote_id) && count($quote_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $quote_id when calling salesQuoteNotesGETManyRequestQuoteIDNotesGet'
            );
        }

        $resourcePath = '/SalesQuotes/{QuoteID}/Notes';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // header params
        if ($accept !== null) {
            $headerParams['Accept'] = ObjectSerializer::toHeaderValue($accept);
        }
        // header params
        if ($jiwa_stateful !== null) {
            $headerParams['jiwa-stateful'] = ObjectSerializer::toHeaderValue($jiwa_stateful);
        }

        // path params
        if ($quote_id !== null) {
            $resourcePath = str_replace(
                '{' . 'QuoteID' . '}',
                ObjectSerializer::toPathValue($quote_id),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json', 'application/xml']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json', 'application/xml'],
                ['application/x-www-form-urlencoded', 'application/json', 'application/xml']
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            
            if($headers['Content-Type'] === 'application/json') {
                // \stdClass has no __toString(), so we should encode it manually
                if ($httpBody instanceof \stdClass) {
                    $httpBody = \GuzzleHttp\json_encode($httpBody);
                }
                // array has no __toString(), so we should encode it manually
                if(is_array($httpBody)) {
                    $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($httpBody));
                }
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\Query::build($formParams);
            }
        }

        // this endpoint requires HTTP basic authentication
        if ($this->config->getUsername() !== null || $this->config->getPassword() !== null) {
            $headers['Authorization'] = 'Basic ' . base64_encode($this->config->getUsername() . ":" . $this->config->getPassword());
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\Query::build($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation salesQuotePATCHRequestQuoteIDUpdate
     *
     * Updates a sales Quote.
     *
     * @param  string $accept Accept Header (required)
     * @param  string $quote_id quote_id (required)
     * @param  bool $jiwa_stateful Stateful indicator (optional)
     * @param  string $type type (optional)
     * @param  string $system_settings system_settings (optional)
     * @param  \DateTime $last_saved_date_time last_saved_date_time (optional)
     * @param  string $quote_no quote_no (optional)
     * @param  string $logical_id logical_id (optional)
     * @param  string $logical_warehouse_description logical_warehouse_description (optional)
     * @param  string $physical_warehouse_description physical_warehouse_description (optional)
     * @param  string $staff_id staff_id (optional)
     * @param  string $staff_user_name staff_user_name (optional)
     * @param  string $staff_title staff_title (optional)
     * @param  string $staff_first_name staff_first_name (optional)
     * @param  string $staff_surname staff_surname (optional)
     * @param  string $branch_id branch_id (optional)
     * @param  string $branch_name branch_name (optional)
     * @param  string $branch_description branch_description (optional)
     * @param  \DateTime $initiated_date initiated_date (optional)
     * @param  \DateTime $invoice_init_date invoice_init_date (optional)
     * @param  string $order_no order_no (optional)
     * @param  string $tax_exemption_no tax_exemption_no (optional)
     * @param  string $so_reference so_reference (optional)
     * @param  string $sales_quote_type sales_quote_type (optional)
     * @param  string $order_type order_type (optional)
     * @param  string $status status (optional)
     * @param  string $bill_type bill_type (optional)
     * @param  \DateTime $expected_delivery_date expected_delivery_date (optional)
     * @param  string $debtor_id debtor_id (optional)
     * @param  string $debtor_account_no debtor_account_no (optional)
     * @param  string $debtor_name debtor_name (optional)
     * @param  string $debtor_email_address debtor_email_address (optional)
     * @param  string $debtor_contact_name debtor_contact_name (optional)
     * @param  string $delivery_addressee delivery_addressee (optional)
     * @param  string $delivery_address1 delivery_address1 (optional)
     * @param  string $delivery_address2 delivery_address2 (optional)
     * @param  string $delivery_address_suburb delivery_address_suburb (optional)
     * @param  string $delivery_address_state delivery_address_state (optional)
     * @param  string $delivery_address_contact_name delivery_address_contact_name (optional)
     * @param  string $delivery_address_postcode delivery_address_postcode (optional)
     * @param  string $delivery_address_country delivery_address_country (optional)
     * @param  string $delivery_address_notes delivery_address_notes (optional)
     * @param  string $delivery_address_courier_details delivery_address_courier_details (optional)
     * @param  bool $drop_shipment drop_shipment (optional)
     * @param  double $cartage1_ex_gst cartage1_ex_gst (optional)
     * @param  double $cartage1_gst_rate cartage1_gst_rate (optional)
     * @param  double $cartage1_gst cartage1_gst (optional)
     * @param  double $cartage2_ex_gst cartage2_ex_gst (optional)
     * @param  double $cartage2_gst_rate cartage2_gst_rate (optional)
     * @param  double $cartage2_gst cartage2_gst (optional)
     * @param  double $cartage3_ex_gst cartage3_ex_gst (optional)
     * @param  double $cartage3_gst_rate cartage3_gst_rate (optional)
     * @param  double $cartage3_gst cartage3_gst (optional)
     * @param  string $custom_field_values custom_field_values (optional)
     * @param  string $notes notes (optional)
     * @param  string $documents documents (optional)
     * @param  string $lines lines (optional)
     * @param  string $histories histories (optional)
     * @param  string $cash_sales cash_sales (optional)
     * @param  string $job_costing job_costing (optional)
     * @param  \Jiwa\Model\SalesQuotePATCHRequest $body body (optional)
     *
     * @throws \Jiwa\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Jiwa\Model\SalesQuote
     */
    public function salesQuotePATCHRequestQuoteIDUpdate($accept, $quote_id, $jiwa_stateful = null, $type = null, $system_settings = null, $last_saved_date_time = null, $quote_no = null, $logical_id = null, $logical_warehouse_description = null, $physical_warehouse_description = null, $staff_id = null, $staff_user_name = null, $staff_title = null, $staff_first_name = null, $staff_surname = null, $branch_id = null, $branch_name = null, $branch_description = null, $initiated_date = null, $invoice_init_date = null, $order_no = null, $tax_exemption_no = null, $so_reference = null, $sales_quote_type = null, $order_type = null, $status = null, $bill_type = null, $expected_delivery_date = null, $debtor_id = null, $debtor_account_no = null, $debtor_name = null, $debtor_email_address = null, $debtor_contact_name = null, $delivery_addressee = null, $delivery_address1 = null, $delivery_address2 = null, $delivery_address_suburb = null, $delivery_address_state = null, $delivery_address_contact_name = null, $delivery_address_postcode = null, $delivery_address_country = null, $delivery_address_notes = null, $delivery_address_courier_details = null, $drop_shipment = null, $cartage1_ex_gst = null, $cartage1_gst_rate = null, $cartage1_gst = null, $cartage2_ex_gst = null, $cartage2_gst_rate = null, $cartage2_gst = null, $cartage3_ex_gst = null, $cartage3_gst_rate = null, $cartage3_gst = null, $custom_field_values = null, $notes = null, $documents = null, $lines = null, $histories = null, $cash_sales = null, $job_costing = null, $body = null)
    {
        list($response) = $this->salesQuotePATCHRequestQuoteIDUpdateWithHttpInfo($accept, $quote_id, $jiwa_stateful, $type, $system_settings, $last_saved_date_time, $quote_no, $logical_id, $logical_warehouse_description, $physical_warehouse_description, $staff_id, $staff_user_name, $staff_title, $staff_first_name, $staff_surname, $branch_id, $branch_name, $branch_description, $initiated_date, $invoice_init_date, $order_no, $tax_exemption_no, $so_reference, $sales_quote_type, $order_type, $status, $bill_type, $expected_delivery_date, $debtor_id, $debtor_account_no, $debtor_name, $debtor_email_address, $debtor_contact_name, $delivery_addressee, $delivery_address1, $delivery_address2, $delivery_address_suburb, $delivery_address_state, $delivery_address_contact_name, $delivery_address_postcode, $delivery_address_country, $delivery_address_notes, $delivery_address_courier_details, $drop_shipment, $cartage1_ex_gst, $cartage1_gst_rate, $cartage1_gst, $cartage2_ex_gst, $cartage2_gst_rate, $cartage2_gst, $cartage3_ex_gst, $cartage3_gst_rate, $cartage3_gst, $custom_field_values, $notes, $documents, $lines, $histories, $cash_sales, $job_costing, $body);
        return $response;
    }

    /**
     * Operation salesQuotePATCHRequestQuoteIDUpdateWithHttpInfo
     *
     * Updates a sales Quote.
     *
     * @param  string $accept Accept Header (required)
     * @param  string $quote_id (required)
     * @param  bool $jiwa_stateful Stateful indicator (optional)
     * @param  string $type (optional)
     * @param  string $system_settings (optional)
     * @param  \DateTime $last_saved_date_time (optional)
     * @param  string $quote_no (optional)
     * @param  string $logical_id (optional)
     * @param  string $logical_warehouse_description (optional)
     * @param  string $physical_warehouse_description (optional)
     * @param  string $staff_id (optional)
     * @param  string $staff_user_name (optional)
     * @param  string $staff_title (optional)
     * @param  string $staff_first_name (optional)
     * @param  string $staff_surname (optional)
     * @param  string $branch_id (optional)
     * @param  string $branch_name (optional)
     * @param  string $branch_description (optional)
     * @param  \DateTime $initiated_date (optional)
     * @param  \DateTime $invoice_init_date (optional)
     * @param  string $order_no (optional)
     * @param  string $tax_exemption_no (optional)
     * @param  string $so_reference (optional)
     * @param  string $sales_quote_type (optional)
     * @param  string $order_type (optional)
     * @param  string $status (optional)
     * @param  string $bill_type (optional)
     * @param  \DateTime $expected_delivery_date (optional)
     * @param  string $debtor_id (optional)
     * @param  string $debtor_account_no (optional)
     * @param  string $debtor_name (optional)
     * @param  string $debtor_email_address (optional)
     * @param  string $debtor_contact_name (optional)
     * @param  string $delivery_addressee (optional)
     * @param  string $delivery_address1 (optional)
     * @param  string $delivery_address2 (optional)
     * @param  string $delivery_address_suburb (optional)
     * @param  string $delivery_address_state (optional)
     * @param  string $delivery_address_contact_name (optional)
     * @param  string $delivery_address_postcode (optional)
     * @param  string $delivery_address_country (optional)
     * @param  string $delivery_address_notes (optional)
     * @param  string $delivery_address_courier_details (optional)
     * @param  bool $drop_shipment (optional)
     * @param  double $cartage1_ex_gst (optional)
     * @param  double $cartage1_gst_rate (optional)
     * @param  double $cartage1_gst (optional)
     * @param  double $cartage2_ex_gst (optional)
     * @param  double $cartage2_gst_rate (optional)
     * @param  double $cartage2_gst (optional)
     * @param  double $cartage3_ex_gst (optional)
     * @param  double $cartage3_gst_rate (optional)
     * @param  double $cartage3_gst (optional)
     * @param  string $custom_field_values (optional)
     * @param  string $notes (optional)
     * @param  string $documents (optional)
     * @param  string $lines (optional)
     * @param  string $histories (optional)
     * @param  string $cash_sales (optional)
     * @param  string $job_costing (optional)
     * @param  \Jiwa\Model\SalesQuotePATCHRequest $body (optional)
     *
     * @throws \Jiwa\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Jiwa\Model\SalesQuote, HTTP status code, HTTP response headers (array of strings)
     */
    public function salesQuotePATCHRequestQuoteIDUpdateWithHttpInfo($accept, $quote_id, $jiwa_stateful = null, $type = null, $system_settings = null, $last_saved_date_time = null, $quote_no = null, $logical_id = null, $logical_warehouse_description = null, $physical_warehouse_description = null, $staff_id = null, $staff_user_name = null, $staff_title = null, $staff_first_name = null, $staff_surname = null, $branch_id = null, $branch_name = null, $branch_description = null, $initiated_date = null, $invoice_init_date = null, $order_no = null, $tax_exemption_no = null, $so_reference = null, $sales_quote_type = null, $order_type = null, $status = null, $bill_type = null, $expected_delivery_date = null, $debtor_id = null, $debtor_account_no = null, $debtor_name = null, $debtor_email_address = null, $debtor_contact_name = null, $delivery_addressee = null, $delivery_address1 = null, $delivery_address2 = null, $delivery_address_suburb = null, $delivery_address_state = null, $delivery_address_contact_name = null, $delivery_address_postcode = null, $delivery_address_country = null, $delivery_address_notes = null, $delivery_address_courier_details = null, $drop_shipment = null, $cartage1_ex_gst = null, $cartage1_gst_rate = null, $cartage1_gst = null, $cartage2_ex_gst = null, $cartage2_gst_rate = null, $cartage2_gst = null, $cartage3_ex_gst = null, $cartage3_gst_rate = null, $cartage3_gst = null, $custom_field_values = null, $notes = null, $documents = null, $lines = null, $histories = null, $cash_sales = null, $job_costing = null, $body = null)
    {
        $returnType = '\Jiwa\Model\SalesQuote';
        $request = $this->salesQuotePATCHRequestQuoteIDUpdateRequest($accept, $quote_id, $jiwa_stateful, $type, $system_settings, $last_saved_date_time, $quote_no, $logical_id, $logical_warehouse_description, $physical_warehouse_description, $staff_id, $staff_user_name, $staff_title, $staff_first_name, $staff_surname, $branch_id, $branch_name, $branch_description, $initiated_date, $invoice_init_date, $order_no, $tax_exemption_no, $so_reference, $sales_quote_type, $order_type, $status, $bill_type, $expected_delivery_date, $debtor_id, $debtor_account_no, $debtor_name, $debtor_email_address, $debtor_contact_name, $delivery_addressee, $delivery_address1, $delivery_address2, $delivery_address_suburb, $delivery_address_state, $delivery_address_contact_name, $delivery_address_postcode, $delivery_address_country, $delivery_address_notes, $delivery_address_courier_details, $drop_shipment, $cartage1_ex_gst, $cartage1_gst_rate, $cartage1_gst, $cartage2_ex_gst, $cartage2_gst_rate, $cartage2_gst, $cartage3_ex_gst, $cartage3_gst_rate, $cartage3_gst, $custom_field_values, $notes, $documents, $lines, $histories, $cash_sales, $job_costing, $body);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Jiwa\Model\SalesQuote',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 403:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Jiwa\Model\SalesQuote',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 401:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Jiwa\Model\SalesQuote',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 404:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Jiwa\Model\SalesQuote',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation salesQuotePATCHRequestQuoteIDUpdateAsync
     *
     * Updates a sales Quote.
     *
     * @param  string $accept Accept Header (required)
     * @param  string $quote_id (required)
     * @param  bool $jiwa_stateful Stateful indicator (optional)
     * @param  string $type (optional)
     * @param  string $system_settings (optional)
     * @param  \DateTime $last_saved_date_time (optional)
     * @param  string $quote_no (optional)
     * @param  string $logical_id (optional)
     * @param  string $logical_warehouse_description (optional)
     * @param  string $physical_warehouse_description (optional)
     * @param  string $staff_id (optional)
     * @param  string $staff_user_name (optional)
     * @param  string $staff_title (optional)
     * @param  string $staff_first_name (optional)
     * @param  string $staff_surname (optional)
     * @param  string $branch_id (optional)
     * @param  string $branch_name (optional)
     * @param  string $branch_description (optional)
     * @param  \DateTime $initiated_date (optional)
     * @param  \DateTime $invoice_init_date (optional)
     * @param  string $order_no (optional)
     * @param  string $tax_exemption_no (optional)
     * @param  string $so_reference (optional)
     * @param  string $sales_quote_type (optional)
     * @param  string $order_type (optional)
     * @param  string $status (optional)
     * @param  string $bill_type (optional)
     * @param  \DateTime $expected_delivery_date (optional)
     * @param  string $debtor_id (optional)
     * @param  string $debtor_account_no (optional)
     * @param  string $debtor_name (optional)
     * @param  string $debtor_email_address (optional)
     * @param  string $debtor_contact_name (optional)
     * @param  string $delivery_addressee (optional)
     * @param  string $delivery_address1 (optional)
     * @param  string $delivery_address2 (optional)
     * @param  string $delivery_address_suburb (optional)
     * @param  string $delivery_address_state (optional)
     * @param  string $delivery_address_contact_name (optional)
     * @param  string $delivery_address_postcode (optional)
     * @param  string $delivery_address_country (optional)
     * @param  string $delivery_address_notes (optional)
     * @param  string $delivery_address_courier_details (optional)
     * @param  bool $drop_shipment (optional)
     * @param  double $cartage1_ex_gst (optional)
     * @param  double $cartage1_gst_rate (optional)
     * @param  double $cartage1_gst (optional)
     * @param  double $cartage2_ex_gst (optional)
     * @param  double $cartage2_gst_rate (optional)
     * @param  double $cartage2_gst (optional)
     * @param  double $cartage3_ex_gst (optional)
     * @param  double $cartage3_gst_rate (optional)
     * @param  double $cartage3_gst (optional)
     * @param  string $custom_field_values (optional)
     * @param  string $notes (optional)
     * @param  string $documents (optional)
     * @param  string $lines (optional)
     * @param  string $histories (optional)
     * @param  string $cash_sales (optional)
     * @param  string $job_costing (optional)
     * @param  \Jiwa\Model\SalesQuotePATCHRequest $body (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function salesQuotePATCHRequestQuoteIDUpdateAsync($accept, $quote_id, $jiwa_stateful = null, $type = null, $system_settings = null, $last_saved_date_time = null, $quote_no = null, $logical_id = null, $logical_warehouse_description = null, $physical_warehouse_description = null, $staff_id = null, $staff_user_name = null, $staff_title = null, $staff_first_name = null, $staff_surname = null, $branch_id = null, $branch_name = null, $branch_description = null, $initiated_date = null, $invoice_init_date = null, $order_no = null, $tax_exemption_no = null, $so_reference = null, $sales_quote_type = null, $order_type = null, $status = null, $bill_type = null, $expected_delivery_date = null, $debtor_id = null, $debtor_account_no = null, $debtor_name = null, $debtor_email_address = null, $debtor_contact_name = null, $delivery_addressee = null, $delivery_address1 = null, $delivery_address2 = null, $delivery_address_suburb = null, $delivery_address_state = null, $delivery_address_contact_name = null, $delivery_address_postcode = null, $delivery_address_country = null, $delivery_address_notes = null, $delivery_address_courier_details = null, $drop_shipment = null, $cartage1_ex_gst = null, $cartage1_gst_rate = null, $cartage1_gst = null, $cartage2_ex_gst = null, $cartage2_gst_rate = null, $cartage2_gst = null, $cartage3_ex_gst = null, $cartage3_gst_rate = null, $cartage3_gst = null, $custom_field_values = null, $notes = null, $documents = null, $lines = null, $histories = null, $cash_sales = null, $job_costing = null, $body = null)
    {
        return $this->salesQuotePATCHRequestQuoteIDUpdateAsyncWithHttpInfo($accept, $quote_id, $jiwa_stateful, $type, $system_settings, $last_saved_date_time, $quote_no, $logical_id, $logical_warehouse_description, $physical_warehouse_description, $staff_id, $staff_user_name, $staff_title, $staff_first_name, $staff_surname, $branch_id, $branch_name, $branch_description, $initiated_date, $invoice_init_date, $order_no, $tax_exemption_no, $so_reference, $sales_quote_type, $order_type, $status, $bill_type, $expected_delivery_date, $debtor_id, $debtor_account_no, $debtor_name, $debtor_email_address, $debtor_contact_name, $delivery_addressee, $delivery_address1, $delivery_address2, $delivery_address_suburb, $delivery_address_state, $delivery_address_contact_name, $delivery_address_postcode, $delivery_address_country, $delivery_address_notes, $delivery_address_courier_details, $drop_shipment, $cartage1_ex_gst, $cartage1_gst_rate, $cartage1_gst, $cartage2_ex_gst, $cartage2_gst_rate, $cartage2_gst, $cartage3_ex_gst, $cartage3_gst_rate, $cartage3_gst, $custom_field_values, $notes, $documents, $lines, $histories, $cash_sales, $job_costing, $body)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation salesQuotePATCHRequestQuoteIDUpdateAsyncWithHttpInfo
     *
     * Updates a sales Quote.
     *
     * @param  string $accept Accept Header (required)
     * @param  string $quote_id (required)
     * @param  bool $jiwa_stateful Stateful indicator (optional)
     * @param  string $type (optional)
     * @param  string $system_settings (optional)
     * @param  \DateTime $last_saved_date_time (optional)
     * @param  string $quote_no (optional)
     * @param  string $logical_id (optional)
     * @param  string $logical_warehouse_description (optional)
     * @param  string $physical_warehouse_description (optional)
     * @param  string $staff_id (optional)
     * @param  string $staff_user_name (optional)
     * @param  string $staff_title (optional)
     * @param  string $staff_first_name (optional)
     * @param  string $staff_surname (optional)
     * @param  string $branch_id (optional)
     * @param  string $branch_name (optional)
     * @param  string $branch_description (optional)
     * @param  \DateTime $initiated_date (optional)
     * @param  \DateTime $invoice_init_date (optional)
     * @param  string $order_no (optional)
     * @param  string $tax_exemption_no (optional)
     * @param  string $so_reference (optional)
     * @param  string $sales_quote_type (optional)
     * @param  string $order_type (optional)
     * @param  string $status (optional)
     * @param  string $bill_type (optional)
     * @param  \DateTime $expected_delivery_date (optional)
     * @param  string $debtor_id (optional)
     * @param  string $debtor_account_no (optional)
     * @param  string $debtor_name (optional)
     * @param  string $debtor_email_address (optional)
     * @param  string $debtor_contact_name (optional)
     * @param  string $delivery_addressee (optional)
     * @param  string $delivery_address1 (optional)
     * @param  string $delivery_address2 (optional)
     * @param  string $delivery_address_suburb (optional)
     * @param  string $delivery_address_state (optional)
     * @param  string $delivery_address_contact_name (optional)
     * @param  string $delivery_address_postcode (optional)
     * @param  string $delivery_address_country (optional)
     * @param  string $delivery_address_notes (optional)
     * @param  string $delivery_address_courier_details (optional)
     * @param  bool $drop_shipment (optional)
     * @param  double $cartage1_ex_gst (optional)
     * @param  double $cartage1_gst_rate (optional)
     * @param  double $cartage1_gst (optional)
     * @param  double $cartage2_ex_gst (optional)
     * @param  double $cartage2_gst_rate (optional)
     * @param  double $cartage2_gst (optional)
     * @param  double $cartage3_ex_gst (optional)
     * @param  double $cartage3_gst_rate (optional)
     * @param  double $cartage3_gst (optional)
     * @param  string $custom_field_values (optional)
     * @param  string $notes (optional)
     * @param  string $documents (optional)
     * @param  string $lines (optional)
     * @param  string $histories (optional)
     * @param  string $cash_sales (optional)
     * @param  string $job_costing (optional)
     * @param  \Jiwa\Model\SalesQuotePATCHRequest $body (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function salesQuotePATCHRequestQuoteIDUpdateAsyncWithHttpInfo($accept, $quote_id, $jiwa_stateful = null, $type = null, $system_settings = null, $last_saved_date_time = null, $quote_no = null, $logical_id = null, $logical_warehouse_description = null, $physical_warehouse_description = null, $staff_id = null, $staff_user_name = null, $staff_title = null, $staff_first_name = null, $staff_surname = null, $branch_id = null, $branch_name = null, $branch_description = null, $initiated_date = null, $invoice_init_date = null, $order_no = null, $tax_exemption_no = null, $so_reference = null, $sales_quote_type = null, $order_type = null, $status = null, $bill_type = null, $expected_delivery_date = null, $debtor_id = null, $debtor_account_no = null, $debtor_name = null, $debtor_email_address = null, $debtor_contact_name = null, $delivery_addressee = null, $delivery_address1 = null, $delivery_address2 = null, $delivery_address_suburb = null, $delivery_address_state = null, $delivery_address_contact_name = null, $delivery_address_postcode = null, $delivery_address_country = null, $delivery_address_notes = null, $delivery_address_courier_details = null, $drop_shipment = null, $cartage1_ex_gst = null, $cartage1_gst_rate = null, $cartage1_gst = null, $cartage2_ex_gst = null, $cartage2_gst_rate = null, $cartage2_gst = null, $cartage3_ex_gst = null, $cartage3_gst_rate = null, $cartage3_gst = null, $custom_field_values = null, $notes = null, $documents = null, $lines = null, $histories = null, $cash_sales = null, $job_costing = null, $body = null)
    {
        $returnType = '\Jiwa\Model\SalesQuote';
        $request = $this->salesQuotePATCHRequestQuoteIDUpdateRequest($accept, $quote_id, $jiwa_stateful, $type, $system_settings, $last_saved_date_time, $quote_no, $logical_id, $logical_warehouse_description, $physical_warehouse_description, $staff_id, $staff_user_name, $staff_title, $staff_first_name, $staff_surname, $branch_id, $branch_name, $branch_description, $initiated_date, $invoice_init_date, $order_no, $tax_exemption_no, $so_reference, $sales_quote_type, $order_type, $status, $bill_type, $expected_delivery_date, $debtor_id, $debtor_account_no, $debtor_name, $debtor_email_address, $debtor_contact_name, $delivery_addressee, $delivery_address1, $delivery_address2, $delivery_address_suburb, $delivery_address_state, $delivery_address_contact_name, $delivery_address_postcode, $delivery_address_country, $delivery_address_notes, $delivery_address_courier_details, $drop_shipment, $cartage1_ex_gst, $cartage1_gst_rate, $cartage1_gst, $cartage2_ex_gst, $cartage2_gst_rate, $cartage2_gst, $cartage3_ex_gst, $cartage3_gst_rate, $cartage3_gst, $custom_field_values, $notes, $documents, $lines, $histories, $cash_sales, $job_costing, $body);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'salesQuotePATCHRequestQuoteIDUpdate'
     *
     * @param  string $accept Accept Header (required)
     * @param  string $quote_id (required)
     * @param  bool $jiwa_stateful Stateful indicator (optional)
     * @param  string $type (optional)
     * @param  string $system_settings (optional)
     * @param  \DateTime $last_saved_date_time (optional)
     * @param  string $quote_no (optional)
     * @param  string $logical_id (optional)
     * @param  string $logical_warehouse_description (optional)
     * @param  string $physical_warehouse_description (optional)
     * @param  string $staff_id (optional)
     * @param  string $staff_user_name (optional)
     * @param  string $staff_title (optional)
     * @param  string $staff_first_name (optional)
     * @param  string $staff_surname (optional)
     * @param  string $branch_id (optional)
     * @param  string $branch_name (optional)
     * @param  string $branch_description (optional)
     * @param  \DateTime $initiated_date (optional)
     * @param  \DateTime $invoice_init_date (optional)
     * @param  string $order_no (optional)
     * @param  string $tax_exemption_no (optional)
     * @param  string $so_reference (optional)
     * @param  string $sales_quote_type (optional)
     * @param  string $order_type (optional)
     * @param  string $status (optional)
     * @param  string $bill_type (optional)
     * @param  \DateTime $expected_delivery_date (optional)
     * @param  string $debtor_id (optional)
     * @param  string $debtor_account_no (optional)
     * @param  string $debtor_name (optional)
     * @param  string $debtor_email_address (optional)
     * @param  string $debtor_contact_name (optional)
     * @param  string $delivery_addressee (optional)
     * @param  string $delivery_address1 (optional)
     * @param  string $delivery_address2 (optional)
     * @param  string $delivery_address_suburb (optional)
     * @param  string $delivery_address_state (optional)
     * @param  string $delivery_address_contact_name (optional)
     * @param  string $delivery_address_postcode (optional)
     * @param  string $delivery_address_country (optional)
     * @param  string $delivery_address_notes (optional)
     * @param  string $delivery_address_courier_details (optional)
     * @param  bool $drop_shipment (optional)
     * @param  double $cartage1_ex_gst (optional)
     * @param  double $cartage1_gst_rate (optional)
     * @param  double $cartage1_gst (optional)
     * @param  double $cartage2_ex_gst (optional)
     * @param  double $cartage2_gst_rate (optional)
     * @param  double $cartage2_gst (optional)
     * @param  double $cartage3_ex_gst (optional)
     * @param  double $cartage3_gst_rate (optional)
     * @param  double $cartage3_gst (optional)
     * @param  string $custom_field_values (optional)
     * @param  string $notes (optional)
     * @param  string $documents (optional)
     * @param  string $lines (optional)
     * @param  string $histories (optional)
     * @param  string $cash_sales (optional)
     * @param  string $job_costing (optional)
     * @param  \Jiwa\Model\SalesQuotePATCHRequest $body (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function salesQuotePATCHRequestQuoteIDUpdateRequest($accept, $quote_id, $jiwa_stateful = null, $type = null, $system_settings = null, $last_saved_date_time = null, $quote_no = null, $logical_id = null, $logical_warehouse_description = null, $physical_warehouse_description = null, $staff_id = null, $staff_user_name = null, $staff_title = null, $staff_first_name = null, $staff_surname = null, $branch_id = null, $branch_name = null, $branch_description = null, $initiated_date = null, $invoice_init_date = null, $order_no = null, $tax_exemption_no = null, $so_reference = null, $sales_quote_type = null, $order_type = null, $status = null, $bill_type = null, $expected_delivery_date = null, $debtor_id = null, $debtor_account_no = null, $debtor_name = null, $debtor_email_address = null, $debtor_contact_name = null, $delivery_addressee = null, $delivery_address1 = null, $delivery_address2 = null, $delivery_address_suburb = null, $delivery_address_state = null, $delivery_address_contact_name = null, $delivery_address_postcode = null, $delivery_address_country = null, $delivery_address_notes = null, $delivery_address_courier_details = null, $drop_shipment = null, $cartage1_ex_gst = null, $cartage1_gst_rate = null, $cartage1_gst = null, $cartage2_ex_gst = null, $cartage2_gst_rate = null, $cartage2_gst = null, $cartage3_ex_gst = null, $cartage3_gst_rate = null, $cartage3_gst = null, $custom_field_values = null, $notes = null, $documents = null, $lines = null, $histories = null, $cash_sales = null, $job_costing = null, $body = null)
    {
        // verify the required parameter 'accept' is set
        if ($accept === null || (is_array($accept) && count($accept) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $accept when calling salesQuotePATCHRequestQuoteIDUpdate'
            );
        }
        // verify the required parameter 'quote_id' is set
        if ($quote_id === null || (is_array($quote_id) && count($quote_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $quote_id when calling salesQuotePATCHRequestQuoteIDUpdate'
            );
        }

        $resourcePath = '/SalesQuotes/{QuoteID}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        if ($type !== null) {
            $queryParams['Type'] = ObjectSerializer::toQueryValue($type);
        }
        // query params
        if ($system_settings !== null) {
            $queryParams['SystemSettings'] = ObjectSerializer::toQueryValue($system_settings);
        }
        // query params
        if ($last_saved_date_time !== null) {
            $queryParams['LastSavedDateTime'] = ObjectSerializer::toQueryValue($last_saved_date_time);
        }
        // query params
        if ($quote_no !== null) {
            $queryParams['QuoteNo'] = ObjectSerializer::toQueryValue($quote_no);
        }
        // query params
        if ($logical_id !== null) {
            $queryParams['LogicalID'] = ObjectSerializer::toQueryValue($logical_id);
        }
        // query params
        if ($logical_warehouse_description !== null) {
            $queryParams['LogicalWarehouseDescription'] = ObjectSerializer::toQueryValue($logical_warehouse_description);
        }
        // query params
        if ($physical_warehouse_description !== null) {
            $queryParams['PhysicalWarehouseDescription'] = ObjectSerializer::toQueryValue($physical_warehouse_description);
        }
        // query params
        if ($staff_id !== null) {
            $queryParams['StaffID'] = ObjectSerializer::toQueryValue($staff_id);
        }
        // query params
        if ($staff_user_name !== null) {
            $queryParams['StaffUserName'] = ObjectSerializer::toQueryValue($staff_user_name);
        }
        // query params
        if ($staff_title !== null) {
            $queryParams['StaffTitle'] = ObjectSerializer::toQueryValue($staff_title);
        }
        // query params
        if ($staff_first_name !== null) {
            $queryParams['StaffFirstName'] = ObjectSerializer::toQueryValue($staff_first_name);
        }
        // query params
        if ($staff_surname !== null) {
            $queryParams['StaffSurname'] = ObjectSerializer::toQueryValue($staff_surname);
        }
        // query params
        if ($branch_id !== null) {
            $queryParams['BranchID'] = ObjectSerializer::toQueryValue($branch_id);
        }
        // query params
        if ($branch_name !== null) {
            $queryParams['BranchName'] = ObjectSerializer::toQueryValue($branch_name);
        }
        // query params
        if ($branch_description !== null) {
            $queryParams['BranchDescription'] = ObjectSerializer::toQueryValue($branch_description);
        }
        // query params
        if ($initiated_date !== null) {
            $queryParams['InitiatedDate'] = ObjectSerializer::toQueryValue($initiated_date);
        }
        // query params
        if ($invoice_init_date !== null) {
            $queryParams['InvoiceInitDate'] = ObjectSerializer::toQueryValue($invoice_init_date);
        }
        // query params
        if ($order_no !== null) {
            $queryParams['OrderNo'] = ObjectSerializer::toQueryValue($order_no);
        }
        // query params
        if ($tax_exemption_no !== null) {
            $queryParams['TaxExemptionNo'] = ObjectSerializer::toQueryValue($tax_exemption_no);
        }
        // query params
        if ($so_reference !== null) {
            $queryParams['SOReference'] = ObjectSerializer::toQueryValue($so_reference);
        }
        // query params
        if ($sales_quote_type !== null) {
            $queryParams['SalesQuoteType'] = ObjectSerializer::toQueryValue($sales_quote_type);
        }
        // query params
        if ($order_type !== null) {
            $queryParams['OrderType'] = ObjectSerializer::toQueryValue($order_type);
        }
        // query params
        if ($status !== null) {
            $queryParams['Status'] = ObjectSerializer::toQueryValue($status);
        }
        // query params
        if ($bill_type !== null) {
            $queryParams['BillType'] = ObjectSerializer::toQueryValue($bill_type);
        }
        // query params
        if ($expected_delivery_date !== null) {
            $queryParams['ExpectedDeliveryDate'] = ObjectSerializer::toQueryValue($expected_delivery_date);
        }
        // query params
        if ($debtor_id !== null) {
            $queryParams['DebtorID'] = ObjectSerializer::toQueryValue($debtor_id);
        }
        // query params
        if ($debtor_account_no !== null) {
            $queryParams['DebtorAccountNo'] = ObjectSerializer::toQueryValue($debtor_account_no);
        }
        // query params
        if ($debtor_name !== null) {
            $queryParams['DebtorName'] = ObjectSerializer::toQueryValue($debtor_name);
        }
        // query params
        if ($debtor_email_address !== null) {
            $queryParams['DebtorEmailAddress'] = ObjectSerializer::toQueryValue($debtor_email_address);
        }
        // query params
        if ($debtor_contact_name !== null) {
            $queryParams['DebtorContactName'] = ObjectSerializer::toQueryValue($debtor_contact_name);
        }
        // query params
        if ($delivery_addressee !== null) {
            $queryParams['DeliveryAddressee'] = ObjectSerializer::toQueryValue($delivery_addressee);
        }
        // query params
        if ($delivery_address1 !== null) {
            $queryParams['DeliveryAddress1'] = ObjectSerializer::toQueryValue($delivery_address1);
        }
        // query params
        if ($delivery_address2 !== null) {
            $queryParams['DeliveryAddress2'] = ObjectSerializer::toQueryValue($delivery_address2);
        }
        // query params
        if ($delivery_address_suburb !== null) {
            $queryParams['DeliveryAddressSuburb'] = ObjectSerializer::toQueryValue($delivery_address_suburb);
        }
        // query params
        if ($delivery_address_state !== null) {
            $queryParams['DeliveryAddressState'] = ObjectSerializer::toQueryValue($delivery_address_state);
        }
        // query params
        if ($delivery_address_contact_name !== null) {
            $queryParams['DeliveryAddressContactName'] = ObjectSerializer::toQueryValue($delivery_address_contact_name);
        }
        // query params
        if ($delivery_address_postcode !== null) {
            $queryParams['DeliveryAddressPostcode'] = ObjectSerializer::toQueryValue($delivery_address_postcode);
        }
        // query params
        if ($delivery_address_country !== null) {
            $queryParams['DeliveryAddressCountry'] = ObjectSerializer::toQueryValue($delivery_address_country);
        }
        // query params
        if ($delivery_address_notes !== null) {
            $queryParams['DeliveryAddressNotes'] = ObjectSerializer::toQueryValue($delivery_address_notes);
        }
        // query params
        if ($delivery_address_courier_details !== null) {
            $queryParams['DeliveryAddressCourierDetails'] = ObjectSerializer::toQueryValue($delivery_address_courier_details);
        }
        // query params
        if ($drop_shipment !== null) {
            $queryParams['DropShipment'] = ObjectSerializer::toQueryValue($drop_shipment);
        }
        // query params
        if ($cartage1_ex_gst !== null) {
            $queryParams['Cartage1ExGst'] = ObjectSerializer::toQueryValue($cartage1_ex_gst);
        }
        // query params
        if ($cartage1_gst_rate !== null) {
            $queryParams['Cartage1GstRate'] = ObjectSerializer::toQueryValue($cartage1_gst_rate);
        }
        // query params
        if ($cartage1_gst !== null) {
            $queryParams['Cartage1Gst'] = ObjectSerializer::toQueryValue($cartage1_gst);
        }
        // query params
        if ($cartage2_ex_gst !== null) {
            $queryParams['Cartage2ExGst'] = ObjectSerializer::toQueryValue($cartage2_ex_gst);
        }
        // query params
        if ($cartage2_gst_rate !== null) {
            $queryParams['Cartage2GstRate'] = ObjectSerializer::toQueryValue($cartage2_gst_rate);
        }
        // query params
        if ($cartage2_gst !== null) {
            $queryParams['Cartage2Gst'] = ObjectSerializer::toQueryValue($cartage2_gst);
        }
        // query params
        if ($cartage3_ex_gst !== null) {
            $queryParams['Cartage3ExGst'] = ObjectSerializer::toQueryValue($cartage3_ex_gst);
        }
        // query params
        if ($cartage3_gst_rate !== null) {
            $queryParams['Cartage3GstRate'] = ObjectSerializer::toQueryValue($cartage3_gst_rate);
        }
        // query params
        if ($cartage3_gst !== null) {
            $queryParams['Cartage3Gst'] = ObjectSerializer::toQueryValue($cartage3_gst);
        }
        // query params
        if ($custom_field_values !== null) {
            $queryParams['CustomFieldValues'] = ObjectSerializer::toQueryValue($custom_field_values);
        }
        // query params
        if ($notes !== null) {
            $queryParams['Notes'] = ObjectSerializer::toQueryValue($notes);
        }
        // query params
        if ($documents !== null) {
            $queryParams['Documents'] = ObjectSerializer::toQueryValue($documents);
        }
        // query params
        if ($lines !== null) {
            $queryParams['Lines'] = ObjectSerializer::toQueryValue($lines);
        }
        // query params
        if ($histories !== null) {
            $queryParams['Histories'] = ObjectSerializer::toQueryValue($histories);
        }
        // query params
        if ($cash_sales !== null) {
            $queryParams['CashSales'] = ObjectSerializer::toQueryValue($cash_sales);
        }
        // query params
        if ($job_costing !== null) {
            $queryParams['JobCosting'] = ObjectSerializer::toQueryValue($job_costing);
        }
        // header params
        if ($accept !== null) {
            $headerParams['Accept'] = ObjectSerializer::toHeaderValue($accept);
        }
        // header params
        if ($jiwa_stateful !== null) {
            $headerParams['jiwa-stateful'] = ObjectSerializer::toHeaderValue($jiwa_stateful);
        }

        // path params
        if ($quote_id !== null) {
            $resourcePath = str_replace(
                '{' . 'QuoteID' . '}',
                ObjectSerializer::toPathValue($quote_id),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;
        if (isset($body)) {
            $_tempBody = $body;
        }

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json', 'application/xml']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json', 'application/xml'],
                ['application/x-www-form-urlencoded', 'application/json', 'application/xml']
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            
            if($headers['Content-Type'] === 'application/json') {
                // \stdClass has no __toString(), so we should encode it manually
                if ($httpBody instanceof \stdClass) {
                    $httpBody = \GuzzleHttp\json_encode($httpBody);
                }
                // array has no __toString(), so we should encode it manually
                if(is_array($httpBody)) {
                    $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($httpBody));
                }
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\Query::build($formParams);
            }
        }

        // this endpoint requires HTTP basic authentication
        if ($this->config->getUsername() !== null || $this->config->getPassword() !== null) {
            $headers['Authorization'] = 'Basic ' . base64_encode($this->config->getUsername() . ":" . $this->config->getPassword());
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\Query::build($queryParams);
        return new Request(
            'PATCH',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation salesQuotePOSTRequestPost
     *
     * Creates a new sales Quote.
     *
     * @param  string $accept Accept Header (required)
     * @param  bool $jiwa_stateful Stateful indicator (optional)
     * @param  string $type type (optional)
     * @param  string $system_settings system_settings (optional)
     * @param  string $quote_no quote_no (optional)
     * @param  string $logical_id logical_id (optional)
     * @param  string $logical_warehouse_description logical_warehouse_description (optional)
     * @param  string $physical_warehouse_description physical_warehouse_description (optional)
     * @param  string $staff_id staff_id (optional)
     * @param  string $staff_user_name staff_user_name (optional)
     * @param  string $staff_title staff_title (optional)
     * @param  string $staff_first_name staff_first_name (optional)
     * @param  string $staff_surname staff_surname (optional)
     * @param  string $branch_id branch_id (optional)
     * @param  string $branch_name branch_name (optional)
     * @param  string $branch_description branch_description (optional)
     * @param  \DateTime $initiated_date initiated_date (optional)
     * @param  \DateTime $invoice_init_date invoice_init_date (optional)
     * @param  string $order_no order_no (optional)
     * @param  string $tax_exemption_no tax_exemption_no (optional)
     * @param  string $so_reference so_reference (optional)
     * @param  string $sales_quote_type sales_quote_type (optional)
     * @param  string $order_type order_type (optional)
     * @param  string $status status (optional)
     * @param  string $bill_type bill_type (optional)
     * @param  \DateTime $expected_delivery_date expected_delivery_date (optional)
     * @param  string $debtor_id debtor_id (optional)
     * @param  string $debtor_account_no debtor_account_no (optional)
     * @param  string $debtor_name debtor_name (optional)
     * @param  string $debtor_email_address debtor_email_address (optional)
     * @param  string $debtor_contact_name debtor_contact_name (optional)
     * @param  string $delivery_addressee delivery_addressee (optional)
     * @param  string $delivery_address1 delivery_address1 (optional)
     * @param  string $delivery_address2 delivery_address2 (optional)
     * @param  string $delivery_address_suburb delivery_address_suburb (optional)
     * @param  string $delivery_address_state delivery_address_state (optional)
     * @param  string $delivery_address_contact_name delivery_address_contact_name (optional)
     * @param  string $delivery_address_postcode delivery_address_postcode (optional)
     * @param  string $delivery_address_country delivery_address_country (optional)
     * @param  string $delivery_address_notes delivery_address_notes (optional)
     * @param  string $delivery_address_courier_details delivery_address_courier_details (optional)
     * @param  bool $drop_shipment drop_shipment (optional)
     * @param  double $cartage1_ex_gst cartage1_ex_gst (optional)
     * @param  double $cartage1_gst_rate cartage1_gst_rate (optional)
     * @param  double $cartage1_gst cartage1_gst (optional)
     * @param  double $cartage2_ex_gst cartage2_ex_gst (optional)
     * @param  double $cartage2_gst_rate cartage2_gst_rate (optional)
     * @param  double $cartage2_gst cartage2_gst (optional)
     * @param  double $cartage3_ex_gst cartage3_ex_gst (optional)
     * @param  double $cartage3_gst_rate cartage3_gst_rate (optional)
     * @param  double $cartage3_gst cartage3_gst (optional)
     * @param  string $custom_field_values custom_field_values (optional)
     * @param  string $notes notes (optional)
     * @param  string $documents documents (optional)
     * @param  string $lines lines (optional)
     * @param  string $histories histories (optional)
     * @param  string $cash_sales cash_sales (optional)
     * @param  string $job_costing job_costing (optional)
     * @param  \Jiwa\Model\SalesQuotePOSTRequest $body body (optional)
     *
     * @throws \Jiwa\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Jiwa\Model\SalesQuote
     */
    public function salesQuotePOSTRequestPost($accept, $jiwa_stateful = null, $type = null, $system_settings = null, $quote_no = null, $logical_id = null, $logical_warehouse_description = null, $physical_warehouse_description = null, $staff_id = null, $staff_user_name = null, $staff_title = null, $staff_first_name = null, $staff_surname = null, $branch_id = null, $branch_name = null, $branch_description = null, $initiated_date = null, $invoice_init_date = null, $order_no = null, $tax_exemption_no = null, $so_reference = null, $sales_quote_type = null, $order_type = null, $status = null, $bill_type = null, $expected_delivery_date = null, $debtor_id = null, $debtor_account_no = null, $debtor_name = null, $debtor_email_address = null, $debtor_contact_name = null, $delivery_addressee = null, $delivery_address1 = null, $delivery_address2 = null, $delivery_address_suburb = null, $delivery_address_state = null, $delivery_address_contact_name = null, $delivery_address_postcode = null, $delivery_address_country = null, $delivery_address_notes = null, $delivery_address_courier_details = null, $drop_shipment = null, $cartage1_ex_gst = null, $cartage1_gst_rate = null, $cartage1_gst = null, $cartage2_ex_gst = null, $cartage2_gst_rate = null, $cartage2_gst = null, $cartage3_ex_gst = null, $cartage3_gst_rate = null, $cartage3_gst = null, $custom_field_values = null, $notes = null, $documents = null, $lines = null, $histories = null, $cash_sales = null, $job_costing = null, $body = null)
    {
        list($response) = $this->salesQuotePOSTRequestPostWithHttpInfo($accept, $jiwa_stateful, $type, $system_settings, $quote_no, $logical_id, $logical_warehouse_description, $physical_warehouse_description, $staff_id, $staff_user_name, $staff_title, $staff_first_name, $staff_surname, $branch_id, $branch_name, $branch_description, $initiated_date, $invoice_init_date, $order_no, $tax_exemption_no, $so_reference, $sales_quote_type, $order_type, $status, $bill_type, $expected_delivery_date, $debtor_id, $debtor_account_no, $debtor_name, $debtor_email_address, $debtor_contact_name, $delivery_addressee, $delivery_address1, $delivery_address2, $delivery_address_suburb, $delivery_address_state, $delivery_address_contact_name, $delivery_address_postcode, $delivery_address_country, $delivery_address_notes, $delivery_address_courier_details, $drop_shipment, $cartage1_ex_gst, $cartage1_gst_rate, $cartage1_gst, $cartage2_ex_gst, $cartage2_gst_rate, $cartage2_gst, $cartage3_ex_gst, $cartage3_gst_rate, $cartage3_gst, $custom_field_values, $notes, $documents, $lines, $histories, $cash_sales, $job_costing, $body);
        return $response;
    }

    /**
     * Operation salesQuotePOSTRequestPostWithHttpInfo
     *
     * Creates a new sales Quote.
     *
     * @param  string $accept Accept Header (required)
     * @param  bool $jiwa_stateful Stateful indicator (optional)
     * @param  string $type (optional)
     * @param  string $system_settings (optional)
     * @param  string $quote_no (optional)
     * @param  string $logical_id (optional)
     * @param  string $logical_warehouse_description (optional)
     * @param  string $physical_warehouse_description (optional)
     * @param  string $staff_id (optional)
     * @param  string $staff_user_name (optional)
     * @param  string $staff_title (optional)
     * @param  string $staff_first_name (optional)
     * @param  string $staff_surname (optional)
     * @param  string $branch_id (optional)
     * @param  string $branch_name (optional)
     * @param  string $branch_description (optional)
     * @param  \DateTime $initiated_date (optional)
     * @param  \DateTime $invoice_init_date (optional)
     * @param  string $order_no (optional)
     * @param  string $tax_exemption_no (optional)
     * @param  string $so_reference (optional)
     * @param  string $sales_quote_type (optional)
     * @param  string $order_type (optional)
     * @param  string $status (optional)
     * @param  string $bill_type (optional)
     * @param  \DateTime $expected_delivery_date (optional)
     * @param  string $debtor_id (optional)
     * @param  string $debtor_account_no (optional)
     * @param  string $debtor_name (optional)
     * @param  string $debtor_email_address (optional)
     * @param  string $debtor_contact_name (optional)
     * @param  string $delivery_addressee (optional)
     * @param  string $delivery_address1 (optional)
     * @param  string $delivery_address2 (optional)
     * @param  string $delivery_address_suburb (optional)
     * @param  string $delivery_address_state (optional)
     * @param  string $delivery_address_contact_name (optional)
     * @param  string $delivery_address_postcode (optional)
     * @param  string $delivery_address_country (optional)
     * @param  string $delivery_address_notes (optional)
     * @param  string $delivery_address_courier_details (optional)
     * @param  bool $drop_shipment (optional)
     * @param  double $cartage1_ex_gst (optional)
     * @param  double $cartage1_gst_rate (optional)
     * @param  double $cartage1_gst (optional)
     * @param  double $cartage2_ex_gst (optional)
     * @param  double $cartage2_gst_rate (optional)
     * @param  double $cartage2_gst (optional)
     * @param  double $cartage3_ex_gst (optional)
     * @param  double $cartage3_gst_rate (optional)
     * @param  double $cartage3_gst (optional)
     * @param  string $custom_field_values (optional)
     * @param  string $notes (optional)
     * @param  string $documents (optional)
     * @param  string $lines (optional)
     * @param  string $histories (optional)
     * @param  string $cash_sales (optional)
     * @param  string $job_costing (optional)
     * @param  \Jiwa\Model\SalesQuotePOSTRequest $body (optional)
     *
     * @throws \Jiwa\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Jiwa\Model\SalesQuote, HTTP status code, HTTP response headers (array of strings)
     */
    public function salesQuotePOSTRequestPostWithHttpInfo($accept, $jiwa_stateful = null, $type = null, $system_settings = null, $quote_no = null, $logical_id = null, $logical_warehouse_description = null, $physical_warehouse_description = null, $staff_id = null, $staff_user_name = null, $staff_title = null, $staff_first_name = null, $staff_surname = null, $branch_id = null, $branch_name = null, $branch_description = null, $initiated_date = null, $invoice_init_date = null, $order_no = null, $tax_exemption_no = null, $so_reference = null, $sales_quote_type = null, $order_type = null, $status = null, $bill_type = null, $expected_delivery_date = null, $debtor_id = null, $debtor_account_no = null, $debtor_name = null, $debtor_email_address = null, $debtor_contact_name = null, $delivery_addressee = null, $delivery_address1 = null, $delivery_address2 = null, $delivery_address_suburb = null, $delivery_address_state = null, $delivery_address_contact_name = null, $delivery_address_postcode = null, $delivery_address_country = null, $delivery_address_notes = null, $delivery_address_courier_details = null, $drop_shipment = null, $cartage1_ex_gst = null, $cartage1_gst_rate = null, $cartage1_gst = null, $cartage2_ex_gst = null, $cartage2_gst_rate = null, $cartage2_gst = null, $cartage3_ex_gst = null, $cartage3_gst_rate = null, $cartage3_gst = null, $custom_field_values = null, $notes = null, $documents = null, $lines = null, $histories = null, $cash_sales = null, $job_costing = null, $body = null)
    {
        $returnType = '\Jiwa\Model\SalesQuote';
        $request = $this->salesQuotePOSTRequestPostRequest($accept, $jiwa_stateful, $type, $system_settings, $quote_no, $logical_id, $logical_warehouse_description, $physical_warehouse_description, $staff_id, $staff_user_name, $staff_title, $staff_first_name, $staff_surname, $branch_id, $branch_name, $branch_description, $initiated_date, $invoice_init_date, $order_no, $tax_exemption_no, $so_reference, $sales_quote_type, $order_type, $status, $bill_type, $expected_delivery_date, $debtor_id, $debtor_account_no, $debtor_name, $debtor_email_address, $debtor_contact_name, $delivery_addressee, $delivery_address1, $delivery_address2, $delivery_address_suburb, $delivery_address_state, $delivery_address_contact_name, $delivery_address_postcode, $delivery_address_country, $delivery_address_notes, $delivery_address_courier_details, $drop_shipment, $cartage1_ex_gst, $cartage1_gst_rate, $cartage1_gst, $cartage2_ex_gst, $cartage2_gst_rate, $cartage2_gst, $cartage3_ex_gst, $cartage3_gst_rate, $cartage3_gst, $custom_field_values, $notes, $documents, $lines, $histories, $cash_sales, $job_costing, $body);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Jiwa\Model\SalesQuote',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 201:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Jiwa\Model\SalesQuote',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 401:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Jiwa\Model\SalesQuote',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 403:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Jiwa\Model\SalesQuote',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation salesQuotePOSTRequestPostAsync
     *
     * Creates a new sales Quote.
     *
     * @param  string $accept Accept Header (required)
     * @param  bool $jiwa_stateful Stateful indicator (optional)
     * @param  string $type (optional)
     * @param  string $system_settings (optional)
     * @param  string $quote_no (optional)
     * @param  string $logical_id (optional)
     * @param  string $logical_warehouse_description (optional)
     * @param  string $physical_warehouse_description (optional)
     * @param  string $staff_id (optional)
     * @param  string $staff_user_name (optional)
     * @param  string $staff_title (optional)
     * @param  string $staff_first_name (optional)
     * @param  string $staff_surname (optional)
     * @param  string $branch_id (optional)
     * @param  string $branch_name (optional)
     * @param  string $branch_description (optional)
     * @param  \DateTime $initiated_date (optional)
     * @param  \DateTime $invoice_init_date (optional)
     * @param  string $order_no (optional)
     * @param  string $tax_exemption_no (optional)
     * @param  string $so_reference (optional)
     * @param  string $sales_quote_type (optional)
     * @param  string $order_type (optional)
     * @param  string $status (optional)
     * @param  string $bill_type (optional)
     * @param  \DateTime $expected_delivery_date (optional)
     * @param  string $debtor_id (optional)
     * @param  string $debtor_account_no (optional)
     * @param  string $debtor_name (optional)
     * @param  string $debtor_email_address (optional)
     * @param  string $debtor_contact_name (optional)
     * @param  string $delivery_addressee (optional)
     * @param  string $delivery_address1 (optional)
     * @param  string $delivery_address2 (optional)
     * @param  string $delivery_address_suburb (optional)
     * @param  string $delivery_address_state (optional)
     * @param  string $delivery_address_contact_name (optional)
     * @param  string $delivery_address_postcode (optional)
     * @param  string $delivery_address_country (optional)
     * @param  string $delivery_address_notes (optional)
     * @param  string $delivery_address_courier_details (optional)
     * @param  bool $drop_shipment (optional)
     * @param  double $cartage1_ex_gst (optional)
     * @param  double $cartage1_gst_rate (optional)
     * @param  double $cartage1_gst (optional)
     * @param  double $cartage2_ex_gst (optional)
     * @param  double $cartage2_gst_rate (optional)
     * @param  double $cartage2_gst (optional)
     * @param  double $cartage3_ex_gst (optional)
     * @param  double $cartage3_gst_rate (optional)
     * @param  double $cartage3_gst (optional)
     * @param  string $custom_field_values (optional)
     * @param  string $notes (optional)
     * @param  string $documents (optional)
     * @param  string $lines (optional)
     * @param  string $histories (optional)
     * @param  string $cash_sales (optional)
     * @param  string $job_costing (optional)
     * @param  \Jiwa\Model\SalesQuotePOSTRequest $body (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function salesQuotePOSTRequestPostAsync($accept, $jiwa_stateful = null, $type = null, $system_settings = null, $quote_no = null, $logical_id = null, $logical_warehouse_description = null, $physical_warehouse_description = null, $staff_id = null, $staff_user_name = null, $staff_title = null, $staff_first_name = null, $staff_surname = null, $branch_id = null, $branch_name = null, $branch_description = null, $initiated_date = null, $invoice_init_date = null, $order_no = null, $tax_exemption_no = null, $so_reference = null, $sales_quote_type = null, $order_type = null, $status = null, $bill_type = null, $expected_delivery_date = null, $debtor_id = null, $debtor_account_no = null, $debtor_name = null, $debtor_email_address = null, $debtor_contact_name = null, $delivery_addressee = null, $delivery_address1 = null, $delivery_address2 = null, $delivery_address_suburb = null, $delivery_address_state = null, $delivery_address_contact_name = null, $delivery_address_postcode = null, $delivery_address_country = null, $delivery_address_notes = null, $delivery_address_courier_details = null, $drop_shipment = null, $cartage1_ex_gst = null, $cartage1_gst_rate = null, $cartage1_gst = null, $cartage2_ex_gst = null, $cartage2_gst_rate = null, $cartage2_gst = null, $cartage3_ex_gst = null, $cartage3_gst_rate = null, $cartage3_gst = null, $custom_field_values = null, $notes = null, $documents = null, $lines = null, $histories = null, $cash_sales = null, $job_costing = null, $body = null)
    {
        return $this->salesQuotePOSTRequestPostAsyncWithHttpInfo($accept, $jiwa_stateful, $type, $system_settings, $quote_no, $logical_id, $logical_warehouse_description, $physical_warehouse_description, $staff_id, $staff_user_name, $staff_title, $staff_first_name, $staff_surname, $branch_id, $branch_name, $branch_description, $initiated_date, $invoice_init_date, $order_no, $tax_exemption_no, $so_reference, $sales_quote_type, $order_type, $status, $bill_type, $expected_delivery_date, $debtor_id, $debtor_account_no, $debtor_name, $debtor_email_address, $debtor_contact_name, $delivery_addressee, $delivery_address1, $delivery_address2, $delivery_address_suburb, $delivery_address_state, $delivery_address_contact_name, $delivery_address_postcode, $delivery_address_country, $delivery_address_notes, $delivery_address_courier_details, $drop_shipment, $cartage1_ex_gst, $cartage1_gst_rate, $cartage1_gst, $cartage2_ex_gst, $cartage2_gst_rate, $cartage2_gst, $cartage3_ex_gst, $cartage3_gst_rate, $cartage3_gst, $custom_field_values, $notes, $documents, $lines, $histories, $cash_sales, $job_costing, $body)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation salesQuotePOSTRequestPostAsyncWithHttpInfo
     *
     * Creates a new sales Quote.
     *
     * @param  string $accept Accept Header (required)
     * @param  bool $jiwa_stateful Stateful indicator (optional)
     * @param  string $type (optional)
     * @param  string $system_settings (optional)
     * @param  string $quote_no (optional)
     * @param  string $logical_id (optional)
     * @param  string $logical_warehouse_description (optional)
     * @param  string $physical_warehouse_description (optional)
     * @param  string $staff_id (optional)
     * @param  string $staff_user_name (optional)
     * @param  string $staff_title (optional)
     * @param  string $staff_first_name (optional)
     * @param  string $staff_surname (optional)
     * @param  string $branch_id (optional)
     * @param  string $branch_name (optional)
     * @param  string $branch_description (optional)
     * @param  \DateTime $initiated_date (optional)
     * @param  \DateTime $invoice_init_date (optional)
     * @param  string $order_no (optional)
     * @param  string $tax_exemption_no (optional)
     * @param  string $so_reference (optional)
     * @param  string $sales_quote_type (optional)
     * @param  string $order_type (optional)
     * @param  string $status (optional)
     * @param  string $bill_type (optional)
     * @param  \DateTime $expected_delivery_date (optional)
     * @param  string $debtor_id (optional)
     * @param  string $debtor_account_no (optional)
     * @param  string $debtor_name (optional)
     * @param  string $debtor_email_address (optional)
     * @param  string $debtor_contact_name (optional)
     * @param  string $delivery_addressee (optional)
     * @param  string $delivery_address1 (optional)
     * @param  string $delivery_address2 (optional)
     * @param  string $delivery_address_suburb (optional)
     * @param  string $delivery_address_state (optional)
     * @param  string $delivery_address_contact_name (optional)
     * @param  string $delivery_address_postcode (optional)
     * @param  string $delivery_address_country (optional)
     * @param  string $delivery_address_notes (optional)
     * @param  string $delivery_address_courier_details (optional)
     * @param  bool $drop_shipment (optional)
     * @param  double $cartage1_ex_gst (optional)
     * @param  double $cartage1_gst_rate (optional)
     * @param  double $cartage1_gst (optional)
     * @param  double $cartage2_ex_gst (optional)
     * @param  double $cartage2_gst_rate (optional)
     * @param  double $cartage2_gst (optional)
     * @param  double $cartage3_ex_gst (optional)
     * @param  double $cartage3_gst_rate (optional)
     * @param  double $cartage3_gst (optional)
     * @param  string $custom_field_values (optional)
     * @param  string $notes (optional)
     * @param  string $documents (optional)
     * @param  string $lines (optional)
     * @param  string $histories (optional)
     * @param  string $cash_sales (optional)
     * @param  string $job_costing (optional)
     * @param  \Jiwa\Model\SalesQuotePOSTRequest $body (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function salesQuotePOSTRequestPostAsyncWithHttpInfo($accept, $jiwa_stateful = null, $type = null, $system_settings = null, $quote_no = null, $logical_id = null, $logical_warehouse_description = null, $physical_warehouse_description = null, $staff_id = null, $staff_user_name = null, $staff_title = null, $staff_first_name = null, $staff_surname = null, $branch_id = null, $branch_name = null, $branch_description = null, $initiated_date = null, $invoice_init_date = null, $order_no = null, $tax_exemption_no = null, $so_reference = null, $sales_quote_type = null, $order_type = null, $status = null, $bill_type = null, $expected_delivery_date = null, $debtor_id = null, $debtor_account_no = null, $debtor_name = null, $debtor_email_address = null, $debtor_contact_name = null, $delivery_addressee = null, $delivery_address1 = null, $delivery_address2 = null, $delivery_address_suburb = null, $delivery_address_state = null, $delivery_address_contact_name = null, $delivery_address_postcode = null, $delivery_address_country = null, $delivery_address_notes = null, $delivery_address_courier_details = null, $drop_shipment = null, $cartage1_ex_gst = null, $cartage1_gst_rate = null, $cartage1_gst = null, $cartage2_ex_gst = null, $cartage2_gst_rate = null, $cartage2_gst = null, $cartage3_ex_gst = null, $cartage3_gst_rate = null, $cartage3_gst = null, $custom_field_values = null, $notes = null, $documents = null, $lines = null, $histories = null, $cash_sales = null, $job_costing = null, $body = null)
    {
        $returnType = '\Jiwa\Model\SalesQuote';
        $request = $this->salesQuotePOSTRequestPostRequest($accept, $jiwa_stateful, $type, $system_settings, $quote_no, $logical_id, $logical_warehouse_description, $physical_warehouse_description, $staff_id, $staff_user_name, $staff_title, $staff_first_name, $staff_surname, $branch_id, $branch_name, $branch_description, $initiated_date, $invoice_init_date, $order_no, $tax_exemption_no, $so_reference, $sales_quote_type, $order_type, $status, $bill_type, $expected_delivery_date, $debtor_id, $debtor_account_no, $debtor_name, $debtor_email_address, $debtor_contact_name, $delivery_addressee, $delivery_address1, $delivery_address2, $delivery_address_suburb, $delivery_address_state, $delivery_address_contact_name, $delivery_address_postcode, $delivery_address_country, $delivery_address_notes, $delivery_address_courier_details, $drop_shipment, $cartage1_ex_gst, $cartage1_gst_rate, $cartage1_gst, $cartage2_ex_gst, $cartage2_gst_rate, $cartage2_gst, $cartage3_ex_gst, $cartage3_gst_rate, $cartage3_gst, $custom_field_values, $notes, $documents, $lines, $histories, $cash_sales, $job_costing, $body);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'salesQuotePOSTRequestPost'
     *
     * @param  string $accept Accept Header (required)
     * @param  bool $jiwa_stateful Stateful indicator (optional)
     * @param  string $type (optional)
     * @param  string $system_settings (optional)
     * @param  string $quote_no (optional)
     * @param  string $logical_id (optional)
     * @param  string $logical_warehouse_description (optional)
     * @param  string $physical_warehouse_description (optional)
     * @param  string $staff_id (optional)
     * @param  string $staff_user_name (optional)
     * @param  string $staff_title (optional)
     * @param  string $staff_first_name (optional)
     * @param  string $staff_surname (optional)
     * @param  string $branch_id (optional)
     * @param  string $branch_name (optional)
     * @param  string $branch_description (optional)
     * @param  \DateTime $initiated_date (optional)
     * @param  \DateTime $invoice_init_date (optional)
     * @param  string $order_no (optional)
     * @param  string $tax_exemption_no (optional)
     * @param  string $so_reference (optional)
     * @param  string $sales_quote_type (optional)
     * @param  string $order_type (optional)
     * @param  string $status (optional)
     * @param  string $bill_type (optional)
     * @param  \DateTime $expected_delivery_date (optional)
     * @param  string $debtor_id (optional)
     * @param  string $debtor_account_no (optional)
     * @param  string $debtor_name (optional)
     * @param  string $debtor_email_address (optional)
     * @param  string $debtor_contact_name (optional)
     * @param  string $delivery_addressee (optional)
     * @param  string $delivery_address1 (optional)
     * @param  string $delivery_address2 (optional)
     * @param  string $delivery_address_suburb (optional)
     * @param  string $delivery_address_state (optional)
     * @param  string $delivery_address_contact_name (optional)
     * @param  string $delivery_address_postcode (optional)
     * @param  string $delivery_address_country (optional)
     * @param  string $delivery_address_notes (optional)
     * @param  string $delivery_address_courier_details (optional)
     * @param  bool $drop_shipment (optional)
     * @param  double $cartage1_ex_gst (optional)
     * @param  double $cartage1_gst_rate (optional)
     * @param  double $cartage1_gst (optional)
     * @param  double $cartage2_ex_gst (optional)
     * @param  double $cartage2_gst_rate (optional)
     * @param  double $cartage2_gst (optional)
     * @param  double $cartage3_ex_gst (optional)
     * @param  double $cartage3_gst_rate (optional)
     * @param  double $cartage3_gst (optional)
     * @param  string $custom_field_values (optional)
     * @param  string $notes (optional)
     * @param  string $documents (optional)
     * @param  string $lines (optional)
     * @param  string $histories (optional)
     * @param  string $cash_sales (optional)
     * @param  string $job_costing (optional)
     * @param  \Jiwa\Model\SalesQuotePOSTRequest $body (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function salesQuotePOSTRequestPostRequest($accept, $jiwa_stateful = null, $type = null, $system_settings = null, $quote_no = null, $logical_id = null, $logical_warehouse_description = null, $physical_warehouse_description = null, $staff_id = null, $staff_user_name = null, $staff_title = null, $staff_first_name = null, $staff_surname = null, $branch_id = null, $branch_name = null, $branch_description = null, $initiated_date = null, $invoice_init_date = null, $order_no = null, $tax_exemption_no = null, $so_reference = null, $sales_quote_type = null, $order_type = null, $status = null, $bill_type = null, $expected_delivery_date = null, $debtor_id = null, $debtor_account_no = null, $debtor_name = null, $debtor_email_address = null, $debtor_contact_name = null, $delivery_addressee = null, $delivery_address1 = null, $delivery_address2 = null, $delivery_address_suburb = null, $delivery_address_state = null, $delivery_address_contact_name = null, $delivery_address_postcode = null, $delivery_address_country = null, $delivery_address_notes = null, $delivery_address_courier_details = null, $drop_shipment = null, $cartage1_ex_gst = null, $cartage1_gst_rate = null, $cartage1_gst = null, $cartage2_ex_gst = null, $cartage2_gst_rate = null, $cartage2_gst = null, $cartage3_ex_gst = null, $cartage3_gst_rate = null, $cartage3_gst = null, $custom_field_values = null, $notes = null, $documents = null, $lines = null, $histories = null, $cash_sales = null, $job_costing = null, $body = null)
    {
        // verify the required parameter 'accept' is set
        if ($accept === null || (is_array($accept) && count($accept) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $accept when calling salesQuotePOSTRequestPost'
            );
        }

        $resourcePath = '/SalesQuotes';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        if ($type !== null) {
            $queryParams['Type'] = ObjectSerializer::toQueryValue($type);
        }
        // query params
        if ($system_settings !== null) {
            $queryParams['SystemSettings'] = ObjectSerializer::toQueryValue($system_settings);
        }
        // query params
        if ($quote_no !== null) {
            $queryParams['QuoteNo'] = ObjectSerializer::toQueryValue($quote_no);
        }
        // query params
        if ($logical_id !== null) {
            $queryParams['LogicalID'] = ObjectSerializer::toQueryValue($logical_id);
        }
        // query params
        if ($logical_warehouse_description !== null) {
            $queryParams['LogicalWarehouseDescription'] = ObjectSerializer::toQueryValue($logical_warehouse_description);
        }
        // query params
        if ($physical_warehouse_description !== null) {
            $queryParams['PhysicalWarehouseDescription'] = ObjectSerializer::toQueryValue($physical_warehouse_description);
        }
        // query params
        if ($staff_id !== null) {
            $queryParams['StaffID'] = ObjectSerializer::toQueryValue($staff_id);
        }
        // query params
        if ($staff_user_name !== null) {
            $queryParams['StaffUserName'] = ObjectSerializer::toQueryValue($staff_user_name);
        }
        // query params
        if ($staff_title !== null) {
            $queryParams['StaffTitle'] = ObjectSerializer::toQueryValue($staff_title);
        }
        // query params
        if ($staff_first_name !== null) {
            $queryParams['StaffFirstName'] = ObjectSerializer::toQueryValue($staff_first_name);
        }
        // query params
        if ($staff_surname !== null) {
            $queryParams['StaffSurname'] = ObjectSerializer::toQueryValue($staff_surname);
        }
        // query params
        if ($branch_id !== null) {
            $queryParams['BranchID'] = ObjectSerializer::toQueryValue($branch_id);
        }
        // query params
        if ($branch_name !== null) {
            $queryParams['BranchName'] = ObjectSerializer::toQueryValue($branch_name);
        }
        // query params
        if ($branch_description !== null) {
            $queryParams['BranchDescription'] = ObjectSerializer::toQueryValue($branch_description);
        }
        // query params
        if ($initiated_date !== null) {
            $queryParams['InitiatedDate'] = ObjectSerializer::toQueryValue($initiated_date);
        }
        // query params
        if ($invoice_init_date !== null) {
            $queryParams['InvoiceInitDate'] = ObjectSerializer::toQueryValue($invoice_init_date);
        }
        // query params
        if ($order_no !== null) {
            $queryParams['OrderNo'] = ObjectSerializer::toQueryValue($order_no);
        }
        // query params
        if ($tax_exemption_no !== null) {
            $queryParams['TaxExemptionNo'] = ObjectSerializer::toQueryValue($tax_exemption_no);
        }
        // query params
        if ($so_reference !== null) {
            $queryParams['SOReference'] = ObjectSerializer::toQueryValue($so_reference);
        }
        // query params
        if ($sales_quote_type !== null) {
            $queryParams['SalesQuoteType'] = ObjectSerializer::toQueryValue($sales_quote_type);
        }
        // query params
        if ($order_type !== null) {
            $queryParams['OrderType'] = ObjectSerializer::toQueryValue($order_type);
        }
        // query params
        if ($status !== null) {
            $queryParams['Status'] = ObjectSerializer::toQueryValue($status);
        }
        // query params
        if ($bill_type !== null) {
            $queryParams['BillType'] = ObjectSerializer::toQueryValue($bill_type);
        }
        // query params
        if ($expected_delivery_date !== null) {
            $queryParams['ExpectedDeliveryDate'] = ObjectSerializer::toQueryValue($expected_delivery_date);
        }
        // query params
        if ($debtor_id !== null) {
            $queryParams['DebtorID'] = ObjectSerializer::toQueryValue($debtor_id);
        }
        // query params
        if ($debtor_account_no !== null) {
            $queryParams['DebtorAccountNo'] = ObjectSerializer::toQueryValue($debtor_account_no);
        }
        // query params
        if ($debtor_name !== null) {
            $queryParams['DebtorName'] = ObjectSerializer::toQueryValue($debtor_name);
        }
        // query params
        if ($debtor_email_address !== null) {
            $queryParams['DebtorEmailAddress'] = ObjectSerializer::toQueryValue($debtor_email_address);
        }
        // query params
        if ($debtor_contact_name !== null) {
            $queryParams['DebtorContactName'] = ObjectSerializer::toQueryValue($debtor_contact_name);
        }
        // query params
        if ($delivery_addressee !== null) {
            $queryParams['DeliveryAddressee'] = ObjectSerializer::toQueryValue($delivery_addressee);
        }
        // query params
        if ($delivery_address1 !== null) {
            $queryParams['DeliveryAddress1'] = ObjectSerializer::toQueryValue($delivery_address1);
        }
        // query params
        if ($delivery_address2 !== null) {
            $queryParams['DeliveryAddress2'] = ObjectSerializer::toQueryValue($delivery_address2);
        }
        // query params
        if ($delivery_address_suburb !== null) {
            $queryParams['DeliveryAddressSuburb'] = ObjectSerializer::toQueryValue($delivery_address_suburb);
        }
        // query params
        if ($delivery_address_state !== null) {
            $queryParams['DeliveryAddressState'] = ObjectSerializer::toQueryValue($delivery_address_state);
        }
        // query params
        if ($delivery_address_contact_name !== null) {
            $queryParams['DeliveryAddressContactName'] = ObjectSerializer::toQueryValue($delivery_address_contact_name);
        }
        // query params
        if ($delivery_address_postcode !== null) {
            $queryParams['DeliveryAddressPostcode'] = ObjectSerializer::toQueryValue($delivery_address_postcode);
        }
        // query params
        if ($delivery_address_country !== null) {
            $queryParams['DeliveryAddressCountry'] = ObjectSerializer::toQueryValue($delivery_address_country);
        }
        // query params
        if ($delivery_address_notes !== null) {
            $queryParams['DeliveryAddressNotes'] = ObjectSerializer::toQueryValue($delivery_address_notes);
        }
        // query params
        if ($delivery_address_courier_details !== null) {
            $queryParams['DeliveryAddressCourierDetails'] = ObjectSerializer::toQueryValue($delivery_address_courier_details);
        }
        // query params
        if ($drop_shipment !== null) {
            $queryParams['DropShipment'] = ObjectSerializer::toQueryValue($drop_shipment);
        }
        // query params
        if ($cartage1_ex_gst !== null) {
            $queryParams['Cartage1ExGst'] = ObjectSerializer::toQueryValue($cartage1_ex_gst);
        }
        // query params
        if ($cartage1_gst_rate !== null) {
            $queryParams['Cartage1GstRate'] = ObjectSerializer::toQueryValue($cartage1_gst_rate);
        }
        // query params
        if ($cartage1_gst !== null) {
            $queryParams['Cartage1Gst'] = ObjectSerializer::toQueryValue($cartage1_gst);
        }
        // query params
        if ($cartage2_ex_gst !== null) {
            $queryParams['Cartage2ExGst'] = ObjectSerializer::toQueryValue($cartage2_ex_gst);
        }
        // query params
        if ($cartage2_gst_rate !== null) {
            $queryParams['Cartage2GstRate'] = ObjectSerializer::toQueryValue($cartage2_gst_rate);
        }
        // query params
        if ($cartage2_gst !== null) {
            $queryParams['Cartage2Gst'] = ObjectSerializer::toQueryValue($cartage2_gst);
        }
        // query params
        if ($cartage3_ex_gst !== null) {
            $queryParams['Cartage3ExGst'] = ObjectSerializer::toQueryValue($cartage3_ex_gst);
        }
        // query params
        if ($cartage3_gst_rate !== null) {
            $queryParams['Cartage3GstRate'] = ObjectSerializer::toQueryValue($cartage3_gst_rate);
        }
        // query params
        if ($cartage3_gst !== null) {
            $queryParams['Cartage3Gst'] = ObjectSerializer::toQueryValue($cartage3_gst);
        }
        // query params
        if ($custom_field_values !== null) {
            $queryParams['CustomFieldValues'] = ObjectSerializer::toQueryValue($custom_field_values);
        }
        // query params
        if ($notes !== null) {
            $queryParams['Notes'] = ObjectSerializer::toQueryValue($notes);
        }
        // query params
        if ($documents !== null) {
            $queryParams['Documents'] = ObjectSerializer::toQueryValue($documents);
        }
        // query params
        if ($lines !== null) {
            $queryParams['Lines'] = ObjectSerializer::toQueryValue($lines);
        }
        // query params
        if ($histories !== null) {
            $queryParams['Histories'] = ObjectSerializer::toQueryValue($histories);
        }
        // query params
        if ($cash_sales !== null) {
            $queryParams['CashSales'] = ObjectSerializer::toQueryValue($cash_sales);
        }
        // query params
        if ($job_costing !== null) {
            $queryParams['JobCosting'] = ObjectSerializer::toQueryValue($job_costing);
        }
        // header params
        if ($accept !== null) {
            $headerParams['Accept'] = ObjectSerializer::toHeaderValue($accept);
        }
        // header params
        if ($jiwa_stateful !== null) {
            $headerParams['jiwa-stateful'] = ObjectSerializer::toHeaderValue($jiwa_stateful);
        }


        // body params
        $_tempBody = null;
        if (isset($body)) {
            $_tempBody = $body;
        }

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json', 'application/xml']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json', 'application/xml'],
                ['application/x-www-form-urlencoded', 'application/json', 'application/xml']
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            
            if($headers['Content-Type'] === 'application/json') {
                // \stdClass has no __toString(), so we should encode it manually
                if ($httpBody instanceof \stdClass) {
                    $httpBody = \GuzzleHttp\json_encode($httpBody);
                }
                // array has no __toString(), so we should encode it manually
                if(is_array($httpBody)) {
                    $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($httpBody));
                }
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\Query::build($formParams);
            }
        }

        // this endpoint requires HTTP basic authentication
        if ($this->config->getUsername() !== null || $this->config->getPassword() !== null) {
            $headers['Authorization'] = 'Basic ' . base64_encode($this->config->getUsername() . ":" . $this->config->getPassword());
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\Query::build($queryParams);
        return new Request(
            'POST',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation salesQuoteSAVERequestQuoteIDSaveGet
     *
     * Saves a stateful sales Quote.
     *
     * @param  string $accept Accept Header (required)
     * @param  string $quote_id quote_id (required)
     * @param  bool $jiwa_stateful Stateful indicator (optional)
     *
     * @throws \Jiwa\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Jiwa\Model\SalesQuote
     */
    public function salesQuoteSAVERequestQuoteIDSaveGet($accept, $quote_id, $jiwa_stateful = null)
    {
        list($response) = $this->salesQuoteSAVERequestQuoteIDSaveGetWithHttpInfo($accept, $quote_id, $jiwa_stateful);
        return $response;
    }

    /**
     * Operation salesQuoteSAVERequestQuoteIDSaveGetWithHttpInfo
     *
     * Saves a stateful sales Quote.
     *
     * @param  string $accept Accept Header (required)
     * @param  string $quote_id (required)
     * @param  bool $jiwa_stateful Stateful indicator (optional)
     *
     * @throws \Jiwa\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Jiwa\Model\SalesQuote, HTTP status code, HTTP response headers (array of strings)
     */
    public function salesQuoteSAVERequestQuoteIDSaveGetWithHttpInfo($accept, $quote_id, $jiwa_stateful = null)
    {
        $returnType = '\Jiwa\Model\SalesQuote';
        $request = $this->salesQuoteSAVERequestQuoteIDSaveGetRequest($accept, $quote_id, $jiwa_stateful);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Jiwa\Model\SalesQuote',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 404:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Jiwa\Model\SalesQuote',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 401:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Jiwa\Model\SalesQuote',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 403:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Jiwa\Model\SalesQuote',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation salesQuoteSAVERequestQuoteIDSaveGetAsync
     *
     * Saves a stateful sales Quote.
     *
     * @param  string $accept Accept Header (required)
     * @param  string $quote_id (required)
     * @param  bool $jiwa_stateful Stateful indicator (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function salesQuoteSAVERequestQuoteIDSaveGetAsync($accept, $quote_id, $jiwa_stateful = null)
    {
        return $this->salesQuoteSAVERequestQuoteIDSaveGetAsyncWithHttpInfo($accept, $quote_id, $jiwa_stateful)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation salesQuoteSAVERequestQuoteIDSaveGetAsyncWithHttpInfo
     *
     * Saves a stateful sales Quote.
     *
     * @param  string $accept Accept Header (required)
     * @param  string $quote_id (required)
     * @param  bool $jiwa_stateful Stateful indicator (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function salesQuoteSAVERequestQuoteIDSaveGetAsyncWithHttpInfo($accept, $quote_id, $jiwa_stateful = null)
    {
        $returnType = '\Jiwa\Model\SalesQuote';
        $request = $this->salesQuoteSAVERequestQuoteIDSaveGetRequest($accept, $quote_id, $jiwa_stateful);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'salesQuoteSAVERequestQuoteIDSaveGet'
     *
     * @param  string $accept Accept Header (required)
     * @param  string $quote_id (required)
     * @param  bool $jiwa_stateful Stateful indicator (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function salesQuoteSAVERequestQuoteIDSaveGetRequest($accept, $quote_id, $jiwa_stateful = null)
    {
        // verify the required parameter 'accept' is set
        if ($accept === null || (is_array($accept) && count($accept) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $accept when calling salesQuoteSAVERequestQuoteIDSaveGet'
            );
        }
        // verify the required parameter 'quote_id' is set
        if ($quote_id === null || (is_array($quote_id) && count($quote_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $quote_id when calling salesQuoteSAVERequestQuoteIDSaveGet'
            );
        }

        $resourcePath = '/SalesQuotes/{QuoteID}/Save';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // header params
        if ($accept !== null) {
            $headerParams['Accept'] = ObjectSerializer::toHeaderValue($accept);
        }
        // header params
        if ($jiwa_stateful !== null) {
            $headerParams['jiwa-stateful'] = ObjectSerializer::toHeaderValue($jiwa_stateful);
        }

        // path params
        if ($quote_id !== null) {
            $resourcePath = str_replace(
                '{' . 'QuoteID' . '}',
                ObjectSerializer::toPathValue($quote_id),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json', 'application/xml']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json', 'application/xml'],
                ['application/x-www-form-urlencoded', 'application/json', 'application/xml']
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            
            if($headers['Content-Type'] === 'application/json') {
                // \stdClass has no __toString(), so we should encode it manually
                if ($httpBody instanceof \stdClass) {
                    $httpBody = \GuzzleHttp\json_encode($httpBody);
                }
                // array has no __toString(), so we should encode it manually
                if(is_array($httpBody)) {
                    $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($httpBody));
                }
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\Query::build($formParams);
            }
        }

        // this endpoint requires HTTP basic authentication
        if ($this->config->getUsername() !== null || $this->config->getPassword() !== null) {
            $headers['Authorization'] = 'Basic ' . base64_encode($this->config->getUsername() . ":" . $this->config->getPassword());
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\Query::build($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Create http client option
     *
     * @throws \RuntimeException on file opening failure
     * @return array of http client options
     */
    protected function createHttpClientOption()
    {
        $options = [];
        if ($this->config->getDebug()) {
            $options[RequestOptions::DEBUG] = fopen($this->config->getDebugFile(), 'a');
            if (!$options[RequestOptions::DEBUG]) {
                throw new \RuntimeException('Failed to open the debug file: ' . $this->config->getDebugFile());
            }
        }

        return $options;
    }
}

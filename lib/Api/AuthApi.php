<?php
/**
 * AuthApi
 * PHP version 5
 *
 * @category Class
 * @package  Jiwa
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * JiwaAPI
 *
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: 1.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 * Swagger Codegen version: 2.4.28-SNAPSHOT
 */

/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Jiwa\Api;

use GuzzleHttp\Client;
use GuzzleHttp\ClientInterface;
use GuzzleHttp\Exception\RequestException;
use GuzzleHttp\Psr7\MultipartStream;
use GuzzleHttp\Psr7\Request;
use GuzzleHttp\RequestOptions;
use Jiwa\ApiException;
use Jiwa\Configuration;
use Jiwa\HeaderSelector;
use Jiwa\ObjectSerializer;

/**
 * AuthApi Class Doc Comment
 *
 * @category Class
 * @package  Jiwa
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class AuthApi
{
    /**
     * @var ClientInterface
     */
    protected $client;

    /**
     * @var Configuration
     */
    protected $config;

    /**
     * @var HeaderSelector
     */
    protected $headerSelector;

    /**
     * @param ClientInterface $client
     * @param Configuration   $config
     * @param HeaderSelector  $selector
     */
    public function __construct(
        ClientInterface $client = null,
        Configuration $config = null,
        HeaderSelector $selector = null
    ) {
        $this->client = $client ?: new Client();
        $this->config = $config ?: new Configuration();
        $this->headerSelector = $selector ?: new HeaderSelector();
    }

    /**
     * @return Configuration
     */
    public function getConfig()
    {
        return $this->config;
    }

    /**
     * Operation authenticateGet
     *
     * Logs in using Jiwa username and password
     *
     * @param  string $accept Accept Header (required)
     * @param  bool $jiwa_stateful Stateful indicator (optional)
     * @param  string $provider provider (optional)
     * @param  string $state state (optional)
     * @param  string $oauth_token oauth_token (optional)
     * @param  string $oauth_verifier oauth_verifier (optional)
     * @param  string $user_name user_name (optional)
     * @param  string $password password (optional)
     * @param  bool $remember_me remember_me (optional)
     * @param  string $continue continue (optional)
     * @param  string $nonce nonce (optional)
     * @param  string $uri uri (optional)
     * @param  string $response response (optional)
     * @param  string $qop qop (optional)
     * @param  string $nc nc (optional)
     * @param  string $cnonce cnonce (optional)
     * @param  bool $use_token_cookie use_token_cookie (optional)
     * @param  string $access_token access_token (optional)
     * @param  string $access_token_secret access_token_secret (optional)
     * @param  string $meta meta (optional)
     *
     * @throws \Jiwa\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Jiwa\Model\AuthenticateResponse
     */
    public function authenticateGet($accept, $jiwa_stateful = null, $provider = null, $state = null, $oauth_token = null, $oauth_verifier = null, $user_name = null, $password = null, $remember_me = null, $continue = null, $nonce = null, $uri = null, $response = null, $qop = null, $nc = null, $cnonce = null, $use_token_cookie = null, $access_token = null, $access_token_secret = null, $meta = null)
    {
        list($response) = $this->authenticateGetWithHttpInfo($accept, $jiwa_stateful, $provider, $state, $oauth_token, $oauth_verifier, $user_name, $password, $remember_me, $continue, $nonce, $uri, $response, $qop, $nc, $cnonce, $use_token_cookie, $access_token, $access_token_secret, $meta);
        return $response;
    }

    /**
     * Operation authenticateGetWithHttpInfo
     *
     * Logs in using Jiwa username and password
     *
     * @param  string $accept Accept Header (required)
     * @param  bool $jiwa_stateful Stateful indicator (optional)
     * @param  string $provider (optional)
     * @param  string $state (optional)
     * @param  string $oauth_token (optional)
     * @param  string $oauth_verifier (optional)
     * @param  string $user_name (optional)
     * @param  string $password (optional)
     * @param  bool $remember_me (optional)
     * @param  string $continue (optional)
     * @param  string $nonce (optional)
     * @param  string $uri (optional)
     * @param  string $response (optional)
     * @param  string $qop (optional)
     * @param  string $nc (optional)
     * @param  string $cnonce (optional)
     * @param  bool $use_token_cookie (optional)
     * @param  string $access_token (optional)
     * @param  string $access_token_secret (optional)
     * @param  string $meta (optional)
     *
     * @throws \Jiwa\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Jiwa\Model\AuthenticateResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function authenticateGetWithHttpInfo($accept, $jiwa_stateful = null, $provider = null, $state = null, $oauth_token = null, $oauth_verifier = null, $user_name = null, $password = null, $remember_me = null, $continue = null, $nonce = null, $uri = null, $response = null, $qop = null, $nc = null, $cnonce = null, $use_token_cookie = null, $access_token = null, $access_token_secret = null, $meta = null)
    {
        $returnType = '\Jiwa\Model\AuthenticateResponse';
        $request = $this->authenticateGetRequest($accept, $jiwa_stateful, $provider, $state, $oauth_token, $oauth_verifier, $user_name, $password, $remember_me, $continue, $nonce, $uri, $response, $qop, $nc, $cnonce, $use_token_cookie, $access_token, $access_token_secret, $meta);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Jiwa\Model\AuthenticateResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation authenticateGetAsync
     *
     * Logs in using Jiwa username and password
     *
     * @param  string $accept Accept Header (required)
     * @param  bool $jiwa_stateful Stateful indicator (optional)
     * @param  string $provider (optional)
     * @param  string $state (optional)
     * @param  string $oauth_token (optional)
     * @param  string $oauth_verifier (optional)
     * @param  string $user_name (optional)
     * @param  string $password (optional)
     * @param  bool $remember_me (optional)
     * @param  string $continue (optional)
     * @param  string $nonce (optional)
     * @param  string $uri (optional)
     * @param  string $response (optional)
     * @param  string $qop (optional)
     * @param  string $nc (optional)
     * @param  string $cnonce (optional)
     * @param  bool $use_token_cookie (optional)
     * @param  string $access_token (optional)
     * @param  string $access_token_secret (optional)
     * @param  string $meta (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function authenticateGetAsync($accept, $jiwa_stateful = null, $provider = null, $state = null, $oauth_token = null, $oauth_verifier = null, $user_name = null, $password = null, $remember_me = null, $continue = null, $nonce = null, $uri = null, $response = null, $qop = null, $nc = null, $cnonce = null, $use_token_cookie = null, $access_token = null, $access_token_secret = null, $meta = null)
    {
        return $this->authenticateGetAsyncWithHttpInfo($accept, $jiwa_stateful, $provider, $state, $oauth_token, $oauth_verifier, $user_name, $password, $remember_me, $continue, $nonce, $uri, $response, $qop, $nc, $cnonce, $use_token_cookie, $access_token, $access_token_secret, $meta)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation authenticateGetAsyncWithHttpInfo
     *
     * Logs in using Jiwa username and password
     *
     * @param  string $accept Accept Header (required)
     * @param  bool $jiwa_stateful Stateful indicator (optional)
     * @param  string $provider (optional)
     * @param  string $state (optional)
     * @param  string $oauth_token (optional)
     * @param  string $oauth_verifier (optional)
     * @param  string $user_name (optional)
     * @param  string $password (optional)
     * @param  bool $remember_me (optional)
     * @param  string $continue (optional)
     * @param  string $nonce (optional)
     * @param  string $uri (optional)
     * @param  string $response (optional)
     * @param  string $qop (optional)
     * @param  string $nc (optional)
     * @param  string $cnonce (optional)
     * @param  bool $use_token_cookie (optional)
     * @param  string $access_token (optional)
     * @param  string $access_token_secret (optional)
     * @param  string $meta (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function authenticateGetAsyncWithHttpInfo($accept, $jiwa_stateful = null, $provider = null, $state = null, $oauth_token = null, $oauth_verifier = null, $user_name = null, $password = null, $remember_me = null, $continue = null, $nonce = null, $uri = null, $response = null, $qop = null, $nc = null, $cnonce = null, $use_token_cookie = null, $access_token = null, $access_token_secret = null, $meta = null)
    {
        $returnType = '\Jiwa\Model\AuthenticateResponse';
        $request = $this->authenticateGetRequest($accept, $jiwa_stateful, $provider, $state, $oauth_token, $oauth_verifier, $user_name, $password, $remember_me, $continue, $nonce, $uri, $response, $qop, $nc, $cnonce, $use_token_cookie, $access_token, $access_token_secret, $meta);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'authenticateGet'
     *
     * @param  string $accept Accept Header (required)
     * @param  bool $jiwa_stateful Stateful indicator (optional)
     * @param  string $provider (optional)
     * @param  string $state (optional)
     * @param  string $oauth_token (optional)
     * @param  string $oauth_verifier (optional)
     * @param  string $user_name (optional)
     * @param  string $password (optional)
     * @param  bool $remember_me (optional)
     * @param  string $continue (optional)
     * @param  string $nonce (optional)
     * @param  string $uri (optional)
     * @param  string $response (optional)
     * @param  string $qop (optional)
     * @param  string $nc (optional)
     * @param  string $cnonce (optional)
     * @param  bool $use_token_cookie (optional)
     * @param  string $access_token (optional)
     * @param  string $access_token_secret (optional)
     * @param  string $meta (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function authenticateGetRequest($accept, $jiwa_stateful = null, $provider = null, $state = null, $oauth_token = null, $oauth_verifier = null, $user_name = null, $password = null, $remember_me = null, $continue = null, $nonce = null, $uri = null, $response = null, $qop = null, $nc = null, $cnonce = null, $use_token_cookie = null, $access_token = null, $access_token_secret = null, $meta = null)
    {
        // verify the required parameter 'accept' is set
        if ($accept === null || (is_array($accept) && count($accept) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $accept when calling authenticateGet'
            );
        }

        $resourcePath = '/auth';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        if ($provider !== null) {
            $queryParams['provider'] = ObjectSerializer::toQueryValue($provider);
        }
        // query params
        if ($state !== null) {
            $queryParams['State'] = ObjectSerializer::toQueryValue($state);
        }
        // query params
        if ($oauth_token !== null) {
            $queryParams['oauth_token'] = ObjectSerializer::toQueryValue($oauth_token);
        }
        // query params
        if ($oauth_verifier !== null) {
            $queryParams['oauth_verifier'] = ObjectSerializer::toQueryValue($oauth_verifier);
        }
        // query params
        if ($user_name !== null) {
            $queryParams['UserName'] = ObjectSerializer::toQueryValue($user_name);
        }
        // query params
        if ($password !== null) {
            $queryParams['Password'] = ObjectSerializer::toQueryValue($password);
        }
        // query params
        if ($remember_me !== null) {
            $queryParams['RememberMe'] = ObjectSerializer::toQueryValue($remember_me);
        }
        // query params
        if ($continue !== null) {
            $queryParams['Continue'] = ObjectSerializer::toQueryValue($continue);
        }
        // query params
        if ($nonce !== null) {
            $queryParams['nonce'] = ObjectSerializer::toQueryValue($nonce);
        }
        // query params
        if ($uri !== null) {
            $queryParams['uri'] = ObjectSerializer::toQueryValue($uri);
        }
        // query params
        if ($response !== null) {
            $queryParams['response'] = ObjectSerializer::toQueryValue($response);
        }
        // query params
        if ($qop !== null) {
            $queryParams['qop'] = ObjectSerializer::toQueryValue($qop);
        }
        // query params
        if ($nc !== null) {
            $queryParams['nc'] = ObjectSerializer::toQueryValue($nc);
        }
        // query params
        if ($cnonce !== null) {
            $queryParams['cnonce'] = ObjectSerializer::toQueryValue($cnonce);
        }
        // query params
        if ($use_token_cookie !== null) {
            $queryParams['UseTokenCookie'] = ObjectSerializer::toQueryValue($use_token_cookie);
        }
        // query params
        if ($access_token !== null) {
            $queryParams['AccessToken'] = ObjectSerializer::toQueryValue($access_token);
        }
        // query params
        if ($access_token_secret !== null) {
            $queryParams['AccessTokenSecret'] = ObjectSerializer::toQueryValue($access_token_secret);
        }
        // query params
        if ($meta !== null) {
            $queryParams['Meta'] = ObjectSerializer::toQueryValue($meta);
        }
        // header params
        if ($accept !== null) {
            $headerParams['Accept'] = ObjectSerializer::toHeaderValue($accept);
        }
        // header params
        if ($jiwa_stateful !== null) {
            $headerParams['jiwa-stateful'] = ObjectSerializer::toHeaderValue($jiwa_stateful);
        }


        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json', 'application/xml']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json', 'application/xml'],
                ['application/x-www-form-urlencoded', 'application/json', 'application/xml']
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            
            if($headers['Content-Type'] === 'application/json') {
                // \stdClass has no __toString(), so we should encode it manually
                if ($httpBody instanceof \stdClass) {
                    $httpBody = \GuzzleHttp\json_encode($httpBody);
                }
                // array has no __toString(), so we should encode it manually
                if(is_array($httpBody)) {
                    $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($httpBody));
                }
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\Query::build($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\Query::build($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation logoutGetRequestlogoutGet
     *
     * Logs an authenticated user out.
     *
     * @param  string $accept Accept Header (required)
     * @param  bool $jiwa_stateful Stateful indicator (optional)
     *
     * @throws \Jiwa\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Jiwa\Model\LogoutGetResponse
     */
    public function logoutGetRequestlogoutGet($accept, $jiwa_stateful = null)
    {
        list($response) = $this->logoutGetRequestlogoutGetWithHttpInfo($accept, $jiwa_stateful);
        return $response;
    }

    /**
     * Operation logoutGetRequestlogoutGetWithHttpInfo
     *
     * Logs an authenticated user out.
     *
     * @param  string $accept Accept Header (required)
     * @param  bool $jiwa_stateful Stateful indicator (optional)
     *
     * @throws \Jiwa\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Jiwa\Model\LogoutGetResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function logoutGetRequestlogoutGetWithHttpInfo($accept, $jiwa_stateful = null)
    {
        $returnType = '\Jiwa\Model\LogoutGetResponse';
        $request = $this->logoutGetRequestlogoutGetRequest($accept, $jiwa_stateful);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Jiwa\Model\LogoutGetResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 401:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Jiwa\Model\LogoutGetResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 403:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Jiwa\Model\LogoutGetResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation logoutGetRequestlogoutGetAsync
     *
     * Logs an authenticated user out.
     *
     * @param  string $accept Accept Header (required)
     * @param  bool $jiwa_stateful Stateful indicator (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function logoutGetRequestlogoutGetAsync($accept, $jiwa_stateful = null)
    {
        return $this->logoutGetRequestlogoutGetAsyncWithHttpInfo($accept, $jiwa_stateful)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation logoutGetRequestlogoutGetAsyncWithHttpInfo
     *
     * Logs an authenticated user out.
     *
     * @param  string $accept Accept Header (required)
     * @param  bool $jiwa_stateful Stateful indicator (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function logoutGetRequestlogoutGetAsyncWithHttpInfo($accept, $jiwa_stateful = null)
    {
        $returnType = '\Jiwa\Model\LogoutGetResponse';
        $request = $this->logoutGetRequestlogoutGetRequest($accept, $jiwa_stateful);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'logoutGetRequestlogoutGet'
     *
     * @param  string $accept Accept Header (required)
     * @param  bool $jiwa_stateful Stateful indicator (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function logoutGetRequestlogoutGetRequest($accept, $jiwa_stateful = null)
    {
        // verify the required parameter 'accept' is set
        if ($accept === null || (is_array($accept) && count($accept) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $accept when calling logoutGetRequestlogoutGet'
            );
        }

        $resourcePath = '/auth/logout';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // header params
        if ($accept !== null) {
            $headerParams['Accept'] = ObjectSerializer::toHeaderValue($accept);
        }
        // header params
        if ($jiwa_stateful !== null) {
            $headerParams['jiwa-stateful'] = ObjectSerializer::toHeaderValue($jiwa_stateful);
        }


        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json', 'application/xml']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json', 'application/xml'],
                ['application/x-www-form-urlencoded', 'application/json', 'application/xml']
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            
            if($headers['Content-Type'] === 'application/json') {
                // \stdClass has no __toString(), so we should encode it manually
                if ($httpBody instanceof \stdClass) {
                    $httpBody = \GuzzleHttp\json_encode($httpBody);
                }
                // array has no __toString(), so we should encode it manually
                if(is_array($httpBody)) {
                    $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($httpBody));
                }
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\Query::build($formParams);
            }
        }

        // this endpoint requires HTTP basic authentication
        if ($this->config->getUsername() !== null || $this->config->getPassword() !== null) {
            $headers['Authorization'] = 'Basic ' . base64_encode($this->config->getUsername() . ":" . $this->config->getPassword());
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\Query::build($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Create http client option
     *
     * @throws \RuntimeException on file opening failure
     * @return array of http client options
     */
    protected function createHttpClientOption()
    {
        $options = [];
        if ($this->config->getDebug()) {
            $options[RequestOptions::DEBUG] = fopen($this->config->getDebugFile(), 'a');
            if (!$options[RequestOptions::DEBUG]) {
                throw new \RuntimeException('Failed to open the debug file: ' . $this->config->getDebugFile());
            }
        }

        return $options;
    }
}

<?php
/**
 * PurchaseInvoicesApi
 * PHP version 5
 *
 * @category Class
 * @package  Jiwa
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * JiwaAPI
 *
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: 1.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 * Swagger Codegen version: 2.4.28-SNAPSHOT
 */

/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Jiwa\Api;

use GuzzleHttp\Client;
use GuzzleHttp\ClientInterface;
use GuzzleHttp\Exception\RequestException;
use GuzzleHttp\Psr7\MultipartStream;
use GuzzleHttp\Psr7\Request;
use GuzzleHttp\RequestOptions;
use Jiwa\ApiException;
use Jiwa\Configuration;
use Jiwa\HeaderSelector;
use Jiwa\ObjectSerializer;

/**
 * PurchaseInvoicesApi Class Doc Comment
 *
 * @category Class
 * @package  Jiwa
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class PurchaseInvoicesApi
{
    /**
     * @var ClientInterface
     */
    protected $client;

    /**
     * @var Configuration
     */
    protected $config;

    /**
     * @var HeaderSelector
     */
    protected $headerSelector;

    /**
     * @param ClientInterface $client
     * @param Configuration   $config
     * @param HeaderSelector  $selector
     */
    public function __construct(
        ClientInterface $client = null,
        Configuration $config = null,
        HeaderSelector $selector = null
    ) {
        $this->client = $client ?: new Client();
        $this->config = $config ?: new Configuration();
        $this->headerSelector = $selector ?: new HeaderSelector();
    }

    /**
     * @return Configuration
     */
    public function getConfig()
    {
        return $this->config;
    }

    /**
     * Operation purchaseInvoiceABANDONRequestAbandonDelete
     *
     * Abandons a stateful purchase invoice.
     *
     * @param  string $accept Accept Header (required)
     * @param  bool $jiwa_stateful Stateful indicator (optional)
     * @param  string $purchase_invoice_id purchase_invoice_id (optional)
     *
     * @throws \Jiwa\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Jiwa\Model\Object
     */
    public function purchaseInvoiceABANDONRequestAbandonDelete($accept, $jiwa_stateful = null, $purchase_invoice_id = null)
    {
        list($response) = $this->purchaseInvoiceABANDONRequestAbandonDeleteWithHttpInfo($accept, $jiwa_stateful, $purchase_invoice_id);
        return $response;
    }

    /**
     * Operation purchaseInvoiceABANDONRequestAbandonDeleteWithHttpInfo
     *
     * Abandons a stateful purchase invoice.
     *
     * @param  string $accept Accept Header (required)
     * @param  bool $jiwa_stateful Stateful indicator (optional)
     * @param  string $purchase_invoice_id (optional)
     *
     * @throws \Jiwa\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Jiwa\Model\Object, HTTP status code, HTTP response headers (array of strings)
     */
    public function purchaseInvoiceABANDONRequestAbandonDeleteWithHttpInfo($accept, $jiwa_stateful = null, $purchase_invoice_id = null)
    {
        $returnType = '\Jiwa\Model\Object';
        $request = $this->purchaseInvoiceABANDONRequestAbandonDeleteRequest($accept, $jiwa_stateful, $purchase_invoice_id);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Jiwa\Model\Object',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 403:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Jiwa\Model\Object',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 401:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Jiwa\Model\Object',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 404:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Jiwa\Model\Object',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation purchaseInvoiceABANDONRequestAbandonDeleteAsync
     *
     * Abandons a stateful purchase invoice.
     *
     * @param  string $accept Accept Header (required)
     * @param  bool $jiwa_stateful Stateful indicator (optional)
     * @param  string $purchase_invoice_id (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function purchaseInvoiceABANDONRequestAbandonDeleteAsync($accept, $jiwa_stateful = null, $purchase_invoice_id = null)
    {
        return $this->purchaseInvoiceABANDONRequestAbandonDeleteAsyncWithHttpInfo($accept, $jiwa_stateful, $purchase_invoice_id)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation purchaseInvoiceABANDONRequestAbandonDeleteAsyncWithHttpInfo
     *
     * Abandons a stateful purchase invoice.
     *
     * @param  string $accept Accept Header (required)
     * @param  bool $jiwa_stateful Stateful indicator (optional)
     * @param  string $purchase_invoice_id (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function purchaseInvoiceABANDONRequestAbandonDeleteAsyncWithHttpInfo($accept, $jiwa_stateful = null, $purchase_invoice_id = null)
    {
        $returnType = '\Jiwa\Model\Object';
        $request = $this->purchaseInvoiceABANDONRequestAbandonDeleteRequest($accept, $jiwa_stateful, $purchase_invoice_id);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'purchaseInvoiceABANDONRequestAbandonDelete'
     *
     * @param  string $accept Accept Header (required)
     * @param  bool $jiwa_stateful Stateful indicator (optional)
     * @param  string $purchase_invoice_id (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function purchaseInvoiceABANDONRequestAbandonDeleteRequest($accept, $jiwa_stateful = null, $purchase_invoice_id = null)
    {
        // verify the required parameter 'accept' is set
        if ($accept === null || (is_array($accept) && count($accept) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $accept when calling purchaseInvoiceABANDONRequestAbandonDelete'
            );
        }

        $resourcePath = '/PurchaseInvoices/Abandon';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        if ($purchase_invoice_id !== null) {
            $queryParams['PurchaseInvoiceID'] = ObjectSerializer::toQueryValue($purchase_invoice_id);
        }
        // header params
        if ($accept !== null) {
            $headerParams['Accept'] = ObjectSerializer::toHeaderValue($accept);
        }
        // header params
        if ($jiwa_stateful !== null) {
            $headerParams['jiwa-stateful'] = ObjectSerializer::toHeaderValue($jiwa_stateful);
        }


        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json', 'application/xml']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json', 'application/xml'],
                ['application/x-www-form-urlencoded', 'application/json', 'application/xml']
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            
            if($headers['Content-Type'] === 'application/json') {
                // \stdClass has no __toString(), so we should encode it manually
                if ($httpBody instanceof \stdClass) {
                    $httpBody = \GuzzleHttp\json_encode($httpBody);
                }
                // array has no __toString(), so we should encode it manually
                if(is_array($httpBody)) {
                    $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($httpBody));
                }
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\Query::build($formParams);
            }
        }

        // this endpoint requires HTTP basic authentication
        if ($this->config->getUsername() !== null || $this->config->getPassword() !== null) {
            $headers['Authorization'] = 'Basic ' . base64_encode($this->config->getUsername() . ":" . $this->config->getPassword());
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\Query::build($queryParams);
        return new Request(
            'DELETE',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation purchaseInvoiceACTIVATERequestActivatePurchaseInvoiceIDPost
     *
     * Activates a purchase invoice.
     *
     * @param  string $accept Accept Header (required)
     * @param  string $purchase_invoice_id purchase_invoice_id (required)
     * @param  bool $jiwa_stateful Stateful indicator (optional)
     * @param  \Jiwa\Model\PurchaseInvoiceACTIVATERequest $body body (optional)
     *
     * @throws \Jiwa\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Jiwa\Model\PurchaseInvoice
     */
    public function purchaseInvoiceACTIVATERequestActivatePurchaseInvoiceIDPost($accept, $purchase_invoice_id, $jiwa_stateful = null, $body = null)
    {
        list($response) = $this->purchaseInvoiceACTIVATERequestActivatePurchaseInvoiceIDPostWithHttpInfo($accept, $purchase_invoice_id, $jiwa_stateful, $body);
        return $response;
    }

    /**
     * Operation purchaseInvoiceACTIVATERequestActivatePurchaseInvoiceIDPostWithHttpInfo
     *
     * Activates a purchase invoice.
     *
     * @param  string $accept Accept Header (required)
     * @param  string $purchase_invoice_id (required)
     * @param  bool $jiwa_stateful Stateful indicator (optional)
     * @param  \Jiwa\Model\PurchaseInvoiceACTIVATERequest $body (optional)
     *
     * @throws \Jiwa\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Jiwa\Model\PurchaseInvoice, HTTP status code, HTTP response headers (array of strings)
     */
    public function purchaseInvoiceACTIVATERequestActivatePurchaseInvoiceIDPostWithHttpInfo($accept, $purchase_invoice_id, $jiwa_stateful = null, $body = null)
    {
        $returnType = '\Jiwa\Model\PurchaseInvoice';
        $request = $this->purchaseInvoiceACTIVATERequestActivatePurchaseInvoiceIDPostRequest($accept, $purchase_invoice_id, $jiwa_stateful, $body);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Jiwa\Model\PurchaseInvoice',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 204:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Jiwa\Model\PurchaseInvoice',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 403:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Jiwa\Model\PurchaseInvoice',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 404:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Jiwa\Model\PurchaseInvoice',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 401:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Jiwa\Model\PurchaseInvoice',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation purchaseInvoiceACTIVATERequestActivatePurchaseInvoiceIDPostAsync
     *
     * Activates a purchase invoice.
     *
     * @param  string $accept Accept Header (required)
     * @param  string $purchase_invoice_id (required)
     * @param  bool $jiwa_stateful Stateful indicator (optional)
     * @param  \Jiwa\Model\PurchaseInvoiceACTIVATERequest $body (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function purchaseInvoiceACTIVATERequestActivatePurchaseInvoiceIDPostAsync($accept, $purchase_invoice_id, $jiwa_stateful = null, $body = null)
    {
        return $this->purchaseInvoiceACTIVATERequestActivatePurchaseInvoiceIDPostAsyncWithHttpInfo($accept, $purchase_invoice_id, $jiwa_stateful, $body)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation purchaseInvoiceACTIVATERequestActivatePurchaseInvoiceIDPostAsyncWithHttpInfo
     *
     * Activates a purchase invoice.
     *
     * @param  string $accept Accept Header (required)
     * @param  string $purchase_invoice_id (required)
     * @param  bool $jiwa_stateful Stateful indicator (optional)
     * @param  \Jiwa\Model\PurchaseInvoiceACTIVATERequest $body (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function purchaseInvoiceACTIVATERequestActivatePurchaseInvoiceIDPostAsyncWithHttpInfo($accept, $purchase_invoice_id, $jiwa_stateful = null, $body = null)
    {
        $returnType = '\Jiwa\Model\PurchaseInvoice';
        $request = $this->purchaseInvoiceACTIVATERequestActivatePurchaseInvoiceIDPostRequest($accept, $purchase_invoice_id, $jiwa_stateful, $body);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'purchaseInvoiceACTIVATERequestActivatePurchaseInvoiceIDPost'
     *
     * @param  string $accept Accept Header (required)
     * @param  string $purchase_invoice_id (required)
     * @param  bool $jiwa_stateful Stateful indicator (optional)
     * @param  \Jiwa\Model\PurchaseInvoiceACTIVATERequest $body (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function purchaseInvoiceACTIVATERequestActivatePurchaseInvoiceIDPostRequest($accept, $purchase_invoice_id, $jiwa_stateful = null, $body = null)
    {
        // verify the required parameter 'accept' is set
        if ($accept === null || (is_array($accept) && count($accept) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $accept when calling purchaseInvoiceACTIVATERequestActivatePurchaseInvoiceIDPost'
            );
        }
        // verify the required parameter 'purchase_invoice_id' is set
        if ($purchase_invoice_id === null || (is_array($purchase_invoice_id) && count($purchase_invoice_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $purchase_invoice_id when calling purchaseInvoiceACTIVATERequestActivatePurchaseInvoiceIDPost'
            );
        }

        $resourcePath = '/PurchaseInvoices/Activate/{PurchaseInvoiceID}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // header params
        if ($accept !== null) {
            $headerParams['Accept'] = ObjectSerializer::toHeaderValue($accept);
        }
        // header params
        if ($jiwa_stateful !== null) {
            $headerParams['jiwa-stateful'] = ObjectSerializer::toHeaderValue($jiwa_stateful);
        }

        // path params
        if ($purchase_invoice_id !== null) {
            $resourcePath = str_replace(
                '{' . 'PurchaseInvoiceID' . '}',
                ObjectSerializer::toPathValue($purchase_invoice_id),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;
        if (isset($body)) {
            $_tempBody = $body;
        }

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json', 'application/xml']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json', 'application/xml'],
                ['application/x-www-form-urlencoded', 'application/json', 'application/xml']
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            
            if($headers['Content-Type'] === 'application/json') {
                // \stdClass has no __toString(), so we should encode it manually
                if ($httpBody instanceof \stdClass) {
                    $httpBody = \GuzzleHttp\json_encode($httpBody);
                }
                // array has no __toString(), so we should encode it manually
                if(is_array($httpBody)) {
                    $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($httpBody));
                }
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\Query::build($formParams);
            }
        }

        // this endpoint requires HTTP basic authentication
        if ($this->config->getUsername() !== null || $this->config->getPassword() !== null) {
            $headers['Authorization'] = 'Basic ' . base64_encode($this->config->getUsername() . ":" . $this->config->getPassword());
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\Query::build($queryParams);
        return new Request(
            'POST',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation purchaseInvoiceCREATEFromGRNRequestFromGoodsReceivedNotesGRNNosPost
     *
     * Creates a purchase invoice from the supplied goods received notes.
     *
     * @param  string $accept Accept Header (required)
     * @param  string $grn_nos grn_nos (required)
     * @param  bool $jiwa_stateful Stateful indicator (optional)
     * @param  \Jiwa\Model\PurchaseInvoiceCREATEFromGRNRequest $body body (optional)
     *
     * @throws \Jiwa\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Jiwa\Model\PurchaseInvoice
     */
    public function purchaseInvoiceCREATEFromGRNRequestFromGoodsReceivedNotesGRNNosPost($accept, $grn_nos, $jiwa_stateful = null, $body = null)
    {
        list($response) = $this->purchaseInvoiceCREATEFromGRNRequestFromGoodsReceivedNotesGRNNosPostWithHttpInfo($accept, $grn_nos, $jiwa_stateful, $body);
        return $response;
    }

    /**
     * Operation purchaseInvoiceCREATEFromGRNRequestFromGoodsReceivedNotesGRNNosPostWithHttpInfo
     *
     * Creates a purchase invoice from the supplied goods received notes.
     *
     * @param  string $accept Accept Header (required)
     * @param  string $grn_nos (required)
     * @param  bool $jiwa_stateful Stateful indicator (optional)
     * @param  \Jiwa\Model\PurchaseInvoiceCREATEFromGRNRequest $body (optional)
     *
     * @throws \Jiwa\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Jiwa\Model\PurchaseInvoice, HTTP status code, HTTP response headers (array of strings)
     */
    public function purchaseInvoiceCREATEFromGRNRequestFromGoodsReceivedNotesGRNNosPostWithHttpInfo($accept, $grn_nos, $jiwa_stateful = null, $body = null)
    {
        $returnType = '\Jiwa\Model\PurchaseInvoice';
        $request = $this->purchaseInvoiceCREATEFromGRNRequestFromGoodsReceivedNotesGRNNosPostRequest($accept, $grn_nos, $jiwa_stateful, $body);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Jiwa\Model\PurchaseInvoice',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 404:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Jiwa\Model\PurchaseInvoice',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 201:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Jiwa\Model\PurchaseInvoice',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 403:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Jiwa\Model\PurchaseInvoice',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 401:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Jiwa\Model\PurchaseInvoice',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation purchaseInvoiceCREATEFromGRNRequestFromGoodsReceivedNotesGRNNosPostAsync
     *
     * Creates a purchase invoice from the supplied goods received notes.
     *
     * @param  string $accept Accept Header (required)
     * @param  string $grn_nos (required)
     * @param  bool $jiwa_stateful Stateful indicator (optional)
     * @param  \Jiwa\Model\PurchaseInvoiceCREATEFromGRNRequest $body (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function purchaseInvoiceCREATEFromGRNRequestFromGoodsReceivedNotesGRNNosPostAsync($accept, $grn_nos, $jiwa_stateful = null, $body = null)
    {
        return $this->purchaseInvoiceCREATEFromGRNRequestFromGoodsReceivedNotesGRNNosPostAsyncWithHttpInfo($accept, $grn_nos, $jiwa_stateful, $body)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation purchaseInvoiceCREATEFromGRNRequestFromGoodsReceivedNotesGRNNosPostAsyncWithHttpInfo
     *
     * Creates a purchase invoice from the supplied goods received notes.
     *
     * @param  string $accept Accept Header (required)
     * @param  string $grn_nos (required)
     * @param  bool $jiwa_stateful Stateful indicator (optional)
     * @param  \Jiwa\Model\PurchaseInvoiceCREATEFromGRNRequest $body (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function purchaseInvoiceCREATEFromGRNRequestFromGoodsReceivedNotesGRNNosPostAsyncWithHttpInfo($accept, $grn_nos, $jiwa_stateful = null, $body = null)
    {
        $returnType = '\Jiwa\Model\PurchaseInvoice';
        $request = $this->purchaseInvoiceCREATEFromGRNRequestFromGoodsReceivedNotesGRNNosPostRequest($accept, $grn_nos, $jiwa_stateful, $body);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'purchaseInvoiceCREATEFromGRNRequestFromGoodsReceivedNotesGRNNosPost'
     *
     * @param  string $accept Accept Header (required)
     * @param  string $grn_nos (required)
     * @param  bool $jiwa_stateful Stateful indicator (optional)
     * @param  \Jiwa\Model\PurchaseInvoiceCREATEFromGRNRequest $body (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function purchaseInvoiceCREATEFromGRNRequestFromGoodsReceivedNotesGRNNosPostRequest($accept, $grn_nos, $jiwa_stateful = null, $body = null)
    {
        // verify the required parameter 'accept' is set
        if ($accept === null || (is_array($accept) && count($accept) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $accept when calling purchaseInvoiceCREATEFromGRNRequestFromGoodsReceivedNotesGRNNosPost'
            );
        }
        // verify the required parameter 'grn_nos' is set
        if ($grn_nos === null || (is_array($grn_nos) && count($grn_nos) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $grn_nos when calling purchaseInvoiceCREATEFromGRNRequestFromGoodsReceivedNotesGRNNosPost'
            );
        }

        $resourcePath = '/PurchaseInvoices/FromGoodsReceivedNotes/{GRNNos}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // header params
        if ($accept !== null) {
            $headerParams['Accept'] = ObjectSerializer::toHeaderValue($accept);
        }
        // header params
        if ($jiwa_stateful !== null) {
            $headerParams['jiwa-stateful'] = ObjectSerializer::toHeaderValue($jiwa_stateful);
        }

        // path params
        if ($grn_nos !== null) {
            $resourcePath = str_replace(
                '{' . 'GRNNos' . '}',
                ObjectSerializer::toPathValue($grn_nos),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;
        if (isset($body)) {
            $_tempBody = $body;
        }

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json', 'application/xml']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json', 'application/xml'],
                ['application/x-www-form-urlencoded', 'application/json', 'application/xml']
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            
            if($headers['Content-Type'] === 'application/json') {
                // \stdClass has no __toString(), so we should encode it manually
                if ($httpBody instanceof \stdClass) {
                    $httpBody = \GuzzleHttp\json_encode($httpBody);
                }
                // array has no __toString(), so we should encode it manually
                if(is_array($httpBody)) {
                    $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($httpBody));
                }
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\Query::build($formParams);
            }
        }

        // this endpoint requires HTTP basic authentication
        if ($this->config->getUsername() !== null || $this->config->getPassword() !== null) {
            $headers['Authorization'] = 'Basic ' . base64_encode($this->config->getUsername() . ":" . $this->config->getPassword());
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\Query::build($queryParams);
        return new Request(
            'POST',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation purchaseInvoiceDELETERequestPurchaseInvoiceIDDelete
     *
     * Deletes a purchase invoice.
     *
     * @param  string $accept Accept Header (required)
     * @param  string $purchase_invoice_id purchase_invoice_id (required)
     * @param  bool $jiwa_stateful Stateful indicator (optional)
     *
     * @throws \Jiwa\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Jiwa\Model\Object
     */
    public function purchaseInvoiceDELETERequestPurchaseInvoiceIDDelete($accept, $purchase_invoice_id, $jiwa_stateful = null)
    {
        list($response) = $this->purchaseInvoiceDELETERequestPurchaseInvoiceIDDeleteWithHttpInfo($accept, $purchase_invoice_id, $jiwa_stateful);
        return $response;
    }

    /**
     * Operation purchaseInvoiceDELETERequestPurchaseInvoiceIDDeleteWithHttpInfo
     *
     * Deletes a purchase invoice.
     *
     * @param  string $accept Accept Header (required)
     * @param  string $purchase_invoice_id (required)
     * @param  bool $jiwa_stateful Stateful indicator (optional)
     *
     * @throws \Jiwa\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Jiwa\Model\Object, HTTP status code, HTTP response headers (array of strings)
     */
    public function purchaseInvoiceDELETERequestPurchaseInvoiceIDDeleteWithHttpInfo($accept, $purchase_invoice_id, $jiwa_stateful = null)
    {
        $returnType = '\Jiwa\Model\Object';
        $request = $this->purchaseInvoiceDELETERequestPurchaseInvoiceIDDeleteRequest($accept, $purchase_invoice_id, $jiwa_stateful);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Jiwa\Model\Object',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 401:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Jiwa\Model\Object',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 404:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Jiwa\Model\Object',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 204:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Jiwa\Model\Object',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 403:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Jiwa\Model\Object',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation purchaseInvoiceDELETERequestPurchaseInvoiceIDDeleteAsync
     *
     * Deletes a purchase invoice.
     *
     * @param  string $accept Accept Header (required)
     * @param  string $purchase_invoice_id (required)
     * @param  bool $jiwa_stateful Stateful indicator (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function purchaseInvoiceDELETERequestPurchaseInvoiceIDDeleteAsync($accept, $purchase_invoice_id, $jiwa_stateful = null)
    {
        return $this->purchaseInvoiceDELETERequestPurchaseInvoiceIDDeleteAsyncWithHttpInfo($accept, $purchase_invoice_id, $jiwa_stateful)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation purchaseInvoiceDELETERequestPurchaseInvoiceIDDeleteAsyncWithHttpInfo
     *
     * Deletes a purchase invoice.
     *
     * @param  string $accept Accept Header (required)
     * @param  string $purchase_invoice_id (required)
     * @param  bool $jiwa_stateful Stateful indicator (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function purchaseInvoiceDELETERequestPurchaseInvoiceIDDeleteAsyncWithHttpInfo($accept, $purchase_invoice_id, $jiwa_stateful = null)
    {
        $returnType = '\Jiwa\Model\Object';
        $request = $this->purchaseInvoiceDELETERequestPurchaseInvoiceIDDeleteRequest($accept, $purchase_invoice_id, $jiwa_stateful);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'purchaseInvoiceDELETERequestPurchaseInvoiceIDDelete'
     *
     * @param  string $accept Accept Header (required)
     * @param  string $purchase_invoice_id (required)
     * @param  bool $jiwa_stateful Stateful indicator (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function purchaseInvoiceDELETERequestPurchaseInvoiceIDDeleteRequest($accept, $purchase_invoice_id, $jiwa_stateful = null)
    {
        // verify the required parameter 'accept' is set
        if ($accept === null || (is_array($accept) && count($accept) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $accept when calling purchaseInvoiceDELETERequestPurchaseInvoiceIDDelete'
            );
        }
        // verify the required parameter 'purchase_invoice_id' is set
        if ($purchase_invoice_id === null || (is_array($purchase_invoice_id) && count($purchase_invoice_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $purchase_invoice_id when calling purchaseInvoiceDELETERequestPurchaseInvoiceIDDelete'
            );
        }

        $resourcePath = '/PurchaseInvoices/{PurchaseInvoiceID}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // header params
        if ($accept !== null) {
            $headerParams['Accept'] = ObjectSerializer::toHeaderValue($accept);
        }
        // header params
        if ($jiwa_stateful !== null) {
            $headerParams['jiwa-stateful'] = ObjectSerializer::toHeaderValue($jiwa_stateful);
        }

        // path params
        if ($purchase_invoice_id !== null) {
            $resourcePath = str_replace(
                '{' . 'PurchaseInvoiceID' . '}',
                ObjectSerializer::toPathValue($purchase_invoice_id),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json', 'application/xml']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json', 'application/xml'],
                ['application/x-www-form-urlencoded', 'application/json', 'application/xml']
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            
            if($headers['Content-Type'] === 'application/json') {
                // \stdClass has no __toString(), so we should encode it manually
                if ($httpBody instanceof \stdClass) {
                    $httpBody = \GuzzleHttp\json_encode($httpBody);
                }
                // array has no __toString(), so we should encode it manually
                if(is_array($httpBody)) {
                    $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($httpBody));
                }
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\Query::build($formParams);
            }
        }

        // this endpoint requires HTTP basic authentication
        if ($this->config->getUsername() !== null || $this->config->getPassword() !== null) {
            $headers['Authorization'] = 'Basic ' . base64_encode($this->config->getUsername() . ":" . $this->config->getPassword());
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\Query::build($queryParams);
        return new Request(
            'DELETE',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation purchaseInvoiceGETRequestPurchaseInvoiceIDGet
     *
     * Retrieves a purchase invoice.
     *
     * @param  string $accept Accept Header (required)
     * @param  string $purchase_invoice_id purchase_invoice_id (required)
     * @param  bool $jiwa_stateful Stateful indicator (optional)
     *
     * @throws \Jiwa\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Jiwa\Model\PurchaseInvoice
     */
    public function purchaseInvoiceGETRequestPurchaseInvoiceIDGet($accept, $purchase_invoice_id, $jiwa_stateful = null)
    {
        list($response) = $this->purchaseInvoiceGETRequestPurchaseInvoiceIDGetWithHttpInfo($accept, $purchase_invoice_id, $jiwa_stateful);
        return $response;
    }

    /**
     * Operation purchaseInvoiceGETRequestPurchaseInvoiceIDGetWithHttpInfo
     *
     * Retrieves a purchase invoice.
     *
     * @param  string $accept Accept Header (required)
     * @param  string $purchase_invoice_id (required)
     * @param  bool $jiwa_stateful Stateful indicator (optional)
     *
     * @throws \Jiwa\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Jiwa\Model\PurchaseInvoice, HTTP status code, HTTP response headers (array of strings)
     */
    public function purchaseInvoiceGETRequestPurchaseInvoiceIDGetWithHttpInfo($accept, $purchase_invoice_id, $jiwa_stateful = null)
    {
        $returnType = '\Jiwa\Model\PurchaseInvoice';
        $request = $this->purchaseInvoiceGETRequestPurchaseInvoiceIDGetRequest($accept, $purchase_invoice_id, $jiwa_stateful);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Jiwa\Model\PurchaseInvoice',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 403:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Jiwa\Model\PurchaseInvoice',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 401:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Jiwa\Model\PurchaseInvoice',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 404:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Jiwa\Model\PurchaseInvoice',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation purchaseInvoiceGETRequestPurchaseInvoiceIDGetAsync
     *
     * Retrieves a purchase invoice.
     *
     * @param  string $accept Accept Header (required)
     * @param  string $purchase_invoice_id (required)
     * @param  bool $jiwa_stateful Stateful indicator (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function purchaseInvoiceGETRequestPurchaseInvoiceIDGetAsync($accept, $purchase_invoice_id, $jiwa_stateful = null)
    {
        return $this->purchaseInvoiceGETRequestPurchaseInvoiceIDGetAsyncWithHttpInfo($accept, $purchase_invoice_id, $jiwa_stateful)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation purchaseInvoiceGETRequestPurchaseInvoiceIDGetAsyncWithHttpInfo
     *
     * Retrieves a purchase invoice.
     *
     * @param  string $accept Accept Header (required)
     * @param  string $purchase_invoice_id (required)
     * @param  bool $jiwa_stateful Stateful indicator (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function purchaseInvoiceGETRequestPurchaseInvoiceIDGetAsyncWithHttpInfo($accept, $purchase_invoice_id, $jiwa_stateful = null)
    {
        $returnType = '\Jiwa\Model\PurchaseInvoice';
        $request = $this->purchaseInvoiceGETRequestPurchaseInvoiceIDGetRequest($accept, $purchase_invoice_id, $jiwa_stateful);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'purchaseInvoiceGETRequestPurchaseInvoiceIDGet'
     *
     * @param  string $accept Accept Header (required)
     * @param  string $purchase_invoice_id (required)
     * @param  bool $jiwa_stateful Stateful indicator (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function purchaseInvoiceGETRequestPurchaseInvoiceIDGetRequest($accept, $purchase_invoice_id, $jiwa_stateful = null)
    {
        // verify the required parameter 'accept' is set
        if ($accept === null || (is_array($accept) && count($accept) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $accept when calling purchaseInvoiceGETRequestPurchaseInvoiceIDGet'
            );
        }
        // verify the required parameter 'purchase_invoice_id' is set
        if ($purchase_invoice_id === null || (is_array($purchase_invoice_id) && count($purchase_invoice_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $purchase_invoice_id when calling purchaseInvoiceGETRequestPurchaseInvoiceIDGet'
            );
        }

        $resourcePath = '/PurchaseInvoices/{PurchaseInvoiceID}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // header params
        if ($accept !== null) {
            $headerParams['Accept'] = ObjectSerializer::toHeaderValue($accept);
        }
        // header params
        if ($jiwa_stateful !== null) {
            $headerParams['jiwa-stateful'] = ObjectSerializer::toHeaderValue($jiwa_stateful);
        }

        // path params
        if ($purchase_invoice_id !== null) {
            $resourcePath = str_replace(
                '{' . 'PurchaseInvoiceID' . '}',
                ObjectSerializer::toPathValue($purchase_invoice_id),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json', 'application/xml']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json', 'application/xml'],
                ['application/x-www-form-urlencoded', 'application/json', 'application/xml']
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            
            if($headers['Content-Type'] === 'application/json') {
                // \stdClass has no __toString(), so we should encode it manually
                if ($httpBody instanceof \stdClass) {
                    $httpBody = \GuzzleHttp\json_encode($httpBody);
                }
                // array has no __toString(), so we should encode it manually
                if(is_array($httpBody)) {
                    $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($httpBody));
                }
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\Query::build($formParams);
            }
        }

        // this endpoint requires HTTP basic authentication
        if ($this->config->getUsername() !== null || $this->config->getPassword() !== null) {
            $headers['Authorization'] = 'Basic ' . base64_encode($this->config->getUsername() . ":" . $this->config->getPassword());
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\Query::build($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation purchaseInvoiceGoodsReceivedNoteDELETERequestPurchaseInvoiceIDGoodsReceivedNotesGRNIDDelete
     *
     * Deletes a goods received note from a purchase invoice.
     *
     * @param  string $accept Accept Header (required)
     * @param  string $purchase_invoice_id purchase_invoice_id (required)
     * @param  string $grnid grnid (required)
     * @param  bool $jiwa_stateful Stateful indicator (optional)
     * @param  string $goods_received_note_invoiced_id goods_received_note_invoiced_id (optional)
     * @param  string $slip_no slip_no (optional)
     * @param  \DateTime $received_date received_date (optional)
     * @param  string $freight_tax_id freight_tax_id (optional)
     * @param  double $freight freight (optional)
     * @param  double $freight_tax_amount freight_tax_amount (optional)
     * @param  string $duty_tax_id duty_tax_id (optional)
     * @param  double $duty duty (optional)
     * @param  double $duty_tax_amount duty_tax_amount (optional)
     * @param  string $insurance_tax_id insurance_tax_id (optional)
     * @param  double $insurance insurance (optional)
     * @param  double $insurance_tax_amount insurance_tax_amount (optional)
     * @param  \DateTime $re_main_last_saved_date_time re_main_last_saved_date_time (optional)
     *
     * @throws \Jiwa\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Jiwa\Model\Object
     */
    public function purchaseInvoiceGoodsReceivedNoteDELETERequestPurchaseInvoiceIDGoodsReceivedNotesGRNIDDelete($accept, $purchase_invoice_id, $grnid, $jiwa_stateful = null, $goods_received_note_invoiced_id = null, $slip_no = null, $received_date = null, $freight_tax_id = null, $freight = null, $freight_tax_amount = null, $duty_tax_id = null, $duty = null, $duty_tax_amount = null, $insurance_tax_id = null, $insurance = null, $insurance_tax_amount = null, $re_main_last_saved_date_time = null)
    {
        list($response) = $this->purchaseInvoiceGoodsReceivedNoteDELETERequestPurchaseInvoiceIDGoodsReceivedNotesGRNIDDeleteWithHttpInfo($accept, $purchase_invoice_id, $grnid, $jiwa_stateful, $goods_received_note_invoiced_id, $slip_no, $received_date, $freight_tax_id, $freight, $freight_tax_amount, $duty_tax_id, $duty, $duty_tax_amount, $insurance_tax_id, $insurance, $insurance_tax_amount, $re_main_last_saved_date_time);
        return $response;
    }

    /**
     * Operation purchaseInvoiceGoodsReceivedNoteDELETERequestPurchaseInvoiceIDGoodsReceivedNotesGRNIDDeleteWithHttpInfo
     *
     * Deletes a goods received note from a purchase invoice.
     *
     * @param  string $accept Accept Header (required)
     * @param  string $purchase_invoice_id (required)
     * @param  string $grnid (required)
     * @param  bool $jiwa_stateful Stateful indicator (optional)
     * @param  string $goods_received_note_invoiced_id (optional)
     * @param  string $slip_no (optional)
     * @param  \DateTime $received_date (optional)
     * @param  string $freight_tax_id (optional)
     * @param  double $freight (optional)
     * @param  double $freight_tax_amount (optional)
     * @param  string $duty_tax_id (optional)
     * @param  double $duty (optional)
     * @param  double $duty_tax_amount (optional)
     * @param  string $insurance_tax_id (optional)
     * @param  double $insurance (optional)
     * @param  double $insurance_tax_amount (optional)
     * @param  \DateTime $re_main_last_saved_date_time (optional)
     *
     * @throws \Jiwa\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Jiwa\Model\Object, HTTP status code, HTTP response headers (array of strings)
     */
    public function purchaseInvoiceGoodsReceivedNoteDELETERequestPurchaseInvoiceIDGoodsReceivedNotesGRNIDDeleteWithHttpInfo($accept, $purchase_invoice_id, $grnid, $jiwa_stateful = null, $goods_received_note_invoiced_id = null, $slip_no = null, $received_date = null, $freight_tax_id = null, $freight = null, $freight_tax_amount = null, $duty_tax_id = null, $duty = null, $duty_tax_amount = null, $insurance_tax_id = null, $insurance = null, $insurance_tax_amount = null, $re_main_last_saved_date_time = null)
    {
        $returnType = '\Jiwa\Model\Object';
        $request = $this->purchaseInvoiceGoodsReceivedNoteDELETERequestPurchaseInvoiceIDGoodsReceivedNotesGRNIDDeleteRequest($accept, $purchase_invoice_id, $grnid, $jiwa_stateful, $goods_received_note_invoiced_id, $slip_no, $received_date, $freight_tax_id, $freight, $freight_tax_amount, $duty_tax_id, $duty, $duty_tax_amount, $insurance_tax_id, $insurance, $insurance_tax_amount, $re_main_last_saved_date_time);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Jiwa\Model\Object',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 403:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Jiwa\Model\Object',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 404:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Jiwa\Model\Object',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 204:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Jiwa\Model\Object',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 401:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Jiwa\Model\Object',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation purchaseInvoiceGoodsReceivedNoteDELETERequestPurchaseInvoiceIDGoodsReceivedNotesGRNIDDeleteAsync
     *
     * Deletes a goods received note from a purchase invoice.
     *
     * @param  string $accept Accept Header (required)
     * @param  string $purchase_invoice_id (required)
     * @param  string $grnid (required)
     * @param  bool $jiwa_stateful Stateful indicator (optional)
     * @param  string $goods_received_note_invoiced_id (optional)
     * @param  string $slip_no (optional)
     * @param  \DateTime $received_date (optional)
     * @param  string $freight_tax_id (optional)
     * @param  double $freight (optional)
     * @param  double $freight_tax_amount (optional)
     * @param  string $duty_tax_id (optional)
     * @param  double $duty (optional)
     * @param  double $duty_tax_amount (optional)
     * @param  string $insurance_tax_id (optional)
     * @param  double $insurance (optional)
     * @param  double $insurance_tax_amount (optional)
     * @param  \DateTime $re_main_last_saved_date_time (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function purchaseInvoiceGoodsReceivedNoteDELETERequestPurchaseInvoiceIDGoodsReceivedNotesGRNIDDeleteAsync($accept, $purchase_invoice_id, $grnid, $jiwa_stateful = null, $goods_received_note_invoiced_id = null, $slip_no = null, $received_date = null, $freight_tax_id = null, $freight = null, $freight_tax_amount = null, $duty_tax_id = null, $duty = null, $duty_tax_amount = null, $insurance_tax_id = null, $insurance = null, $insurance_tax_amount = null, $re_main_last_saved_date_time = null)
    {
        return $this->purchaseInvoiceGoodsReceivedNoteDELETERequestPurchaseInvoiceIDGoodsReceivedNotesGRNIDDeleteAsyncWithHttpInfo($accept, $purchase_invoice_id, $grnid, $jiwa_stateful, $goods_received_note_invoiced_id, $slip_no, $received_date, $freight_tax_id, $freight, $freight_tax_amount, $duty_tax_id, $duty, $duty_tax_amount, $insurance_tax_id, $insurance, $insurance_tax_amount, $re_main_last_saved_date_time)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation purchaseInvoiceGoodsReceivedNoteDELETERequestPurchaseInvoiceIDGoodsReceivedNotesGRNIDDeleteAsyncWithHttpInfo
     *
     * Deletes a goods received note from a purchase invoice.
     *
     * @param  string $accept Accept Header (required)
     * @param  string $purchase_invoice_id (required)
     * @param  string $grnid (required)
     * @param  bool $jiwa_stateful Stateful indicator (optional)
     * @param  string $goods_received_note_invoiced_id (optional)
     * @param  string $slip_no (optional)
     * @param  \DateTime $received_date (optional)
     * @param  string $freight_tax_id (optional)
     * @param  double $freight (optional)
     * @param  double $freight_tax_amount (optional)
     * @param  string $duty_tax_id (optional)
     * @param  double $duty (optional)
     * @param  double $duty_tax_amount (optional)
     * @param  string $insurance_tax_id (optional)
     * @param  double $insurance (optional)
     * @param  double $insurance_tax_amount (optional)
     * @param  \DateTime $re_main_last_saved_date_time (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function purchaseInvoiceGoodsReceivedNoteDELETERequestPurchaseInvoiceIDGoodsReceivedNotesGRNIDDeleteAsyncWithHttpInfo($accept, $purchase_invoice_id, $grnid, $jiwa_stateful = null, $goods_received_note_invoiced_id = null, $slip_no = null, $received_date = null, $freight_tax_id = null, $freight = null, $freight_tax_amount = null, $duty_tax_id = null, $duty = null, $duty_tax_amount = null, $insurance_tax_id = null, $insurance = null, $insurance_tax_amount = null, $re_main_last_saved_date_time = null)
    {
        $returnType = '\Jiwa\Model\Object';
        $request = $this->purchaseInvoiceGoodsReceivedNoteDELETERequestPurchaseInvoiceIDGoodsReceivedNotesGRNIDDeleteRequest($accept, $purchase_invoice_id, $grnid, $jiwa_stateful, $goods_received_note_invoiced_id, $slip_no, $received_date, $freight_tax_id, $freight, $freight_tax_amount, $duty_tax_id, $duty, $duty_tax_amount, $insurance_tax_id, $insurance, $insurance_tax_amount, $re_main_last_saved_date_time);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'purchaseInvoiceGoodsReceivedNoteDELETERequestPurchaseInvoiceIDGoodsReceivedNotesGRNIDDelete'
     *
     * @param  string $accept Accept Header (required)
     * @param  string $purchase_invoice_id (required)
     * @param  string $grnid (required)
     * @param  bool $jiwa_stateful Stateful indicator (optional)
     * @param  string $goods_received_note_invoiced_id (optional)
     * @param  string $slip_no (optional)
     * @param  \DateTime $received_date (optional)
     * @param  string $freight_tax_id (optional)
     * @param  double $freight (optional)
     * @param  double $freight_tax_amount (optional)
     * @param  string $duty_tax_id (optional)
     * @param  double $duty (optional)
     * @param  double $duty_tax_amount (optional)
     * @param  string $insurance_tax_id (optional)
     * @param  double $insurance (optional)
     * @param  double $insurance_tax_amount (optional)
     * @param  \DateTime $re_main_last_saved_date_time (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function purchaseInvoiceGoodsReceivedNoteDELETERequestPurchaseInvoiceIDGoodsReceivedNotesGRNIDDeleteRequest($accept, $purchase_invoice_id, $grnid, $jiwa_stateful = null, $goods_received_note_invoiced_id = null, $slip_no = null, $received_date = null, $freight_tax_id = null, $freight = null, $freight_tax_amount = null, $duty_tax_id = null, $duty = null, $duty_tax_amount = null, $insurance_tax_id = null, $insurance = null, $insurance_tax_amount = null, $re_main_last_saved_date_time = null)
    {
        // verify the required parameter 'accept' is set
        if ($accept === null || (is_array($accept) && count($accept) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $accept when calling purchaseInvoiceGoodsReceivedNoteDELETERequestPurchaseInvoiceIDGoodsReceivedNotesGRNIDDelete'
            );
        }
        // verify the required parameter 'purchase_invoice_id' is set
        if ($purchase_invoice_id === null || (is_array($purchase_invoice_id) && count($purchase_invoice_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $purchase_invoice_id when calling purchaseInvoiceGoodsReceivedNoteDELETERequestPurchaseInvoiceIDGoodsReceivedNotesGRNIDDelete'
            );
        }
        // verify the required parameter 'grnid' is set
        if ($grnid === null || (is_array($grnid) && count($grnid) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $grnid when calling purchaseInvoiceGoodsReceivedNoteDELETERequestPurchaseInvoiceIDGoodsReceivedNotesGRNIDDelete'
            );
        }

        $resourcePath = '/PurchaseInvoices/{PurchaseInvoiceID}/GoodsReceivedNotes/{GRNID}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        if ($goods_received_note_invoiced_id !== null) {
            $queryParams['GoodsReceivedNoteInvoicedID'] = ObjectSerializer::toQueryValue($goods_received_note_invoiced_id);
        }
        // query params
        if ($slip_no !== null) {
            $queryParams['SlipNo'] = ObjectSerializer::toQueryValue($slip_no);
        }
        // query params
        if ($received_date !== null) {
            $queryParams['ReceivedDate'] = ObjectSerializer::toQueryValue($received_date);
        }
        // query params
        if ($freight_tax_id !== null) {
            $queryParams['FreightTaxID'] = ObjectSerializer::toQueryValue($freight_tax_id);
        }
        // query params
        if ($freight !== null) {
            $queryParams['Freight'] = ObjectSerializer::toQueryValue($freight);
        }
        // query params
        if ($freight_tax_amount !== null) {
            $queryParams['FreightTaxAmount'] = ObjectSerializer::toQueryValue($freight_tax_amount);
        }
        // query params
        if ($duty_tax_id !== null) {
            $queryParams['DutyTaxID'] = ObjectSerializer::toQueryValue($duty_tax_id);
        }
        // query params
        if ($duty !== null) {
            $queryParams['Duty'] = ObjectSerializer::toQueryValue($duty);
        }
        // query params
        if ($duty_tax_amount !== null) {
            $queryParams['DutyTaxAmount'] = ObjectSerializer::toQueryValue($duty_tax_amount);
        }
        // query params
        if ($insurance_tax_id !== null) {
            $queryParams['InsuranceTaxID'] = ObjectSerializer::toQueryValue($insurance_tax_id);
        }
        // query params
        if ($insurance !== null) {
            $queryParams['Insurance'] = ObjectSerializer::toQueryValue($insurance);
        }
        // query params
        if ($insurance_tax_amount !== null) {
            $queryParams['InsuranceTaxAmount'] = ObjectSerializer::toQueryValue($insurance_tax_amount);
        }
        // query params
        if ($re_main_last_saved_date_time !== null) {
            $queryParams['RE_Main_LastSavedDateTime'] = ObjectSerializer::toQueryValue($re_main_last_saved_date_time);
        }
        // header params
        if ($accept !== null) {
            $headerParams['Accept'] = ObjectSerializer::toHeaderValue($accept);
        }
        // header params
        if ($jiwa_stateful !== null) {
            $headerParams['jiwa-stateful'] = ObjectSerializer::toHeaderValue($jiwa_stateful);
        }

        // path params
        if ($purchase_invoice_id !== null) {
            $resourcePath = str_replace(
                '{' . 'PurchaseInvoiceID' . '}',
                ObjectSerializer::toPathValue($purchase_invoice_id),
                $resourcePath
            );
        }
        // path params
        if ($grnid !== null) {
            $resourcePath = str_replace(
                '{' . 'GRNID' . '}',
                ObjectSerializer::toPathValue($grnid),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json', 'application/xml']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json', 'application/xml'],
                ['application/x-www-form-urlencoded', 'application/json', 'application/xml']
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            
            if($headers['Content-Type'] === 'application/json') {
                // \stdClass has no __toString(), so we should encode it manually
                if ($httpBody instanceof \stdClass) {
                    $httpBody = \GuzzleHttp\json_encode($httpBody);
                }
                // array has no __toString(), so we should encode it manually
                if(is_array($httpBody)) {
                    $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($httpBody));
                }
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\Query::build($formParams);
            }
        }

        // this endpoint requires HTTP basic authentication
        if ($this->config->getUsername() !== null || $this->config->getPassword() !== null) {
            $headers['Authorization'] = 'Basic ' . base64_encode($this->config->getUsername() . ":" . $this->config->getPassword());
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\Query::build($queryParams);
        return new Request(
            'DELETE',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation purchaseInvoiceGoodsReceivedNoteGETRequestPurchaseInvoiceIDGoodsReceivedNotesGRNIDGet
     *
     * Retrieves a purchase invoice goods received note.
     *
     * @param  string $accept Accept Header (required)
     * @param  string $purchase_invoice_id purchase_invoice_id (required)
     * @param  string $grnid grnid (required)
     * @param  bool $jiwa_stateful Stateful indicator (optional)
     *
     * @throws \Jiwa\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Jiwa\Model\PurchaseInvoiceGoodsReceivedNoteInvoiced
     */
    public function purchaseInvoiceGoodsReceivedNoteGETRequestPurchaseInvoiceIDGoodsReceivedNotesGRNIDGet($accept, $purchase_invoice_id, $grnid, $jiwa_stateful = null)
    {
        list($response) = $this->purchaseInvoiceGoodsReceivedNoteGETRequestPurchaseInvoiceIDGoodsReceivedNotesGRNIDGetWithHttpInfo($accept, $purchase_invoice_id, $grnid, $jiwa_stateful);
        return $response;
    }

    /**
     * Operation purchaseInvoiceGoodsReceivedNoteGETRequestPurchaseInvoiceIDGoodsReceivedNotesGRNIDGetWithHttpInfo
     *
     * Retrieves a purchase invoice goods received note.
     *
     * @param  string $accept Accept Header (required)
     * @param  string $purchase_invoice_id (required)
     * @param  string $grnid (required)
     * @param  bool $jiwa_stateful Stateful indicator (optional)
     *
     * @throws \Jiwa\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Jiwa\Model\PurchaseInvoiceGoodsReceivedNoteInvoiced, HTTP status code, HTTP response headers (array of strings)
     */
    public function purchaseInvoiceGoodsReceivedNoteGETRequestPurchaseInvoiceIDGoodsReceivedNotesGRNIDGetWithHttpInfo($accept, $purchase_invoice_id, $grnid, $jiwa_stateful = null)
    {
        $returnType = '\Jiwa\Model\PurchaseInvoiceGoodsReceivedNoteInvoiced';
        $request = $this->purchaseInvoiceGoodsReceivedNoteGETRequestPurchaseInvoiceIDGoodsReceivedNotesGRNIDGetRequest($accept, $purchase_invoice_id, $grnid, $jiwa_stateful);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Jiwa\Model\PurchaseInvoiceGoodsReceivedNoteInvoiced',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 401:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Jiwa\Model\PurchaseInvoiceGoodsReceivedNoteInvoiced',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 404:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Jiwa\Model\PurchaseInvoiceGoodsReceivedNoteInvoiced',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 403:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Jiwa\Model\PurchaseInvoiceGoodsReceivedNoteInvoiced',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation purchaseInvoiceGoodsReceivedNoteGETRequestPurchaseInvoiceIDGoodsReceivedNotesGRNIDGetAsync
     *
     * Retrieves a purchase invoice goods received note.
     *
     * @param  string $accept Accept Header (required)
     * @param  string $purchase_invoice_id (required)
     * @param  string $grnid (required)
     * @param  bool $jiwa_stateful Stateful indicator (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function purchaseInvoiceGoodsReceivedNoteGETRequestPurchaseInvoiceIDGoodsReceivedNotesGRNIDGetAsync($accept, $purchase_invoice_id, $grnid, $jiwa_stateful = null)
    {
        return $this->purchaseInvoiceGoodsReceivedNoteGETRequestPurchaseInvoiceIDGoodsReceivedNotesGRNIDGetAsyncWithHttpInfo($accept, $purchase_invoice_id, $grnid, $jiwa_stateful)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation purchaseInvoiceGoodsReceivedNoteGETRequestPurchaseInvoiceIDGoodsReceivedNotesGRNIDGetAsyncWithHttpInfo
     *
     * Retrieves a purchase invoice goods received note.
     *
     * @param  string $accept Accept Header (required)
     * @param  string $purchase_invoice_id (required)
     * @param  string $grnid (required)
     * @param  bool $jiwa_stateful Stateful indicator (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function purchaseInvoiceGoodsReceivedNoteGETRequestPurchaseInvoiceIDGoodsReceivedNotesGRNIDGetAsyncWithHttpInfo($accept, $purchase_invoice_id, $grnid, $jiwa_stateful = null)
    {
        $returnType = '\Jiwa\Model\PurchaseInvoiceGoodsReceivedNoteInvoiced';
        $request = $this->purchaseInvoiceGoodsReceivedNoteGETRequestPurchaseInvoiceIDGoodsReceivedNotesGRNIDGetRequest($accept, $purchase_invoice_id, $grnid, $jiwa_stateful);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'purchaseInvoiceGoodsReceivedNoteGETRequestPurchaseInvoiceIDGoodsReceivedNotesGRNIDGet'
     *
     * @param  string $accept Accept Header (required)
     * @param  string $purchase_invoice_id (required)
     * @param  string $grnid (required)
     * @param  bool $jiwa_stateful Stateful indicator (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function purchaseInvoiceGoodsReceivedNoteGETRequestPurchaseInvoiceIDGoodsReceivedNotesGRNIDGetRequest($accept, $purchase_invoice_id, $grnid, $jiwa_stateful = null)
    {
        // verify the required parameter 'accept' is set
        if ($accept === null || (is_array($accept) && count($accept) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $accept when calling purchaseInvoiceGoodsReceivedNoteGETRequestPurchaseInvoiceIDGoodsReceivedNotesGRNIDGet'
            );
        }
        // verify the required parameter 'purchase_invoice_id' is set
        if ($purchase_invoice_id === null || (is_array($purchase_invoice_id) && count($purchase_invoice_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $purchase_invoice_id when calling purchaseInvoiceGoodsReceivedNoteGETRequestPurchaseInvoiceIDGoodsReceivedNotesGRNIDGet'
            );
        }
        // verify the required parameter 'grnid' is set
        if ($grnid === null || (is_array($grnid) && count($grnid) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $grnid when calling purchaseInvoiceGoodsReceivedNoteGETRequestPurchaseInvoiceIDGoodsReceivedNotesGRNIDGet'
            );
        }

        $resourcePath = '/PurchaseInvoices/{PurchaseInvoiceID}/GoodsReceivedNotes/{GRNID}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // header params
        if ($accept !== null) {
            $headerParams['Accept'] = ObjectSerializer::toHeaderValue($accept);
        }
        // header params
        if ($jiwa_stateful !== null) {
            $headerParams['jiwa-stateful'] = ObjectSerializer::toHeaderValue($jiwa_stateful);
        }

        // path params
        if ($purchase_invoice_id !== null) {
            $resourcePath = str_replace(
                '{' . 'PurchaseInvoiceID' . '}',
                ObjectSerializer::toPathValue($purchase_invoice_id),
                $resourcePath
            );
        }
        // path params
        if ($grnid !== null) {
            $resourcePath = str_replace(
                '{' . 'GRNID' . '}',
                ObjectSerializer::toPathValue($grnid),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json', 'application/xml']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json', 'application/xml'],
                ['application/x-www-form-urlencoded', 'application/json', 'application/xml']
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            
            if($headers['Content-Type'] === 'application/json') {
                // \stdClass has no __toString(), so we should encode it manually
                if ($httpBody instanceof \stdClass) {
                    $httpBody = \GuzzleHttp\json_encode($httpBody);
                }
                // array has no __toString(), so we should encode it manually
                if(is_array($httpBody)) {
                    $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($httpBody));
                }
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\Query::build($formParams);
            }
        }

        // this endpoint requires HTTP basic authentication
        if ($this->config->getUsername() !== null || $this->config->getPassword() !== null) {
            $headers['Authorization'] = 'Basic ' . base64_encode($this->config->getUsername() . ":" . $this->config->getPassword());
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\Query::build($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation purchaseInvoiceGoodsReceivedNotePOSTRequestPurchaseInvoiceIDGoodsReceivedNotesPost
     *
     * Appends a goods received note to a purchase invoice.
     *
     * @param  string $accept Accept Header (required)
     * @param  string $purchase_invoice_id purchase_invoice_id (required)
     * @param  bool $jiwa_stateful Stateful indicator (optional)
     * @param  string $grnid grnid (optional)
     * @param  string $goods_received_note_invoiced_id goods_received_note_invoiced_id (optional)
     * @param  string $slip_no slip_no (optional)
     * @param  \DateTime $received_date received_date (optional)
     * @param  string $freight_tax_id freight_tax_id (optional)
     * @param  double $freight freight (optional)
     * @param  double $freight_tax_amount freight_tax_amount (optional)
     * @param  string $duty_tax_id duty_tax_id (optional)
     * @param  double $duty duty (optional)
     * @param  double $duty_tax_amount duty_tax_amount (optional)
     * @param  string $insurance_tax_id insurance_tax_id (optional)
     * @param  double $insurance insurance (optional)
     * @param  double $insurance_tax_amount insurance_tax_amount (optional)
     * @param  \DateTime $re_main_last_saved_date_time re_main_last_saved_date_time (optional)
     * @param  \Jiwa\Model\PurchaseInvoiceGoodsReceivedNotePOSTRequest $body body (optional)
     *
     * @throws \Jiwa\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Jiwa\Model\PurchaseInvoiceGoodsReceivedNoteInvoiced
     */
    public function purchaseInvoiceGoodsReceivedNotePOSTRequestPurchaseInvoiceIDGoodsReceivedNotesPost($accept, $purchase_invoice_id, $jiwa_stateful = null, $grnid = null, $goods_received_note_invoiced_id = null, $slip_no = null, $received_date = null, $freight_tax_id = null, $freight = null, $freight_tax_amount = null, $duty_tax_id = null, $duty = null, $duty_tax_amount = null, $insurance_tax_id = null, $insurance = null, $insurance_tax_amount = null, $re_main_last_saved_date_time = null, $body = null)
    {
        list($response) = $this->purchaseInvoiceGoodsReceivedNotePOSTRequestPurchaseInvoiceIDGoodsReceivedNotesPostWithHttpInfo($accept, $purchase_invoice_id, $jiwa_stateful, $grnid, $goods_received_note_invoiced_id, $slip_no, $received_date, $freight_tax_id, $freight, $freight_tax_amount, $duty_tax_id, $duty, $duty_tax_amount, $insurance_tax_id, $insurance, $insurance_tax_amount, $re_main_last_saved_date_time, $body);
        return $response;
    }

    /**
     * Operation purchaseInvoiceGoodsReceivedNotePOSTRequestPurchaseInvoiceIDGoodsReceivedNotesPostWithHttpInfo
     *
     * Appends a goods received note to a purchase invoice.
     *
     * @param  string $accept Accept Header (required)
     * @param  string $purchase_invoice_id (required)
     * @param  bool $jiwa_stateful Stateful indicator (optional)
     * @param  string $grnid (optional)
     * @param  string $goods_received_note_invoiced_id (optional)
     * @param  string $slip_no (optional)
     * @param  \DateTime $received_date (optional)
     * @param  string $freight_tax_id (optional)
     * @param  double $freight (optional)
     * @param  double $freight_tax_amount (optional)
     * @param  string $duty_tax_id (optional)
     * @param  double $duty (optional)
     * @param  double $duty_tax_amount (optional)
     * @param  string $insurance_tax_id (optional)
     * @param  double $insurance (optional)
     * @param  double $insurance_tax_amount (optional)
     * @param  \DateTime $re_main_last_saved_date_time (optional)
     * @param  \Jiwa\Model\PurchaseInvoiceGoodsReceivedNotePOSTRequest $body (optional)
     *
     * @throws \Jiwa\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Jiwa\Model\PurchaseInvoiceGoodsReceivedNoteInvoiced, HTTP status code, HTTP response headers (array of strings)
     */
    public function purchaseInvoiceGoodsReceivedNotePOSTRequestPurchaseInvoiceIDGoodsReceivedNotesPostWithHttpInfo($accept, $purchase_invoice_id, $jiwa_stateful = null, $grnid = null, $goods_received_note_invoiced_id = null, $slip_no = null, $received_date = null, $freight_tax_id = null, $freight = null, $freight_tax_amount = null, $duty_tax_id = null, $duty = null, $duty_tax_amount = null, $insurance_tax_id = null, $insurance = null, $insurance_tax_amount = null, $re_main_last_saved_date_time = null, $body = null)
    {
        $returnType = '\Jiwa\Model\PurchaseInvoiceGoodsReceivedNoteInvoiced';
        $request = $this->purchaseInvoiceGoodsReceivedNotePOSTRequestPurchaseInvoiceIDGoodsReceivedNotesPostRequest($accept, $purchase_invoice_id, $jiwa_stateful, $grnid, $goods_received_note_invoiced_id, $slip_no, $received_date, $freight_tax_id, $freight, $freight_tax_amount, $duty_tax_id, $duty, $duty_tax_amount, $insurance_tax_id, $insurance, $insurance_tax_amount, $re_main_last_saved_date_time, $body);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Jiwa\Model\PurchaseInvoiceGoodsReceivedNoteInvoiced',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 201:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Jiwa\Model\PurchaseInvoiceGoodsReceivedNoteInvoiced',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 404:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Jiwa\Model\PurchaseInvoiceGoodsReceivedNoteInvoiced',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 403:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Jiwa\Model\PurchaseInvoiceGoodsReceivedNoteInvoiced',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 401:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Jiwa\Model\PurchaseInvoiceGoodsReceivedNoteInvoiced',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation purchaseInvoiceGoodsReceivedNotePOSTRequestPurchaseInvoiceIDGoodsReceivedNotesPostAsync
     *
     * Appends a goods received note to a purchase invoice.
     *
     * @param  string $accept Accept Header (required)
     * @param  string $purchase_invoice_id (required)
     * @param  bool $jiwa_stateful Stateful indicator (optional)
     * @param  string $grnid (optional)
     * @param  string $goods_received_note_invoiced_id (optional)
     * @param  string $slip_no (optional)
     * @param  \DateTime $received_date (optional)
     * @param  string $freight_tax_id (optional)
     * @param  double $freight (optional)
     * @param  double $freight_tax_amount (optional)
     * @param  string $duty_tax_id (optional)
     * @param  double $duty (optional)
     * @param  double $duty_tax_amount (optional)
     * @param  string $insurance_tax_id (optional)
     * @param  double $insurance (optional)
     * @param  double $insurance_tax_amount (optional)
     * @param  \DateTime $re_main_last_saved_date_time (optional)
     * @param  \Jiwa\Model\PurchaseInvoiceGoodsReceivedNotePOSTRequest $body (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function purchaseInvoiceGoodsReceivedNotePOSTRequestPurchaseInvoiceIDGoodsReceivedNotesPostAsync($accept, $purchase_invoice_id, $jiwa_stateful = null, $grnid = null, $goods_received_note_invoiced_id = null, $slip_no = null, $received_date = null, $freight_tax_id = null, $freight = null, $freight_tax_amount = null, $duty_tax_id = null, $duty = null, $duty_tax_amount = null, $insurance_tax_id = null, $insurance = null, $insurance_tax_amount = null, $re_main_last_saved_date_time = null, $body = null)
    {
        return $this->purchaseInvoiceGoodsReceivedNotePOSTRequestPurchaseInvoiceIDGoodsReceivedNotesPostAsyncWithHttpInfo($accept, $purchase_invoice_id, $jiwa_stateful, $grnid, $goods_received_note_invoiced_id, $slip_no, $received_date, $freight_tax_id, $freight, $freight_tax_amount, $duty_tax_id, $duty, $duty_tax_amount, $insurance_tax_id, $insurance, $insurance_tax_amount, $re_main_last_saved_date_time, $body)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation purchaseInvoiceGoodsReceivedNotePOSTRequestPurchaseInvoiceIDGoodsReceivedNotesPostAsyncWithHttpInfo
     *
     * Appends a goods received note to a purchase invoice.
     *
     * @param  string $accept Accept Header (required)
     * @param  string $purchase_invoice_id (required)
     * @param  bool $jiwa_stateful Stateful indicator (optional)
     * @param  string $grnid (optional)
     * @param  string $goods_received_note_invoiced_id (optional)
     * @param  string $slip_no (optional)
     * @param  \DateTime $received_date (optional)
     * @param  string $freight_tax_id (optional)
     * @param  double $freight (optional)
     * @param  double $freight_tax_amount (optional)
     * @param  string $duty_tax_id (optional)
     * @param  double $duty (optional)
     * @param  double $duty_tax_amount (optional)
     * @param  string $insurance_tax_id (optional)
     * @param  double $insurance (optional)
     * @param  double $insurance_tax_amount (optional)
     * @param  \DateTime $re_main_last_saved_date_time (optional)
     * @param  \Jiwa\Model\PurchaseInvoiceGoodsReceivedNotePOSTRequest $body (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function purchaseInvoiceGoodsReceivedNotePOSTRequestPurchaseInvoiceIDGoodsReceivedNotesPostAsyncWithHttpInfo($accept, $purchase_invoice_id, $jiwa_stateful = null, $grnid = null, $goods_received_note_invoiced_id = null, $slip_no = null, $received_date = null, $freight_tax_id = null, $freight = null, $freight_tax_amount = null, $duty_tax_id = null, $duty = null, $duty_tax_amount = null, $insurance_tax_id = null, $insurance = null, $insurance_tax_amount = null, $re_main_last_saved_date_time = null, $body = null)
    {
        $returnType = '\Jiwa\Model\PurchaseInvoiceGoodsReceivedNoteInvoiced';
        $request = $this->purchaseInvoiceGoodsReceivedNotePOSTRequestPurchaseInvoiceIDGoodsReceivedNotesPostRequest($accept, $purchase_invoice_id, $jiwa_stateful, $grnid, $goods_received_note_invoiced_id, $slip_no, $received_date, $freight_tax_id, $freight, $freight_tax_amount, $duty_tax_id, $duty, $duty_tax_amount, $insurance_tax_id, $insurance, $insurance_tax_amount, $re_main_last_saved_date_time, $body);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'purchaseInvoiceGoodsReceivedNotePOSTRequestPurchaseInvoiceIDGoodsReceivedNotesPost'
     *
     * @param  string $accept Accept Header (required)
     * @param  string $purchase_invoice_id (required)
     * @param  bool $jiwa_stateful Stateful indicator (optional)
     * @param  string $grnid (optional)
     * @param  string $goods_received_note_invoiced_id (optional)
     * @param  string $slip_no (optional)
     * @param  \DateTime $received_date (optional)
     * @param  string $freight_tax_id (optional)
     * @param  double $freight (optional)
     * @param  double $freight_tax_amount (optional)
     * @param  string $duty_tax_id (optional)
     * @param  double $duty (optional)
     * @param  double $duty_tax_amount (optional)
     * @param  string $insurance_tax_id (optional)
     * @param  double $insurance (optional)
     * @param  double $insurance_tax_amount (optional)
     * @param  \DateTime $re_main_last_saved_date_time (optional)
     * @param  \Jiwa\Model\PurchaseInvoiceGoodsReceivedNotePOSTRequest $body (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function purchaseInvoiceGoodsReceivedNotePOSTRequestPurchaseInvoiceIDGoodsReceivedNotesPostRequest($accept, $purchase_invoice_id, $jiwa_stateful = null, $grnid = null, $goods_received_note_invoiced_id = null, $slip_no = null, $received_date = null, $freight_tax_id = null, $freight = null, $freight_tax_amount = null, $duty_tax_id = null, $duty = null, $duty_tax_amount = null, $insurance_tax_id = null, $insurance = null, $insurance_tax_amount = null, $re_main_last_saved_date_time = null, $body = null)
    {
        // verify the required parameter 'accept' is set
        if ($accept === null || (is_array($accept) && count($accept) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $accept when calling purchaseInvoiceGoodsReceivedNotePOSTRequestPurchaseInvoiceIDGoodsReceivedNotesPost'
            );
        }
        // verify the required parameter 'purchase_invoice_id' is set
        if ($purchase_invoice_id === null || (is_array($purchase_invoice_id) && count($purchase_invoice_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $purchase_invoice_id when calling purchaseInvoiceGoodsReceivedNotePOSTRequestPurchaseInvoiceIDGoodsReceivedNotesPost'
            );
        }

        $resourcePath = '/PurchaseInvoices/{PurchaseInvoiceID}/GoodsReceivedNotes';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        if ($grnid !== null) {
            $queryParams['GRNID'] = ObjectSerializer::toQueryValue($grnid);
        }
        // query params
        if ($goods_received_note_invoiced_id !== null) {
            $queryParams['GoodsReceivedNoteInvoicedID'] = ObjectSerializer::toQueryValue($goods_received_note_invoiced_id);
        }
        // query params
        if ($slip_no !== null) {
            $queryParams['SlipNo'] = ObjectSerializer::toQueryValue($slip_no);
        }
        // query params
        if ($received_date !== null) {
            $queryParams['ReceivedDate'] = ObjectSerializer::toQueryValue($received_date);
        }
        // query params
        if ($freight_tax_id !== null) {
            $queryParams['FreightTaxID'] = ObjectSerializer::toQueryValue($freight_tax_id);
        }
        // query params
        if ($freight !== null) {
            $queryParams['Freight'] = ObjectSerializer::toQueryValue($freight);
        }
        // query params
        if ($freight_tax_amount !== null) {
            $queryParams['FreightTaxAmount'] = ObjectSerializer::toQueryValue($freight_tax_amount);
        }
        // query params
        if ($duty_tax_id !== null) {
            $queryParams['DutyTaxID'] = ObjectSerializer::toQueryValue($duty_tax_id);
        }
        // query params
        if ($duty !== null) {
            $queryParams['Duty'] = ObjectSerializer::toQueryValue($duty);
        }
        // query params
        if ($duty_tax_amount !== null) {
            $queryParams['DutyTaxAmount'] = ObjectSerializer::toQueryValue($duty_tax_amount);
        }
        // query params
        if ($insurance_tax_id !== null) {
            $queryParams['InsuranceTaxID'] = ObjectSerializer::toQueryValue($insurance_tax_id);
        }
        // query params
        if ($insurance !== null) {
            $queryParams['Insurance'] = ObjectSerializer::toQueryValue($insurance);
        }
        // query params
        if ($insurance_tax_amount !== null) {
            $queryParams['InsuranceTaxAmount'] = ObjectSerializer::toQueryValue($insurance_tax_amount);
        }
        // query params
        if ($re_main_last_saved_date_time !== null) {
            $queryParams['RE_Main_LastSavedDateTime'] = ObjectSerializer::toQueryValue($re_main_last_saved_date_time);
        }
        // header params
        if ($accept !== null) {
            $headerParams['Accept'] = ObjectSerializer::toHeaderValue($accept);
        }
        // header params
        if ($jiwa_stateful !== null) {
            $headerParams['jiwa-stateful'] = ObjectSerializer::toHeaderValue($jiwa_stateful);
        }

        // path params
        if ($purchase_invoice_id !== null) {
            $resourcePath = str_replace(
                '{' . 'PurchaseInvoiceID' . '}',
                ObjectSerializer::toPathValue($purchase_invoice_id),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;
        if (isset($body)) {
            $_tempBody = $body;
        }

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json', 'application/xml']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json', 'application/xml'],
                ['application/x-www-form-urlencoded', 'application/json', 'application/xml']
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            
            if($headers['Content-Type'] === 'application/json') {
                // \stdClass has no __toString(), so we should encode it manually
                if ($httpBody instanceof \stdClass) {
                    $httpBody = \GuzzleHttp\json_encode($httpBody);
                }
                // array has no __toString(), so we should encode it manually
                if(is_array($httpBody)) {
                    $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($httpBody));
                }
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\Query::build($formParams);
            }
        }

        // this endpoint requires HTTP basic authentication
        if ($this->config->getUsername() !== null || $this->config->getPassword() !== null) {
            $headers['Authorization'] = 'Basic ' . base64_encode($this->config->getUsername() . ":" . $this->config->getPassword());
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\Query::build($queryParams);
        return new Request(
            'POST',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation purchaseInvoiceGoodsReceivedNotesGETManyRequestPurchaseInvoiceIDGoodsReceivedNotesGet
     *
     * Retrieves a list of purchase invoice goods received notes.
     *
     * @param  string $accept Accept Header (required)
     * @param  string $purchase_invoice_id purchase_invoice_id (required)
     * @param  bool $jiwa_stateful Stateful indicator (optional)
     *
     * @throws \Jiwa\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Jiwa\Model\PurchaseInvoiceGoodsReceivedNoteInvoiced[]
     */
    public function purchaseInvoiceGoodsReceivedNotesGETManyRequestPurchaseInvoiceIDGoodsReceivedNotesGet($accept, $purchase_invoice_id, $jiwa_stateful = null)
    {
        list($response) = $this->purchaseInvoiceGoodsReceivedNotesGETManyRequestPurchaseInvoiceIDGoodsReceivedNotesGetWithHttpInfo($accept, $purchase_invoice_id, $jiwa_stateful);
        return $response;
    }

    /**
     * Operation purchaseInvoiceGoodsReceivedNotesGETManyRequestPurchaseInvoiceIDGoodsReceivedNotesGetWithHttpInfo
     *
     * Retrieves a list of purchase invoice goods received notes.
     *
     * @param  string $accept Accept Header (required)
     * @param  string $purchase_invoice_id (required)
     * @param  bool $jiwa_stateful Stateful indicator (optional)
     *
     * @throws \Jiwa\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Jiwa\Model\PurchaseInvoiceGoodsReceivedNoteInvoiced[], HTTP status code, HTTP response headers (array of strings)
     */
    public function purchaseInvoiceGoodsReceivedNotesGETManyRequestPurchaseInvoiceIDGoodsReceivedNotesGetWithHttpInfo($accept, $purchase_invoice_id, $jiwa_stateful = null)
    {
        $returnType = '\Jiwa\Model\PurchaseInvoiceGoodsReceivedNoteInvoiced[]';
        $request = $this->purchaseInvoiceGoodsReceivedNotesGETManyRequestPurchaseInvoiceIDGoodsReceivedNotesGetRequest($accept, $purchase_invoice_id, $jiwa_stateful);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Jiwa\Model\PurchaseInvoiceGoodsReceivedNoteInvoiced[]',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 401:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Jiwa\Model\PurchaseInvoiceGoodsReceivedNoteInvoiced[]',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 404:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Jiwa\Model\PurchaseInvoiceGoodsReceivedNoteInvoiced[]',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 403:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Jiwa\Model\PurchaseInvoiceGoodsReceivedNoteInvoiced[]',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation purchaseInvoiceGoodsReceivedNotesGETManyRequestPurchaseInvoiceIDGoodsReceivedNotesGetAsync
     *
     * Retrieves a list of purchase invoice goods received notes.
     *
     * @param  string $accept Accept Header (required)
     * @param  string $purchase_invoice_id (required)
     * @param  bool $jiwa_stateful Stateful indicator (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function purchaseInvoiceGoodsReceivedNotesGETManyRequestPurchaseInvoiceIDGoodsReceivedNotesGetAsync($accept, $purchase_invoice_id, $jiwa_stateful = null)
    {
        return $this->purchaseInvoiceGoodsReceivedNotesGETManyRequestPurchaseInvoiceIDGoodsReceivedNotesGetAsyncWithHttpInfo($accept, $purchase_invoice_id, $jiwa_stateful)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation purchaseInvoiceGoodsReceivedNotesGETManyRequestPurchaseInvoiceIDGoodsReceivedNotesGetAsyncWithHttpInfo
     *
     * Retrieves a list of purchase invoice goods received notes.
     *
     * @param  string $accept Accept Header (required)
     * @param  string $purchase_invoice_id (required)
     * @param  bool $jiwa_stateful Stateful indicator (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function purchaseInvoiceGoodsReceivedNotesGETManyRequestPurchaseInvoiceIDGoodsReceivedNotesGetAsyncWithHttpInfo($accept, $purchase_invoice_id, $jiwa_stateful = null)
    {
        $returnType = '\Jiwa\Model\PurchaseInvoiceGoodsReceivedNoteInvoiced[]';
        $request = $this->purchaseInvoiceGoodsReceivedNotesGETManyRequestPurchaseInvoiceIDGoodsReceivedNotesGetRequest($accept, $purchase_invoice_id, $jiwa_stateful);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'purchaseInvoiceGoodsReceivedNotesGETManyRequestPurchaseInvoiceIDGoodsReceivedNotesGet'
     *
     * @param  string $accept Accept Header (required)
     * @param  string $purchase_invoice_id (required)
     * @param  bool $jiwa_stateful Stateful indicator (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function purchaseInvoiceGoodsReceivedNotesGETManyRequestPurchaseInvoiceIDGoodsReceivedNotesGetRequest($accept, $purchase_invoice_id, $jiwa_stateful = null)
    {
        // verify the required parameter 'accept' is set
        if ($accept === null || (is_array($accept) && count($accept) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $accept when calling purchaseInvoiceGoodsReceivedNotesGETManyRequestPurchaseInvoiceIDGoodsReceivedNotesGet'
            );
        }
        // verify the required parameter 'purchase_invoice_id' is set
        if ($purchase_invoice_id === null || (is_array($purchase_invoice_id) && count($purchase_invoice_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $purchase_invoice_id when calling purchaseInvoiceGoodsReceivedNotesGETManyRequestPurchaseInvoiceIDGoodsReceivedNotesGet'
            );
        }

        $resourcePath = '/PurchaseInvoices/{PurchaseInvoiceID}/GoodsReceivedNotes';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // header params
        if ($accept !== null) {
            $headerParams['Accept'] = ObjectSerializer::toHeaderValue($accept);
        }
        // header params
        if ($jiwa_stateful !== null) {
            $headerParams['jiwa-stateful'] = ObjectSerializer::toHeaderValue($jiwa_stateful);
        }

        // path params
        if ($purchase_invoice_id !== null) {
            $resourcePath = str_replace(
                '{' . 'PurchaseInvoiceID' . '}',
                ObjectSerializer::toPathValue($purchase_invoice_id),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json', 'application/xml']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json', 'application/xml'],
                ['application/x-www-form-urlencoded', 'application/json', 'application/xml']
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            
            if($headers['Content-Type'] === 'application/json') {
                // \stdClass has no __toString(), so we should encode it manually
                if ($httpBody instanceof \stdClass) {
                    $httpBody = \GuzzleHttp\json_encode($httpBody);
                }
                // array has no __toString(), so we should encode it manually
                if(is_array($httpBody)) {
                    $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($httpBody));
                }
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\Query::build($formParams);
            }
        }

        // this endpoint requires HTTP basic authentication
        if ($this->config->getUsername() !== null || $this->config->getPassword() !== null) {
            $headers['Authorization'] = 'Basic ' . base64_encode($this->config->getUsername() . ":" . $this->config->getPassword());
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\Query::build($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation purchaseInvoiceLineGETRequestPurchaseInvoiceIDLinesPurchaseInvoiceLineIDGet
     *
     * Retrieves a purchase invoice line.
     *
     * @param  string $accept Accept Header (required)
     * @param  string $purchase_invoice_id purchase_invoice_id (required)
     * @param  string $purchase_invoice_line_id purchase_invoice_line_id (required)
     * @param  bool $jiwa_stateful Stateful indicator (optional)
     *
     * @throws \Jiwa\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Jiwa\Model\PurchaseInvoiceLine
     */
    public function purchaseInvoiceLineGETRequestPurchaseInvoiceIDLinesPurchaseInvoiceLineIDGet($accept, $purchase_invoice_id, $purchase_invoice_line_id, $jiwa_stateful = null)
    {
        list($response) = $this->purchaseInvoiceLineGETRequestPurchaseInvoiceIDLinesPurchaseInvoiceLineIDGetWithHttpInfo($accept, $purchase_invoice_id, $purchase_invoice_line_id, $jiwa_stateful);
        return $response;
    }

    /**
     * Operation purchaseInvoiceLineGETRequestPurchaseInvoiceIDLinesPurchaseInvoiceLineIDGetWithHttpInfo
     *
     * Retrieves a purchase invoice line.
     *
     * @param  string $accept Accept Header (required)
     * @param  string $purchase_invoice_id (required)
     * @param  string $purchase_invoice_line_id (required)
     * @param  bool $jiwa_stateful Stateful indicator (optional)
     *
     * @throws \Jiwa\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Jiwa\Model\PurchaseInvoiceLine, HTTP status code, HTTP response headers (array of strings)
     */
    public function purchaseInvoiceLineGETRequestPurchaseInvoiceIDLinesPurchaseInvoiceLineIDGetWithHttpInfo($accept, $purchase_invoice_id, $purchase_invoice_line_id, $jiwa_stateful = null)
    {
        $returnType = '\Jiwa\Model\PurchaseInvoiceLine';
        $request = $this->purchaseInvoiceLineGETRequestPurchaseInvoiceIDLinesPurchaseInvoiceLineIDGetRequest($accept, $purchase_invoice_id, $purchase_invoice_line_id, $jiwa_stateful);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Jiwa\Model\PurchaseInvoiceLine',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 404:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Jiwa\Model\PurchaseInvoiceLine',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 401:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Jiwa\Model\PurchaseInvoiceLine',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 403:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Jiwa\Model\PurchaseInvoiceLine',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation purchaseInvoiceLineGETRequestPurchaseInvoiceIDLinesPurchaseInvoiceLineIDGetAsync
     *
     * Retrieves a purchase invoice line.
     *
     * @param  string $accept Accept Header (required)
     * @param  string $purchase_invoice_id (required)
     * @param  string $purchase_invoice_line_id (required)
     * @param  bool $jiwa_stateful Stateful indicator (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function purchaseInvoiceLineGETRequestPurchaseInvoiceIDLinesPurchaseInvoiceLineIDGetAsync($accept, $purchase_invoice_id, $purchase_invoice_line_id, $jiwa_stateful = null)
    {
        return $this->purchaseInvoiceLineGETRequestPurchaseInvoiceIDLinesPurchaseInvoiceLineIDGetAsyncWithHttpInfo($accept, $purchase_invoice_id, $purchase_invoice_line_id, $jiwa_stateful)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation purchaseInvoiceLineGETRequestPurchaseInvoiceIDLinesPurchaseInvoiceLineIDGetAsyncWithHttpInfo
     *
     * Retrieves a purchase invoice line.
     *
     * @param  string $accept Accept Header (required)
     * @param  string $purchase_invoice_id (required)
     * @param  string $purchase_invoice_line_id (required)
     * @param  bool $jiwa_stateful Stateful indicator (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function purchaseInvoiceLineGETRequestPurchaseInvoiceIDLinesPurchaseInvoiceLineIDGetAsyncWithHttpInfo($accept, $purchase_invoice_id, $purchase_invoice_line_id, $jiwa_stateful = null)
    {
        $returnType = '\Jiwa\Model\PurchaseInvoiceLine';
        $request = $this->purchaseInvoiceLineGETRequestPurchaseInvoiceIDLinesPurchaseInvoiceLineIDGetRequest($accept, $purchase_invoice_id, $purchase_invoice_line_id, $jiwa_stateful);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'purchaseInvoiceLineGETRequestPurchaseInvoiceIDLinesPurchaseInvoiceLineIDGet'
     *
     * @param  string $accept Accept Header (required)
     * @param  string $purchase_invoice_id (required)
     * @param  string $purchase_invoice_line_id (required)
     * @param  bool $jiwa_stateful Stateful indicator (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function purchaseInvoiceLineGETRequestPurchaseInvoiceIDLinesPurchaseInvoiceLineIDGetRequest($accept, $purchase_invoice_id, $purchase_invoice_line_id, $jiwa_stateful = null)
    {
        // verify the required parameter 'accept' is set
        if ($accept === null || (is_array($accept) && count($accept) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $accept when calling purchaseInvoiceLineGETRequestPurchaseInvoiceIDLinesPurchaseInvoiceLineIDGet'
            );
        }
        // verify the required parameter 'purchase_invoice_id' is set
        if ($purchase_invoice_id === null || (is_array($purchase_invoice_id) && count($purchase_invoice_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $purchase_invoice_id when calling purchaseInvoiceLineGETRequestPurchaseInvoiceIDLinesPurchaseInvoiceLineIDGet'
            );
        }
        // verify the required parameter 'purchase_invoice_line_id' is set
        if ($purchase_invoice_line_id === null || (is_array($purchase_invoice_line_id) && count($purchase_invoice_line_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $purchase_invoice_line_id when calling purchaseInvoiceLineGETRequestPurchaseInvoiceIDLinesPurchaseInvoiceLineIDGet'
            );
        }

        $resourcePath = '/PurchaseInvoices/{PurchaseInvoiceID}/Lines/{PurchaseInvoiceLineID}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // header params
        if ($accept !== null) {
            $headerParams['Accept'] = ObjectSerializer::toHeaderValue($accept);
        }
        // header params
        if ($jiwa_stateful !== null) {
            $headerParams['jiwa-stateful'] = ObjectSerializer::toHeaderValue($jiwa_stateful);
        }

        // path params
        if ($purchase_invoice_id !== null) {
            $resourcePath = str_replace(
                '{' . 'PurchaseInvoiceID' . '}',
                ObjectSerializer::toPathValue($purchase_invoice_id),
                $resourcePath
            );
        }
        // path params
        if ($purchase_invoice_line_id !== null) {
            $resourcePath = str_replace(
                '{' . 'PurchaseInvoiceLineID' . '}',
                ObjectSerializer::toPathValue($purchase_invoice_line_id),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json', 'application/xml']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json', 'application/xml'],
                ['application/x-www-form-urlencoded', 'application/json', 'application/xml']
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            
            if($headers['Content-Type'] === 'application/json') {
                // \stdClass has no __toString(), so we should encode it manually
                if ($httpBody instanceof \stdClass) {
                    $httpBody = \GuzzleHttp\json_encode($httpBody);
                }
                // array has no __toString(), so we should encode it manually
                if(is_array($httpBody)) {
                    $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($httpBody));
                }
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\Query::build($formParams);
            }
        }

        // this endpoint requires HTTP basic authentication
        if ($this->config->getUsername() !== null || $this->config->getPassword() !== null) {
            $headers['Authorization'] = 'Basic ' . base64_encode($this->config->getUsername() . ":" . $this->config->getPassword());
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\Query::build($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation purchaseInvoiceLinePATCHRequestPurchaseInvoiceIDLinesPurchaseInvoiceLineIDUpdate
     *
     * Updates a line for a purchase invoice.
     *
     * @param  string $accept Accept Header (required)
     * @param  string $purchase_invoice_id purchase_invoice_id (required)
     * @param  string $purchase_invoice_line_id purchase_invoice_line_id (required)
     * @param  bool $jiwa_stateful Stateful indicator (optional)
     * @param  double $quantity quantity (optional)
     * @param  string $inventory_id inventory_id (optional)
     * @param  string $part_no part_no (optional)
     * @param  string $aux2 aux2 (optional)
     * @param  string $description description (optional)
     * @param  string $supplier_part_no supplier_part_no (optional)
     * @param  string $purchase_invoice_line_type purchase_invoice_line_type (optional)
     * @param  int $quantity_decimal_places quantity_decimal_places (optional)
     * @param  \DateTime $last_saved_date_time last_saved_date_time (optional)
     * @param  double $tax_amount tax_amount (optional)
     * @param  string $tax_id tax_id (optional)
     * @param  double $tax_rate tax_rate (optional)
     * @param  double $cost cost (optional)
     * @param  double $currency_rate_used currency_rate_used (optional)
     * @param  string $purchasing_classification_id purchasing_classification_id (optional)
     * @param  string $purchasing_classification_description purchasing_classification_description (optional)
     * @param  string $line_details line_details (optional)
     * @param  bool $use_serial_no use_serial_no (optional)
     * @param  double $fx_cost fx_cost (optional)
     * @param  bool $physical_item physical_item (optional)
     * @param  string $inventory_expected_liability_ledger_account_id inventory_expected_liability_ledger_account_id (optional)
     * @param  string $inventory_expected_liability_ledger_account_no inventory_expected_liability_ledger_account_no (optional)
     * @param  string $inventory_expected_liability_ledger_account_description inventory_expected_liability_ledger_account_description (optional)
     * @param  string $inventory_expected_asset_ledger_account_id inventory_expected_asset_ledger_account_id (optional)
     * @param  string $inventory_expected_asset_ledger_account_no inventory_expected_asset_ledger_account_no (optional)
     * @param  string $inventory_expected_asset_ledger_account_description inventory_expected_asset_ledger_account_description (optional)
     * @param  string $inventory_delivered_asset_ledger_account_id inventory_delivered_asset_ledger_account_id (optional)
     * @param  string $inventory_delivered_asset_ledger_account_no inventory_delivered_asset_ledger_account_no (optional)
     * @param  string $inventory_delivered_asset_ledger_account_description inventory_delivered_asset_ledger_account_description (optional)
     * @param  string $inventory_value_ledger_account_id inventory_value_ledger_account_id (optional)
     * @param  string $inventory_value_ledger_account_no inventory_value_ledger_account_no (optional)
     * @param  string $inventory_value_ledger_account_description inventory_value_ledger_account_description (optional)
     * @param  string $inventory_delivered_liability_ledger_account_id inventory_delivered_liability_ledger_account_id (optional)
     * @param  string $inventory_delivered_liability_ledger_account_no inventory_delivered_liability_ledger_account_no (optional)
     * @param  string $inventory_delivered_liability_ledger_account_description inventory_delivered_liability_ledger_account_description (optional)
     * @param  string $inventory_creditor_purchases_ledger_account_id inventory_creditor_purchases_ledger_account_id (optional)
     * @param  string $inventory_creditor_purchases_ledger_account_no inventory_creditor_purchases_ledger_account_no (optional)
     * @param  string $inventory_creditor_purchases_ledger_account_description inventory_creditor_purchases_ledger_account_description (optional)
     * @param  string $inventory_cost_of_goods_variance_ledger_account_id inventory_cost_of_goods_variance_ledger_account_id (optional)
     * @param  string $inventory_cost_of_goods_variance_ledger_account_no inventory_cost_of_goods_variance_ledger_account_no (optional)
     * @param  string $inventory_cost_of_goods_variance_ledger_account_description inventory_cost_of_goods_variance_ledger_account_description (optional)
     * @param  string $inventory_stock_movement_ledger_account_id inventory_stock_movement_ledger_account_id (optional)
     * @param  string $inventory_stock_movement_ledger_account_no inventory_stock_movement_ledger_account_no (optional)
     * @param  string $inventory_stock_movement_ledger_account_description inventory_stock_movement_ledger_account_description (optional)
     * @param  \DateTime $inventory_last_saved_date_time inventory_last_saved_date_time (optional)
     * @param  double $order_units order_units (optional)
     * @param  int $item_no item_no (optional)
     * @param  string $in_supplier_warehouse_rec_id in_supplier_warehouse_rec_id (optional)
     * @param  double $inc_price inc_price (optional)
     * @param  double $line_total line_total (optional)
     * @param  double $fx_total fx_total (optional)
     * @param  int $fx_decimal_places fx_decimal_places (optional)
     * @param  int $home_decimal_places home_decimal_places (optional)
     * @param  bool $use_expiry_date use_expiry_date (optional)
     * @param  bool $posted_to_wip posted_to_wip (optional)
     * @param  string $job_costing_stage_id job_costing_stage_id (optional)
     * @param  string $job_costing_stage_no job_costing_stage_no (optional)
     * @param  string $job_costing_stage_name job_costing_stage_name (optional)
     * @param  string $job_costing_cost_centre_id job_costing_cost_centre_id (optional)
     * @param  string $job_costing_cost_centre_no job_costing_cost_centre_no (optional)
     * @param  string $job_costing_cost_centre_name job_costing_cost_centre_name (optional)
     * @param  string $job_costing_job_id job_costing_job_id (optional)
     * @param  string $job_costing_job_no job_costing_job_no (optional)
     * @param  string $order_no order_no (optional)
     * @param  string $order_id order_id (optional)
     * @param  int $purchase_order_line_no purchase_order_line_no (optional)
     * @param  string $purchase_order_type purchase_order_type (optional)
     * @param  string $custom_field_values custom_field_values (optional)
     * @param  int $line_total_ex_tax line_total_ex_tax (optional)
     * @param  string $re_lines_source_id re_lines_source_id (optional)
     * @param  \Jiwa\Model\PurchaseInvoiceLinePATCHRequest $body body (optional)
     *
     * @throws \Jiwa\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Jiwa\Model\PurchaseInvoiceLine
     */
    public function purchaseInvoiceLinePATCHRequestPurchaseInvoiceIDLinesPurchaseInvoiceLineIDUpdate($accept, $purchase_invoice_id, $purchase_invoice_line_id, $jiwa_stateful = null, $quantity = null, $inventory_id = null, $part_no = null, $aux2 = null, $description = null, $supplier_part_no = null, $purchase_invoice_line_type = null, $quantity_decimal_places = null, $last_saved_date_time = null, $tax_amount = null, $tax_id = null, $tax_rate = null, $cost = null, $currency_rate_used = null, $purchasing_classification_id = null, $purchasing_classification_description = null, $line_details = null, $use_serial_no = null, $fx_cost = null, $physical_item = null, $inventory_expected_liability_ledger_account_id = null, $inventory_expected_liability_ledger_account_no = null, $inventory_expected_liability_ledger_account_description = null, $inventory_expected_asset_ledger_account_id = null, $inventory_expected_asset_ledger_account_no = null, $inventory_expected_asset_ledger_account_description = null, $inventory_delivered_asset_ledger_account_id = null, $inventory_delivered_asset_ledger_account_no = null, $inventory_delivered_asset_ledger_account_description = null, $inventory_value_ledger_account_id = null, $inventory_value_ledger_account_no = null, $inventory_value_ledger_account_description = null, $inventory_delivered_liability_ledger_account_id = null, $inventory_delivered_liability_ledger_account_no = null, $inventory_delivered_liability_ledger_account_description = null, $inventory_creditor_purchases_ledger_account_id = null, $inventory_creditor_purchases_ledger_account_no = null, $inventory_creditor_purchases_ledger_account_description = null, $inventory_cost_of_goods_variance_ledger_account_id = null, $inventory_cost_of_goods_variance_ledger_account_no = null, $inventory_cost_of_goods_variance_ledger_account_description = null, $inventory_stock_movement_ledger_account_id = null, $inventory_stock_movement_ledger_account_no = null, $inventory_stock_movement_ledger_account_description = null, $inventory_last_saved_date_time = null, $order_units = null, $item_no = null, $in_supplier_warehouse_rec_id = null, $inc_price = null, $line_total = null, $fx_total = null, $fx_decimal_places = null, $home_decimal_places = null, $use_expiry_date = null, $posted_to_wip = null, $job_costing_stage_id = null, $job_costing_stage_no = null, $job_costing_stage_name = null, $job_costing_cost_centre_id = null, $job_costing_cost_centre_no = null, $job_costing_cost_centre_name = null, $job_costing_job_id = null, $job_costing_job_no = null, $order_no = null, $order_id = null, $purchase_order_line_no = null, $purchase_order_type = null, $custom_field_values = null, $line_total_ex_tax = null, $re_lines_source_id = null, $body = null)
    {
        list($response) = $this->purchaseInvoiceLinePATCHRequestPurchaseInvoiceIDLinesPurchaseInvoiceLineIDUpdateWithHttpInfo($accept, $purchase_invoice_id, $purchase_invoice_line_id, $jiwa_stateful, $quantity, $inventory_id, $part_no, $aux2, $description, $supplier_part_no, $purchase_invoice_line_type, $quantity_decimal_places, $last_saved_date_time, $tax_amount, $tax_id, $tax_rate, $cost, $currency_rate_used, $purchasing_classification_id, $purchasing_classification_description, $line_details, $use_serial_no, $fx_cost, $physical_item, $inventory_expected_liability_ledger_account_id, $inventory_expected_liability_ledger_account_no, $inventory_expected_liability_ledger_account_description, $inventory_expected_asset_ledger_account_id, $inventory_expected_asset_ledger_account_no, $inventory_expected_asset_ledger_account_description, $inventory_delivered_asset_ledger_account_id, $inventory_delivered_asset_ledger_account_no, $inventory_delivered_asset_ledger_account_description, $inventory_value_ledger_account_id, $inventory_value_ledger_account_no, $inventory_value_ledger_account_description, $inventory_delivered_liability_ledger_account_id, $inventory_delivered_liability_ledger_account_no, $inventory_delivered_liability_ledger_account_description, $inventory_creditor_purchases_ledger_account_id, $inventory_creditor_purchases_ledger_account_no, $inventory_creditor_purchases_ledger_account_description, $inventory_cost_of_goods_variance_ledger_account_id, $inventory_cost_of_goods_variance_ledger_account_no, $inventory_cost_of_goods_variance_ledger_account_description, $inventory_stock_movement_ledger_account_id, $inventory_stock_movement_ledger_account_no, $inventory_stock_movement_ledger_account_description, $inventory_last_saved_date_time, $order_units, $item_no, $in_supplier_warehouse_rec_id, $inc_price, $line_total, $fx_total, $fx_decimal_places, $home_decimal_places, $use_expiry_date, $posted_to_wip, $job_costing_stage_id, $job_costing_stage_no, $job_costing_stage_name, $job_costing_cost_centre_id, $job_costing_cost_centre_no, $job_costing_cost_centre_name, $job_costing_job_id, $job_costing_job_no, $order_no, $order_id, $purchase_order_line_no, $purchase_order_type, $custom_field_values, $line_total_ex_tax, $re_lines_source_id, $body);
        return $response;
    }

    /**
     * Operation purchaseInvoiceLinePATCHRequestPurchaseInvoiceIDLinesPurchaseInvoiceLineIDUpdateWithHttpInfo
     *
     * Updates a line for a purchase invoice.
     *
     * @param  string $accept Accept Header (required)
     * @param  string $purchase_invoice_id (required)
     * @param  string $purchase_invoice_line_id (required)
     * @param  bool $jiwa_stateful Stateful indicator (optional)
     * @param  double $quantity (optional)
     * @param  string $inventory_id (optional)
     * @param  string $part_no (optional)
     * @param  string $aux2 (optional)
     * @param  string $description (optional)
     * @param  string $supplier_part_no (optional)
     * @param  string $purchase_invoice_line_type (optional)
     * @param  int $quantity_decimal_places (optional)
     * @param  \DateTime $last_saved_date_time (optional)
     * @param  double $tax_amount (optional)
     * @param  string $tax_id (optional)
     * @param  double $tax_rate (optional)
     * @param  double $cost (optional)
     * @param  double $currency_rate_used (optional)
     * @param  string $purchasing_classification_id (optional)
     * @param  string $purchasing_classification_description (optional)
     * @param  string $line_details (optional)
     * @param  bool $use_serial_no (optional)
     * @param  double $fx_cost (optional)
     * @param  bool $physical_item (optional)
     * @param  string $inventory_expected_liability_ledger_account_id (optional)
     * @param  string $inventory_expected_liability_ledger_account_no (optional)
     * @param  string $inventory_expected_liability_ledger_account_description (optional)
     * @param  string $inventory_expected_asset_ledger_account_id (optional)
     * @param  string $inventory_expected_asset_ledger_account_no (optional)
     * @param  string $inventory_expected_asset_ledger_account_description (optional)
     * @param  string $inventory_delivered_asset_ledger_account_id (optional)
     * @param  string $inventory_delivered_asset_ledger_account_no (optional)
     * @param  string $inventory_delivered_asset_ledger_account_description (optional)
     * @param  string $inventory_value_ledger_account_id (optional)
     * @param  string $inventory_value_ledger_account_no (optional)
     * @param  string $inventory_value_ledger_account_description (optional)
     * @param  string $inventory_delivered_liability_ledger_account_id (optional)
     * @param  string $inventory_delivered_liability_ledger_account_no (optional)
     * @param  string $inventory_delivered_liability_ledger_account_description (optional)
     * @param  string $inventory_creditor_purchases_ledger_account_id (optional)
     * @param  string $inventory_creditor_purchases_ledger_account_no (optional)
     * @param  string $inventory_creditor_purchases_ledger_account_description (optional)
     * @param  string $inventory_cost_of_goods_variance_ledger_account_id (optional)
     * @param  string $inventory_cost_of_goods_variance_ledger_account_no (optional)
     * @param  string $inventory_cost_of_goods_variance_ledger_account_description (optional)
     * @param  string $inventory_stock_movement_ledger_account_id (optional)
     * @param  string $inventory_stock_movement_ledger_account_no (optional)
     * @param  string $inventory_stock_movement_ledger_account_description (optional)
     * @param  \DateTime $inventory_last_saved_date_time (optional)
     * @param  double $order_units (optional)
     * @param  int $item_no (optional)
     * @param  string $in_supplier_warehouse_rec_id (optional)
     * @param  double $inc_price (optional)
     * @param  double $line_total (optional)
     * @param  double $fx_total (optional)
     * @param  int $fx_decimal_places (optional)
     * @param  int $home_decimal_places (optional)
     * @param  bool $use_expiry_date (optional)
     * @param  bool $posted_to_wip (optional)
     * @param  string $job_costing_stage_id (optional)
     * @param  string $job_costing_stage_no (optional)
     * @param  string $job_costing_stage_name (optional)
     * @param  string $job_costing_cost_centre_id (optional)
     * @param  string $job_costing_cost_centre_no (optional)
     * @param  string $job_costing_cost_centre_name (optional)
     * @param  string $job_costing_job_id (optional)
     * @param  string $job_costing_job_no (optional)
     * @param  string $order_no (optional)
     * @param  string $order_id (optional)
     * @param  int $purchase_order_line_no (optional)
     * @param  string $purchase_order_type (optional)
     * @param  string $custom_field_values (optional)
     * @param  int $line_total_ex_tax (optional)
     * @param  string $re_lines_source_id (optional)
     * @param  \Jiwa\Model\PurchaseInvoiceLinePATCHRequest $body (optional)
     *
     * @throws \Jiwa\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Jiwa\Model\PurchaseInvoiceLine, HTTP status code, HTTP response headers (array of strings)
     */
    public function purchaseInvoiceLinePATCHRequestPurchaseInvoiceIDLinesPurchaseInvoiceLineIDUpdateWithHttpInfo($accept, $purchase_invoice_id, $purchase_invoice_line_id, $jiwa_stateful = null, $quantity = null, $inventory_id = null, $part_no = null, $aux2 = null, $description = null, $supplier_part_no = null, $purchase_invoice_line_type = null, $quantity_decimal_places = null, $last_saved_date_time = null, $tax_amount = null, $tax_id = null, $tax_rate = null, $cost = null, $currency_rate_used = null, $purchasing_classification_id = null, $purchasing_classification_description = null, $line_details = null, $use_serial_no = null, $fx_cost = null, $physical_item = null, $inventory_expected_liability_ledger_account_id = null, $inventory_expected_liability_ledger_account_no = null, $inventory_expected_liability_ledger_account_description = null, $inventory_expected_asset_ledger_account_id = null, $inventory_expected_asset_ledger_account_no = null, $inventory_expected_asset_ledger_account_description = null, $inventory_delivered_asset_ledger_account_id = null, $inventory_delivered_asset_ledger_account_no = null, $inventory_delivered_asset_ledger_account_description = null, $inventory_value_ledger_account_id = null, $inventory_value_ledger_account_no = null, $inventory_value_ledger_account_description = null, $inventory_delivered_liability_ledger_account_id = null, $inventory_delivered_liability_ledger_account_no = null, $inventory_delivered_liability_ledger_account_description = null, $inventory_creditor_purchases_ledger_account_id = null, $inventory_creditor_purchases_ledger_account_no = null, $inventory_creditor_purchases_ledger_account_description = null, $inventory_cost_of_goods_variance_ledger_account_id = null, $inventory_cost_of_goods_variance_ledger_account_no = null, $inventory_cost_of_goods_variance_ledger_account_description = null, $inventory_stock_movement_ledger_account_id = null, $inventory_stock_movement_ledger_account_no = null, $inventory_stock_movement_ledger_account_description = null, $inventory_last_saved_date_time = null, $order_units = null, $item_no = null, $in_supplier_warehouse_rec_id = null, $inc_price = null, $line_total = null, $fx_total = null, $fx_decimal_places = null, $home_decimal_places = null, $use_expiry_date = null, $posted_to_wip = null, $job_costing_stage_id = null, $job_costing_stage_no = null, $job_costing_stage_name = null, $job_costing_cost_centre_id = null, $job_costing_cost_centre_no = null, $job_costing_cost_centre_name = null, $job_costing_job_id = null, $job_costing_job_no = null, $order_no = null, $order_id = null, $purchase_order_line_no = null, $purchase_order_type = null, $custom_field_values = null, $line_total_ex_tax = null, $re_lines_source_id = null, $body = null)
    {
        $returnType = '\Jiwa\Model\PurchaseInvoiceLine';
        $request = $this->purchaseInvoiceLinePATCHRequestPurchaseInvoiceIDLinesPurchaseInvoiceLineIDUpdateRequest($accept, $purchase_invoice_id, $purchase_invoice_line_id, $jiwa_stateful, $quantity, $inventory_id, $part_no, $aux2, $description, $supplier_part_no, $purchase_invoice_line_type, $quantity_decimal_places, $last_saved_date_time, $tax_amount, $tax_id, $tax_rate, $cost, $currency_rate_used, $purchasing_classification_id, $purchasing_classification_description, $line_details, $use_serial_no, $fx_cost, $physical_item, $inventory_expected_liability_ledger_account_id, $inventory_expected_liability_ledger_account_no, $inventory_expected_liability_ledger_account_description, $inventory_expected_asset_ledger_account_id, $inventory_expected_asset_ledger_account_no, $inventory_expected_asset_ledger_account_description, $inventory_delivered_asset_ledger_account_id, $inventory_delivered_asset_ledger_account_no, $inventory_delivered_asset_ledger_account_description, $inventory_value_ledger_account_id, $inventory_value_ledger_account_no, $inventory_value_ledger_account_description, $inventory_delivered_liability_ledger_account_id, $inventory_delivered_liability_ledger_account_no, $inventory_delivered_liability_ledger_account_description, $inventory_creditor_purchases_ledger_account_id, $inventory_creditor_purchases_ledger_account_no, $inventory_creditor_purchases_ledger_account_description, $inventory_cost_of_goods_variance_ledger_account_id, $inventory_cost_of_goods_variance_ledger_account_no, $inventory_cost_of_goods_variance_ledger_account_description, $inventory_stock_movement_ledger_account_id, $inventory_stock_movement_ledger_account_no, $inventory_stock_movement_ledger_account_description, $inventory_last_saved_date_time, $order_units, $item_no, $in_supplier_warehouse_rec_id, $inc_price, $line_total, $fx_total, $fx_decimal_places, $home_decimal_places, $use_expiry_date, $posted_to_wip, $job_costing_stage_id, $job_costing_stage_no, $job_costing_stage_name, $job_costing_cost_centre_id, $job_costing_cost_centre_no, $job_costing_cost_centre_name, $job_costing_job_id, $job_costing_job_no, $order_no, $order_id, $purchase_order_line_no, $purchase_order_type, $custom_field_values, $line_total_ex_tax, $re_lines_source_id, $body);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Jiwa\Model\PurchaseInvoiceLine',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 403:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Jiwa\Model\PurchaseInvoiceLine',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 404:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Jiwa\Model\PurchaseInvoiceLine',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 401:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Jiwa\Model\PurchaseInvoiceLine',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation purchaseInvoiceLinePATCHRequestPurchaseInvoiceIDLinesPurchaseInvoiceLineIDUpdateAsync
     *
     * Updates a line for a purchase invoice.
     *
     * @param  string $accept Accept Header (required)
     * @param  string $purchase_invoice_id (required)
     * @param  string $purchase_invoice_line_id (required)
     * @param  bool $jiwa_stateful Stateful indicator (optional)
     * @param  double $quantity (optional)
     * @param  string $inventory_id (optional)
     * @param  string $part_no (optional)
     * @param  string $aux2 (optional)
     * @param  string $description (optional)
     * @param  string $supplier_part_no (optional)
     * @param  string $purchase_invoice_line_type (optional)
     * @param  int $quantity_decimal_places (optional)
     * @param  \DateTime $last_saved_date_time (optional)
     * @param  double $tax_amount (optional)
     * @param  string $tax_id (optional)
     * @param  double $tax_rate (optional)
     * @param  double $cost (optional)
     * @param  double $currency_rate_used (optional)
     * @param  string $purchasing_classification_id (optional)
     * @param  string $purchasing_classification_description (optional)
     * @param  string $line_details (optional)
     * @param  bool $use_serial_no (optional)
     * @param  double $fx_cost (optional)
     * @param  bool $physical_item (optional)
     * @param  string $inventory_expected_liability_ledger_account_id (optional)
     * @param  string $inventory_expected_liability_ledger_account_no (optional)
     * @param  string $inventory_expected_liability_ledger_account_description (optional)
     * @param  string $inventory_expected_asset_ledger_account_id (optional)
     * @param  string $inventory_expected_asset_ledger_account_no (optional)
     * @param  string $inventory_expected_asset_ledger_account_description (optional)
     * @param  string $inventory_delivered_asset_ledger_account_id (optional)
     * @param  string $inventory_delivered_asset_ledger_account_no (optional)
     * @param  string $inventory_delivered_asset_ledger_account_description (optional)
     * @param  string $inventory_value_ledger_account_id (optional)
     * @param  string $inventory_value_ledger_account_no (optional)
     * @param  string $inventory_value_ledger_account_description (optional)
     * @param  string $inventory_delivered_liability_ledger_account_id (optional)
     * @param  string $inventory_delivered_liability_ledger_account_no (optional)
     * @param  string $inventory_delivered_liability_ledger_account_description (optional)
     * @param  string $inventory_creditor_purchases_ledger_account_id (optional)
     * @param  string $inventory_creditor_purchases_ledger_account_no (optional)
     * @param  string $inventory_creditor_purchases_ledger_account_description (optional)
     * @param  string $inventory_cost_of_goods_variance_ledger_account_id (optional)
     * @param  string $inventory_cost_of_goods_variance_ledger_account_no (optional)
     * @param  string $inventory_cost_of_goods_variance_ledger_account_description (optional)
     * @param  string $inventory_stock_movement_ledger_account_id (optional)
     * @param  string $inventory_stock_movement_ledger_account_no (optional)
     * @param  string $inventory_stock_movement_ledger_account_description (optional)
     * @param  \DateTime $inventory_last_saved_date_time (optional)
     * @param  double $order_units (optional)
     * @param  int $item_no (optional)
     * @param  string $in_supplier_warehouse_rec_id (optional)
     * @param  double $inc_price (optional)
     * @param  double $line_total (optional)
     * @param  double $fx_total (optional)
     * @param  int $fx_decimal_places (optional)
     * @param  int $home_decimal_places (optional)
     * @param  bool $use_expiry_date (optional)
     * @param  bool $posted_to_wip (optional)
     * @param  string $job_costing_stage_id (optional)
     * @param  string $job_costing_stage_no (optional)
     * @param  string $job_costing_stage_name (optional)
     * @param  string $job_costing_cost_centre_id (optional)
     * @param  string $job_costing_cost_centre_no (optional)
     * @param  string $job_costing_cost_centre_name (optional)
     * @param  string $job_costing_job_id (optional)
     * @param  string $job_costing_job_no (optional)
     * @param  string $order_no (optional)
     * @param  string $order_id (optional)
     * @param  int $purchase_order_line_no (optional)
     * @param  string $purchase_order_type (optional)
     * @param  string $custom_field_values (optional)
     * @param  int $line_total_ex_tax (optional)
     * @param  string $re_lines_source_id (optional)
     * @param  \Jiwa\Model\PurchaseInvoiceLinePATCHRequest $body (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function purchaseInvoiceLinePATCHRequestPurchaseInvoiceIDLinesPurchaseInvoiceLineIDUpdateAsync($accept, $purchase_invoice_id, $purchase_invoice_line_id, $jiwa_stateful = null, $quantity = null, $inventory_id = null, $part_no = null, $aux2 = null, $description = null, $supplier_part_no = null, $purchase_invoice_line_type = null, $quantity_decimal_places = null, $last_saved_date_time = null, $tax_amount = null, $tax_id = null, $tax_rate = null, $cost = null, $currency_rate_used = null, $purchasing_classification_id = null, $purchasing_classification_description = null, $line_details = null, $use_serial_no = null, $fx_cost = null, $physical_item = null, $inventory_expected_liability_ledger_account_id = null, $inventory_expected_liability_ledger_account_no = null, $inventory_expected_liability_ledger_account_description = null, $inventory_expected_asset_ledger_account_id = null, $inventory_expected_asset_ledger_account_no = null, $inventory_expected_asset_ledger_account_description = null, $inventory_delivered_asset_ledger_account_id = null, $inventory_delivered_asset_ledger_account_no = null, $inventory_delivered_asset_ledger_account_description = null, $inventory_value_ledger_account_id = null, $inventory_value_ledger_account_no = null, $inventory_value_ledger_account_description = null, $inventory_delivered_liability_ledger_account_id = null, $inventory_delivered_liability_ledger_account_no = null, $inventory_delivered_liability_ledger_account_description = null, $inventory_creditor_purchases_ledger_account_id = null, $inventory_creditor_purchases_ledger_account_no = null, $inventory_creditor_purchases_ledger_account_description = null, $inventory_cost_of_goods_variance_ledger_account_id = null, $inventory_cost_of_goods_variance_ledger_account_no = null, $inventory_cost_of_goods_variance_ledger_account_description = null, $inventory_stock_movement_ledger_account_id = null, $inventory_stock_movement_ledger_account_no = null, $inventory_stock_movement_ledger_account_description = null, $inventory_last_saved_date_time = null, $order_units = null, $item_no = null, $in_supplier_warehouse_rec_id = null, $inc_price = null, $line_total = null, $fx_total = null, $fx_decimal_places = null, $home_decimal_places = null, $use_expiry_date = null, $posted_to_wip = null, $job_costing_stage_id = null, $job_costing_stage_no = null, $job_costing_stage_name = null, $job_costing_cost_centre_id = null, $job_costing_cost_centre_no = null, $job_costing_cost_centre_name = null, $job_costing_job_id = null, $job_costing_job_no = null, $order_no = null, $order_id = null, $purchase_order_line_no = null, $purchase_order_type = null, $custom_field_values = null, $line_total_ex_tax = null, $re_lines_source_id = null, $body = null)
    {
        return $this->purchaseInvoiceLinePATCHRequestPurchaseInvoiceIDLinesPurchaseInvoiceLineIDUpdateAsyncWithHttpInfo($accept, $purchase_invoice_id, $purchase_invoice_line_id, $jiwa_stateful, $quantity, $inventory_id, $part_no, $aux2, $description, $supplier_part_no, $purchase_invoice_line_type, $quantity_decimal_places, $last_saved_date_time, $tax_amount, $tax_id, $tax_rate, $cost, $currency_rate_used, $purchasing_classification_id, $purchasing_classification_description, $line_details, $use_serial_no, $fx_cost, $physical_item, $inventory_expected_liability_ledger_account_id, $inventory_expected_liability_ledger_account_no, $inventory_expected_liability_ledger_account_description, $inventory_expected_asset_ledger_account_id, $inventory_expected_asset_ledger_account_no, $inventory_expected_asset_ledger_account_description, $inventory_delivered_asset_ledger_account_id, $inventory_delivered_asset_ledger_account_no, $inventory_delivered_asset_ledger_account_description, $inventory_value_ledger_account_id, $inventory_value_ledger_account_no, $inventory_value_ledger_account_description, $inventory_delivered_liability_ledger_account_id, $inventory_delivered_liability_ledger_account_no, $inventory_delivered_liability_ledger_account_description, $inventory_creditor_purchases_ledger_account_id, $inventory_creditor_purchases_ledger_account_no, $inventory_creditor_purchases_ledger_account_description, $inventory_cost_of_goods_variance_ledger_account_id, $inventory_cost_of_goods_variance_ledger_account_no, $inventory_cost_of_goods_variance_ledger_account_description, $inventory_stock_movement_ledger_account_id, $inventory_stock_movement_ledger_account_no, $inventory_stock_movement_ledger_account_description, $inventory_last_saved_date_time, $order_units, $item_no, $in_supplier_warehouse_rec_id, $inc_price, $line_total, $fx_total, $fx_decimal_places, $home_decimal_places, $use_expiry_date, $posted_to_wip, $job_costing_stage_id, $job_costing_stage_no, $job_costing_stage_name, $job_costing_cost_centre_id, $job_costing_cost_centre_no, $job_costing_cost_centre_name, $job_costing_job_id, $job_costing_job_no, $order_no, $order_id, $purchase_order_line_no, $purchase_order_type, $custom_field_values, $line_total_ex_tax, $re_lines_source_id, $body)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation purchaseInvoiceLinePATCHRequestPurchaseInvoiceIDLinesPurchaseInvoiceLineIDUpdateAsyncWithHttpInfo
     *
     * Updates a line for a purchase invoice.
     *
     * @param  string $accept Accept Header (required)
     * @param  string $purchase_invoice_id (required)
     * @param  string $purchase_invoice_line_id (required)
     * @param  bool $jiwa_stateful Stateful indicator (optional)
     * @param  double $quantity (optional)
     * @param  string $inventory_id (optional)
     * @param  string $part_no (optional)
     * @param  string $aux2 (optional)
     * @param  string $description (optional)
     * @param  string $supplier_part_no (optional)
     * @param  string $purchase_invoice_line_type (optional)
     * @param  int $quantity_decimal_places (optional)
     * @param  \DateTime $last_saved_date_time (optional)
     * @param  double $tax_amount (optional)
     * @param  string $tax_id (optional)
     * @param  double $tax_rate (optional)
     * @param  double $cost (optional)
     * @param  double $currency_rate_used (optional)
     * @param  string $purchasing_classification_id (optional)
     * @param  string $purchasing_classification_description (optional)
     * @param  string $line_details (optional)
     * @param  bool $use_serial_no (optional)
     * @param  double $fx_cost (optional)
     * @param  bool $physical_item (optional)
     * @param  string $inventory_expected_liability_ledger_account_id (optional)
     * @param  string $inventory_expected_liability_ledger_account_no (optional)
     * @param  string $inventory_expected_liability_ledger_account_description (optional)
     * @param  string $inventory_expected_asset_ledger_account_id (optional)
     * @param  string $inventory_expected_asset_ledger_account_no (optional)
     * @param  string $inventory_expected_asset_ledger_account_description (optional)
     * @param  string $inventory_delivered_asset_ledger_account_id (optional)
     * @param  string $inventory_delivered_asset_ledger_account_no (optional)
     * @param  string $inventory_delivered_asset_ledger_account_description (optional)
     * @param  string $inventory_value_ledger_account_id (optional)
     * @param  string $inventory_value_ledger_account_no (optional)
     * @param  string $inventory_value_ledger_account_description (optional)
     * @param  string $inventory_delivered_liability_ledger_account_id (optional)
     * @param  string $inventory_delivered_liability_ledger_account_no (optional)
     * @param  string $inventory_delivered_liability_ledger_account_description (optional)
     * @param  string $inventory_creditor_purchases_ledger_account_id (optional)
     * @param  string $inventory_creditor_purchases_ledger_account_no (optional)
     * @param  string $inventory_creditor_purchases_ledger_account_description (optional)
     * @param  string $inventory_cost_of_goods_variance_ledger_account_id (optional)
     * @param  string $inventory_cost_of_goods_variance_ledger_account_no (optional)
     * @param  string $inventory_cost_of_goods_variance_ledger_account_description (optional)
     * @param  string $inventory_stock_movement_ledger_account_id (optional)
     * @param  string $inventory_stock_movement_ledger_account_no (optional)
     * @param  string $inventory_stock_movement_ledger_account_description (optional)
     * @param  \DateTime $inventory_last_saved_date_time (optional)
     * @param  double $order_units (optional)
     * @param  int $item_no (optional)
     * @param  string $in_supplier_warehouse_rec_id (optional)
     * @param  double $inc_price (optional)
     * @param  double $line_total (optional)
     * @param  double $fx_total (optional)
     * @param  int $fx_decimal_places (optional)
     * @param  int $home_decimal_places (optional)
     * @param  bool $use_expiry_date (optional)
     * @param  bool $posted_to_wip (optional)
     * @param  string $job_costing_stage_id (optional)
     * @param  string $job_costing_stage_no (optional)
     * @param  string $job_costing_stage_name (optional)
     * @param  string $job_costing_cost_centre_id (optional)
     * @param  string $job_costing_cost_centre_no (optional)
     * @param  string $job_costing_cost_centre_name (optional)
     * @param  string $job_costing_job_id (optional)
     * @param  string $job_costing_job_no (optional)
     * @param  string $order_no (optional)
     * @param  string $order_id (optional)
     * @param  int $purchase_order_line_no (optional)
     * @param  string $purchase_order_type (optional)
     * @param  string $custom_field_values (optional)
     * @param  int $line_total_ex_tax (optional)
     * @param  string $re_lines_source_id (optional)
     * @param  \Jiwa\Model\PurchaseInvoiceLinePATCHRequest $body (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function purchaseInvoiceLinePATCHRequestPurchaseInvoiceIDLinesPurchaseInvoiceLineIDUpdateAsyncWithHttpInfo($accept, $purchase_invoice_id, $purchase_invoice_line_id, $jiwa_stateful = null, $quantity = null, $inventory_id = null, $part_no = null, $aux2 = null, $description = null, $supplier_part_no = null, $purchase_invoice_line_type = null, $quantity_decimal_places = null, $last_saved_date_time = null, $tax_amount = null, $tax_id = null, $tax_rate = null, $cost = null, $currency_rate_used = null, $purchasing_classification_id = null, $purchasing_classification_description = null, $line_details = null, $use_serial_no = null, $fx_cost = null, $physical_item = null, $inventory_expected_liability_ledger_account_id = null, $inventory_expected_liability_ledger_account_no = null, $inventory_expected_liability_ledger_account_description = null, $inventory_expected_asset_ledger_account_id = null, $inventory_expected_asset_ledger_account_no = null, $inventory_expected_asset_ledger_account_description = null, $inventory_delivered_asset_ledger_account_id = null, $inventory_delivered_asset_ledger_account_no = null, $inventory_delivered_asset_ledger_account_description = null, $inventory_value_ledger_account_id = null, $inventory_value_ledger_account_no = null, $inventory_value_ledger_account_description = null, $inventory_delivered_liability_ledger_account_id = null, $inventory_delivered_liability_ledger_account_no = null, $inventory_delivered_liability_ledger_account_description = null, $inventory_creditor_purchases_ledger_account_id = null, $inventory_creditor_purchases_ledger_account_no = null, $inventory_creditor_purchases_ledger_account_description = null, $inventory_cost_of_goods_variance_ledger_account_id = null, $inventory_cost_of_goods_variance_ledger_account_no = null, $inventory_cost_of_goods_variance_ledger_account_description = null, $inventory_stock_movement_ledger_account_id = null, $inventory_stock_movement_ledger_account_no = null, $inventory_stock_movement_ledger_account_description = null, $inventory_last_saved_date_time = null, $order_units = null, $item_no = null, $in_supplier_warehouse_rec_id = null, $inc_price = null, $line_total = null, $fx_total = null, $fx_decimal_places = null, $home_decimal_places = null, $use_expiry_date = null, $posted_to_wip = null, $job_costing_stage_id = null, $job_costing_stage_no = null, $job_costing_stage_name = null, $job_costing_cost_centre_id = null, $job_costing_cost_centre_no = null, $job_costing_cost_centre_name = null, $job_costing_job_id = null, $job_costing_job_no = null, $order_no = null, $order_id = null, $purchase_order_line_no = null, $purchase_order_type = null, $custom_field_values = null, $line_total_ex_tax = null, $re_lines_source_id = null, $body = null)
    {
        $returnType = '\Jiwa\Model\PurchaseInvoiceLine';
        $request = $this->purchaseInvoiceLinePATCHRequestPurchaseInvoiceIDLinesPurchaseInvoiceLineIDUpdateRequest($accept, $purchase_invoice_id, $purchase_invoice_line_id, $jiwa_stateful, $quantity, $inventory_id, $part_no, $aux2, $description, $supplier_part_no, $purchase_invoice_line_type, $quantity_decimal_places, $last_saved_date_time, $tax_amount, $tax_id, $tax_rate, $cost, $currency_rate_used, $purchasing_classification_id, $purchasing_classification_description, $line_details, $use_serial_no, $fx_cost, $physical_item, $inventory_expected_liability_ledger_account_id, $inventory_expected_liability_ledger_account_no, $inventory_expected_liability_ledger_account_description, $inventory_expected_asset_ledger_account_id, $inventory_expected_asset_ledger_account_no, $inventory_expected_asset_ledger_account_description, $inventory_delivered_asset_ledger_account_id, $inventory_delivered_asset_ledger_account_no, $inventory_delivered_asset_ledger_account_description, $inventory_value_ledger_account_id, $inventory_value_ledger_account_no, $inventory_value_ledger_account_description, $inventory_delivered_liability_ledger_account_id, $inventory_delivered_liability_ledger_account_no, $inventory_delivered_liability_ledger_account_description, $inventory_creditor_purchases_ledger_account_id, $inventory_creditor_purchases_ledger_account_no, $inventory_creditor_purchases_ledger_account_description, $inventory_cost_of_goods_variance_ledger_account_id, $inventory_cost_of_goods_variance_ledger_account_no, $inventory_cost_of_goods_variance_ledger_account_description, $inventory_stock_movement_ledger_account_id, $inventory_stock_movement_ledger_account_no, $inventory_stock_movement_ledger_account_description, $inventory_last_saved_date_time, $order_units, $item_no, $in_supplier_warehouse_rec_id, $inc_price, $line_total, $fx_total, $fx_decimal_places, $home_decimal_places, $use_expiry_date, $posted_to_wip, $job_costing_stage_id, $job_costing_stage_no, $job_costing_stage_name, $job_costing_cost_centre_id, $job_costing_cost_centre_no, $job_costing_cost_centre_name, $job_costing_job_id, $job_costing_job_no, $order_no, $order_id, $purchase_order_line_no, $purchase_order_type, $custom_field_values, $line_total_ex_tax, $re_lines_source_id, $body);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'purchaseInvoiceLinePATCHRequestPurchaseInvoiceIDLinesPurchaseInvoiceLineIDUpdate'
     *
     * @param  string $accept Accept Header (required)
     * @param  string $purchase_invoice_id (required)
     * @param  string $purchase_invoice_line_id (required)
     * @param  bool $jiwa_stateful Stateful indicator (optional)
     * @param  double $quantity (optional)
     * @param  string $inventory_id (optional)
     * @param  string $part_no (optional)
     * @param  string $aux2 (optional)
     * @param  string $description (optional)
     * @param  string $supplier_part_no (optional)
     * @param  string $purchase_invoice_line_type (optional)
     * @param  int $quantity_decimal_places (optional)
     * @param  \DateTime $last_saved_date_time (optional)
     * @param  double $tax_amount (optional)
     * @param  string $tax_id (optional)
     * @param  double $tax_rate (optional)
     * @param  double $cost (optional)
     * @param  double $currency_rate_used (optional)
     * @param  string $purchasing_classification_id (optional)
     * @param  string $purchasing_classification_description (optional)
     * @param  string $line_details (optional)
     * @param  bool $use_serial_no (optional)
     * @param  double $fx_cost (optional)
     * @param  bool $physical_item (optional)
     * @param  string $inventory_expected_liability_ledger_account_id (optional)
     * @param  string $inventory_expected_liability_ledger_account_no (optional)
     * @param  string $inventory_expected_liability_ledger_account_description (optional)
     * @param  string $inventory_expected_asset_ledger_account_id (optional)
     * @param  string $inventory_expected_asset_ledger_account_no (optional)
     * @param  string $inventory_expected_asset_ledger_account_description (optional)
     * @param  string $inventory_delivered_asset_ledger_account_id (optional)
     * @param  string $inventory_delivered_asset_ledger_account_no (optional)
     * @param  string $inventory_delivered_asset_ledger_account_description (optional)
     * @param  string $inventory_value_ledger_account_id (optional)
     * @param  string $inventory_value_ledger_account_no (optional)
     * @param  string $inventory_value_ledger_account_description (optional)
     * @param  string $inventory_delivered_liability_ledger_account_id (optional)
     * @param  string $inventory_delivered_liability_ledger_account_no (optional)
     * @param  string $inventory_delivered_liability_ledger_account_description (optional)
     * @param  string $inventory_creditor_purchases_ledger_account_id (optional)
     * @param  string $inventory_creditor_purchases_ledger_account_no (optional)
     * @param  string $inventory_creditor_purchases_ledger_account_description (optional)
     * @param  string $inventory_cost_of_goods_variance_ledger_account_id (optional)
     * @param  string $inventory_cost_of_goods_variance_ledger_account_no (optional)
     * @param  string $inventory_cost_of_goods_variance_ledger_account_description (optional)
     * @param  string $inventory_stock_movement_ledger_account_id (optional)
     * @param  string $inventory_stock_movement_ledger_account_no (optional)
     * @param  string $inventory_stock_movement_ledger_account_description (optional)
     * @param  \DateTime $inventory_last_saved_date_time (optional)
     * @param  double $order_units (optional)
     * @param  int $item_no (optional)
     * @param  string $in_supplier_warehouse_rec_id (optional)
     * @param  double $inc_price (optional)
     * @param  double $line_total (optional)
     * @param  double $fx_total (optional)
     * @param  int $fx_decimal_places (optional)
     * @param  int $home_decimal_places (optional)
     * @param  bool $use_expiry_date (optional)
     * @param  bool $posted_to_wip (optional)
     * @param  string $job_costing_stage_id (optional)
     * @param  string $job_costing_stage_no (optional)
     * @param  string $job_costing_stage_name (optional)
     * @param  string $job_costing_cost_centre_id (optional)
     * @param  string $job_costing_cost_centre_no (optional)
     * @param  string $job_costing_cost_centre_name (optional)
     * @param  string $job_costing_job_id (optional)
     * @param  string $job_costing_job_no (optional)
     * @param  string $order_no (optional)
     * @param  string $order_id (optional)
     * @param  int $purchase_order_line_no (optional)
     * @param  string $purchase_order_type (optional)
     * @param  string $custom_field_values (optional)
     * @param  int $line_total_ex_tax (optional)
     * @param  string $re_lines_source_id (optional)
     * @param  \Jiwa\Model\PurchaseInvoiceLinePATCHRequest $body (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function purchaseInvoiceLinePATCHRequestPurchaseInvoiceIDLinesPurchaseInvoiceLineIDUpdateRequest($accept, $purchase_invoice_id, $purchase_invoice_line_id, $jiwa_stateful = null, $quantity = null, $inventory_id = null, $part_no = null, $aux2 = null, $description = null, $supplier_part_no = null, $purchase_invoice_line_type = null, $quantity_decimal_places = null, $last_saved_date_time = null, $tax_amount = null, $tax_id = null, $tax_rate = null, $cost = null, $currency_rate_used = null, $purchasing_classification_id = null, $purchasing_classification_description = null, $line_details = null, $use_serial_no = null, $fx_cost = null, $physical_item = null, $inventory_expected_liability_ledger_account_id = null, $inventory_expected_liability_ledger_account_no = null, $inventory_expected_liability_ledger_account_description = null, $inventory_expected_asset_ledger_account_id = null, $inventory_expected_asset_ledger_account_no = null, $inventory_expected_asset_ledger_account_description = null, $inventory_delivered_asset_ledger_account_id = null, $inventory_delivered_asset_ledger_account_no = null, $inventory_delivered_asset_ledger_account_description = null, $inventory_value_ledger_account_id = null, $inventory_value_ledger_account_no = null, $inventory_value_ledger_account_description = null, $inventory_delivered_liability_ledger_account_id = null, $inventory_delivered_liability_ledger_account_no = null, $inventory_delivered_liability_ledger_account_description = null, $inventory_creditor_purchases_ledger_account_id = null, $inventory_creditor_purchases_ledger_account_no = null, $inventory_creditor_purchases_ledger_account_description = null, $inventory_cost_of_goods_variance_ledger_account_id = null, $inventory_cost_of_goods_variance_ledger_account_no = null, $inventory_cost_of_goods_variance_ledger_account_description = null, $inventory_stock_movement_ledger_account_id = null, $inventory_stock_movement_ledger_account_no = null, $inventory_stock_movement_ledger_account_description = null, $inventory_last_saved_date_time = null, $order_units = null, $item_no = null, $in_supplier_warehouse_rec_id = null, $inc_price = null, $line_total = null, $fx_total = null, $fx_decimal_places = null, $home_decimal_places = null, $use_expiry_date = null, $posted_to_wip = null, $job_costing_stage_id = null, $job_costing_stage_no = null, $job_costing_stage_name = null, $job_costing_cost_centre_id = null, $job_costing_cost_centre_no = null, $job_costing_cost_centre_name = null, $job_costing_job_id = null, $job_costing_job_no = null, $order_no = null, $order_id = null, $purchase_order_line_no = null, $purchase_order_type = null, $custom_field_values = null, $line_total_ex_tax = null, $re_lines_source_id = null, $body = null)
    {
        // verify the required parameter 'accept' is set
        if ($accept === null || (is_array($accept) && count($accept) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $accept when calling purchaseInvoiceLinePATCHRequestPurchaseInvoiceIDLinesPurchaseInvoiceLineIDUpdate'
            );
        }
        // verify the required parameter 'purchase_invoice_id' is set
        if ($purchase_invoice_id === null || (is_array($purchase_invoice_id) && count($purchase_invoice_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $purchase_invoice_id when calling purchaseInvoiceLinePATCHRequestPurchaseInvoiceIDLinesPurchaseInvoiceLineIDUpdate'
            );
        }
        // verify the required parameter 'purchase_invoice_line_id' is set
        if ($purchase_invoice_line_id === null || (is_array($purchase_invoice_line_id) && count($purchase_invoice_line_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $purchase_invoice_line_id when calling purchaseInvoiceLinePATCHRequestPurchaseInvoiceIDLinesPurchaseInvoiceLineIDUpdate'
            );
        }

        $resourcePath = '/PurchaseInvoices/{PurchaseInvoiceID}/Lines/{PurchaseInvoiceLineID}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        if ($quantity !== null) {
            $queryParams['Quantity'] = ObjectSerializer::toQueryValue($quantity);
        }
        // query params
        if ($inventory_id !== null) {
            $queryParams['InventoryID'] = ObjectSerializer::toQueryValue($inventory_id);
        }
        // query params
        if ($part_no !== null) {
            $queryParams['PartNo'] = ObjectSerializer::toQueryValue($part_no);
        }
        // query params
        if ($aux2 !== null) {
            $queryParams['Aux2'] = ObjectSerializer::toQueryValue($aux2);
        }
        // query params
        if ($description !== null) {
            $queryParams['Description'] = ObjectSerializer::toQueryValue($description);
        }
        // query params
        if ($supplier_part_no !== null) {
            $queryParams['SupplierPartNo'] = ObjectSerializer::toQueryValue($supplier_part_no);
        }
        // query params
        if ($purchase_invoice_line_type !== null) {
            $queryParams['PurchaseInvoiceLineType'] = ObjectSerializer::toQueryValue($purchase_invoice_line_type);
        }
        // query params
        if ($quantity_decimal_places !== null) {
            $queryParams['QuantityDecimalPlaces'] = ObjectSerializer::toQueryValue($quantity_decimal_places);
        }
        // query params
        if ($last_saved_date_time !== null) {
            $queryParams['LastSavedDateTime'] = ObjectSerializer::toQueryValue($last_saved_date_time);
        }
        // query params
        if ($tax_amount !== null) {
            $queryParams['TaxAmount'] = ObjectSerializer::toQueryValue($tax_amount);
        }
        // query params
        if ($tax_id !== null) {
            $queryParams['TaxID'] = ObjectSerializer::toQueryValue($tax_id);
        }
        // query params
        if ($tax_rate !== null) {
            $queryParams['TaxRate'] = ObjectSerializer::toQueryValue($tax_rate);
        }
        // query params
        if ($cost !== null) {
            $queryParams['Cost'] = ObjectSerializer::toQueryValue($cost);
        }
        // query params
        if ($currency_rate_used !== null) {
            $queryParams['CurrencyRateUsed'] = ObjectSerializer::toQueryValue($currency_rate_used);
        }
        // query params
        if ($purchasing_classification_id !== null) {
            $queryParams['PurchasingClassificationID'] = ObjectSerializer::toQueryValue($purchasing_classification_id);
        }
        // query params
        if ($purchasing_classification_description !== null) {
            $queryParams['PurchasingClassificationDescription'] = ObjectSerializer::toQueryValue($purchasing_classification_description);
        }
        // query params
        if ($line_details !== null) {
            $queryParams['LineDetails'] = ObjectSerializer::toQueryValue($line_details);
        }
        // query params
        if ($use_serial_no !== null) {
            $queryParams['UseSerialNo'] = ObjectSerializer::toQueryValue($use_serial_no);
        }
        // query params
        if ($fx_cost !== null) {
            $queryParams['FXCost'] = ObjectSerializer::toQueryValue($fx_cost);
        }
        // query params
        if ($physical_item !== null) {
            $queryParams['PhysicalItem'] = ObjectSerializer::toQueryValue($physical_item);
        }
        // query params
        if ($inventory_expected_liability_ledger_account_id !== null) {
            $queryParams['InventoryExpectedLiability_LedgerAccountID'] = ObjectSerializer::toQueryValue($inventory_expected_liability_ledger_account_id);
        }
        // query params
        if ($inventory_expected_liability_ledger_account_no !== null) {
            $queryParams['InventoryExpectedLiability_LedgerAccountNo'] = ObjectSerializer::toQueryValue($inventory_expected_liability_ledger_account_no);
        }
        // query params
        if ($inventory_expected_liability_ledger_account_description !== null) {
            $queryParams['InventoryExpectedLiability_LedgerAccountDescription'] = ObjectSerializer::toQueryValue($inventory_expected_liability_ledger_account_description);
        }
        // query params
        if ($inventory_expected_asset_ledger_account_id !== null) {
            $queryParams['InventoryExpectedAsset_LedgerAccountID'] = ObjectSerializer::toQueryValue($inventory_expected_asset_ledger_account_id);
        }
        // query params
        if ($inventory_expected_asset_ledger_account_no !== null) {
            $queryParams['InventoryExpectedAsset_LedgerAccountNo'] = ObjectSerializer::toQueryValue($inventory_expected_asset_ledger_account_no);
        }
        // query params
        if ($inventory_expected_asset_ledger_account_description !== null) {
            $queryParams['InventoryExpectedAsset_LedgerAccountDescription'] = ObjectSerializer::toQueryValue($inventory_expected_asset_ledger_account_description);
        }
        // query params
        if ($inventory_delivered_asset_ledger_account_id !== null) {
            $queryParams['InventoryDeliveredAsset_LedgerAccountID'] = ObjectSerializer::toQueryValue($inventory_delivered_asset_ledger_account_id);
        }
        // query params
        if ($inventory_delivered_asset_ledger_account_no !== null) {
            $queryParams['InventoryDeliveredAsset_LedgerAccountNo'] = ObjectSerializer::toQueryValue($inventory_delivered_asset_ledger_account_no);
        }
        // query params
        if ($inventory_delivered_asset_ledger_account_description !== null) {
            $queryParams['InventoryDeliveredAsset_LedgerAccountDescription'] = ObjectSerializer::toQueryValue($inventory_delivered_asset_ledger_account_description);
        }
        // query params
        if ($inventory_value_ledger_account_id !== null) {
            $queryParams['InventoryValue_LedgerAccountID'] = ObjectSerializer::toQueryValue($inventory_value_ledger_account_id);
        }
        // query params
        if ($inventory_value_ledger_account_no !== null) {
            $queryParams['InventoryValue_LedgerAccountNo'] = ObjectSerializer::toQueryValue($inventory_value_ledger_account_no);
        }
        // query params
        if ($inventory_value_ledger_account_description !== null) {
            $queryParams['InventoryValue_LedgerAccountDescription'] = ObjectSerializer::toQueryValue($inventory_value_ledger_account_description);
        }
        // query params
        if ($inventory_delivered_liability_ledger_account_id !== null) {
            $queryParams['InventoryDeliveredLiability_LedgerAccountID'] = ObjectSerializer::toQueryValue($inventory_delivered_liability_ledger_account_id);
        }
        // query params
        if ($inventory_delivered_liability_ledger_account_no !== null) {
            $queryParams['InventoryDeliveredLiability_LedgerAccountNo'] = ObjectSerializer::toQueryValue($inventory_delivered_liability_ledger_account_no);
        }
        // query params
        if ($inventory_delivered_liability_ledger_account_description !== null) {
            $queryParams['InventoryDeliveredLiability_LedgerAccountDescription'] = ObjectSerializer::toQueryValue($inventory_delivered_liability_ledger_account_description);
        }
        // query params
        if ($inventory_creditor_purchases_ledger_account_id !== null) {
            $queryParams['InventoryCreditorPurchases_LedgerAccountID'] = ObjectSerializer::toQueryValue($inventory_creditor_purchases_ledger_account_id);
        }
        // query params
        if ($inventory_creditor_purchases_ledger_account_no !== null) {
            $queryParams['InventoryCreditorPurchases_LedgerAccountNo'] = ObjectSerializer::toQueryValue($inventory_creditor_purchases_ledger_account_no);
        }
        // query params
        if ($inventory_creditor_purchases_ledger_account_description !== null) {
            $queryParams['InventoryCreditorPurchases_LedgerAccountDescription'] = ObjectSerializer::toQueryValue($inventory_creditor_purchases_ledger_account_description);
        }
        // query params
        if ($inventory_cost_of_goods_variance_ledger_account_id !== null) {
            $queryParams['InventoryCostOfGoodsVariance_LedgerAccountID'] = ObjectSerializer::toQueryValue($inventory_cost_of_goods_variance_ledger_account_id);
        }
        // query params
        if ($inventory_cost_of_goods_variance_ledger_account_no !== null) {
            $queryParams['InventoryCostOfGoodsVariance_LedgerAccountNo'] = ObjectSerializer::toQueryValue($inventory_cost_of_goods_variance_ledger_account_no);
        }
        // query params
        if ($inventory_cost_of_goods_variance_ledger_account_description !== null) {
            $queryParams['InventoryCostOfGoodsVariance_LedgerAccountDescription'] = ObjectSerializer::toQueryValue($inventory_cost_of_goods_variance_ledger_account_description);
        }
        // query params
        if ($inventory_stock_movement_ledger_account_id !== null) {
            $queryParams['InventoryStockMovement_LedgerAccountID'] = ObjectSerializer::toQueryValue($inventory_stock_movement_ledger_account_id);
        }
        // query params
        if ($inventory_stock_movement_ledger_account_no !== null) {
            $queryParams['InventoryStockMovement_LedgerAccountNo'] = ObjectSerializer::toQueryValue($inventory_stock_movement_ledger_account_no);
        }
        // query params
        if ($inventory_stock_movement_ledger_account_description !== null) {
            $queryParams['InventoryStockMovement_LedgerAccountDescription'] = ObjectSerializer::toQueryValue($inventory_stock_movement_ledger_account_description);
        }
        // query params
        if ($inventory_last_saved_date_time !== null) {
            $queryParams['InventoryLastSavedDateTime'] = ObjectSerializer::toQueryValue($inventory_last_saved_date_time);
        }
        // query params
        if ($order_units !== null) {
            $queryParams['OrderUnits'] = ObjectSerializer::toQueryValue($order_units);
        }
        // query params
        if ($item_no !== null) {
            $queryParams['ItemNo'] = ObjectSerializer::toQueryValue($item_no);
        }
        // query params
        if ($in_supplier_warehouse_rec_id !== null) {
            $queryParams['IN_SupplierWarehouse_RecID'] = ObjectSerializer::toQueryValue($in_supplier_warehouse_rec_id);
        }
        // query params
        if ($inc_price !== null) {
            $queryParams['IncPrice'] = ObjectSerializer::toQueryValue($inc_price);
        }
        // query params
        if ($line_total !== null) {
            $queryParams['LineTotal'] = ObjectSerializer::toQueryValue($line_total);
        }
        // query params
        if ($fx_total !== null) {
            $queryParams['FXTotal'] = ObjectSerializer::toQueryValue($fx_total);
        }
        // query params
        if ($fx_decimal_places !== null) {
            $queryParams['FXDecimalPlaces'] = ObjectSerializer::toQueryValue($fx_decimal_places);
        }
        // query params
        if ($home_decimal_places !== null) {
            $queryParams['HomeDecimalPlaces'] = ObjectSerializer::toQueryValue($home_decimal_places);
        }
        // query params
        if ($use_expiry_date !== null) {
            $queryParams['UseExpiryDate'] = ObjectSerializer::toQueryValue($use_expiry_date);
        }
        // query params
        if ($posted_to_wip !== null) {
            $queryParams['PostedToWIP'] = ObjectSerializer::toQueryValue($posted_to_wip);
        }
        // query params
        if ($job_costing_stage_id !== null) {
            $queryParams['JobCostingStageID'] = ObjectSerializer::toQueryValue($job_costing_stage_id);
        }
        // query params
        if ($job_costing_stage_no !== null) {
            $queryParams['JobCostingStageNo'] = ObjectSerializer::toQueryValue($job_costing_stage_no);
        }
        // query params
        if ($job_costing_stage_name !== null) {
            $queryParams['JobCostingStageName'] = ObjectSerializer::toQueryValue($job_costing_stage_name);
        }
        // query params
        if ($job_costing_cost_centre_id !== null) {
            $queryParams['JobCostingCostCentreID'] = ObjectSerializer::toQueryValue($job_costing_cost_centre_id);
        }
        // query params
        if ($job_costing_cost_centre_no !== null) {
            $queryParams['JobCostingCostCentreNo'] = ObjectSerializer::toQueryValue($job_costing_cost_centre_no);
        }
        // query params
        if ($job_costing_cost_centre_name !== null) {
            $queryParams['JobCostingCostCentreName'] = ObjectSerializer::toQueryValue($job_costing_cost_centre_name);
        }
        // query params
        if ($job_costing_job_id !== null) {
            $queryParams['JobCostingJobID'] = ObjectSerializer::toQueryValue($job_costing_job_id);
        }
        // query params
        if ($job_costing_job_no !== null) {
            $queryParams['JobCostingJobNo'] = ObjectSerializer::toQueryValue($job_costing_job_no);
        }
        // query params
        if ($order_no !== null) {
            $queryParams['OrderNo'] = ObjectSerializer::toQueryValue($order_no);
        }
        // query params
        if ($order_id !== null) {
            $queryParams['OrderID'] = ObjectSerializer::toQueryValue($order_id);
        }
        // query params
        if ($purchase_order_line_no !== null) {
            $queryParams['PurchaseOrderLineNo'] = ObjectSerializer::toQueryValue($purchase_order_line_no);
        }
        // query params
        if ($purchase_order_type !== null) {
            $queryParams['PurchaseOrderType'] = ObjectSerializer::toQueryValue($purchase_order_type);
        }
        // query params
        if ($custom_field_values !== null) {
            $queryParams['CustomFieldValues'] = ObjectSerializer::toQueryValue($custom_field_values);
        }
        // query params
        if ($line_total_ex_tax !== null) {
            $queryParams['LineTotalExTax'] = ObjectSerializer::toQueryValue($line_total_ex_tax);
        }
        // query params
        if ($re_lines_source_id !== null) {
            $queryParams['RE_Lines_SourceID'] = ObjectSerializer::toQueryValue($re_lines_source_id);
        }
        // header params
        if ($accept !== null) {
            $headerParams['Accept'] = ObjectSerializer::toHeaderValue($accept);
        }
        // header params
        if ($jiwa_stateful !== null) {
            $headerParams['jiwa-stateful'] = ObjectSerializer::toHeaderValue($jiwa_stateful);
        }

        // path params
        if ($purchase_invoice_id !== null) {
            $resourcePath = str_replace(
                '{' . 'PurchaseInvoiceID' . '}',
                ObjectSerializer::toPathValue($purchase_invoice_id),
                $resourcePath
            );
        }
        // path params
        if ($purchase_invoice_line_id !== null) {
            $resourcePath = str_replace(
                '{' . 'PurchaseInvoiceLineID' . '}',
                ObjectSerializer::toPathValue($purchase_invoice_line_id),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;
        if (isset($body)) {
            $_tempBody = $body;
        }

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json', 'application/xml']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json', 'application/xml'],
                ['application/x-www-form-urlencoded', 'application/json', 'application/xml']
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            
            if($headers['Content-Type'] === 'application/json') {
                // \stdClass has no __toString(), so we should encode it manually
                if ($httpBody instanceof \stdClass) {
                    $httpBody = \GuzzleHttp\json_encode($httpBody);
                }
                // array has no __toString(), so we should encode it manually
                if(is_array($httpBody)) {
                    $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($httpBody));
                }
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\Query::build($formParams);
            }
        }

        // this endpoint requires HTTP basic authentication
        if ($this->config->getUsername() !== null || $this->config->getPassword() !== null) {
            $headers['Authorization'] = 'Basic ' . base64_encode($this->config->getUsername() . ":" . $this->config->getPassword());
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\Query::build($queryParams);
        return new Request(
            'PATCH',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation purchaseInvoiceLinesGETManyRequestPurchaseInvoiceIDPurchaseInvoiceLineIDGet
     *
     * Retrieves a list of purchase invoice lines.
     *
     * @param  string $accept Accept Header (required)
     * @param  string $purchase_invoice_id purchase_invoice_id (required)
     * @param  bool $jiwa_stateful Stateful indicator (optional)
     *
     * @throws \Jiwa\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Jiwa\Model\PurchaseInvoiceLine[]
     */
    public function purchaseInvoiceLinesGETManyRequestPurchaseInvoiceIDPurchaseInvoiceLineIDGet($accept, $purchase_invoice_id, $jiwa_stateful = null)
    {
        list($response) = $this->purchaseInvoiceLinesGETManyRequestPurchaseInvoiceIDPurchaseInvoiceLineIDGetWithHttpInfo($accept, $purchase_invoice_id, $jiwa_stateful);
        return $response;
    }

    /**
     * Operation purchaseInvoiceLinesGETManyRequestPurchaseInvoiceIDPurchaseInvoiceLineIDGetWithHttpInfo
     *
     * Retrieves a list of purchase invoice lines.
     *
     * @param  string $accept Accept Header (required)
     * @param  string $purchase_invoice_id (required)
     * @param  bool $jiwa_stateful Stateful indicator (optional)
     *
     * @throws \Jiwa\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Jiwa\Model\PurchaseInvoiceLine[], HTTP status code, HTTP response headers (array of strings)
     */
    public function purchaseInvoiceLinesGETManyRequestPurchaseInvoiceIDPurchaseInvoiceLineIDGetWithHttpInfo($accept, $purchase_invoice_id, $jiwa_stateful = null)
    {
        $returnType = '\Jiwa\Model\PurchaseInvoiceLine[]';
        $request = $this->purchaseInvoiceLinesGETManyRequestPurchaseInvoiceIDPurchaseInvoiceLineIDGetRequest($accept, $purchase_invoice_id, $jiwa_stateful);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Jiwa\Model\PurchaseInvoiceLine[]',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 404:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Jiwa\Model\PurchaseInvoiceLine[]',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 401:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Jiwa\Model\PurchaseInvoiceLine[]',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 403:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Jiwa\Model\PurchaseInvoiceLine[]',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation purchaseInvoiceLinesGETManyRequestPurchaseInvoiceIDPurchaseInvoiceLineIDGetAsync
     *
     * Retrieves a list of purchase invoice lines.
     *
     * @param  string $accept Accept Header (required)
     * @param  string $purchase_invoice_id (required)
     * @param  bool $jiwa_stateful Stateful indicator (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function purchaseInvoiceLinesGETManyRequestPurchaseInvoiceIDPurchaseInvoiceLineIDGetAsync($accept, $purchase_invoice_id, $jiwa_stateful = null)
    {
        return $this->purchaseInvoiceLinesGETManyRequestPurchaseInvoiceIDPurchaseInvoiceLineIDGetAsyncWithHttpInfo($accept, $purchase_invoice_id, $jiwa_stateful)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation purchaseInvoiceLinesGETManyRequestPurchaseInvoiceIDPurchaseInvoiceLineIDGetAsyncWithHttpInfo
     *
     * Retrieves a list of purchase invoice lines.
     *
     * @param  string $accept Accept Header (required)
     * @param  string $purchase_invoice_id (required)
     * @param  bool $jiwa_stateful Stateful indicator (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function purchaseInvoiceLinesGETManyRequestPurchaseInvoiceIDPurchaseInvoiceLineIDGetAsyncWithHttpInfo($accept, $purchase_invoice_id, $jiwa_stateful = null)
    {
        $returnType = '\Jiwa\Model\PurchaseInvoiceLine[]';
        $request = $this->purchaseInvoiceLinesGETManyRequestPurchaseInvoiceIDPurchaseInvoiceLineIDGetRequest($accept, $purchase_invoice_id, $jiwa_stateful);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'purchaseInvoiceLinesGETManyRequestPurchaseInvoiceIDPurchaseInvoiceLineIDGet'
     *
     * @param  string $accept Accept Header (required)
     * @param  string $purchase_invoice_id (required)
     * @param  bool $jiwa_stateful Stateful indicator (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function purchaseInvoiceLinesGETManyRequestPurchaseInvoiceIDPurchaseInvoiceLineIDGetRequest($accept, $purchase_invoice_id, $jiwa_stateful = null)
    {
        // verify the required parameter 'accept' is set
        if ($accept === null || (is_array($accept) && count($accept) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $accept when calling purchaseInvoiceLinesGETManyRequestPurchaseInvoiceIDPurchaseInvoiceLineIDGet'
            );
        }
        // verify the required parameter 'purchase_invoice_id' is set
        if ($purchase_invoice_id === null || (is_array($purchase_invoice_id) && count($purchase_invoice_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $purchase_invoice_id when calling purchaseInvoiceLinesGETManyRequestPurchaseInvoiceIDPurchaseInvoiceLineIDGet'
            );
        }

        $resourcePath = '/PurchaseInvoices/{PurchaseInvoiceID}/PurchaseInvoiceLineID';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // header params
        if ($accept !== null) {
            $headerParams['Accept'] = ObjectSerializer::toHeaderValue($accept);
        }
        // header params
        if ($jiwa_stateful !== null) {
            $headerParams['jiwa-stateful'] = ObjectSerializer::toHeaderValue($jiwa_stateful);
        }

        // path params
        if ($purchase_invoice_id !== null) {
            $resourcePath = str_replace(
                '{' . 'PurchaseInvoiceID' . '}',
                ObjectSerializer::toPathValue($purchase_invoice_id),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json', 'application/xml']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json', 'application/xml'],
                ['application/x-www-form-urlencoded', 'application/json', 'application/xml']
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            
            if($headers['Content-Type'] === 'application/json') {
                // \stdClass has no __toString(), so we should encode it manually
                if ($httpBody instanceof \stdClass) {
                    $httpBody = \GuzzleHttp\json_encode($httpBody);
                }
                // array has no __toString(), so we should encode it manually
                if(is_array($httpBody)) {
                    $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($httpBody));
                }
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\Query::build($formParams);
            }
        }

        // this endpoint requires HTTP basic authentication
        if ($this->config->getUsername() !== null || $this->config->getPassword() !== null) {
            $headers['Authorization'] = 'Basic ' . base64_encode($this->config->getUsername() . ":" . $this->config->getPassword());
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\Query::build($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation purchaseInvoicePATCHRequestPurchaseInvoiceIDUpdate
     *
     * Updates a purchase invoice.
     *
     * @param  string $accept Accept Header (required)
     * @param  string $purchase_invoice_id purchase_invoice_id (required)
     * @param  bool $jiwa_stateful Stateful indicator (optional)
     * @param  string $creditor_id creditor_id (optional)
     * @param  string $creditor_account_no creditor_account_no (optional)
     * @param  string $creditor_name creditor_name (optional)
     * @param  \DateTime $last_saved_date_time last_saved_date_time (optional)
     * @param  string $invoice_no invoice_no (optional)
     * @param  \DateTime $invoice_date invoice_date (optional)
     * @param  string $status status (optional)
     * @param  double $freight freight (optional)
     * @param  double $duty duty (optional)
     * @param  double $insurance insurance (optional)
     * @param  double $tax_total tax_total (optional)
     * @param  string $freight_tax_id freight_tax_id (optional)
     * @param  double $freight_tax_rate freight_tax_rate (optional)
     * @param  double $freight_tax_amount freight_tax_amount (optional)
     * @param  string $duty_tax_id duty_tax_id (optional)
     * @param  double $duty_tax_rate duty_tax_rate (optional)
     * @param  double $duty_tax_amount duty_tax_amount (optional)
     * @param  string $insurance_tax_id insurance_tax_id (optional)
     * @param  double $insurance_tax_rate insurance_tax_rate (optional)
     * @param  double $insurance_tax_amount insurance_tax_amount (optional)
     * @param  string $lines lines (optional)
     * @param  string $goods_received_notes goods_received_notes (optional)
     * @param  double $total_gross total_gross (optional)
     * @param  double $total_net total_net (optional)
     * @param  double $total_fx total_fx (optional)
     * @param  double $freight_inc freight_inc (optional)
     * @param  double $duty_inc duty_inc (optional)
     * @param  double $insurance_inc insurance_inc (optional)
     * @param  int $home_decimal_places home_decimal_places (optional)
     * @param  int $fx_decimal_places fx_decimal_places (optional)
     * @param  double $tax_adjustment tax_adjustment (optional)
     * @param  \DateTime $due_date due_date (optional)
     * @param  string $currency_id currency_id (optional)
     * @param  double $total_net_on_inventory_receivals total_net_on_inventory_receivals (optional)
     * @param  string $custom_field_values custom_field_values (optional)
     * @param  string $notes notes (optional)
     * @param  string $documents documents (optional)
     * @param  string $logical_warehouse_id logical_warehouse_id (optional)
     * @param  string $logical_warehouse_description logical_warehouse_description (optional)
     * @param  string $physical_warehouse_id physical_warehouse_id (optional)
     * @param  string $physical_warehouse_description physical_warehouse_description (optional)
     * @param  \Jiwa\Model\PurchaseInvoicePATCHRequest $body body (optional)
     *
     * @throws \Jiwa\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Jiwa\Model\PurchaseInvoice
     */
    public function purchaseInvoicePATCHRequestPurchaseInvoiceIDUpdate($accept, $purchase_invoice_id, $jiwa_stateful = null, $creditor_id = null, $creditor_account_no = null, $creditor_name = null, $last_saved_date_time = null, $invoice_no = null, $invoice_date = null, $status = null, $freight = null, $duty = null, $insurance = null, $tax_total = null, $freight_tax_id = null, $freight_tax_rate = null, $freight_tax_amount = null, $duty_tax_id = null, $duty_tax_rate = null, $duty_tax_amount = null, $insurance_tax_id = null, $insurance_tax_rate = null, $insurance_tax_amount = null, $lines = null, $goods_received_notes = null, $total_gross = null, $total_net = null, $total_fx = null, $freight_inc = null, $duty_inc = null, $insurance_inc = null, $home_decimal_places = null, $fx_decimal_places = null, $tax_adjustment = null, $due_date = null, $currency_id = null, $total_net_on_inventory_receivals = null, $custom_field_values = null, $notes = null, $documents = null, $logical_warehouse_id = null, $logical_warehouse_description = null, $physical_warehouse_id = null, $physical_warehouse_description = null, $body = null)
    {
        list($response) = $this->purchaseInvoicePATCHRequestPurchaseInvoiceIDUpdateWithHttpInfo($accept, $purchase_invoice_id, $jiwa_stateful, $creditor_id, $creditor_account_no, $creditor_name, $last_saved_date_time, $invoice_no, $invoice_date, $status, $freight, $duty, $insurance, $tax_total, $freight_tax_id, $freight_tax_rate, $freight_tax_amount, $duty_tax_id, $duty_tax_rate, $duty_tax_amount, $insurance_tax_id, $insurance_tax_rate, $insurance_tax_amount, $lines, $goods_received_notes, $total_gross, $total_net, $total_fx, $freight_inc, $duty_inc, $insurance_inc, $home_decimal_places, $fx_decimal_places, $tax_adjustment, $due_date, $currency_id, $total_net_on_inventory_receivals, $custom_field_values, $notes, $documents, $logical_warehouse_id, $logical_warehouse_description, $physical_warehouse_id, $physical_warehouse_description, $body);
        return $response;
    }

    /**
     * Operation purchaseInvoicePATCHRequestPurchaseInvoiceIDUpdateWithHttpInfo
     *
     * Updates a purchase invoice.
     *
     * @param  string $accept Accept Header (required)
     * @param  string $purchase_invoice_id (required)
     * @param  bool $jiwa_stateful Stateful indicator (optional)
     * @param  string $creditor_id (optional)
     * @param  string $creditor_account_no (optional)
     * @param  string $creditor_name (optional)
     * @param  \DateTime $last_saved_date_time (optional)
     * @param  string $invoice_no (optional)
     * @param  \DateTime $invoice_date (optional)
     * @param  string $status (optional)
     * @param  double $freight (optional)
     * @param  double $duty (optional)
     * @param  double $insurance (optional)
     * @param  double $tax_total (optional)
     * @param  string $freight_tax_id (optional)
     * @param  double $freight_tax_rate (optional)
     * @param  double $freight_tax_amount (optional)
     * @param  string $duty_tax_id (optional)
     * @param  double $duty_tax_rate (optional)
     * @param  double $duty_tax_amount (optional)
     * @param  string $insurance_tax_id (optional)
     * @param  double $insurance_tax_rate (optional)
     * @param  double $insurance_tax_amount (optional)
     * @param  string $lines (optional)
     * @param  string $goods_received_notes (optional)
     * @param  double $total_gross (optional)
     * @param  double $total_net (optional)
     * @param  double $total_fx (optional)
     * @param  double $freight_inc (optional)
     * @param  double $duty_inc (optional)
     * @param  double $insurance_inc (optional)
     * @param  int $home_decimal_places (optional)
     * @param  int $fx_decimal_places (optional)
     * @param  double $tax_adjustment (optional)
     * @param  \DateTime $due_date (optional)
     * @param  string $currency_id (optional)
     * @param  double $total_net_on_inventory_receivals (optional)
     * @param  string $custom_field_values (optional)
     * @param  string $notes (optional)
     * @param  string $documents (optional)
     * @param  string $logical_warehouse_id (optional)
     * @param  string $logical_warehouse_description (optional)
     * @param  string $physical_warehouse_id (optional)
     * @param  string $physical_warehouse_description (optional)
     * @param  \Jiwa\Model\PurchaseInvoicePATCHRequest $body (optional)
     *
     * @throws \Jiwa\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Jiwa\Model\PurchaseInvoice, HTTP status code, HTTP response headers (array of strings)
     */
    public function purchaseInvoicePATCHRequestPurchaseInvoiceIDUpdateWithHttpInfo($accept, $purchase_invoice_id, $jiwa_stateful = null, $creditor_id = null, $creditor_account_no = null, $creditor_name = null, $last_saved_date_time = null, $invoice_no = null, $invoice_date = null, $status = null, $freight = null, $duty = null, $insurance = null, $tax_total = null, $freight_tax_id = null, $freight_tax_rate = null, $freight_tax_amount = null, $duty_tax_id = null, $duty_tax_rate = null, $duty_tax_amount = null, $insurance_tax_id = null, $insurance_tax_rate = null, $insurance_tax_amount = null, $lines = null, $goods_received_notes = null, $total_gross = null, $total_net = null, $total_fx = null, $freight_inc = null, $duty_inc = null, $insurance_inc = null, $home_decimal_places = null, $fx_decimal_places = null, $tax_adjustment = null, $due_date = null, $currency_id = null, $total_net_on_inventory_receivals = null, $custom_field_values = null, $notes = null, $documents = null, $logical_warehouse_id = null, $logical_warehouse_description = null, $physical_warehouse_id = null, $physical_warehouse_description = null, $body = null)
    {
        $returnType = '\Jiwa\Model\PurchaseInvoice';
        $request = $this->purchaseInvoicePATCHRequestPurchaseInvoiceIDUpdateRequest($accept, $purchase_invoice_id, $jiwa_stateful, $creditor_id, $creditor_account_no, $creditor_name, $last_saved_date_time, $invoice_no, $invoice_date, $status, $freight, $duty, $insurance, $tax_total, $freight_tax_id, $freight_tax_rate, $freight_tax_amount, $duty_tax_id, $duty_tax_rate, $duty_tax_amount, $insurance_tax_id, $insurance_tax_rate, $insurance_tax_amount, $lines, $goods_received_notes, $total_gross, $total_net, $total_fx, $freight_inc, $duty_inc, $insurance_inc, $home_decimal_places, $fx_decimal_places, $tax_adjustment, $due_date, $currency_id, $total_net_on_inventory_receivals, $custom_field_values, $notes, $documents, $logical_warehouse_id, $logical_warehouse_description, $physical_warehouse_id, $physical_warehouse_description, $body);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Jiwa\Model\PurchaseInvoice',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 404:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Jiwa\Model\PurchaseInvoice',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 201:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Jiwa\Model\PurchaseInvoice',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 401:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Jiwa\Model\PurchaseInvoice',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 403:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Jiwa\Model\PurchaseInvoice',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation purchaseInvoicePATCHRequestPurchaseInvoiceIDUpdateAsync
     *
     * Updates a purchase invoice.
     *
     * @param  string $accept Accept Header (required)
     * @param  string $purchase_invoice_id (required)
     * @param  bool $jiwa_stateful Stateful indicator (optional)
     * @param  string $creditor_id (optional)
     * @param  string $creditor_account_no (optional)
     * @param  string $creditor_name (optional)
     * @param  \DateTime $last_saved_date_time (optional)
     * @param  string $invoice_no (optional)
     * @param  \DateTime $invoice_date (optional)
     * @param  string $status (optional)
     * @param  double $freight (optional)
     * @param  double $duty (optional)
     * @param  double $insurance (optional)
     * @param  double $tax_total (optional)
     * @param  string $freight_tax_id (optional)
     * @param  double $freight_tax_rate (optional)
     * @param  double $freight_tax_amount (optional)
     * @param  string $duty_tax_id (optional)
     * @param  double $duty_tax_rate (optional)
     * @param  double $duty_tax_amount (optional)
     * @param  string $insurance_tax_id (optional)
     * @param  double $insurance_tax_rate (optional)
     * @param  double $insurance_tax_amount (optional)
     * @param  string $lines (optional)
     * @param  string $goods_received_notes (optional)
     * @param  double $total_gross (optional)
     * @param  double $total_net (optional)
     * @param  double $total_fx (optional)
     * @param  double $freight_inc (optional)
     * @param  double $duty_inc (optional)
     * @param  double $insurance_inc (optional)
     * @param  int $home_decimal_places (optional)
     * @param  int $fx_decimal_places (optional)
     * @param  double $tax_adjustment (optional)
     * @param  \DateTime $due_date (optional)
     * @param  string $currency_id (optional)
     * @param  double $total_net_on_inventory_receivals (optional)
     * @param  string $custom_field_values (optional)
     * @param  string $notes (optional)
     * @param  string $documents (optional)
     * @param  string $logical_warehouse_id (optional)
     * @param  string $logical_warehouse_description (optional)
     * @param  string $physical_warehouse_id (optional)
     * @param  string $physical_warehouse_description (optional)
     * @param  \Jiwa\Model\PurchaseInvoicePATCHRequest $body (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function purchaseInvoicePATCHRequestPurchaseInvoiceIDUpdateAsync($accept, $purchase_invoice_id, $jiwa_stateful = null, $creditor_id = null, $creditor_account_no = null, $creditor_name = null, $last_saved_date_time = null, $invoice_no = null, $invoice_date = null, $status = null, $freight = null, $duty = null, $insurance = null, $tax_total = null, $freight_tax_id = null, $freight_tax_rate = null, $freight_tax_amount = null, $duty_tax_id = null, $duty_tax_rate = null, $duty_tax_amount = null, $insurance_tax_id = null, $insurance_tax_rate = null, $insurance_tax_amount = null, $lines = null, $goods_received_notes = null, $total_gross = null, $total_net = null, $total_fx = null, $freight_inc = null, $duty_inc = null, $insurance_inc = null, $home_decimal_places = null, $fx_decimal_places = null, $tax_adjustment = null, $due_date = null, $currency_id = null, $total_net_on_inventory_receivals = null, $custom_field_values = null, $notes = null, $documents = null, $logical_warehouse_id = null, $logical_warehouse_description = null, $physical_warehouse_id = null, $physical_warehouse_description = null, $body = null)
    {
        return $this->purchaseInvoicePATCHRequestPurchaseInvoiceIDUpdateAsyncWithHttpInfo($accept, $purchase_invoice_id, $jiwa_stateful, $creditor_id, $creditor_account_no, $creditor_name, $last_saved_date_time, $invoice_no, $invoice_date, $status, $freight, $duty, $insurance, $tax_total, $freight_tax_id, $freight_tax_rate, $freight_tax_amount, $duty_tax_id, $duty_tax_rate, $duty_tax_amount, $insurance_tax_id, $insurance_tax_rate, $insurance_tax_amount, $lines, $goods_received_notes, $total_gross, $total_net, $total_fx, $freight_inc, $duty_inc, $insurance_inc, $home_decimal_places, $fx_decimal_places, $tax_adjustment, $due_date, $currency_id, $total_net_on_inventory_receivals, $custom_field_values, $notes, $documents, $logical_warehouse_id, $logical_warehouse_description, $physical_warehouse_id, $physical_warehouse_description, $body)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation purchaseInvoicePATCHRequestPurchaseInvoiceIDUpdateAsyncWithHttpInfo
     *
     * Updates a purchase invoice.
     *
     * @param  string $accept Accept Header (required)
     * @param  string $purchase_invoice_id (required)
     * @param  bool $jiwa_stateful Stateful indicator (optional)
     * @param  string $creditor_id (optional)
     * @param  string $creditor_account_no (optional)
     * @param  string $creditor_name (optional)
     * @param  \DateTime $last_saved_date_time (optional)
     * @param  string $invoice_no (optional)
     * @param  \DateTime $invoice_date (optional)
     * @param  string $status (optional)
     * @param  double $freight (optional)
     * @param  double $duty (optional)
     * @param  double $insurance (optional)
     * @param  double $tax_total (optional)
     * @param  string $freight_tax_id (optional)
     * @param  double $freight_tax_rate (optional)
     * @param  double $freight_tax_amount (optional)
     * @param  string $duty_tax_id (optional)
     * @param  double $duty_tax_rate (optional)
     * @param  double $duty_tax_amount (optional)
     * @param  string $insurance_tax_id (optional)
     * @param  double $insurance_tax_rate (optional)
     * @param  double $insurance_tax_amount (optional)
     * @param  string $lines (optional)
     * @param  string $goods_received_notes (optional)
     * @param  double $total_gross (optional)
     * @param  double $total_net (optional)
     * @param  double $total_fx (optional)
     * @param  double $freight_inc (optional)
     * @param  double $duty_inc (optional)
     * @param  double $insurance_inc (optional)
     * @param  int $home_decimal_places (optional)
     * @param  int $fx_decimal_places (optional)
     * @param  double $tax_adjustment (optional)
     * @param  \DateTime $due_date (optional)
     * @param  string $currency_id (optional)
     * @param  double $total_net_on_inventory_receivals (optional)
     * @param  string $custom_field_values (optional)
     * @param  string $notes (optional)
     * @param  string $documents (optional)
     * @param  string $logical_warehouse_id (optional)
     * @param  string $logical_warehouse_description (optional)
     * @param  string $physical_warehouse_id (optional)
     * @param  string $physical_warehouse_description (optional)
     * @param  \Jiwa\Model\PurchaseInvoicePATCHRequest $body (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function purchaseInvoicePATCHRequestPurchaseInvoiceIDUpdateAsyncWithHttpInfo($accept, $purchase_invoice_id, $jiwa_stateful = null, $creditor_id = null, $creditor_account_no = null, $creditor_name = null, $last_saved_date_time = null, $invoice_no = null, $invoice_date = null, $status = null, $freight = null, $duty = null, $insurance = null, $tax_total = null, $freight_tax_id = null, $freight_tax_rate = null, $freight_tax_amount = null, $duty_tax_id = null, $duty_tax_rate = null, $duty_tax_amount = null, $insurance_tax_id = null, $insurance_tax_rate = null, $insurance_tax_amount = null, $lines = null, $goods_received_notes = null, $total_gross = null, $total_net = null, $total_fx = null, $freight_inc = null, $duty_inc = null, $insurance_inc = null, $home_decimal_places = null, $fx_decimal_places = null, $tax_adjustment = null, $due_date = null, $currency_id = null, $total_net_on_inventory_receivals = null, $custom_field_values = null, $notes = null, $documents = null, $logical_warehouse_id = null, $logical_warehouse_description = null, $physical_warehouse_id = null, $physical_warehouse_description = null, $body = null)
    {
        $returnType = '\Jiwa\Model\PurchaseInvoice';
        $request = $this->purchaseInvoicePATCHRequestPurchaseInvoiceIDUpdateRequest($accept, $purchase_invoice_id, $jiwa_stateful, $creditor_id, $creditor_account_no, $creditor_name, $last_saved_date_time, $invoice_no, $invoice_date, $status, $freight, $duty, $insurance, $tax_total, $freight_tax_id, $freight_tax_rate, $freight_tax_amount, $duty_tax_id, $duty_tax_rate, $duty_tax_amount, $insurance_tax_id, $insurance_tax_rate, $insurance_tax_amount, $lines, $goods_received_notes, $total_gross, $total_net, $total_fx, $freight_inc, $duty_inc, $insurance_inc, $home_decimal_places, $fx_decimal_places, $tax_adjustment, $due_date, $currency_id, $total_net_on_inventory_receivals, $custom_field_values, $notes, $documents, $logical_warehouse_id, $logical_warehouse_description, $physical_warehouse_id, $physical_warehouse_description, $body);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'purchaseInvoicePATCHRequestPurchaseInvoiceIDUpdate'
     *
     * @param  string $accept Accept Header (required)
     * @param  string $purchase_invoice_id (required)
     * @param  bool $jiwa_stateful Stateful indicator (optional)
     * @param  string $creditor_id (optional)
     * @param  string $creditor_account_no (optional)
     * @param  string $creditor_name (optional)
     * @param  \DateTime $last_saved_date_time (optional)
     * @param  string $invoice_no (optional)
     * @param  \DateTime $invoice_date (optional)
     * @param  string $status (optional)
     * @param  double $freight (optional)
     * @param  double $duty (optional)
     * @param  double $insurance (optional)
     * @param  double $tax_total (optional)
     * @param  string $freight_tax_id (optional)
     * @param  double $freight_tax_rate (optional)
     * @param  double $freight_tax_amount (optional)
     * @param  string $duty_tax_id (optional)
     * @param  double $duty_tax_rate (optional)
     * @param  double $duty_tax_amount (optional)
     * @param  string $insurance_tax_id (optional)
     * @param  double $insurance_tax_rate (optional)
     * @param  double $insurance_tax_amount (optional)
     * @param  string $lines (optional)
     * @param  string $goods_received_notes (optional)
     * @param  double $total_gross (optional)
     * @param  double $total_net (optional)
     * @param  double $total_fx (optional)
     * @param  double $freight_inc (optional)
     * @param  double $duty_inc (optional)
     * @param  double $insurance_inc (optional)
     * @param  int $home_decimal_places (optional)
     * @param  int $fx_decimal_places (optional)
     * @param  double $tax_adjustment (optional)
     * @param  \DateTime $due_date (optional)
     * @param  string $currency_id (optional)
     * @param  double $total_net_on_inventory_receivals (optional)
     * @param  string $custom_field_values (optional)
     * @param  string $notes (optional)
     * @param  string $documents (optional)
     * @param  string $logical_warehouse_id (optional)
     * @param  string $logical_warehouse_description (optional)
     * @param  string $physical_warehouse_id (optional)
     * @param  string $physical_warehouse_description (optional)
     * @param  \Jiwa\Model\PurchaseInvoicePATCHRequest $body (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function purchaseInvoicePATCHRequestPurchaseInvoiceIDUpdateRequest($accept, $purchase_invoice_id, $jiwa_stateful = null, $creditor_id = null, $creditor_account_no = null, $creditor_name = null, $last_saved_date_time = null, $invoice_no = null, $invoice_date = null, $status = null, $freight = null, $duty = null, $insurance = null, $tax_total = null, $freight_tax_id = null, $freight_tax_rate = null, $freight_tax_amount = null, $duty_tax_id = null, $duty_tax_rate = null, $duty_tax_amount = null, $insurance_tax_id = null, $insurance_tax_rate = null, $insurance_tax_amount = null, $lines = null, $goods_received_notes = null, $total_gross = null, $total_net = null, $total_fx = null, $freight_inc = null, $duty_inc = null, $insurance_inc = null, $home_decimal_places = null, $fx_decimal_places = null, $tax_adjustment = null, $due_date = null, $currency_id = null, $total_net_on_inventory_receivals = null, $custom_field_values = null, $notes = null, $documents = null, $logical_warehouse_id = null, $logical_warehouse_description = null, $physical_warehouse_id = null, $physical_warehouse_description = null, $body = null)
    {
        // verify the required parameter 'accept' is set
        if ($accept === null || (is_array($accept) && count($accept) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $accept when calling purchaseInvoicePATCHRequestPurchaseInvoiceIDUpdate'
            );
        }
        // verify the required parameter 'purchase_invoice_id' is set
        if ($purchase_invoice_id === null || (is_array($purchase_invoice_id) && count($purchase_invoice_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $purchase_invoice_id when calling purchaseInvoicePATCHRequestPurchaseInvoiceIDUpdate'
            );
        }

        $resourcePath = '/PurchaseInvoices/{PurchaseInvoiceID}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        if ($creditor_id !== null) {
            $queryParams['CreditorID'] = ObjectSerializer::toQueryValue($creditor_id);
        }
        // query params
        if ($creditor_account_no !== null) {
            $queryParams['CreditorAccountNo'] = ObjectSerializer::toQueryValue($creditor_account_no);
        }
        // query params
        if ($creditor_name !== null) {
            $queryParams['CreditorName'] = ObjectSerializer::toQueryValue($creditor_name);
        }
        // query params
        if ($last_saved_date_time !== null) {
            $queryParams['LastSavedDateTime'] = ObjectSerializer::toQueryValue($last_saved_date_time);
        }
        // query params
        if ($invoice_no !== null) {
            $queryParams['InvoiceNo'] = ObjectSerializer::toQueryValue($invoice_no);
        }
        // query params
        if ($invoice_date !== null) {
            $queryParams['InvoiceDate'] = ObjectSerializer::toQueryValue($invoice_date);
        }
        // query params
        if ($status !== null) {
            $queryParams['Status'] = ObjectSerializer::toQueryValue($status);
        }
        // query params
        if ($freight !== null) {
            $queryParams['Freight'] = ObjectSerializer::toQueryValue($freight);
        }
        // query params
        if ($duty !== null) {
            $queryParams['Duty'] = ObjectSerializer::toQueryValue($duty);
        }
        // query params
        if ($insurance !== null) {
            $queryParams['Insurance'] = ObjectSerializer::toQueryValue($insurance);
        }
        // query params
        if ($tax_total !== null) {
            $queryParams['TaxTotal'] = ObjectSerializer::toQueryValue($tax_total);
        }
        // query params
        if ($freight_tax_id !== null) {
            $queryParams['FreightTaxID'] = ObjectSerializer::toQueryValue($freight_tax_id);
        }
        // query params
        if ($freight_tax_rate !== null) {
            $queryParams['FreightTaxRate'] = ObjectSerializer::toQueryValue($freight_tax_rate);
        }
        // query params
        if ($freight_tax_amount !== null) {
            $queryParams['FreightTaxAmount'] = ObjectSerializer::toQueryValue($freight_tax_amount);
        }
        // query params
        if ($duty_tax_id !== null) {
            $queryParams['DutyTaxID'] = ObjectSerializer::toQueryValue($duty_tax_id);
        }
        // query params
        if ($duty_tax_rate !== null) {
            $queryParams['DutyTaxRate'] = ObjectSerializer::toQueryValue($duty_tax_rate);
        }
        // query params
        if ($duty_tax_amount !== null) {
            $queryParams['DutyTaxAmount'] = ObjectSerializer::toQueryValue($duty_tax_amount);
        }
        // query params
        if ($insurance_tax_id !== null) {
            $queryParams['InsuranceTaxID'] = ObjectSerializer::toQueryValue($insurance_tax_id);
        }
        // query params
        if ($insurance_tax_rate !== null) {
            $queryParams['InsuranceTaxRate'] = ObjectSerializer::toQueryValue($insurance_tax_rate);
        }
        // query params
        if ($insurance_tax_amount !== null) {
            $queryParams['InsuranceTaxAmount'] = ObjectSerializer::toQueryValue($insurance_tax_amount);
        }
        // query params
        if ($lines !== null) {
            $queryParams['Lines'] = ObjectSerializer::toQueryValue($lines);
        }
        // query params
        if ($goods_received_notes !== null) {
            $queryParams['GoodsReceivedNotes'] = ObjectSerializer::toQueryValue($goods_received_notes);
        }
        // query params
        if ($total_gross !== null) {
            $queryParams['TotalGross'] = ObjectSerializer::toQueryValue($total_gross);
        }
        // query params
        if ($total_net !== null) {
            $queryParams['TotalNet'] = ObjectSerializer::toQueryValue($total_net);
        }
        // query params
        if ($total_fx !== null) {
            $queryParams['TotalFx'] = ObjectSerializer::toQueryValue($total_fx);
        }
        // query params
        if ($freight_inc !== null) {
            $queryParams['FreightInc'] = ObjectSerializer::toQueryValue($freight_inc);
        }
        // query params
        if ($duty_inc !== null) {
            $queryParams['DutyInc'] = ObjectSerializer::toQueryValue($duty_inc);
        }
        // query params
        if ($insurance_inc !== null) {
            $queryParams['InsuranceInc'] = ObjectSerializer::toQueryValue($insurance_inc);
        }
        // query params
        if ($home_decimal_places !== null) {
            $queryParams['HomeDecimalPlaces'] = ObjectSerializer::toQueryValue($home_decimal_places);
        }
        // query params
        if ($fx_decimal_places !== null) {
            $queryParams['FXDecimalPlaces'] = ObjectSerializer::toQueryValue($fx_decimal_places);
        }
        // query params
        if ($tax_adjustment !== null) {
            $queryParams['TaxAdjustment'] = ObjectSerializer::toQueryValue($tax_adjustment);
        }
        // query params
        if ($due_date !== null) {
            $queryParams['DueDate'] = ObjectSerializer::toQueryValue($due_date);
        }
        // query params
        if ($currency_id !== null) {
            $queryParams['CurrencyID'] = ObjectSerializer::toQueryValue($currency_id);
        }
        // query params
        if ($total_net_on_inventory_receivals !== null) {
            $queryParams['TotalNetOnInventoryReceivals'] = ObjectSerializer::toQueryValue($total_net_on_inventory_receivals);
        }
        // query params
        if ($custom_field_values !== null) {
            $queryParams['CustomFieldValues'] = ObjectSerializer::toQueryValue($custom_field_values);
        }
        // query params
        if ($notes !== null) {
            $queryParams['Notes'] = ObjectSerializer::toQueryValue($notes);
        }
        // query params
        if ($documents !== null) {
            $queryParams['Documents'] = ObjectSerializer::toQueryValue($documents);
        }
        // query params
        if ($logical_warehouse_id !== null) {
            $queryParams['LogicalWarehouseID'] = ObjectSerializer::toQueryValue($logical_warehouse_id);
        }
        // query params
        if ($logical_warehouse_description !== null) {
            $queryParams['LogicalWarehouseDescription'] = ObjectSerializer::toQueryValue($logical_warehouse_description);
        }
        // query params
        if ($physical_warehouse_id !== null) {
            $queryParams['PhysicalWarehouseID'] = ObjectSerializer::toQueryValue($physical_warehouse_id);
        }
        // query params
        if ($physical_warehouse_description !== null) {
            $queryParams['PhysicalWarehouseDescription'] = ObjectSerializer::toQueryValue($physical_warehouse_description);
        }
        // header params
        if ($accept !== null) {
            $headerParams['Accept'] = ObjectSerializer::toHeaderValue($accept);
        }
        // header params
        if ($jiwa_stateful !== null) {
            $headerParams['jiwa-stateful'] = ObjectSerializer::toHeaderValue($jiwa_stateful);
        }

        // path params
        if ($purchase_invoice_id !== null) {
            $resourcePath = str_replace(
                '{' . 'PurchaseInvoiceID' . '}',
                ObjectSerializer::toPathValue($purchase_invoice_id),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;
        if (isset($body)) {
            $_tempBody = $body;
        }

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json', 'application/xml']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json', 'application/xml'],
                ['application/x-www-form-urlencoded', 'application/json', 'application/xml']
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            
            if($headers['Content-Type'] === 'application/json') {
                // \stdClass has no __toString(), so we should encode it manually
                if ($httpBody instanceof \stdClass) {
                    $httpBody = \GuzzleHttp\json_encode($httpBody);
                }
                // array has no __toString(), so we should encode it manually
                if(is_array($httpBody)) {
                    $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($httpBody));
                }
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\Query::build($formParams);
            }
        }

        // this endpoint requires HTTP basic authentication
        if ($this->config->getUsername() !== null || $this->config->getPassword() !== null) {
            $headers['Authorization'] = 'Basic ' . base64_encode($this->config->getUsername() . ":" . $this->config->getPassword());
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\Query::build($queryParams);
        return new Request(
            'PATCH',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation purchaseInvoicePOSTRequestPost
     *
     * Creates a purchase invoice.
     *
     * @param  string $accept Accept Header (required)
     * @param  bool $jiwa_stateful Stateful indicator (optional)
     * @param  string $creditor_id creditor_id (optional)
     * @param  string $creditor_account_no creditor_account_no (optional)
     * @param  string $creditor_name creditor_name (optional)
     * @param  string $invoice_no invoice_no (optional)
     * @param  \DateTime $invoice_date invoice_date (optional)
     * @param  string $status status (optional)
     * @param  double $freight freight (optional)
     * @param  double $duty duty (optional)
     * @param  double $insurance insurance (optional)
     * @param  double $tax_total tax_total (optional)
     * @param  string $freight_tax_id freight_tax_id (optional)
     * @param  double $freight_tax_rate freight_tax_rate (optional)
     * @param  double $freight_tax_amount freight_tax_amount (optional)
     * @param  string $duty_tax_id duty_tax_id (optional)
     * @param  double $duty_tax_rate duty_tax_rate (optional)
     * @param  double $duty_tax_amount duty_tax_amount (optional)
     * @param  string $insurance_tax_id insurance_tax_id (optional)
     * @param  double $insurance_tax_rate insurance_tax_rate (optional)
     * @param  double $insurance_tax_amount insurance_tax_amount (optional)
     * @param  string $lines lines (optional)
     * @param  string $goods_received_notes goods_received_notes (optional)
     * @param  double $total_gross total_gross (optional)
     * @param  double $total_net total_net (optional)
     * @param  double $total_fx total_fx (optional)
     * @param  double $freight_inc freight_inc (optional)
     * @param  double $duty_inc duty_inc (optional)
     * @param  double $insurance_inc insurance_inc (optional)
     * @param  int $home_decimal_places home_decimal_places (optional)
     * @param  int $fx_decimal_places fx_decimal_places (optional)
     * @param  double $tax_adjustment tax_adjustment (optional)
     * @param  \DateTime $due_date due_date (optional)
     * @param  string $currency_id currency_id (optional)
     * @param  double $total_net_on_inventory_receivals total_net_on_inventory_receivals (optional)
     * @param  string $custom_field_values custom_field_values (optional)
     * @param  string $notes notes (optional)
     * @param  string $documents documents (optional)
     * @param  string $logical_warehouse_id logical_warehouse_id (optional)
     * @param  string $logical_warehouse_description logical_warehouse_description (optional)
     * @param  string $physical_warehouse_id physical_warehouse_id (optional)
     * @param  string $physical_warehouse_description physical_warehouse_description (optional)
     * @param  \Jiwa\Model\PurchaseInvoicePOSTRequest $body body (optional)
     *
     * @throws \Jiwa\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Jiwa\Model\PurchaseInvoice
     */
    public function purchaseInvoicePOSTRequestPost($accept, $jiwa_stateful = null, $creditor_id = null, $creditor_account_no = null, $creditor_name = null, $invoice_no = null, $invoice_date = null, $status = null, $freight = null, $duty = null, $insurance = null, $tax_total = null, $freight_tax_id = null, $freight_tax_rate = null, $freight_tax_amount = null, $duty_tax_id = null, $duty_tax_rate = null, $duty_tax_amount = null, $insurance_tax_id = null, $insurance_tax_rate = null, $insurance_tax_amount = null, $lines = null, $goods_received_notes = null, $total_gross = null, $total_net = null, $total_fx = null, $freight_inc = null, $duty_inc = null, $insurance_inc = null, $home_decimal_places = null, $fx_decimal_places = null, $tax_adjustment = null, $due_date = null, $currency_id = null, $total_net_on_inventory_receivals = null, $custom_field_values = null, $notes = null, $documents = null, $logical_warehouse_id = null, $logical_warehouse_description = null, $physical_warehouse_id = null, $physical_warehouse_description = null, $body = null)
    {
        list($response) = $this->purchaseInvoicePOSTRequestPostWithHttpInfo($accept, $jiwa_stateful, $creditor_id, $creditor_account_no, $creditor_name, $invoice_no, $invoice_date, $status, $freight, $duty, $insurance, $tax_total, $freight_tax_id, $freight_tax_rate, $freight_tax_amount, $duty_tax_id, $duty_tax_rate, $duty_tax_amount, $insurance_tax_id, $insurance_tax_rate, $insurance_tax_amount, $lines, $goods_received_notes, $total_gross, $total_net, $total_fx, $freight_inc, $duty_inc, $insurance_inc, $home_decimal_places, $fx_decimal_places, $tax_adjustment, $due_date, $currency_id, $total_net_on_inventory_receivals, $custom_field_values, $notes, $documents, $logical_warehouse_id, $logical_warehouse_description, $physical_warehouse_id, $physical_warehouse_description, $body);
        return $response;
    }

    /**
     * Operation purchaseInvoicePOSTRequestPostWithHttpInfo
     *
     * Creates a purchase invoice.
     *
     * @param  string $accept Accept Header (required)
     * @param  bool $jiwa_stateful Stateful indicator (optional)
     * @param  string $creditor_id (optional)
     * @param  string $creditor_account_no (optional)
     * @param  string $creditor_name (optional)
     * @param  string $invoice_no (optional)
     * @param  \DateTime $invoice_date (optional)
     * @param  string $status (optional)
     * @param  double $freight (optional)
     * @param  double $duty (optional)
     * @param  double $insurance (optional)
     * @param  double $tax_total (optional)
     * @param  string $freight_tax_id (optional)
     * @param  double $freight_tax_rate (optional)
     * @param  double $freight_tax_amount (optional)
     * @param  string $duty_tax_id (optional)
     * @param  double $duty_tax_rate (optional)
     * @param  double $duty_tax_amount (optional)
     * @param  string $insurance_tax_id (optional)
     * @param  double $insurance_tax_rate (optional)
     * @param  double $insurance_tax_amount (optional)
     * @param  string $lines (optional)
     * @param  string $goods_received_notes (optional)
     * @param  double $total_gross (optional)
     * @param  double $total_net (optional)
     * @param  double $total_fx (optional)
     * @param  double $freight_inc (optional)
     * @param  double $duty_inc (optional)
     * @param  double $insurance_inc (optional)
     * @param  int $home_decimal_places (optional)
     * @param  int $fx_decimal_places (optional)
     * @param  double $tax_adjustment (optional)
     * @param  \DateTime $due_date (optional)
     * @param  string $currency_id (optional)
     * @param  double $total_net_on_inventory_receivals (optional)
     * @param  string $custom_field_values (optional)
     * @param  string $notes (optional)
     * @param  string $documents (optional)
     * @param  string $logical_warehouse_id (optional)
     * @param  string $logical_warehouse_description (optional)
     * @param  string $physical_warehouse_id (optional)
     * @param  string $physical_warehouse_description (optional)
     * @param  \Jiwa\Model\PurchaseInvoicePOSTRequest $body (optional)
     *
     * @throws \Jiwa\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Jiwa\Model\PurchaseInvoice, HTTP status code, HTTP response headers (array of strings)
     */
    public function purchaseInvoicePOSTRequestPostWithHttpInfo($accept, $jiwa_stateful = null, $creditor_id = null, $creditor_account_no = null, $creditor_name = null, $invoice_no = null, $invoice_date = null, $status = null, $freight = null, $duty = null, $insurance = null, $tax_total = null, $freight_tax_id = null, $freight_tax_rate = null, $freight_tax_amount = null, $duty_tax_id = null, $duty_tax_rate = null, $duty_tax_amount = null, $insurance_tax_id = null, $insurance_tax_rate = null, $insurance_tax_amount = null, $lines = null, $goods_received_notes = null, $total_gross = null, $total_net = null, $total_fx = null, $freight_inc = null, $duty_inc = null, $insurance_inc = null, $home_decimal_places = null, $fx_decimal_places = null, $tax_adjustment = null, $due_date = null, $currency_id = null, $total_net_on_inventory_receivals = null, $custom_field_values = null, $notes = null, $documents = null, $logical_warehouse_id = null, $logical_warehouse_description = null, $physical_warehouse_id = null, $physical_warehouse_description = null, $body = null)
    {
        $returnType = '\Jiwa\Model\PurchaseInvoice';
        $request = $this->purchaseInvoicePOSTRequestPostRequest($accept, $jiwa_stateful, $creditor_id, $creditor_account_no, $creditor_name, $invoice_no, $invoice_date, $status, $freight, $duty, $insurance, $tax_total, $freight_tax_id, $freight_tax_rate, $freight_tax_amount, $duty_tax_id, $duty_tax_rate, $duty_tax_amount, $insurance_tax_id, $insurance_tax_rate, $insurance_tax_amount, $lines, $goods_received_notes, $total_gross, $total_net, $total_fx, $freight_inc, $duty_inc, $insurance_inc, $home_decimal_places, $fx_decimal_places, $tax_adjustment, $due_date, $currency_id, $total_net_on_inventory_receivals, $custom_field_values, $notes, $documents, $logical_warehouse_id, $logical_warehouse_description, $physical_warehouse_id, $physical_warehouse_description, $body);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Jiwa\Model\PurchaseInvoice',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 403:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Jiwa\Model\PurchaseInvoice',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 201:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Jiwa\Model\PurchaseInvoice',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 401:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Jiwa\Model\PurchaseInvoice',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation purchaseInvoicePOSTRequestPostAsync
     *
     * Creates a purchase invoice.
     *
     * @param  string $accept Accept Header (required)
     * @param  bool $jiwa_stateful Stateful indicator (optional)
     * @param  string $creditor_id (optional)
     * @param  string $creditor_account_no (optional)
     * @param  string $creditor_name (optional)
     * @param  string $invoice_no (optional)
     * @param  \DateTime $invoice_date (optional)
     * @param  string $status (optional)
     * @param  double $freight (optional)
     * @param  double $duty (optional)
     * @param  double $insurance (optional)
     * @param  double $tax_total (optional)
     * @param  string $freight_tax_id (optional)
     * @param  double $freight_tax_rate (optional)
     * @param  double $freight_tax_amount (optional)
     * @param  string $duty_tax_id (optional)
     * @param  double $duty_tax_rate (optional)
     * @param  double $duty_tax_amount (optional)
     * @param  string $insurance_tax_id (optional)
     * @param  double $insurance_tax_rate (optional)
     * @param  double $insurance_tax_amount (optional)
     * @param  string $lines (optional)
     * @param  string $goods_received_notes (optional)
     * @param  double $total_gross (optional)
     * @param  double $total_net (optional)
     * @param  double $total_fx (optional)
     * @param  double $freight_inc (optional)
     * @param  double $duty_inc (optional)
     * @param  double $insurance_inc (optional)
     * @param  int $home_decimal_places (optional)
     * @param  int $fx_decimal_places (optional)
     * @param  double $tax_adjustment (optional)
     * @param  \DateTime $due_date (optional)
     * @param  string $currency_id (optional)
     * @param  double $total_net_on_inventory_receivals (optional)
     * @param  string $custom_field_values (optional)
     * @param  string $notes (optional)
     * @param  string $documents (optional)
     * @param  string $logical_warehouse_id (optional)
     * @param  string $logical_warehouse_description (optional)
     * @param  string $physical_warehouse_id (optional)
     * @param  string $physical_warehouse_description (optional)
     * @param  \Jiwa\Model\PurchaseInvoicePOSTRequest $body (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function purchaseInvoicePOSTRequestPostAsync($accept, $jiwa_stateful = null, $creditor_id = null, $creditor_account_no = null, $creditor_name = null, $invoice_no = null, $invoice_date = null, $status = null, $freight = null, $duty = null, $insurance = null, $tax_total = null, $freight_tax_id = null, $freight_tax_rate = null, $freight_tax_amount = null, $duty_tax_id = null, $duty_tax_rate = null, $duty_tax_amount = null, $insurance_tax_id = null, $insurance_tax_rate = null, $insurance_tax_amount = null, $lines = null, $goods_received_notes = null, $total_gross = null, $total_net = null, $total_fx = null, $freight_inc = null, $duty_inc = null, $insurance_inc = null, $home_decimal_places = null, $fx_decimal_places = null, $tax_adjustment = null, $due_date = null, $currency_id = null, $total_net_on_inventory_receivals = null, $custom_field_values = null, $notes = null, $documents = null, $logical_warehouse_id = null, $logical_warehouse_description = null, $physical_warehouse_id = null, $physical_warehouse_description = null, $body = null)
    {
        return $this->purchaseInvoicePOSTRequestPostAsyncWithHttpInfo($accept, $jiwa_stateful, $creditor_id, $creditor_account_no, $creditor_name, $invoice_no, $invoice_date, $status, $freight, $duty, $insurance, $tax_total, $freight_tax_id, $freight_tax_rate, $freight_tax_amount, $duty_tax_id, $duty_tax_rate, $duty_tax_amount, $insurance_tax_id, $insurance_tax_rate, $insurance_tax_amount, $lines, $goods_received_notes, $total_gross, $total_net, $total_fx, $freight_inc, $duty_inc, $insurance_inc, $home_decimal_places, $fx_decimal_places, $tax_adjustment, $due_date, $currency_id, $total_net_on_inventory_receivals, $custom_field_values, $notes, $documents, $logical_warehouse_id, $logical_warehouse_description, $physical_warehouse_id, $physical_warehouse_description, $body)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation purchaseInvoicePOSTRequestPostAsyncWithHttpInfo
     *
     * Creates a purchase invoice.
     *
     * @param  string $accept Accept Header (required)
     * @param  bool $jiwa_stateful Stateful indicator (optional)
     * @param  string $creditor_id (optional)
     * @param  string $creditor_account_no (optional)
     * @param  string $creditor_name (optional)
     * @param  string $invoice_no (optional)
     * @param  \DateTime $invoice_date (optional)
     * @param  string $status (optional)
     * @param  double $freight (optional)
     * @param  double $duty (optional)
     * @param  double $insurance (optional)
     * @param  double $tax_total (optional)
     * @param  string $freight_tax_id (optional)
     * @param  double $freight_tax_rate (optional)
     * @param  double $freight_tax_amount (optional)
     * @param  string $duty_tax_id (optional)
     * @param  double $duty_tax_rate (optional)
     * @param  double $duty_tax_amount (optional)
     * @param  string $insurance_tax_id (optional)
     * @param  double $insurance_tax_rate (optional)
     * @param  double $insurance_tax_amount (optional)
     * @param  string $lines (optional)
     * @param  string $goods_received_notes (optional)
     * @param  double $total_gross (optional)
     * @param  double $total_net (optional)
     * @param  double $total_fx (optional)
     * @param  double $freight_inc (optional)
     * @param  double $duty_inc (optional)
     * @param  double $insurance_inc (optional)
     * @param  int $home_decimal_places (optional)
     * @param  int $fx_decimal_places (optional)
     * @param  double $tax_adjustment (optional)
     * @param  \DateTime $due_date (optional)
     * @param  string $currency_id (optional)
     * @param  double $total_net_on_inventory_receivals (optional)
     * @param  string $custom_field_values (optional)
     * @param  string $notes (optional)
     * @param  string $documents (optional)
     * @param  string $logical_warehouse_id (optional)
     * @param  string $logical_warehouse_description (optional)
     * @param  string $physical_warehouse_id (optional)
     * @param  string $physical_warehouse_description (optional)
     * @param  \Jiwa\Model\PurchaseInvoicePOSTRequest $body (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function purchaseInvoicePOSTRequestPostAsyncWithHttpInfo($accept, $jiwa_stateful = null, $creditor_id = null, $creditor_account_no = null, $creditor_name = null, $invoice_no = null, $invoice_date = null, $status = null, $freight = null, $duty = null, $insurance = null, $tax_total = null, $freight_tax_id = null, $freight_tax_rate = null, $freight_tax_amount = null, $duty_tax_id = null, $duty_tax_rate = null, $duty_tax_amount = null, $insurance_tax_id = null, $insurance_tax_rate = null, $insurance_tax_amount = null, $lines = null, $goods_received_notes = null, $total_gross = null, $total_net = null, $total_fx = null, $freight_inc = null, $duty_inc = null, $insurance_inc = null, $home_decimal_places = null, $fx_decimal_places = null, $tax_adjustment = null, $due_date = null, $currency_id = null, $total_net_on_inventory_receivals = null, $custom_field_values = null, $notes = null, $documents = null, $logical_warehouse_id = null, $logical_warehouse_description = null, $physical_warehouse_id = null, $physical_warehouse_description = null, $body = null)
    {
        $returnType = '\Jiwa\Model\PurchaseInvoice';
        $request = $this->purchaseInvoicePOSTRequestPostRequest($accept, $jiwa_stateful, $creditor_id, $creditor_account_no, $creditor_name, $invoice_no, $invoice_date, $status, $freight, $duty, $insurance, $tax_total, $freight_tax_id, $freight_tax_rate, $freight_tax_amount, $duty_tax_id, $duty_tax_rate, $duty_tax_amount, $insurance_tax_id, $insurance_tax_rate, $insurance_tax_amount, $lines, $goods_received_notes, $total_gross, $total_net, $total_fx, $freight_inc, $duty_inc, $insurance_inc, $home_decimal_places, $fx_decimal_places, $tax_adjustment, $due_date, $currency_id, $total_net_on_inventory_receivals, $custom_field_values, $notes, $documents, $logical_warehouse_id, $logical_warehouse_description, $physical_warehouse_id, $physical_warehouse_description, $body);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'purchaseInvoicePOSTRequestPost'
     *
     * @param  string $accept Accept Header (required)
     * @param  bool $jiwa_stateful Stateful indicator (optional)
     * @param  string $creditor_id (optional)
     * @param  string $creditor_account_no (optional)
     * @param  string $creditor_name (optional)
     * @param  string $invoice_no (optional)
     * @param  \DateTime $invoice_date (optional)
     * @param  string $status (optional)
     * @param  double $freight (optional)
     * @param  double $duty (optional)
     * @param  double $insurance (optional)
     * @param  double $tax_total (optional)
     * @param  string $freight_tax_id (optional)
     * @param  double $freight_tax_rate (optional)
     * @param  double $freight_tax_amount (optional)
     * @param  string $duty_tax_id (optional)
     * @param  double $duty_tax_rate (optional)
     * @param  double $duty_tax_amount (optional)
     * @param  string $insurance_tax_id (optional)
     * @param  double $insurance_tax_rate (optional)
     * @param  double $insurance_tax_amount (optional)
     * @param  string $lines (optional)
     * @param  string $goods_received_notes (optional)
     * @param  double $total_gross (optional)
     * @param  double $total_net (optional)
     * @param  double $total_fx (optional)
     * @param  double $freight_inc (optional)
     * @param  double $duty_inc (optional)
     * @param  double $insurance_inc (optional)
     * @param  int $home_decimal_places (optional)
     * @param  int $fx_decimal_places (optional)
     * @param  double $tax_adjustment (optional)
     * @param  \DateTime $due_date (optional)
     * @param  string $currency_id (optional)
     * @param  double $total_net_on_inventory_receivals (optional)
     * @param  string $custom_field_values (optional)
     * @param  string $notes (optional)
     * @param  string $documents (optional)
     * @param  string $logical_warehouse_id (optional)
     * @param  string $logical_warehouse_description (optional)
     * @param  string $physical_warehouse_id (optional)
     * @param  string $physical_warehouse_description (optional)
     * @param  \Jiwa\Model\PurchaseInvoicePOSTRequest $body (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function purchaseInvoicePOSTRequestPostRequest($accept, $jiwa_stateful = null, $creditor_id = null, $creditor_account_no = null, $creditor_name = null, $invoice_no = null, $invoice_date = null, $status = null, $freight = null, $duty = null, $insurance = null, $tax_total = null, $freight_tax_id = null, $freight_tax_rate = null, $freight_tax_amount = null, $duty_tax_id = null, $duty_tax_rate = null, $duty_tax_amount = null, $insurance_tax_id = null, $insurance_tax_rate = null, $insurance_tax_amount = null, $lines = null, $goods_received_notes = null, $total_gross = null, $total_net = null, $total_fx = null, $freight_inc = null, $duty_inc = null, $insurance_inc = null, $home_decimal_places = null, $fx_decimal_places = null, $tax_adjustment = null, $due_date = null, $currency_id = null, $total_net_on_inventory_receivals = null, $custom_field_values = null, $notes = null, $documents = null, $logical_warehouse_id = null, $logical_warehouse_description = null, $physical_warehouse_id = null, $physical_warehouse_description = null, $body = null)
    {
        // verify the required parameter 'accept' is set
        if ($accept === null || (is_array($accept) && count($accept) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $accept when calling purchaseInvoicePOSTRequestPost'
            );
        }

        $resourcePath = '/PurchaseInvoices';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        if ($creditor_id !== null) {
            $queryParams['CreditorID'] = ObjectSerializer::toQueryValue($creditor_id);
        }
        // query params
        if ($creditor_account_no !== null) {
            $queryParams['CreditorAccountNo'] = ObjectSerializer::toQueryValue($creditor_account_no);
        }
        // query params
        if ($creditor_name !== null) {
            $queryParams['CreditorName'] = ObjectSerializer::toQueryValue($creditor_name);
        }
        // query params
        if ($invoice_no !== null) {
            $queryParams['InvoiceNo'] = ObjectSerializer::toQueryValue($invoice_no);
        }
        // query params
        if ($invoice_date !== null) {
            $queryParams['InvoiceDate'] = ObjectSerializer::toQueryValue($invoice_date);
        }
        // query params
        if ($status !== null) {
            $queryParams['Status'] = ObjectSerializer::toQueryValue($status);
        }
        // query params
        if ($freight !== null) {
            $queryParams['Freight'] = ObjectSerializer::toQueryValue($freight);
        }
        // query params
        if ($duty !== null) {
            $queryParams['Duty'] = ObjectSerializer::toQueryValue($duty);
        }
        // query params
        if ($insurance !== null) {
            $queryParams['Insurance'] = ObjectSerializer::toQueryValue($insurance);
        }
        // query params
        if ($tax_total !== null) {
            $queryParams['TaxTotal'] = ObjectSerializer::toQueryValue($tax_total);
        }
        // query params
        if ($freight_tax_id !== null) {
            $queryParams['FreightTaxID'] = ObjectSerializer::toQueryValue($freight_tax_id);
        }
        // query params
        if ($freight_tax_rate !== null) {
            $queryParams['FreightTaxRate'] = ObjectSerializer::toQueryValue($freight_tax_rate);
        }
        // query params
        if ($freight_tax_amount !== null) {
            $queryParams['FreightTaxAmount'] = ObjectSerializer::toQueryValue($freight_tax_amount);
        }
        // query params
        if ($duty_tax_id !== null) {
            $queryParams['DutyTaxID'] = ObjectSerializer::toQueryValue($duty_tax_id);
        }
        // query params
        if ($duty_tax_rate !== null) {
            $queryParams['DutyTaxRate'] = ObjectSerializer::toQueryValue($duty_tax_rate);
        }
        // query params
        if ($duty_tax_amount !== null) {
            $queryParams['DutyTaxAmount'] = ObjectSerializer::toQueryValue($duty_tax_amount);
        }
        // query params
        if ($insurance_tax_id !== null) {
            $queryParams['InsuranceTaxID'] = ObjectSerializer::toQueryValue($insurance_tax_id);
        }
        // query params
        if ($insurance_tax_rate !== null) {
            $queryParams['InsuranceTaxRate'] = ObjectSerializer::toQueryValue($insurance_tax_rate);
        }
        // query params
        if ($insurance_tax_amount !== null) {
            $queryParams['InsuranceTaxAmount'] = ObjectSerializer::toQueryValue($insurance_tax_amount);
        }
        // query params
        if ($lines !== null) {
            $queryParams['Lines'] = ObjectSerializer::toQueryValue($lines);
        }
        // query params
        if ($goods_received_notes !== null) {
            $queryParams['GoodsReceivedNotes'] = ObjectSerializer::toQueryValue($goods_received_notes);
        }
        // query params
        if ($total_gross !== null) {
            $queryParams['TotalGross'] = ObjectSerializer::toQueryValue($total_gross);
        }
        // query params
        if ($total_net !== null) {
            $queryParams['TotalNet'] = ObjectSerializer::toQueryValue($total_net);
        }
        // query params
        if ($total_fx !== null) {
            $queryParams['TotalFx'] = ObjectSerializer::toQueryValue($total_fx);
        }
        // query params
        if ($freight_inc !== null) {
            $queryParams['FreightInc'] = ObjectSerializer::toQueryValue($freight_inc);
        }
        // query params
        if ($duty_inc !== null) {
            $queryParams['DutyInc'] = ObjectSerializer::toQueryValue($duty_inc);
        }
        // query params
        if ($insurance_inc !== null) {
            $queryParams['InsuranceInc'] = ObjectSerializer::toQueryValue($insurance_inc);
        }
        // query params
        if ($home_decimal_places !== null) {
            $queryParams['HomeDecimalPlaces'] = ObjectSerializer::toQueryValue($home_decimal_places);
        }
        // query params
        if ($fx_decimal_places !== null) {
            $queryParams['FXDecimalPlaces'] = ObjectSerializer::toQueryValue($fx_decimal_places);
        }
        // query params
        if ($tax_adjustment !== null) {
            $queryParams['TaxAdjustment'] = ObjectSerializer::toQueryValue($tax_adjustment);
        }
        // query params
        if ($due_date !== null) {
            $queryParams['DueDate'] = ObjectSerializer::toQueryValue($due_date);
        }
        // query params
        if ($currency_id !== null) {
            $queryParams['CurrencyID'] = ObjectSerializer::toQueryValue($currency_id);
        }
        // query params
        if ($total_net_on_inventory_receivals !== null) {
            $queryParams['TotalNetOnInventoryReceivals'] = ObjectSerializer::toQueryValue($total_net_on_inventory_receivals);
        }
        // query params
        if ($custom_field_values !== null) {
            $queryParams['CustomFieldValues'] = ObjectSerializer::toQueryValue($custom_field_values);
        }
        // query params
        if ($notes !== null) {
            $queryParams['Notes'] = ObjectSerializer::toQueryValue($notes);
        }
        // query params
        if ($documents !== null) {
            $queryParams['Documents'] = ObjectSerializer::toQueryValue($documents);
        }
        // query params
        if ($logical_warehouse_id !== null) {
            $queryParams['LogicalWarehouseID'] = ObjectSerializer::toQueryValue($logical_warehouse_id);
        }
        // query params
        if ($logical_warehouse_description !== null) {
            $queryParams['LogicalWarehouseDescription'] = ObjectSerializer::toQueryValue($logical_warehouse_description);
        }
        // query params
        if ($physical_warehouse_id !== null) {
            $queryParams['PhysicalWarehouseID'] = ObjectSerializer::toQueryValue($physical_warehouse_id);
        }
        // query params
        if ($physical_warehouse_description !== null) {
            $queryParams['PhysicalWarehouseDescription'] = ObjectSerializer::toQueryValue($physical_warehouse_description);
        }
        // header params
        if ($accept !== null) {
            $headerParams['Accept'] = ObjectSerializer::toHeaderValue($accept);
        }
        // header params
        if ($jiwa_stateful !== null) {
            $headerParams['jiwa-stateful'] = ObjectSerializer::toHeaderValue($jiwa_stateful);
        }


        // body params
        $_tempBody = null;
        if (isset($body)) {
            $_tempBody = $body;
        }

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json', 'application/xml']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json', 'application/xml'],
                ['application/x-www-form-urlencoded', 'application/json', 'application/xml']
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            
            if($headers['Content-Type'] === 'application/json') {
                // \stdClass has no __toString(), so we should encode it manually
                if ($httpBody instanceof \stdClass) {
                    $httpBody = \GuzzleHttp\json_encode($httpBody);
                }
                // array has no __toString(), so we should encode it manually
                if(is_array($httpBody)) {
                    $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($httpBody));
                }
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\Query::build($formParams);
            }
        }

        // this endpoint requires HTTP basic authentication
        if ($this->config->getUsername() !== null || $this->config->getPassword() !== null) {
            $headers['Authorization'] = 'Basic ' . base64_encode($this->config->getUsername() . ":" . $this->config->getPassword());
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\Query::build($queryParams);
        return new Request(
            'POST',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation purchaseInvoiceSAVERequestSaveGet
     *
     * Saves a stateful stateful purchase invoice.
     *
     * @param  string $accept Accept Header (required)
     * @param  bool $jiwa_stateful Stateful indicator (optional)
     * @param  string $purchase_invoice_id purchase_invoice_id (optional)
     *
     * @throws \Jiwa\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Jiwa\Model\PurchaseInvoice
     */
    public function purchaseInvoiceSAVERequestSaveGet($accept, $jiwa_stateful = null, $purchase_invoice_id = null)
    {
        list($response) = $this->purchaseInvoiceSAVERequestSaveGetWithHttpInfo($accept, $jiwa_stateful, $purchase_invoice_id);
        return $response;
    }

    /**
     * Operation purchaseInvoiceSAVERequestSaveGetWithHttpInfo
     *
     * Saves a stateful stateful purchase invoice.
     *
     * @param  string $accept Accept Header (required)
     * @param  bool $jiwa_stateful Stateful indicator (optional)
     * @param  string $purchase_invoice_id (optional)
     *
     * @throws \Jiwa\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Jiwa\Model\PurchaseInvoice, HTTP status code, HTTP response headers (array of strings)
     */
    public function purchaseInvoiceSAVERequestSaveGetWithHttpInfo($accept, $jiwa_stateful = null, $purchase_invoice_id = null)
    {
        $returnType = '\Jiwa\Model\PurchaseInvoice';
        $request = $this->purchaseInvoiceSAVERequestSaveGetRequest($accept, $jiwa_stateful, $purchase_invoice_id);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Jiwa\Model\PurchaseInvoice',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 401:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Jiwa\Model\PurchaseInvoice',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 403:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Jiwa\Model\PurchaseInvoice',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 404:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Jiwa\Model\PurchaseInvoice',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation purchaseInvoiceSAVERequestSaveGetAsync
     *
     * Saves a stateful stateful purchase invoice.
     *
     * @param  string $accept Accept Header (required)
     * @param  bool $jiwa_stateful Stateful indicator (optional)
     * @param  string $purchase_invoice_id (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function purchaseInvoiceSAVERequestSaveGetAsync($accept, $jiwa_stateful = null, $purchase_invoice_id = null)
    {
        return $this->purchaseInvoiceSAVERequestSaveGetAsyncWithHttpInfo($accept, $jiwa_stateful, $purchase_invoice_id)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation purchaseInvoiceSAVERequestSaveGetAsyncWithHttpInfo
     *
     * Saves a stateful stateful purchase invoice.
     *
     * @param  string $accept Accept Header (required)
     * @param  bool $jiwa_stateful Stateful indicator (optional)
     * @param  string $purchase_invoice_id (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function purchaseInvoiceSAVERequestSaveGetAsyncWithHttpInfo($accept, $jiwa_stateful = null, $purchase_invoice_id = null)
    {
        $returnType = '\Jiwa\Model\PurchaseInvoice';
        $request = $this->purchaseInvoiceSAVERequestSaveGetRequest($accept, $jiwa_stateful, $purchase_invoice_id);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'purchaseInvoiceSAVERequestSaveGet'
     *
     * @param  string $accept Accept Header (required)
     * @param  bool $jiwa_stateful Stateful indicator (optional)
     * @param  string $purchase_invoice_id (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function purchaseInvoiceSAVERequestSaveGetRequest($accept, $jiwa_stateful = null, $purchase_invoice_id = null)
    {
        // verify the required parameter 'accept' is set
        if ($accept === null || (is_array($accept) && count($accept) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $accept when calling purchaseInvoiceSAVERequestSaveGet'
            );
        }

        $resourcePath = '/PurchaseInvoices/Save';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        if ($purchase_invoice_id !== null) {
            $queryParams['PurchaseInvoiceID'] = ObjectSerializer::toQueryValue($purchase_invoice_id);
        }
        // header params
        if ($accept !== null) {
            $headerParams['Accept'] = ObjectSerializer::toHeaderValue($accept);
        }
        // header params
        if ($jiwa_stateful !== null) {
            $headerParams['jiwa-stateful'] = ObjectSerializer::toHeaderValue($jiwa_stateful);
        }


        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json', 'application/xml']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json', 'application/xml'],
                ['application/x-www-form-urlencoded', 'application/json', 'application/xml']
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            
            if($headers['Content-Type'] === 'application/json') {
                // \stdClass has no __toString(), so we should encode it manually
                if ($httpBody instanceof \stdClass) {
                    $httpBody = \GuzzleHttp\json_encode($httpBody);
                }
                // array has no __toString(), so we should encode it manually
                if(is_array($httpBody)) {
                    $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($httpBody));
                }
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\Query::build($formParams);
            }
        }

        // this endpoint requires HTTP basic authentication
        if ($this->config->getUsername() !== null || $this->config->getPassword() !== null) {
            $headers['Authorization'] = 'Basic ' . base64_encode($this->config->getUsername() . ":" . $this->config->getPassword());
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\Query::build($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Create http client option
     *
     * @throws \RuntimeException on file opening failure
     * @return array of http client options
     */
    protected function createHttpClientOption()
    {
        $options = [];
        if ($this->config->getDebug()) {
            $options[RequestOptions::DEBUG] = fopen($this->config->getDebugFile(), 'a');
            if (!$options[RequestOptions::DEBUG]) {
                throw new \RuntimeException('Failed to open the debug file: ' . $this->config->getDebugFile());
            }
        }

        return $options;
    }
}

<?php
/**
 * StockTransfersApi
 * PHP version 5
 *
 * @category Class
 * @package  Jiwa
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * JiwaAPI
 *
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: 1.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 * Swagger Codegen version: 2.4.28-SNAPSHOT
 */

/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Jiwa\Api;

use GuzzleHttp\Client;
use GuzzleHttp\ClientInterface;
use GuzzleHttp\Exception\RequestException;
use GuzzleHttp\Psr7\MultipartStream;
use GuzzleHttp\Psr7\Request;
use GuzzleHttp\RequestOptions;
use Jiwa\ApiException;
use Jiwa\Configuration;
use Jiwa\HeaderSelector;
use Jiwa\ObjectSerializer;

/**
 * StockTransfersApi Class Doc Comment
 *
 * @category Class
 * @package  Jiwa
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class StockTransfersApi
{
    /**
     * @var ClientInterface
     */
    protected $client;

    /**
     * @var Configuration
     */
    protected $config;

    /**
     * @var HeaderSelector
     */
    protected $headerSelector;

    /**
     * @param ClientInterface $client
     * @param Configuration   $config
     * @param HeaderSelector  $selector
     */
    public function __construct(
        ClientInterface $client = null,
        Configuration $config = null,
        HeaderSelector $selector = null
    ) {
        $this->client = $client ?: new Client();
        $this->config = $config ?: new Configuration();
        $this->headerSelector = $selector ?: new HeaderSelector();
    }

    /**
     * @return Configuration
     */
    public function getConfig()
    {
        return $this->config;
    }

    /**
     * Operation stockTransferDELETERequestTransferIDDelete
     *
     * Deletes a stock transfer.
     *
     * @param  string $accept Accept Header (required)
     * @param  string $transfer_id transfer_id (required)
     * @param  bool $jiwa_stateful Stateful indicator (optional)
     *
     * @throws \Jiwa\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Jiwa\Model\Object
     */
    public function stockTransferDELETERequestTransferIDDelete($accept, $transfer_id, $jiwa_stateful = null)
    {
        list($response) = $this->stockTransferDELETERequestTransferIDDeleteWithHttpInfo($accept, $transfer_id, $jiwa_stateful);
        return $response;
    }

    /**
     * Operation stockTransferDELETERequestTransferIDDeleteWithHttpInfo
     *
     * Deletes a stock transfer.
     *
     * @param  string $accept Accept Header (required)
     * @param  string $transfer_id (required)
     * @param  bool $jiwa_stateful Stateful indicator (optional)
     *
     * @throws \Jiwa\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Jiwa\Model\Object, HTTP status code, HTTP response headers (array of strings)
     */
    public function stockTransferDELETERequestTransferIDDeleteWithHttpInfo($accept, $transfer_id, $jiwa_stateful = null)
    {
        $returnType = '\Jiwa\Model\Object';
        $request = $this->stockTransferDELETERequestTransferIDDeleteRequest($accept, $transfer_id, $jiwa_stateful);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Jiwa\Model\Object',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 204:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Jiwa\Model\Object',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 403:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Jiwa\Model\Object',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 404:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Jiwa\Model\Object',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 401:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Jiwa\Model\Object',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation stockTransferDELETERequestTransferIDDeleteAsync
     *
     * Deletes a stock transfer.
     *
     * @param  string $accept Accept Header (required)
     * @param  string $transfer_id (required)
     * @param  bool $jiwa_stateful Stateful indicator (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function stockTransferDELETERequestTransferIDDeleteAsync($accept, $transfer_id, $jiwa_stateful = null)
    {
        return $this->stockTransferDELETERequestTransferIDDeleteAsyncWithHttpInfo($accept, $transfer_id, $jiwa_stateful)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation stockTransferDELETERequestTransferIDDeleteAsyncWithHttpInfo
     *
     * Deletes a stock transfer.
     *
     * @param  string $accept Accept Header (required)
     * @param  string $transfer_id (required)
     * @param  bool $jiwa_stateful Stateful indicator (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function stockTransferDELETERequestTransferIDDeleteAsyncWithHttpInfo($accept, $transfer_id, $jiwa_stateful = null)
    {
        $returnType = '\Jiwa\Model\Object';
        $request = $this->stockTransferDELETERequestTransferIDDeleteRequest($accept, $transfer_id, $jiwa_stateful);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'stockTransferDELETERequestTransferIDDelete'
     *
     * @param  string $accept Accept Header (required)
     * @param  string $transfer_id (required)
     * @param  bool $jiwa_stateful Stateful indicator (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function stockTransferDELETERequestTransferIDDeleteRequest($accept, $transfer_id, $jiwa_stateful = null)
    {
        // verify the required parameter 'accept' is set
        if ($accept === null || (is_array($accept) && count($accept) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $accept when calling stockTransferDELETERequestTransferIDDelete'
            );
        }
        // verify the required parameter 'transfer_id' is set
        if ($transfer_id === null || (is_array($transfer_id) && count($transfer_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $transfer_id when calling stockTransferDELETERequestTransferIDDelete'
            );
        }

        $resourcePath = '/StockTransfers/{TransferID}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // header params
        if ($accept !== null) {
            $headerParams['Accept'] = ObjectSerializer::toHeaderValue($accept);
        }
        // header params
        if ($jiwa_stateful !== null) {
            $headerParams['jiwa-stateful'] = ObjectSerializer::toHeaderValue($jiwa_stateful);
        }

        // path params
        if ($transfer_id !== null) {
            $resourcePath = str_replace(
                '{' . 'TransferID' . '}',
                ObjectSerializer::toPathValue($transfer_id),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json', 'application/xml']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json', 'application/xml'],
                ['application/x-www-form-urlencoded', 'application/json', 'application/xml']
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            
            if($headers['Content-Type'] === 'application/json') {
                // \stdClass has no __toString(), so we should encode it manually
                if ($httpBody instanceof \stdClass) {
                    $httpBody = \GuzzleHttp\json_encode($httpBody);
                }
                // array has no __toString(), so we should encode it manually
                if(is_array($httpBody)) {
                    $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($httpBody));
                }
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\Query::build($formParams);
            }
        }

        // this endpoint requires HTTP basic authentication
        if ($this->config->getUsername() !== null || $this->config->getPassword() !== null) {
            $headers['Authorization'] = 'Basic ' . base64_encode($this->config->getUsername() . ":" . $this->config->getPassword());
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\Query::build($queryParams);
        return new Request(
            'DELETE',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation stockTransferGETRequestTransferIDGet
     *
     * Retrieves a stock transfer.
     *
     * @param  string $accept Accept Header (required)
     * @param  string $transfer_id transfer_id (required)
     * @param  bool $jiwa_stateful Stateful indicator (optional)
     *
     * @throws \Jiwa\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Jiwa\Model\StockTransfer
     */
    public function stockTransferGETRequestTransferIDGet($accept, $transfer_id, $jiwa_stateful = null)
    {
        list($response) = $this->stockTransferGETRequestTransferIDGetWithHttpInfo($accept, $transfer_id, $jiwa_stateful);
        return $response;
    }

    /**
     * Operation stockTransferGETRequestTransferIDGetWithHttpInfo
     *
     * Retrieves a stock transfer.
     *
     * @param  string $accept Accept Header (required)
     * @param  string $transfer_id (required)
     * @param  bool $jiwa_stateful Stateful indicator (optional)
     *
     * @throws \Jiwa\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Jiwa\Model\StockTransfer, HTTP status code, HTTP response headers (array of strings)
     */
    public function stockTransferGETRequestTransferIDGetWithHttpInfo($accept, $transfer_id, $jiwa_stateful = null)
    {
        $returnType = '\Jiwa\Model\StockTransfer';
        $request = $this->stockTransferGETRequestTransferIDGetRequest($accept, $transfer_id, $jiwa_stateful);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Jiwa\Model\StockTransfer',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 403:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Jiwa\Model\StockTransfer',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 401:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Jiwa\Model\StockTransfer',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 404:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Jiwa\Model\StockTransfer',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation stockTransferGETRequestTransferIDGetAsync
     *
     * Retrieves a stock transfer.
     *
     * @param  string $accept Accept Header (required)
     * @param  string $transfer_id (required)
     * @param  bool $jiwa_stateful Stateful indicator (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function stockTransferGETRequestTransferIDGetAsync($accept, $transfer_id, $jiwa_stateful = null)
    {
        return $this->stockTransferGETRequestTransferIDGetAsyncWithHttpInfo($accept, $transfer_id, $jiwa_stateful)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation stockTransferGETRequestTransferIDGetAsyncWithHttpInfo
     *
     * Retrieves a stock transfer.
     *
     * @param  string $accept Accept Header (required)
     * @param  string $transfer_id (required)
     * @param  bool $jiwa_stateful Stateful indicator (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function stockTransferGETRequestTransferIDGetAsyncWithHttpInfo($accept, $transfer_id, $jiwa_stateful = null)
    {
        $returnType = '\Jiwa\Model\StockTransfer';
        $request = $this->stockTransferGETRequestTransferIDGetRequest($accept, $transfer_id, $jiwa_stateful);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'stockTransferGETRequestTransferIDGet'
     *
     * @param  string $accept Accept Header (required)
     * @param  string $transfer_id (required)
     * @param  bool $jiwa_stateful Stateful indicator (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function stockTransferGETRequestTransferIDGetRequest($accept, $transfer_id, $jiwa_stateful = null)
    {
        // verify the required parameter 'accept' is set
        if ($accept === null || (is_array($accept) && count($accept) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $accept when calling stockTransferGETRequestTransferIDGet'
            );
        }
        // verify the required parameter 'transfer_id' is set
        if ($transfer_id === null || (is_array($transfer_id) && count($transfer_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $transfer_id when calling stockTransferGETRequestTransferIDGet'
            );
        }

        $resourcePath = '/StockTransfers/{TransferID}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // header params
        if ($accept !== null) {
            $headerParams['Accept'] = ObjectSerializer::toHeaderValue($accept);
        }
        // header params
        if ($jiwa_stateful !== null) {
            $headerParams['jiwa-stateful'] = ObjectSerializer::toHeaderValue($jiwa_stateful);
        }

        // path params
        if ($transfer_id !== null) {
            $resourcePath = str_replace(
                '{' . 'TransferID' . '}',
                ObjectSerializer::toPathValue($transfer_id),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json', 'application/xml']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json', 'application/xml'],
                ['application/x-www-form-urlencoded', 'application/json', 'application/xml']
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            
            if($headers['Content-Type'] === 'application/json') {
                // \stdClass has no __toString(), so we should encode it manually
                if ($httpBody instanceof \stdClass) {
                    $httpBody = \GuzzleHttp\json_encode($httpBody);
                }
                // array has no __toString(), so we should encode it manually
                if(is_array($httpBody)) {
                    $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($httpBody));
                }
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\Query::build($formParams);
            }
        }

        // this endpoint requires HTTP basic authentication
        if ($this->config->getUsername() !== null || $this->config->getPassword() !== null) {
            $headers['Authorization'] = 'Basic ' . base64_encode($this->config->getUsername() . ":" . $this->config->getPassword());
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\Query::build($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation stockTransferPOSTRequestPost
     *
     * Creates a stock transfer.
     *
     * @param  string $accept Accept Header (required)
     * @param  bool $jiwa_stateful Stateful indicator (optional)
     * @param  string $transfer_no transfer_no (optional)
     * @param  string $status status (optional)
     * @param  \DateTime $transfer_date transfer_date (optional)
     * @param  string $reference reference (optional)
     * @param  string $logical_warehouse_id logical_warehouse_id (optional)
     * @param  string $logical_warehouse_description logical_warehouse_description (optional)
     * @param  string $physical_warehouse_id physical_warehouse_id (optional)
     * @param  string $physical_warehouse_description physical_warehouse_description (optional)
     * @param  string $last_saved_by_staff_id last_saved_by_staff_id (optional)
     * @param  string $last_saved_by_staff_user_name last_saved_by_staff_user_name (optional)
     * @param  string $last_saved_by_staff_title last_saved_by_staff_title (optional)
     * @param  string $last_saved_by_staff_first_name last_saved_by_staff_first_name (optional)
     * @param  string $last_saved_by_staff_surname last_saved_by_staff_surname (optional)
     * @param  \DateTime $last_saved_date_time last_saved_date_time (optional)
     * @param  string $created_by_staff_id created_by_staff_id (optional)
     * @param  string $created_by_staff_user_name created_by_staff_user_name (optional)
     * @param  string $created_by_staff_title created_by_staff_title (optional)
     * @param  string $created_by_staff_first_name created_by_staff_first_name (optional)
     * @param  string $created_by_staff_surname created_by_staff_surname (optional)
     * @param  \DateTime $created_date_time created_date_time (optional)
     * @param  string $lines lines (optional)
     * @param  string $notes notes (optional)
     * @param  string $documents documents (optional)
     * @param  string $custom_field_values custom_field_values (optional)
     * @param  string $stock_transfer_reason_rec_id stock_transfer_reason_rec_id (optional)
     * @param  string $stock_transfer_reason_name stock_transfer_reason_name (optional)
     * @param  bool $stock_transfer_reason_is_default stock_transfer_reason_is_default (optional)
     * @param  bool $stock_transfer_reason_write_off_ledger_account_override stock_transfer_reason_write_off_ledger_account_override (optional)
     * @param  string $stock_transfer_reason_write_off_ledger_account_rec_id stock_transfer_reason_write_off_ledger_account_rec_id (optional)
     * @param  string $stock_transfer_reason_write_off_ledger_account_no stock_transfer_reason_write_off_ledger_account_no (optional)
     * @param  string $stock_transfer_reason_write_off_ledger_account_description stock_transfer_reason_write_off_ledger_account_description (optional)
     * @param  bool $stock_transfer_reason_write_on_ledger_account_override stock_transfer_reason_write_on_ledger_account_override (optional)
     * @param  string $stock_transfer_reason_write_on_ledger_account_rec_id stock_transfer_reason_write_on_ledger_account_rec_id (optional)
     * @param  string $stock_transfer_reason_write_on_ledger_account_no stock_transfer_reason_write_on_ledger_account_no (optional)
     * @param  string $stock_transfer_reason_write_on_ledger_account_description stock_transfer_reason_write_on_ledger_account_description (optional)
     * @param  \Jiwa\Model\StockTransferPOSTRequest $body body (optional)
     *
     * @throws \Jiwa\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Jiwa\Model\StockTransfer
     */
    public function stockTransferPOSTRequestPost($accept, $jiwa_stateful = null, $transfer_no = null, $status = null, $transfer_date = null, $reference = null, $logical_warehouse_id = null, $logical_warehouse_description = null, $physical_warehouse_id = null, $physical_warehouse_description = null, $last_saved_by_staff_id = null, $last_saved_by_staff_user_name = null, $last_saved_by_staff_title = null, $last_saved_by_staff_first_name = null, $last_saved_by_staff_surname = null, $last_saved_date_time = null, $created_by_staff_id = null, $created_by_staff_user_name = null, $created_by_staff_title = null, $created_by_staff_first_name = null, $created_by_staff_surname = null, $created_date_time = null, $lines = null, $notes = null, $documents = null, $custom_field_values = null, $stock_transfer_reason_rec_id = null, $stock_transfer_reason_name = null, $stock_transfer_reason_is_default = null, $stock_transfer_reason_write_off_ledger_account_override = null, $stock_transfer_reason_write_off_ledger_account_rec_id = null, $stock_transfer_reason_write_off_ledger_account_no = null, $stock_transfer_reason_write_off_ledger_account_description = null, $stock_transfer_reason_write_on_ledger_account_override = null, $stock_transfer_reason_write_on_ledger_account_rec_id = null, $stock_transfer_reason_write_on_ledger_account_no = null, $stock_transfer_reason_write_on_ledger_account_description = null, $body = null)
    {
        list($response) = $this->stockTransferPOSTRequestPostWithHttpInfo($accept, $jiwa_stateful, $transfer_no, $status, $transfer_date, $reference, $logical_warehouse_id, $logical_warehouse_description, $physical_warehouse_id, $physical_warehouse_description, $last_saved_by_staff_id, $last_saved_by_staff_user_name, $last_saved_by_staff_title, $last_saved_by_staff_first_name, $last_saved_by_staff_surname, $last_saved_date_time, $created_by_staff_id, $created_by_staff_user_name, $created_by_staff_title, $created_by_staff_first_name, $created_by_staff_surname, $created_date_time, $lines, $notes, $documents, $custom_field_values, $stock_transfer_reason_rec_id, $stock_transfer_reason_name, $stock_transfer_reason_is_default, $stock_transfer_reason_write_off_ledger_account_override, $stock_transfer_reason_write_off_ledger_account_rec_id, $stock_transfer_reason_write_off_ledger_account_no, $stock_transfer_reason_write_off_ledger_account_description, $stock_transfer_reason_write_on_ledger_account_override, $stock_transfer_reason_write_on_ledger_account_rec_id, $stock_transfer_reason_write_on_ledger_account_no, $stock_transfer_reason_write_on_ledger_account_description, $body);
        return $response;
    }

    /**
     * Operation stockTransferPOSTRequestPostWithHttpInfo
     *
     * Creates a stock transfer.
     *
     * @param  string $accept Accept Header (required)
     * @param  bool $jiwa_stateful Stateful indicator (optional)
     * @param  string $transfer_no (optional)
     * @param  string $status (optional)
     * @param  \DateTime $transfer_date (optional)
     * @param  string $reference (optional)
     * @param  string $logical_warehouse_id (optional)
     * @param  string $logical_warehouse_description (optional)
     * @param  string $physical_warehouse_id (optional)
     * @param  string $physical_warehouse_description (optional)
     * @param  string $last_saved_by_staff_id (optional)
     * @param  string $last_saved_by_staff_user_name (optional)
     * @param  string $last_saved_by_staff_title (optional)
     * @param  string $last_saved_by_staff_first_name (optional)
     * @param  string $last_saved_by_staff_surname (optional)
     * @param  \DateTime $last_saved_date_time (optional)
     * @param  string $created_by_staff_id (optional)
     * @param  string $created_by_staff_user_name (optional)
     * @param  string $created_by_staff_title (optional)
     * @param  string $created_by_staff_first_name (optional)
     * @param  string $created_by_staff_surname (optional)
     * @param  \DateTime $created_date_time (optional)
     * @param  string $lines (optional)
     * @param  string $notes (optional)
     * @param  string $documents (optional)
     * @param  string $custom_field_values (optional)
     * @param  string $stock_transfer_reason_rec_id (optional)
     * @param  string $stock_transfer_reason_name (optional)
     * @param  bool $stock_transfer_reason_is_default (optional)
     * @param  bool $stock_transfer_reason_write_off_ledger_account_override (optional)
     * @param  string $stock_transfer_reason_write_off_ledger_account_rec_id (optional)
     * @param  string $stock_transfer_reason_write_off_ledger_account_no (optional)
     * @param  string $stock_transfer_reason_write_off_ledger_account_description (optional)
     * @param  bool $stock_transfer_reason_write_on_ledger_account_override (optional)
     * @param  string $stock_transfer_reason_write_on_ledger_account_rec_id (optional)
     * @param  string $stock_transfer_reason_write_on_ledger_account_no (optional)
     * @param  string $stock_transfer_reason_write_on_ledger_account_description (optional)
     * @param  \Jiwa\Model\StockTransferPOSTRequest $body (optional)
     *
     * @throws \Jiwa\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Jiwa\Model\StockTransfer, HTTP status code, HTTP response headers (array of strings)
     */
    public function stockTransferPOSTRequestPostWithHttpInfo($accept, $jiwa_stateful = null, $transfer_no = null, $status = null, $transfer_date = null, $reference = null, $logical_warehouse_id = null, $logical_warehouse_description = null, $physical_warehouse_id = null, $physical_warehouse_description = null, $last_saved_by_staff_id = null, $last_saved_by_staff_user_name = null, $last_saved_by_staff_title = null, $last_saved_by_staff_first_name = null, $last_saved_by_staff_surname = null, $last_saved_date_time = null, $created_by_staff_id = null, $created_by_staff_user_name = null, $created_by_staff_title = null, $created_by_staff_first_name = null, $created_by_staff_surname = null, $created_date_time = null, $lines = null, $notes = null, $documents = null, $custom_field_values = null, $stock_transfer_reason_rec_id = null, $stock_transfer_reason_name = null, $stock_transfer_reason_is_default = null, $stock_transfer_reason_write_off_ledger_account_override = null, $stock_transfer_reason_write_off_ledger_account_rec_id = null, $stock_transfer_reason_write_off_ledger_account_no = null, $stock_transfer_reason_write_off_ledger_account_description = null, $stock_transfer_reason_write_on_ledger_account_override = null, $stock_transfer_reason_write_on_ledger_account_rec_id = null, $stock_transfer_reason_write_on_ledger_account_no = null, $stock_transfer_reason_write_on_ledger_account_description = null, $body = null)
    {
        $returnType = '\Jiwa\Model\StockTransfer';
        $request = $this->stockTransferPOSTRequestPostRequest($accept, $jiwa_stateful, $transfer_no, $status, $transfer_date, $reference, $logical_warehouse_id, $logical_warehouse_description, $physical_warehouse_id, $physical_warehouse_description, $last_saved_by_staff_id, $last_saved_by_staff_user_name, $last_saved_by_staff_title, $last_saved_by_staff_first_name, $last_saved_by_staff_surname, $last_saved_date_time, $created_by_staff_id, $created_by_staff_user_name, $created_by_staff_title, $created_by_staff_first_name, $created_by_staff_surname, $created_date_time, $lines, $notes, $documents, $custom_field_values, $stock_transfer_reason_rec_id, $stock_transfer_reason_name, $stock_transfer_reason_is_default, $stock_transfer_reason_write_off_ledger_account_override, $stock_transfer_reason_write_off_ledger_account_rec_id, $stock_transfer_reason_write_off_ledger_account_no, $stock_transfer_reason_write_off_ledger_account_description, $stock_transfer_reason_write_on_ledger_account_override, $stock_transfer_reason_write_on_ledger_account_rec_id, $stock_transfer_reason_write_on_ledger_account_no, $stock_transfer_reason_write_on_ledger_account_description, $body);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Jiwa\Model\StockTransfer',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 401:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Jiwa\Model\StockTransfer',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 201:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Jiwa\Model\StockTransfer',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 403:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Jiwa\Model\StockTransfer',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation stockTransferPOSTRequestPostAsync
     *
     * Creates a stock transfer.
     *
     * @param  string $accept Accept Header (required)
     * @param  bool $jiwa_stateful Stateful indicator (optional)
     * @param  string $transfer_no (optional)
     * @param  string $status (optional)
     * @param  \DateTime $transfer_date (optional)
     * @param  string $reference (optional)
     * @param  string $logical_warehouse_id (optional)
     * @param  string $logical_warehouse_description (optional)
     * @param  string $physical_warehouse_id (optional)
     * @param  string $physical_warehouse_description (optional)
     * @param  string $last_saved_by_staff_id (optional)
     * @param  string $last_saved_by_staff_user_name (optional)
     * @param  string $last_saved_by_staff_title (optional)
     * @param  string $last_saved_by_staff_first_name (optional)
     * @param  string $last_saved_by_staff_surname (optional)
     * @param  \DateTime $last_saved_date_time (optional)
     * @param  string $created_by_staff_id (optional)
     * @param  string $created_by_staff_user_name (optional)
     * @param  string $created_by_staff_title (optional)
     * @param  string $created_by_staff_first_name (optional)
     * @param  string $created_by_staff_surname (optional)
     * @param  \DateTime $created_date_time (optional)
     * @param  string $lines (optional)
     * @param  string $notes (optional)
     * @param  string $documents (optional)
     * @param  string $custom_field_values (optional)
     * @param  string $stock_transfer_reason_rec_id (optional)
     * @param  string $stock_transfer_reason_name (optional)
     * @param  bool $stock_transfer_reason_is_default (optional)
     * @param  bool $stock_transfer_reason_write_off_ledger_account_override (optional)
     * @param  string $stock_transfer_reason_write_off_ledger_account_rec_id (optional)
     * @param  string $stock_transfer_reason_write_off_ledger_account_no (optional)
     * @param  string $stock_transfer_reason_write_off_ledger_account_description (optional)
     * @param  bool $stock_transfer_reason_write_on_ledger_account_override (optional)
     * @param  string $stock_transfer_reason_write_on_ledger_account_rec_id (optional)
     * @param  string $stock_transfer_reason_write_on_ledger_account_no (optional)
     * @param  string $stock_transfer_reason_write_on_ledger_account_description (optional)
     * @param  \Jiwa\Model\StockTransferPOSTRequest $body (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function stockTransferPOSTRequestPostAsync($accept, $jiwa_stateful = null, $transfer_no = null, $status = null, $transfer_date = null, $reference = null, $logical_warehouse_id = null, $logical_warehouse_description = null, $physical_warehouse_id = null, $physical_warehouse_description = null, $last_saved_by_staff_id = null, $last_saved_by_staff_user_name = null, $last_saved_by_staff_title = null, $last_saved_by_staff_first_name = null, $last_saved_by_staff_surname = null, $last_saved_date_time = null, $created_by_staff_id = null, $created_by_staff_user_name = null, $created_by_staff_title = null, $created_by_staff_first_name = null, $created_by_staff_surname = null, $created_date_time = null, $lines = null, $notes = null, $documents = null, $custom_field_values = null, $stock_transfer_reason_rec_id = null, $stock_transfer_reason_name = null, $stock_transfer_reason_is_default = null, $stock_transfer_reason_write_off_ledger_account_override = null, $stock_transfer_reason_write_off_ledger_account_rec_id = null, $stock_transfer_reason_write_off_ledger_account_no = null, $stock_transfer_reason_write_off_ledger_account_description = null, $stock_transfer_reason_write_on_ledger_account_override = null, $stock_transfer_reason_write_on_ledger_account_rec_id = null, $stock_transfer_reason_write_on_ledger_account_no = null, $stock_transfer_reason_write_on_ledger_account_description = null, $body = null)
    {
        return $this->stockTransferPOSTRequestPostAsyncWithHttpInfo($accept, $jiwa_stateful, $transfer_no, $status, $transfer_date, $reference, $logical_warehouse_id, $logical_warehouse_description, $physical_warehouse_id, $physical_warehouse_description, $last_saved_by_staff_id, $last_saved_by_staff_user_name, $last_saved_by_staff_title, $last_saved_by_staff_first_name, $last_saved_by_staff_surname, $last_saved_date_time, $created_by_staff_id, $created_by_staff_user_name, $created_by_staff_title, $created_by_staff_first_name, $created_by_staff_surname, $created_date_time, $lines, $notes, $documents, $custom_field_values, $stock_transfer_reason_rec_id, $stock_transfer_reason_name, $stock_transfer_reason_is_default, $stock_transfer_reason_write_off_ledger_account_override, $stock_transfer_reason_write_off_ledger_account_rec_id, $stock_transfer_reason_write_off_ledger_account_no, $stock_transfer_reason_write_off_ledger_account_description, $stock_transfer_reason_write_on_ledger_account_override, $stock_transfer_reason_write_on_ledger_account_rec_id, $stock_transfer_reason_write_on_ledger_account_no, $stock_transfer_reason_write_on_ledger_account_description, $body)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation stockTransferPOSTRequestPostAsyncWithHttpInfo
     *
     * Creates a stock transfer.
     *
     * @param  string $accept Accept Header (required)
     * @param  bool $jiwa_stateful Stateful indicator (optional)
     * @param  string $transfer_no (optional)
     * @param  string $status (optional)
     * @param  \DateTime $transfer_date (optional)
     * @param  string $reference (optional)
     * @param  string $logical_warehouse_id (optional)
     * @param  string $logical_warehouse_description (optional)
     * @param  string $physical_warehouse_id (optional)
     * @param  string $physical_warehouse_description (optional)
     * @param  string $last_saved_by_staff_id (optional)
     * @param  string $last_saved_by_staff_user_name (optional)
     * @param  string $last_saved_by_staff_title (optional)
     * @param  string $last_saved_by_staff_first_name (optional)
     * @param  string $last_saved_by_staff_surname (optional)
     * @param  \DateTime $last_saved_date_time (optional)
     * @param  string $created_by_staff_id (optional)
     * @param  string $created_by_staff_user_name (optional)
     * @param  string $created_by_staff_title (optional)
     * @param  string $created_by_staff_first_name (optional)
     * @param  string $created_by_staff_surname (optional)
     * @param  \DateTime $created_date_time (optional)
     * @param  string $lines (optional)
     * @param  string $notes (optional)
     * @param  string $documents (optional)
     * @param  string $custom_field_values (optional)
     * @param  string $stock_transfer_reason_rec_id (optional)
     * @param  string $stock_transfer_reason_name (optional)
     * @param  bool $stock_transfer_reason_is_default (optional)
     * @param  bool $stock_transfer_reason_write_off_ledger_account_override (optional)
     * @param  string $stock_transfer_reason_write_off_ledger_account_rec_id (optional)
     * @param  string $stock_transfer_reason_write_off_ledger_account_no (optional)
     * @param  string $stock_transfer_reason_write_off_ledger_account_description (optional)
     * @param  bool $stock_transfer_reason_write_on_ledger_account_override (optional)
     * @param  string $stock_transfer_reason_write_on_ledger_account_rec_id (optional)
     * @param  string $stock_transfer_reason_write_on_ledger_account_no (optional)
     * @param  string $stock_transfer_reason_write_on_ledger_account_description (optional)
     * @param  \Jiwa\Model\StockTransferPOSTRequest $body (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function stockTransferPOSTRequestPostAsyncWithHttpInfo($accept, $jiwa_stateful = null, $transfer_no = null, $status = null, $transfer_date = null, $reference = null, $logical_warehouse_id = null, $logical_warehouse_description = null, $physical_warehouse_id = null, $physical_warehouse_description = null, $last_saved_by_staff_id = null, $last_saved_by_staff_user_name = null, $last_saved_by_staff_title = null, $last_saved_by_staff_first_name = null, $last_saved_by_staff_surname = null, $last_saved_date_time = null, $created_by_staff_id = null, $created_by_staff_user_name = null, $created_by_staff_title = null, $created_by_staff_first_name = null, $created_by_staff_surname = null, $created_date_time = null, $lines = null, $notes = null, $documents = null, $custom_field_values = null, $stock_transfer_reason_rec_id = null, $stock_transfer_reason_name = null, $stock_transfer_reason_is_default = null, $stock_transfer_reason_write_off_ledger_account_override = null, $stock_transfer_reason_write_off_ledger_account_rec_id = null, $stock_transfer_reason_write_off_ledger_account_no = null, $stock_transfer_reason_write_off_ledger_account_description = null, $stock_transfer_reason_write_on_ledger_account_override = null, $stock_transfer_reason_write_on_ledger_account_rec_id = null, $stock_transfer_reason_write_on_ledger_account_no = null, $stock_transfer_reason_write_on_ledger_account_description = null, $body = null)
    {
        $returnType = '\Jiwa\Model\StockTransfer';
        $request = $this->stockTransferPOSTRequestPostRequest($accept, $jiwa_stateful, $transfer_no, $status, $transfer_date, $reference, $logical_warehouse_id, $logical_warehouse_description, $physical_warehouse_id, $physical_warehouse_description, $last_saved_by_staff_id, $last_saved_by_staff_user_name, $last_saved_by_staff_title, $last_saved_by_staff_first_name, $last_saved_by_staff_surname, $last_saved_date_time, $created_by_staff_id, $created_by_staff_user_name, $created_by_staff_title, $created_by_staff_first_name, $created_by_staff_surname, $created_date_time, $lines, $notes, $documents, $custom_field_values, $stock_transfer_reason_rec_id, $stock_transfer_reason_name, $stock_transfer_reason_is_default, $stock_transfer_reason_write_off_ledger_account_override, $stock_transfer_reason_write_off_ledger_account_rec_id, $stock_transfer_reason_write_off_ledger_account_no, $stock_transfer_reason_write_off_ledger_account_description, $stock_transfer_reason_write_on_ledger_account_override, $stock_transfer_reason_write_on_ledger_account_rec_id, $stock_transfer_reason_write_on_ledger_account_no, $stock_transfer_reason_write_on_ledger_account_description, $body);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'stockTransferPOSTRequestPost'
     *
     * @param  string $accept Accept Header (required)
     * @param  bool $jiwa_stateful Stateful indicator (optional)
     * @param  string $transfer_no (optional)
     * @param  string $status (optional)
     * @param  \DateTime $transfer_date (optional)
     * @param  string $reference (optional)
     * @param  string $logical_warehouse_id (optional)
     * @param  string $logical_warehouse_description (optional)
     * @param  string $physical_warehouse_id (optional)
     * @param  string $physical_warehouse_description (optional)
     * @param  string $last_saved_by_staff_id (optional)
     * @param  string $last_saved_by_staff_user_name (optional)
     * @param  string $last_saved_by_staff_title (optional)
     * @param  string $last_saved_by_staff_first_name (optional)
     * @param  string $last_saved_by_staff_surname (optional)
     * @param  \DateTime $last_saved_date_time (optional)
     * @param  string $created_by_staff_id (optional)
     * @param  string $created_by_staff_user_name (optional)
     * @param  string $created_by_staff_title (optional)
     * @param  string $created_by_staff_first_name (optional)
     * @param  string $created_by_staff_surname (optional)
     * @param  \DateTime $created_date_time (optional)
     * @param  string $lines (optional)
     * @param  string $notes (optional)
     * @param  string $documents (optional)
     * @param  string $custom_field_values (optional)
     * @param  string $stock_transfer_reason_rec_id (optional)
     * @param  string $stock_transfer_reason_name (optional)
     * @param  bool $stock_transfer_reason_is_default (optional)
     * @param  bool $stock_transfer_reason_write_off_ledger_account_override (optional)
     * @param  string $stock_transfer_reason_write_off_ledger_account_rec_id (optional)
     * @param  string $stock_transfer_reason_write_off_ledger_account_no (optional)
     * @param  string $stock_transfer_reason_write_off_ledger_account_description (optional)
     * @param  bool $stock_transfer_reason_write_on_ledger_account_override (optional)
     * @param  string $stock_transfer_reason_write_on_ledger_account_rec_id (optional)
     * @param  string $stock_transfer_reason_write_on_ledger_account_no (optional)
     * @param  string $stock_transfer_reason_write_on_ledger_account_description (optional)
     * @param  \Jiwa\Model\StockTransferPOSTRequest $body (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function stockTransferPOSTRequestPostRequest($accept, $jiwa_stateful = null, $transfer_no = null, $status = null, $transfer_date = null, $reference = null, $logical_warehouse_id = null, $logical_warehouse_description = null, $physical_warehouse_id = null, $physical_warehouse_description = null, $last_saved_by_staff_id = null, $last_saved_by_staff_user_name = null, $last_saved_by_staff_title = null, $last_saved_by_staff_first_name = null, $last_saved_by_staff_surname = null, $last_saved_date_time = null, $created_by_staff_id = null, $created_by_staff_user_name = null, $created_by_staff_title = null, $created_by_staff_first_name = null, $created_by_staff_surname = null, $created_date_time = null, $lines = null, $notes = null, $documents = null, $custom_field_values = null, $stock_transfer_reason_rec_id = null, $stock_transfer_reason_name = null, $stock_transfer_reason_is_default = null, $stock_transfer_reason_write_off_ledger_account_override = null, $stock_transfer_reason_write_off_ledger_account_rec_id = null, $stock_transfer_reason_write_off_ledger_account_no = null, $stock_transfer_reason_write_off_ledger_account_description = null, $stock_transfer_reason_write_on_ledger_account_override = null, $stock_transfer_reason_write_on_ledger_account_rec_id = null, $stock_transfer_reason_write_on_ledger_account_no = null, $stock_transfer_reason_write_on_ledger_account_description = null, $body = null)
    {
        // verify the required parameter 'accept' is set
        if ($accept === null || (is_array($accept) && count($accept) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $accept when calling stockTransferPOSTRequestPost'
            );
        }

        $resourcePath = '/StockTransfers/';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        if ($transfer_no !== null) {
            $queryParams['TransferNo'] = ObjectSerializer::toQueryValue($transfer_no);
        }
        // query params
        if ($status !== null) {
            $queryParams['Status'] = ObjectSerializer::toQueryValue($status);
        }
        // query params
        if ($transfer_date !== null) {
            $queryParams['TransferDate'] = ObjectSerializer::toQueryValue($transfer_date);
        }
        // query params
        if ($reference !== null) {
            $queryParams['Reference'] = ObjectSerializer::toQueryValue($reference);
        }
        // query params
        if ($logical_warehouse_id !== null) {
            $queryParams['LogicalWarehouseID'] = ObjectSerializer::toQueryValue($logical_warehouse_id);
        }
        // query params
        if ($logical_warehouse_description !== null) {
            $queryParams['LogicalWarehouseDescription'] = ObjectSerializer::toQueryValue($logical_warehouse_description);
        }
        // query params
        if ($physical_warehouse_id !== null) {
            $queryParams['PhysicalWarehouseID'] = ObjectSerializer::toQueryValue($physical_warehouse_id);
        }
        // query params
        if ($physical_warehouse_description !== null) {
            $queryParams['PhysicalWarehouseDescription'] = ObjectSerializer::toQueryValue($physical_warehouse_description);
        }
        // query params
        if ($last_saved_by_staff_id !== null) {
            $queryParams['LastSavedByStaffID'] = ObjectSerializer::toQueryValue($last_saved_by_staff_id);
        }
        // query params
        if ($last_saved_by_staff_user_name !== null) {
            $queryParams['LastSavedByStaffUserName'] = ObjectSerializer::toQueryValue($last_saved_by_staff_user_name);
        }
        // query params
        if ($last_saved_by_staff_title !== null) {
            $queryParams['LastSavedByStaffTitle'] = ObjectSerializer::toQueryValue($last_saved_by_staff_title);
        }
        // query params
        if ($last_saved_by_staff_first_name !== null) {
            $queryParams['LastSavedByStaffFirstName'] = ObjectSerializer::toQueryValue($last_saved_by_staff_first_name);
        }
        // query params
        if ($last_saved_by_staff_surname !== null) {
            $queryParams['LastSavedByStaffSurname'] = ObjectSerializer::toQueryValue($last_saved_by_staff_surname);
        }
        // query params
        if ($last_saved_date_time !== null) {
            $queryParams['LastSavedDateTime'] = ObjectSerializer::toQueryValue($last_saved_date_time);
        }
        // query params
        if ($created_by_staff_id !== null) {
            $queryParams['CreatedByStaffID'] = ObjectSerializer::toQueryValue($created_by_staff_id);
        }
        // query params
        if ($created_by_staff_user_name !== null) {
            $queryParams['CreatedByStaffUserName'] = ObjectSerializer::toQueryValue($created_by_staff_user_name);
        }
        // query params
        if ($created_by_staff_title !== null) {
            $queryParams['CreatedByStaffTitle'] = ObjectSerializer::toQueryValue($created_by_staff_title);
        }
        // query params
        if ($created_by_staff_first_name !== null) {
            $queryParams['CreatedByStaffFirstName'] = ObjectSerializer::toQueryValue($created_by_staff_first_name);
        }
        // query params
        if ($created_by_staff_surname !== null) {
            $queryParams['CreatedByStaffSurname'] = ObjectSerializer::toQueryValue($created_by_staff_surname);
        }
        // query params
        if ($created_date_time !== null) {
            $queryParams['CreatedDateTime'] = ObjectSerializer::toQueryValue($created_date_time);
        }
        // query params
        if ($lines !== null) {
            $queryParams['Lines'] = ObjectSerializer::toQueryValue($lines);
        }
        // query params
        if ($notes !== null) {
            $queryParams['Notes'] = ObjectSerializer::toQueryValue($notes);
        }
        // query params
        if ($documents !== null) {
            $queryParams['Documents'] = ObjectSerializer::toQueryValue($documents);
        }
        // query params
        if ($custom_field_values !== null) {
            $queryParams['CustomFieldValues'] = ObjectSerializer::toQueryValue($custom_field_values);
        }
        // query params
        if ($stock_transfer_reason_rec_id !== null) {
            $queryParams['StockTransferReasonRecID'] = ObjectSerializer::toQueryValue($stock_transfer_reason_rec_id);
        }
        // query params
        if ($stock_transfer_reason_name !== null) {
            $queryParams['StockTransferReasonName'] = ObjectSerializer::toQueryValue($stock_transfer_reason_name);
        }
        // query params
        if ($stock_transfer_reason_is_default !== null) {
            $queryParams['StockTransferReasonIsDefault'] = ObjectSerializer::toQueryValue($stock_transfer_reason_is_default);
        }
        // query params
        if ($stock_transfer_reason_write_off_ledger_account_override !== null) {
            $queryParams['StockTransferReasonWriteOffLedgerAccountOverride'] = ObjectSerializer::toQueryValue($stock_transfer_reason_write_off_ledger_account_override);
        }
        // query params
        if ($stock_transfer_reason_write_off_ledger_account_rec_id !== null) {
            $queryParams['StockTransferReasonWriteOffLedgerAccountRecID'] = ObjectSerializer::toQueryValue($stock_transfer_reason_write_off_ledger_account_rec_id);
        }
        // query params
        if ($stock_transfer_reason_write_off_ledger_account_no !== null) {
            $queryParams['StockTransferReasonWriteOffLedgerAccountNo'] = ObjectSerializer::toQueryValue($stock_transfer_reason_write_off_ledger_account_no);
        }
        // query params
        if ($stock_transfer_reason_write_off_ledger_account_description !== null) {
            $queryParams['StockTransferReasonWriteOffLedgerAccountDescription'] = ObjectSerializer::toQueryValue($stock_transfer_reason_write_off_ledger_account_description);
        }
        // query params
        if ($stock_transfer_reason_write_on_ledger_account_override !== null) {
            $queryParams['StockTransferReasonWriteOnLedgerAccountOverride'] = ObjectSerializer::toQueryValue($stock_transfer_reason_write_on_ledger_account_override);
        }
        // query params
        if ($stock_transfer_reason_write_on_ledger_account_rec_id !== null) {
            $queryParams['StockTransferReasonWriteOnLedgerAccountRecID'] = ObjectSerializer::toQueryValue($stock_transfer_reason_write_on_ledger_account_rec_id);
        }
        // query params
        if ($stock_transfer_reason_write_on_ledger_account_no !== null) {
            $queryParams['StockTransferReasonWriteOnLedgerAccountNo'] = ObjectSerializer::toQueryValue($stock_transfer_reason_write_on_ledger_account_no);
        }
        // query params
        if ($stock_transfer_reason_write_on_ledger_account_description !== null) {
            $queryParams['StockTransferReasonWriteOnLedgerAccountDescription'] = ObjectSerializer::toQueryValue($stock_transfer_reason_write_on_ledger_account_description);
        }
        // header params
        if ($accept !== null) {
            $headerParams['Accept'] = ObjectSerializer::toHeaderValue($accept);
        }
        // header params
        if ($jiwa_stateful !== null) {
            $headerParams['jiwa-stateful'] = ObjectSerializer::toHeaderValue($jiwa_stateful);
        }


        // body params
        $_tempBody = null;
        if (isset($body)) {
            $_tempBody = $body;
        }

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json', 'application/xml']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json', 'application/xml'],
                ['application/x-www-form-urlencoded', 'application/json', 'application/xml']
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            
            if($headers['Content-Type'] === 'application/json') {
                // \stdClass has no __toString(), so we should encode it manually
                if ($httpBody instanceof \stdClass) {
                    $httpBody = \GuzzleHttp\json_encode($httpBody);
                }
                // array has no __toString(), so we should encode it manually
                if(is_array($httpBody)) {
                    $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($httpBody));
                }
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\Query::build($formParams);
            }
        }

        // this endpoint requires HTTP basic authentication
        if ($this->config->getUsername() !== null || $this->config->getPassword() !== null) {
            $headers['Authorization'] = 'Basic ' . base64_encode($this->config->getUsername() . ":" . $this->config->getPassword());
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\Query::build($queryParams);
        return new Request(
            'POST',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Create http client option
     *
     * @throws \RuntimeException on file opening failure
     * @return array of http client options
     */
    protected function createHttpClientOption()
    {
        $options = [];
        if ($this->config->getDebug()) {
            $options[RequestOptions::DEBUG] = fopen($this->config->getDebugFile(), 'a');
            if (!$options[RequestOptions::DEBUG]) {
                throw new \RuntimeException('Failed to open the debug file: ' . $this->config->getDebugFile());
            }
        }

        return $options;
    }
}

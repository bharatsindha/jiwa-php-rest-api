<?php
/**
 * SalesOrdersApi
 * PHP version 5
 *
 * @category Class
 * @package  Jiwa
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * JiwaAPI
 *
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: 1.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 * Swagger Codegen version: 2.4.28-SNAPSHOT
 */

/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Jiwa\Api;

use GuzzleHttp\Client;
use GuzzleHttp\ClientInterface;
use GuzzleHttp\Exception\RequestException;
use GuzzleHttp\Psr7\MultipartStream;
use GuzzleHttp\Psr7\Request;
use GuzzleHttp\RequestOptions;
use Jiwa\ApiException;
use Jiwa\Configuration;
use Jiwa\HeaderSelector;
use Jiwa\ObjectSerializer;

/**
 * SalesOrdersApi Class Doc Comment
 *
 * @category Class
 * @package  Jiwa
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class SalesOrdersApi
{
    /**
     * @var ClientInterface
     */
    protected $client;

    /**
     * @var Configuration
     */
    protected $config;

    /**
     * @var HeaderSelector
     */
    protected $headerSelector;

    /**
     * @param ClientInterface $client
     * @param Configuration   $config
     * @param HeaderSelector  $selector
     */
    public function __construct(
        ClientInterface $client = null,
        Configuration $config = null,
        HeaderSelector $selector = null
    ) {
        $this->client = $client ?: new Client();
        $this->config = $config ?: new Configuration();
        $this->headerSelector = $selector ?: new HeaderSelector();
    }

    /**
     * @return Configuration
     */
    public function getConfig()
    {
        return $this->config;
    }

    /**
     * Operation salesOrderABANDONRequestInvoiceIDAbandonDelete
     *
     * Abandons a stateful sales order.
     *
     * @param  string $accept Accept Header (required)
     * @param  string $invoice_id invoice_id (required)
     * @param  bool $jiwa_stateful Stateful indicator (optional)
     *
     * @throws \Jiwa\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Jiwa\Model\Object
     */
    public function salesOrderABANDONRequestInvoiceIDAbandonDelete($accept, $invoice_id, $jiwa_stateful = null)
    {
        list($response) = $this->salesOrderABANDONRequestInvoiceIDAbandonDeleteWithHttpInfo($accept, $invoice_id, $jiwa_stateful);
        return $response;
    }

    /**
     * Operation salesOrderABANDONRequestInvoiceIDAbandonDeleteWithHttpInfo
     *
     * Abandons a stateful sales order.
     *
     * @param  string $accept Accept Header (required)
     * @param  string $invoice_id (required)
     * @param  bool $jiwa_stateful Stateful indicator (optional)
     *
     * @throws \Jiwa\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Jiwa\Model\Object, HTTP status code, HTTP response headers (array of strings)
     */
    public function salesOrderABANDONRequestInvoiceIDAbandonDeleteWithHttpInfo($accept, $invoice_id, $jiwa_stateful = null)
    {
        $returnType = '\Jiwa\Model\Object';
        $request = $this->salesOrderABANDONRequestInvoiceIDAbandonDeleteRequest($accept, $invoice_id, $jiwa_stateful);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Jiwa\Model\Object',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 401:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Jiwa\Model\Object',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 403:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Jiwa\Model\Object',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 404:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Jiwa\Model\Object',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation salesOrderABANDONRequestInvoiceIDAbandonDeleteAsync
     *
     * Abandons a stateful sales order.
     *
     * @param  string $accept Accept Header (required)
     * @param  string $invoice_id (required)
     * @param  bool $jiwa_stateful Stateful indicator (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function salesOrderABANDONRequestInvoiceIDAbandonDeleteAsync($accept, $invoice_id, $jiwa_stateful = null)
    {
        return $this->salesOrderABANDONRequestInvoiceIDAbandonDeleteAsyncWithHttpInfo($accept, $invoice_id, $jiwa_stateful)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation salesOrderABANDONRequestInvoiceIDAbandonDeleteAsyncWithHttpInfo
     *
     * Abandons a stateful sales order.
     *
     * @param  string $accept Accept Header (required)
     * @param  string $invoice_id (required)
     * @param  bool $jiwa_stateful Stateful indicator (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function salesOrderABANDONRequestInvoiceIDAbandonDeleteAsyncWithHttpInfo($accept, $invoice_id, $jiwa_stateful = null)
    {
        $returnType = '\Jiwa\Model\Object';
        $request = $this->salesOrderABANDONRequestInvoiceIDAbandonDeleteRequest($accept, $invoice_id, $jiwa_stateful);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'salesOrderABANDONRequestInvoiceIDAbandonDelete'
     *
     * @param  string $accept Accept Header (required)
     * @param  string $invoice_id (required)
     * @param  bool $jiwa_stateful Stateful indicator (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function salesOrderABANDONRequestInvoiceIDAbandonDeleteRequest($accept, $invoice_id, $jiwa_stateful = null)
    {
        // verify the required parameter 'accept' is set
        if ($accept === null || (is_array($accept) && count($accept) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $accept when calling salesOrderABANDONRequestInvoiceIDAbandonDelete'
            );
        }
        // verify the required parameter 'invoice_id' is set
        if ($invoice_id === null || (is_array($invoice_id) && count($invoice_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $invoice_id when calling salesOrderABANDONRequestInvoiceIDAbandonDelete'
            );
        }

        $resourcePath = '/SalesOrders/{InvoiceID}/Abandon';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // header params
        if ($accept !== null) {
            $headerParams['Accept'] = ObjectSerializer::toHeaderValue($accept);
        }
        // header params
        if ($jiwa_stateful !== null) {
            $headerParams['jiwa-stateful'] = ObjectSerializer::toHeaderValue($jiwa_stateful);
        }

        // path params
        if ($invoice_id !== null) {
            $resourcePath = str_replace(
                '{' . 'InvoiceID' . '}',
                ObjectSerializer::toPathValue($invoice_id),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json', 'application/xml']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json', 'application/xml'],
                ['application/x-www-form-urlencoded', 'application/json', 'application/xml']
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            
            if($headers['Content-Type'] === 'application/json') {
                // \stdClass has no __toString(), so we should encode it manually
                if ($httpBody instanceof \stdClass) {
                    $httpBody = \GuzzleHttp\json_encode($httpBody);
                }
                // array has no __toString(), so we should encode it manually
                if(is_array($httpBody)) {
                    $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($httpBody));
                }
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\Query::build($formParams);
            }
        }

        // this endpoint requires HTTP basic authentication
        if ($this->config->getUsername() !== null || $this->config->getPassword() !== null) {
            $headers['Authorization'] = 'Basic ' . base64_encode($this->config->getUsername() . ":" . $this->config->getPassword());
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\Query::build($queryParams);
        return new Request(
            'DELETE',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation salesOrderCustomFieldValueGETRequestInvoiceIDCustomFieldValuesSettingIDGet
     *
     * Retrieves a sales order custom field value.
     *
     * @param  string $accept Accept Header (required)
     * @param  string $invoice_id invoice_id (required)
     * @param  string $setting_id setting_id (required)
     * @param  bool $jiwa_stateful Stateful indicator (optional)
     *
     * @throws \Jiwa\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Jiwa\Model\CustomFieldValue
     */
    public function salesOrderCustomFieldValueGETRequestInvoiceIDCustomFieldValuesSettingIDGet($accept, $invoice_id, $setting_id, $jiwa_stateful = null)
    {
        list($response) = $this->salesOrderCustomFieldValueGETRequestInvoiceIDCustomFieldValuesSettingIDGetWithHttpInfo($accept, $invoice_id, $setting_id, $jiwa_stateful);
        return $response;
    }

    /**
     * Operation salesOrderCustomFieldValueGETRequestInvoiceIDCustomFieldValuesSettingIDGetWithHttpInfo
     *
     * Retrieves a sales order custom field value.
     *
     * @param  string $accept Accept Header (required)
     * @param  string $invoice_id (required)
     * @param  string $setting_id (required)
     * @param  bool $jiwa_stateful Stateful indicator (optional)
     *
     * @throws \Jiwa\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Jiwa\Model\CustomFieldValue, HTTP status code, HTTP response headers (array of strings)
     */
    public function salesOrderCustomFieldValueGETRequestInvoiceIDCustomFieldValuesSettingIDGetWithHttpInfo($accept, $invoice_id, $setting_id, $jiwa_stateful = null)
    {
        $returnType = '\Jiwa\Model\CustomFieldValue';
        $request = $this->salesOrderCustomFieldValueGETRequestInvoiceIDCustomFieldValuesSettingIDGetRequest($accept, $invoice_id, $setting_id, $jiwa_stateful);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Jiwa\Model\CustomFieldValue',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 401:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Jiwa\Model\CustomFieldValue',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 403:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Jiwa\Model\CustomFieldValue',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 404:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Jiwa\Model\CustomFieldValue',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation salesOrderCustomFieldValueGETRequestInvoiceIDCustomFieldValuesSettingIDGetAsync
     *
     * Retrieves a sales order custom field value.
     *
     * @param  string $accept Accept Header (required)
     * @param  string $invoice_id (required)
     * @param  string $setting_id (required)
     * @param  bool $jiwa_stateful Stateful indicator (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function salesOrderCustomFieldValueGETRequestInvoiceIDCustomFieldValuesSettingIDGetAsync($accept, $invoice_id, $setting_id, $jiwa_stateful = null)
    {
        return $this->salesOrderCustomFieldValueGETRequestInvoiceIDCustomFieldValuesSettingIDGetAsyncWithHttpInfo($accept, $invoice_id, $setting_id, $jiwa_stateful)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation salesOrderCustomFieldValueGETRequestInvoiceIDCustomFieldValuesSettingIDGetAsyncWithHttpInfo
     *
     * Retrieves a sales order custom field value.
     *
     * @param  string $accept Accept Header (required)
     * @param  string $invoice_id (required)
     * @param  string $setting_id (required)
     * @param  bool $jiwa_stateful Stateful indicator (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function salesOrderCustomFieldValueGETRequestInvoiceIDCustomFieldValuesSettingIDGetAsyncWithHttpInfo($accept, $invoice_id, $setting_id, $jiwa_stateful = null)
    {
        $returnType = '\Jiwa\Model\CustomFieldValue';
        $request = $this->salesOrderCustomFieldValueGETRequestInvoiceIDCustomFieldValuesSettingIDGetRequest($accept, $invoice_id, $setting_id, $jiwa_stateful);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'salesOrderCustomFieldValueGETRequestInvoiceIDCustomFieldValuesSettingIDGet'
     *
     * @param  string $accept Accept Header (required)
     * @param  string $invoice_id (required)
     * @param  string $setting_id (required)
     * @param  bool $jiwa_stateful Stateful indicator (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function salesOrderCustomFieldValueGETRequestInvoiceIDCustomFieldValuesSettingIDGetRequest($accept, $invoice_id, $setting_id, $jiwa_stateful = null)
    {
        // verify the required parameter 'accept' is set
        if ($accept === null || (is_array($accept) && count($accept) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $accept when calling salesOrderCustomFieldValueGETRequestInvoiceIDCustomFieldValuesSettingIDGet'
            );
        }
        // verify the required parameter 'invoice_id' is set
        if ($invoice_id === null || (is_array($invoice_id) && count($invoice_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $invoice_id when calling salesOrderCustomFieldValueGETRequestInvoiceIDCustomFieldValuesSettingIDGet'
            );
        }
        // verify the required parameter 'setting_id' is set
        if ($setting_id === null || (is_array($setting_id) && count($setting_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $setting_id when calling salesOrderCustomFieldValueGETRequestInvoiceIDCustomFieldValuesSettingIDGet'
            );
        }

        $resourcePath = '/SalesOrders/{InvoiceID}/CustomFieldValues/{SettingID}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // header params
        if ($accept !== null) {
            $headerParams['Accept'] = ObjectSerializer::toHeaderValue($accept);
        }
        // header params
        if ($jiwa_stateful !== null) {
            $headerParams['jiwa-stateful'] = ObjectSerializer::toHeaderValue($jiwa_stateful);
        }

        // path params
        if ($invoice_id !== null) {
            $resourcePath = str_replace(
                '{' . 'InvoiceID' . '}',
                ObjectSerializer::toPathValue($invoice_id),
                $resourcePath
            );
        }
        // path params
        if ($setting_id !== null) {
            $resourcePath = str_replace(
                '{' . 'SettingID' . '}',
                ObjectSerializer::toPathValue($setting_id),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json', 'application/xml']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json', 'application/xml'],
                ['application/x-www-form-urlencoded', 'application/json', 'application/xml']
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            
            if($headers['Content-Type'] === 'application/json') {
                // \stdClass has no __toString(), so we should encode it manually
                if ($httpBody instanceof \stdClass) {
                    $httpBody = \GuzzleHttp\json_encode($httpBody);
                }
                // array has no __toString(), so we should encode it manually
                if(is_array($httpBody)) {
                    $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($httpBody));
                }
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\Query::build($formParams);
            }
        }

        // this endpoint requires HTTP basic authentication
        if ($this->config->getUsername() !== null || $this->config->getPassword() !== null) {
            $headers['Authorization'] = 'Basic ' . base64_encode($this->config->getUsername() . ":" . $this->config->getPassword());
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\Query::build($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation salesOrderCustomFieldValuePATCHRequestInvoiceIDCustomFieldValuesSettingIDUpdate
     *
     * Updates a sales order custom field value.
     *
     * @param  string $accept Accept Header (required)
     * @param  string $invoice_id invoice_id (required)
     * @param  string $setting_id setting_id (required)
     * @param  bool $jiwa_stateful Stateful indicator (optional)
     * @param  string $contents contents (optional)
     * @param  \Jiwa\Model\SalesOrderCustomFieldValuePATCHRequest $body body (optional)
     *
     * @throws \Jiwa\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Jiwa\Model\CustomFieldValue
     */
    public function salesOrderCustomFieldValuePATCHRequestInvoiceIDCustomFieldValuesSettingIDUpdate($accept, $invoice_id, $setting_id, $jiwa_stateful = null, $contents = null, $body = null)
    {
        list($response) = $this->salesOrderCustomFieldValuePATCHRequestInvoiceIDCustomFieldValuesSettingIDUpdateWithHttpInfo($accept, $invoice_id, $setting_id, $jiwa_stateful, $contents, $body);
        return $response;
    }

    /**
     * Operation salesOrderCustomFieldValuePATCHRequestInvoiceIDCustomFieldValuesSettingIDUpdateWithHttpInfo
     *
     * Updates a sales order custom field value.
     *
     * @param  string $accept Accept Header (required)
     * @param  string $invoice_id (required)
     * @param  string $setting_id (required)
     * @param  bool $jiwa_stateful Stateful indicator (optional)
     * @param  string $contents (optional)
     * @param  \Jiwa\Model\SalesOrderCustomFieldValuePATCHRequest $body (optional)
     *
     * @throws \Jiwa\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Jiwa\Model\CustomFieldValue, HTTP status code, HTTP response headers (array of strings)
     */
    public function salesOrderCustomFieldValuePATCHRequestInvoiceIDCustomFieldValuesSettingIDUpdateWithHttpInfo($accept, $invoice_id, $setting_id, $jiwa_stateful = null, $contents = null, $body = null)
    {
        $returnType = '\Jiwa\Model\CustomFieldValue';
        $request = $this->salesOrderCustomFieldValuePATCHRequestInvoiceIDCustomFieldValuesSettingIDUpdateRequest($accept, $invoice_id, $setting_id, $jiwa_stateful, $contents, $body);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Jiwa\Model\CustomFieldValue',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 401:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Jiwa\Model\CustomFieldValue',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 403:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Jiwa\Model\CustomFieldValue',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 404:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Jiwa\Model\CustomFieldValue',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation salesOrderCustomFieldValuePATCHRequestInvoiceIDCustomFieldValuesSettingIDUpdateAsync
     *
     * Updates a sales order custom field value.
     *
     * @param  string $accept Accept Header (required)
     * @param  string $invoice_id (required)
     * @param  string $setting_id (required)
     * @param  bool $jiwa_stateful Stateful indicator (optional)
     * @param  string $contents (optional)
     * @param  \Jiwa\Model\SalesOrderCustomFieldValuePATCHRequest $body (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function salesOrderCustomFieldValuePATCHRequestInvoiceIDCustomFieldValuesSettingIDUpdateAsync($accept, $invoice_id, $setting_id, $jiwa_stateful = null, $contents = null, $body = null)
    {
        return $this->salesOrderCustomFieldValuePATCHRequestInvoiceIDCustomFieldValuesSettingIDUpdateAsyncWithHttpInfo($accept, $invoice_id, $setting_id, $jiwa_stateful, $contents, $body)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation salesOrderCustomFieldValuePATCHRequestInvoiceIDCustomFieldValuesSettingIDUpdateAsyncWithHttpInfo
     *
     * Updates a sales order custom field value.
     *
     * @param  string $accept Accept Header (required)
     * @param  string $invoice_id (required)
     * @param  string $setting_id (required)
     * @param  bool $jiwa_stateful Stateful indicator (optional)
     * @param  string $contents (optional)
     * @param  \Jiwa\Model\SalesOrderCustomFieldValuePATCHRequest $body (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function salesOrderCustomFieldValuePATCHRequestInvoiceIDCustomFieldValuesSettingIDUpdateAsyncWithHttpInfo($accept, $invoice_id, $setting_id, $jiwa_stateful = null, $contents = null, $body = null)
    {
        $returnType = '\Jiwa\Model\CustomFieldValue';
        $request = $this->salesOrderCustomFieldValuePATCHRequestInvoiceIDCustomFieldValuesSettingIDUpdateRequest($accept, $invoice_id, $setting_id, $jiwa_stateful, $contents, $body);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'salesOrderCustomFieldValuePATCHRequestInvoiceIDCustomFieldValuesSettingIDUpdate'
     *
     * @param  string $accept Accept Header (required)
     * @param  string $invoice_id (required)
     * @param  string $setting_id (required)
     * @param  bool $jiwa_stateful Stateful indicator (optional)
     * @param  string $contents (optional)
     * @param  \Jiwa\Model\SalesOrderCustomFieldValuePATCHRequest $body (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function salesOrderCustomFieldValuePATCHRequestInvoiceIDCustomFieldValuesSettingIDUpdateRequest($accept, $invoice_id, $setting_id, $jiwa_stateful = null, $contents = null, $body = null)
    {
        // verify the required parameter 'accept' is set
        if ($accept === null || (is_array($accept) && count($accept) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $accept when calling salesOrderCustomFieldValuePATCHRequestInvoiceIDCustomFieldValuesSettingIDUpdate'
            );
        }
        // verify the required parameter 'invoice_id' is set
        if ($invoice_id === null || (is_array($invoice_id) && count($invoice_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $invoice_id when calling salesOrderCustomFieldValuePATCHRequestInvoiceIDCustomFieldValuesSettingIDUpdate'
            );
        }
        // verify the required parameter 'setting_id' is set
        if ($setting_id === null || (is_array($setting_id) && count($setting_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $setting_id when calling salesOrderCustomFieldValuePATCHRequestInvoiceIDCustomFieldValuesSettingIDUpdate'
            );
        }

        $resourcePath = '/SalesOrders/{InvoiceID}/CustomFieldValues/{SettingID}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        if ($contents !== null) {
            $queryParams['Contents'] = ObjectSerializer::toQueryValue($contents);
        }
        // header params
        if ($accept !== null) {
            $headerParams['Accept'] = ObjectSerializer::toHeaderValue($accept);
        }
        // header params
        if ($jiwa_stateful !== null) {
            $headerParams['jiwa-stateful'] = ObjectSerializer::toHeaderValue($jiwa_stateful);
        }

        // path params
        if ($invoice_id !== null) {
            $resourcePath = str_replace(
                '{' . 'InvoiceID' . '}',
                ObjectSerializer::toPathValue($invoice_id),
                $resourcePath
            );
        }
        // path params
        if ($setting_id !== null) {
            $resourcePath = str_replace(
                '{' . 'SettingID' . '}',
                ObjectSerializer::toPathValue($setting_id),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;
        if (isset($body)) {
            $_tempBody = $body;
        }

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json', 'application/xml']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json', 'application/xml'],
                ['application/x-www-form-urlencoded', 'application/json', 'application/xml']
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            
            if($headers['Content-Type'] === 'application/json') {
                // \stdClass has no __toString(), so we should encode it manually
                if ($httpBody instanceof \stdClass) {
                    $httpBody = \GuzzleHttp\json_encode($httpBody);
                }
                // array has no __toString(), so we should encode it manually
                if(is_array($httpBody)) {
                    $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($httpBody));
                }
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\Query::build($formParams);
            }
        }

        // this endpoint requires HTTP basic authentication
        if ($this->config->getUsername() !== null || $this->config->getPassword() !== null) {
            $headers['Authorization'] = 'Basic ' . base64_encode($this->config->getUsername() . ":" . $this->config->getPassword());
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\Query::build($queryParams);
        return new Request(
            'PATCH',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation salesOrderCustomFieldValuesGETManyRequestInvoiceIDCustomFieldValuesGet
     *
     * Retrieves a list of custom field values for a sales order.
     *
     * @param  string $accept Accept Header (required)
     * @param  string $invoice_id invoice_id (required)
     * @param  bool $jiwa_stateful Stateful indicator (optional)
     *
     * @throws \Jiwa\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Jiwa\Model\CustomFieldValue[]
     */
    public function salesOrderCustomFieldValuesGETManyRequestInvoiceIDCustomFieldValuesGet($accept, $invoice_id, $jiwa_stateful = null)
    {
        list($response) = $this->salesOrderCustomFieldValuesGETManyRequestInvoiceIDCustomFieldValuesGetWithHttpInfo($accept, $invoice_id, $jiwa_stateful);
        return $response;
    }

    /**
     * Operation salesOrderCustomFieldValuesGETManyRequestInvoiceIDCustomFieldValuesGetWithHttpInfo
     *
     * Retrieves a list of custom field values for a sales order.
     *
     * @param  string $accept Accept Header (required)
     * @param  string $invoice_id (required)
     * @param  bool $jiwa_stateful Stateful indicator (optional)
     *
     * @throws \Jiwa\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Jiwa\Model\CustomFieldValue[], HTTP status code, HTTP response headers (array of strings)
     */
    public function salesOrderCustomFieldValuesGETManyRequestInvoiceIDCustomFieldValuesGetWithHttpInfo($accept, $invoice_id, $jiwa_stateful = null)
    {
        $returnType = '\Jiwa\Model\CustomFieldValue[]';
        $request = $this->salesOrderCustomFieldValuesGETManyRequestInvoiceIDCustomFieldValuesGetRequest($accept, $invoice_id, $jiwa_stateful);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Jiwa\Model\CustomFieldValue[]',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 401:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Jiwa\Model\CustomFieldValue[]',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 403:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Jiwa\Model\CustomFieldValue[]',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 404:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Jiwa\Model\CustomFieldValue[]',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation salesOrderCustomFieldValuesGETManyRequestInvoiceIDCustomFieldValuesGetAsync
     *
     * Retrieves a list of custom field values for a sales order.
     *
     * @param  string $accept Accept Header (required)
     * @param  string $invoice_id (required)
     * @param  bool $jiwa_stateful Stateful indicator (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function salesOrderCustomFieldValuesGETManyRequestInvoiceIDCustomFieldValuesGetAsync($accept, $invoice_id, $jiwa_stateful = null)
    {
        return $this->salesOrderCustomFieldValuesGETManyRequestInvoiceIDCustomFieldValuesGetAsyncWithHttpInfo($accept, $invoice_id, $jiwa_stateful)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation salesOrderCustomFieldValuesGETManyRequestInvoiceIDCustomFieldValuesGetAsyncWithHttpInfo
     *
     * Retrieves a list of custom field values for a sales order.
     *
     * @param  string $accept Accept Header (required)
     * @param  string $invoice_id (required)
     * @param  bool $jiwa_stateful Stateful indicator (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function salesOrderCustomFieldValuesGETManyRequestInvoiceIDCustomFieldValuesGetAsyncWithHttpInfo($accept, $invoice_id, $jiwa_stateful = null)
    {
        $returnType = '\Jiwa\Model\CustomFieldValue[]';
        $request = $this->salesOrderCustomFieldValuesGETManyRequestInvoiceIDCustomFieldValuesGetRequest($accept, $invoice_id, $jiwa_stateful);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'salesOrderCustomFieldValuesGETManyRequestInvoiceIDCustomFieldValuesGet'
     *
     * @param  string $accept Accept Header (required)
     * @param  string $invoice_id (required)
     * @param  bool $jiwa_stateful Stateful indicator (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function salesOrderCustomFieldValuesGETManyRequestInvoiceIDCustomFieldValuesGetRequest($accept, $invoice_id, $jiwa_stateful = null)
    {
        // verify the required parameter 'accept' is set
        if ($accept === null || (is_array($accept) && count($accept) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $accept when calling salesOrderCustomFieldValuesGETManyRequestInvoiceIDCustomFieldValuesGet'
            );
        }
        // verify the required parameter 'invoice_id' is set
        if ($invoice_id === null || (is_array($invoice_id) && count($invoice_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $invoice_id when calling salesOrderCustomFieldValuesGETManyRequestInvoiceIDCustomFieldValuesGet'
            );
        }

        $resourcePath = '/SalesOrders/{InvoiceID}/CustomFieldValues';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // header params
        if ($accept !== null) {
            $headerParams['Accept'] = ObjectSerializer::toHeaderValue($accept);
        }
        // header params
        if ($jiwa_stateful !== null) {
            $headerParams['jiwa-stateful'] = ObjectSerializer::toHeaderValue($jiwa_stateful);
        }

        // path params
        if ($invoice_id !== null) {
            $resourcePath = str_replace(
                '{' . 'InvoiceID' . '}',
                ObjectSerializer::toPathValue($invoice_id),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json', 'application/xml']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json', 'application/xml'],
                ['application/x-www-form-urlencoded', 'application/json', 'application/xml']
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            
            if($headers['Content-Type'] === 'application/json') {
                // \stdClass has no __toString(), so we should encode it manually
                if ($httpBody instanceof \stdClass) {
                    $httpBody = \GuzzleHttp\json_encode($httpBody);
                }
                // array has no __toString(), so we should encode it manually
                if(is_array($httpBody)) {
                    $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($httpBody));
                }
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\Query::build($formParams);
            }
        }

        // this endpoint requires HTTP basic authentication
        if ($this->config->getUsername() !== null || $this->config->getPassword() !== null) {
            $headers['Authorization'] = 'Basic ' . base64_encode($this->config->getUsername() . ":" . $this->config->getPassword());
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\Query::build($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation salesOrderCustomFieldsGETManyRequestCustomFieldsGet
     *
     * Retrieves a list of sales order custom fields.
     *
     * @param  string $accept Accept Header (required)
     * @param  bool $jiwa_stateful Stateful indicator (optional)
     *
     * @throws \Jiwa\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Jiwa\Model\CustomField[]
     */
    public function salesOrderCustomFieldsGETManyRequestCustomFieldsGet($accept, $jiwa_stateful = null)
    {
        list($response) = $this->salesOrderCustomFieldsGETManyRequestCustomFieldsGetWithHttpInfo($accept, $jiwa_stateful);
        return $response;
    }

    /**
     * Operation salesOrderCustomFieldsGETManyRequestCustomFieldsGetWithHttpInfo
     *
     * Retrieves a list of sales order custom fields.
     *
     * @param  string $accept Accept Header (required)
     * @param  bool $jiwa_stateful Stateful indicator (optional)
     *
     * @throws \Jiwa\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Jiwa\Model\CustomField[], HTTP status code, HTTP response headers (array of strings)
     */
    public function salesOrderCustomFieldsGETManyRequestCustomFieldsGetWithHttpInfo($accept, $jiwa_stateful = null)
    {
        $returnType = '\Jiwa\Model\CustomField[]';
        $request = $this->salesOrderCustomFieldsGETManyRequestCustomFieldsGetRequest($accept, $jiwa_stateful);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Jiwa\Model\CustomField[]',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 401:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Jiwa\Model\CustomField[]',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 403:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Jiwa\Model\CustomField[]',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation salesOrderCustomFieldsGETManyRequestCustomFieldsGetAsync
     *
     * Retrieves a list of sales order custom fields.
     *
     * @param  string $accept Accept Header (required)
     * @param  bool $jiwa_stateful Stateful indicator (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function salesOrderCustomFieldsGETManyRequestCustomFieldsGetAsync($accept, $jiwa_stateful = null)
    {
        return $this->salesOrderCustomFieldsGETManyRequestCustomFieldsGetAsyncWithHttpInfo($accept, $jiwa_stateful)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation salesOrderCustomFieldsGETManyRequestCustomFieldsGetAsyncWithHttpInfo
     *
     * Retrieves a list of sales order custom fields.
     *
     * @param  string $accept Accept Header (required)
     * @param  bool $jiwa_stateful Stateful indicator (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function salesOrderCustomFieldsGETManyRequestCustomFieldsGetAsyncWithHttpInfo($accept, $jiwa_stateful = null)
    {
        $returnType = '\Jiwa\Model\CustomField[]';
        $request = $this->salesOrderCustomFieldsGETManyRequestCustomFieldsGetRequest($accept, $jiwa_stateful);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'salesOrderCustomFieldsGETManyRequestCustomFieldsGet'
     *
     * @param  string $accept Accept Header (required)
     * @param  bool $jiwa_stateful Stateful indicator (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function salesOrderCustomFieldsGETManyRequestCustomFieldsGetRequest($accept, $jiwa_stateful = null)
    {
        // verify the required parameter 'accept' is set
        if ($accept === null || (is_array($accept) && count($accept) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $accept when calling salesOrderCustomFieldsGETManyRequestCustomFieldsGet'
            );
        }

        $resourcePath = '/SalesOrders/CustomFields';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // header params
        if ($accept !== null) {
            $headerParams['Accept'] = ObjectSerializer::toHeaderValue($accept);
        }
        // header params
        if ($jiwa_stateful !== null) {
            $headerParams['jiwa-stateful'] = ObjectSerializer::toHeaderValue($jiwa_stateful);
        }


        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json', 'application/xml']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json', 'application/xml'],
                ['application/x-www-form-urlencoded', 'application/json', 'application/xml']
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            
            if($headers['Content-Type'] === 'application/json') {
                // \stdClass has no __toString(), so we should encode it manually
                if ($httpBody instanceof \stdClass) {
                    $httpBody = \GuzzleHttp\json_encode($httpBody);
                }
                // array has no __toString(), so we should encode it manually
                if(is_array($httpBody)) {
                    $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($httpBody));
                }
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\Query::build($formParams);
            }
        }

        // this endpoint requires HTTP basic authentication
        if ($this->config->getUsername() !== null || $this->config->getPassword() !== null) {
            $headers['Authorization'] = 'Basic ' . base64_encode($this->config->getUsername() . ":" . $this->config->getPassword());
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\Query::build($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation salesOrderDocumentDELETERequestInvoiceIDDocumentsDocumentIDDelete
     *
     * Deletes a sales order document.
     *
     * @param  string $accept Accept Header (required)
     * @param  string $invoice_id invoice_id (required)
     * @param  string $document_id document_id (required)
     * @param  bool $jiwa_stateful Stateful indicator (optional)
     *
     * @throws \Jiwa\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Jiwa\Model\Object
     */
    public function salesOrderDocumentDELETERequestInvoiceIDDocumentsDocumentIDDelete($accept, $invoice_id, $document_id, $jiwa_stateful = null)
    {
        list($response) = $this->salesOrderDocumentDELETERequestInvoiceIDDocumentsDocumentIDDeleteWithHttpInfo($accept, $invoice_id, $document_id, $jiwa_stateful);
        return $response;
    }

    /**
     * Operation salesOrderDocumentDELETERequestInvoiceIDDocumentsDocumentIDDeleteWithHttpInfo
     *
     * Deletes a sales order document.
     *
     * @param  string $accept Accept Header (required)
     * @param  string $invoice_id (required)
     * @param  string $document_id (required)
     * @param  bool $jiwa_stateful Stateful indicator (optional)
     *
     * @throws \Jiwa\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Jiwa\Model\Object, HTTP status code, HTTP response headers (array of strings)
     */
    public function salesOrderDocumentDELETERequestInvoiceIDDocumentsDocumentIDDeleteWithHttpInfo($accept, $invoice_id, $document_id, $jiwa_stateful = null)
    {
        $returnType = '\Jiwa\Model\Object';
        $request = $this->salesOrderDocumentDELETERequestInvoiceIDDocumentsDocumentIDDeleteRequest($accept, $invoice_id, $document_id, $jiwa_stateful);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Jiwa\Model\Object',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 204:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Jiwa\Model\Object',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 404:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Jiwa\Model\Object',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 401:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Jiwa\Model\Object',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 403:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Jiwa\Model\Object',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation salesOrderDocumentDELETERequestInvoiceIDDocumentsDocumentIDDeleteAsync
     *
     * Deletes a sales order document.
     *
     * @param  string $accept Accept Header (required)
     * @param  string $invoice_id (required)
     * @param  string $document_id (required)
     * @param  bool $jiwa_stateful Stateful indicator (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function salesOrderDocumentDELETERequestInvoiceIDDocumentsDocumentIDDeleteAsync($accept, $invoice_id, $document_id, $jiwa_stateful = null)
    {
        return $this->salesOrderDocumentDELETERequestInvoiceIDDocumentsDocumentIDDeleteAsyncWithHttpInfo($accept, $invoice_id, $document_id, $jiwa_stateful)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation salesOrderDocumentDELETERequestInvoiceIDDocumentsDocumentIDDeleteAsyncWithHttpInfo
     *
     * Deletes a sales order document.
     *
     * @param  string $accept Accept Header (required)
     * @param  string $invoice_id (required)
     * @param  string $document_id (required)
     * @param  bool $jiwa_stateful Stateful indicator (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function salesOrderDocumentDELETERequestInvoiceIDDocumentsDocumentIDDeleteAsyncWithHttpInfo($accept, $invoice_id, $document_id, $jiwa_stateful = null)
    {
        $returnType = '\Jiwa\Model\Object';
        $request = $this->salesOrderDocumentDELETERequestInvoiceIDDocumentsDocumentIDDeleteRequest($accept, $invoice_id, $document_id, $jiwa_stateful);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'salesOrderDocumentDELETERequestInvoiceIDDocumentsDocumentIDDelete'
     *
     * @param  string $accept Accept Header (required)
     * @param  string $invoice_id (required)
     * @param  string $document_id (required)
     * @param  bool $jiwa_stateful Stateful indicator (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function salesOrderDocumentDELETERequestInvoiceIDDocumentsDocumentIDDeleteRequest($accept, $invoice_id, $document_id, $jiwa_stateful = null)
    {
        // verify the required parameter 'accept' is set
        if ($accept === null || (is_array($accept) && count($accept) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $accept when calling salesOrderDocumentDELETERequestInvoiceIDDocumentsDocumentIDDelete'
            );
        }
        // verify the required parameter 'invoice_id' is set
        if ($invoice_id === null || (is_array($invoice_id) && count($invoice_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $invoice_id when calling salesOrderDocumentDELETERequestInvoiceIDDocumentsDocumentIDDelete'
            );
        }
        // verify the required parameter 'document_id' is set
        if ($document_id === null || (is_array($document_id) && count($document_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $document_id when calling salesOrderDocumentDELETERequestInvoiceIDDocumentsDocumentIDDelete'
            );
        }

        $resourcePath = '/SalesOrders/{InvoiceID}/Documents/{DocumentID}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // header params
        if ($accept !== null) {
            $headerParams['Accept'] = ObjectSerializer::toHeaderValue($accept);
        }
        // header params
        if ($jiwa_stateful !== null) {
            $headerParams['jiwa-stateful'] = ObjectSerializer::toHeaderValue($jiwa_stateful);
        }

        // path params
        if ($invoice_id !== null) {
            $resourcePath = str_replace(
                '{' . 'InvoiceID' . '}',
                ObjectSerializer::toPathValue($invoice_id),
                $resourcePath
            );
        }
        // path params
        if ($document_id !== null) {
            $resourcePath = str_replace(
                '{' . 'DocumentID' . '}',
                ObjectSerializer::toPathValue($document_id),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json', 'application/xml']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json', 'application/xml'],
                ['application/x-www-form-urlencoded', 'application/json', 'application/xml']
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            
            if($headers['Content-Type'] === 'application/json') {
                // \stdClass has no __toString(), so we should encode it manually
                if ($httpBody instanceof \stdClass) {
                    $httpBody = \GuzzleHttp\json_encode($httpBody);
                }
                // array has no __toString(), so we should encode it manually
                if(is_array($httpBody)) {
                    $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($httpBody));
                }
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\Query::build($formParams);
            }
        }

        // this endpoint requires HTTP basic authentication
        if ($this->config->getUsername() !== null || $this->config->getPassword() !== null) {
            $headers['Authorization'] = 'Basic ' . base64_encode($this->config->getUsername() . ":" . $this->config->getPassword());
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\Query::build($queryParams);
        return new Request(
            'DELETE',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation salesOrderDocumentGETRequestInvoiceIDDocumentsDocumentIDGet
     *
     * Retrieves a sales order document.
     *
     * @param  string $accept Accept Header (required)
     * @param  string $invoice_id invoice_id (required)
     * @param  string $document_id document_id (required)
     * @param  bool $jiwa_stateful Stateful indicator (optional)
     *
     * @throws \Jiwa\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Jiwa\Model\Document
     */
    public function salesOrderDocumentGETRequestInvoiceIDDocumentsDocumentIDGet($accept, $invoice_id, $document_id, $jiwa_stateful = null)
    {
        list($response) = $this->salesOrderDocumentGETRequestInvoiceIDDocumentsDocumentIDGetWithHttpInfo($accept, $invoice_id, $document_id, $jiwa_stateful);
        return $response;
    }

    /**
     * Operation salesOrderDocumentGETRequestInvoiceIDDocumentsDocumentIDGetWithHttpInfo
     *
     * Retrieves a sales order document.
     *
     * @param  string $accept Accept Header (required)
     * @param  string $invoice_id (required)
     * @param  string $document_id (required)
     * @param  bool $jiwa_stateful Stateful indicator (optional)
     *
     * @throws \Jiwa\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Jiwa\Model\Document, HTTP status code, HTTP response headers (array of strings)
     */
    public function salesOrderDocumentGETRequestInvoiceIDDocumentsDocumentIDGetWithHttpInfo($accept, $invoice_id, $document_id, $jiwa_stateful = null)
    {
        $returnType = '\Jiwa\Model\Document';
        $request = $this->salesOrderDocumentGETRequestInvoiceIDDocumentsDocumentIDGetRequest($accept, $invoice_id, $document_id, $jiwa_stateful);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Jiwa\Model\Document',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 403:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Jiwa\Model\Document',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 401:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Jiwa\Model\Document',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 404:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Jiwa\Model\Document',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation salesOrderDocumentGETRequestInvoiceIDDocumentsDocumentIDGetAsync
     *
     * Retrieves a sales order document.
     *
     * @param  string $accept Accept Header (required)
     * @param  string $invoice_id (required)
     * @param  string $document_id (required)
     * @param  bool $jiwa_stateful Stateful indicator (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function salesOrderDocumentGETRequestInvoiceIDDocumentsDocumentIDGetAsync($accept, $invoice_id, $document_id, $jiwa_stateful = null)
    {
        return $this->salesOrderDocumentGETRequestInvoiceIDDocumentsDocumentIDGetAsyncWithHttpInfo($accept, $invoice_id, $document_id, $jiwa_stateful)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation salesOrderDocumentGETRequestInvoiceIDDocumentsDocumentIDGetAsyncWithHttpInfo
     *
     * Retrieves a sales order document.
     *
     * @param  string $accept Accept Header (required)
     * @param  string $invoice_id (required)
     * @param  string $document_id (required)
     * @param  bool $jiwa_stateful Stateful indicator (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function salesOrderDocumentGETRequestInvoiceIDDocumentsDocumentIDGetAsyncWithHttpInfo($accept, $invoice_id, $document_id, $jiwa_stateful = null)
    {
        $returnType = '\Jiwa\Model\Document';
        $request = $this->salesOrderDocumentGETRequestInvoiceIDDocumentsDocumentIDGetRequest($accept, $invoice_id, $document_id, $jiwa_stateful);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'salesOrderDocumentGETRequestInvoiceIDDocumentsDocumentIDGet'
     *
     * @param  string $accept Accept Header (required)
     * @param  string $invoice_id (required)
     * @param  string $document_id (required)
     * @param  bool $jiwa_stateful Stateful indicator (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function salesOrderDocumentGETRequestInvoiceIDDocumentsDocumentIDGetRequest($accept, $invoice_id, $document_id, $jiwa_stateful = null)
    {
        // verify the required parameter 'accept' is set
        if ($accept === null || (is_array($accept) && count($accept) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $accept when calling salesOrderDocumentGETRequestInvoiceIDDocumentsDocumentIDGet'
            );
        }
        // verify the required parameter 'invoice_id' is set
        if ($invoice_id === null || (is_array($invoice_id) && count($invoice_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $invoice_id when calling salesOrderDocumentGETRequestInvoiceIDDocumentsDocumentIDGet'
            );
        }
        // verify the required parameter 'document_id' is set
        if ($document_id === null || (is_array($document_id) && count($document_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $document_id when calling salesOrderDocumentGETRequestInvoiceIDDocumentsDocumentIDGet'
            );
        }

        $resourcePath = '/SalesOrders/{InvoiceID}/Documents/{DocumentID}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // header params
        if ($accept !== null) {
            $headerParams['Accept'] = ObjectSerializer::toHeaderValue($accept);
        }
        // header params
        if ($jiwa_stateful !== null) {
            $headerParams['jiwa-stateful'] = ObjectSerializer::toHeaderValue($jiwa_stateful);
        }

        // path params
        if ($invoice_id !== null) {
            $resourcePath = str_replace(
                '{' . 'InvoiceID' . '}',
                ObjectSerializer::toPathValue($invoice_id),
                $resourcePath
            );
        }
        // path params
        if ($document_id !== null) {
            $resourcePath = str_replace(
                '{' . 'DocumentID' . '}',
                ObjectSerializer::toPathValue($document_id),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json', 'application/xml']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json', 'application/xml'],
                ['application/x-www-form-urlencoded', 'application/json', 'application/xml']
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            
            if($headers['Content-Type'] === 'application/json') {
                // \stdClass has no __toString(), so we should encode it manually
                if ($httpBody instanceof \stdClass) {
                    $httpBody = \GuzzleHttp\json_encode($httpBody);
                }
                // array has no __toString(), so we should encode it manually
                if(is_array($httpBody)) {
                    $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($httpBody));
                }
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\Query::build($formParams);
            }
        }

        // this endpoint requires HTTP basic authentication
        if ($this->config->getUsername() !== null || $this->config->getPassword() !== null) {
            $headers['Authorization'] = 'Basic ' . base64_encode($this->config->getUsername() . ":" . $this->config->getPassword());
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\Query::build($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation salesOrderDocumentPATCHRequestInvoiceIDDocumentsDocumentIDUpdate
     *
     * Updates a sales order document.
     *
     * @param  string $accept Accept Header (required)
     * @param  string $invoice_id invoice_id (required)
     * @param  string $document_id document_id (required)
     * @param  bool $jiwa_stateful Stateful indicator (optional)
     * @param  string $document_type document_type (optional)
     * @param  string $file_id file_id (optional)
     * @param  string $physical_file_name physical_file_name (optional)
     * @param  string $full_physical_file_name full_physical_file_name (optional)
     * @param  string $description description (optional)
     * @param  \DateTime $last_saved_date_time last_saved_date_time (optional)
     * @param  string $last_modified_by_staff_id last_modified_by_staff_id (optional)
     * @param  string $last_modified_by_staff_username last_modified_by_staff_username (optional)
     * @param  string $last_modified_by_staff_title last_modified_by_staff_title (optional)
     * @param  string $last_modified_by_staff_first_name last_modified_by_staff_first_name (optional)
     * @param  string $last_modified_by_staff_surname last_modified_by_staff_surname (optional)
     * @param  string $file_binary file_binary (optional)
     * @param  \Jiwa\Model\SalesOrderDocumentPATCHRequest $body body (optional)
     *
     * @throws \Jiwa\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Jiwa\Model\Document
     */
    public function salesOrderDocumentPATCHRequestInvoiceIDDocumentsDocumentIDUpdate($accept, $invoice_id, $document_id, $jiwa_stateful = null, $document_type = null, $file_id = null, $physical_file_name = null, $full_physical_file_name = null, $description = null, $last_saved_date_time = null, $last_modified_by_staff_id = null, $last_modified_by_staff_username = null, $last_modified_by_staff_title = null, $last_modified_by_staff_first_name = null, $last_modified_by_staff_surname = null, $file_binary = null, $body = null)
    {
        list($response) = $this->salesOrderDocumentPATCHRequestInvoiceIDDocumentsDocumentIDUpdateWithHttpInfo($accept, $invoice_id, $document_id, $jiwa_stateful, $document_type, $file_id, $physical_file_name, $full_physical_file_name, $description, $last_saved_date_time, $last_modified_by_staff_id, $last_modified_by_staff_username, $last_modified_by_staff_title, $last_modified_by_staff_first_name, $last_modified_by_staff_surname, $file_binary, $body);
        return $response;
    }

    /**
     * Operation salesOrderDocumentPATCHRequestInvoiceIDDocumentsDocumentIDUpdateWithHttpInfo
     *
     * Updates a sales order document.
     *
     * @param  string $accept Accept Header (required)
     * @param  string $invoice_id (required)
     * @param  string $document_id (required)
     * @param  bool $jiwa_stateful Stateful indicator (optional)
     * @param  string $document_type (optional)
     * @param  string $file_id (optional)
     * @param  string $physical_file_name (optional)
     * @param  string $full_physical_file_name (optional)
     * @param  string $description (optional)
     * @param  \DateTime $last_saved_date_time (optional)
     * @param  string $last_modified_by_staff_id (optional)
     * @param  string $last_modified_by_staff_username (optional)
     * @param  string $last_modified_by_staff_title (optional)
     * @param  string $last_modified_by_staff_first_name (optional)
     * @param  string $last_modified_by_staff_surname (optional)
     * @param  string $file_binary (optional)
     * @param  \Jiwa\Model\SalesOrderDocumentPATCHRequest $body (optional)
     *
     * @throws \Jiwa\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Jiwa\Model\Document, HTTP status code, HTTP response headers (array of strings)
     */
    public function salesOrderDocumentPATCHRequestInvoiceIDDocumentsDocumentIDUpdateWithHttpInfo($accept, $invoice_id, $document_id, $jiwa_stateful = null, $document_type = null, $file_id = null, $physical_file_name = null, $full_physical_file_name = null, $description = null, $last_saved_date_time = null, $last_modified_by_staff_id = null, $last_modified_by_staff_username = null, $last_modified_by_staff_title = null, $last_modified_by_staff_first_name = null, $last_modified_by_staff_surname = null, $file_binary = null, $body = null)
    {
        $returnType = '\Jiwa\Model\Document';
        $request = $this->salesOrderDocumentPATCHRequestInvoiceIDDocumentsDocumentIDUpdateRequest($accept, $invoice_id, $document_id, $jiwa_stateful, $document_type, $file_id, $physical_file_name, $full_physical_file_name, $description, $last_saved_date_time, $last_modified_by_staff_id, $last_modified_by_staff_username, $last_modified_by_staff_title, $last_modified_by_staff_first_name, $last_modified_by_staff_surname, $file_binary, $body);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Jiwa\Model\Document',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 401:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Jiwa\Model\Document',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 403:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Jiwa\Model\Document',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 404:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Jiwa\Model\Document',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation salesOrderDocumentPATCHRequestInvoiceIDDocumentsDocumentIDUpdateAsync
     *
     * Updates a sales order document.
     *
     * @param  string $accept Accept Header (required)
     * @param  string $invoice_id (required)
     * @param  string $document_id (required)
     * @param  bool $jiwa_stateful Stateful indicator (optional)
     * @param  string $document_type (optional)
     * @param  string $file_id (optional)
     * @param  string $physical_file_name (optional)
     * @param  string $full_physical_file_name (optional)
     * @param  string $description (optional)
     * @param  \DateTime $last_saved_date_time (optional)
     * @param  string $last_modified_by_staff_id (optional)
     * @param  string $last_modified_by_staff_username (optional)
     * @param  string $last_modified_by_staff_title (optional)
     * @param  string $last_modified_by_staff_first_name (optional)
     * @param  string $last_modified_by_staff_surname (optional)
     * @param  string $file_binary (optional)
     * @param  \Jiwa\Model\SalesOrderDocumentPATCHRequest $body (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function salesOrderDocumentPATCHRequestInvoiceIDDocumentsDocumentIDUpdateAsync($accept, $invoice_id, $document_id, $jiwa_stateful = null, $document_type = null, $file_id = null, $physical_file_name = null, $full_physical_file_name = null, $description = null, $last_saved_date_time = null, $last_modified_by_staff_id = null, $last_modified_by_staff_username = null, $last_modified_by_staff_title = null, $last_modified_by_staff_first_name = null, $last_modified_by_staff_surname = null, $file_binary = null, $body = null)
    {
        return $this->salesOrderDocumentPATCHRequestInvoiceIDDocumentsDocumentIDUpdateAsyncWithHttpInfo($accept, $invoice_id, $document_id, $jiwa_stateful, $document_type, $file_id, $physical_file_name, $full_physical_file_name, $description, $last_saved_date_time, $last_modified_by_staff_id, $last_modified_by_staff_username, $last_modified_by_staff_title, $last_modified_by_staff_first_name, $last_modified_by_staff_surname, $file_binary, $body)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation salesOrderDocumentPATCHRequestInvoiceIDDocumentsDocumentIDUpdateAsyncWithHttpInfo
     *
     * Updates a sales order document.
     *
     * @param  string $accept Accept Header (required)
     * @param  string $invoice_id (required)
     * @param  string $document_id (required)
     * @param  bool $jiwa_stateful Stateful indicator (optional)
     * @param  string $document_type (optional)
     * @param  string $file_id (optional)
     * @param  string $physical_file_name (optional)
     * @param  string $full_physical_file_name (optional)
     * @param  string $description (optional)
     * @param  \DateTime $last_saved_date_time (optional)
     * @param  string $last_modified_by_staff_id (optional)
     * @param  string $last_modified_by_staff_username (optional)
     * @param  string $last_modified_by_staff_title (optional)
     * @param  string $last_modified_by_staff_first_name (optional)
     * @param  string $last_modified_by_staff_surname (optional)
     * @param  string $file_binary (optional)
     * @param  \Jiwa\Model\SalesOrderDocumentPATCHRequest $body (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function salesOrderDocumentPATCHRequestInvoiceIDDocumentsDocumentIDUpdateAsyncWithHttpInfo($accept, $invoice_id, $document_id, $jiwa_stateful = null, $document_type = null, $file_id = null, $physical_file_name = null, $full_physical_file_name = null, $description = null, $last_saved_date_time = null, $last_modified_by_staff_id = null, $last_modified_by_staff_username = null, $last_modified_by_staff_title = null, $last_modified_by_staff_first_name = null, $last_modified_by_staff_surname = null, $file_binary = null, $body = null)
    {
        $returnType = '\Jiwa\Model\Document';
        $request = $this->salesOrderDocumentPATCHRequestInvoiceIDDocumentsDocumentIDUpdateRequest($accept, $invoice_id, $document_id, $jiwa_stateful, $document_type, $file_id, $physical_file_name, $full_physical_file_name, $description, $last_saved_date_time, $last_modified_by_staff_id, $last_modified_by_staff_username, $last_modified_by_staff_title, $last_modified_by_staff_first_name, $last_modified_by_staff_surname, $file_binary, $body);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'salesOrderDocumentPATCHRequestInvoiceIDDocumentsDocumentIDUpdate'
     *
     * @param  string $accept Accept Header (required)
     * @param  string $invoice_id (required)
     * @param  string $document_id (required)
     * @param  bool $jiwa_stateful Stateful indicator (optional)
     * @param  string $document_type (optional)
     * @param  string $file_id (optional)
     * @param  string $physical_file_name (optional)
     * @param  string $full_physical_file_name (optional)
     * @param  string $description (optional)
     * @param  \DateTime $last_saved_date_time (optional)
     * @param  string $last_modified_by_staff_id (optional)
     * @param  string $last_modified_by_staff_username (optional)
     * @param  string $last_modified_by_staff_title (optional)
     * @param  string $last_modified_by_staff_first_name (optional)
     * @param  string $last_modified_by_staff_surname (optional)
     * @param  string $file_binary (optional)
     * @param  \Jiwa\Model\SalesOrderDocumentPATCHRequest $body (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function salesOrderDocumentPATCHRequestInvoiceIDDocumentsDocumentIDUpdateRequest($accept, $invoice_id, $document_id, $jiwa_stateful = null, $document_type = null, $file_id = null, $physical_file_name = null, $full_physical_file_name = null, $description = null, $last_saved_date_time = null, $last_modified_by_staff_id = null, $last_modified_by_staff_username = null, $last_modified_by_staff_title = null, $last_modified_by_staff_first_name = null, $last_modified_by_staff_surname = null, $file_binary = null, $body = null)
    {
        // verify the required parameter 'accept' is set
        if ($accept === null || (is_array($accept) && count($accept) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $accept when calling salesOrderDocumentPATCHRequestInvoiceIDDocumentsDocumentIDUpdate'
            );
        }
        // verify the required parameter 'invoice_id' is set
        if ($invoice_id === null || (is_array($invoice_id) && count($invoice_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $invoice_id when calling salesOrderDocumentPATCHRequestInvoiceIDDocumentsDocumentIDUpdate'
            );
        }
        // verify the required parameter 'document_id' is set
        if ($document_id === null || (is_array($document_id) && count($document_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $document_id when calling salesOrderDocumentPATCHRequestInvoiceIDDocumentsDocumentIDUpdate'
            );
        }

        $resourcePath = '/SalesOrders/{InvoiceID}/Documents/{DocumentID}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        if ($document_type !== null) {
            $queryParams['DocumentType'] = ObjectSerializer::toQueryValue($document_type);
        }
        // query params
        if ($file_id !== null) {
            $queryParams['FileID'] = ObjectSerializer::toQueryValue($file_id);
        }
        // query params
        if ($physical_file_name !== null) {
            $queryParams['PhysicalFileName'] = ObjectSerializer::toQueryValue($physical_file_name);
        }
        // query params
        if ($full_physical_file_name !== null) {
            $queryParams['FullPhysicalFileName'] = ObjectSerializer::toQueryValue($full_physical_file_name);
        }
        // query params
        if ($description !== null) {
            $queryParams['Description'] = ObjectSerializer::toQueryValue($description);
        }
        // query params
        if ($last_saved_date_time !== null) {
            $queryParams['LastSavedDateTime'] = ObjectSerializer::toQueryValue($last_saved_date_time);
        }
        // query params
        if ($last_modified_by_staff_id !== null) {
            $queryParams['LastModifiedByStaffID'] = ObjectSerializer::toQueryValue($last_modified_by_staff_id);
        }
        // query params
        if ($last_modified_by_staff_username !== null) {
            $queryParams['LastModifiedByStaffUsername'] = ObjectSerializer::toQueryValue($last_modified_by_staff_username);
        }
        // query params
        if ($last_modified_by_staff_title !== null) {
            $queryParams['LastModifiedByStaffTitle'] = ObjectSerializer::toQueryValue($last_modified_by_staff_title);
        }
        // query params
        if ($last_modified_by_staff_first_name !== null) {
            $queryParams['LastModifiedByStaffFirstName'] = ObjectSerializer::toQueryValue($last_modified_by_staff_first_name);
        }
        // query params
        if ($last_modified_by_staff_surname !== null) {
            $queryParams['LastModifiedByStaffSurname'] = ObjectSerializer::toQueryValue($last_modified_by_staff_surname);
        }
        // query params
        if ($file_binary !== null) {
            $queryParams['FileBinary'] = ObjectSerializer::toQueryValue($file_binary);
        }
        // header params
        if ($accept !== null) {
            $headerParams['Accept'] = ObjectSerializer::toHeaderValue($accept);
        }
        // header params
        if ($jiwa_stateful !== null) {
            $headerParams['jiwa-stateful'] = ObjectSerializer::toHeaderValue($jiwa_stateful);
        }

        // path params
        if ($invoice_id !== null) {
            $resourcePath = str_replace(
                '{' . 'InvoiceID' . '}',
                ObjectSerializer::toPathValue($invoice_id),
                $resourcePath
            );
        }
        // path params
        if ($document_id !== null) {
            $resourcePath = str_replace(
                '{' . 'DocumentID' . '}',
                ObjectSerializer::toPathValue($document_id),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;
        if (isset($body)) {
            $_tempBody = $body;
        }

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json', 'application/xml']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json', 'application/xml'],
                ['application/x-www-form-urlencoded', 'application/json', 'application/xml']
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            
            if($headers['Content-Type'] === 'application/json') {
                // \stdClass has no __toString(), so we should encode it manually
                if ($httpBody instanceof \stdClass) {
                    $httpBody = \GuzzleHttp\json_encode($httpBody);
                }
                // array has no __toString(), so we should encode it manually
                if(is_array($httpBody)) {
                    $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($httpBody));
                }
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\Query::build($formParams);
            }
        }

        // this endpoint requires HTTP basic authentication
        if ($this->config->getUsername() !== null || $this->config->getPassword() !== null) {
            $headers['Authorization'] = 'Basic ' . base64_encode($this->config->getUsername() . ":" . $this->config->getPassword());
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\Query::build($queryParams);
        return new Request(
            'PATCH',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation salesOrderDocumentPOSTRequestInvoiceIDDocumentsPost
     *
     * Appends a document to a sales order.
     *
     * @param  string $accept Accept Header (required)
     * @param  string $invoice_id invoice_id (required)
     * @param  bool $jiwa_stateful Stateful indicator (optional)
     * @param  string $document_type document_type (optional)
     * @param  string $file_id file_id (optional)
     * @param  string $physical_file_name physical_file_name (optional)
     * @param  string $full_physical_file_name full_physical_file_name (optional)
     * @param  string $description description (optional)
     * @param  string $last_modified_by_staff_id last_modified_by_staff_id (optional)
     * @param  string $last_modified_by_staff_username last_modified_by_staff_username (optional)
     * @param  string $last_modified_by_staff_title last_modified_by_staff_title (optional)
     * @param  string $last_modified_by_staff_first_name last_modified_by_staff_first_name (optional)
     * @param  string $last_modified_by_staff_surname last_modified_by_staff_surname (optional)
     * @param  string $file_binary file_binary (optional)
     * @param  \Jiwa\Model\SalesOrderDocumentPOSTRequest $body body (optional)
     *
     * @throws \Jiwa\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Jiwa\Model\Document
     */
    public function salesOrderDocumentPOSTRequestInvoiceIDDocumentsPost($accept, $invoice_id, $jiwa_stateful = null, $document_type = null, $file_id = null, $physical_file_name = null, $full_physical_file_name = null, $description = null, $last_modified_by_staff_id = null, $last_modified_by_staff_username = null, $last_modified_by_staff_title = null, $last_modified_by_staff_first_name = null, $last_modified_by_staff_surname = null, $file_binary = null, $body = null)
    {
        list($response) = $this->salesOrderDocumentPOSTRequestInvoiceIDDocumentsPostWithHttpInfo($accept, $invoice_id, $jiwa_stateful, $document_type, $file_id, $physical_file_name, $full_physical_file_name, $description, $last_modified_by_staff_id, $last_modified_by_staff_username, $last_modified_by_staff_title, $last_modified_by_staff_first_name, $last_modified_by_staff_surname, $file_binary, $body);
        return $response;
    }

    /**
     * Operation salesOrderDocumentPOSTRequestInvoiceIDDocumentsPostWithHttpInfo
     *
     * Appends a document to a sales order.
     *
     * @param  string $accept Accept Header (required)
     * @param  string $invoice_id (required)
     * @param  bool $jiwa_stateful Stateful indicator (optional)
     * @param  string $document_type (optional)
     * @param  string $file_id (optional)
     * @param  string $physical_file_name (optional)
     * @param  string $full_physical_file_name (optional)
     * @param  string $description (optional)
     * @param  string $last_modified_by_staff_id (optional)
     * @param  string $last_modified_by_staff_username (optional)
     * @param  string $last_modified_by_staff_title (optional)
     * @param  string $last_modified_by_staff_first_name (optional)
     * @param  string $last_modified_by_staff_surname (optional)
     * @param  string $file_binary (optional)
     * @param  \Jiwa\Model\SalesOrderDocumentPOSTRequest $body (optional)
     *
     * @throws \Jiwa\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Jiwa\Model\Document, HTTP status code, HTTP response headers (array of strings)
     */
    public function salesOrderDocumentPOSTRequestInvoiceIDDocumentsPostWithHttpInfo($accept, $invoice_id, $jiwa_stateful = null, $document_type = null, $file_id = null, $physical_file_name = null, $full_physical_file_name = null, $description = null, $last_modified_by_staff_id = null, $last_modified_by_staff_username = null, $last_modified_by_staff_title = null, $last_modified_by_staff_first_name = null, $last_modified_by_staff_surname = null, $file_binary = null, $body = null)
    {
        $returnType = '\Jiwa\Model\Document';
        $request = $this->salesOrderDocumentPOSTRequestInvoiceIDDocumentsPostRequest($accept, $invoice_id, $jiwa_stateful, $document_type, $file_id, $physical_file_name, $full_physical_file_name, $description, $last_modified_by_staff_id, $last_modified_by_staff_username, $last_modified_by_staff_title, $last_modified_by_staff_first_name, $last_modified_by_staff_surname, $file_binary, $body);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Jiwa\Model\Document',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 201:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Jiwa\Model\Document',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 401:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Jiwa\Model\Document',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 404:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Jiwa\Model\Document',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 403:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Jiwa\Model\Document',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation salesOrderDocumentPOSTRequestInvoiceIDDocumentsPostAsync
     *
     * Appends a document to a sales order.
     *
     * @param  string $accept Accept Header (required)
     * @param  string $invoice_id (required)
     * @param  bool $jiwa_stateful Stateful indicator (optional)
     * @param  string $document_type (optional)
     * @param  string $file_id (optional)
     * @param  string $physical_file_name (optional)
     * @param  string $full_physical_file_name (optional)
     * @param  string $description (optional)
     * @param  string $last_modified_by_staff_id (optional)
     * @param  string $last_modified_by_staff_username (optional)
     * @param  string $last_modified_by_staff_title (optional)
     * @param  string $last_modified_by_staff_first_name (optional)
     * @param  string $last_modified_by_staff_surname (optional)
     * @param  string $file_binary (optional)
     * @param  \Jiwa\Model\SalesOrderDocumentPOSTRequest $body (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function salesOrderDocumentPOSTRequestInvoiceIDDocumentsPostAsync($accept, $invoice_id, $jiwa_stateful = null, $document_type = null, $file_id = null, $physical_file_name = null, $full_physical_file_name = null, $description = null, $last_modified_by_staff_id = null, $last_modified_by_staff_username = null, $last_modified_by_staff_title = null, $last_modified_by_staff_first_name = null, $last_modified_by_staff_surname = null, $file_binary = null, $body = null)
    {
        return $this->salesOrderDocumentPOSTRequestInvoiceIDDocumentsPostAsyncWithHttpInfo($accept, $invoice_id, $jiwa_stateful, $document_type, $file_id, $physical_file_name, $full_physical_file_name, $description, $last_modified_by_staff_id, $last_modified_by_staff_username, $last_modified_by_staff_title, $last_modified_by_staff_first_name, $last_modified_by_staff_surname, $file_binary, $body)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation salesOrderDocumentPOSTRequestInvoiceIDDocumentsPostAsyncWithHttpInfo
     *
     * Appends a document to a sales order.
     *
     * @param  string $accept Accept Header (required)
     * @param  string $invoice_id (required)
     * @param  bool $jiwa_stateful Stateful indicator (optional)
     * @param  string $document_type (optional)
     * @param  string $file_id (optional)
     * @param  string $physical_file_name (optional)
     * @param  string $full_physical_file_name (optional)
     * @param  string $description (optional)
     * @param  string $last_modified_by_staff_id (optional)
     * @param  string $last_modified_by_staff_username (optional)
     * @param  string $last_modified_by_staff_title (optional)
     * @param  string $last_modified_by_staff_first_name (optional)
     * @param  string $last_modified_by_staff_surname (optional)
     * @param  string $file_binary (optional)
     * @param  \Jiwa\Model\SalesOrderDocumentPOSTRequest $body (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function salesOrderDocumentPOSTRequestInvoiceIDDocumentsPostAsyncWithHttpInfo($accept, $invoice_id, $jiwa_stateful = null, $document_type = null, $file_id = null, $physical_file_name = null, $full_physical_file_name = null, $description = null, $last_modified_by_staff_id = null, $last_modified_by_staff_username = null, $last_modified_by_staff_title = null, $last_modified_by_staff_first_name = null, $last_modified_by_staff_surname = null, $file_binary = null, $body = null)
    {
        $returnType = '\Jiwa\Model\Document';
        $request = $this->salesOrderDocumentPOSTRequestInvoiceIDDocumentsPostRequest($accept, $invoice_id, $jiwa_stateful, $document_type, $file_id, $physical_file_name, $full_physical_file_name, $description, $last_modified_by_staff_id, $last_modified_by_staff_username, $last_modified_by_staff_title, $last_modified_by_staff_first_name, $last_modified_by_staff_surname, $file_binary, $body);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'salesOrderDocumentPOSTRequestInvoiceIDDocumentsPost'
     *
     * @param  string $accept Accept Header (required)
     * @param  string $invoice_id (required)
     * @param  bool $jiwa_stateful Stateful indicator (optional)
     * @param  string $document_type (optional)
     * @param  string $file_id (optional)
     * @param  string $physical_file_name (optional)
     * @param  string $full_physical_file_name (optional)
     * @param  string $description (optional)
     * @param  string $last_modified_by_staff_id (optional)
     * @param  string $last_modified_by_staff_username (optional)
     * @param  string $last_modified_by_staff_title (optional)
     * @param  string $last_modified_by_staff_first_name (optional)
     * @param  string $last_modified_by_staff_surname (optional)
     * @param  string $file_binary (optional)
     * @param  \Jiwa\Model\SalesOrderDocumentPOSTRequest $body (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function salesOrderDocumentPOSTRequestInvoiceIDDocumentsPostRequest($accept, $invoice_id, $jiwa_stateful = null, $document_type = null, $file_id = null, $physical_file_name = null, $full_physical_file_name = null, $description = null, $last_modified_by_staff_id = null, $last_modified_by_staff_username = null, $last_modified_by_staff_title = null, $last_modified_by_staff_first_name = null, $last_modified_by_staff_surname = null, $file_binary = null, $body = null)
    {
        // verify the required parameter 'accept' is set
        if ($accept === null || (is_array($accept) && count($accept) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $accept when calling salesOrderDocumentPOSTRequestInvoiceIDDocumentsPost'
            );
        }
        // verify the required parameter 'invoice_id' is set
        if ($invoice_id === null || (is_array($invoice_id) && count($invoice_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $invoice_id when calling salesOrderDocumentPOSTRequestInvoiceIDDocumentsPost'
            );
        }

        $resourcePath = '/SalesOrders/{InvoiceID}/Documents';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        if ($document_type !== null) {
            $queryParams['DocumentType'] = ObjectSerializer::toQueryValue($document_type);
        }
        // query params
        if ($file_id !== null) {
            $queryParams['FileID'] = ObjectSerializer::toQueryValue($file_id);
        }
        // query params
        if ($physical_file_name !== null) {
            $queryParams['PhysicalFileName'] = ObjectSerializer::toQueryValue($physical_file_name);
        }
        // query params
        if ($full_physical_file_name !== null) {
            $queryParams['FullPhysicalFileName'] = ObjectSerializer::toQueryValue($full_physical_file_name);
        }
        // query params
        if ($description !== null) {
            $queryParams['Description'] = ObjectSerializer::toQueryValue($description);
        }
        // query params
        if ($last_modified_by_staff_id !== null) {
            $queryParams['LastModifiedByStaffID'] = ObjectSerializer::toQueryValue($last_modified_by_staff_id);
        }
        // query params
        if ($last_modified_by_staff_username !== null) {
            $queryParams['LastModifiedByStaffUsername'] = ObjectSerializer::toQueryValue($last_modified_by_staff_username);
        }
        // query params
        if ($last_modified_by_staff_title !== null) {
            $queryParams['LastModifiedByStaffTitle'] = ObjectSerializer::toQueryValue($last_modified_by_staff_title);
        }
        // query params
        if ($last_modified_by_staff_first_name !== null) {
            $queryParams['LastModifiedByStaffFirstName'] = ObjectSerializer::toQueryValue($last_modified_by_staff_first_name);
        }
        // query params
        if ($last_modified_by_staff_surname !== null) {
            $queryParams['LastModifiedByStaffSurname'] = ObjectSerializer::toQueryValue($last_modified_by_staff_surname);
        }
        // query params
        if ($file_binary !== null) {
            $queryParams['FileBinary'] = ObjectSerializer::toQueryValue($file_binary);
        }
        // header params
        if ($accept !== null) {
            $headerParams['Accept'] = ObjectSerializer::toHeaderValue($accept);
        }
        // header params
        if ($jiwa_stateful !== null) {
            $headerParams['jiwa-stateful'] = ObjectSerializer::toHeaderValue($jiwa_stateful);
        }

        // path params
        if ($invoice_id !== null) {
            $resourcePath = str_replace(
                '{' . 'InvoiceID' . '}',
                ObjectSerializer::toPathValue($invoice_id),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;
        if (isset($body)) {
            $_tempBody = $body;
        }

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json', 'application/xml']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json', 'application/xml'],
                ['application/x-www-form-urlencoded', 'application/json', 'application/xml']
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            
            if($headers['Content-Type'] === 'application/json') {
                // \stdClass has no __toString(), so we should encode it manually
                if ($httpBody instanceof \stdClass) {
                    $httpBody = \GuzzleHttp\json_encode($httpBody);
                }
                // array has no __toString(), so we should encode it manually
                if(is_array($httpBody)) {
                    $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($httpBody));
                }
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\Query::build($formParams);
            }
        }

        // this endpoint requires HTTP basic authentication
        if ($this->config->getUsername() !== null || $this->config->getPassword() !== null) {
            $headers['Authorization'] = 'Basic ' . base64_encode($this->config->getUsername() . ":" . $this->config->getPassword());
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\Query::build($queryParams);
        return new Request(
            'POST',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation salesOrderDocumentTypeDELETERequestDocumentTypesDocumentTypeIDDelete
     *
     * Deletes a sales order document type.
     *
     * @param  string $accept Accept Header (required)
     * @param  string $document_type_id document_type_id (required)
     * @param  bool $jiwa_stateful Stateful indicator (optional)
     *
     * @throws \Jiwa\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Jiwa\Model\Object
     */
    public function salesOrderDocumentTypeDELETERequestDocumentTypesDocumentTypeIDDelete($accept, $document_type_id, $jiwa_stateful = null)
    {
        list($response) = $this->salesOrderDocumentTypeDELETERequestDocumentTypesDocumentTypeIDDeleteWithHttpInfo($accept, $document_type_id, $jiwa_stateful);
        return $response;
    }

    /**
     * Operation salesOrderDocumentTypeDELETERequestDocumentTypesDocumentTypeIDDeleteWithHttpInfo
     *
     * Deletes a sales order document type.
     *
     * @param  string $accept Accept Header (required)
     * @param  string $document_type_id (required)
     * @param  bool $jiwa_stateful Stateful indicator (optional)
     *
     * @throws \Jiwa\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Jiwa\Model\Object, HTTP status code, HTTP response headers (array of strings)
     */
    public function salesOrderDocumentTypeDELETERequestDocumentTypesDocumentTypeIDDeleteWithHttpInfo($accept, $document_type_id, $jiwa_stateful = null)
    {
        $returnType = '\Jiwa\Model\Object';
        $request = $this->salesOrderDocumentTypeDELETERequestDocumentTypesDocumentTypeIDDeleteRequest($accept, $document_type_id, $jiwa_stateful);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Jiwa\Model\Object',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 204:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Jiwa\Model\Object',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 404:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Jiwa\Model\Object',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 401:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Jiwa\Model\Object',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 403:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Jiwa\Model\Object',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation salesOrderDocumentTypeDELETERequestDocumentTypesDocumentTypeIDDeleteAsync
     *
     * Deletes a sales order document type.
     *
     * @param  string $accept Accept Header (required)
     * @param  string $document_type_id (required)
     * @param  bool $jiwa_stateful Stateful indicator (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function salesOrderDocumentTypeDELETERequestDocumentTypesDocumentTypeIDDeleteAsync($accept, $document_type_id, $jiwa_stateful = null)
    {
        return $this->salesOrderDocumentTypeDELETERequestDocumentTypesDocumentTypeIDDeleteAsyncWithHttpInfo($accept, $document_type_id, $jiwa_stateful)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation salesOrderDocumentTypeDELETERequestDocumentTypesDocumentTypeIDDeleteAsyncWithHttpInfo
     *
     * Deletes a sales order document type.
     *
     * @param  string $accept Accept Header (required)
     * @param  string $document_type_id (required)
     * @param  bool $jiwa_stateful Stateful indicator (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function salesOrderDocumentTypeDELETERequestDocumentTypesDocumentTypeIDDeleteAsyncWithHttpInfo($accept, $document_type_id, $jiwa_stateful = null)
    {
        $returnType = '\Jiwa\Model\Object';
        $request = $this->salesOrderDocumentTypeDELETERequestDocumentTypesDocumentTypeIDDeleteRequest($accept, $document_type_id, $jiwa_stateful);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'salesOrderDocumentTypeDELETERequestDocumentTypesDocumentTypeIDDelete'
     *
     * @param  string $accept Accept Header (required)
     * @param  string $document_type_id (required)
     * @param  bool $jiwa_stateful Stateful indicator (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function salesOrderDocumentTypeDELETERequestDocumentTypesDocumentTypeIDDeleteRequest($accept, $document_type_id, $jiwa_stateful = null)
    {
        // verify the required parameter 'accept' is set
        if ($accept === null || (is_array($accept) && count($accept) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $accept when calling salesOrderDocumentTypeDELETERequestDocumentTypesDocumentTypeIDDelete'
            );
        }
        // verify the required parameter 'document_type_id' is set
        if ($document_type_id === null || (is_array($document_type_id) && count($document_type_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $document_type_id when calling salesOrderDocumentTypeDELETERequestDocumentTypesDocumentTypeIDDelete'
            );
        }

        $resourcePath = '/SalesOrders/DocumentTypes/{DocumentTypeID}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // header params
        if ($accept !== null) {
            $headerParams['Accept'] = ObjectSerializer::toHeaderValue($accept);
        }
        // header params
        if ($jiwa_stateful !== null) {
            $headerParams['jiwa-stateful'] = ObjectSerializer::toHeaderValue($jiwa_stateful);
        }

        // path params
        if ($document_type_id !== null) {
            $resourcePath = str_replace(
                '{' . 'DocumentTypeID' . '}',
                ObjectSerializer::toPathValue($document_type_id),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json', 'application/xml']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json', 'application/xml'],
                ['application/x-www-form-urlencoded', 'application/json', 'application/xml']
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            
            if($headers['Content-Type'] === 'application/json') {
                // \stdClass has no __toString(), so we should encode it manually
                if ($httpBody instanceof \stdClass) {
                    $httpBody = \GuzzleHttp\json_encode($httpBody);
                }
                // array has no __toString(), so we should encode it manually
                if(is_array($httpBody)) {
                    $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($httpBody));
                }
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\Query::build($formParams);
            }
        }

        // this endpoint requires HTTP basic authentication
        if ($this->config->getUsername() !== null || $this->config->getPassword() !== null) {
            $headers['Authorization'] = 'Basic ' . base64_encode($this->config->getUsername() . ":" . $this->config->getPassword());
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\Query::build($queryParams);
        return new Request(
            'DELETE',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation salesOrderDocumentTypeGETRequestDocumentTypesDocumentTypeIDGet
     *
     * Retrieves a sales order document type.
     *
     * @param  string $accept Accept Header (required)
     * @param  string $document_type_id document_type_id (required)
     * @param  bool $jiwa_stateful Stateful indicator (optional)
     *
     * @throws \Jiwa\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Jiwa\Model\DocumentType
     */
    public function salesOrderDocumentTypeGETRequestDocumentTypesDocumentTypeIDGet($accept, $document_type_id, $jiwa_stateful = null)
    {
        list($response) = $this->salesOrderDocumentTypeGETRequestDocumentTypesDocumentTypeIDGetWithHttpInfo($accept, $document_type_id, $jiwa_stateful);
        return $response;
    }

    /**
     * Operation salesOrderDocumentTypeGETRequestDocumentTypesDocumentTypeIDGetWithHttpInfo
     *
     * Retrieves a sales order document type.
     *
     * @param  string $accept Accept Header (required)
     * @param  string $document_type_id (required)
     * @param  bool $jiwa_stateful Stateful indicator (optional)
     *
     * @throws \Jiwa\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Jiwa\Model\DocumentType, HTTP status code, HTTP response headers (array of strings)
     */
    public function salesOrderDocumentTypeGETRequestDocumentTypesDocumentTypeIDGetWithHttpInfo($accept, $document_type_id, $jiwa_stateful = null)
    {
        $returnType = '\Jiwa\Model\DocumentType';
        $request = $this->salesOrderDocumentTypeGETRequestDocumentTypesDocumentTypeIDGetRequest($accept, $document_type_id, $jiwa_stateful);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Jiwa\Model\DocumentType',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 403:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Jiwa\Model\DocumentType',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 401:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Jiwa\Model\DocumentType',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 404:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Jiwa\Model\DocumentType',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation salesOrderDocumentTypeGETRequestDocumentTypesDocumentTypeIDGetAsync
     *
     * Retrieves a sales order document type.
     *
     * @param  string $accept Accept Header (required)
     * @param  string $document_type_id (required)
     * @param  bool $jiwa_stateful Stateful indicator (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function salesOrderDocumentTypeGETRequestDocumentTypesDocumentTypeIDGetAsync($accept, $document_type_id, $jiwa_stateful = null)
    {
        return $this->salesOrderDocumentTypeGETRequestDocumentTypesDocumentTypeIDGetAsyncWithHttpInfo($accept, $document_type_id, $jiwa_stateful)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation salesOrderDocumentTypeGETRequestDocumentTypesDocumentTypeIDGetAsyncWithHttpInfo
     *
     * Retrieves a sales order document type.
     *
     * @param  string $accept Accept Header (required)
     * @param  string $document_type_id (required)
     * @param  bool $jiwa_stateful Stateful indicator (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function salesOrderDocumentTypeGETRequestDocumentTypesDocumentTypeIDGetAsyncWithHttpInfo($accept, $document_type_id, $jiwa_stateful = null)
    {
        $returnType = '\Jiwa\Model\DocumentType';
        $request = $this->salesOrderDocumentTypeGETRequestDocumentTypesDocumentTypeIDGetRequest($accept, $document_type_id, $jiwa_stateful);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'salesOrderDocumentTypeGETRequestDocumentTypesDocumentTypeIDGet'
     *
     * @param  string $accept Accept Header (required)
     * @param  string $document_type_id (required)
     * @param  bool $jiwa_stateful Stateful indicator (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function salesOrderDocumentTypeGETRequestDocumentTypesDocumentTypeIDGetRequest($accept, $document_type_id, $jiwa_stateful = null)
    {
        // verify the required parameter 'accept' is set
        if ($accept === null || (is_array($accept) && count($accept) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $accept when calling salesOrderDocumentTypeGETRequestDocumentTypesDocumentTypeIDGet'
            );
        }
        // verify the required parameter 'document_type_id' is set
        if ($document_type_id === null || (is_array($document_type_id) && count($document_type_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $document_type_id when calling salesOrderDocumentTypeGETRequestDocumentTypesDocumentTypeIDGet'
            );
        }

        $resourcePath = '/SalesOrders/DocumentTypes/{DocumentTypeID}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // header params
        if ($accept !== null) {
            $headerParams['Accept'] = ObjectSerializer::toHeaderValue($accept);
        }
        // header params
        if ($jiwa_stateful !== null) {
            $headerParams['jiwa-stateful'] = ObjectSerializer::toHeaderValue($jiwa_stateful);
        }

        // path params
        if ($document_type_id !== null) {
            $resourcePath = str_replace(
                '{' . 'DocumentTypeID' . '}',
                ObjectSerializer::toPathValue($document_type_id),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json', 'application/xml']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json', 'application/xml'],
                ['application/x-www-form-urlencoded', 'application/json', 'application/xml']
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            
            if($headers['Content-Type'] === 'application/json') {
                // \stdClass has no __toString(), so we should encode it manually
                if ($httpBody instanceof \stdClass) {
                    $httpBody = \GuzzleHttp\json_encode($httpBody);
                }
                // array has no __toString(), so we should encode it manually
                if(is_array($httpBody)) {
                    $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($httpBody));
                }
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\Query::build($formParams);
            }
        }

        // this endpoint requires HTTP basic authentication
        if ($this->config->getUsername() !== null || $this->config->getPassword() !== null) {
            $headers['Authorization'] = 'Basic ' . base64_encode($this->config->getUsername() . ":" . $this->config->getPassword());
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\Query::build($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation salesOrderDocumentTypePATCHRequestDocumentTypesDocumentTypeIDUpdate
     *
     * Updates a sales order document type.
     *
     * @param  string $accept Accept Header (required)
     * @param  string $document_type_id document_type_id (required)
     * @param  bool $jiwa_stateful Stateful indicator (optional)
     * @param  string $description description (optional)
     * @param  bool $default_type default_type (optional)
     * @param  int $item_no item_no (optional)
     * @param  \Jiwa\Model\SalesOrderDocumentTypePATCHRequest $body body (optional)
     *
     * @throws \Jiwa\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Jiwa\Model\DocumentType
     */
    public function salesOrderDocumentTypePATCHRequestDocumentTypesDocumentTypeIDUpdate($accept, $document_type_id, $jiwa_stateful = null, $description = null, $default_type = null, $item_no = null, $body = null)
    {
        list($response) = $this->salesOrderDocumentTypePATCHRequestDocumentTypesDocumentTypeIDUpdateWithHttpInfo($accept, $document_type_id, $jiwa_stateful, $description, $default_type, $item_no, $body);
        return $response;
    }

    /**
     * Operation salesOrderDocumentTypePATCHRequestDocumentTypesDocumentTypeIDUpdateWithHttpInfo
     *
     * Updates a sales order document type.
     *
     * @param  string $accept Accept Header (required)
     * @param  string $document_type_id (required)
     * @param  bool $jiwa_stateful Stateful indicator (optional)
     * @param  string $description (optional)
     * @param  bool $default_type (optional)
     * @param  int $item_no (optional)
     * @param  \Jiwa\Model\SalesOrderDocumentTypePATCHRequest $body (optional)
     *
     * @throws \Jiwa\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Jiwa\Model\DocumentType, HTTP status code, HTTP response headers (array of strings)
     */
    public function salesOrderDocumentTypePATCHRequestDocumentTypesDocumentTypeIDUpdateWithHttpInfo($accept, $document_type_id, $jiwa_stateful = null, $description = null, $default_type = null, $item_no = null, $body = null)
    {
        $returnType = '\Jiwa\Model\DocumentType';
        $request = $this->salesOrderDocumentTypePATCHRequestDocumentTypesDocumentTypeIDUpdateRequest($accept, $document_type_id, $jiwa_stateful, $description, $default_type, $item_no, $body);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Jiwa\Model\DocumentType',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 403:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Jiwa\Model\DocumentType',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 404:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Jiwa\Model\DocumentType',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 401:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Jiwa\Model\DocumentType',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation salesOrderDocumentTypePATCHRequestDocumentTypesDocumentTypeIDUpdateAsync
     *
     * Updates a sales order document type.
     *
     * @param  string $accept Accept Header (required)
     * @param  string $document_type_id (required)
     * @param  bool $jiwa_stateful Stateful indicator (optional)
     * @param  string $description (optional)
     * @param  bool $default_type (optional)
     * @param  int $item_no (optional)
     * @param  \Jiwa\Model\SalesOrderDocumentTypePATCHRequest $body (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function salesOrderDocumentTypePATCHRequestDocumentTypesDocumentTypeIDUpdateAsync($accept, $document_type_id, $jiwa_stateful = null, $description = null, $default_type = null, $item_no = null, $body = null)
    {
        return $this->salesOrderDocumentTypePATCHRequestDocumentTypesDocumentTypeIDUpdateAsyncWithHttpInfo($accept, $document_type_id, $jiwa_stateful, $description, $default_type, $item_no, $body)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation salesOrderDocumentTypePATCHRequestDocumentTypesDocumentTypeIDUpdateAsyncWithHttpInfo
     *
     * Updates a sales order document type.
     *
     * @param  string $accept Accept Header (required)
     * @param  string $document_type_id (required)
     * @param  bool $jiwa_stateful Stateful indicator (optional)
     * @param  string $description (optional)
     * @param  bool $default_type (optional)
     * @param  int $item_no (optional)
     * @param  \Jiwa\Model\SalesOrderDocumentTypePATCHRequest $body (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function salesOrderDocumentTypePATCHRequestDocumentTypesDocumentTypeIDUpdateAsyncWithHttpInfo($accept, $document_type_id, $jiwa_stateful = null, $description = null, $default_type = null, $item_no = null, $body = null)
    {
        $returnType = '\Jiwa\Model\DocumentType';
        $request = $this->salesOrderDocumentTypePATCHRequestDocumentTypesDocumentTypeIDUpdateRequest($accept, $document_type_id, $jiwa_stateful, $description, $default_type, $item_no, $body);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'salesOrderDocumentTypePATCHRequestDocumentTypesDocumentTypeIDUpdate'
     *
     * @param  string $accept Accept Header (required)
     * @param  string $document_type_id (required)
     * @param  bool $jiwa_stateful Stateful indicator (optional)
     * @param  string $description (optional)
     * @param  bool $default_type (optional)
     * @param  int $item_no (optional)
     * @param  \Jiwa\Model\SalesOrderDocumentTypePATCHRequest $body (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function salesOrderDocumentTypePATCHRequestDocumentTypesDocumentTypeIDUpdateRequest($accept, $document_type_id, $jiwa_stateful = null, $description = null, $default_type = null, $item_no = null, $body = null)
    {
        // verify the required parameter 'accept' is set
        if ($accept === null || (is_array($accept) && count($accept) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $accept when calling salesOrderDocumentTypePATCHRequestDocumentTypesDocumentTypeIDUpdate'
            );
        }
        // verify the required parameter 'document_type_id' is set
        if ($document_type_id === null || (is_array($document_type_id) && count($document_type_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $document_type_id when calling salesOrderDocumentTypePATCHRequestDocumentTypesDocumentTypeIDUpdate'
            );
        }

        $resourcePath = '/SalesOrders/DocumentTypes/{DocumentTypeID}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        if ($description !== null) {
            $queryParams['Description'] = ObjectSerializer::toQueryValue($description);
        }
        // query params
        if ($default_type !== null) {
            $queryParams['DefaultType'] = ObjectSerializer::toQueryValue($default_type);
        }
        // query params
        if ($item_no !== null) {
            $queryParams['ItemNo'] = ObjectSerializer::toQueryValue($item_no);
        }
        // header params
        if ($accept !== null) {
            $headerParams['Accept'] = ObjectSerializer::toHeaderValue($accept);
        }
        // header params
        if ($jiwa_stateful !== null) {
            $headerParams['jiwa-stateful'] = ObjectSerializer::toHeaderValue($jiwa_stateful);
        }

        // path params
        if ($document_type_id !== null) {
            $resourcePath = str_replace(
                '{' . 'DocumentTypeID' . '}',
                ObjectSerializer::toPathValue($document_type_id),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;
        if (isset($body)) {
            $_tempBody = $body;
        }

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json', 'application/xml']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json', 'application/xml'],
                ['application/x-www-form-urlencoded', 'application/json', 'application/xml']
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            
            if($headers['Content-Type'] === 'application/json') {
                // \stdClass has no __toString(), so we should encode it manually
                if ($httpBody instanceof \stdClass) {
                    $httpBody = \GuzzleHttp\json_encode($httpBody);
                }
                // array has no __toString(), so we should encode it manually
                if(is_array($httpBody)) {
                    $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($httpBody));
                }
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\Query::build($formParams);
            }
        }

        // this endpoint requires HTTP basic authentication
        if ($this->config->getUsername() !== null || $this->config->getPassword() !== null) {
            $headers['Authorization'] = 'Basic ' . base64_encode($this->config->getUsername() . ":" . $this->config->getPassword());
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\Query::build($queryParams);
        return new Request(
            'PATCH',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation salesOrderDocumentTypePOSTRequestDocumentTypesPost
     *
     * Creates a new sales order document type.
     *
     * @param  string $accept Accept Header (required)
     * @param  bool $jiwa_stateful Stateful indicator (optional)
     * @param  string $description description (optional)
     * @param  bool $default_type default_type (optional)
     * @param  int $item_no item_no (optional)
     * @param  \Jiwa\Model\SalesOrderDocumentTypePOSTRequest $body body (optional)
     *
     * @throws \Jiwa\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Jiwa\Model\DocumentType
     */
    public function salesOrderDocumentTypePOSTRequestDocumentTypesPost($accept, $jiwa_stateful = null, $description = null, $default_type = null, $item_no = null, $body = null)
    {
        list($response) = $this->salesOrderDocumentTypePOSTRequestDocumentTypesPostWithHttpInfo($accept, $jiwa_stateful, $description, $default_type, $item_no, $body);
        return $response;
    }

    /**
     * Operation salesOrderDocumentTypePOSTRequestDocumentTypesPostWithHttpInfo
     *
     * Creates a new sales order document type.
     *
     * @param  string $accept Accept Header (required)
     * @param  bool $jiwa_stateful Stateful indicator (optional)
     * @param  string $description (optional)
     * @param  bool $default_type (optional)
     * @param  int $item_no (optional)
     * @param  \Jiwa\Model\SalesOrderDocumentTypePOSTRequest $body (optional)
     *
     * @throws \Jiwa\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Jiwa\Model\DocumentType, HTTP status code, HTTP response headers (array of strings)
     */
    public function salesOrderDocumentTypePOSTRequestDocumentTypesPostWithHttpInfo($accept, $jiwa_stateful = null, $description = null, $default_type = null, $item_no = null, $body = null)
    {
        $returnType = '\Jiwa\Model\DocumentType';
        $request = $this->salesOrderDocumentTypePOSTRequestDocumentTypesPostRequest($accept, $jiwa_stateful, $description, $default_type, $item_no, $body);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Jiwa\Model\DocumentType',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 201:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Jiwa\Model\DocumentType',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 403:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Jiwa\Model\DocumentType',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 401:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Jiwa\Model\DocumentType',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation salesOrderDocumentTypePOSTRequestDocumentTypesPostAsync
     *
     * Creates a new sales order document type.
     *
     * @param  string $accept Accept Header (required)
     * @param  bool $jiwa_stateful Stateful indicator (optional)
     * @param  string $description (optional)
     * @param  bool $default_type (optional)
     * @param  int $item_no (optional)
     * @param  \Jiwa\Model\SalesOrderDocumentTypePOSTRequest $body (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function salesOrderDocumentTypePOSTRequestDocumentTypesPostAsync($accept, $jiwa_stateful = null, $description = null, $default_type = null, $item_no = null, $body = null)
    {
        return $this->salesOrderDocumentTypePOSTRequestDocumentTypesPostAsyncWithHttpInfo($accept, $jiwa_stateful, $description, $default_type, $item_no, $body)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation salesOrderDocumentTypePOSTRequestDocumentTypesPostAsyncWithHttpInfo
     *
     * Creates a new sales order document type.
     *
     * @param  string $accept Accept Header (required)
     * @param  bool $jiwa_stateful Stateful indicator (optional)
     * @param  string $description (optional)
     * @param  bool $default_type (optional)
     * @param  int $item_no (optional)
     * @param  \Jiwa\Model\SalesOrderDocumentTypePOSTRequest $body (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function salesOrderDocumentTypePOSTRequestDocumentTypesPostAsyncWithHttpInfo($accept, $jiwa_stateful = null, $description = null, $default_type = null, $item_no = null, $body = null)
    {
        $returnType = '\Jiwa\Model\DocumentType';
        $request = $this->salesOrderDocumentTypePOSTRequestDocumentTypesPostRequest($accept, $jiwa_stateful, $description, $default_type, $item_no, $body);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'salesOrderDocumentTypePOSTRequestDocumentTypesPost'
     *
     * @param  string $accept Accept Header (required)
     * @param  bool $jiwa_stateful Stateful indicator (optional)
     * @param  string $description (optional)
     * @param  bool $default_type (optional)
     * @param  int $item_no (optional)
     * @param  \Jiwa\Model\SalesOrderDocumentTypePOSTRequest $body (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function salesOrderDocumentTypePOSTRequestDocumentTypesPostRequest($accept, $jiwa_stateful = null, $description = null, $default_type = null, $item_no = null, $body = null)
    {
        // verify the required parameter 'accept' is set
        if ($accept === null || (is_array($accept) && count($accept) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $accept when calling salesOrderDocumentTypePOSTRequestDocumentTypesPost'
            );
        }

        $resourcePath = '/SalesOrders/DocumentTypes';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        if ($description !== null) {
            $queryParams['Description'] = ObjectSerializer::toQueryValue($description);
        }
        // query params
        if ($default_type !== null) {
            $queryParams['DefaultType'] = ObjectSerializer::toQueryValue($default_type);
        }
        // query params
        if ($item_no !== null) {
            $queryParams['ItemNo'] = ObjectSerializer::toQueryValue($item_no);
        }
        // header params
        if ($accept !== null) {
            $headerParams['Accept'] = ObjectSerializer::toHeaderValue($accept);
        }
        // header params
        if ($jiwa_stateful !== null) {
            $headerParams['jiwa-stateful'] = ObjectSerializer::toHeaderValue($jiwa_stateful);
        }


        // body params
        $_tempBody = null;
        if (isset($body)) {
            $_tempBody = $body;
        }

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json', 'application/xml']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json', 'application/xml'],
                ['application/x-www-form-urlencoded', 'application/json', 'application/xml']
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            
            if($headers['Content-Type'] === 'application/json') {
                // \stdClass has no __toString(), so we should encode it manually
                if ($httpBody instanceof \stdClass) {
                    $httpBody = \GuzzleHttp\json_encode($httpBody);
                }
                // array has no __toString(), so we should encode it manually
                if(is_array($httpBody)) {
                    $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($httpBody));
                }
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\Query::build($formParams);
            }
        }

        // this endpoint requires HTTP basic authentication
        if ($this->config->getUsername() !== null || $this->config->getPassword() !== null) {
            $headers['Authorization'] = 'Basic ' . base64_encode($this->config->getUsername() . ":" . $this->config->getPassword());
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\Query::build($queryParams);
        return new Request(
            'POST',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation salesOrderDocumentTypesGETManyRequestDocumentTypesGet
     *
     * Retrieves a list of sales order document types.
     *
     * @param  string $accept Accept Header (required)
     * @param  bool $jiwa_stateful Stateful indicator (optional)
     *
     * @throws \Jiwa\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Jiwa\Model\DocumentType[]
     */
    public function salesOrderDocumentTypesGETManyRequestDocumentTypesGet($accept, $jiwa_stateful = null)
    {
        list($response) = $this->salesOrderDocumentTypesGETManyRequestDocumentTypesGetWithHttpInfo($accept, $jiwa_stateful);
        return $response;
    }

    /**
     * Operation salesOrderDocumentTypesGETManyRequestDocumentTypesGetWithHttpInfo
     *
     * Retrieves a list of sales order document types.
     *
     * @param  string $accept Accept Header (required)
     * @param  bool $jiwa_stateful Stateful indicator (optional)
     *
     * @throws \Jiwa\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Jiwa\Model\DocumentType[], HTTP status code, HTTP response headers (array of strings)
     */
    public function salesOrderDocumentTypesGETManyRequestDocumentTypesGetWithHttpInfo($accept, $jiwa_stateful = null)
    {
        $returnType = '\Jiwa\Model\DocumentType[]';
        $request = $this->salesOrderDocumentTypesGETManyRequestDocumentTypesGetRequest($accept, $jiwa_stateful);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Jiwa\Model\DocumentType[]',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 401:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Jiwa\Model\DocumentType[]',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 403:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Jiwa\Model\DocumentType[]',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation salesOrderDocumentTypesGETManyRequestDocumentTypesGetAsync
     *
     * Retrieves a list of sales order document types.
     *
     * @param  string $accept Accept Header (required)
     * @param  bool $jiwa_stateful Stateful indicator (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function salesOrderDocumentTypesGETManyRequestDocumentTypesGetAsync($accept, $jiwa_stateful = null)
    {
        return $this->salesOrderDocumentTypesGETManyRequestDocumentTypesGetAsyncWithHttpInfo($accept, $jiwa_stateful)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation salesOrderDocumentTypesGETManyRequestDocumentTypesGetAsyncWithHttpInfo
     *
     * Retrieves a list of sales order document types.
     *
     * @param  string $accept Accept Header (required)
     * @param  bool $jiwa_stateful Stateful indicator (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function salesOrderDocumentTypesGETManyRequestDocumentTypesGetAsyncWithHttpInfo($accept, $jiwa_stateful = null)
    {
        $returnType = '\Jiwa\Model\DocumentType[]';
        $request = $this->salesOrderDocumentTypesGETManyRequestDocumentTypesGetRequest($accept, $jiwa_stateful);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'salesOrderDocumentTypesGETManyRequestDocumentTypesGet'
     *
     * @param  string $accept Accept Header (required)
     * @param  bool $jiwa_stateful Stateful indicator (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function salesOrderDocumentTypesGETManyRequestDocumentTypesGetRequest($accept, $jiwa_stateful = null)
    {
        // verify the required parameter 'accept' is set
        if ($accept === null || (is_array($accept) && count($accept) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $accept when calling salesOrderDocumentTypesGETManyRequestDocumentTypesGet'
            );
        }

        $resourcePath = '/SalesOrders/DocumentTypes';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // header params
        if ($accept !== null) {
            $headerParams['Accept'] = ObjectSerializer::toHeaderValue($accept);
        }
        // header params
        if ($jiwa_stateful !== null) {
            $headerParams['jiwa-stateful'] = ObjectSerializer::toHeaderValue($jiwa_stateful);
        }


        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json', 'application/xml']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json', 'application/xml'],
                ['application/x-www-form-urlencoded', 'application/json', 'application/xml']
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            
            if($headers['Content-Type'] === 'application/json') {
                // \stdClass has no __toString(), so we should encode it manually
                if ($httpBody instanceof \stdClass) {
                    $httpBody = \GuzzleHttp\json_encode($httpBody);
                }
                // array has no __toString(), so we should encode it manually
                if(is_array($httpBody)) {
                    $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($httpBody));
                }
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\Query::build($formParams);
            }
        }

        // this endpoint requires HTTP basic authentication
        if ($this->config->getUsername() !== null || $this->config->getPassword() !== null) {
            $headers['Authorization'] = 'Basic ' . base64_encode($this->config->getUsername() . ":" . $this->config->getPassword());
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\Query::build($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation salesOrderDocumentsGETManyRequestInvoiceIDDocumentsGet
     *
     * Retrieves a list of sales order documents.
     *
     * @param  string $accept Accept Header (required)
     * @param  string $invoice_id invoice_id (required)
     * @param  bool $jiwa_stateful Stateful indicator (optional)
     *
     * @throws \Jiwa\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Jiwa\Model\Document[]
     */
    public function salesOrderDocumentsGETManyRequestInvoiceIDDocumentsGet($accept, $invoice_id, $jiwa_stateful = null)
    {
        list($response) = $this->salesOrderDocumentsGETManyRequestInvoiceIDDocumentsGetWithHttpInfo($accept, $invoice_id, $jiwa_stateful);
        return $response;
    }

    /**
     * Operation salesOrderDocumentsGETManyRequestInvoiceIDDocumentsGetWithHttpInfo
     *
     * Retrieves a list of sales order documents.
     *
     * @param  string $accept Accept Header (required)
     * @param  string $invoice_id (required)
     * @param  bool $jiwa_stateful Stateful indicator (optional)
     *
     * @throws \Jiwa\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Jiwa\Model\Document[], HTTP status code, HTTP response headers (array of strings)
     */
    public function salesOrderDocumentsGETManyRequestInvoiceIDDocumentsGetWithHttpInfo($accept, $invoice_id, $jiwa_stateful = null)
    {
        $returnType = '\Jiwa\Model\Document[]';
        $request = $this->salesOrderDocumentsGETManyRequestInvoiceIDDocumentsGetRequest($accept, $invoice_id, $jiwa_stateful);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Jiwa\Model\Document[]',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 403:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Jiwa\Model\Document[]',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 404:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Jiwa\Model\Document[]',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 401:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Jiwa\Model\Document[]',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation salesOrderDocumentsGETManyRequestInvoiceIDDocumentsGetAsync
     *
     * Retrieves a list of sales order documents.
     *
     * @param  string $accept Accept Header (required)
     * @param  string $invoice_id (required)
     * @param  bool $jiwa_stateful Stateful indicator (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function salesOrderDocumentsGETManyRequestInvoiceIDDocumentsGetAsync($accept, $invoice_id, $jiwa_stateful = null)
    {
        return $this->salesOrderDocumentsGETManyRequestInvoiceIDDocumentsGetAsyncWithHttpInfo($accept, $invoice_id, $jiwa_stateful)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation salesOrderDocumentsGETManyRequestInvoiceIDDocumentsGetAsyncWithHttpInfo
     *
     * Retrieves a list of sales order documents.
     *
     * @param  string $accept Accept Header (required)
     * @param  string $invoice_id (required)
     * @param  bool $jiwa_stateful Stateful indicator (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function salesOrderDocumentsGETManyRequestInvoiceIDDocumentsGetAsyncWithHttpInfo($accept, $invoice_id, $jiwa_stateful = null)
    {
        $returnType = '\Jiwa\Model\Document[]';
        $request = $this->salesOrderDocumentsGETManyRequestInvoiceIDDocumentsGetRequest($accept, $invoice_id, $jiwa_stateful);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'salesOrderDocumentsGETManyRequestInvoiceIDDocumentsGet'
     *
     * @param  string $accept Accept Header (required)
     * @param  string $invoice_id (required)
     * @param  bool $jiwa_stateful Stateful indicator (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function salesOrderDocumentsGETManyRequestInvoiceIDDocumentsGetRequest($accept, $invoice_id, $jiwa_stateful = null)
    {
        // verify the required parameter 'accept' is set
        if ($accept === null || (is_array($accept) && count($accept) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $accept when calling salesOrderDocumentsGETManyRequestInvoiceIDDocumentsGet'
            );
        }
        // verify the required parameter 'invoice_id' is set
        if ($invoice_id === null || (is_array($invoice_id) && count($invoice_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $invoice_id when calling salesOrderDocumentsGETManyRequestInvoiceIDDocumentsGet'
            );
        }

        $resourcePath = '/SalesOrders/{InvoiceID}/Documents';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // header params
        if ($accept !== null) {
            $headerParams['Accept'] = ObjectSerializer::toHeaderValue($accept);
        }
        // header params
        if ($jiwa_stateful !== null) {
            $headerParams['jiwa-stateful'] = ObjectSerializer::toHeaderValue($jiwa_stateful);
        }

        // path params
        if ($invoice_id !== null) {
            $resourcePath = str_replace(
                '{' . 'InvoiceID' . '}',
                ObjectSerializer::toPathValue($invoice_id),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json', 'application/xml']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json', 'application/xml'],
                ['application/x-www-form-urlencoded', 'application/json', 'application/xml']
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            
            if($headers['Content-Type'] === 'application/json') {
                // \stdClass has no __toString(), so we should encode it manually
                if ($httpBody instanceof \stdClass) {
                    $httpBody = \GuzzleHttp\json_encode($httpBody);
                }
                // array has no __toString(), so we should encode it manually
                if(is_array($httpBody)) {
                    $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($httpBody));
                }
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\Query::build($formParams);
            }
        }

        // this endpoint requires HTTP basic authentication
        if ($this->config->getUsername() !== null || $this->config->getPassword() !== null) {
            $headers['Authorization'] = 'Basic ' . base64_encode($this->config->getUsername() . ":" . $this->config->getPassword());
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\Query::build($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation salesOrderGETRequestInvoiceIDGet
     *
     * Retrieves a sales order.
     *
     * @param  string $accept Accept Header (required)
     * @param  string $invoice_id invoice_id (required)
     * @param  bool $jiwa_stateful Stateful indicator (optional)
     *
     * @throws \Jiwa\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Jiwa\Model\SalesOrder
     */
    public function salesOrderGETRequestInvoiceIDGet($accept, $invoice_id, $jiwa_stateful = null)
    {
        list($response) = $this->salesOrderGETRequestInvoiceIDGetWithHttpInfo($accept, $invoice_id, $jiwa_stateful);
        return $response;
    }

    /**
     * Operation salesOrderGETRequestInvoiceIDGetWithHttpInfo
     *
     * Retrieves a sales order.
     *
     * @param  string $accept Accept Header (required)
     * @param  string $invoice_id (required)
     * @param  bool $jiwa_stateful Stateful indicator (optional)
     *
     * @throws \Jiwa\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Jiwa\Model\SalesOrder, HTTP status code, HTTP response headers (array of strings)
     */
    public function salesOrderGETRequestInvoiceIDGetWithHttpInfo($accept, $invoice_id, $jiwa_stateful = null)
    {
        $returnType = '\Jiwa\Model\SalesOrder';
        $request = $this->salesOrderGETRequestInvoiceIDGetRequest($accept, $invoice_id, $jiwa_stateful);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Jiwa\Model\SalesOrder',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 404:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Jiwa\Model\SalesOrder',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 401:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Jiwa\Model\SalesOrder',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 403:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Jiwa\Model\SalesOrder',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation salesOrderGETRequestInvoiceIDGetAsync
     *
     * Retrieves a sales order.
     *
     * @param  string $accept Accept Header (required)
     * @param  string $invoice_id (required)
     * @param  bool $jiwa_stateful Stateful indicator (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function salesOrderGETRequestInvoiceIDGetAsync($accept, $invoice_id, $jiwa_stateful = null)
    {
        return $this->salesOrderGETRequestInvoiceIDGetAsyncWithHttpInfo($accept, $invoice_id, $jiwa_stateful)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation salesOrderGETRequestInvoiceIDGetAsyncWithHttpInfo
     *
     * Retrieves a sales order.
     *
     * @param  string $accept Accept Header (required)
     * @param  string $invoice_id (required)
     * @param  bool $jiwa_stateful Stateful indicator (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function salesOrderGETRequestInvoiceIDGetAsyncWithHttpInfo($accept, $invoice_id, $jiwa_stateful = null)
    {
        $returnType = '\Jiwa\Model\SalesOrder';
        $request = $this->salesOrderGETRequestInvoiceIDGetRequest($accept, $invoice_id, $jiwa_stateful);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'salesOrderGETRequestInvoiceIDGet'
     *
     * @param  string $accept Accept Header (required)
     * @param  string $invoice_id (required)
     * @param  bool $jiwa_stateful Stateful indicator (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function salesOrderGETRequestInvoiceIDGetRequest($accept, $invoice_id, $jiwa_stateful = null)
    {
        // verify the required parameter 'accept' is set
        if ($accept === null || (is_array($accept) && count($accept) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $accept when calling salesOrderGETRequestInvoiceIDGet'
            );
        }
        // verify the required parameter 'invoice_id' is set
        if ($invoice_id === null || (is_array($invoice_id) && count($invoice_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $invoice_id when calling salesOrderGETRequestInvoiceIDGet'
            );
        }

        $resourcePath = '/SalesOrders/{InvoiceID}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // header params
        if ($accept !== null) {
            $headerParams['Accept'] = ObjectSerializer::toHeaderValue($accept);
        }
        // header params
        if ($jiwa_stateful !== null) {
            $headerParams['jiwa-stateful'] = ObjectSerializer::toHeaderValue($jiwa_stateful);
        }

        // path params
        if ($invoice_id !== null) {
            $resourcePath = str_replace(
                '{' . 'InvoiceID' . '}',
                ObjectSerializer::toPathValue($invoice_id),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json', 'application/xml']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json', 'application/xml'],
                ['application/x-www-form-urlencoded', 'application/json', 'application/xml']
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            
            if($headers['Content-Type'] === 'application/json') {
                // \stdClass has no __toString(), so we should encode it manually
                if ($httpBody instanceof \stdClass) {
                    $httpBody = \GuzzleHttp\json_encode($httpBody);
                }
                // array has no __toString(), so we should encode it manually
                if(is_array($httpBody)) {
                    $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($httpBody));
                }
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\Query::build($formParams);
            }
        }

        // this endpoint requires HTTP basic authentication
        if ($this->config->getUsername() !== null || $this->config->getPassword() !== null) {
            $headers['Authorization'] = 'Basic ' . base64_encode($this->config->getUsername() . ":" . $this->config->getPassword());
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\Query::build($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation salesOrderHistoryConsignmentNotesDELETERequestInvoiceIDHistorysInvoiceHistoryIDCarrierConsignmentNotesConsignmentNoteIDDelete
     *
     * Deletes a consignment note from a sales order history
     *
     * @param  string $accept Accept Header (required)
     * @param  string $invoice_id invoice_id (required)
     * @param  string $invoice_history_id invoice_history_id (required)
     * @param  string $consignment_note_id consignment_note_id (required)
     * @param  bool $jiwa_stateful Stateful indicator (optional)
     *
     * @throws \Jiwa\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Jiwa\Model\Object
     */
    public function salesOrderHistoryConsignmentNotesDELETERequestInvoiceIDHistorysInvoiceHistoryIDCarrierConsignmentNotesConsignmentNoteIDDelete($accept, $invoice_id, $invoice_history_id, $consignment_note_id, $jiwa_stateful = null)
    {
        list($response) = $this->salesOrderHistoryConsignmentNotesDELETERequestInvoiceIDHistorysInvoiceHistoryIDCarrierConsignmentNotesConsignmentNoteIDDeleteWithHttpInfo($accept, $invoice_id, $invoice_history_id, $consignment_note_id, $jiwa_stateful);
        return $response;
    }

    /**
     * Operation salesOrderHistoryConsignmentNotesDELETERequestInvoiceIDHistorysInvoiceHistoryIDCarrierConsignmentNotesConsignmentNoteIDDeleteWithHttpInfo
     *
     * Deletes a consignment note from a sales order history
     *
     * @param  string $accept Accept Header (required)
     * @param  string $invoice_id (required)
     * @param  string $invoice_history_id (required)
     * @param  string $consignment_note_id (required)
     * @param  bool $jiwa_stateful Stateful indicator (optional)
     *
     * @throws \Jiwa\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Jiwa\Model\Object, HTTP status code, HTTP response headers (array of strings)
     */
    public function salesOrderHistoryConsignmentNotesDELETERequestInvoiceIDHistorysInvoiceHistoryIDCarrierConsignmentNotesConsignmentNoteIDDeleteWithHttpInfo($accept, $invoice_id, $invoice_history_id, $consignment_note_id, $jiwa_stateful = null)
    {
        $returnType = '\Jiwa\Model\Object';
        $request = $this->salesOrderHistoryConsignmentNotesDELETERequestInvoiceIDHistorysInvoiceHistoryIDCarrierConsignmentNotesConsignmentNoteIDDeleteRequest($accept, $invoice_id, $invoice_history_id, $consignment_note_id, $jiwa_stateful);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Jiwa\Model\Object',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 204:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Jiwa\Model\Object',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 401:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Jiwa\Model\Object',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 403:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Jiwa\Model\Object',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 404:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Jiwa\Model\Object',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation salesOrderHistoryConsignmentNotesDELETERequestInvoiceIDHistorysInvoiceHistoryIDCarrierConsignmentNotesConsignmentNoteIDDeleteAsync
     *
     * Deletes a consignment note from a sales order history
     *
     * @param  string $accept Accept Header (required)
     * @param  string $invoice_id (required)
     * @param  string $invoice_history_id (required)
     * @param  string $consignment_note_id (required)
     * @param  bool $jiwa_stateful Stateful indicator (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function salesOrderHistoryConsignmentNotesDELETERequestInvoiceIDHistorysInvoiceHistoryIDCarrierConsignmentNotesConsignmentNoteIDDeleteAsync($accept, $invoice_id, $invoice_history_id, $consignment_note_id, $jiwa_stateful = null)
    {
        return $this->salesOrderHistoryConsignmentNotesDELETERequestInvoiceIDHistorysInvoiceHistoryIDCarrierConsignmentNotesConsignmentNoteIDDeleteAsyncWithHttpInfo($accept, $invoice_id, $invoice_history_id, $consignment_note_id, $jiwa_stateful)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation salesOrderHistoryConsignmentNotesDELETERequestInvoiceIDHistorysInvoiceHistoryIDCarrierConsignmentNotesConsignmentNoteIDDeleteAsyncWithHttpInfo
     *
     * Deletes a consignment note from a sales order history
     *
     * @param  string $accept Accept Header (required)
     * @param  string $invoice_id (required)
     * @param  string $invoice_history_id (required)
     * @param  string $consignment_note_id (required)
     * @param  bool $jiwa_stateful Stateful indicator (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function salesOrderHistoryConsignmentNotesDELETERequestInvoiceIDHistorysInvoiceHistoryIDCarrierConsignmentNotesConsignmentNoteIDDeleteAsyncWithHttpInfo($accept, $invoice_id, $invoice_history_id, $consignment_note_id, $jiwa_stateful = null)
    {
        $returnType = '\Jiwa\Model\Object';
        $request = $this->salesOrderHistoryConsignmentNotesDELETERequestInvoiceIDHistorysInvoiceHistoryIDCarrierConsignmentNotesConsignmentNoteIDDeleteRequest($accept, $invoice_id, $invoice_history_id, $consignment_note_id, $jiwa_stateful);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'salesOrderHistoryConsignmentNotesDELETERequestInvoiceIDHistorysInvoiceHistoryIDCarrierConsignmentNotesConsignmentNoteIDDelete'
     *
     * @param  string $accept Accept Header (required)
     * @param  string $invoice_id (required)
     * @param  string $invoice_history_id (required)
     * @param  string $consignment_note_id (required)
     * @param  bool $jiwa_stateful Stateful indicator (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function salesOrderHistoryConsignmentNotesDELETERequestInvoiceIDHistorysInvoiceHistoryIDCarrierConsignmentNotesConsignmentNoteIDDeleteRequest($accept, $invoice_id, $invoice_history_id, $consignment_note_id, $jiwa_stateful = null)
    {
        // verify the required parameter 'accept' is set
        if ($accept === null || (is_array($accept) && count($accept) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $accept when calling salesOrderHistoryConsignmentNotesDELETERequestInvoiceIDHistorysInvoiceHistoryIDCarrierConsignmentNotesConsignmentNoteIDDelete'
            );
        }
        // verify the required parameter 'invoice_id' is set
        if ($invoice_id === null || (is_array($invoice_id) && count($invoice_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $invoice_id when calling salesOrderHistoryConsignmentNotesDELETERequestInvoiceIDHistorysInvoiceHistoryIDCarrierConsignmentNotesConsignmentNoteIDDelete'
            );
        }
        // verify the required parameter 'invoice_history_id' is set
        if ($invoice_history_id === null || (is_array($invoice_history_id) && count($invoice_history_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $invoice_history_id when calling salesOrderHistoryConsignmentNotesDELETERequestInvoiceIDHistorysInvoiceHistoryIDCarrierConsignmentNotesConsignmentNoteIDDelete'
            );
        }
        // verify the required parameter 'consignment_note_id' is set
        if ($consignment_note_id === null || (is_array($consignment_note_id) && count($consignment_note_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $consignment_note_id when calling salesOrderHistoryConsignmentNotesDELETERequestInvoiceIDHistorysInvoiceHistoryIDCarrierConsignmentNotesConsignmentNoteIDDelete'
            );
        }

        $resourcePath = '/SalesOrders/{InvoiceID}/Historys/{InvoiceHistoryID}/Carrier/ConsignmentNotes/{ConsignmentNoteID}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // header params
        if ($accept !== null) {
            $headerParams['Accept'] = ObjectSerializer::toHeaderValue($accept);
        }
        // header params
        if ($jiwa_stateful !== null) {
            $headerParams['jiwa-stateful'] = ObjectSerializer::toHeaderValue($jiwa_stateful);
        }

        // path params
        if ($invoice_id !== null) {
            $resourcePath = str_replace(
                '{' . 'InvoiceID' . '}',
                ObjectSerializer::toPathValue($invoice_id),
                $resourcePath
            );
        }
        // path params
        if ($invoice_history_id !== null) {
            $resourcePath = str_replace(
                '{' . 'InvoiceHistoryID' . '}',
                ObjectSerializer::toPathValue($invoice_history_id),
                $resourcePath
            );
        }
        // path params
        if ($consignment_note_id !== null) {
            $resourcePath = str_replace(
                '{' . 'ConsignmentNoteID' . '}',
                ObjectSerializer::toPathValue($consignment_note_id),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json', 'application/xml']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json', 'application/xml'],
                ['application/x-www-form-urlencoded', 'application/json', 'application/xml']
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            
            if($headers['Content-Type'] === 'application/json') {
                // \stdClass has no __toString(), so we should encode it manually
                if ($httpBody instanceof \stdClass) {
                    $httpBody = \GuzzleHttp\json_encode($httpBody);
                }
                // array has no __toString(), so we should encode it manually
                if(is_array($httpBody)) {
                    $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($httpBody));
                }
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\Query::build($formParams);
            }
        }

        // this endpoint requires HTTP basic authentication
        if ($this->config->getUsername() !== null || $this->config->getPassword() !== null) {
            $headers['Authorization'] = 'Basic ' . base64_encode($this->config->getUsername() . ":" . $this->config->getPassword());
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\Query::build($queryParams);
        return new Request(
            'DELETE',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation salesOrderHistoryConsignmentNotesGETManyRequestInvoiceIDHistorysInvoiceHistoryIDCarrierConsignmentNotesGet
     *
     * Retrieves consignment notes for a sales order history.
     *
     * @param  string $accept Accept Header (required)
     * @param  string $invoice_id invoice_id (required)
     * @param  string $invoice_history_id invoice_history_id (required)
     * @param  bool $jiwa_stateful Stateful indicator (optional)
     *
     * @throws \Jiwa\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Jiwa\Model\SalesOrderConsignmentNote[]
     */
    public function salesOrderHistoryConsignmentNotesGETManyRequestInvoiceIDHistorysInvoiceHistoryIDCarrierConsignmentNotesGet($accept, $invoice_id, $invoice_history_id, $jiwa_stateful = null)
    {
        list($response) = $this->salesOrderHistoryConsignmentNotesGETManyRequestInvoiceIDHistorysInvoiceHistoryIDCarrierConsignmentNotesGetWithHttpInfo($accept, $invoice_id, $invoice_history_id, $jiwa_stateful);
        return $response;
    }

    /**
     * Operation salesOrderHistoryConsignmentNotesGETManyRequestInvoiceIDHistorysInvoiceHistoryIDCarrierConsignmentNotesGetWithHttpInfo
     *
     * Retrieves consignment notes for a sales order history.
     *
     * @param  string $accept Accept Header (required)
     * @param  string $invoice_id (required)
     * @param  string $invoice_history_id (required)
     * @param  bool $jiwa_stateful Stateful indicator (optional)
     *
     * @throws \Jiwa\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Jiwa\Model\SalesOrderConsignmentNote[], HTTP status code, HTTP response headers (array of strings)
     */
    public function salesOrderHistoryConsignmentNotesGETManyRequestInvoiceIDHistorysInvoiceHistoryIDCarrierConsignmentNotesGetWithHttpInfo($accept, $invoice_id, $invoice_history_id, $jiwa_stateful = null)
    {
        $returnType = '\Jiwa\Model\SalesOrderConsignmentNote[]';
        $request = $this->salesOrderHistoryConsignmentNotesGETManyRequestInvoiceIDHistorysInvoiceHistoryIDCarrierConsignmentNotesGetRequest($accept, $invoice_id, $invoice_history_id, $jiwa_stateful);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Jiwa\Model\SalesOrderConsignmentNote[]',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 404:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Jiwa\Model\SalesOrderConsignmentNote[]',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 401:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Jiwa\Model\SalesOrderConsignmentNote[]',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 403:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Jiwa\Model\SalesOrderConsignmentNote[]',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation salesOrderHistoryConsignmentNotesGETManyRequestInvoiceIDHistorysInvoiceHistoryIDCarrierConsignmentNotesGetAsync
     *
     * Retrieves consignment notes for a sales order history.
     *
     * @param  string $accept Accept Header (required)
     * @param  string $invoice_id (required)
     * @param  string $invoice_history_id (required)
     * @param  bool $jiwa_stateful Stateful indicator (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function salesOrderHistoryConsignmentNotesGETManyRequestInvoiceIDHistorysInvoiceHistoryIDCarrierConsignmentNotesGetAsync($accept, $invoice_id, $invoice_history_id, $jiwa_stateful = null)
    {
        return $this->salesOrderHistoryConsignmentNotesGETManyRequestInvoiceIDHistorysInvoiceHistoryIDCarrierConsignmentNotesGetAsyncWithHttpInfo($accept, $invoice_id, $invoice_history_id, $jiwa_stateful)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation salesOrderHistoryConsignmentNotesGETManyRequestInvoiceIDHistorysInvoiceHistoryIDCarrierConsignmentNotesGetAsyncWithHttpInfo
     *
     * Retrieves consignment notes for a sales order history.
     *
     * @param  string $accept Accept Header (required)
     * @param  string $invoice_id (required)
     * @param  string $invoice_history_id (required)
     * @param  bool $jiwa_stateful Stateful indicator (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function salesOrderHistoryConsignmentNotesGETManyRequestInvoiceIDHistorysInvoiceHistoryIDCarrierConsignmentNotesGetAsyncWithHttpInfo($accept, $invoice_id, $invoice_history_id, $jiwa_stateful = null)
    {
        $returnType = '\Jiwa\Model\SalesOrderConsignmentNote[]';
        $request = $this->salesOrderHistoryConsignmentNotesGETManyRequestInvoiceIDHistorysInvoiceHistoryIDCarrierConsignmentNotesGetRequest($accept, $invoice_id, $invoice_history_id, $jiwa_stateful);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'salesOrderHistoryConsignmentNotesGETManyRequestInvoiceIDHistorysInvoiceHistoryIDCarrierConsignmentNotesGet'
     *
     * @param  string $accept Accept Header (required)
     * @param  string $invoice_id (required)
     * @param  string $invoice_history_id (required)
     * @param  bool $jiwa_stateful Stateful indicator (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function salesOrderHistoryConsignmentNotesGETManyRequestInvoiceIDHistorysInvoiceHistoryIDCarrierConsignmentNotesGetRequest($accept, $invoice_id, $invoice_history_id, $jiwa_stateful = null)
    {
        // verify the required parameter 'accept' is set
        if ($accept === null || (is_array($accept) && count($accept) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $accept when calling salesOrderHistoryConsignmentNotesGETManyRequestInvoiceIDHistorysInvoiceHistoryIDCarrierConsignmentNotesGet'
            );
        }
        // verify the required parameter 'invoice_id' is set
        if ($invoice_id === null || (is_array($invoice_id) && count($invoice_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $invoice_id when calling salesOrderHistoryConsignmentNotesGETManyRequestInvoiceIDHistorysInvoiceHistoryIDCarrierConsignmentNotesGet'
            );
        }
        // verify the required parameter 'invoice_history_id' is set
        if ($invoice_history_id === null || (is_array($invoice_history_id) && count($invoice_history_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $invoice_history_id when calling salesOrderHistoryConsignmentNotesGETManyRequestInvoiceIDHistorysInvoiceHistoryIDCarrierConsignmentNotesGet'
            );
        }

        $resourcePath = '/SalesOrders/{InvoiceID}/Historys/{InvoiceHistoryID}/Carrier/ConsignmentNotes';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // header params
        if ($accept !== null) {
            $headerParams['Accept'] = ObjectSerializer::toHeaderValue($accept);
        }
        // header params
        if ($jiwa_stateful !== null) {
            $headerParams['jiwa-stateful'] = ObjectSerializer::toHeaderValue($jiwa_stateful);
        }

        // path params
        if ($invoice_id !== null) {
            $resourcePath = str_replace(
                '{' . 'InvoiceID' . '}',
                ObjectSerializer::toPathValue($invoice_id),
                $resourcePath
            );
        }
        // path params
        if ($invoice_history_id !== null) {
            $resourcePath = str_replace(
                '{' . 'InvoiceHistoryID' . '}',
                ObjectSerializer::toPathValue($invoice_history_id),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json', 'application/xml']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json', 'application/xml'],
                ['application/x-www-form-urlencoded', 'application/json', 'application/xml']
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            
            if($headers['Content-Type'] === 'application/json') {
                // \stdClass has no __toString(), so we should encode it manually
                if ($httpBody instanceof \stdClass) {
                    $httpBody = \GuzzleHttp\json_encode($httpBody);
                }
                // array has no __toString(), so we should encode it manually
                if(is_array($httpBody)) {
                    $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($httpBody));
                }
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\Query::build($formParams);
            }
        }

        // this endpoint requires HTTP basic authentication
        if ($this->config->getUsername() !== null || $this->config->getPassword() !== null) {
            $headers['Authorization'] = 'Basic ' . base64_encode($this->config->getUsername() . ":" . $this->config->getPassword());
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\Query::build($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation salesOrderHistoryConsignmentNotesGETRequestInvoiceIDHistorysInvoiceHistoryIDCarrierConsignmentNotesConsignmentNoteIDGet
     *
     * Retrieves a consignment note for a sales order history
     *
     * @param  string $accept Accept Header (required)
     * @param  string $invoice_id invoice_id (required)
     * @param  string $invoice_history_id invoice_history_id (required)
     * @param  string $consignment_note_id consignment_note_id (required)
     * @param  bool $jiwa_stateful Stateful indicator (optional)
     *
     * @throws \Jiwa\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Jiwa\Model\SalesOrderConsignmentNote
     */
    public function salesOrderHistoryConsignmentNotesGETRequestInvoiceIDHistorysInvoiceHistoryIDCarrierConsignmentNotesConsignmentNoteIDGet($accept, $invoice_id, $invoice_history_id, $consignment_note_id, $jiwa_stateful = null)
    {
        list($response) = $this->salesOrderHistoryConsignmentNotesGETRequestInvoiceIDHistorysInvoiceHistoryIDCarrierConsignmentNotesConsignmentNoteIDGetWithHttpInfo($accept, $invoice_id, $invoice_history_id, $consignment_note_id, $jiwa_stateful);
        return $response;
    }

    /**
     * Operation salesOrderHistoryConsignmentNotesGETRequestInvoiceIDHistorysInvoiceHistoryIDCarrierConsignmentNotesConsignmentNoteIDGetWithHttpInfo
     *
     * Retrieves a consignment note for a sales order history
     *
     * @param  string $accept Accept Header (required)
     * @param  string $invoice_id (required)
     * @param  string $invoice_history_id (required)
     * @param  string $consignment_note_id (required)
     * @param  bool $jiwa_stateful Stateful indicator (optional)
     *
     * @throws \Jiwa\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Jiwa\Model\SalesOrderConsignmentNote, HTTP status code, HTTP response headers (array of strings)
     */
    public function salesOrderHistoryConsignmentNotesGETRequestInvoiceIDHistorysInvoiceHistoryIDCarrierConsignmentNotesConsignmentNoteIDGetWithHttpInfo($accept, $invoice_id, $invoice_history_id, $consignment_note_id, $jiwa_stateful = null)
    {
        $returnType = '\Jiwa\Model\SalesOrderConsignmentNote';
        $request = $this->salesOrderHistoryConsignmentNotesGETRequestInvoiceIDHistorysInvoiceHistoryIDCarrierConsignmentNotesConsignmentNoteIDGetRequest($accept, $invoice_id, $invoice_history_id, $consignment_note_id, $jiwa_stateful);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Jiwa\Model\SalesOrderConsignmentNote',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 401:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Jiwa\Model\SalesOrderConsignmentNote',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 403:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Jiwa\Model\SalesOrderConsignmentNote',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 404:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Jiwa\Model\SalesOrderConsignmentNote',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation salesOrderHistoryConsignmentNotesGETRequestInvoiceIDHistorysInvoiceHistoryIDCarrierConsignmentNotesConsignmentNoteIDGetAsync
     *
     * Retrieves a consignment note for a sales order history
     *
     * @param  string $accept Accept Header (required)
     * @param  string $invoice_id (required)
     * @param  string $invoice_history_id (required)
     * @param  string $consignment_note_id (required)
     * @param  bool $jiwa_stateful Stateful indicator (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function salesOrderHistoryConsignmentNotesGETRequestInvoiceIDHistorysInvoiceHistoryIDCarrierConsignmentNotesConsignmentNoteIDGetAsync($accept, $invoice_id, $invoice_history_id, $consignment_note_id, $jiwa_stateful = null)
    {
        return $this->salesOrderHistoryConsignmentNotesGETRequestInvoiceIDHistorysInvoiceHistoryIDCarrierConsignmentNotesConsignmentNoteIDGetAsyncWithHttpInfo($accept, $invoice_id, $invoice_history_id, $consignment_note_id, $jiwa_stateful)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation salesOrderHistoryConsignmentNotesGETRequestInvoiceIDHistorysInvoiceHistoryIDCarrierConsignmentNotesConsignmentNoteIDGetAsyncWithHttpInfo
     *
     * Retrieves a consignment note for a sales order history
     *
     * @param  string $accept Accept Header (required)
     * @param  string $invoice_id (required)
     * @param  string $invoice_history_id (required)
     * @param  string $consignment_note_id (required)
     * @param  bool $jiwa_stateful Stateful indicator (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function salesOrderHistoryConsignmentNotesGETRequestInvoiceIDHistorysInvoiceHistoryIDCarrierConsignmentNotesConsignmentNoteIDGetAsyncWithHttpInfo($accept, $invoice_id, $invoice_history_id, $consignment_note_id, $jiwa_stateful = null)
    {
        $returnType = '\Jiwa\Model\SalesOrderConsignmentNote';
        $request = $this->salesOrderHistoryConsignmentNotesGETRequestInvoiceIDHistorysInvoiceHistoryIDCarrierConsignmentNotesConsignmentNoteIDGetRequest($accept, $invoice_id, $invoice_history_id, $consignment_note_id, $jiwa_stateful);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'salesOrderHistoryConsignmentNotesGETRequestInvoiceIDHistorysInvoiceHistoryIDCarrierConsignmentNotesConsignmentNoteIDGet'
     *
     * @param  string $accept Accept Header (required)
     * @param  string $invoice_id (required)
     * @param  string $invoice_history_id (required)
     * @param  string $consignment_note_id (required)
     * @param  bool $jiwa_stateful Stateful indicator (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function salesOrderHistoryConsignmentNotesGETRequestInvoiceIDHistorysInvoiceHistoryIDCarrierConsignmentNotesConsignmentNoteIDGetRequest($accept, $invoice_id, $invoice_history_id, $consignment_note_id, $jiwa_stateful = null)
    {
        // verify the required parameter 'accept' is set
        if ($accept === null || (is_array($accept) && count($accept) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $accept when calling salesOrderHistoryConsignmentNotesGETRequestInvoiceIDHistorysInvoiceHistoryIDCarrierConsignmentNotesConsignmentNoteIDGet'
            );
        }
        // verify the required parameter 'invoice_id' is set
        if ($invoice_id === null || (is_array($invoice_id) && count($invoice_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $invoice_id when calling salesOrderHistoryConsignmentNotesGETRequestInvoiceIDHistorysInvoiceHistoryIDCarrierConsignmentNotesConsignmentNoteIDGet'
            );
        }
        // verify the required parameter 'invoice_history_id' is set
        if ($invoice_history_id === null || (is_array($invoice_history_id) && count($invoice_history_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $invoice_history_id when calling salesOrderHistoryConsignmentNotesGETRequestInvoiceIDHistorysInvoiceHistoryIDCarrierConsignmentNotesConsignmentNoteIDGet'
            );
        }
        // verify the required parameter 'consignment_note_id' is set
        if ($consignment_note_id === null || (is_array($consignment_note_id) && count($consignment_note_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $consignment_note_id when calling salesOrderHistoryConsignmentNotesGETRequestInvoiceIDHistorysInvoiceHistoryIDCarrierConsignmentNotesConsignmentNoteIDGet'
            );
        }

        $resourcePath = '/SalesOrders/{InvoiceID}/Historys/{InvoiceHistoryID}/Carrier/ConsignmentNotes/{ConsignmentNoteID}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // header params
        if ($accept !== null) {
            $headerParams['Accept'] = ObjectSerializer::toHeaderValue($accept);
        }
        // header params
        if ($jiwa_stateful !== null) {
            $headerParams['jiwa-stateful'] = ObjectSerializer::toHeaderValue($jiwa_stateful);
        }

        // path params
        if ($invoice_id !== null) {
            $resourcePath = str_replace(
                '{' . 'InvoiceID' . '}',
                ObjectSerializer::toPathValue($invoice_id),
                $resourcePath
            );
        }
        // path params
        if ($invoice_history_id !== null) {
            $resourcePath = str_replace(
                '{' . 'InvoiceHistoryID' . '}',
                ObjectSerializer::toPathValue($invoice_history_id),
                $resourcePath
            );
        }
        // path params
        if ($consignment_note_id !== null) {
            $resourcePath = str_replace(
                '{' . 'ConsignmentNoteID' . '}',
                ObjectSerializer::toPathValue($consignment_note_id),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json', 'application/xml']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json', 'application/xml'],
                ['application/x-www-form-urlencoded', 'application/json', 'application/xml']
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            
            if($headers['Content-Type'] === 'application/json') {
                // \stdClass has no __toString(), so we should encode it manually
                if ($httpBody instanceof \stdClass) {
                    $httpBody = \GuzzleHttp\json_encode($httpBody);
                }
                // array has no __toString(), so we should encode it manually
                if(is_array($httpBody)) {
                    $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($httpBody));
                }
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\Query::build($formParams);
            }
        }

        // this endpoint requires HTTP basic authentication
        if ($this->config->getUsername() !== null || $this->config->getPassword() !== null) {
            $headers['Authorization'] = 'Basic ' . base64_encode($this->config->getUsername() . ":" . $this->config->getPassword());
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\Query::build($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation salesOrderHistoryConsignmentNotesPATCHRequestInvoiceIDHistorysInvoiceHistoryIDCarrierConsignmentNotesConsignmentNoteIDUpdate
     *
     * Updates a consignment note for a sales order history
     *
     * @param  string $accept Accept Header (required)
     * @param  string $invoice_id invoice_id (required)
     * @param  string $invoice_history_id invoice_history_id (required)
     * @param  string $consignment_note_id consignment_note_id (required)
     * @param  bool $jiwa_stateful Stateful indicator (optional)
     * @param  \DateTime $consignment_note_date consignment_note_date (optional)
     * @param  double $ex_gst_amount ex_gst_amount (optional)
     * @param  double $gst_amount gst_amount (optional)
     * @param  string $consignment_note_no consignment_note_no (optional)
     * @param  \Jiwa\Model\SalesOrderHistoryConsignmentNotesPATCHRequest $body body (optional)
     *
     * @throws \Jiwa\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Jiwa\Model\SalesOrderConsignmentNote
     */
    public function salesOrderHistoryConsignmentNotesPATCHRequestInvoiceIDHistorysInvoiceHistoryIDCarrierConsignmentNotesConsignmentNoteIDUpdate($accept, $invoice_id, $invoice_history_id, $consignment_note_id, $jiwa_stateful = null, $consignment_note_date = null, $ex_gst_amount = null, $gst_amount = null, $consignment_note_no = null, $body = null)
    {
        list($response) = $this->salesOrderHistoryConsignmentNotesPATCHRequestInvoiceIDHistorysInvoiceHistoryIDCarrierConsignmentNotesConsignmentNoteIDUpdateWithHttpInfo($accept, $invoice_id, $invoice_history_id, $consignment_note_id, $jiwa_stateful, $consignment_note_date, $ex_gst_amount, $gst_amount, $consignment_note_no, $body);
        return $response;
    }

    /**
     * Operation salesOrderHistoryConsignmentNotesPATCHRequestInvoiceIDHistorysInvoiceHistoryIDCarrierConsignmentNotesConsignmentNoteIDUpdateWithHttpInfo
     *
     * Updates a consignment note for a sales order history
     *
     * @param  string $accept Accept Header (required)
     * @param  string $invoice_id (required)
     * @param  string $invoice_history_id (required)
     * @param  string $consignment_note_id (required)
     * @param  bool $jiwa_stateful Stateful indicator (optional)
     * @param  \DateTime $consignment_note_date (optional)
     * @param  double $ex_gst_amount (optional)
     * @param  double $gst_amount (optional)
     * @param  string $consignment_note_no (optional)
     * @param  \Jiwa\Model\SalesOrderHistoryConsignmentNotesPATCHRequest $body (optional)
     *
     * @throws \Jiwa\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Jiwa\Model\SalesOrderConsignmentNote, HTTP status code, HTTP response headers (array of strings)
     */
    public function salesOrderHistoryConsignmentNotesPATCHRequestInvoiceIDHistorysInvoiceHistoryIDCarrierConsignmentNotesConsignmentNoteIDUpdateWithHttpInfo($accept, $invoice_id, $invoice_history_id, $consignment_note_id, $jiwa_stateful = null, $consignment_note_date = null, $ex_gst_amount = null, $gst_amount = null, $consignment_note_no = null, $body = null)
    {
        $returnType = '\Jiwa\Model\SalesOrderConsignmentNote';
        $request = $this->salesOrderHistoryConsignmentNotesPATCHRequestInvoiceIDHistorysInvoiceHistoryIDCarrierConsignmentNotesConsignmentNoteIDUpdateRequest($accept, $invoice_id, $invoice_history_id, $consignment_note_id, $jiwa_stateful, $consignment_note_date, $ex_gst_amount, $gst_amount, $consignment_note_no, $body);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Jiwa\Model\SalesOrderConsignmentNote',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 404:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Jiwa\Model\SalesOrderConsignmentNote',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 401:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Jiwa\Model\SalesOrderConsignmentNote',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 403:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Jiwa\Model\SalesOrderConsignmentNote',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation salesOrderHistoryConsignmentNotesPATCHRequestInvoiceIDHistorysInvoiceHistoryIDCarrierConsignmentNotesConsignmentNoteIDUpdateAsync
     *
     * Updates a consignment note for a sales order history
     *
     * @param  string $accept Accept Header (required)
     * @param  string $invoice_id (required)
     * @param  string $invoice_history_id (required)
     * @param  string $consignment_note_id (required)
     * @param  bool $jiwa_stateful Stateful indicator (optional)
     * @param  \DateTime $consignment_note_date (optional)
     * @param  double $ex_gst_amount (optional)
     * @param  double $gst_amount (optional)
     * @param  string $consignment_note_no (optional)
     * @param  \Jiwa\Model\SalesOrderHistoryConsignmentNotesPATCHRequest $body (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function salesOrderHistoryConsignmentNotesPATCHRequestInvoiceIDHistorysInvoiceHistoryIDCarrierConsignmentNotesConsignmentNoteIDUpdateAsync($accept, $invoice_id, $invoice_history_id, $consignment_note_id, $jiwa_stateful = null, $consignment_note_date = null, $ex_gst_amount = null, $gst_amount = null, $consignment_note_no = null, $body = null)
    {
        return $this->salesOrderHistoryConsignmentNotesPATCHRequestInvoiceIDHistorysInvoiceHistoryIDCarrierConsignmentNotesConsignmentNoteIDUpdateAsyncWithHttpInfo($accept, $invoice_id, $invoice_history_id, $consignment_note_id, $jiwa_stateful, $consignment_note_date, $ex_gst_amount, $gst_amount, $consignment_note_no, $body)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation salesOrderHistoryConsignmentNotesPATCHRequestInvoiceIDHistorysInvoiceHistoryIDCarrierConsignmentNotesConsignmentNoteIDUpdateAsyncWithHttpInfo
     *
     * Updates a consignment note for a sales order history
     *
     * @param  string $accept Accept Header (required)
     * @param  string $invoice_id (required)
     * @param  string $invoice_history_id (required)
     * @param  string $consignment_note_id (required)
     * @param  bool $jiwa_stateful Stateful indicator (optional)
     * @param  \DateTime $consignment_note_date (optional)
     * @param  double $ex_gst_amount (optional)
     * @param  double $gst_amount (optional)
     * @param  string $consignment_note_no (optional)
     * @param  \Jiwa\Model\SalesOrderHistoryConsignmentNotesPATCHRequest $body (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function salesOrderHistoryConsignmentNotesPATCHRequestInvoiceIDHistorysInvoiceHistoryIDCarrierConsignmentNotesConsignmentNoteIDUpdateAsyncWithHttpInfo($accept, $invoice_id, $invoice_history_id, $consignment_note_id, $jiwa_stateful = null, $consignment_note_date = null, $ex_gst_amount = null, $gst_amount = null, $consignment_note_no = null, $body = null)
    {
        $returnType = '\Jiwa\Model\SalesOrderConsignmentNote';
        $request = $this->salesOrderHistoryConsignmentNotesPATCHRequestInvoiceIDHistorysInvoiceHistoryIDCarrierConsignmentNotesConsignmentNoteIDUpdateRequest($accept, $invoice_id, $invoice_history_id, $consignment_note_id, $jiwa_stateful, $consignment_note_date, $ex_gst_amount, $gst_amount, $consignment_note_no, $body);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'salesOrderHistoryConsignmentNotesPATCHRequestInvoiceIDHistorysInvoiceHistoryIDCarrierConsignmentNotesConsignmentNoteIDUpdate'
     *
     * @param  string $accept Accept Header (required)
     * @param  string $invoice_id (required)
     * @param  string $invoice_history_id (required)
     * @param  string $consignment_note_id (required)
     * @param  bool $jiwa_stateful Stateful indicator (optional)
     * @param  \DateTime $consignment_note_date (optional)
     * @param  double $ex_gst_amount (optional)
     * @param  double $gst_amount (optional)
     * @param  string $consignment_note_no (optional)
     * @param  \Jiwa\Model\SalesOrderHistoryConsignmentNotesPATCHRequest $body (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function salesOrderHistoryConsignmentNotesPATCHRequestInvoiceIDHistorysInvoiceHistoryIDCarrierConsignmentNotesConsignmentNoteIDUpdateRequest($accept, $invoice_id, $invoice_history_id, $consignment_note_id, $jiwa_stateful = null, $consignment_note_date = null, $ex_gst_amount = null, $gst_amount = null, $consignment_note_no = null, $body = null)
    {
        // verify the required parameter 'accept' is set
        if ($accept === null || (is_array($accept) && count($accept) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $accept when calling salesOrderHistoryConsignmentNotesPATCHRequestInvoiceIDHistorysInvoiceHistoryIDCarrierConsignmentNotesConsignmentNoteIDUpdate'
            );
        }
        // verify the required parameter 'invoice_id' is set
        if ($invoice_id === null || (is_array($invoice_id) && count($invoice_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $invoice_id when calling salesOrderHistoryConsignmentNotesPATCHRequestInvoiceIDHistorysInvoiceHistoryIDCarrierConsignmentNotesConsignmentNoteIDUpdate'
            );
        }
        // verify the required parameter 'invoice_history_id' is set
        if ($invoice_history_id === null || (is_array($invoice_history_id) && count($invoice_history_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $invoice_history_id when calling salesOrderHistoryConsignmentNotesPATCHRequestInvoiceIDHistorysInvoiceHistoryIDCarrierConsignmentNotesConsignmentNoteIDUpdate'
            );
        }
        // verify the required parameter 'consignment_note_id' is set
        if ($consignment_note_id === null || (is_array($consignment_note_id) && count($consignment_note_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $consignment_note_id when calling salesOrderHistoryConsignmentNotesPATCHRequestInvoiceIDHistorysInvoiceHistoryIDCarrierConsignmentNotesConsignmentNoteIDUpdate'
            );
        }

        $resourcePath = '/SalesOrders/{InvoiceID}/Historys/{InvoiceHistoryID}/Carrier/ConsignmentNotes/{ConsignmentNoteID}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        if ($consignment_note_date !== null) {
            $queryParams['ConsignmentNoteDate'] = ObjectSerializer::toQueryValue($consignment_note_date);
        }
        // query params
        if ($ex_gst_amount !== null) {
            $queryParams['ExGSTAmount'] = ObjectSerializer::toQueryValue($ex_gst_amount);
        }
        // query params
        if ($gst_amount !== null) {
            $queryParams['GSTAmount'] = ObjectSerializer::toQueryValue($gst_amount);
        }
        // query params
        if ($consignment_note_no !== null) {
            $queryParams['ConsignmentNoteNo'] = ObjectSerializer::toQueryValue($consignment_note_no);
        }
        // header params
        if ($accept !== null) {
            $headerParams['Accept'] = ObjectSerializer::toHeaderValue($accept);
        }
        // header params
        if ($jiwa_stateful !== null) {
            $headerParams['jiwa-stateful'] = ObjectSerializer::toHeaderValue($jiwa_stateful);
        }

        // path params
        if ($invoice_id !== null) {
            $resourcePath = str_replace(
                '{' . 'InvoiceID' . '}',
                ObjectSerializer::toPathValue($invoice_id),
                $resourcePath
            );
        }
        // path params
        if ($invoice_history_id !== null) {
            $resourcePath = str_replace(
                '{' . 'InvoiceHistoryID' . '}',
                ObjectSerializer::toPathValue($invoice_history_id),
                $resourcePath
            );
        }
        // path params
        if ($consignment_note_id !== null) {
            $resourcePath = str_replace(
                '{' . 'ConsignmentNoteID' . '}',
                ObjectSerializer::toPathValue($consignment_note_id),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;
        if (isset($body)) {
            $_tempBody = $body;
        }

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json', 'application/xml']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json', 'application/xml'],
                ['application/x-www-form-urlencoded', 'application/json', 'application/xml']
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            
            if($headers['Content-Type'] === 'application/json') {
                // \stdClass has no __toString(), so we should encode it manually
                if ($httpBody instanceof \stdClass) {
                    $httpBody = \GuzzleHttp\json_encode($httpBody);
                }
                // array has no __toString(), so we should encode it manually
                if(is_array($httpBody)) {
                    $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($httpBody));
                }
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\Query::build($formParams);
            }
        }

        // this endpoint requires HTTP basic authentication
        if ($this->config->getUsername() !== null || $this->config->getPassword() !== null) {
            $headers['Authorization'] = 'Basic ' . base64_encode($this->config->getUsername() . ":" . $this->config->getPassword());
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\Query::build($queryParams);
        return new Request(
            'PATCH',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation salesOrderHistoryConsignmentNotesPOSTRequestInvoiceIDHistorysInvoiceHistoryIDCarrierConsignmentNotesPost
     *
     * Adds a consignment note to a sales order history
     *
     * @param  string $accept Accept Header (required)
     * @param  string $invoice_id invoice_id (required)
     * @param  string $invoice_history_id invoice_history_id (required)
     * @param  bool $jiwa_stateful Stateful indicator (optional)
     * @param  \DateTime $consignment_note_date consignment_note_date (optional)
     * @param  double $ex_gst_amount ex_gst_amount (optional)
     * @param  double $gst_amount gst_amount (optional)
     * @param  string $consignment_note_no consignment_note_no (optional)
     * @param  \Jiwa\Model\SalesOrderHistoryConsignmentNotesPOSTRequest $body body (optional)
     *
     * @throws \Jiwa\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Jiwa\Model\SalesOrderConsignmentNote
     */
    public function salesOrderHistoryConsignmentNotesPOSTRequestInvoiceIDHistorysInvoiceHistoryIDCarrierConsignmentNotesPost($accept, $invoice_id, $invoice_history_id, $jiwa_stateful = null, $consignment_note_date = null, $ex_gst_amount = null, $gst_amount = null, $consignment_note_no = null, $body = null)
    {
        list($response) = $this->salesOrderHistoryConsignmentNotesPOSTRequestInvoiceIDHistorysInvoiceHistoryIDCarrierConsignmentNotesPostWithHttpInfo($accept, $invoice_id, $invoice_history_id, $jiwa_stateful, $consignment_note_date, $ex_gst_amount, $gst_amount, $consignment_note_no, $body);
        return $response;
    }

    /**
     * Operation salesOrderHistoryConsignmentNotesPOSTRequestInvoiceIDHistorysInvoiceHistoryIDCarrierConsignmentNotesPostWithHttpInfo
     *
     * Adds a consignment note to a sales order history
     *
     * @param  string $accept Accept Header (required)
     * @param  string $invoice_id (required)
     * @param  string $invoice_history_id (required)
     * @param  bool $jiwa_stateful Stateful indicator (optional)
     * @param  \DateTime $consignment_note_date (optional)
     * @param  double $ex_gst_amount (optional)
     * @param  double $gst_amount (optional)
     * @param  string $consignment_note_no (optional)
     * @param  \Jiwa\Model\SalesOrderHistoryConsignmentNotesPOSTRequest $body (optional)
     *
     * @throws \Jiwa\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Jiwa\Model\SalesOrderConsignmentNote, HTTP status code, HTTP response headers (array of strings)
     */
    public function salesOrderHistoryConsignmentNotesPOSTRequestInvoiceIDHistorysInvoiceHistoryIDCarrierConsignmentNotesPostWithHttpInfo($accept, $invoice_id, $invoice_history_id, $jiwa_stateful = null, $consignment_note_date = null, $ex_gst_amount = null, $gst_amount = null, $consignment_note_no = null, $body = null)
    {
        $returnType = '\Jiwa\Model\SalesOrderConsignmentNote';
        $request = $this->salesOrderHistoryConsignmentNotesPOSTRequestInvoiceIDHistorysInvoiceHistoryIDCarrierConsignmentNotesPostRequest($accept, $invoice_id, $invoice_history_id, $jiwa_stateful, $consignment_note_date, $ex_gst_amount, $gst_amount, $consignment_note_no, $body);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Jiwa\Model\SalesOrderConsignmentNote',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 201:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Jiwa\Model\SalesOrderConsignmentNote',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 404:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Jiwa\Model\SalesOrderConsignmentNote',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 401:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Jiwa\Model\SalesOrderConsignmentNote',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 403:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Jiwa\Model\SalesOrderConsignmentNote',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation salesOrderHistoryConsignmentNotesPOSTRequestInvoiceIDHistorysInvoiceHistoryIDCarrierConsignmentNotesPostAsync
     *
     * Adds a consignment note to a sales order history
     *
     * @param  string $accept Accept Header (required)
     * @param  string $invoice_id (required)
     * @param  string $invoice_history_id (required)
     * @param  bool $jiwa_stateful Stateful indicator (optional)
     * @param  \DateTime $consignment_note_date (optional)
     * @param  double $ex_gst_amount (optional)
     * @param  double $gst_amount (optional)
     * @param  string $consignment_note_no (optional)
     * @param  \Jiwa\Model\SalesOrderHistoryConsignmentNotesPOSTRequest $body (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function salesOrderHistoryConsignmentNotesPOSTRequestInvoiceIDHistorysInvoiceHistoryIDCarrierConsignmentNotesPostAsync($accept, $invoice_id, $invoice_history_id, $jiwa_stateful = null, $consignment_note_date = null, $ex_gst_amount = null, $gst_amount = null, $consignment_note_no = null, $body = null)
    {
        return $this->salesOrderHistoryConsignmentNotesPOSTRequestInvoiceIDHistorysInvoiceHistoryIDCarrierConsignmentNotesPostAsyncWithHttpInfo($accept, $invoice_id, $invoice_history_id, $jiwa_stateful, $consignment_note_date, $ex_gst_amount, $gst_amount, $consignment_note_no, $body)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation salesOrderHistoryConsignmentNotesPOSTRequestInvoiceIDHistorysInvoiceHistoryIDCarrierConsignmentNotesPostAsyncWithHttpInfo
     *
     * Adds a consignment note to a sales order history
     *
     * @param  string $accept Accept Header (required)
     * @param  string $invoice_id (required)
     * @param  string $invoice_history_id (required)
     * @param  bool $jiwa_stateful Stateful indicator (optional)
     * @param  \DateTime $consignment_note_date (optional)
     * @param  double $ex_gst_amount (optional)
     * @param  double $gst_amount (optional)
     * @param  string $consignment_note_no (optional)
     * @param  \Jiwa\Model\SalesOrderHistoryConsignmentNotesPOSTRequest $body (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function salesOrderHistoryConsignmentNotesPOSTRequestInvoiceIDHistorysInvoiceHistoryIDCarrierConsignmentNotesPostAsyncWithHttpInfo($accept, $invoice_id, $invoice_history_id, $jiwa_stateful = null, $consignment_note_date = null, $ex_gst_amount = null, $gst_amount = null, $consignment_note_no = null, $body = null)
    {
        $returnType = '\Jiwa\Model\SalesOrderConsignmentNote';
        $request = $this->salesOrderHistoryConsignmentNotesPOSTRequestInvoiceIDHistorysInvoiceHistoryIDCarrierConsignmentNotesPostRequest($accept, $invoice_id, $invoice_history_id, $jiwa_stateful, $consignment_note_date, $ex_gst_amount, $gst_amount, $consignment_note_no, $body);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'salesOrderHistoryConsignmentNotesPOSTRequestInvoiceIDHistorysInvoiceHistoryIDCarrierConsignmentNotesPost'
     *
     * @param  string $accept Accept Header (required)
     * @param  string $invoice_id (required)
     * @param  string $invoice_history_id (required)
     * @param  bool $jiwa_stateful Stateful indicator (optional)
     * @param  \DateTime $consignment_note_date (optional)
     * @param  double $ex_gst_amount (optional)
     * @param  double $gst_amount (optional)
     * @param  string $consignment_note_no (optional)
     * @param  \Jiwa\Model\SalesOrderHistoryConsignmentNotesPOSTRequest $body (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function salesOrderHistoryConsignmentNotesPOSTRequestInvoiceIDHistorysInvoiceHistoryIDCarrierConsignmentNotesPostRequest($accept, $invoice_id, $invoice_history_id, $jiwa_stateful = null, $consignment_note_date = null, $ex_gst_amount = null, $gst_amount = null, $consignment_note_no = null, $body = null)
    {
        // verify the required parameter 'accept' is set
        if ($accept === null || (is_array($accept) && count($accept) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $accept when calling salesOrderHistoryConsignmentNotesPOSTRequestInvoiceIDHistorysInvoiceHistoryIDCarrierConsignmentNotesPost'
            );
        }
        // verify the required parameter 'invoice_id' is set
        if ($invoice_id === null || (is_array($invoice_id) && count($invoice_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $invoice_id when calling salesOrderHistoryConsignmentNotesPOSTRequestInvoiceIDHistorysInvoiceHistoryIDCarrierConsignmentNotesPost'
            );
        }
        // verify the required parameter 'invoice_history_id' is set
        if ($invoice_history_id === null || (is_array($invoice_history_id) && count($invoice_history_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $invoice_history_id when calling salesOrderHistoryConsignmentNotesPOSTRequestInvoiceIDHistorysInvoiceHistoryIDCarrierConsignmentNotesPost'
            );
        }

        $resourcePath = '/SalesOrders/{InvoiceID}/Historys/{InvoiceHistoryID}/Carrier/ConsignmentNotes';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        if ($consignment_note_date !== null) {
            $queryParams['ConsignmentNoteDate'] = ObjectSerializer::toQueryValue($consignment_note_date);
        }
        // query params
        if ($ex_gst_amount !== null) {
            $queryParams['ExGSTAmount'] = ObjectSerializer::toQueryValue($ex_gst_amount);
        }
        // query params
        if ($gst_amount !== null) {
            $queryParams['GSTAmount'] = ObjectSerializer::toQueryValue($gst_amount);
        }
        // query params
        if ($consignment_note_no !== null) {
            $queryParams['ConsignmentNoteNo'] = ObjectSerializer::toQueryValue($consignment_note_no);
        }
        // header params
        if ($accept !== null) {
            $headerParams['Accept'] = ObjectSerializer::toHeaderValue($accept);
        }
        // header params
        if ($jiwa_stateful !== null) {
            $headerParams['jiwa-stateful'] = ObjectSerializer::toHeaderValue($jiwa_stateful);
        }

        // path params
        if ($invoice_id !== null) {
            $resourcePath = str_replace(
                '{' . 'InvoiceID' . '}',
                ObjectSerializer::toPathValue($invoice_id),
                $resourcePath
            );
        }
        // path params
        if ($invoice_history_id !== null) {
            $resourcePath = str_replace(
                '{' . 'InvoiceHistoryID' . '}',
                ObjectSerializer::toPathValue($invoice_history_id),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;
        if (isset($body)) {
            $_tempBody = $body;
        }

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json', 'application/xml']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json', 'application/xml'],
                ['application/x-www-form-urlencoded', 'application/json', 'application/xml']
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            
            if($headers['Content-Type'] === 'application/json') {
                // \stdClass has no __toString(), so we should encode it manually
                if ($httpBody instanceof \stdClass) {
                    $httpBody = \GuzzleHttp\json_encode($httpBody);
                }
                // array has no __toString(), so we should encode it manually
                if(is_array($httpBody)) {
                    $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($httpBody));
                }
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\Query::build($formParams);
            }
        }

        // this endpoint requires HTTP basic authentication
        if ($this->config->getUsername() !== null || $this->config->getPassword() !== null) {
            $headers['Authorization'] = 'Basic ' . base64_encode($this->config->getUsername() . ":" . $this->config->getPassword());
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\Query::build($queryParams);
        return new Request(
            'POST',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation salesOrderHistoryCustomFieldValuesGETManyRequestInvoiceIDHistorysInvoiceHistoryIDCustomFieldValuesGet
     *
     * Retrieves a list of custom field values for a sales order history.
     *
     * @param  string $accept Accept Header (required)
     * @param  string $invoice_id invoice_id (required)
     * @param  string $invoice_history_id invoice_history_id (required)
     * @param  bool $jiwa_stateful Stateful indicator (optional)
     *
     * @throws \Jiwa\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Jiwa\Model\CustomFieldValue[]
     */
    public function salesOrderHistoryCustomFieldValuesGETManyRequestInvoiceIDHistorysInvoiceHistoryIDCustomFieldValuesGet($accept, $invoice_id, $invoice_history_id, $jiwa_stateful = null)
    {
        list($response) = $this->salesOrderHistoryCustomFieldValuesGETManyRequestInvoiceIDHistorysInvoiceHistoryIDCustomFieldValuesGetWithHttpInfo($accept, $invoice_id, $invoice_history_id, $jiwa_stateful);
        return $response;
    }

    /**
     * Operation salesOrderHistoryCustomFieldValuesGETManyRequestInvoiceIDHistorysInvoiceHistoryIDCustomFieldValuesGetWithHttpInfo
     *
     * Retrieves a list of custom field values for a sales order history.
     *
     * @param  string $accept Accept Header (required)
     * @param  string $invoice_id (required)
     * @param  string $invoice_history_id (required)
     * @param  bool $jiwa_stateful Stateful indicator (optional)
     *
     * @throws \Jiwa\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Jiwa\Model\CustomFieldValue[], HTTP status code, HTTP response headers (array of strings)
     */
    public function salesOrderHistoryCustomFieldValuesGETManyRequestInvoiceIDHistorysInvoiceHistoryIDCustomFieldValuesGetWithHttpInfo($accept, $invoice_id, $invoice_history_id, $jiwa_stateful = null)
    {
        $returnType = '\Jiwa\Model\CustomFieldValue[]';
        $request = $this->salesOrderHistoryCustomFieldValuesGETManyRequestInvoiceIDHistorysInvoiceHistoryIDCustomFieldValuesGetRequest($accept, $invoice_id, $invoice_history_id, $jiwa_stateful);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Jiwa\Model\CustomFieldValue[]',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 404:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Jiwa\Model\CustomFieldValue[]',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 403:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Jiwa\Model\CustomFieldValue[]',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 401:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Jiwa\Model\CustomFieldValue[]',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation salesOrderHistoryCustomFieldValuesGETManyRequestInvoiceIDHistorysInvoiceHistoryIDCustomFieldValuesGetAsync
     *
     * Retrieves a list of custom field values for a sales order history.
     *
     * @param  string $accept Accept Header (required)
     * @param  string $invoice_id (required)
     * @param  string $invoice_history_id (required)
     * @param  bool $jiwa_stateful Stateful indicator (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function salesOrderHistoryCustomFieldValuesGETManyRequestInvoiceIDHistorysInvoiceHistoryIDCustomFieldValuesGetAsync($accept, $invoice_id, $invoice_history_id, $jiwa_stateful = null)
    {
        return $this->salesOrderHistoryCustomFieldValuesGETManyRequestInvoiceIDHistorysInvoiceHistoryIDCustomFieldValuesGetAsyncWithHttpInfo($accept, $invoice_id, $invoice_history_id, $jiwa_stateful)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation salesOrderHistoryCustomFieldValuesGETManyRequestInvoiceIDHistorysInvoiceHistoryIDCustomFieldValuesGetAsyncWithHttpInfo
     *
     * Retrieves a list of custom field values for a sales order history.
     *
     * @param  string $accept Accept Header (required)
     * @param  string $invoice_id (required)
     * @param  string $invoice_history_id (required)
     * @param  bool $jiwa_stateful Stateful indicator (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function salesOrderHistoryCustomFieldValuesGETManyRequestInvoiceIDHistorysInvoiceHistoryIDCustomFieldValuesGetAsyncWithHttpInfo($accept, $invoice_id, $invoice_history_id, $jiwa_stateful = null)
    {
        $returnType = '\Jiwa\Model\CustomFieldValue[]';
        $request = $this->salesOrderHistoryCustomFieldValuesGETManyRequestInvoiceIDHistorysInvoiceHistoryIDCustomFieldValuesGetRequest($accept, $invoice_id, $invoice_history_id, $jiwa_stateful);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'salesOrderHistoryCustomFieldValuesGETManyRequestInvoiceIDHistorysInvoiceHistoryIDCustomFieldValuesGet'
     *
     * @param  string $accept Accept Header (required)
     * @param  string $invoice_id (required)
     * @param  string $invoice_history_id (required)
     * @param  bool $jiwa_stateful Stateful indicator (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function salesOrderHistoryCustomFieldValuesGETManyRequestInvoiceIDHistorysInvoiceHistoryIDCustomFieldValuesGetRequest($accept, $invoice_id, $invoice_history_id, $jiwa_stateful = null)
    {
        // verify the required parameter 'accept' is set
        if ($accept === null || (is_array($accept) && count($accept) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $accept when calling salesOrderHistoryCustomFieldValuesGETManyRequestInvoiceIDHistorysInvoiceHistoryIDCustomFieldValuesGet'
            );
        }
        // verify the required parameter 'invoice_id' is set
        if ($invoice_id === null || (is_array($invoice_id) && count($invoice_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $invoice_id when calling salesOrderHistoryCustomFieldValuesGETManyRequestInvoiceIDHistorysInvoiceHistoryIDCustomFieldValuesGet'
            );
        }
        // verify the required parameter 'invoice_history_id' is set
        if ($invoice_history_id === null || (is_array($invoice_history_id) && count($invoice_history_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $invoice_history_id when calling salesOrderHistoryCustomFieldValuesGETManyRequestInvoiceIDHistorysInvoiceHistoryIDCustomFieldValuesGet'
            );
        }

        $resourcePath = '/SalesOrders/{InvoiceID}/Historys/{InvoiceHistoryID}/CustomFieldValues';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // header params
        if ($accept !== null) {
            $headerParams['Accept'] = ObjectSerializer::toHeaderValue($accept);
        }
        // header params
        if ($jiwa_stateful !== null) {
            $headerParams['jiwa-stateful'] = ObjectSerializer::toHeaderValue($jiwa_stateful);
        }

        // path params
        if ($invoice_id !== null) {
            $resourcePath = str_replace(
                '{' . 'InvoiceID' . '}',
                ObjectSerializer::toPathValue($invoice_id),
                $resourcePath
            );
        }
        // path params
        if ($invoice_history_id !== null) {
            $resourcePath = str_replace(
                '{' . 'InvoiceHistoryID' . '}',
                ObjectSerializer::toPathValue($invoice_history_id),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json', 'application/xml']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json', 'application/xml'],
                ['application/x-www-form-urlencoded', 'application/json', 'application/xml']
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            
            if($headers['Content-Type'] === 'application/json') {
                // \stdClass has no __toString(), so we should encode it manually
                if ($httpBody instanceof \stdClass) {
                    $httpBody = \GuzzleHttp\json_encode($httpBody);
                }
                // array has no __toString(), so we should encode it manually
                if(is_array($httpBody)) {
                    $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($httpBody));
                }
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\Query::build($formParams);
            }
        }

        // this endpoint requires HTTP basic authentication
        if ($this->config->getUsername() !== null || $this->config->getPassword() !== null) {
            $headers['Authorization'] = 'Basic ' . base64_encode($this->config->getUsername() . ":" . $this->config->getPassword());
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\Query::build($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation salesOrderHistoryCustomFieldValuesGETRequestInvoiceIDHistorysInvoiceHistoryIDCustomFieldValuesSettingIDGet
     *
     * Retrieves a sales order history custom field value.
     *
     * @param  string $accept Accept Header (required)
     * @param  string $invoice_id invoice_id (required)
     * @param  string $invoice_history_id invoice_history_id (required)
     * @param  string $setting_id setting_id (required)
     * @param  bool $jiwa_stateful Stateful indicator (optional)
     *
     * @throws \Jiwa\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Jiwa\Model\CustomFieldValue
     */
    public function salesOrderHistoryCustomFieldValuesGETRequestInvoiceIDHistorysInvoiceHistoryIDCustomFieldValuesSettingIDGet($accept, $invoice_id, $invoice_history_id, $setting_id, $jiwa_stateful = null)
    {
        list($response) = $this->salesOrderHistoryCustomFieldValuesGETRequestInvoiceIDHistorysInvoiceHistoryIDCustomFieldValuesSettingIDGetWithHttpInfo($accept, $invoice_id, $invoice_history_id, $setting_id, $jiwa_stateful);
        return $response;
    }

    /**
     * Operation salesOrderHistoryCustomFieldValuesGETRequestInvoiceIDHistorysInvoiceHistoryIDCustomFieldValuesSettingIDGetWithHttpInfo
     *
     * Retrieves a sales order history custom field value.
     *
     * @param  string $accept Accept Header (required)
     * @param  string $invoice_id (required)
     * @param  string $invoice_history_id (required)
     * @param  string $setting_id (required)
     * @param  bool $jiwa_stateful Stateful indicator (optional)
     *
     * @throws \Jiwa\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Jiwa\Model\CustomFieldValue, HTTP status code, HTTP response headers (array of strings)
     */
    public function salesOrderHistoryCustomFieldValuesGETRequestInvoiceIDHistorysInvoiceHistoryIDCustomFieldValuesSettingIDGetWithHttpInfo($accept, $invoice_id, $invoice_history_id, $setting_id, $jiwa_stateful = null)
    {
        $returnType = '\Jiwa\Model\CustomFieldValue';
        $request = $this->salesOrderHistoryCustomFieldValuesGETRequestInvoiceIDHistorysInvoiceHistoryIDCustomFieldValuesSettingIDGetRequest($accept, $invoice_id, $invoice_history_id, $setting_id, $jiwa_stateful);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Jiwa\Model\CustomFieldValue',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 404:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Jiwa\Model\CustomFieldValue',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 401:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Jiwa\Model\CustomFieldValue',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 403:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Jiwa\Model\CustomFieldValue',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation salesOrderHistoryCustomFieldValuesGETRequestInvoiceIDHistorysInvoiceHistoryIDCustomFieldValuesSettingIDGetAsync
     *
     * Retrieves a sales order history custom field value.
     *
     * @param  string $accept Accept Header (required)
     * @param  string $invoice_id (required)
     * @param  string $invoice_history_id (required)
     * @param  string $setting_id (required)
     * @param  bool $jiwa_stateful Stateful indicator (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function salesOrderHistoryCustomFieldValuesGETRequestInvoiceIDHistorysInvoiceHistoryIDCustomFieldValuesSettingIDGetAsync($accept, $invoice_id, $invoice_history_id, $setting_id, $jiwa_stateful = null)
    {
        return $this->salesOrderHistoryCustomFieldValuesGETRequestInvoiceIDHistorysInvoiceHistoryIDCustomFieldValuesSettingIDGetAsyncWithHttpInfo($accept, $invoice_id, $invoice_history_id, $setting_id, $jiwa_stateful)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation salesOrderHistoryCustomFieldValuesGETRequestInvoiceIDHistorysInvoiceHistoryIDCustomFieldValuesSettingIDGetAsyncWithHttpInfo
     *
     * Retrieves a sales order history custom field value.
     *
     * @param  string $accept Accept Header (required)
     * @param  string $invoice_id (required)
     * @param  string $invoice_history_id (required)
     * @param  string $setting_id (required)
     * @param  bool $jiwa_stateful Stateful indicator (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function salesOrderHistoryCustomFieldValuesGETRequestInvoiceIDHistorysInvoiceHistoryIDCustomFieldValuesSettingIDGetAsyncWithHttpInfo($accept, $invoice_id, $invoice_history_id, $setting_id, $jiwa_stateful = null)
    {
        $returnType = '\Jiwa\Model\CustomFieldValue';
        $request = $this->salesOrderHistoryCustomFieldValuesGETRequestInvoiceIDHistorysInvoiceHistoryIDCustomFieldValuesSettingIDGetRequest($accept, $invoice_id, $invoice_history_id, $setting_id, $jiwa_stateful);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'salesOrderHistoryCustomFieldValuesGETRequestInvoiceIDHistorysInvoiceHistoryIDCustomFieldValuesSettingIDGet'
     *
     * @param  string $accept Accept Header (required)
     * @param  string $invoice_id (required)
     * @param  string $invoice_history_id (required)
     * @param  string $setting_id (required)
     * @param  bool $jiwa_stateful Stateful indicator (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function salesOrderHistoryCustomFieldValuesGETRequestInvoiceIDHistorysInvoiceHistoryIDCustomFieldValuesSettingIDGetRequest($accept, $invoice_id, $invoice_history_id, $setting_id, $jiwa_stateful = null)
    {
        // verify the required parameter 'accept' is set
        if ($accept === null || (is_array($accept) && count($accept) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $accept when calling salesOrderHistoryCustomFieldValuesGETRequestInvoiceIDHistorysInvoiceHistoryIDCustomFieldValuesSettingIDGet'
            );
        }
        // verify the required parameter 'invoice_id' is set
        if ($invoice_id === null || (is_array($invoice_id) && count($invoice_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $invoice_id when calling salesOrderHistoryCustomFieldValuesGETRequestInvoiceIDHistorysInvoiceHistoryIDCustomFieldValuesSettingIDGet'
            );
        }
        // verify the required parameter 'invoice_history_id' is set
        if ($invoice_history_id === null || (is_array($invoice_history_id) && count($invoice_history_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $invoice_history_id when calling salesOrderHistoryCustomFieldValuesGETRequestInvoiceIDHistorysInvoiceHistoryIDCustomFieldValuesSettingIDGet'
            );
        }
        // verify the required parameter 'setting_id' is set
        if ($setting_id === null || (is_array($setting_id) && count($setting_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $setting_id when calling salesOrderHistoryCustomFieldValuesGETRequestInvoiceIDHistorysInvoiceHistoryIDCustomFieldValuesSettingIDGet'
            );
        }

        $resourcePath = '/SalesOrders/{InvoiceID}/Historys/{InvoiceHistoryID}/CustomFieldValues/{SettingID}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // header params
        if ($accept !== null) {
            $headerParams['Accept'] = ObjectSerializer::toHeaderValue($accept);
        }
        // header params
        if ($jiwa_stateful !== null) {
            $headerParams['jiwa-stateful'] = ObjectSerializer::toHeaderValue($jiwa_stateful);
        }

        // path params
        if ($invoice_id !== null) {
            $resourcePath = str_replace(
                '{' . 'InvoiceID' . '}',
                ObjectSerializer::toPathValue($invoice_id),
                $resourcePath
            );
        }
        // path params
        if ($invoice_history_id !== null) {
            $resourcePath = str_replace(
                '{' . 'InvoiceHistoryID' . '}',
                ObjectSerializer::toPathValue($invoice_history_id),
                $resourcePath
            );
        }
        // path params
        if ($setting_id !== null) {
            $resourcePath = str_replace(
                '{' . 'SettingID' . '}',
                ObjectSerializer::toPathValue($setting_id),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json', 'application/xml']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json', 'application/xml'],
                ['application/x-www-form-urlencoded', 'application/json', 'application/xml']
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            
            if($headers['Content-Type'] === 'application/json') {
                // \stdClass has no __toString(), so we should encode it manually
                if ($httpBody instanceof \stdClass) {
                    $httpBody = \GuzzleHttp\json_encode($httpBody);
                }
                // array has no __toString(), so we should encode it manually
                if(is_array($httpBody)) {
                    $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($httpBody));
                }
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\Query::build($formParams);
            }
        }

        // this endpoint requires HTTP basic authentication
        if ($this->config->getUsername() !== null || $this->config->getPassword() !== null) {
            $headers['Authorization'] = 'Basic ' . base64_encode($this->config->getUsername() . ":" . $this->config->getPassword());
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\Query::build($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation salesOrderHistoryCustomFieldValuesPATCHRequestInvoiceIDHistorysInvoiceHistoryIDCustomFieldValuesSettingIDUpdate
     *
     * Updates a sales order history custom field value.
     *
     * @param  string $accept Accept Header (required)
     * @param  string $invoice_id invoice_id (required)
     * @param  string $invoice_history_id invoice_history_id (required)
     * @param  string $setting_id setting_id (required)
     * @param  bool $jiwa_stateful Stateful indicator (optional)
     * @param  string $contents contents (optional)
     * @param  \Jiwa\Model\SalesOrderHistoryCustomFieldValuesPATCHRequest $body body (optional)
     *
     * @throws \Jiwa\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Jiwa\Model\CustomFieldValue
     */
    public function salesOrderHistoryCustomFieldValuesPATCHRequestInvoiceIDHistorysInvoiceHistoryIDCustomFieldValuesSettingIDUpdate($accept, $invoice_id, $invoice_history_id, $setting_id, $jiwa_stateful = null, $contents = null, $body = null)
    {
        list($response) = $this->salesOrderHistoryCustomFieldValuesPATCHRequestInvoiceIDHistorysInvoiceHistoryIDCustomFieldValuesSettingIDUpdateWithHttpInfo($accept, $invoice_id, $invoice_history_id, $setting_id, $jiwa_stateful, $contents, $body);
        return $response;
    }

    /**
     * Operation salesOrderHistoryCustomFieldValuesPATCHRequestInvoiceIDHistorysInvoiceHistoryIDCustomFieldValuesSettingIDUpdateWithHttpInfo
     *
     * Updates a sales order history custom field value.
     *
     * @param  string $accept Accept Header (required)
     * @param  string $invoice_id (required)
     * @param  string $invoice_history_id (required)
     * @param  string $setting_id (required)
     * @param  bool $jiwa_stateful Stateful indicator (optional)
     * @param  string $contents (optional)
     * @param  \Jiwa\Model\SalesOrderHistoryCustomFieldValuesPATCHRequest $body (optional)
     *
     * @throws \Jiwa\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Jiwa\Model\CustomFieldValue, HTTP status code, HTTP response headers (array of strings)
     */
    public function salesOrderHistoryCustomFieldValuesPATCHRequestInvoiceIDHistorysInvoiceHistoryIDCustomFieldValuesSettingIDUpdateWithHttpInfo($accept, $invoice_id, $invoice_history_id, $setting_id, $jiwa_stateful = null, $contents = null, $body = null)
    {
        $returnType = '\Jiwa\Model\CustomFieldValue';
        $request = $this->salesOrderHistoryCustomFieldValuesPATCHRequestInvoiceIDHistorysInvoiceHistoryIDCustomFieldValuesSettingIDUpdateRequest($accept, $invoice_id, $invoice_history_id, $setting_id, $jiwa_stateful, $contents, $body);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Jiwa\Model\CustomFieldValue',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 401:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Jiwa\Model\CustomFieldValue',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 403:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Jiwa\Model\CustomFieldValue',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 404:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Jiwa\Model\CustomFieldValue',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation salesOrderHistoryCustomFieldValuesPATCHRequestInvoiceIDHistorysInvoiceHistoryIDCustomFieldValuesSettingIDUpdateAsync
     *
     * Updates a sales order history custom field value.
     *
     * @param  string $accept Accept Header (required)
     * @param  string $invoice_id (required)
     * @param  string $invoice_history_id (required)
     * @param  string $setting_id (required)
     * @param  bool $jiwa_stateful Stateful indicator (optional)
     * @param  string $contents (optional)
     * @param  \Jiwa\Model\SalesOrderHistoryCustomFieldValuesPATCHRequest $body (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function salesOrderHistoryCustomFieldValuesPATCHRequestInvoiceIDHistorysInvoiceHistoryIDCustomFieldValuesSettingIDUpdateAsync($accept, $invoice_id, $invoice_history_id, $setting_id, $jiwa_stateful = null, $contents = null, $body = null)
    {
        return $this->salesOrderHistoryCustomFieldValuesPATCHRequestInvoiceIDHistorysInvoiceHistoryIDCustomFieldValuesSettingIDUpdateAsyncWithHttpInfo($accept, $invoice_id, $invoice_history_id, $setting_id, $jiwa_stateful, $contents, $body)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation salesOrderHistoryCustomFieldValuesPATCHRequestInvoiceIDHistorysInvoiceHistoryIDCustomFieldValuesSettingIDUpdateAsyncWithHttpInfo
     *
     * Updates a sales order history custom field value.
     *
     * @param  string $accept Accept Header (required)
     * @param  string $invoice_id (required)
     * @param  string $invoice_history_id (required)
     * @param  string $setting_id (required)
     * @param  bool $jiwa_stateful Stateful indicator (optional)
     * @param  string $contents (optional)
     * @param  \Jiwa\Model\SalesOrderHistoryCustomFieldValuesPATCHRequest $body (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function salesOrderHistoryCustomFieldValuesPATCHRequestInvoiceIDHistorysInvoiceHistoryIDCustomFieldValuesSettingIDUpdateAsyncWithHttpInfo($accept, $invoice_id, $invoice_history_id, $setting_id, $jiwa_stateful = null, $contents = null, $body = null)
    {
        $returnType = '\Jiwa\Model\CustomFieldValue';
        $request = $this->salesOrderHistoryCustomFieldValuesPATCHRequestInvoiceIDHistorysInvoiceHistoryIDCustomFieldValuesSettingIDUpdateRequest($accept, $invoice_id, $invoice_history_id, $setting_id, $jiwa_stateful, $contents, $body);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'salesOrderHistoryCustomFieldValuesPATCHRequestInvoiceIDHistorysInvoiceHistoryIDCustomFieldValuesSettingIDUpdate'
     *
     * @param  string $accept Accept Header (required)
     * @param  string $invoice_id (required)
     * @param  string $invoice_history_id (required)
     * @param  string $setting_id (required)
     * @param  bool $jiwa_stateful Stateful indicator (optional)
     * @param  string $contents (optional)
     * @param  \Jiwa\Model\SalesOrderHistoryCustomFieldValuesPATCHRequest $body (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function salesOrderHistoryCustomFieldValuesPATCHRequestInvoiceIDHistorysInvoiceHistoryIDCustomFieldValuesSettingIDUpdateRequest($accept, $invoice_id, $invoice_history_id, $setting_id, $jiwa_stateful = null, $contents = null, $body = null)
    {
        // verify the required parameter 'accept' is set
        if ($accept === null || (is_array($accept) && count($accept) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $accept when calling salesOrderHistoryCustomFieldValuesPATCHRequestInvoiceIDHistorysInvoiceHistoryIDCustomFieldValuesSettingIDUpdate'
            );
        }
        // verify the required parameter 'invoice_id' is set
        if ($invoice_id === null || (is_array($invoice_id) && count($invoice_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $invoice_id when calling salesOrderHistoryCustomFieldValuesPATCHRequestInvoiceIDHistorysInvoiceHistoryIDCustomFieldValuesSettingIDUpdate'
            );
        }
        // verify the required parameter 'invoice_history_id' is set
        if ($invoice_history_id === null || (is_array($invoice_history_id) && count($invoice_history_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $invoice_history_id when calling salesOrderHistoryCustomFieldValuesPATCHRequestInvoiceIDHistorysInvoiceHistoryIDCustomFieldValuesSettingIDUpdate'
            );
        }
        // verify the required parameter 'setting_id' is set
        if ($setting_id === null || (is_array($setting_id) && count($setting_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $setting_id when calling salesOrderHistoryCustomFieldValuesPATCHRequestInvoiceIDHistorysInvoiceHistoryIDCustomFieldValuesSettingIDUpdate'
            );
        }

        $resourcePath = '/SalesOrders/{InvoiceID}/Historys/{InvoiceHistoryID}/CustomFieldValues/{SettingID}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        if ($contents !== null) {
            $queryParams['Contents'] = ObjectSerializer::toQueryValue($contents);
        }
        // header params
        if ($accept !== null) {
            $headerParams['Accept'] = ObjectSerializer::toHeaderValue($accept);
        }
        // header params
        if ($jiwa_stateful !== null) {
            $headerParams['jiwa-stateful'] = ObjectSerializer::toHeaderValue($jiwa_stateful);
        }

        // path params
        if ($invoice_id !== null) {
            $resourcePath = str_replace(
                '{' . 'InvoiceID' . '}',
                ObjectSerializer::toPathValue($invoice_id),
                $resourcePath
            );
        }
        // path params
        if ($invoice_history_id !== null) {
            $resourcePath = str_replace(
                '{' . 'InvoiceHistoryID' . '}',
                ObjectSerializer::toPathValue($invoice_history_id),
                $resourcePath
            );
        }
        // path params
        if ($setting_id !== null) {
            $resourcePath = str_replace(
                '{' . 'SettingID' . '}',
                ObjectSerializer::toPathValue($setting_id),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;
        if (isset($body)) {
            $_tempBody = $body;
        }

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json', 'application/xml']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json', 'application/xml'],
                ['application/x-www-form-urlencoded', 'application/json', 'application/xml']
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            
            if($headers['Content-Type'] === 'application/json') {
                // \stdClass has no __toString(), so we should encode it manually
                if ($httpBody instanceof \stdClass) {
                    $httpBody = \GuzzleHttp\json_encode($httpBody);
                }
                // array has no __toString(), so we should encode it manually
                if(is_array($httpBody)) {
                    $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($httpBody));
                }
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\Query::build($formParams);
            }
        }

        // this endpoint requires HTTP basic authentication
        if ($this->config->getUsername() !== null || $this->config->getPassword() !== null) {
            $headers['Authorization'] = 'Basic ' . base64_encode($this->config->getUsername() . ":" . $this->config->getPassword());
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\Query::build($queryParams);
        return new Request(
            'PATCH',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation salesOrderHistoryCustomFieldsGETManyRequestHistorysCustomFieldsGet
     *
     * Retrieves a list of sales order history custom fields.
     *
     * @param  string $accept Accept Header (required)
     * @param  bool $jiwa_stateful Stateful indicator (optional)
     *
     * @throws \Jiwa\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Jiwa\Model\CustomField[]
     */
    public function salesOrderHistoryCustomFieldsGETManyRequestHistorysCustomFieldsGet($accept, $jiwa_stateful = null)
    {
        list($response) = $this->salesOrderHistoryCustomFieldsGETManyRequestHistorysCustomFieldsGetWithHttpInfo($accept, $jiwa_stateful);
        return $response;
    }

    /**
     * Operation salesOrderHistoryCustomFieldsGETManyRequestHistorysCustomFieldsGetWithHttpInfo
     *
     * Retrieves a list of sales order history custom fields.
     *
     * @param  string $accept Accept Header (required)
     * @param  bool $jiwa_stateful Stateful indicator (optional)
     *
     * @throws \Jiwa\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Jiwa\Model\CustomField[], HTTP status code, HTTP response headers (array of strings)
     */
    public function salesOrderHistoryCustomFieldsGETManyRequestHistorysCustomFieldsGetWithHttpInfo($accept, $jiwa_stateful = null)
    {
        $returnType = '\Jiwa\Model\CustomField[]';
        $request = $this->salesOrderHistoryCustomFieldsGETManyRequestHistorysCustomFieldsGetRequest($accept, $jiwa_stateful);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Jiwa\Model\CustomField[]',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 403:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Jiwa\Model\CustomField[]',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 401:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Jiwa\Model\CustomField[]',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation salesOrderHistoryCustomFieldsGETManyRequestHistorysCustomFieldsGetAsync
     *
     * Retrieves a list of sales order history custom fields.
     *
     * @param  string $accept Accept Header (required)
     * @param  bool $jiwa_stateful Stateful indicator (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function salesOrderHistoryCustomFieldsGETManyRequestHistorysCustomFieldsGetAsync($accept, $jiwa_stateful = null)
    {
        return $this->salesOrderHistoryCustomFieldsGETManyRequestHistorysCustomFieldsGetAsyncWithHttpInfo($accept, $jiwa_stateful)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation salesOrderHistoryCustomFieldsGETManyRequestHistorysCustomFieldsGetAsyncWithHttpInfo
     *
     * Retrieves a list of sales order history custom fields.
     *
     * @param  string $accept Accept Header (required)
     * @param  bool $jiwa_stateful Stateful indicator (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function salesOrderHistoryCustomFieldsGETManyRequestHistorysCustomFieldsGetAsyncWithHttpInfo($accept, $jiwa_stateful = null)
    {
        $returnType = '\Jiwa\Model\CustomField[]';
        $request = $this->salesOrderHistoryCustomFieldsGETManyRequestHistorysCustomFieldsGetRequest($accept, $jiwa_stateful);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'salesOrderHistoryCustomFieldsGETManyRequestHistorysCustomFieldsGet'
     *
     * @param  string $accept Accept Header (required)
     * @param  bool $jiwa_stateful Stateful indicator (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function salesOrderHistoryCustomFieldsGETManyRequestHistorysCustomFieldsGetRequest($accept, $jiwa_stateful = null)
    {
        // verify the required parameter 'accept' is set
        if ($accept === null || (is_array($accept) && count($accept) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $accept when calling salesOrderHistoryCustomFieldsGETManyRequestHistorysCustomFieldsGet'
            );
        }

        $resourcePath = '/SalesOrders/Historys/CustomFields';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // header params
        if ($accept !== null) {
            $headerParams['Accept'] = ObjectSerializer::toHeaderValue($accept);
        }
        // header params
        if ($jiwa_stateful !== null) {
            $headerParams['jiwa-stateful'] = ObjectSerializer::toHeaderValue($jiwa_stateful);
        }


        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json', 'application/xml']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json', 'application/xml'],
                ['application/x-www-form-urlencoded', 'application/json', 'application/xml']
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            
            if($headers['Content-Type'] === 'application/json') {
                // \stdClass has no __toString(), so we should encode it manually
                if ($httpBody instanceof \stdClass) {
                    $httpBody = \GuzzleHttp\json_encode($httpBody);
                }
                // array has no __toString(), so we should encode it manually
                if(is_array($httpBody)) {
                    $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($httpBody));
                }
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\Query::build($formParams);
            }
        }

        // this endpoint requires HTTP basic authentication
        if ($this->config->getUsername() !== null || $this->config->getPassword() !== null) {
            $headers['Authorization'] = 'Basic ' . base64_encode($this->config->getUsername() . ":" . $this->config->getPassword());
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\Query::build($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation salesOrderHistoryFreightItemsDELETERequestInvoiceIDHistorysInvoiceHistoryIDCarrierFreightItemsFreightItemIDDelete
     *
     * Deletes a freight item from a sales order history
     *
     * @param  string $accept Accept Header (required)
     * @param  string $invoice_id invoice_id (required)
     * @param  string $invoice_history_id invoice_history_id (required)
     * @param  string $freight_item_id freight_item_id (required)
     * @param  bool $jiwa_stateful Stateful indicator (optional)
     *
     * @throws \Jiwa\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Jiwa\Model\Object
     */
    public function salesOrderHistoryFreightItemsDELETERequestInvoiceIDHistorysInvoiceHistoryIDCarrierFreightItemsFreightItemIDDelete($accept, $invoice_id, $invoice_history_id, $freight_item_id, $jiwa_stateful = null)
    {
        list($response) = $this->salesOrderHistoryFreightItemsDELETERequestInvoiceIDHistorysInvoiceHistoryIDCarrierFreightItemsFreightItemIDDeleteWithHttpInfo($accept, $invoice_id, $invoice_history_id, $freight_item_id, $jiwa_stateful);
        return $response;
    }

    /**
     * Operation salesOrderHistoryFreightItemsDELETERequestInvoiceIDHistorysInvoiceHistoryIDCarrierFreightItemsFreightItemIDDeleteWithHttpInfo
     *
     * Deletes a freight item from a sales order history
     *
     * @param  string $accept Accept Header (required)
     * @param  string $invoice_id (required)
     * @param  string $invoice_history_id (required)
     * @param  string $freight_item_id (required)
     * @param  bool $jiwa_stateful Stateful indicator (optional)
     *
     * @throws \Jiwa\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Jiwa\Model\Object, HTTP status code, HTTP response headers (array of strings)
     */
    public function salesOrderHistoryFreightItemsDELETERequestInvoiceIDHistorysInvoiceHistoryIDCarrierFreightItemsFreightItemIDDeleteWithHttpInfo($accept, $invoice_id, $invoice_history_id, $freight_item_id, $jiwa_stateful = null)
    {
        $returnType = '\Jiwa\Model\Object';
        $request = $this->salesOrderHistoryFreightItemsDELETERequestInvoiceIDHistorysInvoiceHistoryIDCarrierFreightItemsFreightItemIDDeleteRequest($accept, $invoice_id, $invoice_history_id, $freight_item_id, $jiwa_stateful);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Jiwa\Model\Object',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 204:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Jiwa\Model\Object',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 403:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Jiwa\Model\Object',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 404:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Jiwa\Model\Object',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 401:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Jiwa\Model\Object',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation salesOrderHistoryFreightItemsDELETERequestInvoiceIDHistorysInvoiceHistoryIDCarrierFreightItemsFreightItemIDDeleteAsync
     *
     * Deletes a freight item from a sales order history
     *
     * @param  string $accept Accept Header (required)
     * @param  string $invoice_id (required)
     * @param  string $invoice_history_id (required)
     * @param  string $freight_item_id (required)
     * @param  bool $jiwa_stateful Stateful indicator (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function salesOrderHistoryFreightItemsDELETERequestInvoiceIDHistorysInvoiceHistoryIDCarrierFreightItemsFreightItemIDDeleteAsync($accept, $invoice_id, $invoice_history_id, $freight_item_id, $jiwa_stateful = null)
    {
        return $this->salesOrderHistoryFreightItemsDELETERequestInvoiceIDHistorysInvoiceHistoryIDCarrierFreightItemsFreightItemIDDeleteAsyncWithHttpInfo($accept, $invoice_id, $invoice_history_id, $freight_item_id, $jiwa_stateful)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation salesOrderHistoryFreightItemsDELETERequestInvoiceIDHistorysInvoiceHistoryIDCarrierFreightItemsFreightItemIDDeleteAsyncWithHttpInfo
     *
     * Deletes a freight item from a sales order history
     *
     * @param  string $accept Accept Header (required)
     * @param  string $invoice_id (required)
     * @param  string $invoice_history_id (required)
     * @param  string $freight_item_id (required)
     * @param  bool $jiwa_stateful Stateful indicator (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function salesOrderHistoryFreightItemsDELETERequestInvoiceIDHistorysInvoiceHistoryIDCarrierFreightItemsFreightItemIDDeleteAsyncWithHttpInfo($accept, $invoice_id, $invoice_history_id, $freight_item_id, $jiwa_stateful = null)
    {
        $returnType = '\Jiwa\Model\Object';
        $request = $this->salesOrderHistoryFreightItemsDELETERequestInvoiceIDHistorysInvoiceHistoryIDCarrierFreightItemsFreightItemIDDeleteRequest($accept, $invoice_id, $invoice_history_id, $freight_item_id, $jiwa_stateful);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'salesOrderHistoryFreightItemsDELETERequestInvoiceIDHistorysInvoiceHistoryIDCarrierFreightItemsFreightItemIDDelete'
     *
     * @param  string $accept Accept Header (required)
     * @param  string $invoice_id (required)
     * @param  string $invoice_history_id (required)
     * @param  string $freight_item_id (required)
     * @param  bool $jiwa_stateful Stateful indicator (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function salesOrderHistoryFreightItemsDELETERequestInvoiceIDHistorysInvoiceHistoryIDCarrierFreightItemsFreightItemIDDeleteRequest($accept, $invoice_id, $invoice_history_id, $freight_item_id, $jiwa_stateful = null)
    {
        // verify the required parameter 'accept' is set
        if ($accept === null || (is_array($accept) && count($accept) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $accept when calling salesOrderHistoryFreightItemsDELETERequestInvoiceIDHistorysInvoiceHistoryIDCarrierFreightItemsFreightItemIDDelete'
            );
        }
        // verify the required parameter 'invoice_id' is set
        if ($invoice_id === null || (is_array($invoice_id) && count($invoice_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $invoice_id when calling salesOrderHistoryFreightItemsDELETERequestInvoiceIDHistorysInvoiceHistoryIDCarrierFreightItemsFreightItemIDDelete'
            );
        }
        // verify the required parameter 'invoice_history_id' is set
        if ($invoice_history_id === null || (is_array($invoice_history_id) && count($invoice_history_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $invoice_history_id when calling salesOrderHistoryFreightItemsDELETERequestInvoiceIDHistorysInvoiceHistoryIDCarrierFreightItemsFreightItemIDDelete'
            );
        }
        // verify the required parameter 'freight_item_id' is set
        if ($freight_item_id === null || (is_array($freight_item_id) && count($freight_item_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $freight_item_id when calling salesOrderHistoryFreightItemsDELETERequestInvoiceIDHistorysInvoiceHistoryIDCarrierFreightItemsFreightItemIDDelete'
            );
        }

        $resourcePath = '/SalesOrders/{InvoiceID}/Historys/{InvoiceHistoryID}/Carrier/FreightItems/{FreightItemID}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // header params
        if ($accept !== null) {
            $headerParams['Accept'] = ObjectSerializer::toHeaderValue($accept);
        }
        // header params
        if ($jiwa_stateful !== null) {
            $headerParams['jiwa-stateful'] = ObjectSerializer::toHeaderValue($jiwa_stateful);
        }

        // path params
        if ($invoice_id !== null) {
            $resourcePath = str_replace(
                '{' . 'InvoiceID' . '}',
                ObjectSerializer::toPathValue($invoice_id),
                $resourcePath
            );
        }
        // path params
        if ($invoice_history_id !== null) {
            $resourcePath = str_replace(
                '{' . 'InvoiceHistoryID' . '}',
                ObjectSerializer::toPathValue($invoice_history_id),
                $resourcePath
            );
        }
        // path params
        if ($freight_item_id !== null) {
            $resourcePath = str_replace(
                '{' . 'FreightItemID' . '}',
                ObjectSerializer::toPathValue($freight_item_id),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json', 'application/xml']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json', 'application/xml'],
                ['application/x-www-form-urlencoded', 'application/json', 'application/xml']
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            
            if($headers['Content-Type'] === 'application/json') {
                // \stdClass has no __toString(), so we should encode it manually
                if ($httpBody instanceof \stdClass) {
                    $httpBody = \GuzzleHttp\json_encode($httpBody);
                }
                // array has no __toString(), so we should encode it manually
                if(is_array($httpBody)) {
                    $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($httpBody));
                }
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\Query::build($formParams);
            }
        }

        // this endpoint requires HTTP basic authentication
        if ($this->config->getUsername() !== null || $this->config->getPassword() !== null) {
            $headers['Authorization'] = 'Basic ' . base64_encode($this->config->getUsername() . ":" . $this->config->getPassword());
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\Query::build($queryParams);
        return new Request(
            'DELETE',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation salesOrderHistoryFreightItemsGETManyRequestInvoiceIDHistorysInvoiceHistoryIDCarrierFreightItemsGet
     *
     * Retrieves freight items for a sales order history.
     *
     * @param  string $accept Accept Header (required)
     * @param  string $invoice_id invoice_id (required)
     * @param  string $invoice_history_id invoice_history_id (required)
     * @param  bool $jiwa_stateful Stateful indicator (optional)
     *
     * @throws \Jiwa\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Jiwa\Model\SalesOrderFreightItem[]
     */
    public function salesOrderHistoryFreightItemsGETManyRequestInvoiceIDHistorysInvoiceHistoryIDCarrierFreightItemsGet($accept, $invoice_id, $invoice_history_id, $jiwa_stateful = null)
    {
        list($response) = $this->salesOrderHistoryFreightItemsGETManyRequestInvoiceIDHistorysInvoiceHistoryIDCarrierFreightItemsGetWithHttpInfo($accept, $invoice_id, $invoice_history_id, $jiwa_stateful);
        return $response;
    }

    /**
     * Operation salesOrderHistoryFreightItemsGETManyRequestInvoiceIDHistorysInvoiceHistoryIDCarrierFreightItemsGetWithHttpInfo
     *
     * Retrieves freight items for a sales order history.
     *
     * @param  string $accept Accept Header (required)
     * @param  string $invoice_id (required)
     * @param  string $invoice_history_id (required)
     * @param  bool $jiwa_stateful Stateful indicator (optional)
     *
     * @throws \Jiwa\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Jiwa\Model\SalesOrderFreightItem[], HTTP status code, HTTP response headers (array of strings)
     */
    public function salesOrderHistoryFreightItemsGETManyRequestInvoiceIDHistorysInvoiceHistoryIDCarrierFreightItemsGetWithHttpInfo($accept, $invoice_id, $invoice_history_id, $jiwa_stateful = null)
    {
        $returnType = '\Jiwa\Model\SalesOrderFreightItem[]';
        $request = $this->salesOrderHistoryFreightItemsGETManyRequestInvoiceIDHistorysInvoiceHistoryIDCarrierFreightItemsGetRequest($accept, $invoice_id, $invoice_history_id, $jiwa_stateful);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Jiwa\Model\SalesOrderFreightItem[]',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 401:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Jiwa\Model\SalesOrderFreightItem[]',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 404:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Jiwa\Model\SalesOrderFreightItem[]',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 403:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Jiwa\Model\SalesOrderFreightItem[]',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation salesOrderHistoryFreightItemsGETManyRequestInvoiceIDHistorysInvoiceHistoryIDCarrierFreightItemsGetAsync
     *
     * Retrieves freight items for a sales order history.
     *
     * @param  string $accept Accept Header (required)
     * @param  string $invoice_id (required)
     * @param  string $invoice_history_id (required)
     * @param  bool $jiwa_stateful Stateful indicator (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function salesOrderHistoryFreightItemsGETManyRequestInvoiceIDHistorysInvoiceHistoryIDCarrierFreightItemsGetAsync($accept, $invoice_id, $invoice_history_id, $jiwa_stateful = null)
    {
        return $this->salesOrderHistoryFreightItemsGETManyRequestInvoiceIDHistorysInvoiceHistoryIDCarrierFreightItemsGetAsyncWithHttpInfo($accept, $invoice_id, $invoice_history_id, $jiwa_stateful)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation salesOrderHistoryFreightItemsGETManyRequestInvoiceIDHistorysInvoiceHistoryIDCarrierFreightItemsGetAsyncWithHttpInfo
     *
     * Retrieves freight items for a sales order history.
     *
     * @param  string $accept Accept Header (required)
     * @param  string $invoice_id (required)
     * @param  string $invoice_history_id (required)
     * @param  bool $jiwa_stateful Stateful indicator (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function salesOrderHistoryFreightItemsGETManyRequestInvoiceIDHistorysInvoiceHistoryIDCarrierFreightItemsGetAsyncWithHttpInfo($accept, $invoice_id, $invoice_history_id, $jiwa_stateful = null)
    {
        $returnType = '\Jiwa\Model\SalesOrderFreightItem[]';
        $request = $this->salesOrderHistoryFreightItemsGETManyRequestInvoiceIDHistorysInvoiceHistoryIDCarrierFreightItemsGetRequest($accept, $invoice_id, $invoice_history_id, $jiwa_stateful);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'salesOrderHistoryFreightItemsGETManyRequestInvoiceIDHistorysInvoiceHistoryIDCarrierFreightItemsGet'
     *
     * @param  string $accept Accept Header (required)
     * @param  string $invoice_id (required)
     * @param  string $invoice_history_id (required)
     * @param  bool $jiwa_stateful Stateful indicator (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function salesOrderHistoryFreightItemsGETManyRequestInvoiceIDHistorysInvoiceHistoryIDCarrierFreightItemsGetRequest($accept, $invoice_id, $invoice_history_id, $jiwa_stateful = null)
    {
        // verify the required parameter 'accept' is set
        if ($accept === null || (is_array($accept) && count($accept) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $accept when calling salesOrderHistoryFreightItemsGETManyRequestInvoiceIDHistorysInvoiceHistoryIDCarrierFreightItemsGet'
            );
        }
        // verify the required parameter 'invoice_id' is set
        if ($invoice_id === null || (is_array($invoice_id) && count($invoice_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $invoice_id when calling salesOrderHistoryFreightItemsGETManyRequestInvoiceIDHistorysInvoiceHistoryIDCarrierFreightItemsGet'
            );
        }
        // verify the required parameter 'invoice_history_id' is set
        if ($invoice_history_id === null || (is_array($invoice_history_id) && count($invoice_history_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $invoice_history_id when calling salesOrderHistoryFreightItemsGETManyRequestInvoiceIDHistorysInvoiceHistoryIDCarrierFreightItemsGet'
            );
        }

        $resourcePath = '/SalesOrders/{InvoiceID}/Historys/{InvoiceHistoryID}/Carrier/FreightItems';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // header params
        if ($accept !== null) {
            $headerParams['Accept'] = ObjectSerializer::toHeaderValue($accept);
        }
        // header params
        if ($jiwa_stateful !== null) {
            $headerParams['jiwa-stateful'] = ObjectSerializer::toHeaderValue($jiwa_stateful);
        }

        // path params
        if ($invoice_id !== null) {
            $resourcePath = str_replace(
                '{' . 'InvoiceID' . '}',
                ObjectSerializer::toPathValue($invoice_id),
                $resourcePath
            );
        }
        // path params
        if ($invoice_history_id !== null) {
            $resourcePath = str_replace(
                '{' . 'InvoiceHistoryID' . '}',
                ObjectSerializer::toPathValue($invoice_history_id),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json', 'application/xml']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json', 'application/xml'],
                ['application/x-www-form-urlencoded', 'application/json', 'application/xml']
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            
            if($headers['Content-Type'] === 'application/json') {
                // \stdClass has no __toString(), so we should encode it manually
                if ($httpBody instanceof \stdClass) {
                    $httpBody = \GuzzleHttp\json_encode($httpBody);
                }
                // array has no __toString(), so we should encode it manually
                if(is_array($httpBody)) {
                    $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($httpBody));
                }
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\Query::build($formParams);
            }
        }

        // this endpoint requires HTTP basic authentication
        if ($this->config->getUsername() !== null || $this->config->getPassword() !== null) {
            $headers['Authorization'] = 'Basic ' . base64_encode($this->config->getUsername() . ":" . $this->config->getPassword());
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\Query::build($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation salesOrderHistoryFreightItemsGETRequestInvoiceIDHistorysInvoiceHistoryIDCarrierFreightItemsFreightItemIDGet
     *
     * Retrieves a freight item for a sales order history
     *
     * @param  string $accept Accept Header (required)
     * @param  string $invoice_id invoice_id (required)
     * @param  string $invoice_history_id invoice_history_id (required)
     * @param  string $freight_item_id freight_item_id (required)
     * @param  bool $jiwa_stateful Stateful indicator (optional)
     *
     * @throws \Jiwa\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Jiwa\Model\SalesOrderFreightItem
     */
    public function salesOrderHistoryFreightItemsGETRequestInvoiceIDHistorysInvoiceHistoryIDCarrierFreightItemsFreightItemIDGet($accept, $invoice_id, $invoice_history_id, $freight_item_id, $jiwa_stateful = null)
    {
        list($response) = $this->salesOrderHistoryFreightItemsGETRequestInvoiceIDHistorysInvoiceHistoryIDCarrierFreightItemsFreightItemIDGetWithHttpInfo($accept, $invoice_id, $invoice_history_id, $freight_item_id, $jiwa_stateful);
        return $response;
    }

    /**
     * Operation salesOrderHistoryFreightItemsGETRequestInvoiceIDHistorysInvoiceHistoryIDCarrierFreightItemsFreightItemIDGetWithHttpInfo
     *
     * Retrieves a freight item for a sales order history
     *
     * @param  string $accept Accept Header (required)
     * @param  string $invoice_id (required)
     * @param  string $invoice_history_id (required)
     * @param  string $freight_item_id (required)
     * @param  bool $jiwa_stateful Stateful indicator (optional)
     *
     * @throws \Jiwa\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Jiwa\Model\SalesOrderFreightItem, HTTP status code, HTTP response headers (array of strings)
     */
    public function salesOrderHistoryFreightItemsGETRequestInvoiceIDHistorysInvoiceHistoryIDCarrierFreightItemsFreightItemIDGetWithHttpInfo($accept, $invoice_id, $invoice_history_id, $freight_item_id, $jiwa_stateful = null)
    {
        $returnType = '\Jiwa\Model\SalesOrderFreightItem';
        $request = $this->salesOrderHistoryFreightItemsGETRequestInvoiceIDHistorysInvoiceHistoryIDCarrierFreightItemsFreightItemIDGetRequest($accept, $invoice_id, $invoice_history_id, $freight_item_id, $jiwa_stateful);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Jiwa\Model\SalesOrderFreightItem',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 404:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Jiwa\Model\SalesOrderFreightItem',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 401:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Jiwa\Model\SalesOrderFreightItem',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 403:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Jiwa\Model\SalesOrderFreightItem',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation salesOrderHistoryFreightItemsGETRequestInvoiceIDHistorysInvoiceHistoryIDCarrierFreightItemsFreightItemIDGetAsync
     *
     * Retrieves a freight item for a sales order history
     *
     * @param  string $accept Accept Header (required)
     * @param  string $invoice_id (required)
     * @param  string $invoice_history_id (required)
     * @param  string $freight_item_id (required)
     * @param  bool $jiwa_stateful Stateful indicator (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function salesOrderHistoryFreightItemsGETRequestInvoiceIDHistorysInvoiceHistoryIDCarrierFreightItemsFreightItemIDGetAsync($accept, $invoice_id, $invoice_history_id, $freight_item_id, $jiwa_stateful = null)
    {
        return $this->salesOrderHistoryFreightItemsGETRequestInvoiceIDHistorysInvoiceHistoryIDCarrierFreightItemsFreightItemIDGetAsyncWithHttpInfo($accept, $invoice_id, $invoice_history_id, $freight_item_id, $jiwa_stateful)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation salesOrderHistoryFreightItemsGETRequestInvoiceIDHistorysInvoiceHistoryIDCarrierFreightItemsFreightItemIDGetAsyncWithHttpInfo
     *
     * Retrieves a freight item for a sales order history
     *
     * @param  string $accept Accept Header (required)
     * @param  string $invoice_id (required)
     * @param  string $invoice_history_id (required)
     * @param  string $freight_item_id (required)
     * @param  bool $jiwa_stateful Stateful indicator (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function salesOrderHistoryFreightItemsGETRequestInvoiceIDHistorysInvoiceHistoryIDCarrierFreightItemsFreightItemIDGetAsyncWithHttpInfo($accept, $invoice_id, $invoice_history_id, $freight_item_id, $jiwa_stateful = null)
    {
        $returnType = '\Jiwa\Model\SalesOrderFreightItem';
        $request = $this->salesOrderHistoryFreightItemsGETRequestInvoiceIDHistorysInvoiceHistoryIDCarrierFreightItemsFreightItemIDGetRequest($accept, $invoice_id, $invoice_history_id, $freight_item_id, $jiwa_stateful);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'salesOrderHistoryFreightItemsGETRequestInvoiceIDHistorysInvoiceHistoryIDCarrierFreightItemsFreightItemIDGet'
     *
     * @param  string $accept Accept Header (required)
     * @param  string $invoice_id (required)
     * @param  string $invoice_history_id (required)
     * @param  string $freight_item_id (required)
     * @param  bool $jiwa_stateful Stateful indicator (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function salesOrderHistoryFreightItemsGETRequestInvoiceIDHistorysInvoiceHistoryIDCarrierFreightItemsFreightItemIDGetRequest($accept, $invoice_id, $invoice_history_id, $freight_item_id, $jiwa_stateful = null)
    {
        // verify the required parameter 'accept' is set
        if ($accept === null || (is_array($accept) && count($accept) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $accept when calling salesOrderHistoryFreightItemsGETRequestInvoiceIDHistorysInvoiceHistoryIDCarrierFreightItemsFreightItemIDGet'
            );
        }
        // verify the required parameter 'invoice_id' is set
        if ($invoice_id === null || (is_array($invoice_id) && count($invoice_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $invoice_id when calling salesOrderHistoryFreightItemsGETRequestInvoiceIDHistorysInvoiceHistoryIDCarrierFreightItemsFreightItemIDGet'
            );
        }
        // verify the required parameter 'invoice_history_id' is set
        if ($invoice_history_id === null || (is_array($invoice_history_id) && count($invoice_history_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $invoice_history_id when calling salesOrderHistoryFreightItemsGETRequestInvoiceIDHistorysInvoiceHistoryIDCarrierFreightItemsFreightItemIDGet'
            );
        }
        // verify the required parameter 'freight_item_id' is set
        if ($freight_item_id === null || (is_array($freight_item_id) && count($freight_item_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $freight_item_id when calling salesOrderHistoryFreightItemsGETRequestInvoiceIDHistorysInvoiceHistoryIDCarrierFreightItemsFreightItemIDGet'
            );
        }

        $resourcePath = '/SalesOrders/{InvoiceID}/Historys/{InvoiceHistoryID}/Carrier/FreightItems/{FreightItemID}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // header params
        if ($accept !== null) {
            $headerParams['Accept'] = ObjectSerializer::toHeaderValue($accept);
        }
        // header params
        if ($jiwa_stateful !== null) {
            $headerParams['jiwa-stateful'] = ObjectSerializer::toHeaderValue($jiwa_stateful);
        }

        // path params
        if ($invoice_id !== null) {
            $resourcePath = str_replace(
                '{' . 'InvoiceID' . '}',
                ObjectSerializer::toPathValue($invoice_id),
                $resourcePath
            );
        }
        // path params
        if ($invoice_history_id !== null) {
            $resourcePath = str_replace(
                '{' . 'InvoiceHistoryID' . '}',
                ObjectSerializer::toPathValue($invoice_history_id),
                $resourcePath
            );
        }
        // path params
        if ($freight_item_id !== null) {
            $resourcePath = str_replace(
                '{' . 'FreightItemID' . '}',
                ObjectSerializer::toPathValue($freight_item_id),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json', 'application/xml']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json', 'application/xml'],
                ['application/x-www-form-urlencoded', 'application/json', 'application/xml']
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            
            if($headers['Content-Type'] === 'application/json') {
                // \stdClass has no __toString(), so we should encode it manually
                if ($httpBody instanceof \stdClass) {
                    $httpBody = \GuzzleHttp\json_encode($httpBody);
                }
                // array has no __toString(), so we should encode it manually
                if(is_array($httpBody)) {
                    $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($httpBody));
                }
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\Query::build($formParams);
            }
        }

        // this endpoint requires HTTP basic authentication
        if ($this->config->getUsername() !== null || $this->config->getPassword() !== null) {
            $headers['Authorization'] = 'Basic ' . base64_encode($this->config->getUsername() . ":" . $this->config->getPassword());
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\Query::build($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation salesOrderHistoryFreightItemsPATCHRequestInvoiceIDHistorysInvoiceHistoryIDCarrierFreightItemsFreightItemIDUpdate
     *
     * Updates a freight item for a sales order history
     *
     * @param  string $accept Accept Header (required)
     * @param  string $invoice_id invoice_id (required)
     * @param  string $invoice_history_id invoice_history_id (required)
     * @param  string $freight_item_id freight_item_id (required)
     * @param  bool $jiwa_stateful Stateful indicator (optional)
     * @param  int $number_items number_items (optional)
     * @param  double $item_weight item_weight (optional)
     * @param  double $item_cubic item_cubic (optional)
     * @param  double $item_length item_length (optional)
     * @param  double $item_width item_width (optional)
     * @param  double $item_height item_height (optional)
     * @param  string $reference reference (optional)
     * @param  string $freight_description freight_description (optional)
     * @param  string $consignment_note consignment_note (optional)
     * @param  \Jiwa\Model\SalesOrderHistoryFreightItemsPATCHRequest $body body (optional)
     *
     * @throws \Jiwa\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Jiwa\Model\SalesOrderFreightItem
     */
    public function salesOrderHistoryFreightItemsPATCHRequestInvoiceIDHistorysInvoiceHistoryIDCarrierFreightItemsFreightItemIDUpdate($accept, $invoice_id, $invoice_history_id, $freight_item_id, $jiwa_stateful = null, $number_items = null, $item_weight = null, $item_cubic = null, $item_length = null, $item_width = null, $item_height = null, $reference = null, $freight_description = null, $consignment_note = null, $body = null)
    {
        list($response) = $this->salesOrderHistoryFreightItemsPATCHRequestInvoiceIDHistorysInvoiceHistoryIDCarrierFreightItemsFreightItemIDUpdateWithHttpInfo($accept, $invoice_id, $invoice_history_id, $freight_item_id, $jiwa_stateful, $number_items, $item_weight, $item_cubic, $item_length, $item_width, $item_height, $reference, $freight_description, $consignment_note, $body);
        return $response;
    }

    /**
     * Operation salesOrderHistoryFreightItemsPATCHRequestInvoiceIDHistorysInvoiceHistoryIDCarrierFreightItemsFreightItemIDUpdateWithHttpInfo
     *
     * Updates a freight item for a sales order history
     *
     * @param  string $accept Accept Header (required)
     * @param  string $invoice_id (required)
     * @param  string $invoice_history_id (required)
     * @param  string $freight_item_id (required)
     * @param  bool $jiwa_stateful Stateful indicator (optional)
     * @param  int $number_items (optional)
     * @param  double $item_weight (optional)
     * @param  double $item_cubic (optional)
     * @param  double $item_length (optional)
     * @param  double $item_width (optional)
     * @param  double $item_height (optional)
     * @param  string $reference (optional)
     * @param  string $freight_description (optional)
     * @param  string $consignment_note (optional)
     * @param  \Jiwa\Model\SalesOrderHistoryFreightItemsPATCHRequest $body (optional)
     *
     * @throws \Jiwa\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Jiwa\Model\SalesOrderFreightItem, HTTP status code, HTTP response headers (array of strings)
     */
    public function salesOrderHistoryFreightItemsPATCHRequestInvoiceIDHistorysInvoiceHistoryIDCarrierFreightItemsFreightItemIDUpdateWithHttpInfo($accept, $invoice_id, $invoice_history_id, $freight_item_id, $jiwa_stateful = null, $number_items = null, $item_weight = null, $item_cubic = null, $item_length = null, $item_width = null, $item_height = null, $reference = null, $freight_description = null, $consignment_note = null, $body = null)
    {
        $returnType = '\Jiwa\Model\SalesOrderFreightItem';
        $request = $this->salesOrderHistoryFreightItemsPATCHRequestInvoiceIDHistorysInvoiceHistoryIDCarrierFreightItemsFreightItemIDUpdateRequest($accept, $invoice_id, $invoice_history_id, $freight_item_id, $jiwa_stateful, $number_items, $item_weight, $item_cubic, $item_length, $item_width, $item_height, $reference, $freight_description, $consignment_note, $body);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Jiwa\Model\SalesOrderFreightItem',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 401:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Jiwa\Model\SalesOrderFreightItem',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 404:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Jiwa\Model\SalesOrderFreightItem',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 403:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Jiwa\Model\SalesOrderFreightItem',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation salesOrderHistoryFreightItemsPATCHRequestInvoiceIDHistorysInvoiceHistoryIDCarrierFreightItemsFreightItemIDUpdateAsync
     *
     * Updates a freight item for a sales order history
     *
     * @param  string $accept Accept Header (required)
     * @param  string $invoice_id (required)
     * @param  string $invoice_history_id (required)
     * @param  string $freight_item_id (required)
     * @param  bool $jiwa_stateful Stateful indicator (optional)
     * @param  int $number_items (optional)
     * @param  double $item_weight (optional)
     * @param  double $item_cubic (optional)
     * @param  double $item_length (optional)
     * @param  double $item_width (optional)
     * @param  double $item_height (optional)
     * @param  string $reference (optional)
     * @param  string $freight_description (optional)
     * @param  string $consignment_note (optional)
     * @param  \Jiwa\Model\SalesOrderHistoryFreightItemsPATCHRequest $body (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function salesOrderHistoryFreightItemsPATCHRequestInvoiceIDHistorysInvoiceHistoryIDCarrierFreightItemsFreightItemIDUpdateAsync($accept, $invoice_id, $invoice_history_id, $freight_item_id, $jiwa_stateful = null, $number_items = null, $item_weight = null, $item_cubic = null, $item_length = null, $item_width = null, $item_height = null, $reference = null, $freight_description = null, $consignment_note = null, $body = null)
    {
        return $this->salesOrderHistoryFreightItemsPATCHRequestInvoiceIDHistorysInvoiceHistoryIDCarrierFreightItemsFreightItemIDUpdateAsyncWithHttpInfo($accept, $invoice_id, $invoice_history_id, $freight_item_id, $jiwa_stateful, $number_items, $item_weight, $item_cubic, $item_length, $item_width, $item_height, $reference, $freight_description, $consignment_note, $body)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation salesOrderHistoryFreightItemsPATCHRequestInvoiceIDHistorysInvoiceHistoryIDCarrierFreightItemsFreightItemIDUpdateAsyncWithHttpInfo
     *
     * Updates a freight item for a sales order history
     *
     * @param  string $accept Accept Header (required)
     * @param  string $invoice_id (required)
     * @param  string $invoice_history_id (required)
     * @param  string $freight_item_id (required)
     * @param  bool $jiwa_stateful Stateful indicator (optional)
     * @param  int $number_items (optional)
     * @param  double $item_weight (optional)
     * @param  double $item_cubic (optional)
     * @param  double $item_length (optional)
     * @param  double $item_width (optional)
     * @param  double $item_height (optional)
     * @param  string $reference (optional)
     * @param  string $freight_description (optional)
     * @param  string $consignment_note (optional)
     * @param  \Jiwa\Model\SalesOrderHistoryFreightItemsPATCHRequest $body (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function salesOrderHistoryFreightItemsPATCHRequestInvoiceIDHistorysInvoiceHistoryIDCarrierFreightItemsFreightItemIDUpdateAsyncWithHttpInfo($accept, $invoice_id, $invoice_history_id, $freight_item_id, $jiwa_stateful = null, $number_items = null, $item_weight = null, $item_cubic = null, $item_length = null, $item_width = null, $item_height = null, $reference = null, $freight_description = null, $consignment_note = null, $body = null)
    {
        $returnType = '\Jiwa\Model\SalesOrderFreightItem';
        $request = $this->salesOrderHistoryFreightItemsPATCHRequestInvoiceIDHistorysInvoiceHistoryIDCarrierFreightItemsFreightItemIDUpdateRequest($accept, $invoice_id, $invoice_history_id, $freight_item_id, $jiwa_stateful, $number_items, $item_weight, $item_cubic, $item_length, $item_width, $item_height, $reference, $freight_description, $consignment_note, $body);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'salesOrderHistoryFreightItemsPATCHRequestInvoiceIDHistorysInvoiceHistoryIDCarrierFreightItemsFreightItemIDUpdate'
     *
     * @param  string $accept Accept Header (required)
     * @param  string $invoice_id (required)
     * @param  string $invoice_history_id (required)
     * @param  string $freight_item_id (required)
     * @param  bool $jiwa_stateful Stateful indicator (optional)
     * @param  int $number_items (optional)
     * @param  double $item_weight (optional)
     * @param  double $item_cubic (optional)
     * @param  double $item_length (optional)
     * @param  double $item_width (optional)
     * @param  double $item_height (optional)
     * @param  string $reference (optional)
     * @param  string $freight_description (optional)
     * @param  string $consignment_note (optional)
     * @param  \Jiwa\Model\SalesOrderHistoryFreightItemsPATCHRequest $body (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function salesOrderHistoryFreightItemsPATCHRequestInvoiceIDHistorysInvoiceHistoryIDCarrierFreightItemsFreightItemIDUpdateRequest($accept, $invoice_id, $invoice_history_id, $freight_item_id, $jiwa_stateful = null, $number_items = null, $item_weight = null, $item_cubic = null, $item_length = null, $item_width = null, $item_height = null, $reference = null, $freight_description = null, $consignment_note = null, $body = null)
    {
        // verify the required parameter 'accept' is set
        if ($accept === null || (is_array($accept) && count($accept) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $accept when calling salesOrderHistoryFreightItemsPATCHRequestInvoiceIDHistorysInvoiceHistoryIDCarrierFreightItemsFreightItemIDUpdate'
            );
        }
        // verify the required parameter 'invoice_id' is set
        if ($invoice_id === null || (is_array($invoice_id) && count($invoice_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $invoice_id when calling salesOrderHistoryFreightItemsPATCHRequestInvoiceIDHistorysInvoiceHistoryIDCarrierFreightItemsFreightItemIDUpdate'
            );
        }
        // verify the required parameter 'invoice_history_id' is set
        if ($invoice_history_id === null || (is_array($invoice_history_id) && count($invoice_history_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $invoice_history_id when calling salesOrderHistoryFreightItemsPATCHRequestInvoiceIDHistorysInvoiceHistoryIDCarrierFreightItemsFreightItemIDUpdate'
            );
        }
        // verify the required parameter 'freight_item_id' is set
        if ($freight_item_id === null || (is_array($freight_item_id) && count($freight_item_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $freight_item_id when calling salesOrderHistoryFreightItemsPATCHRequestInvoiceIDHistorysInvoiceHistoryIDCarrierFreightItemsFreightItemIDUpdate'
            );
        }

        $resourcePath = '/SalesOrders/{InvoiceID}/Historys/{InvoiceHistoryID}/Carrier/FreightItems/{FreightItemID}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        if ($number_items !== null) {
            $queryParams['NumberItems'] = ObjectSerializer::toQueryValue($number_items);
        }
        // query params
        if ($item_weight !== null) {
            $queryParams['ItemWeight'] = ObjectSerializer::toQueryValue($item_weight);
        }
        // query params
        if ($item_cubic !== null) {
            $queryParams['ItemCubic'] = ObjectSerializer::toQueryValue($item_cubic);
        }
        // query params
        if ($item_length !== null) {
            $queryParams['ItemLength'] = ObjectSerializer::toQueryValue($item_length);
        }
        // query params
        if ($item_width !== null) {
            $queryParams['ItemWidth'] = ObjectSerializer::toQueryValue($item_width);
        }
        // query params
        if ($item_height !== null) {
            $queryParams['ItemHeight'] = ObjectSerializer::toQueryValue($item_height);
        }
        // query params
        if ($reference !== null) {
            $queryParams['Reference'] = ObjectSerializer::toQueryValue($reference);
        }
        // query params
        if ($freight_description !== null) {
            $queryParams['FreightDescription'] = ObjectSerializer::toQueryValue($freight_description);
        }
        // query params
        if ($consignment_note !== null) {
            $queryParams['ConsignmentNote'] = ObjectSerializer::toQueryValue($consignment_note);
        }
        // header params
        if ($accept !== null) {
            $headerParams['Accept'] = ObjectSerializer::toHeaderValue($accept);
        }
        // header params
        if ($jiwa_stateful !== null) {
            $headerParams['jiwa-stateful'] = ObjectSerializer::toHeaderValue($jiwa_stateful);
        }

        // path params
        if ($invoice_id !== null) {
            $resourcePath = str_replace(
                '{' . 'InvoiceID' . '}',
                ObjectSerializer::toPathValue($invoice_id),
                $resourcePath
            );
        }
        // path params
        if ($invoice_history_id !== null) {
            $resourcePath = str_replace(
                '{' . 'InvoiceHistoryID' . '}',
                ObjectSerializer::toPathValue($invoice_history_id),
                $resourcePath
            );
        }
        // path params
        if ($freight_item_id !== null) {
            $resourcePath = str_replace(
                '{' . 'FreightItemID' . '}',
                ObjectSerializer::toPathValue($freight_item_id),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;
        if (isset($body)) {
            $_tempBody = $body;
        }

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json', 'application/xml']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json', 'application/xml'],
                ['application/x-www-form-urlencoded', 'application/json', 'application/xml']
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            
            if($headers['Content-Type'] === 'application/json') {
                // \stdClass has no __toString(), so we should encode it manually
                if ($httpBody instanceof \stdClass) {
                    $httpBody = \GuzzleHttp\json_encode($httpBody);
                }
                // array has no __toString(), so we should encode it manually
                if(is_array($httpBody)) {
                    $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($httpBody));
                }
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\Query::build($formParams);
            }
        }

        // this endpoint requires HTTP basic authentication
        if ($this->config->getUsername() !== null || $this->config->getPassword() !== null) {
            $headers['Authorization'] = 'Basic ' . base64_encode($this->config->getUsername() . ":" . $this->config->getPassword());
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\Query::build($queryParams);
        return new Request(
            'PATCH',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation salesOrderHistoryFreightItemsPOSTRequestInvoiceIDHistorysInvoiceHistoryIDCarrierFreightItemsPost
     *
     * Adds a freight item to a sales order history
     *
     * @param  string $accept Accept Header (required)
     * @param  string $invoice_id invoice_id (required)
     * @param  string $invoice_history_id invoice_history_id (required)
     * @param  bool $jiwa_stateful Stateful indicator (optional)
     * @param  int $number_items number_items (optional)
     * @param  double $item_weight item_weight (optional)
     * @param  double $item_cubic item_cubic (optional)
     * @param  double $item_length item_length (optional)
     * @param  double $item_width item_width (optional)
     * @param  double $item_height item_height (optional)
     * @param  string $reference reference (optional)
     * @param  string $freight_description freight_description (optional)
     * @param  string $consignment_note consignment_note (optional)
     * @param  \Jiwa\Model\SalesOrderHistoryFreightItemsPOSTRequest $body body (optional)
     *
     * @throws \Jiwa\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Jiwa\Model\SalesOrderFreightItem
     */
    public function salesOrderHistoryFreightItemsPOSTRequestInvoiceIDHistorysInvoiceHistoryIDCarrierFreightItemsPost($accept, $invoice_id, $invoice_history_id, $jiwa_stateful = null, $number_items = null, $item_weight = null, $item_cubic = null, $item_length = null, $item_width = null, $item_height = null, $reference = null, $freight_description = null, $consignment_note = null, $body = null)
    {
        list($response) = $this->salesOrderHistoryFreightItemsPOSTRequestInvoiceIDHistorysInvoiceHistoryIDCarrierFreightItemsPostWithHttpInfo($accept, $invoice_id, $invoice_history_id, $jiwa_stateful, $number_items, $item_weight, $item_cubic, $item_length, $item_width, $item_height, $reference, $freight_description, $consignment_note, $body);
        return $response;
    }

    /**
     * Operation salesOrderHistoryFreightItemsPOSTRequestInvoiceIDHistorysInvoiceHistoryIDCarrierFreightItemsPostWithHttpInfo
     *
     * Adds a freight item to a sales order history
     *
     * @param  string $accept Accept Header (required)
     * @param  string $invoice_id (required)
     * @param  string $invoice_history_id (required)
     * @param  bool $jiwa_stateful Stateful indicator (optional)
     * @param  int $number_items (optional)
     * @param  double $item_weight (optional)
     * @param  double $item_cubic (optional)
     * @param  double $item_length (optional)
     * @param  double $item_width (optional)
     * @param  double $item_height (optional)
     * @param  string $reference (optional)
     * @param  string $freight_description (optional)
     * @param  string $consignment_note (optional)
     * @param  \Jiwa\Model\SalesOrderHistoryFreightItemsPOSTRequest $body (optional)
     *
     * @throws \Jiwa\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Jiwa\Model\SalesOrderFreightItem, HTTP status code, HTTP response headers (array of strings)
     */
    public function salesOrderHistoryFreightItemsPOSTRequestInvoiceIDHistorysInvoiceHistoryIDCarrierFreightItemsPostWithHttpInfo($accept, $invoice_id, $invoice_history_id, $jiwa_stateful = null, $number_items = null, $item_weight = null, $item_cubic = null, $item_length = null, $item_width = null, $item_height = null, $reference = null, $freight_description = null, $consignment_note = null, $body = null)
    {
        $returnType = '\Jiwa\Model\SalesOrderFreightItem';
        $request = $this->salesOrderHistoryFreightItemsPOSTRequestInvoiceIDHistorysInvoiceHistoryIDCarrierFreightItemsPostRequest($accept, $invoice_id, $invoice_history_id, $jiwa_stateful, $number_items, $item_weight, $item_cubic, $item_length, $item_width, $item_height, $reference, $freight_description, $consignment_note, $body);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Jiwa\Model\SalesOrderFreightItem',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 201:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Jiwa\Model\SalesOrderFreightItem',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 404:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Jiwa\Model\SalesOrderFreightItem',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 403:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Jiwa\Model\SalesOrderFreightItem',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 401:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Jiwa\Model\SalesOrderFreightItem',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation salesOrderHistoryFreightItemsPOSTRequestInvoiceIDHistorysInvoiceHistoryIDCarrierFreightItemsPostAsync
     *
     * Adds a freight item to a sales order history
     *
     * @param  string $accept Accept Header (required)
     * @param  string $invoice_id (required)
     * @param  string $invoice_history_id (required)
     * @param  bool $jiwa_stateful Stateful indicator (optional)
     * @param  int $number_items (optional)
     * @param  double $item_weight (optional)
     * @param  double $item_cubic (optional)
     * @param  double $item_length (optional)
     * @param  double $item_width (optional)
     * @param  double $item_height (optional)
     * @param  string $reference (optional)
     * @param  string $freight_description (optional)
     * @param  string $consignment_note (optional)
     * @param  \Jiwa\Model\SalesOrderHistoryFreightItemsPOSTRequest $body (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function salesOrderHistoryFreightItemsPOSTRequestInvoiceIDHistorysInvoiceHistoryIDCarrierFreightItemsPostAsync($accept, $invoice_id, $invoice_history_id, $jiwa_stateful = null, $number_items = null, $item_weight = null, $item_cubic = null, $item_length = null, $item_width = null, $item_height = null, $reference = null, $freight_description = null, $consignment_note = null, $body = null)
    {
        return $this->salesOrderHistoryFreightItemsPOSTRequestInvoiceIDHistorysInvoiceHistoryIDCarrierFreightItemsPostAsyncWithHttpInfo($accept, $invoice_id, $invoice_history_id, $jiwa_stateful, $number_items, $item_weight, $item_cubic, $item_length, $item_width, $item_height, $reference, $freight_description, $consignment_note, $body)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation salesOrderHistoryFreightItemsPOSTRequestInvoiceIDHistorysInvoiceHistoryIDCarrierFreightItemsPostAsyncWithHttpInfo
     *
     * Adds a freight item to a sales order history
     *
     * @param  string $accept Accept Header (required)
     * @param  string $invoice_id (required)
     * @param  string $invoice_history_id (required)
     * @param  bool $jiwa_stateful Stateful indicator (optional)
     * @param  int $number_items (optional)
     * @param  double $item_weight (optional)
     * @param  double $item_cubic (optional)
     * @param  double $item_length (optional)
     * @param  double $item_width (optional)
     * @param  double $item_height (optional)
     * @param  string $reference (optional)
     * @param  string $freight_description (optional)
     * @param  string $consignment_note (optional)
     * @param  \Jiwa\Model\SalesOrderHistoryFreightItemsPOSTRequest $body (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function salesOrderHistoryFreightItemsPOSTRequestInvoiceIDHistorysInvoiceHistoryIDCarrierFreightItemsPostAsyncWithHttpInfo($accept, $invoice_id, $invoice_history_id, $jiwa_stateful = null, $number_items = null, $item_weight = null, $item_cubic = null, $item_length = null, $item_width = null, $item_height = null, $reference = null, $freight_description = null, $consignment_note = null, $body = null)
    {
        $returnType = '\Jiwa\Model\SalesOrderFreightItem';
        $request = $this->salesOrderHistoryFreightItemsPOSTRequestInvoiceIDHistorysInvoiceHistoryIDCarrierFreightItemsPostRequest($accept, $invoice_id, $invoice_history_id, $jiwa_stateful, $number_items, $item_weight, $item_cubic, $item_length, $item_width, $item_height, $reference, $freight_description, $consignment_note, $body);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'salesOrderHistoryFreightItemsPOSTRequestInvoiceIDHistorysInvoiceHistoryIDCarrierFreightItemsPost'
     *
     * @param  string $accept Accept Header (required)
     * @param  string $invoice_id (required)
     * @param  string $invoice_history_id (required)
     * @param  bool $jiwa_stateful Stateful indicator (optional)
     * @param  int $number_items (optional)
     * @param  double $item_weight (optional)
     * @param  double $item_cubic (optional)
     * @param  double $item_length (optional)
     * @param  double $item_width (optional)
     * @param  double $item_height (optional)
     * @param  string $reference (optional)
     * @param  string $freight_description (optional)
     * @param  string $consignment_note (optional)
     * @param  \Jiwa\Model\SalesOrderHistoryFreightItemsPOSTRequest $body (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function salesOrderHistoryFreightItemsPOSTRequestInvoiceIDHistorysInvoiceHistoryIDCarrierFreightItemsPostRequest($accept, $invoice_id, $invoice_history_id, $jiwa_stateful = null, $number_items = null, $item_weight = null, $item_cubic = null, $item_length = null, $item_width = null, $item_height = null, $reference = null, $freight_description = null, $consignment_note = null, $body = null)
    {
        // verify the required parameter 'accept' is set
        if ($accept === null || (is_array($accept) && count($accept) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $accept when calling salesOrderHistoryFreightItemsPOSTRequestInvoiceIDHistorysInvoiceHistoryIDCarrierFreightItemsPost'
            );
        }
        // verify the required parameter 'invoice_id' is set
        if ($invoice_id === null || (is_array($invoice_id) && count($invoice_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $invoice_id when calling salesOrderHistoryFreightItemsPOSTRequestInvoiceIDHistorysInvoiceHistoryIDCarrierFreightItemsPost'
            );
        }
        // verify the required parameter 'invoice_history_id' is set
        if ($invoice_history_id === null || (is_array($invoice_history_id) && count($invoice_history_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $invoice_history_id when calling salesOrderHistoryFreightItemsPOSTRequestInvoiceIDHistorysInvoiceHistoryIDCarrierFreightItemsPost'
            );
        }

        $resourcePath = '/SalesOrders/{InvoiceID}/Historys/{InvoiceHistoryID}/Carrier/FreightItems';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        if ($number_items !== null) {
            $queryParams['NumberItems'] = ObjectSerializer::toQueryValue($number_items);
        }
        // query params
        if ($item_weight !== null) {
            $queryParams['ItemWeight'] = ObjectSerializer::toQueryValue($item_weight);
        }
        // query params
        if ($item_cubic !== null) {
            $queryParams['ItemCubic'] = ObjectSerializer::toQueryValue($item_cubic);
        }
        // query params
        if ($item_length !== null) {
            $queryParams['ItemLength'] = ObjectSerializer::toQueryValue($item_length);
        }
        // query params
        if ($item_width !== null) {
            $queryParams['ItemWidth'] = ObjectSerializer::toQueryValue($item_width);
        }
        // query params
        if ($item_height !== null) {
            $queryParams['ItemHeight'] = ObjectSerializer::toQueryValue($item_height);
        }
        // query params
        if ($reference !== null) {
            $queryParams['Reference'] = ObjectSerializer::toQueryValue($reference);
        }
        // query params
        if ($freight_description !== null) {
            $queryParams['FreightDescription'] = ObjectSerializer::toQueryValue($freight_description);
        }
        // query params
        if ($consignment_note !== null) {
            $queryParams['ConsignmentNote'] = ObjectSerializer::toQueryValue($consignment_note);
        }
        // header params
        if ($accept !== null) {
            $headerParams['Accept'] = ObjectSerializer::toHeaderValue($accept);
        }
        // header params
        if ($jiwa_stateful !== null) {
            $headerParams['jiwa-stateful'] = ObjectSerializer::toHeaderValue($jiwa_stateful);
        }

        // path params
        if ($invoice_id !== null) {
            $resourcePath = str_replace(
                '{' . 'InvoiceID' . '}',
                ObjectSerializer::toPathValue($invoice_id),
                $resourcePath
            );
        }
        // path params
        if ($invoice_history_id !== null) {
            $resourcePath = str_replace(
                '{' . 'InvoiceHistoryID' . '}',
                ObjectSerializer::toPathValue($invoice_history_id),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;
        if (isset($body)) {
            $_tempBody = $body;
        }

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json', 'application/xml']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json', 'application/xml'],
                ['application/x-www-form-urlencoded', 'application/json', 'application/xml']
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            
            if($headers['Content-Type'] === 'application/json') {
                // \stdClass has no __toString(), so we should encode it manually
                if ($httpBody instanceof \stdClass) {
                    $httpBody = \GuzzleHttp\json_encode($httpBody);
                }
                // array has no __toString(), so we should encode it manually
                if(is_array($httpBody)) {
                    $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($httpBody));
                }
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\Query::build($formParams);
            }
        }

        // this endpoint requires HTTP basic authentication
        if ($this->config->getUsername() !== null || $this->config->getPassword() !== null) {
            $headers['Authorization'] = 'Basic ' . base64_encode($this->config->getUsername() . ":" . $this->config->getPassword());
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\Query::build($queryParams);
        return new Request(
            'POST',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation salesOrderHistorysGETManyRequestInvoiceIDHistorysGet
     *
     * Retrieves a list of sales order histories.
     *
     * @param  string $accept Accept Header (required)
     * @param  string $invoice_id invoice_id (required)
     * @param  bool $jiwa_stateful Stateful indicator (optional)
     *
     * @throws \Jiwa\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Jiwa\Model\SalesOrderHistory[]
     */
    public function salesOrderHistorysGETManyRequestInvoiceIDHistorysGet($accept, $invoice_id, $jiwa_stateful = null)
    {
        list($response) = $this->salesOrderHistorysGETManyRequestInvoiceIDHistorysGetWithHttpInfo($accept, $invoice_id, $jiwa_stateful);
        return $response;
    }

    /**
     * Operation salesOrderHistorysGETManyRequestInvoiceIDHistorysGetWithHttpInfo
     *
     * Retrieves a list of sales order histories.
     *
     * @param  string $accept Accept Header (required)
     * @param  string $invoice_id (required)
     * @param  bool $jiwa_stateful Stateful indicator (optional)
     *
     * @throws \Jiwa\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Jiwa\Model\SalesOrderHistory[], HTTP status code, HTTP response headers (array of strings)
     */
    public function salesOrderHistorysGETManyRequestInvoiceIDHistorysGetWithHttpInfo($accept, $invoice_id, $jiwa_stateful = null)
    {
        $returnType = '\Jiwa\Model\SalesOrderHistory[]';
        $request = $this->salesOrderHistorysGETManyRequestInvoiceIDHistorysGetRequest($accept, $invoice_id, $jiwa_stateful);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Jiwa\Model\SalesOrderHistory[]',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 403:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Jiwa\Model\SalesOrderHistory[]',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 404:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Jiwa\Model\SalesOrderHistory[]',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 401:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Jiwa\Model\SalesOrderHistory[]',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation salesOrderHistorysGETManyRequestInvoiceIDHistorysGetAsync
     *
     * Retrieves a list of sales order histories.
     *
     * @param  string $accept Accept Header (required)
     * @param  string $invoice_id (required)
     * @param  bool $jiwa_stateful Stateful indicator (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function salesOrderHistorysGETManyRequestInvoiceIDHistorysGetAsync($accept, $invoice_id, $jiwa_stateful = null)
    {
        return $this->salesOrderHistorysGETManyRequestInvoiceIDHistorysGetAsyncWithHttpInfo($accept, $invoice_id, $jiwa_stateful)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation salesOrderHistorysGETManyRequestInvoiceIDHistorysGetAsyncWithHttpInfo
     *
     * Retrieves a list of sales order histories.
     *
     * @param  string $accept Accept Header (required)
     * @param  string $invoice_id (required)
     * @param  bool $jiwa_stateful Stateful indicator (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function salesOrderHistorysGETManyRequestInvoiceIDHistorysGetAsyncWithHttpInfo($accept, $invoice_id, $jiwa_stateful = null)
    {
        $returnType = '\Jiwa\Model\SalesOrderHistory[]';
        $request = $this->salesOrderHistorysGETManyRequestInvoiceIDHistorysGetRequest($accept, $invoice_id, $jiwa_stateful);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'salesOrderHistorysGETManyRequestInvoiceIDHistorysGet'
     *
     * @param  string $accept Accept Header (required)
     * @param  string $invoice_id (required)
     * @param  bool $jiwa_stateful Stateful indicator (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function salesOrderHistorysGETManyRequestInvoiceIDHistorysGetRequest($accept, $invoice_id, $jiwa_stateful = null)
    {
        // verify the required parameter 'accept' is set
        if ($accept === null || (is_array($accept) && count($accept) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $accept when calling salesOrderHistorysGETManyRequestInvoiceIDHistorysGet'
            );
        }
        // verify the required parameter 'invoice_id' is set
        if ($invoice_id === null || (is_array($invoice_id) && count($invoice_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $invoice_id when calling salesOrderHistorysGETManyRequestInvoiceIDHistorysGet'
            );
        }

        $resourcePath = '/SalesOrders/{InvoiceID}/Historys';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // header params
        if ($accept !== null) {
            $headerParams['Accept'] = ObjectSerializer::toHeaderValue($accept);
        }
        // header params
        if ($jiwa_stateful !== null) {
            $headerParams['jiwa-stateful'] = ObjectSerializer::toHeaderValue($jiwa_stateful);
        }

        // path params
        if ($invoice_id !== null) {
            $resourcePath = str_replace(
                '{' . 'InvoiceID' . '}',
                ObjectSerializer::toPathValue($invoice_id),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json', 'application/xml']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json', 'application/xml'],
                ['application/x-www-form-urlencoded', 'application/json', 'application/xml']
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            
            if($headers['Content-Type'] === 'application/json') {
                // \stdClass has no __toString(), so we should encode it manually
                if ($httpBody instanceof \stdClass) {
                    $httpBody = \GuzzleHttp\json_encode($httpBody);
                }
                // array has no __toString(), so we should encode it manually
                if(is_array($httpBody)) {
                    $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($httpBody));
                }
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\Query::build($formParams);
            }
        }

        // this endpoint requires HTTP basic authentication
        if ($this->config->getUsername() !== null || $this->config->getPassword() !== null) {
            $headers['Authorization'] = 'Basic ' . base64_encode($this->config->getUsername() . ":" . $this->config->getPassword());
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\Query::build($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation salesOrderHistorysGETRequestInvoiceIDHistorysInvoiceHistoryIDGet
     *
     * Retrieves a sales order history.
     *
     * @param  string $accept Accept Header (required)
     * @param  string $invoice_id invoice_id (required)
     * @param  string $invoice_history_id invoice_history_id (required)
     * @param  bool $jiwa_stateful Stateful indicator (optional)
     *
     * @throws \Jiwa\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Jiwa\Model\SalesOrderHistory
     */
    public function salesOrderHistorysGETRequestInvoiceIDHistorysInvoiceHistoryIDGet($accept, $invoice_id, $invoice_history_id, $jiwa_stateful = null)
    {
        list($response) = $this->salesOrderHistorysGETRequestInvoiceIDHistorysInvoiceHistoryIDGetWithHttpInfo($accept, $invoice_id, $invoice_history_id, $jiwa_stateful);
        return $response;
    }

    /**
     * Operation salesOrderHistorysGETRequestInvoiceIDHistorysInvoiceHistoryIDGetWithHttpInfo
     *
     * Retrieves a sales order history.
     *
     * @param  string $accept Accept Header (required)
     * @param  string $invoice_id (required)
     * @param  string $invoice_history_id (required)
     * @param  bool $jiwa_stateful Stateful indicator (optional)
     *
     * @throws \Jiwa\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Jiwa\Model\SalesOrderHistory, HTTP status code, HTTP response headers (array of strings)
     */
    public function salesOrderHistorysGETRequestInvoiceIDHistorysInvoiceHistoryIDGetWithHttpInfo($accept, $invoice_id, $invoice_history_id, $jiwa_stateful = null)
    {
        $returnType = '\Jiwa\Model\SalesOrderHistory';
        $request = $this->salesOrderHistorysGETRequestInvoiceIDHistorysInvoiceHistoryIDGetRequest($accept, $invoice_id, $invoice_history_id, $jiwa_stateful);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Jiwa\Model\SalesOrderHistory',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 401:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Jiwa\Model\SalesOrderHistory',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 403:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Jiwa\Model\SalesOrderHistory',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 404:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Jiwa\Model\SalesOrderHistory',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation salesOrderHistorysGETRequestInvoiceIDHistorysInvoiceHistoryIDGetAsync
     *
     * Retrieves a sales order history.
     *
     * @param  string $accept Accept Header (required)
     * @param  string $invoice_id (required)
     * @param  string $invoice_history_id (required)
     * @param  bool $jiwa_stateful Stateful indicator (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function salesOrderHistorysGETRequestInvoiceIDHistorysInvoiceHistoryIDGetAsync($accept, $invoice_id, $invoice_history_id, $jiwa_stateful = null)
    {
        return $this->salesOrderHistorysGETRequestInvoiceIDHistorysInvoiceHistoryIDGetAsyncWithHttpInfo($accept, $invoice_id, $invoice_history_id, $jiwa_stateful)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation salesOrderHistorysGETRequestInvoiceIDHistorysInvoiceHistoryIDGetAsyncWithHttpInfo
     *
     * Retrieves a sales order history.
     *
     * @param  string $accept Accept Header (required)
     * @param  string $invoice_id (required)
     * @param  string $invoice_history_id (required)
     * @param  bool $jiwa_stateful Stateful indicator (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function salesOrderHistorysGETRequestInvoiceIDHistorysInvoiceHistoryIDGetAsyncWithHttpInfo($accept, $invoice_id, $invoice_history_id, $jiwa_stateful = null)
    {
        $returnType = '\Jiwa\Model\SalesOrderHistory';
        $request = $this->salesOrderHistorysGETRequestInvoiceIDHistorysInvoiceHistoryIDGetRequest($accept, $invoice_id, $invoice_history_id, $jiwa_stateful);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'salesOrderHistorysGETRequestInvoiceIDHistorysInvoiceHistoryIDGet'
     *
     * @param  string $accept Accept Header (required)
     * @param  string $invoice_id (required)
     * @param  string $invoice_history_id (required)
     * @param  bool $jiwa_stateful Stateful indicator (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function salesOrderHistorysGETRequestInvoiceIDHistorysInvoiceHistoryIDGetRequest($accept, $invoice_id, $invoice_history_id, $jiwa_stateful = null)
    {
        // verify the required parameter 'accept' is set
        if ($accept === null || (is_array($accept) && count($accept) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $accept when calling salesOrderHistorysGETRequestInvoiceIDHistorysInvoiceHistoryIDGet'
            );
        }
        // verify the required parameter 'invoice_id' is set
        if ($invoice_id === null || (is_array($invoice_id) && count($invoice_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $invoice_id when calling salesOrderHistorysGETRequestInvoiceIDHistorysInvoiceHistoryIDGet'
            );
        }
        // verify the required parameter 'invoice_history_id' is set
        if ($invoice_history_id === null || (is_array($invoice_history_id) && count($invoice_history_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $invoice_history_id when calling salesOrderHistorysGETRequestInvoiceIDHistorysInvoiceHistoryIDGet'
            );
        }

        $resourcePath = '/SalesOrders/{InvoiceID}/Historys/{InvoiceHistoryID}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // header params
        if ($accept !== null) {
            $headerParams['Accept'] = ObjectSerializer::toHeaderValue($accept);
        }
        // header params
        if ($jiwa_stateful !== null) {
            $headerParams['jiwa-stateful'] = ObjectSerializer::toHeaderValue($jiwa_stateful);
        }

        // path params
        if ($invoice_id !== null) {
            $resourcePath = str_replace(
                '{' . 'InvoiceID' . '}',
                ObjectSerializer::toPathValue($invoice_id),
                $resourcePath
            );
        }
        // path params
        if ($invoice_history_id !== null) {
            $resourcePath = str_replace(
                '{' . 'InvoiceHistoryID' . '}',
                ObjectSerializer::toPathValue($invoice_history_id),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json', 'application/xml']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json', 'application/xml'],
                ['application/x-www-form-urlencoded', 'application/json', 'application/xml']
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            
            if($headers['Content-Type'] === 'application/json') {
                // \stdClass has no __toString(), so we should encode it manually
                if ($httpBody instanceof \stdClass) {
                    $httpBody = \GuzzleHttp\json_encode($httpBody);
                }
                // array has no __toString(), so we should encode it manually
                if(is_array($httpBody)) {
                    $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($httpBody));
                }
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\Query::build($formParams);
            }
        }

        // this endpoint requires HTTP basic authentication
        if ($this->config->getUsername() !== null || $this->config->getPassword() !== null) {
            $headers['Authorization'] = 'Basic ' . base64_encode($this->config->getUsername() . ":" . $this->config->getPassword());
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\Query::build($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation salesOrderHistorysPATCHRequestInvoiceIDHistorysInvoiceHistoryIDUpdate
     *
     * Updates a sales order history.
     *
     * @param  string $accept Accept Header (required)
     * @param  string $invoice_id invoice_id (required)
     * @param  string $invoice_history_id invoice_history_id (required)
     * @param  bool $jiwa_stateful Stateful indicator (optional)
     * @param  int $history_no history_no (optional)
     * @param  string $status status (optional)
     * @param  string $edi_pick_status edi_pick_status (optional)
     * @param  string $db_trans_id db_trans_id (optional)
     * @param  string $ref ref (optional)
     * @param  string $last_modified_by last_modified_by (optional)
     * @param  double $history_total history_total (optional)
     * @param  double $amount_paid amount_paid (optional)
     * @param  double $total_quantity_delivered total_quantity_delivered (optional)
     * @param  string $run_no run_no (optional)
     * @param  bool $delivered delivered (optional)
     * @param  \DateTime $delivered_date delivered_date (optional)
     * @param  \DateTime $record_date record_date (optional)
     * @param  \DateTime $date_created date_created (optional)
     * @param  \DateTime $date_last_saved date_last_saved (optional)
     * @param  \DateTime $date_posted date_posted (optional)
     * @param  \DateTime $date_processed date_processed (optional)
     * @param  bool $invoice_printed invoice_printed (optional)
     * @param  bool $docket_printed docket_printed (optional)
     * @param  bool $pack_slip_printed pack_slip_printed (optional)
     * @param  bool $pick_sheet_printed pick_sheet_printed (optional)
     * @param  bool $other_printed other_printed (optional)
     * @param  bool $invoice_emailed invoice_emailed (optional)
     * @param  bool $docket_emailed docket_emailed (optional)
     * @param  bool $pack_slip_emailed pack_slip_emailed (optional)
     * @param  bool $pick_sheet_emailed pick_sheet_emailed (optional)
     * @param  bool $other_emailed other_emailed (optional)
     * @param  string $delivery_address_contact_name delivery_address_contact_name (optional)
     * @param  string $delivery_addressee delivery_addressee (optional)
     * @param  string $delivery_address_email_address delivery_address_email_address (optional)
     * @param  string $delivery_address1 delivery_address1 (optional)
     * @param  string $delivery_address2 delivery_address2 (optional)
     * @param  string $delivery_address3 delivery_address3 (optional)
     * @param  string $delivery_address4 delivery_address4 (optional)
     * @param  string $delivery_address_postcode delivery_address_postcode (optional)
     * @param  string $delivery_address_country delivery_address_country (optional)
     * @param  string $notes notes (optional)
     * @param  string $courier_details courier_details (optional)
     * @param  string $freight_forward_address1 freight_forward_address1 (optional)
     * @param  string $freight_forward_address2 freight_forward_address2 (optional)
     * @param  string $freight_forward_address3 freight_forward_address3 (optional)
     * @param  string $freight_forward_address4 freight_forward_address4 (optional)
     * @param  string $freight_forward_address_country freight_forward_address_country (optional)
     * @param  string $freight_forward_address_notes freight_forward_address_notes (optional)
     * @param  string $consignment_note consignment_note (optional)
     * @param  string $ediasn_number ediasn_number (optional)
     * @param  bool $drop_shipment drop_shipment (optional)
     * @param  string $cartage_charge1 cartage_charge1 (optional)
     * @param  string $cartage_charge2 cartage_charge2 (optional)
     * @param  string $cartage_charge3 cartage_charge3 (optional)
     * @param  string $carrier carrier (optional)
     * @param  string $custom_field_values custom_field_values (optional)
     * @param  \Jiwa\Model\SalesOrderHistorysPATCHRequest $body body (optional)
     *
     * @throws \Jiwa\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Jiwa\Model\SalesOrderHistory
     */
    public function salesOrderHistorysPATCHRequestInvoiceIDHistorysInvoiceHistoryIDUpdate($accept, $invoice_id, $invoice_history_id, $jiwa_stateful = null, $history_no = null, $status = null, $edi_pick_status = null, $db_trans_id = null, $ref = null, $last_modified_by = null, $history_total = null, $amount_paid = null, $total_quantity_delivered = null, $run_no = null, $delivered = null, $delivered_date = null, $record_date = null, $date_created = null, $date_last_saved = null, $date_posted = null, $date_processed = null, $invoice_printed = null, $docket_printed = null, $pack_slip_printed = null, $pick_sheet_printed = null, $other_printed = null, $invoice_emailed = null, $docket_emailed = null, $pack_slip_emailed = null, $pick_sheet_emailed = null, $other_emailed = null, $delivery_address_contact_name = null, $delivery_addressee = null, $delivery_address_email_address = null, $delivery_address1 = null, $delivery_address2 = null, $delivery_address3 = null, $delivery_address4 = null, $delivery_address_postcode = null, $delivery_address_country = null, $notes = null, $courier_details = null, $freight_forward_address1 = null, $freight_forward_address2 = null, $freight_forward_address3 = null, $freight_forward_address4 = null, $freight_forward_address_country = null, $freight_forward_address_notes = null, $consignment_note = null, $ediasn_number = null, $drop_shipment = null, $cartage_charge1 = null, $cartage_charge2 = null, $cartage_charge3 = null, $carrier = null, $custom_field_values = null, $body = null)
    {
        list($response) = $this->salesOrderHistorysPATCHRequestInvoiceIDHistorysInvoiceHistoryIDUpdateWithHttpInfo($accept, $invoice_id, $invoice_history_id, $jiwa_stateful, $history_no, $status, $edi_pick_status, $db_trans_id, $ref, $last_modified_by, $history_total, $amount_paid, $total_quantity_delivered, $run_no, $delivered, $delivered_date, $record_date, $date_created, $date_last_saved, $date_posted, $date_processed, $invoice_printed, $docket_printed, $pack_slip_printed, $pick_sheet_printed, $other_printed, $invoice_emailed, $docket_emailed, $pack_slip_emailed, $pick_sheet_emailed, $other_emailed, $delivery_address_contact_name, $delivery_addressee, $delivery_address_email_address, $delivery_address1, $delivery_address2, $delivery_address3, $delivery_address4, $delivery_address_postcode, $delivery_address_country, $notes, $courier_details, $freight_forward_address1, $freight_forward_address2, $freight_forward_address3, $freight_forward_address4, $freight_forward_address_country, $freight_forward_address_notes, $consignment_note, $ediasn_number, $drop_shipment, $cartage_charge1, $cartage_charge2, $cartage_charge3, $carrier, $custom_field_values, $body);
        return $response;
    }

    /**
     * Operation salesOrderHistorysPATCHRequestInvoiceIDHistorysInvoiceHistoryIDUpdateWithHttpInfo
     *
     * Updates a sales order history.
     *
     * @param  string $accept Accept Header (required)
     * @param  string $invoice_id (required)
     * @param  string $invoice_history_id (required)
     * @param  bool $jiwa_stateful Stateful indicator (optional)
     * @param  int $history_no (optional)
     * @param  string $status (optional)
     * @param  string $edi_pick_status (optional)
     * @param  string $db_trans_id (optional)
     * @param  string $ref (optional)
     * @param  string $last_modified_by (optional)
     * @param  double $history_total (optional)
     * @param  double $amount_paid (optional)
     * @param  double $total_quantity_delivered (optional)
     * @param  string $run_no (optional)
     * @param  bool $delivered (optional)
     * @param  \DateTime $delivered_date (optional)
     * @param  \DateTime $record_date (optional)
     * @param  \DateTime $date_created (optional)
     * @param  \DateTime $date_last_saved (optional)
     * @param  \DateTime $date_posted (optional)
     * @param  \DateTime $date_processed (optional)
     * @param  bool $invoice_printed (optional)
     * @param  bool $docket_printed (optional)
     * @param  bool $pack_slip_printed (optional)
     * @param  bool $pick_sheet_printed (optional)
     * @param  bool $other_printed (optional)
     * @param  bool $invoice_emailed (optional)
     * @param  bool $docket_emailed (optional)
     * @param  bool $pack_slip_emailed (optional)
     * @param  bool $pick_sheet_emailed (optional)
     * @param  bool $other_emailed (optional)
     * @param  string $delivery_address_contact_name (optional)
     * @param  string $delivery_addressee (optional)
     * @param  string $delivery_address_email_address (optional)
     * @param  string $delivery_address1 (optional)
     * @param  string $delivery_address2 (optional)
     * @param  string $delivery_address3 (optional)
     * @param  string $delivery_address4 (optional)
     * @param  string $delivery_address_postcode (optional)
     * @param  string $delivery_address_country (optional)
     * @param  string $notes (optional)
     * @param  string $courier_details (optional)
     * @param  string $freight_forward_address1 (optional)
     * @param  string $freight_forward_address2 (optional)
     * @param  string $freight_forward_address3 (optional)
     * @param  string $freight_forward_address4 (optional)
     * @param  string $freight_forward_address_country (optional)
     * @param  string $freight_forward_address_notes (optional)
     * @param  string $consignment_note (optional)
     * @param  string $ediasn_number (optional)
     * @param  bool $drop_shipment (optional)
     * @param  string $cartage_charge1 (optional)
     * @param  string $cartage_charge2 (optional)
     * @param  string $cartage_charge3 (optional)
     * @param  string $carrier (optional)
     * @param  string $custom_field_values (optional)
     * @param  \Jiwa\Model\SalesOrderHistorysPATCHRequest $body (optional)
     *
     * @throws \Jiwa\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Jiwa\Model\SalesOrderHistory, HTTP status code, HTTP response headers (array of strings)
     */
    public function salesOrderHistorysPATCHRequestInvoiceIDHistorysInvoiceHistoryIDUpdateWithHttpInfo($accept, $invoice_id, $invoice_history_id, $jiwa_stateful = null, $history_no = null, $status = null, $edi_pick_status = null, $db_trans_id = null, $ref = null, $last_modified_by = null, $history_total = null, $amount_paid = null, $total_quantity_delivered = null, $run_no = null, $delivered = null, $delivered_date = null, $record_date = null, $date_created = null, $date_last_saved = null, $date_posted = null, $date_processed = null, $invoice_printed = null, $docket_printed = null, $pack_slip_printed = null, $pick_sheet_printed = null, $other_printed = null, $invoice_emailed = null, $docket_emailed = null, $pack_slip_emailed = null, $pick_sheet_emailed = null, $other_emailed = null, $delivery_address_contact_name = null, $delivery_addressee = null, $delivery_address_email_address = null, $delivery_address1 = null, $delivery_address2 = null, $delivery_address3 = null, $delivery_address4 = null, $delivery_address_postcode = null, $delivery_address_country = null, $notes = null, $courier_details = null, $freight_forward_address1 = null, $freight_forward_address2 = null, $freight_forward_address3 = null, $freight_forward_address4 = null, $freight_forward_address_country = null, $freight_forward_address_notes = null, $consignment_note = null, $ediasn_number = null, $drop_shipment = null, $cartage_charge1 = null, $cartage_charge2 = null, $cartage_charge3 = null, $carrier = null, $custom_field_values = null, $body = null)
    {
        $returnType = '\Jiwa\Model\SalesOrderHistory';
        $request = $this->salesOrderHistorysPATCHRequestInvoiceIDHistorysInvoiceHistoryIDUpdateRequest($accept, $invoice_id, $invoice_history_id, $jiwa_stateful, $history_no, $status, $edi_pick_status, $db_trans_id, $ref, $last_modified_by, $history_total, $amount_paid, $total_quantity_delivered, $run_no, $delivered, $delivered_date, $record_date, $date_created, $date_last_saved, $date_posted, $date_processed, $invoice_printed, $docket_printed, $pack_slip_printed, $pick_sheet_printed, $other_printed, $invoice_emailed, $docket_emailed, $pack_slip_emailed, $pick_sheet_emailed, $other_emailed, $delivery_address_contact_name, $delivery_addressee, $delivery_address_email_address, $delivery_address1, $delivery_address2, $delivery_address3, $delivery_address4, $delivery_address_postcode, $delivery_address_country, $notes, $courier_details, $freight_forward_address1, $freight_forward_address2, $freight_forward_address3, $freight_forward_address4, $freight_forward_address_country, $freight_forward_address_notes, $consignment_note, $ediasn_number, $drop_shipment, $cartage_charge1, $cartage_charge2, $cartage_charge3, $carrier, $custom_field_values, $body);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Jiwa\Model\SalesOrderHistory',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 404:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Jiwa\Model\SalesOrderHistory',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 401:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Jiwa\Model\SalesOrderHistory',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 403:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Jiwa\Model\SalesOrderHistory',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation salesOrderHistorysPATCHRequestInvoiceIDHistorysInvoiceHistoryIDUpdateAsync
     *
     * Updates a sales order history.
     *
     * @param  string $accept Accept Header (required)
     * @param  string $invoice_id (required)
     * @param  string $invoice_history_id (required)
     * @param  bool $jiwa_stateful Stateful indicator (optional)
     * @param  int $history_no (optional)
     * @param  string $status (optional)
     * @param  string $edi_pick_status (optional)
     * @param  string $db_trans_id (optional)
     * @param  string $ref (optional)
     * @param  string $last_modified_by (optional)
     * @param  double $history_total (optional)
     * @param  double $amount_paid (optional)
     * @param  double $total_quantity_delivered (optional)
     * @param  string $run_no (optional)
     * @param  bool $delivered (optional)
     * @param  \DateTime $delivered_date (optional)
     * @param  \DateTime $record_date (optional)
     * @param  \DateTime $date_created (optional)
     * @param  \DateTime $date_last_saved (optional)
     * @param  \DateTime $date_posted (optional)
     * @param  \DateTime $date_processed (optional)
     * @param  bool $invoice_printed (optional)
     * @param  bool $docket_printed (optional)
     * @param  bool $pack_slip_printed (optional)
     * @param  bool $pick_sheet_printed (optional)
     * @param  bool $other_printed (optional)
     * @param  bool $invoice_emailed (optional)
     * @param  bool $docket_emailed (optional)
     * @param  bool $pack_slip_emailed (optional)
     * @param  bool $pick_sheet_emailed (optional)
     * @param  bool $other_emailed (optional)
     * @param  string $delivery_address_contact_name (optional)
     * @param  string $delivery_addressee (optional)
     * @param  string $delivery_address_email_address (optional)
     * @param  string $delivery_address1 (optional)
     * @param  string $delivery_address2 (optional)
     * @param  string $delivery_address3 (optional)
     * @param  string $delivery_address4 (optional)
     * @param  string $delivery_address_postcode (optional)
     * @param  string $delivery_address_country (optional)
     * @param  string $notes (optional)
     * @param  string $courier_details (optional)
     * @param  string $freight_forward_address1 (optional)
     * @param  string $freight_forward_address2 (optional)
     * @param  string $freight_forward_address3 (optional)
     * @param  string $freight_forward_address4 (optional)
     * @param  string $freight_forward_address_country (optional)
     * @param  string $freight_forward_address_notes (optional)
     * @param  string $consignment_note (optional)
     * @param  string $ediasn_number (optional)
     * @param  bool $drop_shipment (optional)
     * @param  string $cartage_charge1 (optional)
     * @param  string $cartage_charge2 (optional)
     * @param  string $cartage_charge3 (optional)
     * @param  string $carrier (optional)
     * @param  string $custom_field_values (optional)
     * @param  \Jiwa\Model\SalesOrderHistorysPATCHRequest $body (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function salesOrderHistorysPATCHRequestInvoiceIDHistorysInvoiceHistoryIDUpdateAsync($accept, $invoice_id, $invoice_history_id, $jiwa_stateful = null, $history_no = null, $status = null, $edi_pick_status = null, $db_trans_id = null, $ref = null, $last_modified_by = null, $history_total = null, $amount_paid = null, $total_quantity_delivered = null, $run_no = null, $delivered = null, $delivered_date = null, $record_date = null, $date_created = null, $date_last_saved = null, $date_posted = null, $date_processed = null, $invoice_printed = null, $docket_printed = null, $pack_slip_printed = null, $pick_sheet_printed = null, $other_printed = null, $invoice_emailed = null, $docket_emailed = null, $pack_slip_emailed = null, $pick_sheet_emailed = null, $other_emailed = null, $delivery_address_contact_name = null, $delivery_addressee = null, $delivery_address_email_address = null, $delivery_address1 = null, $delivery_address2 = null, $delivery_address3 = null, $delivery_address4 = null, $delivery_address_postcode = null, $delivery_address_country = null, $notes = null, $courier_details = null, $freight_forward_address1 = null, $freight_forward_address2 = null, $freight_forward_address3 = null, $freight_forward_address4 = null, $freight_forward_address_country = null, $freight_forward_address_notes = null, $consignment_note = null, $ediasn_number = null, $drop_shipment = null, $cartage_charge1 = null, $cartage_charge2 = null, $cartage_charge3 = null, $carrier = null, $custom_field_values = null, $body = null)
    {
        return $this->salesOrderHistorysPATCHRequestInvoiceIDHistorysInvoiceHistoryIDUpdateAsyncWithHttpInfo($accept, $invoice_id, $invoice_history_id, $jiwa_stateful, $history_no, $status, $edi_pick_status, $db_trans_id, $ref, $last_modified_by, $history_total, $amount_paid, $total_quantity_delivered, $run_no, $delivered, $delivered_date, $record_date, $date_created, $date_last_saved, $date_posted, $date_processed, $invoice_printed, $docket_printed, $pack_slip_printed, $pick_sheet_printed, $other_printed, $invoice_emailed, $docket_emailed, $pack_slip_emailed, $pick_sheet_emailed, $other_emailed, $delivery_address_contact_name, $delivery_addressee, $delivery_address_email_address, $delivery_address1, $delivery_address2, $delivery_address3, $delivery_address4, $delivery_address_postcode, $delivery_address_country, $notes, $courier_details, $freight_forward_address1, $freight_forward_address2, $freight_forward_address3, $freight_forward_address4, $freight_forward_address_country, $freight_forward_address_notes, $consignment_note, $ediasn_number, $drop_shipment, $cartage_charge1, $cartage_charge2, $cartage_charge3, $carrier, $custom_field_values, $body)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation salesOrderHistorysPATCHRequestInvoiceIDHistorysInvoiceHistoryIDUpdateAsyncWithHttpInfo
     *
     * Updates a sales order history.
     *
     * @param  string $accept Accept Header (required)
     * @param  string $invoice_id (required)
     * @param  string $invoice_history_id (required)
     * @param  bool $jiwa_stateful Stateful indicator (optional)
     * @param  int $history_no (optional)
     * @param  string $status (optional)
     * @param  string $edi_pick_status (optional)
     * @param  string $db_trans_id (optional)
     * @param  string $ref (optional)
     * @param  string $last_modified_by (optional)
     * @param  double $history_total (optional)
     * @param  double $amount_paid (optional)
     * @param  double $total_quantity_delivered (optional)
     * @param  string $run_no (optional)
     * @param  bool $delivered (optional)
     * @param  \DateTime $delivered_date (optional)
     * @param  \DateTime $record_date (optional)
     * @param  \DateTime $date_created (optional)
     * @param  \DateTime $date_last_saved (optional)
     * @param  \DateTime $date_posted (optional)
     * @param  \DateTime $date_processed (optional)
     * @param  bool $invoice_printed (optional)
     * @param  bool $docket_printed (optional)
     * @param  bool $pack_slip_printed (optional)
     * @param  bool $pick_sheet_printed (optional)
     * @param  bool $other_printed (optional)
     * @param  bool $invoice_emailed (optional)
     * @param  bool $docket_emailed (optional)
     * @param  bool $pack_slip_emailed (optional)
     * @param  bool $pick_sheet_emailed (optional)
     * @param  bool $other_emailed (optional)
     * @param  string $delivery_address_contact_name (optional)
     * @param  string $delivery_addressee (optional)
     * @param  string $delivery_address_email_address (optional)
     * @param  string $delivery_address1 (optional)
     * @param  string $delivery_address2 (optional)
     * @param  string $delivery_address3 (optional)
     * @param  string $delivery_address4 (optional)
     * @param  string $delivery_address_postcode (optional)
     * @param  string $delivery_address_country (optional)
     * @param  string $notes (optional)
     * @param  string $courier_details (optional)
     * @param  string $freight_forward_address1 (optional)
     * @param  string $freight_forward_address2 (optional)
     * @param  string $freight_forward_address3 (optional)
     * @param  string $freight_forward_address4 (optional)
     * @param  string $freight_forward_address_country (optional)
     * @param  string $freight_forward_address_notes (optional)
     * @param  string $consignment_note (optional)
     * @param  string $ediasn_number (optional)
     * @param  bool $drop_shipment (optional)
     * @param  string $cartage_charge1 (optional)
     * @param  string $cartage_charge2 (optional)
     * @param  string $cartage_charge3 (optional)
     * @param  string $carrier (optional)
     * @param  string $custom_field_values (optional)
     * @param  \Jiwa\Model\SalesOrderHistorysPATCHRequest $body (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function salesOrderHistorysPATCHRequestInvoiceIDHistorysInvoiceHistoryIDUpdateAsyncWithHttpInfo($accept, $invoice_id, $invoice_history_id, $jiwa_stateful = null, $history_no = null, $status = null, $edi_pick_status = null, $db_trans_id = null, $ref = null, $last_modified_by = null, $history_total = null, $amount_paid = null, $total_quantity_delivered = null, $run_no = null, $delivered = null, $delivered_date = null, $record_date = null, $date_created = null, $date_last_saved = null, $date_posted = null, $date_processed = null, $invoice_printed = null, $docket_printed = null, $pack_slip_printed = null, $pick_sheet_printed = null, $other_printed = null, $invoice_emailed = null, $docket_emailed = null, $pack_slip_emailed = null, $pick_sheet_emailed = null, $other_emailed = null, $delivery_address_contact_name = null, $delivery_addressee = null, $delivery_address_email_address = null, $delivery_address1 = null, $delivery_address2 = null, $delivery_address3 = null, $delivery_address4 = null, $delivery_address_postcode = null, $delivery_address_country = null, $notes = null, $courier_details = null, $freight_forward_address1 = null, $freight_forward_address2 = null, $freight_forward_address3 = null, $freight_forward_address4 = null, $freight_forward_address_country = null, $freight_forward_address_notes = null, $consignment_note = null, $ediasn_number = null, $drop_shipment = null, $cartage_charge1 = null, $cartage_charge2 = null, $cartage_charge3 = null, $carrier = null, $custom_field_values = null, $body = null)
    {
        $returnType = '\Jiwa\Model\SalesOrderHistory';
        $request = $this->salesOrderHistorysPATCHRequestInvoiceIDHistorysInvoiceHistoryIDUpdateRequest($accept, $invoice_id, $invoice_history_id, $jiwa_stateful, $history_no, $status, $edi_pick_status, $db_trans_id, $ref, $last_modified_by, $history_total, $amount_paid, $total_quantity_delivered, $run_no, $delivered, $delivered_date, $record_date, $date_created, $date_last_saved, $date_posted, $date_processed, $invoice_printed, $docket_printed, $pack_slip_printed, $pick_sheet_printed, $other_printed, $invoice_emailed, $docket_emailed, $pack_slip_emailed, $pick_sheet_emailed, $other_emailed, $delivery_address_contact_name, $delivery_addressee, $delivery_address_email_address, $delivery_address1, $delivery_address2, $delivery_address3, $delivery_address4, $delivery_address_postcode, $delivery_address_country, $notes, $courier_details, $freight_forward_address1, $freight_forward_address2, $freight_forward_address3, $freight_forward_address4, $freight_forward_address_country, $freight_forward_address_notes, $consignment_note, $ediasn_number, $drop_shipment, $cartage_charge1, $cartage_charge2, $cartage_charge3, $carrier, $custom_field_values, $body);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'salesOrderHistorysPATCHRequestInvoiceIDHistorysInvoiceHistoryIDUpdate'
     *
     * @param  string $accept Accept Header (required)
     * @param  string $invoice_id (required)
     * @param  string $invoice_history_id (required)
     * @param  bool $jiwa_stateful Stateful indicator (optional)
     * @param  int $history_no (optional)
     * @param  string $status (optional)
     * @param  string $edi_pick_status (optional)
     * @param  string $db_trans_id (optional)
     * @param  string $ref (optional)
     * @param  string $last_modified_by (optional)
     * @param  double $history_total (optional)
     * @param  double $amount_paid (optional)
     * @param  double $total_quantity_delivered (optional)
     * @param  string $run_no (optional)
     * @param  bool $delivered (optional)
     * @param  \DateTime $delivered_date (optional)
     * @param  \DateTime $record_date (optional)
     * @param  \DateTime $date_created (optional)
     * @param  \DateTime $date_last_saved (optional)
     * @param  \DateTime $date_posted (optional)
     * @param  \DateTime $date_processed (optional)
     * @param  bool $invoice_printed (optional)
     * @param  bool $docket_printed (optional)
     * @param  bool $pack_slip_printed (optional)
     * @param  bool $pick_sheet_printed (optional)
     * @param  bool $other_printed (optional)
     * @param  bool $invoice_emailed (optional)
     * @param  bool $docket_emailed (optional)
     * @param  bool $pack_slip_emailed (optional)
     * @param  bool $pick_sheet_emailed (optional)
     * @param  bool $other_emailed (optional)
     * @param  string $delivery_address_contact_name (optional)
     * @param  string $delivery_addressee (optional)
     * @param  string $delivery_address_email_address (optional)
     * @param  string $delivery_address1 (optional)
     * @param  string $delivery_address2 (optional)
     * @param  string $delivery_address3 (optional)
     * @param  string $delivery_address4 (optional)
     * @param  string $delivery_address_postcode (optional)
     * @param  string $delivery_address_country (optional)
     * @param  string $notes (optional)
     * @param  string $courier_details (optional)
     * @param  string $freight_forward_address1 (optional)
     * @param  string $freight_forward_address2 (optional)
     * @param  string $freight_forward_address3 (optional)
     * @param  string $freight_forward_address4 (optional)
     * @param  string $freight_forward_address_country (optional)
     * @param  string $freight_forward_address_notes (optional)
     * @param  string $consignment_note (optional)
     * @param  string $ediasn_number (optional)
     * @param  bool $drop_shipment (optional)
     * @param  string $cartage_charge1 (optional)
     * @param  string $cartage_charge2 (optional)
     * @param  string $cartage_charge3 (optional)
     * @param  string $carrier (optional)
     * @param  string $custom_field_values (optional)
     * @param  \Jiwa\Model\SalesOrderHistorysPATCHRequest $body (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function salesOrderHistorysPATCHRequestInvoiceIDHistorysInvoiceHistoryIDUpdateRequest($accept, $invoice_id, $invoice_history_id, $jiwa_stateful = null, $history_no = null, $status = null, $edi_pick_status = null, $db_trans_id = null, $ref = null, $last_modified_by = null, $history_total = null, $amount_paid = null, $total_quantity_delivered = null, $run_no = null, $delivered = null, $delivered_date = null, $record_date = null, $date_created = null, $date_last_saved = null, $date_posted = null, $date_processed = null, $invoice_printed = null, $docket_printed = null, $pack_slip_printed = null, $pick_sheet_printed = null, $other_printed = null, $invoice_emailed = null, $docket_emailed = null, $pack_slip_emailed = null, $pick_sheet_emailed = null, $other_emailed = null, $delivery_address_contact_name = null, $delivery_addressee = null, $delivery_address_email_address = null, $delivery_address1 = null, $delivery_address2 = null, $delivery_address3 = null, $delivery_address4 = null, $delivery_address_postcode = null, $delivery_address_country = null, $notes = null, $courier_details = null, $freight_forward_address1 = null, $freight_forward_address2 = null, $freight_forward_address3 = null, $freight_forward_address4 = null, $freight_forward_address_country = null, $freight_forward_address_notes = null, $consignment_note = null, $ediasn_number = null, $drop_shipment = null, $cartage_charge1 = null, $cartage_charge2 = null, $cartage_charge3 = null, $carrier = null, $custom_field_values = null, $body = null)
    {
        // verify the required parameter 'accept' is set
        if ($accept === null || (is_array($accept) && count($accept) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $accept when calling salesOrderHistorysPATCHRequestInvoiceIDHistorysInvoiceHistoryIDUpdate'
            );
        }
        // verify the required parameter 'invoice_id' is set
        if ($invoice_id === null || (is_array($invoice_id) && count($invoice_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $invoice_id when calling salesOrderHistorysPATCHRequestInvoiceIDHistorysInvoiceHistoryIDUpdate'
            );
        }
        // verify the required parameter 'invoice_history_id' is set
        if ($invoice_history_id === null || (is_array($invoice_history_id) && count($invoice_history_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $invoice_history_id when calling salesOrderHistorysPATCHRequestInvoiceIDHistorysInvoiceHistoryIDUpdate'
            );
        }

        $resourcePath = '/SalesOrders/{InvoiceID}/Historys/{InvoiceHistoryID}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        if ($history_no !== null) {
            $queryParams['HistoryNo'] = ObjectSerializer::toQueryValue($history_no);
        }
        // query params
        if ($status !== null) {
            $queryParams['Status'] = ObjectSerializer::toQueryValue($status);
        }
        // query params
        if ($edi_pick_status !== null) {
            $queryParams['EDIPickStatus'] = ObjectSerializer::toQueryValue($edi_pick_status);
        }
        // query params
        if ($db_trans_id !== null) {
            $queryParams['DBTransID'] = ObjectSerializer::toQueryValue($db_trans_id);
        }
        // query params
        if ($ref !== null) {
            $queryParams['Ref'] = ObjectSerializer::toQueryValue($ref);
        }
        // query params
        if ($last_modified_by !== null) {
            $queryParams['LastModifiedBy'] = ObjectSerializer::toQueryValue($last_modified_by);
        }
        // query params
        if ($history_total !== null) {
            $queryParams['HistoryTotal'] = ObjectSerializer::toQueryValue($history_total);
        }
        // query params
        if ($amount_paid !== null) {
            $queryParams['AmountPaid'] = ObjectSerializer::toQueryValue($amount_paid);
        }
        // query params
        if ($total_quantity_delivered !== null) {
            $queryParams['TotalQuantityDelivered'] = ObjectSerializer::toQueryValue($total_quantity_delivered);
        }
        // query params
        if ($run_no !== null) {
            $queryParams['RunNo'] = ObjectSerializer::toQueryValue($run_no);
        }
        // query params
        if ($delivered !== null) {
            $queryParams['Delivered'] = ObjectSerializer::toQueryValue($delivered);
        }
        // query params
        if ($delivered_date !== null) {
            $queryParams['DeliveredDate'] = ObjectSerializer::toQueryValue($delivered_date);
        }
        // query params
        if ($record_date !== null) {
            $queryParams['RecordDate'] = ObjectSerializer::toQueryValue($record_date);
        }
        // query params
        if ($date_created !== null) {
            $queryParams['DateCreated'] = ObjectSerializer::toQueryValue($date_created);
        }
        // query params
        if ($date_last_saved !== null) {
            $queryParams['DateLastSaved'] = ObjectSerializer::toQueryValue($date_last_saved);
        }
        // query params
        if ($date_posted !== null) {
            $queryParams['DatePosted'] = ObjectSerializer::toQueryValue($date_posted);
        }
        // query params
        if ($date_processed !== null) {
            $queryParams['DateProcessed'] = ObjectSerializer::toQueryValue($date_processed);
        }
        // query params
        if ($invoice_printed !== null) {
            $queryParams['InvoicePrinted'] = ObjectSerializer::toQueryValue($invoice_printed);
        }
        // query params
        if ($docket_printed !== null) {
            $queryParams['DocketPrinted'] = ObjectSerializer::toQueryValue($docket_printed);
        }
        // query params
        if ($pack_slip_printed !== null) {
            $queryParams['PackSlipPrinted'] = ObjectSerializer::toQueryValue($pack_slip_printed);
        }
        // query params
        if ($pick_sheet_printed !== null) {
            $queryParams['PickSheetPrinted'] = ObjectSerializer::toQueryValue($pick_sheet_printed);
        }
        // query params
        if ($other_printed !== null) {
            $queryParams['OtherPrinted'] = ObjectSerializer::toQueryValue($other_printed);
        }
        // query params
        if ($invoice_emailed !== null) {
            $queryParams['InvoiceEmailed'] = ObjectSerializer::toQueryValue($invoice_emailed);
        }
        // query params
        if ($docket_emailed !== null) {
            $queryParams['DocketEmailed'] = ObjectSerializer::toQueryValue($docket_emailed);
        }
        // query params
        if ($pack_slip_emailed !== null) {
            $queryParams['PackSlipEmailed'] = ObjectSerializer::toQueryValue($pack_slip_emailed);
        }
        // query params
        if ($pick_sheet_emailed !== null) {
            $queryParams['PickSheetEmailed'] = ObjectSerializer::toQueryValue($pick_sheet_emailed);
        }
        // query params
        if ($other_emailed !== null) {
            $queryParams['OtherEmailed'] = ObjectSerializer::toQueryValue($other_emailed);
        }
        // query params
        if ($delivery_address_contact_name !== null) {
            $queryParams['DeliveryAddressContactName'] = ObjectSerializer::toQueryValue($delivery_address_contact_name);
        }
        // query params
        if ($delivery_addressee !== null) {
            $queryParams['DeliveryAddressee'] = ObjectSerializer::toQueryValue($delivery_addressee);
        }
        // query params
        if ($delivery_address_email_address !== null) {
            $queryParams['DeliveryAddressEmailAddress'] = ObjectSerializer::toQueryValue($delivery_address_email_address);
        }
        // query params
        if ($delivery_address1 !== null) {
            $queryParams['DeliveryAddress1'] = ObjectSerializer::toQueryValue($delivery_address1);
        }
        // query params
        if ($delivery_address2 !== null) {
            $queryParams['DeliveryAddress2'] = ObjectSerializer::toQueryValue($delivery_address2);
        }
        // query params
        if ($delivery_address3 !== null) {
            $queryParams['DeliveryAddress3'] = ObjectSerializer::toQueryValue($delivery_address3);
        }
        // query params
        if ($delivery_address4 !== null) {
            $queryParams['DeliveryAddress4'] = ObjectSerializer::toQueryValue($delivery_address4);
        }
        // query params
        if ($delivery_address_postcode !== null) {
            $queryParams['DeliveryAddressPostcode'] = ObjectSerializer::toQueryValue($delivery_address_postcode);
        }
        // query params
        if ($delivery_address_country !== null) {
            $queryParams['DeliveryAddressCountry'] = ObjectSerializer::toQueryValue($delivery_address_country);
        }
        // query params
        if ($notes !== null) {
            $queryParams['Notes'] = ObjectSerializer::toQueryValue($notes);
        }
        // query params
        if ($courier_details !== null) {
            $queryParams['CourierDetails'] = ObjectSerializer::toQueryValue($courier_details);
        }
        // query params
        if ($freight_forward_address1 !== null) {
            $queryParams['FreightForwardAddress1'] = ObjectSerializer::toQueryValue($freight_forward_address1);
        }
        // query params
        if ($freight_forward_address2 !== null) {
            $queryParams['FreightForwardAddress2'] = ObjectSerializer::toQueryValue($freight_forward_address2);
        }
        // query params
        if ($freight_forward_address3 !== null) {
            $queryParams['FreightForwardAddress3'] = ObjectSerializer::toQueryValue($freight_forward_address3);
        }
        // query params
        if ($freight_forward_address4 !== null) {
            $queryParams['FreightForwardAddress4'] = ObjectSerializer::toQueryValue($freight_forward_address4);
        }
        // query params
        if ($freight_forward_address_country !== null) {
            $queryParams['FreightForwardAddressCountry'] = ObjectSerializer::toQueryValue($freight_forward_address_country);
        }
        // query params
        if ($freight_forward_address_notes !== null) {
            $queryParams['FreightForwardAddressNotes'] = ObjectSerializer::toQueryValue($freight_forward_address_notes);
        }
        // query params
        if ($consignment_note !== null) {
            $queryParams['ConsignmentNote'] = ObjectSerializer::toQueryValue($consignment_note);
        }
        // query params
        if ($ediasn_number !== null) {
            $queryParams['EDIASNNumber'] = ObjectSerializer::toQueryValue($ediasn_number);
        }
        // query params
        if ($drop_shipment !== null) {
            $queryParams['DropShipment'] = ObjectSerializer::toQueryValue($drop_shipment);
        }
        // query params
        if ($cartage_charge1 !== null) {
            $queryParams['CartageCharge1'] = ObjectSerializer::toQueryValue($cartage_charge1);
        }
        // query params
        if ($cartage_charge2 !== null) {
            $queryParams['CartageCharge2'] = ObjectSerializer::toQueryValue($cartage_charge2);
        }
        // query params
        if ($cartage_charge3 !== null) {
            $queryParams['CartageCharge3'] = ObjectSerializer::toQueryValue($cartage_charge3);
        }
        // query params
        if ($carrier !== null) {
            $queryParams['Carrier'] = ObjectSerializer::toQueryValue($carrier);
        }
        // query params
        if ($custom_field_values !== null) {
            $queryParams['CustomFieldValues'] = ObjectSerializer::toQueryValue($custom_field_values);
        }
        // header params
        if ($accept !== null) {
            $headerParams['Accept'] = ObjectSerializer::toHeaderValue($accept);
        }
        // header params
        if ($jiwa_stateful !== null) {
            $headerParams['jiwa-stateful'] = ObjectSerializer::toHeaderValue($jiwa_stateful);
        }

        // path params
        if ($invoice_id !== null) {
            $resourcePath = str_replace(
                '{' . 'InvoiceID' . '}',
                ObjectSerializer::toPathValue($invoice_id),
                $resourcePath
            );
        }
        // path params
        if ($invoice_history_id !== null) {
            $resourcePath = str_replace(
                '{' . 'InvoiceHistoryID' . '}',
                ObjectSerializer::toPathValue($invoice_history_id),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;
        if (isset($body)) {
            $_tempBody = $body;
        }

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json', 'application/xml']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json', 'application/xml'],
                ['application/x-www-form-urlencoded', 'application/json', 'application/xml']
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            
            if($headers['Content-Type'] === 'application/json') {
                // \stdClass has no __toString(), so we should encode it manually
                if ($httpBody instanceof \stdClass) {
                    $httpBody = \GuzzleHttp\json_encode($httpBody);
                }
                // array has no __toString(), so we should encode it manually
                if(is_array($httpBody)) {
                    $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($httpBody));
                }
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\Query::build($formParams);
            }
        }

        // this endpoint requires HTTP basic authentication
        if ($this->config->getUsername() !== null || $this->config->getPassword() !== null) {
            $headers['Authorization'] = 'Basic ' . base64_encode($this->config->getUsername() . ":" . $this->config->getPassword());
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\Query::build($queryParams);
        return new Request(
            'PATCH',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation salesOrderLineCustomFieldValueGETRequestInvoiceIDHistorysInvoiceHistoryIDLinesInvoiceLineIDCustomFieldValuesSettingIDGet
     *
     * Retrieves a sales order line custom field value.
     *
     * @param  string $accept Accept Header (required)
     * @param  string $invoice_id invoice_id (required)
     * @param  string $invoice_history_id invoice_history_id (required)
     * @param  string $invoice_line_id invoice_line_id (required)
     * @param  string $setting_id setting_id (required)
     * @param  bool $jiwa_stateful Stateful indicator (optional)
     *
     * @throws \Jiwa\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Jiwa\Model\CustomFieldValue
     */
    public function salesOrderLineCustomFieldValueGETRequestInvoiceIDHistorysInvoiceHistoryIDLinesInvoiceLineIDCustomFieldValuesSettingIDGet($accept, $invoice_id, $invoice_history_id, $invoice_line_id, $setting_id, $jiwa_stateful = null)
    {
        list($response) = $this->salesOrderLineCustomFieldValueGETRequestInvoiceIDHistorysInvoiceHistoryIDLinesInvoiceLineIDCustomFieldValuesSettingIDGetWithHttpInfo($accept, $invoice_id, $invoice_history_id, $invoice_line_id, $setting_id, $jiwa_stateful);
        return $response;
    }

    /**
     * Operation salesOrderLineCustomFieldValueGETRequestInvoiceIDHistorysInvoiceHistoryIDLinesInvoiceLineIDCustomFieldValuesSettingIDGetWithHttpInfo
     *
     * Retrieves a sales order line custom field value.
     *
     * @param  string $accept Accept Header (required)
     * @param  string $invoice_id (required)
     * @param  string $invoice_history_id (required)
     * @param  string $invoice_line_id (required)
     * @param  string $setting_id (required)
     * @param  bool $jiwa_stateful Stateful indicator (optional)
     *
     * @throws \Jiwa\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Jiwa\Model\CustomFieldValue, HTTP status code, HTTP response headers (array of strings)
     */
    public function salesOrderLineCustomFieldValueGETRequestInvoiceIDHistorysInvoiceHistoryIDLinesInvoiceLineIDCustomFieldValuesSettingIDGetWithHttpInfo($accept, $invoice_id, $invoice_history_id, $invoice_line_id, $setting_id, $jiwa_stateful = null)
    {
        $returnType = '\Jiwa\Model\CustomFieldValue';
        $request = $this->salesOrderLineCustomFieldValueGETRequestInvoiceIDHistorysInvoiceHistoryIDLinesInvoiceLineIDCustomFieldValuesSettingIDGetRequest($accept, $invoice_id, $invoice_history_id, $invoice_line_id, $setting_id, $jiwa_stateful);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Jiwa\Model\CustomFieldValue',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 403:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Jiwa\Model\CustomFieldValue',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 401:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Jiwa\Model\CustomFieldValue',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 404:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Jiwa\Model\CustomFieldValue',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation salesOrderLineCustomFieldValueGETRequestInvoiceIDHistorysInvoiceHistoryIDLinesInvoiceLineIDCustomFieldValuesSettingIDGetAsync
     *
     * Retrieves a sales order line custom field value.
     *
     * @param  string $accept Accept Header (required)
     * @param  string $invoice_id (required)
     * @param  string $invoice_history_id (required)
     * @param  string $invoice_line_id (required)
     * @param  string $setting_id (required)
     * @param  bool $jiwa_stateful Stateful indicator (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function salesOrderLineCustomFieldValueGETRequestInvoiceIDHistorysInvoiceHistoryIDLinesInvoiceLineIDCustomFieldValuesSettingIDGetAsync($accept, $invoice_id, $invoice_history_id, $invoice_line_id, $setting_id, $jiwa_stateful = null)
    {
        return $this->salesOrderLineCustomFieldValueGETRequestInvoiceIDHistorysInvoiceHistoryIDLinesInvoiceLineIDCustomFieldValuesSettingIDGetAsyncWithHttpInfo($accept, $invoice_id, $invoice_history_id, $invoice_line_id, $setting_id, $jiwa_stateful)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation salesOrderLineCustomFieldValueGETRequestInvoiceIDHistorysInvoiceHistoryIDLinesInvoiceLineIDCustomFieldValuesSettingIDGetAsyncWithHttpInfo
     *
     * Retrieves a sales order line custom field value.
     *
     * @param  string $accept Accept Header (required)
     * @param  string $invoice_id (required)
     * @param  string $invoice_history_id (required)
     * @param  string $invoice_line_id (required)
     * @param  string $setting_id (required)
     * @param  bool $jiwa_stateful Stateful indicator (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function salesOrderLineCustomFieldValueGETRequestInvoiceIDHistorysInvoiceHistoryIDLinesInvoiceLineIDCustomFieldValuesSettingIDGetAsyncWithHttpInfo($accept, $invoice_id, $invoice_history_id, $invoice_line_id, $setting_id, $jiwa_stateful = null)
    {
        $returnType = '\Jiwa\Model\CustomFieldValue';
        $request = $this->salesOrderLineCustomFieldValueGETRequestInvoiceIDHistorysInvoiceHistoryIDLinesInvoiceLineIDCustomFieldValuesSettingIDGetRequest($accept, $invoice_id, $invoice_history_id, $invoice_line_id, $setting_id, $jiwa_stateful);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'salesOrderLineCustomFieldValueGETRequestInvoiceIDHistorysInvoiceHistoryIDLinesInvoiceLineIDCustomFieldValuesSettingIDGet'
     *
     * @param  string $accept Accept Header (required)
     * @param  string $invoice_id (required)
     * @param  string $invoice_history_id (required)
     * @param  string $invoice_line_id (required)
     * @param  string $setting_id (required)
     * @param  bool $jiwa_stateful Stateful indicator (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function salesOrderLineCustomFieldValueGETRequestInvoiceIDHistorysInvoiceHistoryIDLinesInvoiceLineIDCustomFieldValuesSettingIDGetRequest($accept, $invoice_id, $invoice_history_id, $invoice_line_id, $setting_id, $jiwa_stateful = null)
    {
        // verify the required parameter 'accept' is set
        if ($accept === null || (is_array($accept) && count($accept) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $accept when calling salesOrderLineCustomFieldValueGETRequestInvoiceIDHistorysInvoiceHistoryIDLinesInvoiceLineIDCustomFieldValuesSettingIDGet'
            );
        }
        // verify the required parameter 'invoice_id' is set
        if ($invoice_id === null || (is_array($invoice_id) && count($invoice_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $invoice_id when calling salesOrderLineCustomFieldValueGETRequestInvoiceIDHistorysInvoiceHistoryIDLinesInvoiceLineIDCustomFieldValuesSettingIDGet'
            );
        }
        // verify the required parameter 'invoice_history_id' is set
        if ($invoice_history_id === null || (is_array($invoice_history_id) && count($invoice_history_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $invoice_history_id when calling salesOrderLineCustomFieldValueGETRequestInvoiceIDHistorysInvoiceHistoryIDLinesInvoiceLineIDCustomFieldValuesSettingIDGet'
            );
        }
        // verify the required parameter 'invoice_line_id' is set
        if ($invoice_line_id === null || (is_array($invoice_line_id) && count($invoice_line_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $invoice_line_id when calling salesOrderLineCustomFieldValueGETRequestInvoiceIDHistorysInvoiceHistoryIDLinesInvoiceLineIDCustomFieldValuesSettingIDGet'
            );
        }
        // verify the required parameter 'setting_id' is set
        if ($setting_id === null || (is_array($setting_id) && count($setting_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $setting_id when calling salesOrderLineCustomFieldValueGETRequestInvoiceIDHistorysInvoiceHistoryIDLinesInvoiceLineIDCustomFieldValuesSettingIDGet'
            );
        }

        $resourcePath = '/SalesOrders/{InvoiceID}/Historys/{InvoiceHistoryID}/Lines/{InvoiceLineID}/CustomFieldValues/{SettingID}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // header params
        if ($accept !== null) {
            $headerParams['Accept'] = ObjectSerializer::toHeaderValue($accept);
        }
        // header params
        if ($jiwa_stateful !== null) {
            $headerParams['jiwa-stateful'] = ObjectSerializer::toHeaderValue($jiwa_stateful);
        }

        // path params
        if ($invoice_id !== null) {
            $resourcePath = str_replace(
                '{' . 'InvoiceID' . '}',
                ObjectSerializer::toPathValue($invoice_id),
                $resourcePath
            );
        }
        // path params
        if ($invoice_history_id !== null) {
            $resourcePath = str_replace(
                '{' . 'InvoiceHistoryID' . '}',
                ObjectSerializer::toPathValue($invoice_history_id),
                $resourcePath
            );
        }
        // path params
        if ($invoice_line_id !== null) {
            $resourcePath = str_replace(
                '{' . 'InvoiceLineID' . '}',
                ObjectSerializer::toPathValue($invoice_line_id),
                $resourcePath
            );
        }
        // path params
        if ($setting_id !== null) {
            $resourcePath = str_replace(
                '{' . 'SettingID' . '}',
                ObjectSerializer::toPathValue($setting_id),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json', 'application/xml']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json', 'application/xml'],
                ['application/x-www-form-urlencoded', 'application/json', 'application/xml']
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            
            if($headers['Content-Type'] === 'application/json') {
                // \stdClass has no __toString(), so we should encode it manually
                if ($httpBody instanceof \stdClass) {
                    $httpBody = \GuzzleHttp\json_encode($httpBody);
                }
                // array has no __toString(), so we should encode it manually
                if(is_array($httpBody)) {
                    $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($httpBody));
                }
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\Query::build($formParams);
            }
        }

        // this endpoint requires HTTP basic authentication
        if ($this->config->getUsername() !== null || $this->config->getPassword() !== null) {
            $headers['Authorization'] = 'Basic ' . base64_encode($this->config->getUsername() . ":" . $this->config->getPassword());
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\Query::build($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation salesOrderLineCustomFieldValuePATCHRequestInvoiceIDHistorysInvoiceHistoryIDLinesInvoiceLineIDCustomFieldValuesSettingIDUpdate
     *
     * Updates a sales order line custom field value.
     *
     * @param  string $accept Accept Header (required)
     * @param  string $invoice_id invoice_id (required)
     * @param  string $invoice_history_id invoice_history_id (required)
     * @param  string $invoice_line_id invoice_line_id (required)
     * @param  string $setting_id setting_id (required)
     * @param  bool $jiwa_stateful Stateful indicator (optional)
     * @param  string $contents contents (optional)
     * @param  \Jiwa\Model\SalesOrderLineCustomFieldValuePATCHRequest $body body (optional)
     *
     * @throws \Jiwa\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Jiwa\Model\CustomFieldValue
     */
    public function salesOrderLineCustomFieldValuePATCHRequestInvoiceIDHistorysInvoiceHistoryIDLinesInvoiceLineIDCustomFieldValuesSettingIDUpdate($accept, $invoice_id, $invoice_history_id, $invoice_line_id, $setting_id, $jiwa_stateful = null, $contents = null, $body = null)
    {
        list($response) = $this->salesOrderLineCustomFieldValuePATCHRequestInvoiceIDHistorysInvoiceHistoryIDLinesInvoiceLineIDCustomFieldValuesSettingIDUpdateWithHttpInfo($accept, $invoice_id, $invoice_history_id, $invoice_line_id, $setting_id, $jiwa_stateful, $contents, $body);
        return $response;
    }

    /**
     * Operation salesOrderLineCustomFieldValuePATCHRequestInvoiceIDHistorysInvoiceHistoryIDLinesInvoiceLineIDCustomFieldValuesSettingIDUpdateWithHttpInfo
     *
     * Updates a sales order line custom field value.
     *
     * @param  string $accept Accept Header (required)
     * @param  string $invoice_id (required)
     * @param  string $invoice_history_id (required)
     * @param  string $invoice_line_id (required)
     * @param  string $setting_id (required)
     * @param  bool $jiwa_stateful Stateful indicator (optional)
     * @param  string $contents (optional)
     * @param  \Jiwa\Model\SalesOrderLineCustomFieldValuePATCHRequest $body (optional)
     *
     * @throws \Jiwa\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Jiwa\Model\CustomFieldValue, HTTP status code, HTTP response headers (array of strings)
     */
    public function salesOrderLineCustomFieldValuePATCHRequestInvoiceIDHistorysInvoiceHistoryIDLinesInvoiceLineIDCustomFieldValuesSettingIDUpdateWithHttpInfo($accept, $invoice_id, $invoice_history_id, $invoice_line_id, $setting_id, $jiwa_stateful = null, $contents = null, $body = null)
    {
        $returnType = '\Jiwa\Model\CustomFieldValue';
        $request = $this->salesOrderLineCustomFieldValuePATCHRequestInvoiceIDHistorysInvoiceHistoryIDLinesInvoiceLineIDCustomFieldValuesSettingIDUpdateRequest($accept, $invoice_id, $invoice_history_id, $invoice_line_id, $setting_id, $jiwa_stateful, $contents, $body);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Jiwa\Model\CustomFieldValue',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 403:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Jiwa\Model\CustomFieldValue',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 401:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Jiwa\Model\CustomFieldValue',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 404:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Jiwa\Model\CustomFieldValue',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation salesOrderLineCustomFieldValuePATCHRequestInvoiceIDHistorysInvoiceHistoryIDLinesInvoiceLineIDCustomFieldValuesSettingIDUpdateAsync
     *
     * Updates a sales order line custom field value.
     *
     * @param  string $accept Accept Header (required)
     * @param  string $invoice_id (required)
     * @param  string $invoice_history_id (required)
     * @param  string $invoice_line_id (required)
     * @param  string $setting_id (required)
     * @param  bool $jiwa_stateful Stateful indicator (optional)
     * @param  string $contents (optional)
     * @param  \Jiwa\Model\SalesOrderLineCustomFieldValuePATCHRequest $body (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function salesOrderLineCustomFieldValuePATCHRequestInvoiceIDHistorysInvoiceHistoryIDLinesInvoiceLineIDCustomFieldValuesSettingIDUpdateAsync($accept, $invoice_id, $invoice_history_id, $invoice_line_id, $setting_id, $jiwa_stateful = null, $contents = null, $body = null)
    {
        return $this->salesOrderLineCustomFieldValuePATCHRequestInvoiceIDHistorysInvoiceHistoryIDLinesInvoiceLineIDCustomFieldValuesSettingIDUpdateAsyncWithHttpInfo($accept, $invoice_id, $invoice_history_id, $invoice_line_id, $setting_id, $jiwa_stateful, $contents, $body)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation salesOrderLineCustomFieldValuePATCHRequestInvoiceIDHistorysInvoiceHistoryIDLinesInvoiceLineIDCustomFieldValuesSettingIDUpdateAsyncWithHttpInfo
     *
     * Updates a sales order line custom field value.
     *
     * @param  string $accept Accept Header (required)
     * @param  string $invoice_id (required)
     * @param  string $invoice_history_id (required)
     * @param  string $invoice_line_id (required)
     * @param  string $setting_id (required)
     * @param  bool $jiwa_stateful Stateful indicator (optional)
     * @param  string $contents (optional)
     * @param  \Jiwa\Model\SalesOrderLineCustomFieldValuePATCHRequest $body (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function salesOrderLineCustomFieldValuePATCHRequestInvoiceIDHistorysInvoiceHistoryIDLinesInvoiceLineIDCustomFieldValuesSettingIDUpdateAsyncWithHttpInfo($accept, $invoice_id, $invoice_history_id, $invoice_line_id, $setting_id, $jiwa_stateful = null, $contents = null, $body = null)
    {
        $returnType = '\Jiwa\Model\CustomFieldValue';
        $request = $this->salesOrderLineCustomFieldValuePATCHRequestInvoiceIDHistorysInvoiceHistoryIDLinesInvoiceLineIDCustomFieldValuesSettingIDUpdateRequest($accept, $invoice_id, $invoice_history_id, $invoice_line_id, $setting_id, $jiwa_stateful, $contents, $body);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'salesOrderLineCustomFieldValuePATCHRequestInvoiceIDHistorysInvoiceHistoryIDLinesInvoiceLineIDCustomFieldValuesSettingIDUpdate'
     *
     * @param  string $accept Accept Header (required)
     * @param  string $invoice_id (required)
     * @param  string $invoice_history_id (required)
     * @param  string $invoice_line_id (required)
     * @param  string $setting_id (required)
     * @param  bool $jiwa_stateful Stateful indicator (optional)
     * @param  string $contents (optional)
     * @param  \Jiwa\Model\SalesOrderLineCustomFieldValuePATCHRequest $body (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function salesOrderLineCustomFieldValuePATCHRequestInvoiceIDHistorysInvoiceHistoryIDLinesInvoiceLineIDCustomFieldValuesSettingIDUpdateRequest($accept, $invoice_id, $invoice_history_id, $invoice_line_id, $setting_id, $jiwa_stateful = null, $contents = null, $body = null)
    {
        // verify the required parameter 'accept' is set
        if ($accept === null || (is_array($accept) && count($accept) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $accept when calling salesOrderLineCustomFieldValuePATCHRequestInvoiceIDHistorysInvoiceHistoryIDLinesInvoiceLineIDCustomFieldValuesSettingIDUpdate'
            );
        }
        // verify the required parameter 'invoice_id' is set
        if ($invoice_id === null || (is_array($invoice_id) && count($invoice_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $invoice_id when calling salesOrderLineCustomFieldValuePATCHRequestInvoiceIDHistorysInvoiceHistoryIDLinesInvoiceLineIDCustomFieldValuesSettingIDUpdate'
            );
        }
        // verify the required parameter 'invoice_history_id' is set
        if ($invoice_history_id === null || (is_array($invoice_history_id) && count($invoice_history_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $invoice_history_id when calling salesOrderLineCustomFieldValuePATCHRequestInvoiceIDHistorysInvoiceHistoryIDLinesInvoiceLineIDCustomFieldValuesSettingIDUpdate'
            );
        }
        // verify the required parameter 'invoice_line_id' is set
        if ($invoice_line_id === null || (is_array($invoice_line_id) && count($invoice_line_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $invoice_line_id when calling salesOrderLineCustomFieldValuePATCHRequestInvoiceIDHistorysInvoiceHistoryIDLinesInvoiceLineIDCustomFieldValuesSettingIDUpdate'
            );
        }
        // verify the required parameter 'setting_id' is set
        if ($setting_id === null || (is_array($setting_id) && count($setting_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $setting_id when calling salesOrderLineCustomFieldValuePATCHRequestInvoiceIDHistorysInvoiceHistoryIDLinesInvoiceLineIDCustomFieldValuesSettingIDUpdate'
            );
        }

        $resourcePath = '/SalesOrders/{InvoiceID}/Historys/{InvoiceHistoryID}/Lines/{InvoiceLineID}/CustomFieldValues/{SettingID}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        if ($contents !== null) {
            $queryParams['Contents'] = ObjectSerializer::toQueryValue($contents);
        }
        // header params
        if ($accept !== null) {
            $headerParams['Accept'] = ObjectSerializer::toHeaderValue($accept);
        }
        // header params
        if ($jiwa_stateful !== null) {
            $headerParams['jiwa-stateful'] = ObjectSerializer::toHeaderValue($jiwa_stateful);
        }

        // path params
        if ($invoice_id !== null) {
            $resourcePath = str_replace(
                '{' . 'InvoiceID' . '}',
                ObjectSerializer::toPathValue($invoice_id),
                $resourcePath
            );
        }
        // path params
        if ($invoice_history_id !== null) {
            $resourcePath = str_replace(
                '{' . 'InvoiceHistoryID' . '}',
                ObjectSerializer::toPathValue($invoice_history_id),
                $resourcePath
            );
        }
        // path params
        if ($invoice_line_id !== null) {
            $resourcePath = str_replace(
                '{' . 'InvoiceLineID' . '}',
                ObjectSerializer::toPathValue($invoice_line_id),
                $resourcePath
            );
        }
        // path params
        if ($setting_id !== null) {
            $resourcePath = str_replace(
                '{' . 'SettingID' . '}',
                ObjectSerializer::toPathValue($setting_id),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;
        if (isset($body)) {
            $_tempBody = $body;
        }

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json', 'application/xml']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json', 'application/xml'],
                ['application/x-www-form-urlencoded', 'application/json', 'application/xml']
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            
            if($headers['Content-Type'] === 'application/json') {
                // \stdClass has no __toString(), so we should encode it manually
                if ($httpBody instanceof \stdClass) {
                    $httpBody = \GuzzleHttp\json_encode($httpBody);
                }
                // array has no __toString(), so we should encode it manually
                if(is_array($httpBody)) {
                    $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($httpBody));
                }
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\Query::build($formParams);
            }
        }

        // this endpoint requires HTTP basic authentication
        if ($this->config->getUsername() !== null || $this->config->getPassword() !== null) {
            $headers['Authorization'] = 'Basic ' . base64_encode($this->config->getUsername() . ":" . $this->config->getPassword());
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\Query::build($queryParams);
        return new Request(
            'PATCH',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation salesOrderLineCustomFieldValuesGETManyRequestInvoiceIDHistorysInvoiceHistoryIDLinesInvoiceLineIDCustomFieldValuesGet
     *
     * Retrieves a list of custom field values for a sales order line.
     *
     * @param  string $accept Accept Header (required)
     * @param  string $invoice_id invoice_id (required)
     * @param  string $invoice_history_id invoice_history_id (required)
     * @param  string $invoice_line_id invoice_line_id (required)
     * @param  bool $jiwa_stateful Stateful indicator (optional)
     *
     * @throws \Jiwa\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Jiwa\Model\CustomFieldValue[]
     */
    public function salesOrderLineCustomFieldValuesGETManyRequestInvoiceIDHistorysInvoiceHistoryIDLinesInvoiceLineIDCustomFieldValuesGet($accept, $invoice_id, $invoice_history_id, $invoice_line_id, $jiwa_stateful = null)
    {
        list($response) = $this->salesOrderLineCustomFieldValuesGETManyRequestInvoiceIDHistorysInvoiceHistoryIDLinesInvoiceLineIDCustomFieldValuesGetWithHttpInfo($accept, $invoice_id, $invoice_history_id, $invoice_line_id, $jiwa_stateful);
        return $response;
    }

    /**
     * Operation salesOrderLineCustomFieldValuesGETManyRequestInvoiceIDHistorysInvoiceHistoryIDLinesInvoiceLineIDCustomFieldValuesGetWithHttpInfo
     *
     * Retrieves a list of custom field values for a sales order line.
     *
     * @param  string $accept Accept Header (required)
     * @param  string $invoice_id (required)
     * @param  string $invoice_history_id (required)
     * @param  string $invoice_line_id (required)
     * @param  bool $jiwa_stateful Stateful indicator (optional)
     *
     * @throws \Jiwa\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Jiwa\Model\CustomFieldValue[], HTTP status code, HTTP response headers (array of strings)
     */
    public function salesOrderLineCustomFieldValuesGETManyRequestInvoiceIDHistorysInvoiceHistoryIDLinesInvoiceLineIDCustomFieldValuesGetWithHttpInfo($accept, $invoice_id, $invoice_history_id, $invoice_line_id, $jiwa_stateful = null)
    {
        $returnType = '\Jiwa\Model\CustomFieldValue[]';
        $request = $this->salesOrderLineCustomFieldValuesGETManyRequestInvoiceIDHistorysInvoiceHistoryIDLinesInvoiceLineIDCustomFieldValuesGetRequest($accept, $invoice_id, $invoice_history_id, $invoice_line_id, $jiwa_stateful);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Jiwa\Model\CustomFieldValue[]',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 404:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Jiwa\Model\CustomFieldValue[]',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 401:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Jiwa\Model\CustomFieldValue[]',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 403:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Jiwa\Model\CustomFieldValue[]',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation salesOrderLineCustomFieldValuesGETManyRequestInvoiceIDHistorysInvoiceHistoryIDLinesInvoiceLineIDCustomFieldValuesGetAsync
     *
     * Retrieves a list of custom field values for a sales order line.
     *
     * @param  string $accept Accept Header (required)
     * @param  string $invoice_id (required)
     * @param  string $invoice_history_id (required)
     * @param  string $invoice_line_id (required)
     * @param  bool $jiwa_stateful Stateful indicator (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function salesOrderLineCustomFieldValuesGETManyRequestInvoiceIDHistorysInvoiceHistoryIDLinesInvoiceLineIDCustomFieldValuesGetAsync($accept, $invoice_id, $invoice_history_id, $invoice_line_id, $jiwa_stateful = null)
    {
        return $this->salesOrderLineCustomFieldValuesGETManyRequestInvoiceIDHistorysInvoiceHistoryIDLinesInvoiceLineIDCustomFieldValuesGetAsyncWithHttpInfo($accept, $invoice_id, $invoice_history_id, $invoice_line_id, $jiwa_stateful)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation salesOrderLineCustomFieldValuesGETManyRequestInvoiceIDHistorysInvoiceHistoryIDLinesInvoiceLineIDCustomFieldValuesGetAsyncWithHttpInfo
     *
     * Retrieves a list of custom field values for a sales order line.
     *
     * @param  string $accept Accept Header (required)
     * @param  string $invoice_id (required)
     * @param  string $invoice_history_id (required)
     * @param  string $invoice_line_id (required)
     * @param  bool $jiwa_stateful Stateful indicator (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function salesOrderLineCustomFieldValuesGETManyRequestInvoiceIDHistorysInvoiceHistoryIDLinesInvoiceLineIDCustomFieldValuesGetAsyncWithHttpInfo($accept, $invoice_id, $invoice_history_id, $invoice_line_id, $jiwa_stateful = null)
    {
        $returnType = '\Jiwa\Model\CustomFieldValue[]';
        $request = $this->salesOrderLineCustomFieldValuesGETManyRequestInvoiceIDHistorysInvoiceHistoryIDLinesInvoiceLineIDCustomFieldValuesGetRequest($accept, $invoice_id, $invoice_history_id, $invoice_line_id, $jiwa_stateful);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'salesOrderLineCustomFieldValuesGETManyRequestInvoiceIDHistorysInvoiceHistoryIDLinesInvoiceLineIDCustomFieldValuesGet'
     *
     * @param  string $accept Accept Header (required)
     * @param  string $invoice_id (required)
     * @param  string $invoice_history_id (required)
     * @param  string $invoice_line_id (required)
     * @param  bool $jiwa_stateful Stateful indicator (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function salesOrderLineCustomFieldValuesGETManyRequestInvoiceIDHistorysInvoiceHistoryIDLinesInvoiceLineIDCustomFieldValuesGetRequest($accept, $invoice_id, $invoice_history_id, $invoice_line_id, $jiwa_stateful = null)
    {
        // verify the required parameter 'accept' is set
        if ($accept === null || (is_array($accept) && count($accept) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $accept when calling salesOrderLineCustomFieldValuesGETManyRequestInvoiceIDHistorysInvoiceHistoryIDLinesInvoiceLineIDCustomFieldValuesGet'
            );
        }
        // verify the required parameter 'invoice_id' is set
        if ($invoice_id === null || (is_array($invoice_id) && count($invoice_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $invoice_id when calling salesOrderLineCustomFieldValuesGETManyRequestInvoiceIDHistorysInvoiceHistoryIDLinesInvoiceLineIDCustomFieldValuesGet'
            );
        }
        // verify the required parameter 'invoice_history_id' is set
        if ($invoice_history_id === null || (is_array($invoice_history_id) && count($invoice_history_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $invoice_history_id when calling salesOrderLineCustomFieldValuesGETManyRequestInvoiceIDHistorysInvoiceHistoryIDLinesInvoiceLineIDCustomFieldValuesGet'
            );
        }
        // verify the required parameter 'invoice_line_id' is set
        if ($invoice_line_id === null || (is_array($invoice_line_id) && count($invoice_line_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $invoice_line_id when calling salesOrderLineCustomFieldValuesGETManyRequestInvoiceIDHistorysInvoiceHistoryIDLinesInvoiceLineIDCustomFieldValuesGet'
            );
        }

        $resourcePath = '/SalesOrders/{InvoiceID}/Historys/{InvoiceHistoryID}/Lines/{InvoiceLineID}/CustomFieldValues';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // header params
        if ($accept !== null) {
            $headerParams['Accept'] = ObjectSerializer::toHeaderValue($accept);
        }
        // header params
        if ($jiwa_stateful !== null) {
            $headerParams['jiwa-stateful'] = ObjectSerializer::toHeaderValue($jiwa_stateful);
        }

        // path params
        if ($invoice_id !== null) {
            $resourcePath = str_replace(
                '{' . 'InvoiceID' . '}',
                ObjectSerializer::toPathValue($invoice_id),
                $resourcePath
            );
        }
        // path params
        if ($invoice_history_id !== null) {
            $resourcePath = str_replace(
                '{' . 'InvoiceHistoryID' . '}',
                ObjectSerializer::toPathValue($invoice_history_id),
                $resourcePath
            );
        }
        // path params
        if ($invoice_line_id !== null) {
            $resourcePath = str_replace(
                '{' . 'InvoiceLineID' . '}',
                ObjectSerializer::toPathValue($invoice_line_id),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json', 'application/xml']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json', 'application/xml'],
                ['application/x-www-form-urlencoded', 'application/json', 'application/xml']
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            
            if($headers['Content-Type'] === 'application/json') {
                // \stdClass has no __toString(), so we should encode it manually
                if ($httpBody instanceof \stdClass) {
                    $httpBody = \GuzzleHttp\json_encode($httpBody);
                }
                // array has no __toString(), so we should encode it manually
                if(is_array($httpBody)) {
                    $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($httpBody));
                }
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\Query::build($formParams);
            }
        }

        // this endpoint requires HTTP basic authentication
        if ($this->config->getUsername() !== null || $this->config->getPassword() !== null) {
            $headers['Authorization'] = 'Basic ' . base64_encode($this->config->getUsername() . ":" . $this->config->getPassword());
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\Query::build($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation salesOrderLineCustomFieldsGETManyRequestLinesCustomFieldsGet
     *
     * Retrieves a list of sales order line custom fields.
     *
     * @param  string $accept Accept Header (required)
     * @param  bool $jiwa_stateful Stateful indicator (optional)
     *
     * @throws \Jiwa\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Jiwa\Model\CustomField[]
     */
    public function salesOrderLineCustomFieldsGETManyRequestLinesCustomFieldsGet($accept, $jiwa_stateful = null)
    {
        list($response) = $this->salesOrderLineCustomFieldsGETManyRequestLinesCustomFieldsGetWithHttpInfo($accept, $jiwa_stateful);
        return $response;
    }

    /**
     * Operation salesOrderLineCustomFieldsGETManyRequestLinesCustomFieldsGetWithHttpInfo
     *
     * Retrieves a list of sales order line custom fields.
     *
     * @param  string $accept Accept Header (required)
     * @param  bool $jiwa_stateful Stateful indicator (optional)
     *
     * @throws \Jiwa\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Jiwa\Model\CustomField[], HTTP status code, HTTP response headers (array of strings)
     */
    public function salesOrderLineCustomFieldsGETManyRequestLinesCustomFieldsGetWithHttpInfo($accept, $jiwa_stateful = null)
    {
        $returnType = '\Jiwa\Model\CustomField[]';
        $request = $this->salesOrderLineCustomFieldsGETManyRequestLinesCustomFieldsGetRequest($accept, $jiwa_stateful);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Jiwa\Model\CustomField[]',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 403:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Jiwa\Model\CustomField[]',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 401:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Jiwa\Model\CustomField[]',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation salesOrderLineCustomFieldsGETManyRequestLinesCustomFieldsGetAsync
     *
     * Retrieves a list of sales order line custom fields.
     *
     * @param  string $accept Accept Header (required)
     * @param  bool $jiwa_stateful Stateful indicator (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function salesOrderLineCustomFieldsGETManyRequestLinesCustomFieldsGetAsync($accept, $jiwa_stateful = null)
    {
        return $this->salesOrderLineCustomFieldsGETManyRequestLinesCustomFieldsGetAsyncWithHttpInfo($accept, $jiwa_stateful)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation salesOrderLineCustomFieldsGETManyRequestLinesCustomFieldsGetAsyncWithHttpInfo
     *
     * Retrieves a list of sales order line custom fields.
     *
     * @param  string $accept Accept Header (required)
     * @param  bool $jiwa_stateful Stateful indicator (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function salesOrderLineCustomFieldsGETManyRequestLinesCustomFieldsGetAsyncWithHttpInfo($accept, $jiwa_stateful = null)
    {
        $returnType = '\Jiwa\Model\CustomField[]';
        $request = $this->salesOrderLineCustomFieldsGETManyRequestLinesCustomFieldsGetRequest($accept, $jiwa_stateful);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'salesOrderLineCustomFieldsGETManyRequestLinesCustomFieldsGet'
     *
     * @param  string $accept Accept Header (required)
     * @param  bool $jiwa_stateful Stateful indicator (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function salesOrderLineCustomFieldsGETManyRequestLinesCustomFieldsGetRequest($accept, $jiwa_stateful = null)
    {
        // verify the required parameter 'accept' is set
        if ($accept === null || (is_array($accept) && count($accept) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $accept when calling salesOrderLineCustomFieldsGETManyRequestLinesCustomFieldsGet'
            );
        }

        $resourcePath = '/SalesOrders/Lines/CustomFields';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // header params
        if ($accept !== null) {
            $headerParams['Accept'] = ObjectSerializer::toHeaderValue($accept);
        }
        // header params
        if ($jiwa_stateful !== null) {
            $headerParams['jiwa-stateful'] = ObjectSerializer::toHeaderValue($jiwa_stateful);
        }


        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json', 'application/xml']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json', 'application/xml'],
                ['application/x-www-form-urlencoded', 'application/json', 'application/xml']
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            
            if($headers['Content-Type'] === 'application/json') {
                // \stdClass has no __toString(), so we should encode it manually
                if ($httpBody instanceof \stdClass) {
                    $httpBody = \GuzzleHttp\json_encode($httpBody);
                }
                // array has no __toString(), so we should encode it manually
                if(is_array($httpBody)) {
                    $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($httpBody));
                }
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\Query::build($formParams);
            }
        }

        // this endpoint requires HTTP basic authentication
        if ($this->config->getUsername() !== null || $this->config->getPassword() !== null) {
            $headers['Authorization'] = 'Basic ' . base64_encode($this->config->getUsername() . ":" . $this->config->getPassword());
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\Query::build($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation salesOrderLineDELETERequestInvoiceIDHistorysInvoiceHistoryIDLinesInvoiceLineIDDelete
     *
     * Deletes a sales order line.
     *
     * @param  string $accept Accept Header (required)
     * @param  string $invoice_id invoice_id (required)
     * @param  string $invoice_history_id invoice_history_id (required)
     * @param  string $invoice_line_id invoice_line_id (required)
     * @param  bool $jiwa_stateful Stateful indicator (optional)
     *
     * @throws \Jiwa\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Jiwa\Model\Object
     */
    public function salesOrderLineDELETERequestInvoiceIDHistorysInvoiceHistoryIDLinesInvoiceLineIDDelete($accept, $invoice_id, $invoice_history_id, $invoice_line_id, $jiwa_stateful = null)
    {
        list($response) = $this->salesOrderLineDELETERequestInvoiceIDHistorysInvoiceHistoryIDLinesInvoiceLineIDDeleteWithHttpInfo($accept, $invoice_id, $invoice_history_id, $invoice_line_id, $jiwa_stateful);
        return $response;
    }

    /**
     * Operation salesOrderLineDELETERequestInvoiceIDHistorysInvoiceHistoryIDLinesInvoiceLineIDDeleteWithHttpInfo
     *
     * Deletes a sales order line.
     *
     * @param  string $accept Accept Header (required)
     * @param  string $invoice_id (required)
     * @param  string $invoice_history_id (required)
     * @param  string $invoice_line_id (required)
     * @param  bool $jiwa_stateful Stateful indicator (optional)
     *
     * @throws \Jiwa\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Jiwa\Model\Object, HTTP status code, HTTP response headers (array of strings)
     */
    public function salesOrderLineDELETERequestInvoiceIDHistorysInvoiceHistoryIDLinesInvoiceLineIDDeleteWithHttpInfo($accept, $invoice_id, $invoice_history_id, $invoice_line_id, $jiwa_stateful = null)
    {
        $returnType = '\Jiwa\Model\Object';
        $request = $this->salesOrderLineDELETERequestInvoiceIDHistorysInvoiceHistoryIDLinesInvoiceLineIDDeleteRequest($accept, $invoice_id, $invoice_history_id, $invoice_line_id, $jiwa_stateful);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Jiwa\Model\Object',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 401:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Jiwa\Model\Object',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 403:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Jiwa\Model\Object',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 404:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Jiwa\Model\Object',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 204:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Jiwa\Model\Object',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation salesOrderLineDELETERequestInvoiceIDHistorysInvoiceHistoryIDLinesInvoiceLineIDDeleteAsync
     *
     * Deletes a sales order line.
     *
     * @param  string $accept Accept Header (required)
     * @param  string $invoice_id (required)
     * @param  string $invoice_history_id (required)
     * @param  string $invoice_line_id (required)
     * @param  bool $jiwa_stateful Stateful indicator (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function salesOrderLineDELETERequestInvoiceIDHistorysInvoiceHistoryIDLinesInvoiceLineIDDeleteAsync($accept, $invoice_id, $invoice_history_id, $invoice_line_id, $jiwa_stateful = null)
    {
        return $this->salesOrderLineDELETERequestInvoiceIDHistorysInvoiceHistoryIDLinesInvoiceLineIDDeleteAsyncWithHttpInfo($accept, $invoice_id, $invoice_history_id, $invoice_line_id, $jiwa_stateful)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation salesOrderLineDELETERequestInvoiceIDHistorysInvoiceHistoryIDLinesInvoiceLineIDDeleteAsyncWithHttpInfo
     *
     * Deletes a sales order line.
     *
     * @param  string $accept Accept Header (required)
     * @param  string $invoice_id (required)
     * @param  string $invoice_history_id (required)
     * @param  string $invoice_line_id (required)
     * @param  bool $jiwa_stateful Stateful indicator (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function salesOrderLineDELETERequestInvoiceIDHistorysInvoiceHistoryIDLinesInvoiceLineIDDeleteAsyncWithHttpInfo($accept, $invoice_id, $invoice_history_id, $invoice_line_id, $jiwa_stateful = null)
    {
        $returnType = '\Jiwa\Model\Object';
        $request = $this->salesOrderLineDELETERequestInvoiceIDHistorysInvoiceHistoryIDLinesInvoiceLineIDDeleteRequest($accept, $invoice_id, $invoice_history_id, $invoice_line_id, $jiwa_stateful);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'salesOrderLineDELETERequestInvoiceIDHistorysInvoiceHistoryIDLinesInvoiceLineIDDelete'
     *
     * @param  string $accept Accept Header (required)
     * @param  string $invoice_id (required)
     * @param  string $invoice_history_id (required)
     * @param  string $invoice_line_id (required)
     * @param  bool $jiwa_stateful Stateful indicator (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function salesOrderLineDELETERequestInvoiceIDHistorysInvoiceHistoryIDLinesInvoiceLineIDDeleteRequest($accept, $invoice_id, $invoice_history_id, $invoice_line_id, $jiwa_stateful = null)
    {
        // verify the required parameter 'accept' is set
        if ($accept === null || (is_array($accept) && count($accept) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $accept when calling salesOrderLineDELETERequestInvoiceIDHistorysInvoiceHistoryIDLinesInvoiceLineIDDelete'
            );
        }
        // verify the required parameter 'invoice_id' is set
        if ($invoice_id === null || (is_array($invoice_id) && count($invoice_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $invoice_id when calling salesOrderLineDELETERequestInvoiceIDHistorysInvoiceHistoryIDLinesInvoiceLineIDDelete'
            );
        }
        // verify the required parameter 'invoice_history_id' is set
        if ($invoice_history_id === null || (is_array($invoice_history_id) && count($invoice_history_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $invoice_history_id when calling salesOrderLineDELETERequestInvoiceIDHistorysInvoiceHistoryIDLinesInvoiceLineIDDelete'
            );
        }
        // verify the required parameter 'invoice_line_id' is set
        if ($invoice_line_id === null || (is_array($invoice_line_id) && count($invoice_line_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $invoice_line_id when calling salesOrderLineDELETERequestInvoiceIDHistorysInvoiceHistoryIDLinesInvoiceLineIDDelete'
            );
        }

        $resourcePath = '/SalesOrders/{InvoiceID}/Historys/{InvoiceHistoryID}/Lines/{InvoiceLineID}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // header params
        if ($accept !== null) {
            $headerParams['Accept'] = ObjectSerializer::toHeaderValue($accept);
        }
        // header params
        if ($jiwa_stateful !== null) {
            $headerParams['jiwa-stateful'] = ObjectSerializer::toHeaderValue($jiwa_stateful);
        }

        // path params
        if ($invoice_id !== null) {
            $resourcePath = str_replace(
                '{' . 'InvoiceID' . '}',
                ObjectSerializer::toPathValue($invoice_id),
                $resourcePath
            );
        }
        // path params
        if ($invoice_history_id !== null) {
            $resourcePath = str_replace(
                '{' . 'InvoiceHistoryID' . '}',
                ObjectSerializer::toPathValue($invoice_history_id),
                $resourcePath
            );
        }
        // path params
        if ($invoice_line_id !== null) {
            $resourcePath = str_replace(
                '{' . 'InvoiceLineID' . '}',
                ObjectSerializer::toPathValue($invoice_line_id),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json', 'application/xml']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json', 'application/xml'],
                ['application/x-www-form-urlencoded', 'application/json', 'application/xml']
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            
            if($headers['Content-Type'] === 'application/json') {
                // \stdClass has no __toString(), so we should encode it manually
                if ($httpBody instanceof \stdClass) {
                    $httpBody = \GuzzleHttp\json_encode($httpBody);
                }
                // array has no __toString(), so we should encode it manually
                if(is_array($httpBody)) {
                    $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($httpBody));
                }
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\Query::build($formParams);
            }
        }

        // this endpoint requires HTTP basic authentication
        if ($this->config->getUsername() !== null || $this->config->getPassword() !== null) {
            $headers['Authorization'] = 'Basic ' . base64_encode($this->config->getUsername() . ":" . $this->config->getPassword());
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\Query::build($queryParams);
        return new Request(
            'DELETE',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation salesOrderLineDetailDELETERequestInvoiceIDHistorysInvoiceHistoryIDLinesInvoiceLineIDLineDetailsDetailsLineIDDelete
     *
     * Deletes a sales order line detail.
     *
     * @param  string $accept Accept Header (required)
     * @param  string $invoice_id invoice_id (required)
     * @param  string $invoice_history_id invoice_history_id (required)
     * @param  string $invoice_line_id invoice_line_id (required)
     * @param  string $details_line_id details_line_id (required)
     * @param  bool $jiwa_stateful Stateful indicator (optional)
     *
     * @throws \Jiwa\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Jiwa\Model\Object
     */
    public function salesOrderLineDetailDELETERequestInvoiceIDHistorysInvoiceHistoryIDLinesInvoiceLineIDLineDetailsDetailsLineIDDelete($accept, $invoice_id, $invoice_history_id, $invoice_line_id, $details_line_id, $jiwa_stateful = null)
    {
        list($response) = $this->salesOrderLineDetailDELETERequestInvoiceIDHistorysInvoiceHistoryIDLinesInvoiceLineIDLineDetailsDetailsLineIDDeleteWithHttpInfo($accept, $invoice_id, $invoice_history_id, $invoice_line_id, $details_line_id, $jiwa_stateful);
        return $response;
    }

    /**
     * Operation salesOrderLineDetailDELETERequestInvoiceIDHistorysInvoiceHistoryIDLinesInvoiceLineIDLineDetailsDetailsLineIDDeleteWithHttpInfo
     *
     * Deletes a sales order line detail.
     *
     * @param  string $accept Accept Header (required)
     * @param  string $invoice_id (required)
     * @param  string $invoice_history_id (required)
     * @param  string $invoice_line_id (required)
     * @param  string $details_line_id (required)
     * @param  bool $jiwa_stateful Stateful indicator (optional)
     *
     * @throws \Jiwa\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Jiwa\Model\Object, HTTP status code, HTTP response headers (array of strings)
     */
    public function salesOrderLineDetailDELETERequestInvoiceIDHistorysInvoiceHistoryIDLinesInvoiceLineIDLineDetailsDetailsLineIDDeleteWithHttpInfo($accept, $invoice_id, $invoice_history_id, $invoice_line_id, $details_line_id, $jiwa_stateful = null)
    {
        $returnType = '\Jiwa\Model\Object';
        $request = $this->salesOrderLineDetailDELETERequestInvoiceIDHistorysInvoiceHistoryIDLinesInvoiceLineIDLineDetailsDetailsLineIDDeleteRequest($accept, $invoice_id, $invoice_history_id, $invoice_line_id, $details_line_id, $jiwa_stateful);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Jiwa\Model\Object',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 204:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Jiwa\Model\Object',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 401:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Jiwa\Model\Object',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 403:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Jiwa\Model\Object',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 404:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Jiwa\Model\Object',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation salesOrderLineDetailDELETERequestInvoiceIDHistorysInvoiceHistoryIDLinesInvoiceLineIDLineDetailsDetailsLineIDDeleteAsync
     *
     * Deletes a sales order line detail.
     *
     * @param  string $accept Accept Header (required)
     * @param  string $invoice_id (required)
     * @param  string $invoice_history_id (required)
     * @param  string $invoice_line_id (required)
     * @param  string $details_line_id (required)
     * @param  bool $jiwa_stateful Stateful indicator (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function salesOrderLineDetailDELETERequestInvoiceIDHistorysInvoiceHistoryIDLinesInvoiceLineIDLineDetailsDetailsLineIDDeleteAsync($accept, $invoice_id, $invoice_history_id, $invoice_line_id, $details_line_id, $jiwa_stateful = null)
    {
        return $this->salesOrderLineDetailDELETERequestInvoiceIDHistorysInvoiceHistoryIDLinesInvoiceLineIDLineDetailsDetailsLineIDDeleteAsyncWithHttpInfo($accept, $invoice_id, $invoice_history_id, $invoice_line_id, $details_line_id, $jiwa_stateful)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation salesOrderLineDetailDELETERequestInvoiceIDHistorysInvoiceHistoryIDLinesInvoiceLineIDLineDetailsDetailsLineIDDeleteAsyncWithHttpInfo
     *
     * Deletes a sales order line detail.
     *
     * @param  string $accept Accept Header (required)
     * @param  string $invoice_id (required)
     * @param  string $invoice_history_id (required)
     * @param  string $invoice_line_id (required)
     * @param  string $details_line_id (required)
     * @param  bool $jiwa_stateful Stateful indicator (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function salesOrderLineDetailDELETERequestInvoiceIDHistorysInvoiceHistoryIDLinesInvoiceLineIDLineDetailsDetailsLineIDDeleteAsyncWithHttpInfo($accept, $invoice_id, $invoice_history_id, $invoice_line_id, $details_line_id, $jiwa_stateful = null)
    {
        $returnType = '\Jiwa\Model\Object';
        $request = $this->salesOrderLineDetailDELETERequestInvoiceIDHistorysInvoiceHistoryIDLinesInvoiceLineIDLineDetailsDetailsLineIDDeleteRequest($accept, $invoice_id, $invoice_history_id, $invoice_line_id, $details_line_id, $jiwa_stateful);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'salesOrderLineDetailDELETERequestInvoiceIDHistorysInvoiceHistoryIDLinesInvoiceLineIDLineDetailsDetailsLineIDDelete'
     *
     * @param  string $accept Accept Header (required)
     * @param  string $invoice_id (required)
     * @param  string $invoice_history_id (required)
     * @param  string $invoice_line_id (required)
     * @param  string $details_line_id (required)
     * @param  bool $jiwa_stateful Stateful indicator (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function salesOrderLineDetailDELETERequestInvoiceIDHistorysInvoiceHistoryIDLinesInvoiceLineIDLineDetailsDetailsLineIDDeleteRequest($accept, $invoice_id, $invoice_history_id, $invoice_line_id, $details_line_id, $jiwa_stateful = null)
    {
        // verify the required parameter 'accept' is set
        if ($accept === null || (is_array($accept) && count($accept) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $accept when calling salesOrderLineDetailDELETERequestInvoiceIDHistorysInvoiceHistoryIDLinesInvoiceLineIDLineDetailsDetailsLineIDDelete'
            );
        }
        // verify the required parameter 'invoice_id' is set
        if ($invoice_id === null || (is_array($invoice_id) && count($invoice_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $invoice_id when calling salesOrderLineDetailDELETERequestInvoiceIDHistorysInvoiceHistoryIDLinesInvoiceLineIDLineDetailsDetailsLineIDDelete'
            );
        }
        // verify the required parameter 'invoice_history_id' is set
        if ($invoice_history_id === null || (is_array($invoice_history_id) && count($invoice_history_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $invoice_history_id when calling salesOrderLineDetailDELETERequestInvoiceIDHistorysInvoiceHistoryIDLinesInvoiceLineIDLineDetailsDetailsLineIDDelete'
            );
        }
        // verify the required parameter 'invoice_line_id' is set
        if ($invoice_line_id === null || (is_array($invoice_line_id) && count($invoice_line_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $invoice_line_id when calling salesOrderLineDetailDELETERequestInvoiceIDHistorysInvoiceHistoryIDLinesInvoiceLineIDLineDetailsDetailsLineIDDelete'
            );
        }
        // verify the required parameter 'details_line_id' is set
        if ($details_line_id === null || (is_array($details_line_id) && count($details_line_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $details_line_id when calling salesOrderLineDetailDELETERequestInvoiceIDHistorysInvoiceHistoryIDLinesInvoiceLineIDLineDetailsDetailsLineIDDelete'
            );
        }

        $resourcePath = '/SalesOrders/{InvoiceID}/Historys/{InvoiceHistoryID}/Lines/{InvoiceLineID}/LineDetails/{DetailsLineID}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // header params
        if ($accept !== null) {
            $headerParams['Accept'] = ObjectSerializer::toHeaderValue($accept);
        }
        // header params
        if ($jiwa_stateful !== null) {
            $headerParams['jiwa-stateful'] = ObjectSerializer::toHeaderValue($jiwa_stateful);
        }

        // path params
        if ($invoice_id !== null) {
            $resourcePath = str_replace(
                '{' . 'InvoiceID' . '}',
                ObjectSerializer::toPathValue($invoice_id),
                $resourcePath
            );
        }
        // path params
        if ($invoice_history_id !== null) {
            $resourcePath = str_replace(
                '{' . 'InvoiceHistoryID' . '}',
                ObjectSerializer::toPathValue($invoice_history_id),
                $resourcePath
            );
        }
        // path params
        if ($invoice_line_id !== null) {
            $resourcePath = str_replace(
                '{' . 'InvoiceLineID' . '}',
                ObjectSerializer::toPathValue($invoice_line_id),
                $resourcePath
            );
        }
        // path params
        if ($details_line_id !== null) {
            $resourcePath = str_replace(
                '{' . 'DetailsLineID' . '}',
                ObjectSerializer::toPathValue($details_line_id),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json', 'application/xml']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json', 'application/xml'],
                ['application/x-www-form-urlencoded', 'application/json', 'application/xml']
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            
            if($headers['Content-Type'] === 'application/json') {
                // \stdClass has no __toString(), so we should encode it manually
                if ($httpBody instanceof \stdClass) {
                    $httpBody = \GuzzleHttp\json_encode($httpBody);
                }
                // array has no __toString(), so we should encode it manually
                if(is_array($httpBody)) {
                    $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($httpBody));
                }
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\Query::build($formParams);
            }
        }

        // this endpoint requires HTTP basic authentication
        if ($this->config->getUsername() !== null || $this->config->getPassword() !== null) {
            $headers['Authorization'] = 'Basic ' . base64_encode($this->config->getUsername() . ":" . $this->config->getPassword());
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\Query::build($queryParams);
        return new Request(
            'DELETE',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation salesOrderLineDetailGETRequestInvoiceIDHistorysInvoiceHistoryIDLinesInvoiceLineIDLineDetailsDetailsLineIDGet
     *
     * Retrieves a sales order line detail.
     *
     * @param  string $accept Accept Header (required)
     * @param  string $invoice_id invoice_id (required)
     * @param  string $invoice_history_id invoice_history_id (required)
     * @param  string $invoice_line_id invoice_line_id (required)
     * @param  string $details_line_id details_line_id (required)
     * @param  bool $jiwa_stateful Stateful indicator (optional)
     *
     * @throws \Jiwa\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Jiwa\Model\SalesOrderLineDetail
     */
    public function salesOrderLineDetailGETRequestInvoiceIDHistorysInvoiceHistoryIDLinesInvoiceLineIDLineDetailsDetailsLineIDGet($accept, $invoice_id, $invoice_history_id, $invoice_line_id, $details_line_id, $jiwa_stateful = null)
    {
        list($response) = $this->salesOrderLineDetailGETRequestInvoiceIDHistorysInvoiceHistoryIDLinesInvoiceLineIDLineDetailsDetailsLineIDGetWithHttpInfo($accept, $invoice_id, $invoice_history_id, $invoice_line_id, $details_line_id, $jiwa_stateful);
        return $response;
    }

    /**
     * Operation salesOrderLineDetailGETRequestInvoiceIDHistorysInvoiceHistoryIDLinesInvoiceLineIDLineDetailsDetailsLineIDGetWithHttpInfo
     *
     * Retrieves a sales order line detail.
     *
     * @param  string $accept Accept Header (required)
     * @param  string $invoice_id (required)
     * @param  string $invoice_history_id (required)
     * @param  string $invoice_line_id (required)
     * @param  string $details_line_id (required)
     * @param  bool $jiwa_stateful Stateful indicator (optional)
     *
     * @throws \Jiwa\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Jiwa\Model\SalesOrderLineDetail, HTTP status code, HTTP response headers (array of strings)
     */
    public function salesOrderLineDetailGETRequestInvoiceIDHistorysInvoiceHistoryIDLinesInvoiceLineIDLineDetailsDetailsLineIDGetWithHttpInfo($accept, $invoice_id, $invoice_history_id, $invoice_line_id, $details_line_id, $jiwa_stateful = null)
    {
        $returnType = '\Jiwa\Model\SalesOrderLineDetail';
        $request = $this->salesOrderLineDetailGETRequestInvoiceIDHistorysInvoiceHistoryIDLinesInvoiceLineIDLineDetailsDetailsLineIDGetRequest($accept, $invoice_id, $invoice_history_id, $invoice_line_id, $details_line_id, $jiwa_stateful);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Jiwa\Model\SalesOrderLineDetail',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 403:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Jiwa\Model\SalesOrderLineDetail',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 401:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Jiwa\Model\SalesOrderLineDetail',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 404:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Jiwa\Model\SalesOrderLineDetail',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation salesOrderLineDetailGETRequestInvoiceIDHistorysInvoiceHistoryIDLinesInvoiceLineIDLineDetailsDetailsLineIDGetAsync
     *
     * Retrieves a sales order line detail.
     *
     * @param  string $accept Accept Header (required)
     * @param  string $invoice_id (required)
     * @param  string $invoice_history_id (required)
     * @param  string $invoice_line_id (required)
     * @param  string $details_line_id (required)
     * @param  bool $jiwa_stateful Stateful indicator (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function salesOrderLineDetailGETRequestInvoiceIDHistorysInvoiceHistoryIDLinesInvoiceLineIDLineDetailsDetailsLineIDGetAsync($accept, $invoice_id, $invoice_history_id, $invoice_line_id, $details_line_id, $jiwa_stateful = null)
    {
        return $this->salesOrderLineDetailGETRequestInvoiceIDHistorysInvoiceHistoryIDLinesInvoiceLineIDLineDetailsDetailsLineIDGetAsyncWithHttpInfo($accept, $invoice_id, $invoice_history_id, $invoice_line_id, $details_line_id, $jiwa_stateful)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation salesOrderLineDetailGETRequestInvoiceIDHistorysInvoiceHistoryIDLinesInvoiceLineIDLineDetailsDetailsLineIDGetAsyncWithHttpInfo
     *
     * Retrieves a sales order line detail.
     *
     * @param  string $accept Accept Header (required)
     * @param  string $invoice_id (required)
     * @param  string $invoice_history_id (required)
     * @param  string $invoice_line_id (required)
     * @param  string $details_line_id (required)
     * @param  bool $jiwa_stateful Stateful indicator (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function salesOrderLineDetailGETRequestInvoiceIDHistorysInvoiceHistoryIDLinesInvoiceLineIDLineDetailsDetailsLineIDGetAsyncWithHttpInfo($accept, $invoice_id, $invoice_history_id, $invoice_line_id, $details_line_id, $jiwa_stateful = null)
    {
        $returnType = '\Jiwa\Model\SalesOrderLineDetail';
        $request = $this->salesOrderLineDetailGETRequestInvoiceIDHistorysInvoiceHistoryIDLinesInvoiceLineIDLineDetailsDetailsLineIDGetRequest($accept, $invoice_id, $invoice_history_id, $invoice_line_id, $details_line_id, $jiwa_stateful);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'salesOrderLineDetailGETRequestInvoiceIDHistorysInvoiceHistoryIDLinesInvoiceLineIDLineDetailsDetailsLineIDGet'
     *
     * @param  string $accept Accept Header (required)
     * @param  string $invoice_id (required)
     * @param  string $invoice_history_id (required)
     * @param  string $invoice_line_id (required)
     * @param  string $details_line_id (required)
     * @param  bool $jiwa_stateful Stateful indicator (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function salesOrderLineDetailGETRequestInvoiceIDHistorysInvoiceHistoryIDLinesInvoiceLineIDLineDetailsDetailsLineIDGetRequest($accept, $invoice_id, $invoice_history_id, $invoice_line_id, $details_line_id, $jiwa_stateful = null)
    {
        // verify the required parameter 'accept' is set
        if ($accept === null || (is_array($accept) && count($accept) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $accept when calling salesOrderLineDetailGETRequestInvoiceIDHistorysInvoiceHistoryIDLinesInvoiceLineIDLineDetailsDetailsLineIDGet'
            );
        }
        // verify the required parameter 'invoice_id' is set
        if ($invoice_id === null || (is_array($invoice_id) && count($invoice_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $invoice_id when calling salesOrderLineDetailGETRequestInvoiceIDHistorysInvoiceHistoryIDLinesInvoiceLineIDLineDetailsDetailsLineIDGet'
            );
        }
        // verify the required parameter 'invoice_history_id' is set
        if ($invoice_history_id === null || (is_array($invoice_history_id) && count($invoice_history_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $invoice_history_id when calling salesOrderLineDetailGETRequestInvoiceIDHistorysInvoiceHistoryIDLinesInvoiceLineIDLineDetailsDetailsLineIDGet'
            );
        }
        // verify the required parameter 'invoice_line_id' is set
        if ($invoice_line_id === null || (is_array($invoice_line_id) && count($invoice_line_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $invoice_line_id when calling salesOrderLineDetailGETRequestInvoiceIDHistorysInvoiceHistoryIDLinesInvoiceLineIDLineDetailsDetailsLineIDGet'
            );
        }
        // verify the required parameter 'details_line_id' is set
        if ($details_line_id === null || (is_array($details_line_id) && count($details_line_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $details_line_id when calling salesOrderLineDetailGETRequestInvoiceIDHistorysInvoiceHistoryIDLinesInvoiceLineIDLineDetailsDetailsLineIDGet'
            );
        }

        $resourcePath = '/SalesOrders/{InvoiceID}/Historys/{InvoiceHistoryID}/Lines/{InvoiceLineID}/LineDetails/{DetailsLineID}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // header params
        if ($accept !== null) {
            $headerParams['Accept'] = ObjectSerializer::toHeaderValue($accept);
        }
        // header params
        if ($jiwa_stateful !== null) {
            $headerParams['jiwa-stateful'] = ObjectSerializer::toHeaderValue($jiwa_stateful);
        }

        // path params
        if ($invoice_id !== null) {
            $resourcePath = str_replace(
                '{' . 'InvoiceID' . '}',
                ObjectSerializer::toPathValue($invoice_id),
                $resourcePath
            );
        }
        // path params
        if ($invoice_history_id !== null) {
            $resourcePath = str_replace(
                '{' . 'InvoiceHistoryID' . '}',
                ObjectSerializer::toPathValue($invoice_history_id),
                $resourcePath
            );
        }
        // path params
        if ($invoice_line_id !== null) {
            $resourcePath = str_replace(
                '{' . 'InvoiceLineID' . '}',
                ObjectSerializer::toPathValue($invoice_line_id),
                $resourcePath
            );
        }
        // path params
        if ($details_line_id !== null) {
            $resourcePath = str_replace(
                '{' . 'DetailsLineID' . '}',
                ObjectSerializer::toPathValue($details_line_id),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json', 'application/xml']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json', 'application/xml'],
                ['application/x-www-form-urlencoded', 'application/json', 'application/xml']
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            
            if($headers['Content-Type'] === 'application/json') {
                // \stdClass has no __toString(), so we should encode it manually
                if ($httpBody instanceof \stdClass) {
                    $httpBody = \GuzzleHttp\json_encode($httpBody);
                }
                // array has no __toString(), so we should encode it manually
                if(is_array($httpBody)) {
                    $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($httpBody));
                }
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\Query::build($formParams);
            }
        }

        // this endpoint requires HTTP basic authentication
        if ($this->config->getUsername() !== null || $this->config->getPassword() !== null) {
            $headers['Authorization'] = 'Basic ' . base64_encode($this->config->getUsername() . ":" . $this->config->getPassword());
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\Query::build($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation salesOrderLineDetailPATCHRequestInvoiceIDHistorysInvoiceHistoryIDLinesInvoiceLineIDLineDetailsDetailsLineIDUpdate
     *
     * Updates a sales order line detail.
     *
     * @param  string $accept Accept Header (required)
     * @param  string $invoice_id invoice_id (required)
     * @param  string $invoice_history_id invoice_history_id (required)
     * @param  string $invoice_line_id invoice_line_id (required)
     * @param  string $details_line_id details_line_id (required)
     * @param  bool $jiwa_stateful Stateful indicator (optional)
     * @param  double $cost cost (optional)
     * @param  \DateTime $date_in date_in (optional)
     * @param  \DateTime $expiry_date expiry_date (optional)
     * @param  double $special_price special_price (optional)
     * @param  double $quantity quantity (optional)
     * @param  string $line_detail_id line_detail_id (optional)
     * @param  string $bin_location bin_location (optional)
     * @param  string $serial_no serial_no (optional)
     * @param  string $sohid sohid (optional)
     * @param  string $in_logical_id in_logical_id (optional)
     * @param  \Jiwa\Model\SalesOrderLineDetailPATCHRequest $body body (optional)
     *
     * @throws \Jiwa\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Jiwa\Model\SalesOrderLineDetail
     */
    public function salesOrderLineDetailPATCHRequestInvoiceIDHistorysInvoiceHistoryIDLinesInvoiceLineIDLineDetailsDetailsLineIDUpdate($accept, $invoice_id, $invoice_history_id, $invoice_line_id, $details_line_id, $jiwa_stateful = null, $cost = null, $date_in = null, $expiry_date = null, $special_price = null, $quantity = null, $line_detail_id = null, $bin_location = null, $serial_no = null, $sohid = null, $in_logical_id = null, $body = null)
    {
        list($response) = $this->salesOrderLineDetailPATCHRequestInvoiceIDHistorysInvoiceHistoryIDLinesInvoiceLineIDLineDetailsDetailsLineIDUpdateWithHttpInfo($accept, $invoice_id, $invoice_history_id, $invoice_line_id, $details_line_id, $jiwa_stateful, $cost, $date_in, $expiry_date, $special_price, $quantity, $line_detail_id, $bin_location, $serial_no, $sohid, $in_logical_id, $body);
        return $response;
    }

    /**
     * Operation salesOrderLineDetailPATCHRequestInvoiceIDHistorysInvoiceHistoryIDLinesInvoiceLineIDLineDetailsDetailsLineIDUpdateWithHttpInfo
     *
     * Updates a sales order line detail.
     *
     * @param  string $accept Accept Header (required)
     * @param  string $invoice_id (required)
     * @param  string $invoice_history_id (required)
     * @param  string $invoice_line_id (required)
     * @param  string $details_line_id (required)
     * @param  bool $jiwa_stateful Stateful indicator (optional)
     * @param  double $cost (optional)
     * @param  \DateTime $date_in (optional)
     * @param  \DateTime $expiry_date (optional)
     * @param  double $special_price (optional)
     * @param  double $quantity (optional)
     * @param  string $line_detail_id (optional)
     * @param  string $bin_location (optional)
     * @param  string $serial_no (optional)
     * @param  string $sohid (optional)
     * @param  string $in_logical_id (optional)
     * @param  \Jiwa\Model\SalesOrderLineDetailPATCHRequest $body (optional)
     *
     * @throws \Jiwa\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Jiwa\Model\SalesOrderLineDetail, HTTP status code, HTTP response headers (array of strings)
     */
    public function salesOrderLineDetailPATCHRequestInvoiceIDHistorysInvoiceHistoryIDLinesInvoiceLineIDLineDetailsDetailsLineIDUpdateWithHttpInfo($accept, $invoice_id, $invoice_history_id, $invoice_line_id, $details_line_id, $jiwa_stateful = null, $cost = null, $date_in = null, $expiry_date = null, $special_price = null, $quantity = null, $line_detail_id = null, $bin_location = null, $serial_no = null, $sohid = null, $in_logical_id = null, $body = null)
    {
        $returnType = '\Jiwa\Model\SalesOrderLineDetail';
        $request = $this->salesOrderLineDetailPATCHRequestInvoiceIDHistorysInvoiceHistoryIDLinesInvoiceLineIDLineDetailsDetailsLineIDUpdateRequest($accept, $invoice_id, $invoice_history_id, $invoice_line_id, $details_line_id, $jiwa_stateful, $cost, $date_in, $expiry_date, $special_price, $quantity, $line_detail_id, $bin_location, $serial_no, $sohid, $in_logical_id, $body);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Jiwa\Model\SalesOrderLineDetail',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 403:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Jiwa\Model\SalesOrderLineDetail',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 404:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Jiwa\Model\SalesOrderLineDetail',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 401:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Jiwa\Model\SalesOrderLineDetail',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation salesOrderLineDetailPATCHRequestInvoiceIDHistorysInvoiceHistoryIDLinesInvoiceLineIDLineDetailsDetailsLineIDUpdateAsync
     *
     * Updates a sales order line detail.
     *
     * @param  string $accept Accept Header (required)
     * @param  string $invoice_id (required)
     * @param  string $invoice_history_id (required)
     * @param  string $invoice_line_id (required)
     * @param  string $details_line_id (required)
     * @param  bool $jiwa_stateful Stateful indicator (optional)
     * @param  double $cost (optional)
     * @param  \DateTime $date_in (optional)
     * @param  \DateTime $expiry_date (optional)
     * @param  double $special_price (optional)
     * @param  double $quantity (optional)
     * @param  string $line_detail_id (optional)
     * @param  string $bin_location (optional)
     * @param  string $serial_no (optional)
     * @param  string $sohid (optional)
     * @param  string $in_logical_id (optional)
     * @param  \Jiwa\Model\SalesOrderLineDetailPATCHRequest $body (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function salesOrderLineDetailPATCHRequestInvoiceIDHistorysInvoiceHistoryIDLinesInvoiceLineIDLineDetailsDetailsLineIDUpdateAsync($accept, $invoice_id, $invoice_history_id, $invoice_line_id, $details_line_id, $jiwa_stateful = null, $cost = null, $date_in = null, $expiry_date = null, $special_price = null, $quantity = null, $line_detail_id = null, $bin_location = null, $serial_no = null, $sohid = null, $in_logical_id = null, $body = null)
    {
        return $this->salesOrderLineDetailPATCHRequestInvoiceIDHistorysInvoiceHistoryIDLinesInvoiceLineIDLineDetailsDetailsLineIDUpdateAsyncWithHttpInfo($accept, $invoice_id, $invoice_history_id, $invoice_line_id, $details_line_id, $jiwa_stateful, $cost, $date_in, $expiry_date, $special_price, $quantity, $line_detail_id, $bin_location, $serial_no, $sohid, $in_logical_id, $body)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation salesOrderLineDetailPATCHRequestInvoiceIDHistorysInvoiceHistoryIDLinesInvoiceLineIDLineDetailsDetailsLineIDUpdateAsyncWithHttpInfo
     *
     * Updates a sales order line detail.
     *
     * @param  string $accept Accept Header (required)
     * @param  string $invoice_id (required)
     * @param  string $invoice_history_id (required)
     * @param  string $invoice_line_id (required)
     * @param  string $details_line_id (required)
     * @param  bool $jiwa_stateful Stateful indicator (optional)
     * @param  double $cost (optional)
     * @param  \DateTime $date_in (optional)
     * @param  \DateTime $expiry_date (optional)
     * @param  double $special_price (optional)
     * @param  double $quantity (optional)
     * @param  string $line_detail_id (optional)
     * @param  string $bin_location (optional)
     * @param  string $serial_no (optional)
     * @param  string $sohid (optional)
     * @param  string $in_logical_id (optional)
     * @param  \Jiwa\Model\SalesOrderLineDetailPATCHRequest $body (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function salesOrderLineDetailPATCHRequestInvoiceIDHistorysInvoiceHistoryIDLinesInvoiceLineIDLineDetailsDetailsLineIDUpdateAsyncWithHttpInfo($accept, $invoice_id, $invoice_history_id, $invoice_line_id, $details_line_id, $jiwa_stateful = null, $cost = null, $date_in = null, $expiry_date = null, $special_price = null, $quantity = null, $line_detail_id = null, $bin_location = null, $serial_no = null, $sohid = null, $in_logical_id = null, $body = null)
    {
        $returnType = '\Jiwa\Model\SalesOrderLineDetail';
        $request = $this->salesOrderLineDetailPATCHRequestInvoiceIDHistorysInvoiceHistoryIDLinesInvoiceLineIDLineDetailsDetailsLineIDUpdateRequest($accept, $invoice_id, $invoice_history_id, $invoice_line_id, $details_line_id, $jiwa_stateful, $cost, $date_in, $expiry_date, $special_price, $quantity, $line_detail_id, $bin_location, $serial_no, $sohid, $in_logical_id, $body);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'salesOrderLineDetailPATCHRequestInvoiceIDHistorysInvoiceHistoryIDLinesInvoiceLineIDLineDetailsDetailsLineIDUpdate'
     *
     * @param  string $accept Accept Header (required)
     * @param  string $invoice_id (required)
     * @param  string $invoice_history_id (required)
     * @param  string $invoice_line_id (required)
     * @param  string $details_line_id (required)
     * @param  bool $jiwa_stateful Stateful indicator (optional)
     * @param  double $cost (optional)
     * @param  \DateTime $date_in (optional)
     * @param  \DateTime $expiry_date (optional)
     * @param  double $special_price (optional)
     * @param  double $quantity (optional)
     * @param  string $line_detail_id (optional)
     * @param  string $bin_location (optional)
     * @param  string $serial_no (optional)
     * @param  string $sohid (optional)
     * @param  string $in_logical_id (optional)
     * @param  \Jiwa\Model\SalesOrderLineDetailPATCHRequest $body (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function salesOrderLineDetailPATCHRequestInvoiceIDHistorysInvoiceHistoryIDLinesInvoiceLineIDLineDetailsDetailsLineIDUpdateRequest($accept, $invoice_id, $invoice_history_id, $invoice_line_id, $details_line_id, $jiwa_stateful = null, $cost = null, $date_in = null, $expiry_date = null, $special_price = null, $quantity = null, $line_detail_id = null, $bin_location = null, $serial_no = null, $sohid = null, $in_logical_id = null, $body = null)
    {
        // verify the required parameter 'accept' is set
        if ($accept === null || (is_array($accept) && count($accept) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $accept when calling salesOrderLineDetailPATCHRequestInvoiceIDHistorysInvoiceHistoryIDLinesInvoiceLineIDLineDetailsDetailsLineIDUpdate'
            );
        }
        // verify the required parameter 'invoice_id' is set
        if ($invoice_id === null || (is_array($invoice_id) && count($invoice_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $invoice_id when calling salesOrderLineDetailPATCHRequestInvoiceIDHistorysInvoiceHistoryIDLinesInvoiceLineIDLineDetailsDetailsLineIDUpdate'
            );
        }
        // verify the required parameter 'invoice_history_id' is set
        if ($invoice_history_id === null || (is_array($invoice_history_id) && count($invoice_history_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $invoice_history_id when calling salesOrderLineDetailPATCHRequestInvoiceIDHistorysInvoiceHistoryIDLinesInvoiceLineIDLineDetailsDetailsLineIDUpdate'
            );
        }
        // verify the required parameter 'invoice_line_id' is set
        if ($invoice_line_id === null || (is_array($invoice_line_id) && count($invoice_line_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $invoice_line_id when calling salesOrderLineDetailPATCHRequestInvoiceIDHistorysInvoiceHistoryIDLinesInvoiceLineIDLineDetailsDetailsLineIDUpdate'
            );
        }
        // verify the required parameter 'details_line_id' is set
        if ($details_line_id === null || (is_array($details_line_id) && count($details_line_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $details_line_id when calling salesOrderLineDetailPATCHRequestInvoiceIDHistorysInvoiceHistoryIDLinesInvoiceLineIDLineDetailsDetailsLineIDUpdate'
            );
        }

        $resourcePath = '/SalesOrders/{InvoiceID}/Historys/{InvoiceHistoryID}/Lines/{InvoiceLineID}/LineDetails/{DetailsLineID}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        if ($cost !== null) {
            $queryParams['Cost'] = ObjectSerializer::toQueryValue($cost);
        }
        // query params
        if ($date_in !== null) {
            $queryParams['DateIn'] = ObjectSerializer::toQueryValue($date_in);
        }
        // query params
        if ($expiry_date !== null) {
            $queryParams['ExpiryDate'] = ObjectSerializer::toQueryValue($expiry_date);
        }
        // query params
        if ($special_price !== null) {
            $queryParams['SpecialPrice'] = ObjectSerializer::toQueryValue($special_price);
        }
        // query params
        if ($quantity !== null) {
            $queryParams['Quantity'] = ObjectSerializer::toQueryValue($quantity);
        }
        // query params
        if ($line_detail_id !== null) {
            $queryParams['LineDetailID'] = ObjectSerializer::toQueryValue($line_detail_id);
        }
        // query params
        if ($bin_location !== null) {
            $queryParams['BinLocation'] = ObjectSerializer::toQueryValue($bin_location);
        }
        // query params
        if ($serial_no !== null) {
            $queryParams['SerialNo'] = ObjectSerializer::toQueryValue($serial_no);
        }
        // query params
        if ($sohid !== null) {
            $queryParams['SOHID'] = ObjectSerializer::toQueryValue($sohid);
        }
        // query params
        if ($in_logical_id !== null) {
            $queryParams['IN_LogicalID'] = ObjectSerializer::toQueryValue($in_logical_id);
        }
        // header params
        if ($accept !== null) {
            $headerParams['Accept'] = ObjectSerializer::toHeaderValue($accept);
        }
        // header params
        if ($jiwa_stateful !== null) {
            $headerParams['jiwa-stateful'] = ObjectSerializer::toHeaderValue($jiwa_stateful);
        }

        // path params
        if ($invoice_id !== null) {
            $resourcePath = str_replace(
                '{' . 'InvoiceID' . '}',
                ObjectSerializer::toPathValue($invoice_id),
                $resourcePath
            );
        }
        // path params
        if ($invoice_history_id !== null) {
            $resourcePath = str_replace(
                '{' . 'InvoiceHistoryID' . '}',
                ObjectSerializer::toPathValue($invoice_history_id),
                $resourcePath
            );
        }
        // path params
        if ($invoice_line_id !== null) {
            $resourcePath = str_replace(
                '{' . 'InvoiceLineID' . '}',
                ObjectSerializer::toPathValue($invoice_line_id),
                $resourcePath
            );
        }
        // path params
        if ($details_line_id !== null) {
            $resourcePath = str_replace(
                '{' . 'DetailsLineID' . '}',
                ObjectSerializer::toPathValue($details_line_id),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;
        if (isset($body)) {
            $_tempBody = $body;
        }

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json', 'application/xml']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json', 'application/xml'],
                ['application/x-www-form-urlencoded', 'application/json', 'application/xml']
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            
            if($headers['Content-Type'] === 'application/json') {
                // \stdClass has no __toString(), so we should encode it manually
                if ($httpBody instanceof \stdClass) {
                    $httpBody = \GuzzleHttp\json_encode($httpBody);
                }
                // array has no __toString(), so we should encode it manually
                if(is_array($httpBody)) {
                    $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($httpBody));
                }
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\Query::build($formParams);
            }
        }

        // this endpoint requires HTTP basic authentication
        if ($this->config->getUsername() !== null || $this->config->getPassword() !== null) {
            $headers['Authorization'] = 'Basic ' . base64_encode($this->config->getUsername() . ":" . $this->config->getPassword());
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\Query::build($queryParams);
        return new Request(
            'PATCH',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation salesOrderLineDetailPOSTRequestInvoiceIDHistorysInvoiceHistoryIDLinesInvoiceLineIDLineDetailsPost
     *
     * Appends a line detail to a sales order.
     *
     * @param  string $accept Accept Header (required)
     * @param  string $invoice_id invoice_id (required)
     * @param  string $invoice_history_id invoice_history_id (required)
     * @param  string $invoice_line_id invoice_line_id (required)
     * @param  bool $jiwa_stateful Stateful indicator (optional)
     * @param  double $cost cost (optional)
     * @param  \DateTime $date_in date_in (optional)
     * @param  \DateTime $expiry_date expiry_date (optional)
     * @param  double $special_price special_price (optional)
     * @param  double $quantity quantity (optional)
     * @param  string $bin_location bin_location (optional)
     * @param  string $serial_no serial_no (optional)
     * @param  string $sohid sohid (optional)
     * @param  string $in_logical_id in_logical_id (optional)
     * @param  \Jiwa\Model\SalesOrderLineDetailPOSTRequest $body body (optional)
     *
     * @throws \Jiwa\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Jiwa\Model\SalesOrderLineDetail
     */
    public function salesOrderLineDetailPOSTRequestInvoiceIDHistorysInvoiceHistoryIDLinesInvoiceLineIDLineDetailsPost($accept, $invoice_id, $invoice_history_id, $invoice_line_id, $jiwa_stateful = null, $cost = null, $date_in = null, $expiry_date = null, $special_price = null, $quantity = null, $bin_location = null, $serial_no = null, $sohid = null, $in_logical_id = null, $body = null)
    {
        list($response) = $this->salesOrderLineDetailPOSTRequestInvoiceIDHistorysInvoiceHistoryIDLinesInvoiceLineIDLineDetailsPostWithHttpInfo($accept, $invoice_id, $invoice_history_id, $invoice_line_id, $jiwa_stateful, $cost, $date_in, $expiry_date, $special_price, $quantity, $bin_location, $serial_no, $sohid, $in_logical_id, $body);
        return $response;
    }

    /**
     * Operation salesOrderLineDetailPOSTRequestInvoiceIDHistorysInvoiceHistoryIDLinesInvoiceLineIDLineDetailsPostWithHttpInfo
     *
     * Appends a line detail to a sales order.
     *
     * @param  string $accept Accept Header (required)
     * @param  string $invoice_id (required)
     * @param  string $invoice_history_id (required)
     * @param  string $invoice_line_id (required)
     * @param  bool $jiwa_stateful Stateful indicator (optional)
     * @param  double $cost (optional)
     * @param  \DateTime $date_in (optional)
     * @param  \DateTime $expiry_date (optional)
     * @param  double $special_price (optional)
     * @param  double $quantity (optional)
     * @param  string $bin_location (optional)
     * @param  string $serial_no (optional)
     * @param  string $sohid (optional)
     * @param  string $in_logical_id (optional)
     * @param  \Jiwa\Model\SalesOrderLineDetailPOSTRequest $body (optional)
     *
     * @throws \Jiwa\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Jiwa\Model\SalesOrderLineDetail, HTTP status code, HTTP response headers (array of strings)
     */
    public function salesOrderLineDetailPOSTRequestInvoiceIDHistorysInvoiceHistoryIDLinesInvoiceLineIDLineDetailsPostWithHttpInfo($accept, $invoice_id, $invoice_history_id, $invoice_line_id, $jiwa_stateful = null, $cost = null, $date_in = null, $expiry_date = null, $special_price = null, $quantity = null, $bin_location = null, $serial_no = null, $sohid = null, $in_logical_id = null, $body = null)
    {
        $returnType = '\Jiwa\Model\SalesOrderLineDetail';
        $request = $this->salesOrderLineDetailPOSTRequestInvoiceIDHistorysInvoiceHistoryIDLinesInvoiceLineIDLineDetailsPostRequest($accept, $invoice_id, $invoice_history_id, $invoice_line_id, $jiwa_stateful, $cost, $date_in, $expiry_date, $special_price, $quantity, $bin_location, $serial_no, $sohid, $in_logical_id, $body);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Jiwa\Model\SalesOrderLineDetail',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 401:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Jiwa\Model\SalesOrderLineDetail',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 404:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Jiwa\Model\SalesOrderLineDetail',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 201:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Jiwa\Model\SalesOrderLineDetail',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 403:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Jiwa\Model\SalesOrderLineDetail',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation salesOrderLineDetailPOSTRequestInvoiceIDHistorysInvoiceHistoryIDLinesInvoiceLineIDLineDetailsPostAsync
     *
     * Appends a line detail to a sales order.
     *
     * @param  string $accept Accept Header (required)
     * @param  string $invoice_id (required)
     * @param  string $invoice_history_id (required)
     * @param  string $invoice_line_id (required)
     * @param  bool $jiwa_stateful Stateful indicator (optional)
     * @param  double $cost (optional)
     * @param  \DateTime $date_in (optional)
     * @param  \DateTime $expiry_date (optional)
     * @param  double $special_price (optional)
     * @param  double $quantity (optional)
     * @param  string $bin_location (optional)
     * @param  string $serial_no (optional)
     * @param  string $sohid (optional)
     * @param  string $in_logical_id (optional)
     * @param  \Jiwa\Model\SalesOrderLineDetailPOSTRequest $body (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function salesOrderLineDetailPOSTRequestInvoiceIDHistorysInvoiceHistoryIDLinesInvoiceLineIDLineDetailsPostAsync($accept, $invoice_id, $invoice_history_id, $invoice_line_id, $jiwa_stateful = null, $cost = null, $date_in = null, $expiry_date = null, $special_price = null, $quantity = null, $bin_location = null, $serial_no = null, $sohid = null, $in_logical_id = null, $body = null)
    {
        return $this->salesOrderLineDetailPOSTRequestInvoiceIDHistorysInvoiceHistoryIDLinesInvoiceLineIDLineDetailsPostAsyncWithHttpInfo($accept, $invoice_id, $invoice_history_id, $invoice_line_id, $jiwa_stateful, $cost, $date_in, $expiry_date, $special_price, $quantity, $bin_location, $serial_no, $sohid, $in_logical_id, $body)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation salesOrderLineDetailPOSTRequestInvoiceIDHistorysInvoiceHistoryIDLinesInvoiceLineIDLineDetailsPostAsyncWithHttpInfo
     *
     * Appends a line detail to a sales order.
     *
     * @param  string $accept Accept Header (required)
     * @param  string $invoice_id (required)
     * @param  string $invoice_history_id (required)
     * @param  string $invoice_line_id (required)
     * @param  bool $jiwa_stateful Stateful indicator (optional)
     * @param  double $cost (optional)
     * @param  \DateTime $date_in (optional)
     * @param  \DateTime $expiry_date (optional)
     * @param  double $special_price (optional)
     * @param  double $quantity (optional)
     * @param  string $bin_location (optional)
     * @param  string $serial_no (optional)
     * @param  string $sohid (optional)
     * @param  string $in_logical_id (optional)
     * @param  \Jiwa\Model\SalesOrderLineDetailPOSTRequest $body (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function salesOrderLineDetailPOSTRequestInvoiceIDHistorysInvoiceHistoryIDLinesInvoiceLineIDLineDetailsPostAsyncWithHttpInfo($accept, $invoice_id, $invoice_history_id, $invoice_line_id, $jiwa_stateful = null, $cost = null, $date_in = null, $expiry_date = null, $special_price = null, $quantity = null, $bin_location = null, $serial_no = null, $sohid = null, $in_logical_id = null, $body = null)
    {
        $returnType = '\Jiwa\Model\SalesOrderLineDetail';
        $request = $this->salesOrderLineDetailPOSTRequestInvoiceIDHistorysInvoiceHistoryIDLinesInvoiceLineIDLineDetailsPostRequest($accept, $invoice_id, $invoice_history_id, $invoice_line_id, $jiwa_stateful, $cost, $date_in, $expiry_date, $special_price, $quantity, $bin_location, $serial_no, $sohid, $in_logical_id, $body);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'salesOrderLineDetailPOSTRequestInvoiceIDHistorysInvoiceHistoryIDLinesInvoiceLineIDLineDetailsPost'
     *
     * @param  string $accept Accept Header (required)
     * @param  string $invoice_id (required)
     * @param  string $invoice_history_id (required)
     * @param  string $invoice_line_id (required)
     * @param  bool $jiwa_stateful Stateful indicator (optional)
     * @param  double $cost (optional)
     * @param  \DateTime $date_in (optional)
     * @param  \DateTime $expiry_date (optional)
     * @param  double $special_price (optional)
     * @param  double $quantity (optional)
     * @param  string $bin_location (optional)
     * @param  string $serial_no (optional)
     * @param  string $sohid (optional)
     * @param  string $in_logical_id (optional)
     * @param  \Jiwa\Model\SalesOrderLineDetailPOSTRequest $body (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function salesOrderLineDetailPOSTRequestInvoiceIDHistorysInvoiceHistoryIDLinesInvoiceLineIDLineDetailsPostRequest($accept, $invoice_id, $invoice_history_id, $invoice_line_id, $jiwa_stateful = null, $cost = null, $date_in = null, $expiry_date = null, $special_price = null, $quantity = null, $bin_location = null, $serial_no = null, $sohid = null, $in_logical_id = null, $body = null)
    {
        // verify the required parameter 'accept' is set
        if ($accept === null || (is_array($accept) && count($accept) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $accept when calling salesOrderLineDetailPOSTRequestInvoiceIDHistorysInvoiceHistoryIDLinesInvoiceLineIDLineDetailsPost'
            );
        }
        // verify the required parameter 'invoice_id' is set
        if ($invoice_id === null || (is_array($invoice_id) && count($invoice_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $invoice_id when calling salesOrderLineDetailPOSTRequestInvoiceIDHistorysInvoiceHistoryIDLinesInvoiceLineIDLineDetailsPost'
            );
        }
        // verify the required parameter 'invoice_history_id' is set
        if ($invoice_history_id === null || (is_array($invoice_history_id) && count($invoice_history_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $invoice_history_id when calling salesOrderLineDetailPOSTRequestInvoiceIDHistorysInvoiceHistoryIDLinesInvoiceLineIDLineDetailsPost'
            );
        }
        // verify the required parameter 'invoice_line_id' is set
        if ($invoice_line_id === null || (is_array($invoice_line_id) && count($invoice_line_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $invoice_line_id when calling salesOrderLineDetailPOSTRequestInvoiceIDHistorysInvoiceHistoryIDLinesInvoiceLineIDLineDetailsPost'
            );
        }

        $resourcePath = '/SalesOrders/{InvoiceID}/Historys/{InvoiceHistoryID}/Lines/{InvoiceLineID}/LineDetails';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        if ($cost !== null) {
            $queryParams['Cost'] = ObjectSerializer::toQueryValue($cost);
        }
        // query params
        if ($date_in !== null) {
            $queryParams['DateIn'] = ObjectSerializer::toQueryValue($date_in);
        }
        // query params
        if ($expiry_date !== null) {
            $queryParams['ExpiryDate'] = ObjectSerializer::toQueryValue($expiry_date);
        }
        // query params
        if ($special_price !== null) {
            $queryParams['SpecialPrice'] = ObjectSerializer::toQueryValue($special_price);
        }
        // query params
        if ($quantity !== null) {
            $queryParams['Quantity'] = ObjectSerializer::toQueryValue($quantity);
        }
        // query params
        if ($bin_location !== null) {
            $queryParams['BinLocation'] = ObjectSerializer::toQueryValue($bin_location);
        }
        // query params
        if ($serial_no !== null) {
            $queryParams['SerialNo'] = ObjectSerializer::toQueryValue($serial_no);
        }
        // query params
        if ($sohid !== null) {
            $queryParams['SOHID'] = ObjectSerializer::toQueryValue($sohid);
        }
        // query params
        if ($in_logical_id !== null) {
            $queryParams['IN_LogicalID'] = ObjectSerializer::toQueryValue($in_logical_id);
        }
        // header params
        if ($accept !== null) {
            $headerParams['Accept'] = ObjectSerializer::toHeaderValue($accept);
        }
        // header params
        if ($jiwa_stateful !== null) {
            $headerParams['jiwa-stateful'] = ObjectSerializer::toHeaderValue($jiwa_stateful);
        }

        // path params
        if ($invoice_id !== null) {
            $resourcePath = str_replace(
                '{' . 'InvoiceID' . '}',
                ObjectSerializer::toPathValue($invoice_id),
                $resourcePath
            );
        }
        // path params
        if ($invoice_history_id !== null) {
            $resourcePath = str_replace(
                '{' . 'InvoiceHistoryID' . '}',
                ObjectSerializer::toPathValue($invoice_history_id),
                $resourcePath
            );
        }
        // path params
        if ($invoice_line_id !== null) {
            $resourcePath = str_replace(
                '{' . 'InvoiceLineID' . '}',
                ObjectSerializer::toPathValue($invoice_line_id),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;
        if (isset($body)) {
            $_tempBody = $body;
        }

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json', 'application/xml']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json', 'application/xml'],
                ['application/x-www-form-urlencoded', 'application/json', 'application/xml']
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            
            if($headers['Content-Type'] === 'application/json') {
                // \stdClass has no __toString(), so we should encode it manually
                if ($httpBody instanceof \stdClass) {
                    $httpBody = \GuzzleHttp\json_encode($httpBody);
                }
                // array has no __toString(), so we should encode it manually
                if(is_array($httpBody)) {
                    $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($httpBody));
                }
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\Query::build($formParams);
            }
        }

        // this endpoint requires HTTP basic authentication
        if ($this->config->getUsername() !== null || $this->config->getPassword() !== null) {
            $headers['Authorization'] = 'Basic ' . base64_encode($this->config->getUsername() . ":" . $this->config->getPassword());
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\Query::build($queryParams);
        return new Request(
            'POST',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation salesOrderLineDetailsGETManyRequestInvoiceIDHistorysInvoiceHistoryIDLinesInvoiceLineIDLineDetailsGet
     *
     * Retrieves a list of line details for a sales order line.
     *
     * @param  string $accept Accept Header (required)
     * @param  string $invoice_id invoice_id (required)
     * @param  string $invoice_history_id invoice_history_id (required)
     * @param  string $invoice_line_id invoice_line_id (required)
     * @param  bool $jiwa_stateful Stateful indicator (optional)
     *
     * @throws \Jiwa\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Jiwa\Model\SalesOrderLineDetail[]
     */
    public function salesOrderLineDetailsGETManyRequestInvoiceIDHistorysInvoiceHistoryIDLinesInvoiceLineIDLineDetailsGet($accept, $invoice_id, $invoice_history_id, $invoice_line_id, $jiwa_stateful = null)
    {
        list($response) = $this->salesOrderLineDetailsGETManyRequestInvoiceIDHistorysInvoiceHistoryIDLinesInvoiceLineIDLineDetailsGetWithHttpInfo($accept, $invoice_id, $invoice_history_id, $invoice_line_id, $jiwa_stateful);
        return $response;
    }

    /**
     * Operation salesOrderLineDetailsGETManyRequestInvoiceIDHistorysInvoiceHistoryIDLinesInvoiceLineIDLineDetailsGetWithHttpInfo
     *
     * Retrieves a list of line details for a sales order line.
     *
     * @param  string $accept Accept Header (required)
     * @param  string $invoice_id (required)
     * @param  string $invoice_history_id (required)
     * @param  string $invoice_line_id (required)
     * @param  bool $jiwa_stateful Stateful indicator (optional)
     *
     * @throws \Jiwa\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Jiwa\Model\SalesOrderLineDetail[], HTTP status code, HTTP response headers (array of strings)
     */
    public function salesOrderLineDetailsGETManyRequestInvoiceIDHistorysInvoiceHistoryIDLinesInvoiceLineIDLineDetailsGetWithHttpInfo($accept, $invoice_id, $invoice_history_id, $invoice_line_id, $jiwa_stateful = null)
    {
        $returnType = '\Jiwa\Model\SalesOrderLineDetail[]';
        $request = $this->salesOrderLineDetailsGETManyRequestInvoiceIDHistorysInvoiceHistoryIDLinesInvoiceLineIDLineDetailsGetRequest($accept, $invoice_id, $invoice_history_id, $invoice_line_id, $jiwa_stateful);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Jiwa\Model\SalesOrderLineDetail[]',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 404:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Jiwa\Model\SalesOrderLineDetail[]',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 403:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Jiwa\Model\SalesOrderLineDetail[]',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 401:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Jiwa\Model\SalesOrderLineDetail[]',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation salesOrderLineDetailsGETManyRequestInvoiceIDHistorysInvoiceHistoryIDLinesInvoiceLineIDLineDetailsGetAsync
     *
     * Retrieves a list of line details for a sales order line.
     *
     * @param  string $accept Accept Header (required)
     * @param  string $invoice_id (required)
     * @param  string $invoice_history_id (required)
     * @param  string $invoice_line_id (required)
     * @param  bool $jiwa_stateful Stateful indicator (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function salesOrderLineDetailsGETManyRequestInvoiceIDHistorysInvoiceHistoryIDLinesInvoiceLineIDLineDetailsGetAsync($accept, $invoice_id, $invoice_history_id, $invoice_line_id, $jiwa_stateful = null)
    {
        return $this->salesOrderLineDetailsGETManyRequestInvoiceIDHistorysInvoiceHistoryIDLinesInvoiceLineIDLineDetailsGetAsyncWithHttpInfo($accept, $invoice_id, $invoice_history_id, $invoice_line_id, $jiwa_stateful)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation salesOrderLineDetailsGETManyRequestInvoiceIDHistorysInvoiceHistoryIDLinesInvoiceLineIDLineDetailsGetAsyncWithHttpInfo
     *
     * Retrieves a list of line details for a sales order line.
     *
     * @param  string $accept Accept Header (required)
     * @param  string $invoice_id (required)
     * @param  string $invoice_history_id (required)
     * @param  string $invoice_line_id (required)
     * @param  bool $jiwa_stateful Stateful indicator (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function salesOrderLineDetailsGETManyRequestInvoiceIDHistorysInvoiceHistoryIDLinesInvoiceLineIDLineDetailsGetAsyncWithHttpInfo($accept, $invoice_id, $invoice_history_id, $invoice_line_id, $jiwa_stateful = null)
    {
        $returnType = '\Jiwa\Model\SalesOrderLineDetail[]';
        $request = $this->salesOrderLineDetailsGETManyRequestInvoiceIDHistorysInvoiceHistoryIDLinesInvoiceLineIDLineDetailsGetRequest($accept, $invoice_id, $invoice_history_id, $invoice_line_id, $jiwa_stateful);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'salesOrderLineDetailsGETManyRequestInvoiceIDHistorysInvoiceHistoryIDLinesInvoiceLineIDLineDetailsGet'
     *
     * @param  string $accept Accept Header (required)
     * @param  string $invoice_id (required)
     * @param  string $invoice_history_id (required)
     * @param  string $invoice_line_id (required)
     * @param  bool $jiwa_stateful Stateful indicator (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function salesOrderLineDetailsGETManyRequestInvoiceIDHistorysInvoiceHistoryIDLinesInvoiceLineIDLineDetailsGetRequest($accept, $invoice_id, $invoice_history_id, $invoice_line_id, $jiwa_stateful = null)
    {
        // verify the required parameter 'accept' is set
        if ($accept === null || (is_array($accept) && count($accept) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $accept when calling salesOrderLineDetailsGETManyRequestInvoiceIDHistorysInvoiceHistoryIDLinesInvoiceLineIDLineDetailsGet'
            );
        }
        // verify the required parameter 'invoice_id' is set
        if ($invoice_id === null || (is_array($invoice_id) && count($invoice_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $invoice_id when calling salesOrderLineDetailsGETManyRequestInvoiceIDHistorysInvoiceHistoryIDLinesInvoiceLineIDLineDetailsGet'
            );
        }
        // verify the required parameter 'invoice_history_id' is set
        if ($invoice_history_id === null || (is_array($invoice_history_id) && count($invoice_history_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $invoice_history_id when calling salesOrderLineDetailsGETManyRequestInvoiceIDHistorysInvoiceHistoryIDLinesInvoiceLineIDLineDetailsGet'
            );
        }
        // verify the required parameter 'invoice_line_id' is set
        if ($invoice_line_id === null || (is_array($invoice_line_id) && count($invoice_line_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $invoice_line_id when calling salesOrderLineDetailsGETManyRequestInvoiceIDHistorysInvoiceHistoryIDLinesInvoiceLineIDLineDetailsGet'
            );
        }

        $resourcePath = '/SalesOrders/{InvoiceID}/Historys/{InvoiceHistoryID}/Lines/{InvoiceLineID}/LineDetails';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // header params
        if ($accept !== null) {
            $headerParams['Accept'] = ObjectSerializer::toHeaderValue($accept);
        }
        // header params
        if ($jiwa_stateful !== null) {
            $headerParams['jiwa-stateful'] = ObjectSerializer::toHeaderValue($jiwa_stateful);
        }

        // path params
        if ($invoice_id !== null) {
            $resourcePath = str_replace(
                '{' . 'InvoiceID' . '}',
                ObjectSerializer::toPathValue($invoice_id),
                $resourcePath
            );
        }
        // path params
        if ($invoice_history_id !== null) {
            $resourcePath = str_replace(
                '{' . 'InvoiceHistoryID' . '}',
                ObjectSerializer::toPathValue($invoice_history_id),
                $resourcePath
            );
        }
        // path params
        if ($invoice_line_id !== null) {
            $resourcePath = str_replace(
                '{' . 'InvoiceLineID' . '}',
                ObjectSerializer::toPathValue($invoice_line_id),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json', 'application/xml']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json', 'application/xml'],
                ['application/x-www-form-urlencoded', 'application/json', 'application/xml']
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            
            if($headers['Content-Type'] === 'application/json') {
                // \stdClass has no __toString(), so we should encode it manually
                if ($httpBody instanceof \stdClass) {
                    $httpBody = \GuzzleHttp\json_encode($httpBody);
                }
                // array has no __toString(), so we should encode it manually
                if(is_array($httpBody)) {
                    $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($httpBody));
                }
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\Query::build($formParams);
            }
        }

        // this endpoint requires HTTP basic authentication
        if ($this->config->getUsername() !== null || $this->config->getPassword() !== null) {
            $headers['Authorization'] = 'Basic ' . base64_encode($this->config->getUsername() . ":" . $this->config->getPassword());
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\Query::build($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation salesOrderLineGETRequestInvoiceIDHistorysInvoiceHistoryIDLinesInvoiceLineIDGet
     *
     * Retrieves a sales order line.
     *
     * @param  string $accept Accept Header (required)
     * @param  string $invoice_id invoice_id (required)
     * @param  string $invoice_history_id invoice_history_id (required)
     * @param  string $invoice_line_id invoice_line_id (required)
     * @param  bool $jiwa_stateful Stateful indicator (optional)
     *
     * @throws \Jiwa\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Jiwa\Model\SalesOrderLine
     */
    public function salesOrderLineGETRequestInvoiceIDHistorysInvoiceHistoryIDLinesInvoiceLineIDGet($accept, $invoice_id, $invoice_history_id, $invoice_line_id, $jiwa_stateful = null)
    {
        list($response) = $this->salesOrderLineGETRequestInvoiceIDHistorysInvoiceHistoryIDLinesInvoiceLineIDGetWithHttpInfo($accept, $invoice_id, $invoice_history_id, $invoice_line_id, $jiwa_stateful);
        return $response;
    }

    /**
     * Operation salesOrderLineGETRequestInvoiceIDHistorysInvoiceHistoryIDLinesInvoiceLineIDGetWithHttpInfo
     *
     * Retrieves a sales order line.
     *
     * @param  string $accept Accept Header (required)
     * @param  string $invoice_id (required)
     * @param  string $invoice_history_id (required)
     * @param  string $invoice_line_id (required)
     * @param  bool $jiwa_stateful Stateful indicator (optional)
     *
     * @throws \Jiwa\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Jiwa\Model\SalesOrderLine, HTTP status code, HTTP response headers (array of strings)
     */
    public function salesOrderLineGETRequestInvoiceIDHistorysInvoiceHistoryIDLinesInvoiceLineIDGetWithHttpInfo($accept, $invoice_id, $invoice_history_id, $invoice_line_id, $jiwa_stateful = null)
    {
        $returnType = '\Jiwa\Model\SalesOrderLine';
        $request = $this->salesOrderLineGETRequestInvoiceIDHistorysInvoiceHistoryIDLinesInvoiceLineIDGetRequest($accept, $invoice_id, $invoice_history_id, $invoice_line_id, $jiwa_stateful);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Jiwa\Model\SalesOrderLine',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 401:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Jiwa\Model\SalesOrderLine',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 404:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Jiwa\Model\SalesOrderLine',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 403:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Jiwa\Model\SalesOrderLine',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation salesOrderLineGETRequestInvoiceIDHistorysInvoiceHistoryIDLinesInvoiceLineIDGetAsync
     *
     * Retrieves a sales order line.
     *
     * @param  string $accept Accept Header (required)
     * @param  string $invoice_id (required)
     * @param  string $invoice_history_id (required)
     * @param  string $invoice_line_id (required)
     * @param  bool $jiwa_stateful Stateful indicator (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function salesOrderLineGETRequestInvoiceIDHistorysInvoiceHistoryIDLinesInvoiceLineIDGetAsync($accept, $invoice_id, $invoice_history_id, $invoice_line_id, $jiwa_stateful = null)
    {
        return $this->salesOrderLineGETRequestInvoiceIDHistorysInvoiceHistoryIDLinesInvoiceLineIDGetAsyncWithHttpInfo($accept, $invoice_id, $invoice_history_id, $invoice_line_id, $jiwa_stateful)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation salesOrderLineGETRequestInvoiceIDHistorysInvoiceHistoryIDLinesInvoiceLineIDGetAsyncWithHttpInfo
     *
     * Retrieves a sales order line.
     *
     * @param  string $accept Accept Header (required)
     * @param  string $invoice_id (required)
     * @param  string $invoice_history_id (required)
     * @param  string $invoice_line_id (required)
     * @param  bool $jiwa_stateful Stateful indicator (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function salesOrderLineGETRequestInvoiceIDHistorysInvoiceHistoryIDLinesInvoiceLineIDGetAsyncWithHttpInfo($accept, $invoice_id, $invoice_history_id, $invoice_line_id, $jiwa_stateful = null)
    {
        $returnType = '\Jiwa\Model\SalesOrderLine';
        $request = $this->salesOrderLineGETRequestInvoiceIDHistorysInvoiceHistoryIDLinesInvoiceLineIDGetRequest($accept, $invoice_id, $invoice_history_id, $invoice_line_id, $jiwa_stateful);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'salesOrderLineGETRequestInvoiceIDHistorysInvoiceHistoryIDLinesInvoiceLineIDGet'
     *
     * @param  string $accept Accept Header (required)
     * @param  string $invoice_id (required)
     * @param  string $invoice_history_id (required)
     * @param  string $invoice_line_id (required)
     * @param  bool $jiwa_stateful Stateful indicator (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function salesOrderLineGETRequestInvoiceIDHistorysInvoiceHistoryIDLinesInvoiceLineIDGetRequest($accept, $invoice_id, $invoice_history_id, $invoice_line_id, $jiwa_stateful = null)
    {
        // verify the required parameter 'accept' is set
        if ($accept === null || (is_array($accept) && count($accept) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $accept when calling salesOrderLineGETRequestInvoiceIDHistorysInvoiceHistoryIDLinesInvoiceLineIDGet'
            );
        }
        // verify the required parameter 'invoice_id' is set
        if ($invoice_id === null || (is_array($invoice_id) && count($invoice_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $invoice_id when calling salesOrderLineGETRequestInvoiceIDHistorysInvoiceHistoryIDLinesInvoiceLineIDGet'
            );
        }
        // verify the required parameter 'invoice_history_id' is set
        if ($invoice_history_id === null || (is_array($invoice_history_id) && count($invoice_history_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $invoice_history_id when calling salesOrderLineGETRequestInvoiceIDHistorysInvoiceHistoryIDLinesInvoiceLineIDGet'
            );
        }
        // verify the required parameter 'invoice_line_id' is set
        if ($invoice_line_id === null || (is_array($invoice_line_id) && count($invoice_line_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $invoice_line_id when calling salesOrderLineGETRequestInvoiceIDHistorysInvoiceHistoryIDLinesInvoiceLineIDGet'
            );
        }

        $resourcePath = '/SalesOrders/{InvoiceID}/Historys/{InvoiceHistoryID}/Lines/{InvoiceLineID}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // header params
        if ($accept !== null) {
            $headerParams['Accept'] = ObjectSerializer::toHeaderValue($accept);
        }
        // header params
        if ($jiwa_stateful !== null) {
            $headerParams['jiwa-stateful'] = ObjectSerializer::toHeaderValue($jiwa_stateful);
        }

        // path params
        if ($invoice_id !== null) {
            $resourcePath = str_replace(
                '{' . 'InvoiceID' . '}',
                ObjectSerializer::toPathValue($invoice_id),
                $resourcePath
            );
        }
        // path params
        if ($invoice_history_id !== null) {
            $resourcePath = str_replace(
                '{' . 'InvoiceHistoryID' . '}',
                ObjectSerializer::toPathValue($invoice_history_id),
                $resourcePath
            );
        }
        // path params
        if ($invoice_line_id !== null) {
            $resourcePath = str_replace(
                '{' . 'InvoiceLineID' . '}',
                ObjectSerializer::toPathValue($invoice_line_id),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json', 'application/xml']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json', 'application/xml'],
                ['application/x-www-form-urlencoded', 'application/json', 'application/xml']
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            
            if($headers['Content-Type'] === 'application/json') {
                // \stdClass has no __toString(), so we should encode it manually
                if ($httpBody instanceof \stdClass) {
                    $httpBody = \GuzzleHttp\json_encode($httpBody);
                }
                // array has no __toString(), so we should encode it manually
                if(is_array($httpBody)) {
                    $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($httpBody));
                }
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\Query::build($formParams);
            }
        }

        // this endpoint requires HTTP basic authentication
        if ($this->config->getUsername() !== null || $this->config->getPassword() !== null) {
            $headers['Authorization'] = 'Basic ' . base64_encode($this->config->getUsername() . ":" . $this->config->getPassword());
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\Query::build($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation salesOrderLinePATCHRequestInvoiceIDHistorysInvoiceHistoryIDLinesInvoiceLineIDUpdate
     *
     * Updates a sales order line.
     *
     * @param  string $accept Accept Header (required)
     * @param  string $invoice_id invoice_id (required)
     * @param  string $invoice_history_id invoice_history_id (required)
     * @param  string $invoice_line_id invoice_line_id (required)
     * @param  bool $jiwa_stateful Stateful indicator (optional)
     * @param  int $item_no item_no (optional)
     * @param  bool $comment_line comment_line (optional)
     * @param  double $quantity_ordered quantity_ordered (optional)
     * @param  double $quantity_demand quantity_demand (optional)
     * @param  double $quantity_this_del quantity_this_del (optional)
     * @param  double $quantity_back_ord quantity_back_ord (optional)
     * @param  bool $picked picked (optional)
     * @param  double $price_ex_gst price_ex_gst (optional)
     * @param  double $price_inc_gst price_inc_gst (optional)
     * @param  double $discounted_price discounted_price (optional)
     * @param  double $tax_to_charge tax_to_charge (optional)
     * @param  string $tax_rate tax_rate (optional)
     * @param  double $unit_cost unit_cost (optional)
     * @param  bool $fix_sell_price fix_sell_price (optional)
     * @param  bool $fix_price fix_price (optional)
     * @param  double $user_defined_float1 user_defined_float1 (optional)
     * @param  double $user_defined_float2 user_defined_float2 (optional)
     * @param  double $user_defined_float3 user_defined_float3 (optional)
     * @param  \DateTime $forward_order_date forward_order_date (optional)
     * @param  \DateTime $scheduled_date scheduled_date (optional)
     * @param  double $line_total line_total (optional)
     * @param  double $weight weight (optional)
     * @param  double $cubic cubic (optional)
     * @param  double $quoted_discounted_price quoted_discounted_price (optional)
     * @param  double $quoted_discount_percentage quoted_discount_percentage (optional)
     * @param  double $discounted_percentage discounted_percentage (optional)
     * @param  double $discount_given discount_given (optional)
     * @param  double $quantity_decimal_places quantity_decimal_places (optional)
     * @param  double $quantity_original_ordered quantity_original_ordered (optional)
     * @param  string $sales_order_serial_stock_selection_types sales_order_serial_stock_selection_types (optional)
     * @param  bool $non_inventory non_inventory (optional)
     * @param  string $inventory_id inventory_id (optional)
     * @param  string $part_no part_no (optional)
     * @param  string $description description (optional)
     * @param  string $comment_text comment_text (optional)
     * @param  string $aux2 aux2 (optional)
     * @param  string $line_link_id line_link_id (optional)
     * @param  string $edi_store_location_code edi_store_location_code (optional)
     * @param  string $edidc_location_code edidc_location_code (optional)
     * @param  string $cost_center cost_center (optional)
     * @param  string $stage stage (optional)
     * @param  string $custom_field_values custom_field_values (optional)
     * @param  string $line_details line_details (optional)
     * @param  string $shipping_labels shipping_labels (optional)
     * @param  string $unit_of_measure unit_of_measure (optional)
     * @param  string $kit_line_type kit_line_type (optional)
     * @param  double $kit_units kit_units (optional)
     * @param  string $kit_header_line_id kit_header_line_id (optional)
     * @param  \Jiwa\Model\SalesOrderLinePATCHRequest $body body (optional)
     *
     * @throws \Jiwa\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Jiwa\Model\SalesOrderLine
     */
    public function salesOrderLinePATCHRequestInvoiceIDHistorysInvoiceHistoryIDLinesInvoiceLineIDUpdate($accept, $invoice_id, $invoice_history_id, $invoice_line_id, $jiwa_stateful = null, $item_no = null, $comment_line = null, $quantity_ordered = null, $quantity_demand = null, $quantity_this_del = null, $quantity_back_ord = null, $picked = null, $price_ex_gst = null, $price_inc_gst = null, $discounted_price = null, $tax_to_charge = null, $tax_rate = null, $unit_cost = null, $fix_sell_price = null, $fix_price = null, $user_defined_float1 = null, $user_defined_float2 = null, $user_defined_float3 = null, $forward_order_date = null, $scheduled_date = null, $line_total = null, $weight = null, $cubic = null, $quoted_discounted_price = null, $quoted_discount_percentage = null, $discounted_percentage = null, $discount_given = null, $quantity_decimal_places = null, $quantity_original_ordered = null, $sales_order_serial_stock_selection_types = null, $non_inventory = null, $inventory_id = null, $part_no = null, $description = null, $comment_text = null, $aux2 = null, $line_link_id = null, $edi_store_location_code = null, $edidc_location_code = null, $cost_center = null, $stage = null, $custom_field_values = null, $line_details = null, $shipping_labels = null, $unit_of_measure = null, $kit_line_type = null, $kit_units = null, $kit_header_line_id = null, $body = null)
    {
        list($response) = $this->salesOrderLinePATCHRequestInvoiceIDHistorysInvoiceHistoryIDLinesInvoiceLineIDUpdateWithHttpInfo($accept, $invoice_id, $invoice_history_id, $invoice_line_id, $jiwa_stateful, $item_no, $comment_line, $quantity_ordered, $quantity_demand, $quantity_this_del, $quantity_back_ord, $picked, $price_ex_gst, $price_inc_gst, $discounted_price, $tax_to_charge, $tax_rate, $unit_cost, $fix_sell_price, $fix_price, $user_defined_float1, $user_defined_float2, $user_defined_float3, $forward_order_date, $scheduled_date, $line_total, $weight, $cubic, $quoted_discounted_price, $quoted_discount_percentage, $discounted_percentage, $discount_given, $quantity_decimal_places, $quantity_original_ordered, $sales_order_serial_stock_selection_types, $non_inventory, $inventory_id, $part_no, $description, $comment_text, $aux2, $line_link_id, $edi_store_location_code, $edidc_location_code, $cost_center, $stage, $custom_field_values, $line_details, $shipping_labels, $unit_of_measure, $kit_line_type, $kit_units, $kit_header_line_id, $body);
        return $response;
    }

    /**
     * Operation salesOrderLinePATCHRequestInvoiceIDHistorysInvoiceHistoryIDLinesInvoiceLineIDUpdateWithHttpInfo
     *
     * Updates a sales order line.
     *
     * @param  string $accept Accept Header (required)
     * @param  string $invoice_id (required)
     * @param  string $invoice_history_id (required)
     * @param  string $invoice_line_id (required)
     * @param  bool $jiwa_stateful Stateful indicator (optional)
     * @param  int $item_no (optional)
     * @param  bool $comment_line (optional)
     * @param  double $quantity_ordered (optional)
     * @param  double $quantity_demand (optional)
     * @param  double $quantity_this_del (optional)
     * @param  double $quantity_back_ord (optional)
     * @param  bool $picked (optional)
     * @param  double $price_ex_gst (optional)
     * @param  double $price_inc_gst (optional)
     * @param  double $discounted_price (optional)
     * @param  double $tax_to_charge (optional)
     * @param  string $tax_rate (optional)
     * @param  double $unit_cost (optional)
     * @param  bool $fix_sell_price (optional)
     * @param  bool $fix_price (optional)
     * @param  double $user_defined_float1 (optional)
     * @param  double $user_defined_float2 (optional)
     * @param  double $user_defined_float3 (optional)
     * @param  \DateTime $forward_order_date (optional)
     * @param  \DateTime $scheduled_date (optional)
     * @param  double $line_total (optional)
     * @param  double $weight (optional)
     * @param  double $cubic (optional)
     * @param  double $quoted_discounted_price (optional)
     * @param  double $quoted_discount_percentage (optional)
     * @param  double $discounted_percentage (optional)
     * @param  double $discount_given (optional)
     * @param  double $quantity_decimal_places (optional)
     * @param  double $quantity_original_ordered (optional)
     * @param  string $sales_order_serial_stock_selection_types (optional)
     * @param  bool $non_inventory (optional)
     * @param  string $inventory_id (optional)
     * @param  string $part_no (optional)
     * @param  string $description (optional)
     * @param  string $comment_text (optional)
     * @param  string $aux2 (optional)
     * @param  string $line_link_id (optional)
     * @param  string $edi_store_location_code (optional)
     * @param  string $edidc_location_code (optional)
     * @param  string $cost_center (optional)
     * @param  string $stage (optional)
     * @param  string $custom_field_values (optional)
     * @param  string $line_details (optional)
     * @param  string $shipping_labels (optional)
     * @param  string $unit_of_measure (optional)
     * @param  string $kit_line_type (optional)
     * @param  double $kit_units (optional)
     * @param  string $kit_header_line_id (optional)
     * @param  \Jiwa\Model\SalesOrderLinePATCHRequest $body (optional)
     *
     * @throws \Jiwa\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Jiwa\Model\SalesOrderLine, HTTP status code, HTTP response headers (array of strings)
     */
    public function salesOrderLinePATCHRequestInvoiceIDHistorysInvoiceHistoryIDLinesInvoiceLineIDUpdateWithHttpInfo($accept, $invoice_id, $invoice_history_id, $invoice_line_id, $jiwa_stateful = null, $item_no = null, $comment_line = null, $quantity_ordered = null, $quantity_demand = null, $quantity_this_del = null, $quantity_back_ord = null, $picked = null, $price_ex_gst = null, $price_inc_gst = null, $discounted_price = null, $tax_to_charge = null, $tax_rate = null, $unit_cost = null, $fix_sell_price = null, $fix_price = null, $user_defined_float1 = null, $user_defined_float2 = null, $user_defined_float3 = null, $forward_order_date = null, $scheduled_date = null, $line_total = null, $weight = null, $cubic = null, $quoted_discounted_price = null, $quoted_discount_percentage = null, $discounted_percentage = null, $discount_given = null, $quantity_decimal_places = null, $quantity_original_ordered = null, $sales_order_serial_stock_selection_types = null, $non_inventory = null, $inventory_id = null, $part_no = null, $description = null, $comment_text = null, $aux2 = null, $line_link_id = null, $edi_store_location_code = null, $edidc_location_code = null, $cost_center = null, $stage = null, $custom_field_values = null, $line_details = null, $shipping_labels = null, $unit_of_measure = null, $kit_line_type = null, $kit_units = null, $kit_header_line_id = null, $body = null)
    {
        $returnType = '\Jiwa\Model\SalesOrderLine';
        $request = $this->salesOrderLinePATCHRequestInvoiceIDHistorysInvoiceHistoryIDLinesInvoiceLineIDUpdateRequest($accept, $invoice_id, $invoice_history_id, $invoice_line_id, $jiwa_stateful, $item_no, $comment_line, $quantity_ordered, $quantity_demand, $quantity_this_del, $quantity_back_ord, $picked, $price_ex_gst, $price_inc_gst, $discounted_price, $tax_to_charge, $tax_rate, $unit_cost, $fix_sell_price, $fix_price, $user_defined_float1, $user_defined_float2, $user_defined_float3, $forward_order_date, $scheduled_date, $line_total, $weight, $cubic, $quoted_discounted_price, $quoted_discount_percentage, $discounted_percentage, $discount_given, $quantity_decimal_places, $quantity_original_ordered, $sales_order_serial_stock_selection_types, $non_inventory, $inventory_id, $part_no, $description, $comment_text, $aux2, $line_link_id, $edi_store_location_code, $edidc_location_code, $cost_center, $stage, $custom_field_values, $line_details, $shipping_labels, $unit_of_measure, $kit_line_type, $kit_units, $kit_header_line_id, $body);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Jiwa\Model\SalesOrderLine',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 403:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Jiwa\Model\SalesOrderLine',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 401:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Jiwa\Model\SalesOrderLine',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 404:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Jiwa\Model\SalesOrderLine',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation salesOrderLinePATCHRequestInvoiceIDHistorysInvoiceHistoryIDLinesInvoiceLineIDUpdateAsync
     *
     * Updates a sales order line.
     *
     * @param  string $accept Accept Header (required)
     * @param  string $invoice_id (required)
     * @param  string $invoice_history_id (required)
     * @param  string $invoice_line_id (required)
     * @param  bool $jiwa_stateful Stateful indicator (optional)
     * @param  int $item_no (optional)
     * @param  bool $comment_line (optional)
     * @param  double $quantity_ordered (optional)
     * @param  double $quantity_demand (optional)
     * @param  double $quantity_this_del (optional)
     * @param  double $quantity_back_ord (optional)
     * @param  bool $picked (optional)
     * @param  double $price_ex_gst (optional)
     * @param  double $price_inc_gst (optional)
     * @param  double $discounted_price (optional)
     * @param  double $tax_to_charge (optional)
     * @param  string $tax_rate (optional)
     * @param  double $unit_cost (optional)
     * @param  bool $fix_sell_price (optional)
     * @param  bool $fix_price (optional)
     * @param  double $user_defined_float1 (optional)
     * @param  double $user_defined_float2 (optional)
     * @param  double $user_defined_float3 (optional)
     * @param  \DateTime $forward_order_date (optional)
     * @param  \DateTime $scheduled_date (optional)
     * @param  double $line_total (optional)
     * @param  double $weight (optional)
     * @param  double $cubic (optional)
     * @param  double $quoted_discounted_price (optional)
     * @param  double $quoted_discount_percentage (optional)
     * @param  double $discounted_percentage (optional)
     * @param  double $discount_given (optional)
     * @param  double $quantity_decimal_places (optional)
     * @param  double $quantity_original_ordered (optional)
     * @param  string $sales_order_serial_stock_selection_types (optional)
     * @param  bool $non_inventory (optional)
     * @param  string $inventory_id (optional)
     * @param  string $part_no (optional)
     * @param  string $description (optional)
     * @param  string $comment_text (optional)
     * @param  string $aux2 (optional)
     * @param  string $line_link_id (optional)
     * @param  string $edi_store_location_code (optional)
     * @param  string $edidc_location_code (optional)
     * @param  string $cost_center (optional)
     * @param  string $stage (optional)
     * @param  string $custom_field_values (optional)
     * @param  string $line_details (optional)
     * @param  string $shipping_labels (optional)
     * @param  string $unit_of_measure (optional)
     * @param  string $kit_line_type (optional)
     * @param  double $kit_units (optional)
     * @param  string $kit_header_line_id (optional)
     * @param  \Jiwa\Model\SalesOrderLinePATCHRequest $body (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function salesOrderLinePATCHRequestInvoiceIDHistorysInvoiceHistoryIDLinesInvoiceLineIDUpdateAsync($accept, $invoice_id, $invoice_history_id, $invoice_line_id, $jiwa_stateful = null, $item_no = null, $comment_line = null, $quantity_ordered = null, $quantity_demand = null, $quantity_this_del = null, $quantity_back_ord = null, $picked = null, $price_ex_gst = null, $price_inc_gst = null, $discounted_price = null, $tax_to_charge = null, $tax_rate = null, $unit_cost = null, $fix_sell_price = null, $fix_price = null, $user_defined_float1 = null, $user_defined_float2 = null, $user_defined_float3 = null, $forward_order_date = null, $scheduled_date = null, $line_total = null, $weight = null, $cubic = null, $quoted_discounted_price = null, $quoted_discount_percentage = null, $discounted_percentage = null, $discount_given = null, $quantity_decimal_places = null, $quantity_original_ordered = null, $sales_order_serial_stock_selection_types = null, $non_inventory = null, $inventory_id = null, $part_no = null, $description = null, $comment_text = null, $aux2 = null, $line_link_id = null, $edi_store_location_code = null, $edidc_location_code = null, $cost_center = null, $stage = null, $custom_field_values = null, $line_details = null, $shipping_labels = null, $unit_of_measure = null, $kit_line_type = null, $kit_units = null, $kit_header_line_id = null, $body = null)
    {
        return $this->salesOrderLinePATCHRequestInvoiceIDHistorysInvoiceHistoryIDLinesInvoiceLineIDUpdateAsyncWithHttpInfo($accept, $invoice_id, $invoice_history_id, $invoice_line_id, $jiwa_stateful, $item_no, $comment_line, $quantity_ordered, $quantity_demand, $quantity_this_del, $quantity_back_ord, $picked, $price_ex_gst, $price_inc_gst, $discounted_price, $tax_to_charge, $tax_rate, $unit_cost, $fix_sell_price, $fix_price, $user_defined_float1, $user_defined_float2, $user_defined_float3, $forward_order_date, $scheduled_date, $line_total, $weight, $cubic, $quoted_discounted_price, $quoted_discount_percentage, $discounted_percentage, $discount_given, $quantity_decimal_places, $quantity_original_ordered, $sales_order_serial_stock_selection_types, $non_inventory, $inventory_id, $part_no, $description, $comment_text, $aux2, $line_link_id, $edi_store_location_code, $edidc_location_code, $cost_center, $stage, $custom_field_values, $line_details, $shipping_labels, $unit_of_measure, $kit_line_type, $kit_units, $kit_header_line_id, $body)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation salesOrderLinePATCHRequestInvoiceIDHistorysInvoiceHistoryIDLinesInvoiceLineIDUpdateAsyncWithHttpInfo
     *
     * Updates a sales order line.
     *
     * @param  string $accept Accept Header (required)
     * @param  string $invoice_id (required)
     * @param  string $invoice_history_id (required)
     * @param  string $invoice_line_id (required)
     * @param  bool $jiwa_stateful Stateful indicator (optional)
     * @param  int $item_no (optional)
     * @param  bool $comment_line (optional)
     * @param  double $quantity_ordered (optional)
     * @param  double $quantity_demand (optional)
     * @param  double $quantity_this_del (optional)
     * @param  double $quantity_back_ord (optional)
     * @param  bool $picked (optional)
     * @param  double $price_ex_gst (optional)
     * @param  double $price_inc_gst (optional)
     * @param  double $discounted_price (optional)
     * @param  double $tax_to_charge (optional)
     * @param  string $tax_rate (optional)
     * @param  double $unit_cost (optional)
     * @param  bool $fix_sell_price (optional)
     * @param  bool $fix_price (optional)
     * @param  double $user_defined_float1 (optional)
     * @param  double $user_defined_float2 (optional)
     * @param  double $user_defined_float3 (optional)
     * @param  \DateTime $forward_order_date (optional)
     * @param  \DateTime $scheduled_date (optional)
     * @param  double $line_total (optional)
     * @param  double $weight (optional)
     * @param  double $cubic (optional)
     * @param  double $quoted_discounted_price (optional)
     * @param  double $quoted_discount_percentage (optional)
     * @param  double $discounted_percentage (optional)
     * @param  double $discount_given (optional)
     * @param  double $quantity_decimal_places (optional)
     * @param  double $quantity_original_ordered (optional)
     * @param  string $sales_order_serial_stock_selection_types (optional)
     * @param  bool $non_inventory (optional)
     * @param  string $inventory_id (optional)
     * @param  string $part_no (optional)
     * @param  string $description (optional)
     * @param  string $comment_text (optional)
     * @param  string $aux2 (optional)
     * @param  string $line_link_id (optional)
     * @param  string $edi_store_location_code (optional)
     * @param  string $edidc_location_code (optional)
     * @param  string $cost_center (optional)
     * @param  string $stage (optional)
     * @param  string $custom_field_values (optional)
     * @param  string $line_details (optional)
     * @param  string $shipping_labels (optional)
     * @param  string $unit_of_measure (optional)
     * @param  string $kit_line_type (optional)
     * @param  double $kit_units (optional)
     * @param  string $kit_header_line_id (optional)
     * @param  \Jiwa\Model\SalesOrderLinePATCHRequest $body (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function salesOrderLinePATCHRequestInvoiceIDHistorysInvoiceHistoryIDLinesInvoiceLineIDUpdateAsyncWithHttpInfo($accept, $invoice_id, $invoice_history_id, $invoice_line_id, $jiwa_stateful = null, $item_no = null, $comment_line = null, $quantity_ordered = null, $quantity_demand = null, $quantity_this_del = null, $quantity_back_ord = null, $picked = null, $price_ex_gst = null, $price_inc_gst = null, $discounted_price = null, $tax_to_charge = null, $tax_rate = null, $unit_cost = null, $fix_sell_price = null, $fix_price = null, $user_defined_float1 = null, $user_defined_float2 = null, $user_defined_float3 = null, $forward_order_date = null, $scheduled_date = null, $line_total = null, $weight = null, $cubic = null, $quoted_discounted_price = null, $quoted_discount_percentage = null, $discounted_percentage = null, $discount_given = null, $quantity_decimal_places = null, $quantity_original_ordered = null, $sales_order_serial_stock_selection_types = null, $non_inventory = null, $inventory_id = null, $part_no = null, $description = null, $comment_text = null, $aux2 = null, $line_link_id = null, $edi_store_location_code = null, $edidc_location_code = null, $cost_center = null, $stage = null, $custom_field_values = null, $line_details = null, $shipping_labels = null, $unit_of_measure = null, $kit_line_type = null, $kit_units = null, $kit_header_line_id = null, $body = null)
    {
        $returnType = '\Jiwa\Model\SalesOrderLine';
        $request = $this->salesOrderLinePATCHRequestInvoiceIDHistorysInvoiceHistoryIDLinesInvoiceLineIDUpdateRequest($accept, $invoice_id, $invoice_history_id, $invoice_line_id, $jiwa_stateful, $item_no, $comment_line, $quantity_ordered, $quantity_demand, $quantity_this_del, $quantity_back_ord, $picked, $price_ex_gst, $price_inc_gst, $discounted_price, $tax_to_charge, $tax_rate, $unit_cost, $fix_sell_price, $fix_price, $user_defined_float1, $user_defined_float2, $user_defined_float3, $forward_order_date, $scheduled_date, $line_total, $weight, $cubic, $quoted_discounted_price, $quoted_discount_percentage, $discounted_percentage, $discount_given, $quantity_decimal_places, $quantity_original_ordered, $sales_order_serial_stock_selection_types, $non_inventory, $inventory_id, $part_no, $description, $comment_text, $aux2, $line_link_id, $edi_store_location_code, $edidc_location_code, $cost_center, $stage, $custom_field_values, $line_details, $shipping_labels, $unit_of_measure, $kit_line_type, $kit_units, $kit_header_line_id, $body);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'salesOrderLinePATCHRequestInvoiceIDHistorysInvoiceHistoryIDLinesInvoiceLineIDUpdate'
     *
     * @param  string $accept Accept Header (required)
     * @param  string $invoice_id (required)
     * @param  string $invoice_history_id (required)
     * @param  string $invoice_line_id (required)
     * @param  bool $jiwa_stateful Stateful indicator (optional)
     * @param  int $item_no (optional)
     * @param  bool $comment_line (optional)
     * @param  double $quantity_ordered (optional)
     * @param  double $quantity_demand (optional)
     * @param  double $quantity_this_del (optional)
     * @param  double $quantity_back_ord (optional)
     * @param  bool $picked (optional)
     * @param  double $price_ex_gst (optional)
     * @param  double $price_inc_gst (optional)
     * @param  double $discounted_price (optional)
     * @param  double $tax_to_charge (optional)
     * @param  string $tax_rate (optional)
     * @param  double $unit_cost (optional)
     * @param  bool $fix_sell_price (optional)
     * @param  bool $fix_price (optional)
     * @param  double $user_defined_float1 (optional)
     * @param  double $user_defined_float2 (optional)
     * @param  double $user_defined_float3 (optional)
     * @param  \DateTime $forward_order_date (optional)
     * @param  \DateTime $scheduled_date (optional)
     * @param  double $line_total (optional)
     * @param  double $weight (optional)
     * @param  double $cubic (optional)
     * @param  double $quoted_discounted_price (optional)
     * @param  double $quoted_discount_percentage (optional)
     * @param  double $discounted_percentage (optional)
     * @param  double $discount_given (optional)
     * @param  double $quantity_decimal_places (optional)
     * @param  double $quantity_original_ordered (optional)
     * @param  string $sales_order_serial_stock_selection_types (optional)
     * @param  bool $non_inventory (optional)
     * @param  string $inventory_id (optional)
     * @param  string $part_no (optional)
     * @param  string $description (optional)
     * @param  string $comment_text (optional)
     * @param  string $aux2 (optional)
     * @param  string $line_link_id (optional)
     * @param  string $edi_store_location_code (optional)
     * @param  string $edidc_location_code (optional)
     * @param  string $cost_center (optional)
     * @param  string $stage (optional)
     * @param  string $custom_field_values (optional)
     * @param  string $line_details (optional)
     * @param  string $shipping_labels (optional)
     * @param  string $unit_of_measure (optional)
     * @param  string $kit_line_type (optional)
     * @param  double $kit_units (optional)
     * @param  string $kit_header_line_id (optional)
     * @param  \Jiwa\Model\SalesOrderLinePATCHRequest $body (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function salesOrderLinePATCHRequestInvoiceIDHistorysInvoiceHistoryIDLinesInvoiceLineIDUpdateRequest($accept, $invoice_id, $invoice_history_id, $invoice_line_id, $jiwa_stateful = null, $item_no = null, $comment_line = null, $quantity_ordered = null, $quantity_demand = null, $quantity_this_del = null, $quantity_back_ord = null, $picked = null, $price_ex_gst = null, $price_inc_gst = null, $discounted_price = null, $tax_to_charge = null, $tax_rate = null, $unit_cost = null, $fix_sell_price = null, $fix_price = null, $user_defined_float1 = null, $user_defined_float2 = null, $user_defined_float3 = null, $forward_order_date = null, $scheduled_date = null, $line_total = null, $weight = null, $cubic = null, $quoted_discounted_price = null, $quoted_discount_percentage = null, $discounted_percentage = null, $discount_given = null, $quantity_decimal_places = null, $quantity_original_ordered = null, $sales_order_serial_stock_selection_types = null, $non_inventory = null, $inventory_id = null, $part_no = null, $description = null, $comment_text = null, $aux2 = null, $line_link_id = null, $edi_store_location_code = null, $edidc_location_code = null, $cost_center = null, $stage = null, $custom_field_values = null, $line_details = null, $shipping_labels = null, $unit_of_measure = null, $kit_line_type = null, $kit_units = null, $kit_header_line_id = null, $body = null)
    {
        // verify the required parameter 'accept' is set
        if ($accept === null || (is_array($accept) && count($accept) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $accept when calling salesOrderLinePATCHRequestInvoiceIDHistorysInvoiceHistoryIDLinesInvoiceLineIDUpdate'
            );
        }
        // verify the required parameter 'invoice_id' is set
        if ($invoice_id === null || (is_array($invoice_id) && count($invoice_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $invoice_id when calling salesOrderLinePATCHRequestInvoiceIDHistorysInvoiceHistoryIDLinesInvoiceLineIDUpdate'
            );
        }
        // verify the required parameter 'invoice_history_id' is set
        if ($invoice_history_id === null || (is_array($invoice_history_id) && count($invoice_history_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $invoice_history_id when calling salesOrderLinePATCHRequestInvoiceIDHistorysInvoiceHistoryIDLinesInvoiceLineIDUpdate'
            );
        }
        // verify the required parameter 'invoice_line_id' is set
        if ($invoice_line_id === null || (is_array($invoice_line_id) && count($invoice_line_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $invoice_line_id when calling salesOrderLinePATCHRequestInvoiceIDHistorysInvoiceHistoryIDLinesInvoiceLineIDUpdate'
            );
        }

        $resourcePath = '/SalesOrders/{InvoiceID}/Historys/{InvoiceHistoryID}/Lines/{InvoiceLineID}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        if ($item_no !== null) {
            $queryParams['ItemNo'] = ObjectSerializer::toQueryValue($item_no);
        }
        // query params
        if ($comment_line !== null) {
            $queryParams['CommentLine'] = ObjectSerializer::toQueryValue($comment_line);
        }
        // query params
        if ($quantity_ordered !== null) {
            $queryParams['QuantityOrdered'] = ObjectSerializer::toQueryValue($quantity_ordered);
        }
        // query params
        if ($quantity_demand !== null) {
            $queryParams['QuantityDemand'] = ObjectSerializer::toQueryValue($quantity_demand);
        }
        // query params
        if ($quantity_this_del !== null) {
            $queryParams['QuantityThisDel'] = ObjectSerializer::toQueryValue($quantity_this_del);
        }
        // query params
        if ($quantity_back_ord !== null) {
            $queryParams['QuantityBackOrd'] = ObjectSerializer::toQueryValue($quantity_back_ord);
        }
        // query params
        if ($picked !== null) {
            $queryParams['Picked'] = ObjectSerializer::toQueryValue($picked);
        }
        // query params
        if ($price_ex_gst !== null) {
            $queryParams['PriceExGst'] = ObjectSerializer::toQueryValue($price_ex_gst);
        }
        // query params
        if ($price_inc_gst !== null) {
            $queryParams['PriceIncGst'] = ObjectSerializer::toQueryValue($price_inc_gst);
        }
        // query params
        if ($discounted_price !== null) {
            $queryParams['DiscountedPrice'] = ObjectSerializer::toQueryValue($discounted_price);
        }
        // query params
        if ($tax_to_charge !== null) {
            $queryParams['TaxToCharge'] = ObjectSerializer::toQueryValue($tax_to_charge);
        }
        // query params
        if ($tax_rate !== null) {
            $queryParams['TaxRate'] = ObjectSerializer::toQueryValue($tax_rate);
        }
        // query params
        if ($unit_cost !== null) {
            $queryParams['UnitCost'] = ObjectSerializer::toQueryValue($unit_cost);
        }
        // query params
        if ($fix_sell_price !== null) {
            $queryParams['FixSellPrice'] = ObjectSerializer::toQueryValue($fix_sell_price);
        }
        // query params
        if ($fix_price !== null) {
            $queryParams['FixPrice'] = ObjectSerializer::toQueryValue($fix_price);
        }
        // query params
        if ($user_defined_float1 !== null) {
            $queryParams['UserDefinedFloat1'] = ObjectSerializer::toQueryValue($user_defined_float1);
        }
        // query params
        if ($user_defined_float2 !== null) {
            $queryParams['UserDefinedFloat2'] = ObjectSerializer::toQueryValue($user_defined_float2);
        }
        // query params
        if ($user_defined_float3 !== null) {
            $queryParams['UserDefinedFloat3'] = ObjectSerializer::toQueryValue($user_defined_float3);
        }
        // query params
        if ($forward_order_date !== null) {
            $queryParams['ForwardOrderDate'] = ObjectSerializer::toQueryValue($forward_order_date);
        }
        // query params
        if ($scheduled_date !== null) {
            $queryParams['ScheduledDate'] = ObjectSerializer::toQueryValue($scheduled_date);
        }
        // query params
        if ($line_total !== null) {
            $queryParams['LineTotal'] = ObjectSerializer::toQueryValue($line_total);
        }
        // query params
        if ($weight !== null) {
            $queryParams['Weight'] = ObjectSerializer::toQueryValue($weight);
        }
        // query params
        if ($cubic !== null) {
            $queryParams['Cubic'] = ObjectSerializer::toQueryValue($cubic);
        }
        // query params
        if ($quoted_discounted_price !== null) {
            $queryParams['QuotedDiscountedPrice'] = ObjectSerializer::toQueryValue($quoted_discounted_price);
        }
        // query params
        if ($quoted_discount_percentage !== null) {
            $queryParams['QuotedDiscountPercentage'] = ObjectSerializer::toQueryValue($quoted_discount_percentage);
        }
        // query params
        if ($discounted_percentage !== null) {
            $queryParams['DiscountedPercentage'] = ObjectSerializer::toQueryValue($discounted_percentage);
        }
        // query params
        if ($discount_given !== null) {
            $queryParams['DiscountGiven'] = ObjectSerializer::toQueryValue($discount_given);
        }
        // query params
        if ($quantity_decimal_places !== null) {
            $queryParams['QuantityDecimalPlaces'] = ObjectSerializer::toQueryValue($quantity_decimal_places);
        }
        // query params
        if ($quantity_original_ordered !== null) {
            $queryParams['QuantityOriginalOrdered'] = ObjectSerializer::toQueryValue($quantity_original_ordered);
        }
        // query params
        if ($sales_order_serial_stock_selection_types !== null) {
            $queryParams['SalesOrderSerialStockSelectionTypes'] = ObjectSerializer::toQueryValue($sales_order_serial_stock_selection_types);
        }
        // query params
        if ($non_inventory !== null) {
            $queryParams['NonInventory'] = ObjectSerializer::toQueryValue($non_inventory);
        }
        // query params
        if ($inventory_id !== null) {
            $queryParams['InventoryID'] = ObjectSerializer::toQueryValue($inventory_id);
        }
        // query params
        if ($part_no !== null) {
            $queryParams['PartNo'] = ObjectSerializer::toQueryValue($part_no);
        }
        // query params
        if ($description !== null) {
            $queryParams['Description'] = ObjectSerializer::toQueryValue($description);
        }
        // query params
        if ($comment_text !== null) {
            $queryParams['CommentText'] = ObjectSerializer::toQueryValue($comment_text);
        }
        // query params
        if ($aux2 !== null) {
            $queryParams['Aux2'] = ObjectSerializer::toQueryValue($aux2);
        }
        // query params
        if ($line_link_id !== null) {
            $queryParams['LineLinkID'] = ObjectSerializer::toQueryValue($line_link_id);
        }
        // query params
        if ($edi_store_location_code !== null) {
            $queryParams['EDIStoreLocationCode'] = ObjectSerializer::toQueryValue($edi_store_location_code);
        }
        // query params
        if ($edidc_location_code !== null) {
            $queryParams['EDIDCLocationCode'] = ObjectSerializer::toQueryValue($edidc_location_code);
        }
        // query params
        if ($cost_center !== null) {
            $queryParams['CostCenter'] = ObjectSerializer::toQueryValue($cost_center);
        }
        // query params
        if ($stage !== null) {
            $queryParams['Stage'] = ObjectSerializer::toQueryValue($stage);
        }
        // query params
        if ($custom_field_values !== null) {
            $queryParams['CustomFieldValues'] = ObjectSerializer::toQueryValue($custom_field_values);
        }
        // query params
        if ($line_details !== null) {
            $queryParams['LineDetails'] = ObjectSerializer::toQueryValue($line_details);
        }
        // query params
        if ($shipping_labels !== null) {
            $queryParams['ShippingLabels'] = ObjectSerializer::toQueryValue($shipping_labels);
        }
        // query params
        if ($unit_of_measure !== null) {
            $queryParams['UnitOfMeasure'] = ObjectSerializer::toQueryValue($unit_of_measure);
        }
        // query params
        if ($kit_line_type !== null) {
            $queryParams['KitLineType'] = ObjectSerializer::toQueryValue($kit_line_type);
        }
        // query params
        if ($kit_units !== null) {
            $queryParams['KitUnits'] = ObjectSerializer::toQueryValue($kit_units);
        }
        // query params
        if ($kit_header_line_id !== null) {
            $queryParams['KitHeaderLineID'] = ObjectSerializer::toQueryValue($kit_header_line_id);
        }
        // header params
        if ($accept !== null) {
            $headerParams['Accept'] = ObjectSerializer::toHeaderValue($accept);
        }
        // header params
        if ($jiwa_stateful !== null) {
            $headerParams['jiwa-stateful'] = ObjectSerializer::toHeaderValue($jiwa_stateful);
        }

        // path params
        if ($invoice_id !== null) {
            $resourcePath = str_replace(
                '{' . 'InvoiceID' . '}',
                ObjectSerializer::toPathValue($invoice_id),
                $resourcePath
            );
        }
        // path params
        if ($invoice_history_id !== null) {
            $resourcePath = str_replace(
                '{' . 'InvoiceHistoryID' . '}',
                ObjectSerializer::toPathValue($invoice_history_id),
                $resourcePath
            );
        }
        // path params
        if ($invoice_line_id !== null) {
            $resourcePath = str_replace(
                '{' . 'InvoiceLineID' . '}',
                ObjectSerializer::toPathValue($invoice_line_id),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;
        if (isset($body)) {
            $_tempBody = $body;
        }

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json', 'application/xml']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json', 'application/xml'],
                ['application/x-www-form-urlencoded', 'application/json', 'application/xml']
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            
            if($headers['Content-Type'] === 'application/json') {
                // \stdClass has no __toString(), so we should encode it manually
                if ($httpBody instanceof \stdClass) {
                    $httpBody = \GuzzleHttp\json_encode($httpBody);
                }
                // array has no __toString(), so we should encode it manually
                if(is_array($httpBody)) {
                    $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($httpBody));
                }
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\Query::build($formParams);
            }
        }

        // this endpoint requires HTTP basic authentication
        if ($this->config->getUsername() !== null || $this->config->getPassword() !== null) {
            $headers['Authorization'] = 'Basic ' . base64_encode($this->config->getUsername() . ":" . $this->config->getPassword());
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\Query::build($queryParams);
        return new Request(
            'PATCH',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation salesOrderLinePOSTRequestInvoiceIDHistorysInvoiceHistoryIDLinesPost
     *
     * Appends a line to a sales order.
     *
     * @param  string $accept Accept Header (required)
     * @param  string $invoice_id invoice_id (required)
     * @param  string $invoice_history_id invoice_history_id (required)
     * @param  bool $jiwa_stateful Stateful indicator (optional)
     * @param  int $item_no item_no (optional)
     * @param  bool $comment_line comment_line (optional)
     * @param  double $quantity_ordered quantity_ordered (optional)
     * @param  double $quantity_demand quantity_demand (optional)
     * @param  double $quantity_this_del quantity_this_del (optional)
     * @param  double $quantity_back_ord quantity_back_ord (optional)
     * @param  bool $picked picked (optional)
     * @param  double $price_ex_gst price_ex_gst (optional)
     * @param  double $price_inc_gst price_inc_gst (optional)
     * @param  double $discounted_price discounted_price (optional)
     * @param  double $tax_to_charge tax_to_charge (optional)
     * @param  string $tax_rate tax_rate (optional)
     * @param  double $unit_cost unit_cost (optional)
     * @param  bool $fix_sell_price fix_sell_price (optional)
     * @param  bool $fix_price fix_price (optional)
     * @param  double $user_defined_float1 user_defined_float1 (optional)
     * @param  double $user_defined_float2 user_defined_float2 (optional)
     * @param  double $user_defined_float3 user_defined_float3 (optional)
     * @param  \DateTime $forward_order_date forward_order_date (optional)
     * @param  \DateTime $scheduled_date scheduled_date (optional)
     * @param  double $line_total line_total (optional)
     * @param  double $weight weight (optional)
     * @param  double $cubic cubic (optional)
     * @param  double $quoted_discounted_price quoted_discounted_price (optional)
     * @param  double $quoted_discount_percentage quoted_discount_percentage (optional)
     * @param  double $discounted_percentage discounted_percentage (optional)
     * @param  double $discount_given discount_given (optional)
     * @param  double $quantity_decimal_places quantity_decimal_places (optional)
     * @param  double $quantity_original_ordered quantity_original_ordered (optional)
     * @param  string $sales_order_serial_stock_selection_types sales_order_serial_stock_selection_types (optional)
     * @param  bool $non_inventory non_inventory (optional)
     * @param  string $inventory_id inventory_id (optional)
     * @param  string $part_no part_no (optional)
     * @param  string $description description (optional)
     * @param  string $comment_text comment_text (optional)
     * @param  string $aux2 aux2 (optional)
     * @param  string $line_link_id line_link_id (optional)
     * @param  string $edi_store_location_code edi_store_location_code (optional)
     * @param  string $edidc_location_code edidc_location_code (optional)
     * @param  string $cost_center cost_center (optional)
     * @param  string $stage stage (optional)
     * @param  string $custom_field_values custom_field_values (optional)
     * @param  string $line_details line_details (optional)
     * @param  string $shipping_labels shipping_labels (optional)
     * @param  string $unit_of_measure unit_of_measure (optional)
     * @param  string $kit_line_type kit_line_type (optional)
     * @param  double $kit_units kit_units (optional)
     * @param  string $kit_header_line_id kit_header_line_id (optional)
     * @param  \Jiwa\Model\SalesOrderLinePOSTRequest $body body (optional)
     *
     * @throws \Jiwa\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Jiwa\Model\SalesOrderLine
     */
    public function salesOrderLinePOSTRequestInvoiceIDHistorysInvoiceHistoryIDLinesPost($accept, $invoice_id, $invoice_history_id, $jiwa_stateful = null, $item_no = null, $comment_line = null, $quantity_ordered = null, $quantity_demand = null, $quantity_this_del = null, $quantity_back_ord = null, $picked = null, $price_ex_gst = null, $price_inc_gst = null, $discounted_price = null, $tax_to_charge = null, $tax_rate = null, $unit_cost = null, $fix_sell_price = null, $fix_price = null, $user_defined_float1 = null, $user_defined_float2 = null, $user_defined_float3 = null, $forward_order_date = null, $scheduled_date = null, $line_total = null, $weight = null, $cubic = null, $quoted_discounted_price = null, $quoted_discount_percentage = null, $discounted_percentage = null, $discount_given = null, $quantity_decimal_places = null, $quantity_original_ordered = null, $sales_order_serial_stock_selection_types = null, $non_inventory = null, $inventory_id = null, $part_no = null, $description = null, $comment_text = null, $aux2 = null, $line_link_id = null, $edi_store_location_code = null, $edidc_location_code = null, $cost_center = null, $stage = null, $custom_field_values = null, $line_details = null, $shipping_labels = null, $unit_of_measure = null, $kit_line_type = null, $kit_units = null, $kit_header_line_id = null, $body = null)
    {
        list($response) = $this->salesOrderLinePOSTRequestInvoiceIDHistorysInvoiceHistoryIDLinesPostWithHttpInfo($accept, $invoice_id, $invoice_history_id, $jiwa_stateful, $item_no, $comment_line, $quantity_ordered, $quantity_demand, $quantity_this_del, $quantity_back_ord, $picked, $price_ex_gst, $price_inc_gst, $discounted_price, $tax_to_charge, $tax_rate, $unit_cost, $fix_sell_price, $fix_price, $user_defined_float1, $user_defined_float2, $user_defined_float3, $forward_order_date, $scheduled_date, $line_total, $weight, $cubic, $quoted_discounted_price, $quoted_discount_percentage, $discounted_percentage, $discount_given, $quantity_decimal_places, $quantity_original_ordered, $sales_order_serial_stock_selection_types, $non_inventory, $inventory_id, $part_no, $description, $comment_text, $aux2, $line_link_id, $edi_store_location_code, $edidc_location_code, $cost_center, $stage, $custom_field_values, $line_details, $shipping_labels, $unit_of_measure, $kit_line_type, $kit_units, $kit_header_line_id, $body);
        return $response;
    }

    /**
     * Operation salesOrderLinePOSTRequestInvoiceIDHistorysInvoiceHistoryIDLinesPostWithHttpInfo
     *
     * Appends a line to a sales order.
     *
     * @param  string $accept Accept Header (required)
     * @param  string $invoice_id (required)
     * @param  string $invoice_history_id (required)
     * @param  bool $jiwa_stateful Stateful indicator (optional)
     * @param  int $item_no (optional)
     * @param  bool $comment_line (optional)
     * @param  double $quantity_ordered (optional)
     * @param  double $quantity_demand (optional)
     * @param  double $quantity_this_del (optional)
     * @param  double $quantity_back_ord (optional)
     * @param  bool $picked (optional)
     * @param  double $price_ex_gst (optional)
     * @param  double $price_inc_gst (optional)
     * @param  double $discounted_price (optional)
     * @param  double $tax_to_charge (optional)
     * @param  string $tax_rate (optional)
     * @param  double $unit_cost (optional)
     * @param  bool $fix_sell_price (optional)
     * @param  bool $fix_price (optional)
     * @param  double $user_defined_float1 (optional)
     * @param  double $user_defined_float2 (optional)
     * @param  double $user_defined_float3 (optional)
     * @param  \DateTime $forward_order_date (optional)
     * @param  \DateTime $scheduled_date (optional)
     * @param  double $line_total (optional)
     * @param  double $weight (optional)
     * @param  double $cubic (optional)
     * @param  double $quoted_discounted_price (optional)
     * @param  double $quoted_discount_percentage (optional)
     * @param  double $discounted_percentage (optional)
     * @param  double $discount_given (optional)
     * @param  double $quantity_decimal_places (optional)
     * @param  double $quantity_original_ordered (optional)
     * @param  string $sales_order_serial_stock_selection_types (optional)
     * @param  bool $non_inventory (optional)
     * @param  string $inventory_id (optional)
     * @param  string $part_no (optional)
     * @param  string $description (optional)
     * @param  string $comment_text (optional)
     * @param  string $aux2 (optional)
     * @param  string $line_link_id (optional)
     * @param  string $edi_store_location_code (optional)
     * @param  string $edidc_location_code (optional)
     * @param  string $cost_center (optional)
     * @param  string $stage (optional)
     * @param  string $custom_field_values (optional)
     * @param  string $line_details (optional)
     * @param  string $shipping_labels (optional)
     * @param  string $unit_of_measure (optional)
     * @param  string $kit_line_type (optional)
     * @param  double $kit_units (optional)
     * @param  string $kit_header_line_id (optional)
     * @param  \Jiwa\Model\SalesOrderLinePOSTRequest $body (optional)
     *
     * @throws \Jiwa\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Jiwa\Model\SalesOrderLine, HTTP status code, HTTP response headers (array of strings)
     */
    public function salesOrderLinePOSTRequestInvoiceIDHistorysInvoiceHistoryIDLinesPostWithHttpInfo($accept, $invoice_id, $invoice_history_id, $jiwa_stateful = null, $item_no = null, $comment_line = null, $quantity_ordered = null, $quantity_demand = null, $quantity_this_del = null, $quantity_back_ord = null, $picked = null, $price_ex_gst = null, $price_inc_gst = null, $discounted_price = null, $tax_to_charge = null, $tax_rate = null, $unit_cost = null, $fix_sell_price = null, $fix_price = null, $user_defined_float1 = null, $user_defined_float2 = null, $user_defined_float3 = null, $forward_order_date = null, $scheduled_date = null, $line_total = null, $weight = null, $cubic = null, $quoted_discounted_price = null, $quoted_discount_percentage = null, $discounted_percentage = null, $discount_given = null, $quantity_decimal_places = null, $quantity_original_ordered = null, $sales_order_serial_stock_selection_types = null, $non_inventory = null, $inventory_id = null, $part_no = null, $description = null, $comment_text = null, $aux2 = null, $line_link_id = null, $edi_store_location_code = null, $edidc_location_code = null, $cost_center = null, $stage = null, $custom_field_values = null, $line_details = null, $shipping_labels = null, $unit_of_measure = null, $kit_line_type = null, $kit_units = null, $kit_header_line_id = null, $body = null)
    {
        $returnType = '\Jiwa\Model\SalesOrderLine';
        $request = $this->salesOrderLinePOSTRequestInvoiceIDHistorysInvoiceHistoryIDLinesPostRequest($accept, $invoice_id, $invoice_history_id, $jiwa_stateful, $item_no, $comment_line, $quantity_ordered, $quantity_demand, $quantity_this_del, $quantity_back_ord, $picked, $price_ex_gst, $price_inc_gst, $discounted_price, $tax_to_charge, $tax_rate, $unit_cost, $fix_sell_price, $fix_price, $user_defined_float1, $user_defined_float2, $user_defined_float3, $forward_order_date, $scheduled_date, $line_total, $weight, $cubic, $quoted_discounted_price, $quoted_discount_percentage, $discounted_percentage, $discount_given, $quantity_decimal_places, $quantity_original_ordered, $sales_order_serial_stock_selection_types, $non_inventory, $inventory_id, $part_no, $description, $comment_text, $aux2, $line_link_id, $edi_store_location_code, $edidc_location_code, $cost_center, $stage, $custom_field_values, $line_details, $shipping_labels, $unit_of_measure, $kit_line_type, $kit_units, $kit_header_line_id, $body);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Jiwa\Model\SalesOrderLine',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 404:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Jiwa\Model\SalesOrderLine',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 201:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Jiwa\Model\SalesOrderLine',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 401:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Jiwa\Model\SalesOrderLine',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 403:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Jiwa\Model\SalesOrderLine',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation salesOrderLinePOSTRequestInvoiceIDHistorysInvoiceHistoryIDLinesPostAsync
     *
     * Appends a line to a sales order.
     *
     * @param  string $accept Accept Header (required)
     * @param  string $invoice_id (required)
     * @param  string $invoice_history_id (required)
     * @param  bool $jiwa_stateful Stateful indicator (optional)
     * @param  int $item_no (optional)
     * @param  bool $comment_line (optional)
     * @param  double $quantity_ordered (optional)
     * @param  double $quantity_demand (optional)
     * @param  double $quantity_this_del (optional)
     * @param  double $quantity_back_ord (optional)
     * @param  bool $picked (optional)
     * @param  double $price_ex_gst (optional)
     * @param  double $price_inc_gst (optional)
     * @param  double $discounted_price (optional)
     * @param  double $tax_to_charge (optional)
     * @param  string $tax_rate (optional)
     * @param  double $unit_cost (optional)
     * @param  bool $fix_sell_price (optional)
     * @param  bool $fix_price (optional)
     * @param  double $user_defined_float1 (optional)
     * @param  double $user_defined_float2 (optional)
     * @param  double $user_defined_float3 (optional)
     * @param  \DateTime $forward_order_date (optional)
     * @param  \DateTime $scheduled_date (optional)
     * @param  double $line_total (optional)
     * @param  double $weight (optional)
     * @param  double $cubic (optional)
     * @param  double $quoted_discounted_price (optional)
     * @param  double $quoted_discount_percentage (optional)
     * @param  double $discounted_percentage (optional)
     * @param  double $discount_given (optional)
     * @param  double $quantity_decimal_places (optional)
     * @param  double $quantity_original_ordered (optional)
     * @param  string $sales_order_serial_stock_selection_types (optional)
     * @param  bool $non_inventory (optional)
     * @param  string $inventory_id (optional)
     * @param  string $part_no (optional)
     * @param  string $description (optional)
     * @param  string $comment_text (optional)
     * @param  string $aux2 (optional)
     * @param  string $line_link_id (optional)
     * @param  string $edi_store_location_code (optional)
     * @param  string $edidc_location_code (optional)
     * @param  string $cost_center (optional)
     * @param  string $stage (optional)
     * @param  string $custom_field_values (optional)
     * @param  string $line_details (optional)
     * @param  string $shipping_labels (optional)
     * @param  string $unit_of_measure (optional)
     * @param  string $kit_line_type (optional)
     * @param  double $kit_units (optional)
     * @param  string $kit_header_line_id (optional)
     * @param  \Jiwa\Model\SalesOrderLinePOSTRequest $body (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function salesOrderLinePOSTRequestInvoiceIDHistorysInvoiceHistoryIDLinesPostAsync($accept, $invoice_id, $invoice_history_id, $jiwa_stateful = null, $item_no = null, $comment_line = null, $quantity_ordered = null, $quantity_demand = null, $quantity_this_del = null, $quantity_back_ord = null, $picked = null, $price_ex_gst = null, $price_inc_gst = null, $discounted_price = null, $tax_to_charge = null, $tax_rate = null, $unit_cost = null, $fix_sell_price = null, $fix_price = null, $user_defined_float1 = null, $user_defined_float2 = null, $user_defined_float3 = null, $forward_order_date = null, $scheduled_date = null, $line_total = null, $weight = null, $cubic = null, $quoted_discounted_price = null, $quoted_discount_percentage = null, $discounted_percentage = null, $discount_given = null, $quantity_decimal_places = null, $quantity_original_ordered = null, $sales_order_serial_stock_selection_types = null, $non_inventory = null, $inventory_id = null, $part_no = null, $description = null, $comment_text = null, $aux2 = null, $line_link_id = null, $edi_store_location_code = null, $edidc_location_code = null, $cost_center = null, $stage = null, $custom_field_values = null, $line_details = null, $shipping_labels = null, $unit_of_measure = null, $kit_line_type = null, $kit_units = null, $kit_header_line_id = null, $body = null)
    {
        return $this->salesOrderLinePOSTRequestInvoiceIDHistorysInvoiceHistoryIDLinesPostAsyncWithHttpInfo($accept, $invoice_id, $invoice_history_id, $jiwa_stateful, $item_no, $comment_line, $quantity_ordered, $quantity_demand, $quantity_this_del, $quantity_back_ord, $picked, $price_ex_gst, $price_inc_gst, $discounted_price, $tax_to_charge, $tax_rate, $unit_cost, $fix_sell_price, $fix_price, $user_defined_float1, $user_defined_float2, $user_defined_float3, $forward_order_date, $scheduled_date, $line_total, $weight, $cubic, $quoted_discounted_price, $quoted_discount_percentage, $discounted_percentage, $discount_given, $quantity_decimal_places, $quantity_original_ordered, $sales_order_serial_stock_selection_types, $non_inventory, $inventory_id, $part_no, $description, $comment_text, $aux2, $line_link_id, $edi_store_location_code, $edidc_location_code, $cost_center, $stage, $custom_field_values, $line_details, $shipping_labels, $unit_of_measure, $kit_line_type, $kit_units, $kit_header_line_id, $body)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation salesOrderLinePOSTRequestInvoiceIDHistorysInvoiceHistoryIDLinesPostAsyncWithHttpInfo
     *
     * Appends a line to a sales order.
     *
     * @param  string $accept Accept Header (required)
     * @param  string $invoice_id (required)
     * @param  string $invoice_history_id (required)
     * @param  bool $jiwa_stateful Stateful indicator (optional)
     * @param  int $item_no (optional)
     * @param  bool $comment_line (optional)
     * @param  double $quantity_ordered (optional)
     * @param  double $quantity_demand (optional)
     * @param  double $quantity_this_del (optional)
     * @param  double $quantity_back_ord (optional)
     * @param  bool $picked (optional)
     * @param  double $price_ex_gst (optional)
     * @param  double $price_inc_gst (optional)
     * @param  double $discounted_price (optional)
     * @param  double $tax_to_charge (optional)
     * @param  string $tax_rate (optional)
     * @param  double $unit_cost (optional)
     * @param  bool $fix_sell_price (optional)
     * @param  bool $fix_price (optional)
     * @param  double $user_defined_float1 (optional)
     * @param  double $user_defined_float2 (optional)
     * @param  double $user_defined_float3 (optional)
     * @param  \DateTime $forward_order_date (optional)
     * @param  \DateTime $scheduled_date (optional)
     * @param  double $line_total (optional)
     * @param  double $weight (optional)
     * @param  double $cubic (optional)
     * @param  double $quoted_discounted_price (optional)
     * @param  double $quoted_discount_percentage (optional)
     * @param  double $discounted_percentage (optional)
     * @param  double $discount_given (optional)
     * @param  double $quantity_decimal_places (optional)
     * @param  double $quantity_original_ordered (optional)
     * @param  string $sales_order_serial_stock_selection_types (optional)
     * @param  bool $non_inventory (optional)
     * @param  string $inventory_id (optional)
     * @param  string $part_no (optional)
     * @param  string $description (optional)
     * @param  string $comment_text (optional)
     * @param  string $aux2 (optional)
     * @param  string $line_link_id (optional)
     * @param  string $edi_store_location_code (optional)
     * @param  string $edidc_location_code (optional)
     * @param  string $cost_center (optional)
     * @param  string $stage (optional)
     * @param  string $custom_field_values (optional)
     * @param  string $line_details (optional)
     * @param  string $shipping_labels (optional)
     * @param  string $unit_of_measure (optional)
     * @param  string $kit_line_type (optional)
     * @param  double $kit_units (optional)
     * @param  string $kit_header_line_id (optional)
     * @param  \Jiwa\Model\SalesOrderLinePOSTRequest $body (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function salesOrderLinePOSTRequestInvoiceIDHistorysInvoiceHistoryIDLinesPostAsyncWithHttpInfo($accept, $invoice_id, $invoice_history_id, $jiwa_stateful = null, $item_no = null, $comment_line = null, $quantity_ordered = null, $quantity_demand = null, $quantity_this_del = null, $quantity_back_ord = null, $picked = null, $price_ex_gst = null, $price_inc_gst = null, $discounted_price = null, $tax_to_charge = null, $tax_rate = null, $unit_cost = null, $fix_sell_price = null, $fix_price = null, $user_defined_float1 = null, $user_defined_float2 = null, $user_defined_float3 = null, $forward_order_date = null, $scheduled_date = null, $line_total = null, $weight = null, $cubic = null, $quoted_discounted_price = null, $quoted_discount_percentage = null, $discounted_percentage = null, $discount_given = null, $quantity_decimal_places = null, $quantity_original_ordered = null, $sales_order_serial_stock_selection_types = null, $non_inventory = null, $inventory_id = null, $part_no = null, $description = null, $comment_text = null, $aux2 = null, $line_link_id = null, $edi_store_location_code = null, $edidc_location_code = null, $cost_center = null, $stage = null, $custom_field_values = null, $line_details = null, $shipping_labels = null, $unit_of_measure = null, $kit_line_type = null, $kit_units = null, $kit_header_line_id = null, $body = null)
    {
        $returnType = '\Jiwa\Model\SalesOrderLine';
        $request = $this->salesOrderLinePOSTRequestInvoiceIDHistorysInvoiceHistoryIDLinesPostRequest($accept, $invoice_id, $invoice_history_id, $jiwa_stateful, $item_no, $comment_line, $quantity_ordered, $quantity_demand, $quantity_this_del, $quantity_back_ord, $picked, $price_ex_gst, $price_inc_gst, $discounted_price, $tax_to_charge, $tax_rate, $unit_cost, $fix_sell_price, $fix_price, $user_defined_float1, $user_defined_float2, $user_defined_float3, $forward_order_date, $scheduled_date, $line_total, $weight, $cubic, $quoted_discounted_price, $quoted_discount_percentage, $discounted_percentage, $discount_given, $quantity_decimal_places, $quantity_original_ordered, $sales_order_serial_stock_selection_types, $non_inventory, $inventory_id, $part_no, $description, $comment_text, $aux2, $line_link_id, $edi_store_location_code, $edidc_location_code, $cost_center, $stage, $custom_field_values, $line_details, $shipping_labels, $unit_of_measure, $kit_line_type, $kit_units, $kit_header_line_id, $body);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'salesOrderLinePOSTRequestInvoiceIDHistorysInvoiceHistoryIDLinesPost'
     *
     * @param  string $accept Accept Header (required)
     * @param  string $invoice_id (required)
     * @param  string $invoice_history_id (required)
     * @param  bool $jiwa_stateful Stateful indicator (optional)
     * @param  int $item_no (optional)
     * @param  bool $comment_line (optional)
     * @param  double $quantity_ordered (optional)
     * @param  double $quantity_demand (optional)
     * @param  double $quantity_this_del (optional)
     * @param  double $quantity_back_ord (optional)
     * @param  bool $picked (optional)
     * @param  double $price_ex_gst (optional)
     * @param  double $price_inc_gst (optional)
     * @param  double $discounted_price (optional)
     * @param  double $tax_to_charge (optional)
     * @param  string $tax_rate (optional)
     * @param  double $unit_cost (optional)
     * @param  bool $fix_sell_price (optional)
     * @param  bool $fix_price (optional)
     * @param  double $user_defined_float1 (optional)
     * @param  double $user_defined_float2 (optional)
     * @param  double $user_defined_float3 (optional)
     * @param  \DateTime $forward_order_date (optional)
     * @param  \DateTime $scheduled_date (optional)
     * @param  double $line_total (optional)
     * @param  double $weight (optional)
     * @param  double $cubic (optional)
     * @param  double $quoted_discounted_price (optional)
     * @param  double $quoted_discount_percentage (optional)
     * @param  double $discounted_percentage (optional)
     * @param  double $discount_given (optional)
     * @param  double $quantity_decimal_places (optional)
     * @param  double $quantity_original_ordered (optional)
     * @param  string $sales_order_serial_stock_selection_types (optional)
     * @param  bool $non_inventory (optional)
     * @param  string $inventory_id (optional)
     * @param  string $part_no (optional)
     * @param  string $description (optional)
     * @param  string $comment_text (optional)
     * @param  string $aux2 (optional)
     * @param  string $line_link_id (optional)
     * @param  string $edi_store_location_code (optional)
     * @param  string $edidc_location_code (optional)
     * @param  string $cost_center (optional)
     * @param  string $stage (optional)
     * @param  string $custom_field_values (optional)
     * @param  string $line_details (optional)
     * @param  string $shipping_labels (optional)
     * @param  string $unit_of_measure (optional)
     * @param  string $kit_line_type (optional)
     * @param  double $kit_units (optional)
     * @param  string $kit_header_line_id (optional)
     * @param  \Jiwa\Model\SalesOrderLinePOSTRequest $body (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function salesOrderLinePOSTRequestInvoiceIDHistorysInvoiceHistoryIDLinesPostRequest($accept, $invoice_id, $invoice_history_id, $jiwa_stateful = null, $item_no = null, $comment_line = null, $quantity_ordered = null, $quantity_demand = null, $quantity_this_del = null, $quantity_back_ord = null, $picked = null, $price_ex_gst = null, $price_inc_gst = null, $discounted_price = null, $tax_to_charge = null, $tax_rate = null, $unit_cost = null, $fix_sell_price = null, $fix_price = null, $user_defined_float1 = null, $user_defined_float2 = null, $user_defined_float3 = null, $forward_order_date = null, $scheduled_date = null, $line_total = null, $weight = null, $cubic = null, $quoted_discounted_price = null, $quoted_discount_percentage = null, $discounted_percentage = null, $discount_given = null, $quantity_decimal_places = null, $quantity_original_ordered = null, $sales_order_serial_stock_selection_types = null, $non_inventory = null, $inventory_id = null, $part_no = null, $description = null, $comment_text = null, $aux2 = null, $line_link_id = null, $edi_store_location_code = null, $edidc_location_code = null, $cost_center = null, $stage = null, $custom_field_values = null, $line_details = null, $shipping_labels = null, $unit_of_measure = null, $kit_line_type = null, $kit_units = null, $kit_header_line_id = null, $body = null)
    {
        // verify the required parameter 'accept' is set
        if ($accept === null || (is_array($accept) && count($accept) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $accept when calling salesOrderLinePOSTRequestInvoiceIDHistorysInvoiceHistoryIDLinesPost'
            );
        }
        // verify the required parameter 'invoice_id' is set
        if ($invoice_id === null || (is_array($invoice_id) && count($invoice_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $invoice_id when calling salesOrderLinePOSTRequestInvoiceIDHistorysInvoiceHistoryIDLinesPost'
            );
        }
        // verify the required parameter 'invoice_history_id' is set
        if ($invoice_history_id === null || (is_array($invoice_history_id) && count($invoice_history_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $invoice_history_id when calling salesOrderLinePOSTRequestInvoiceIDHistorysInvoiceHistoryIDLinesPost'
            );
        }

        $resourcePath = '/SalesOrders/{InvoiceID}/Historys/{InvoiceHistoryID}/Lines';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        if ($item_no !== null) {
            $queryParams['ItemNo'] = ObjectSerializer::toQueryValue($item_no);
        }
        // query params
        if ($comment_line !== null) {
            $queryParams['CommentLine'] = ObjectSerializer::toQueryValue($comment_line);
        }
        // query params
        if ($quantity_ordered !== null) {
            $queryParams['QuantityOrdered'] = ObjectSerializer::toQueryValue($quantity_ordered);
        }
        // query params
        if ($quantity_demand !== null) {
            $queryParams['QuantityDemand'] = ObjectSerializer::toQueryValue($quantity_demand);
        }
        // query params
        if ($quantity_this_del !== null) {
            $queryParams['QuantityThisDel'] = ObjectSerializer::toQueryValue($quantity_this_del);
        }
        // query params
        if ($quantity_back_ord !== null) {
            $queryParams['QuantityBackOrd'] = ObjectSerializer::toQueryValue($quantity_back_ord);
        }
        // query params
        if ($picked !== null) {
            $queryParams['Picked'] = ObjectSerializer::toQueryValue($picked);
        }
        // query params
        if ($price_ex_gst !== null) {
            $queryParams['PriceExGst'] = ObjectSerializer::toQueryValue($price_ex_gst);
        }
        // query params
        if ($price_inc_gst !== null) {
            $queryParams['PriceIncGst'] = ObjectSerializer::toQueryValue($price_inc_gst);
        }
        // query params
        if ($discounted_price !== null) {
            $queryParams['DiscountedPrice'] = ObjectSerializer::toQueryValue($discounted_price);
        }
        // query params
        if ($tax_to_charge !== null) {
            $queryParams['TaxToCharge'] = ObjectSerializer::toQueryValue($tax_to_charge);
        }
        // query params
        if ($tax_rate !== null) {
            $queryParams['TaxRate'] = ObjectSerializer::toQueryValue($tax_rate);
        }
        // query params
        if ($unit_cost !== null) {
            $queryParams['UnitCost'] = ObjectSerializer::toQueryValue($unit_cost);
        }
        // query params
        if ($fix_sell_price !== null) {
            $queryParams['FixSellPrice'] = ObjectSerializer::toQueryValue($fix_sell_price);
        }
        // query params
        if ($fix_price !== null) {
            $queryParams['FixPrice'] = ObjectSerializer::toQueryValue($fix_price);
        }
        // query params
        if ($user_defined_float1 !== null) {
            $queryParams['UserDefinedFloat1'] = ObjectSerializer::toQueryValue($user_defined_float1);
        }
        // query params
        if ($user_defined_float2 !== null) {
            $queryParams['UserDefinedFloat2'] = ObjectSerializer::toQueryValue($user_defined_float2);
        }
        // query params
        if ($user_defined_float3 !== null) {
            $queryParams['UserDefinedFloat3'] = ObjectSerializer::toQueryValue($user_defined_float3);
        }
        // query params
        if ($forward_order_date !== null) {
            $queryParams['ForwardOrderDate'] = ObjectSerializer::toQueryValue($forward_order_date);
        }
        // query params
        if ($scheduled_date !== null) {
            $queryParams['ScheduledDate'] = ObjectSerializer::toQueryValue($scheduled_date);
        }
        // query params
        if ($line_total !== null) {
            $queryParams['LineTotal'] = ObjectSerializer::toQueryValue($line_total);
        }
        // query params
        if ($weight !== null) {
            $queryParams['Weight'] = ObjectSerializer::toQueryValue($weight);
        }
        // query params
        if ($cubic !== null) {
            $queryParams['Cubic'] = ObjectSerializer::toQueryValue($cubic);
        }
        // query params
        if ($quoted_discounted_price !== null) {
            $queryParams['QuotedDiscountedPrice'] = ObjectSerializer::toQueryValue($quoted_discounted_price);
        }
        // query params
        if ($quoted_discount_percentage !== null) {
            $queryParams['QuotedDiscountPercentage'] = ObjectSerializer::toQueryValue($quoted_discount_percentage);
        }
        // query params
        if ($discounted_percentage !== null) {
            $queryParams['DiscountedPercentage'] = ObjectSerializer::toQueryValue($discounted_percentage);
        }
        // query params
        if ($discount_given !== null) {
            $queryParams['DiscountGiven'] = ObjectSerializer::toQueryValue($discount_given);
        }
        // query params
        if ($quantity_decimal_places !== null) {
            $queryParams['QuantityDecimalPlaces'] = ObjectSerializer::toQueryValue($quantity_decimal_places);
        }
        // query params
        if ($quantity_original_ordered !== null) {
            $queryParams['QuantityOriginalOrdered'] = ObjectSerializer::toQueryValue($quantity_original_ordered);
        }
        // query params
        if ($sales_order_serial_stock_selection_types !== null) {
            $queryParams['SalesOrderSerialStockSelectionTypes'] = ObjectSerializer::toQueryValue($sales_order_serial_stock_selection_types);
        }
        // query params
        if ($non_inventory !== null) {
            $queryParams['NonInventory'] = ObjectSerializer::toQueryValue($non_inventory);
        }
        // query params
        if ($inventory_id !== null) {
            $queryParams['InventoryID'] = ObjectSerializer::toQueryValue($inventory_id);
        }
        // query params
        if ($part_no !== null) {
            $queryParams['PartNo'] = ObjectSerializer::toQueryValue($part_no);
        }
        // query params
        if ($description !== null) {
            $queryParams['Description'] = ObjectSerializer::toQueryValue($description);
        }
        // query params
        if ($comment_text !== null) {
            $queryParams['CommentText'] = ObjectSerializer::toQueryValue($comment_text);
        }
        // query params
        if ($aux2 !== null) {
            $queryParams['Aux2'] = ObjectSerializer::toQueryValue($aux2);
        }
        // query params
        if ($line_link_id !== null) {
            $queryParams['LineLinkID'] = ObjectSerializer::toQueryValue($line_link_id);
        }
        // query params
        if ($edi_store_location_code !== null) {
            $queryParams['EDIStoreLocationCode'] = ObjectSerializer::toQueryValue($edi_store_location_code);
        }
        // query params
        if ($edidc_location_code !== null) {
            $queryParams['EDIDCLocationCode'] = ObjectSerializer::toQueryValue($edidc_location_code);
        }
        // query params
        if ($cost_center !== null) {
            $queryParams['CostCenter'] = ObjectSerializer::toQueryValue($cost_center);
        }
        // query params
        if ($stage !== null) {
            $queryParams['Stage'] = ObjectSerializer::toQueryValue($stage);
        }
        // query params
        if ($custom_field_values !== null) {
            $queryParams['CustomFieldValues'] = ObjectSerializer::toQueryValue($custom_field_values);
        }
        // query params
        if ($line_details !== null) {
            $queryParams['LineDetails'] = ObjectSerializer::toQueryValue($line_details);
        }
        // query params
        if ($shipping_labels !== null) {
            $queryParams['ShippingLabels'] = ObjectSerializer::toQueryValue($shipping_labels);
        }
        // query params
        if ($unit_of_measure !== null) {
            $queryParams['UnitOfMeasure'] = ObjectSerializer::toQueryValue($unit_of_measure);
        }
        // query params
        if ($kit_line_type !== null) {
            $queryParams['KitLineType'] = ObjectSerializer::toQueryValue($kit_line_type);
        }
        // query params
        if ($kit_units !== null) {
            $queryParams['KitUnits'] = ObjectSerializer::toQueryValue($kit_units);
        }
        // query params
        if ($kit_header_line_id !== null) {
            $queryParams['KitHeaderLineID'] = ObjectSerializer::toQueryValue($kit_header_line_id);
        }
        // header params
        if ($accept !== null) {
            $headerParams['Accept'] = ObjectSerializer::toHeaderValue($accept);
        }
        // header params
        if ($jiwa_stateful !== null) {
            $headerParams['jiwa-stateful'] = ObjectSerializer::toHeaderValue($jiwa_stateful);
        }

        // path params
        if ($invoice_id !== null) {
            $resourcePath = str_replace(
                '{' . 'InvoiceID' . '}',
                ObjectSerializer::toPathValue($invoice_id),
                $resourcePath
            );
        }
        // path params
        if ($invoice_history_id !== null) {
            $resourcePath = str_replace(
                '{' . 'InvoiceHistoryID' . '}',
                ObjectSerializer::toPathValue($invoice_history_id),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;
        if (isset($body)) {
            $_tempBody = $body;
        }

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json', 'application/xml']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json', 'application/xml'],
                ['application/x-www-form-urlencoded', 'application/json', 'application/xml']
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            
            if($headers['Content-Type'] === 'application/json') {
                // \stdClass has no __toString(), so we should encode it manually
                if ($httpBody instanceof \stdClass) {
                    $httpBody = \GuzzleHttp\json_encode($httpBody);
                }
                // array has no __toString(), so we should encode it manually
                if(is_array($httpBody)) {
                    $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($httpBody));
                }
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\Query::build($formParams);
            }
        }

        // this endpoint requires HTTP basic authentication
        if ($this->config->getUsername() !== null || $this->config->getPassword() !== null) {
            $headers['Authorization'] = 'Basic ' . base64_encode($this->config->getUsername() . ":" . $this->config->getPassword());
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\Query::build($queryParams);
        return new Request(
            'POST',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation salesOrderLinesGETManyRequestInvoiceIDHistorysInvoiceHistoryIDLinesGet
     *
     * Retrieves a list of sales order lines.
     *
     * @param  string $accept Accept Header (required)
     * @param  string $invoice_id invoice_id (required)
     * @param  string $invoice_history_id invoice_history_id (required)
     * @param  bool $jiwa_stateful Stateful indicator (optional)
     *
     * @throws \Jiwa\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Jiwa\Model\SalesOrderLine[]
     */
    public function salesOrderLinesGETManyRequestInvoiceIDHistorysInvoiceHistoryIDLinesGet($accept, $invoice_id, $invoice_history_id, $jiwa_stateful = null)
    {
        list($response) = $this->salesOrderLinesGETManyRequestInvoiceIDHistorysInvoiceHistoryIDLinesGetWithHttpInfo($accept, $invoice_id, $invoice_history_id, $jiwa_stateful);
        return $response;
    }

    /**
     * Operation salesOrderLinesGETManyRequestInvoiceIDHistorysInvoiceHistoryIDLinesGetWithHttpInfo
     *
     * Retrieves a list of sales order lines.
     *
     * @param  string $accept Accept Header (required)
     * @param  string $invoice_id (required)
     * @param  string $invoice_history_id (required)
     * @param  bool $jiwa_stateful Stateful indicator (optional)
     *
     * @throws \Jiwa\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Jiwa\Model\SalesOrderLine[], HTTP status code, HTTP response headers (array of strings)
     */
    public function salesOrderLinesGETManyRequestInvoiceIDHistorysInvoiceHistoryIDLinesGetWithHttpInfo($accept, $invoice_id, $invoice_history_id, $jiwa_stateful = null)
    {
        $returnType = '\Jiwa\Model\SalesOrderLine[]';
        $request = $this->salesOrderLinesGETManyRequestInvoiceIDHistorysInvoiceHistoryIDLinesGetRequest($accept, $invoice_id, $invoice_history_id, $jiwa_stateful);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Jiwa\Model\SalesOrderLine[]',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 403:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Jiwa\Model\SalesOrderLine[]',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 404:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Jiwa\Model\SalesOrderLine[]',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 401:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Jiwa\Model\SalesOrderLine[]',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation salesOrderLinesGETManyRequestInvoiceIDHistorysInvoiceHistoryIDLinesGetAsync
     *
     * Retrieves a list of sales order lines.
     *
     * @param  string $accept Accept Header (required)
     * @param  string $invoice_id (required)
     * @param  string $invoice_history_id (required)
     * @param  bool $jiwa_stateful Stateful indicator (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function salesOrderLinesGETManyRequestInvoiceIDHistorysInvoiceHistoryIDLinesGetAsync($accept, $invoice_id, $invoice_history_id, $jiwa_stateful = null)
    {
        return $this->salesOrderLinesGETManyRequestInvoiceIDHistorysInvoiceHistoryIDLinesGetAsyncWithHttpInfo($accept, $invoice_id, $invoice_history_id, $jiwa_stateful)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation salesOrderLinesGETManyRequestInvoiceIDHistorysInvoiceHistoryIDLinesGetAsyncWithHttpInfo
     *
     * Retrieves a list of sales order lines.
     *
     * @param  string $accept Accept Header (required)
     * @param  string $invoice_id (required)
     * @param  string $invoice_history_id (required)
     * @param  bool $jiwa_stateful Stateful indicator (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function salesOrderLinesGETManyRequestInvoiceIDHistorysInvoiceHistoryIDLinesGetAsyncWithHttpInfo($accept, $invoice_id, $invoice_history_id, $jiwa_stateful = null)
    {
        $returnType = '\Jiwa\Model\SalesOrderLine[]';
        $request = $this->salesOrderLinesGETManyRequestInvoiceIDHistorysInvoiceHistoryIDLinesGetRequest($accept, $invoice_id, $invoice_history_id, $jiwa_stateful);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'salesOrderLinesGETManyRequestInvoiceIDHistorysInvoiceHistoryIDLinesGet'
     *
     * @param  string $accept Accept Header (required)
     * @param  string $invoice_id (required)
     * @param  string $invoice_history_id (required)
     * @param  bool $jiwa_stateful Stateful indicator (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function salesOrderLinesGETManyRequestInvoiceIDHistorysInvoiceHistoryIDLinesGetRequest($accept, $invoice_id, $invoice_history_id, $jiwa_stateful = null)
    {
        // verify the required parameter 'accept' is set
        if ($accept === null || (is_array($accept) && count($accept) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $accept when calling salesOrderLinesGETManyRequestInvoiceIDHistorysInvoiceHistoryIDLinesGet'
            );
        }
        // verify the required parameter 'invoice_id' is set
        if ($invoice_id === null || (is_array($invoice_id) && count($invoice_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $invoice_id when calling salesOrderLinesGETManyRequestInvoiceIDHistorysInvoiceHistoryIDLinesGet'
            );
        }
        // verify the required parameter 'invoice_history_id' is set
        if ($invoice_history_id === null || (is_array($invoice_history_id) && count($invoice_history_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $invoice_history_id when calling salesOrderLinesGETManyRequestInvoiceIDHistorysInvoiceHistoryIDLinesGet'
            );
        }

        $resourcePath = '/SalesOrders/{InvoiceID}/Historys/{InvoiceHistoryID}/Lines';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // header params
        if ($accept !== null) {
            $headerParams['Accept'] = ObjectSerializer::toHeaderValue($accept);
        }
        // header params
        if ($jiwa_stateful !== null) {
            $headerParams['jiwa-stateful'] = ObjectSerializer::toHeaderValue($jiwa_stateful);
        }

        // path params
        if ($invoice_id !== null) {
            $resourcePath = str_replace(
                '{' . 'InvoiceID' . '}',
                ObjectSerializer::toPathValue($invoice_id),
                $resourcePath
            );
        }
        // path params
        if ($invoice_history_id !== null) {
            $resourcePath = str_replace(
                '{' . 'InvoiceHistoryID' . '}',
                ObjectSerializer::toPathValue($invoice_history_id),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json', 'application/xml']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json', 'application/xml'],
                ['application/x-www-form-urlencoded', 'application/json', 'application/xml']
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            
            if($headers['Content-Type'] === 'application/json') {
                // \stdClass has no __toString(), so we should encode it manually
                if ($httpBody instanceof \stdClass) {
                    $httpBody = \GuzzleHttp\json_encode($httpBody);
                }
                // array has no __toString(), so we should encode it manually
                if(is_array($httpBody)) {
                    $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($httpBody));
                }
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\Query::build($formParams);
            }
        }

        // this endpoint requires HTTP basic authentication
        if ($this->config->getUsername() !== null || $this->config->getPassword() !== null) {
            $headers['Authorization'] = 'Basic ' . base64_encode($this->config->getUsername() . ":" . $this->config->getPassword());
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\Query::build($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation salesOrderNoteDELETERequestInvoiceIDNotesNoteIDDelete
     *
     * Deletes a sales order note.
     *
     * @param  string $accept Accept Header (required)
     * @param  string $invoice_id invoice_id (required)
     * @param  string $note_id note_id (required)
     * @param  bool $jiwa_stateful Stateful indicator (optional)
     *
     * @throws \Jiwa\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Jiwa\Model\Object
     */
    public function salesOrderNoteDELETERequestInvoiceIDNotesNoteIDDelete($accept, $invoice_id, $note_id, $jiwa_stateful = null)
    {
        list($response) = $this->salesOrderNoteDELETERequestInvoiceIDNotesNoteIDDeleteWithHttpInfo($accept, $invoice_id, $note_id, $jiwa_stateful);
        return $response;
    }

    /**
     * Operation salesOrderNoteDELETERequestInvoiceIDNotesNoteIDDeleteWithHttpInfo
     *
     * Deletes a sales order note.
     *
     * @param  string $accept Accept Header (required)
     * @param  string $invoice_id (required)
     * @param  string $note_id (required)
     * @param  bool $jiwa_stateful Stateful indicator (optional)
     *
     * @throws \Jiwa\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Jiwa\Model\Object, HTTP status code, HTTP response headers (array of strings)
     */
    public function salesOrderNoteDELETERequestInvoiceIDNotesNoteIDDeleteWithHttpInfo($accept, $invoice_id, $note_id, $jiwa_stateful = null)
    {
        $returnType = '\Jiwa\Model\Object';
        $request = $this->salesOrderNoteDELETERequestInvoiceIDNotesNoteIDDeleteRequest($accept, $invoice_id, $note_id, $jiwa_stateful);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Jiwa\Model\Object',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 204:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Jiwa\Model\Object',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 404:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Jiwa\Model\Object',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 401:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Jiwa\Model\Object',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 403:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Jiwa\Model\Object',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation salesOrderNoteDELETERequestInvoiceIDNotesNoteIDDeleteAsync
     *
     * Deletes a sales order note.
     *
     * @param  string $accept Accept Header (required)
     * @param  string $invoice_id (required)
     * @param  string $note_id (required)
     * @param  bool $jiwa_stateful Stateful indicator (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function salesOrderNoteDELETERequestInvoiceIDNotesNoteIDDeleteAsync($accept, $invoice_id, $note_id, $jiwa_stateful = null)
    {
        return $this->salesOrderNoteDELETERequestInvoiceIDNotesNoteIDDeleteAsyncWithHttpInfo($accept, $invoice_id, $note_id, $jiwa_stateful)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation salesOrderNoteDELETERequestInvoiceIDNotesNoteIDDeleteAsyncWithHttpInfo
     *
     * Deletes a sales order note.
     *
     * @param  string $accept Accept Header (required)
     * @param  string $invoice_id (required)
     * @param  string $note_id (required)
     * @param  bool $jiwa_stateful Stateful indicator (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function salesOrderNoteDELETERequestInvoiceIDNotesNoteIDDeleteAsyncWithHttpInfo($accept, $invoice_id, $note_id, $jiwa_stateful = null)
    {
        $returnType = '\Jiwa\Model\Object';
        $request = $this->salesOrderNoteDELETERequestInvoiceIDNotesNoteIDDeleteRequest($accept, $invoice_id, $note_id, $jiwa_stateful);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'salesOrderNoteDELETERequestInvoiceIDNotesNoteIDDelete'
     *
     * @param  string $accept Accept Header (required)
     * @param  string $invoice_id (required)
     * @param  string $note_id (required)
     * @param  bool $jiwa_stateful Stateful indicator (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function salesOrderNoteDELETERequestInvoiceIDNotesNoteIDDeleteRequest($accept, $invoice_id, $note_id, $jiwa_stateful = null)
    {
        // verify the required parameter 'accept' is set
        if ($accept === null || (is_array($accept) && count($accept) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $accept when calling salesOrderNoteDELETERequestInvoiceIDNotesNoteIDDelete'
            );
        }
        // verify the required parameter 'invoice_id' is set
        if ($invoice_id === null || (is_array($invoice_id) && count($invoice_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $invoice_id when calling salesOrderNoteDELETERequestInvoiceIDNotesNoteIDDelete'
            );
        }
        // verify the required parameter 'note_id' is set
        if ($note_id === null || (is_array($note_id) && count($note_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $note_id when calling salesOrderNoteDELETERequestInvoiceIDNotesNoteIDDelete'
            );
        }

        $resourcePath = '/SalesOrders/{InvoiceID}/Notes/{NoteID}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // header params
        if ($accept !== null) {
            $headerParams['Accept'] = ObjectSerializer::toHeaderValue($accept);
        }
        // header params
        if ($jiwa_stateful !== null) {
            $headerParams['jiwa-stateful'] = ObjectSerializer::toHeaderValue($jiwa_stateful);
        }

        // path params
        if ($invoice_id !== null) {
            $resourcePath = str_replace(
                '{' . 'InvoiceID' . '}',
                ObjectSerializer::toPathValue($invoice_id),
                $resourcePath
            );
        }
        // path params
        if ($note_id !== null) {
            $resourcePath = str_replace(
                '{' . 'NoteID' . '}',
                ObjectSerializer::toPathValue($note_id),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json', 'application/xml']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json', 'application/xml'],
                ['application/x-www-form-urlencoded', 'application/json', 'application/xml']
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            
            if($headers['Content-Type'] === 'application/json') {
                // \stdClass has no __toString(), so we should encode it manually
                if ($httpBody instanceof \stdClass) {
                    $httpBody = \GuzzleHttp\json_encode($httpBody);
                }
                // array has no __toString(), so we should encode it manually
                if(is_array($httpBody)) {
                    $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($httpBody));
                }
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\Query::build($formParams);
            }
        }

        // this endpoint requires HTTP basic authentication
        if ($this->config->getUsername() !== null || $this->config->getPassword() !== null) {
            $headers['Authorization'] = 'Basic ' . base64_encode($this->config->getUsername() . ":" . $this->config->getPassword());
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\Query::build($queryParams);
        return new Request(
            'DELETE',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation salesOrderNoteGETRequestInvoiceIDNotesNoteIDGet
     *
     * Retrieves a sales order note.
     *
     * @param  string $accept Accept Header (required)
     * @param  string $invoice_id invoice_id (required)
     * @param  string $note_id note_id (required)
     * @param  bool $jiwa_stateful Stateful indicator (optional)
     *
     * @throws \Jiwa\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Jiwa\Model\Note
     */
    public function salesOrderNoteGETRequestInvoiceIDNotesNoteIDGet($accept, $invoice_id, $note_id, $jiwa_stateful = null)
    {
        list($response) = $this->salesOrderNoteGETRequestInvoiceIDNotesNoteIDGetWithHttpInfo($accept, $invoice_id, $note_id, $jiwa_stateful);
        return $response;
    }

    /**
     * Operation salesOrderNoteGETRequestInvoiceIDNotesNoteIDGetWithHttpInfo
     *
     * Retrieves a sales order note.
     *
     * @param  string $accept Accept Header (required)
     * @param  string $invoice_id (required)
     * @param  string $note_id (required)
     * @param  bool $jiwa_stateful Stateful indicator (optional)
     *
     * @throws \Jiwa\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Jiwa\Model\Note, HTTP status code, HTTP response headers (array of strings)
     */
    public function salesOrderNoteGETRequestInvoiceIDNotesNoteIDGetWithHttpInfo($accept, $invoice_id, $note_id, $jiwa_stateful = null)
    {
        $returnType = '\Jiwa\Model\Note';
        $request = $this->salesOrderNoteGETRequestInvoiceIDNotesNoteIDGetRequest($accept, $invoice_id, $note_id, $jiwa_stateful);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Jiwa\Model\Note',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 403:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Jiwa\Model\Note',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 401:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Jiwa\Model\Note',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 404:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Jiwa\Model\Note',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation salesOrderNoteGETRequestInvoiceIDNotesNoteIDGetAsync
     *
     * Retrieves a sales order note.
     *
     * @param  string $accept Accept Header (required)
     * @param  string $invoice_id (required)
     * @param  string $note_id (required)
     * @param  bool $jiwa_stateful Stateful indicator (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function salesOrderNoteGETRequestInvoiceIDNotesNoteIDGetAsync($accept, $invoice_id, $note_id, $jiwa_stateful = null)
    {
        return $this->salesOrderNoteGETRequestInvoiceIDNotesNoteIDGetAsyncWithHttpInfo($accept, $invoice_id, $note_id, $jiwa_stateful)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation salesOrderNoteGETRequestInvoiceIDNotesNoteIDGetAsyncWithHttpInfo
     *
     * Retrieves a sales order note.
     *
     * @param  string $accept Accept Header (required)
     * @param  string $invoice_id (required)
     * @param  string $note_id (required)
     * @param  bool $jiwa_stateful Stateful indicator (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function salesOrderNoteGETRequestInvoiceIDNotesNoteIDGetAsyncWithHttpInfo($accept, $invoice_id, $note_id, $jiwa_stateful = null)
    {
        $returnType = '\Jiwa\Model\Note';
        $request = $this->salesOrderNoteGETRequestInvoiceIDNotesNoteIDGetRequest($accept, $invoice_id, $note_id, $jiwa_stateful);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'salesOrderNoteGETRequestInvoiceIDNotesNoteIDGet'
     *
     * @param  string $accept Accept Header (required)
     * @param  string $invoice_id (required)
     * @param  string $note_id (required)
     * @param  bool $jiwa_stateful Stateful indicator (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function salesOrderNoteGETRequestInvoiceIDNotesNoteIDGetRequest($accept, $invoice_id, $note_id, $jiwa_stateful = null)
    {
        // verify the required parameter 'accept' is set
        if ($accept === null || (is_array($accept) && count($accept) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $accept when calling salesOrderNoteGETRequestInvoiceIDNotesNoteIDGet'
            );
        }
        // verify the required parameter 'invoice_id' is set
        if ($invoice_id === null || (is_array($invoice_id) && count($invoice_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $invoice_id when calling salesOrderNoteGETRequestInvoiceIDNotesNoteIDGet'
            );
        }
        // verify the required parameter 'note_id' is set
        if ($note_id === null || (is_array($note_id) && count($note_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $note_id when calling salesOrderNoteGETRequestInvoiceIDNotesNoteIDGet'
            );
        }

        $resourcePath = '/SalesOrders/{InvoiceID}/Notes/{NoteID}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // header params
        if ($accept !== null) {
            $headerParams['Accept'] = ObjectSerializer::toHeaderValue($accept);
        }
        // header params
        if ($jiwa_stateful !== null) {
            $headerParams['jiwa-stateful'] = ObjectSerializer::toHeaderValue($jiwa_stateful);
        }

        // path params
        if ($invoice_id !== null) {
            $resourcePath = str_replace(
                '{' . 'InvoiceID' . '}',
                ObjectSerializer::toPathValue($invoice_id),
                $resourcePath
            );
        }
        // path params
        if ($note_id !== null) {
            $resourcePath = str_replace(
                '{' . 'NoteID' . '}',
                ObjectSerializer::toPathValue($note_id),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json', 'application/xml']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json', 'application/xml'],
                ['application/x-www-form-urlencoded', 'application/json', 'application/xml']
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            
            if($headers['Content-Type'] === 'application/json') {
                // \stdClass has no __toString(), so we should encode it manually
                if ($httpBody instanceof \stdClass) {
                    $httpBody = \GuzzleHttp\json_encode($httpBody);
                }
                // array has no __toString(), so we should encode it manually
                if(is_array($httpBody)) {
                    $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($httpBody));
                }
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\Query::build($formParams);
            }
        }

        // this endpoint requires HTTP basic authentication
        if ($this->config->getUsername() !== null || $this->config->getPassword() !== null) {
            $headers['Authorization'] = 'Basic ' . base64_encode($this->config->getUsername() . ":" . $this->config->getPassword());
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\Query::build($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation salesOrderNotePATCHRequestInvoiceIDNotesNoteIDUpdate
     *
     * Updates a sales order note.
     *
     * @param  string $accept Accept Header (required)
     * @param  string $invoice_id invoice_id (required)
     * @param  string $note_id note_id (required)
     * @param  bool $jiwa_stateful Stateful indicator (optional)
     * @param  string $note_type note_type (optional)
     * @param  int $line_no line_no (optional)
     * @param  \DateTime $last_saved_date_time last_saved_date_time (optional)
     * @param  string $last_modified_by_staff_id last_modified_by_staff_id (optional)
     * @param  string $last_modified_by_staff_username last_modified_by_staff_username (optional)
     * @param  string $last_modified_by_staff_title last_modified_by_staff_title (optional)
     * @param  string $last_modified_by_staff_first_name last_modified_by_staff_first_name (optional)
     * @param  string $last_modified_by_staff_surname last_modified_by_staff_surname (optional)
     * @param  string $note_text note_text (optional)
     * @param  \Jiwa\Model\SalesOrderNotePATCHRequest $body body (optional)
     *
     * @throws \Jiwa\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Jiwa\Model\Note
     */
    public function salesOrderNotePATCHRequestInvoiceIDNotesNoteIDUpdate($accept, $invoice_id, $note_id, $jiwa_stateful = null, $note_type = null, $line_no = null, $last_saved_date_time = null, $last_modified_by_staff_id = null, $last_modified_by_staff_username = null, $last_modified_by_staff_title = null, $last_modified_by_staff_first_name = null, $last_modified_by_staff_surname = null, $note_text = null, $body = null)
    {
        list($response) = $this->salesOrderNotePATCHRequestInvoiceIDNotesNoteIDUpdateWithHttpInfo($accept, $invoice_id, $note_id, $jiwa_stateful, $note_type, $line_no, $last_saved_date_time, $last_modified_by_staff_id, $last_modified_by_staff_username, $last_modified_by_staff_title, $last_modified_by_staff_first_name, $last_modified_by_staff_surname, $note_text, $body);
        return $response;
    }

    /**
     * Operation salesOrderNotePATCHRequestInvoiceIDNotesNoteIDUpdateWithHttpInfo
     *
     * Updates a sales order note.
     *
     * @param  string $accept Accept Header (required)
     * @param  string $invoice_id (required)
     * @param  string $note_id (required)
     * @param  bool $jiwa_stateful Stateful indicator (optional)
     * @param  string $note_type (optional)
     * @param  int $line_no (optional)
     * @param  \DateTime $last_saved_date_time (optional)
     * @param  string $last_modified_by_staff_id (optional)
     * @param  string $last_modified_by_staff_username (optional)
     * @param  string $last_modified_by_staff_title (optional)
     * @param  string $last_modified_by_staff_first_name (optional)
     * @param  string $last_modified_by_staff_surname (optional)
     * @param  string $note_text (optional)
     * @param  \Jiwa\Model\SalesOrderNotePATCHRequest $body (optional)
     *
     * @throws \Jiwa\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Jiwa\Model\Note, HTTP status code, HTTP response headers (array of strings)
     */
    public function salesOrderNotePATCHRequestInvoiceIDNotesNoteIDUpdateWithHttpInfo($accept, $invoice_id, $note_id, $jiwa_stateful = null, $note_type = null, $line_no = null, $last_saved_date_time = null, $last_modified_by_staff_id = null, $last_modified_by_staff_username = null, $last_modified_by_staff_title = null, $last_modified_by_staff_first_name = null, $last_modified_by_staff_surname = null, $note_text = null, $body = null)
    {
        $returnType = '\Jiwa\Model\Note';
        $request = $this->salesOrderNotePATCHRequestInvoiceIDNotesNoteIDUpdateRequest($accept, $invoice_id, $note_id, $jiwa_stateful, $note_type, $line_no, $last_saved_date_time, $last_modified_by_staff_id, $last_modified_by_staff_username, $last_modified_by_staff_title, $last_modified_by_staff_first_name, $last_modified_by_staff_surname, $note_text, $body);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Jiwa\Model\Note',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 401:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Jiwa\Model\Note',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 403:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Jiwa\Model\Note',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 404:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Jiwa\Model\Note',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation salesOrderNotePATCHRequestInvoiceIDNotesNoteIDUpdateAsync
     *
     * Updates a sales order note.
     *
     * @param  string $accept Accept Header (required)
     * @param  string $invoice_id (required)
     * @param  string $note_id (required)
     * @param  bool $jiwa_stateful Stateful indicator (optional)
     * @param  string $note_type (optional)
     * @param  int $line_no (optional)
     * @param  \DateTime $last_saved_date_time (optional)
     * @param  string $last_modified_by_staff_id (optional)
     * @param  string $last_modified_by_staff_username (optional)
     * @param  string $last_modified_by_staff_title (optional)
     * @param  string $last_modified_by_staff_first_name (optional)
     * @param  string $last_modified_by_staff_surname (optional)
     * @param  string $note_text (optional)
     * @param  \Jiwa\Model\SalesOrderNotePATCHRequest $body (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function salesOrderNotePATCHRequestInvoiceIDNotesNoteIDUpdateAsync($accept, $invoice_id, $note_id, $jiwa_stateful = null, $note_type = null, $line_no = null, $last_saved_date_time = null, $last_modified_by_staff_id = null, $last_modified_by_staff_username = null, $last_modified_by_staff_title = null, $last_modified_by_staff_first_name = null, $last_modified_by_staff_surname = null, $note_text = null, $body = null)
    {
        return $this->salesOrderNotePATCHRequestInvoiceIDNotesNoteIDUpdateAsyncWithHttpInfo($accept, $invoice_id, $note_id, $jiwa_stateful, $note_type, $line_no, $last_saved_date_time, $last_modified_by_staff_id, $last_modified_by_staff_username, $last_modified_by_staff_title, $last_modified_by_staff_first_name, $last_modified_by_staff_surname, $note_text, $body)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation salesOrderNotePATCHRequestInvoiceIDNotesNoteIDUpdateAsyncWithHttpInfo
     *
     * Updates a sales order note.
     *
     * @param  string $accept Accept Header (required)
     * @param  string $invoice_id (required)
     * @param  string $note_id (required)
     * @param  bool $jiwa_stateful Stateful indicator (optional)
     * @param  string $note_type (optional)
     * @param  int $line_no (optional)
     * @param  \DateTime $last_saved_date_time (optional)
     * @param  string $last_modified_by_staff_id (optional)
     * @param  string $last_modified_by_staff_username (optional)
     * @param  string $last_modified_by_staff_title (optional)
     * @param  string $last_modified_by_staff_first_name (optional)
     * @param  string $last_modified_by_staff_surname (optional)
     * @param  string $note_text (optional)
     * @param  \Jiwa\Model\SalesOrderNotePATCHRequest $body (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function salesOrderNotePATCHRequestInvoiceIDNotesNoteIDUpdateAsyncWithHttpInfo($accept, $invoice_id, $note_id, $jiwa_stateful = null, $note_type = null, $line_no = null, $last_saved_date_time = null, $last_modified_by_staff_id = null, $last_modified_by_staff_username = null, $last_modified_by_staff_title = null, $last_modified_by_staff_first_name = null, $last_modified_by_staff_surname = null, $note_text = null, $body = null)
    {
        $returnType = '\Jiwa\Model\Note';
        $request = $this->salesOrderNotePATCHRequestInvoiceIDNotesNoteIDUpdateRequest($accept, $invoice_id, $note_id, $jiwa_stateful, $note_type, $line_no, $last_saved_date_time, $last_modified_by_staff_id, $last_modified_by_staff_username, $last_modified_by_staff_title, $last_modified_by_staff_first_name, $last_modified_by_staff_surname, $note_text, $body);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'salesOrderNotePATCHRequestInvoiceIDNotesNoteIDUpdate'
     *
     * @param  string $accept Accept Header (required)
     * @param  string $invoice_id (required)
     * @param  string $note_id (required)
     * @param  bool $jiwa_stateful Stateful indicator (optional)
     * @param  string $note_type (optional)
     * @param  int $line_no (optional)
     * @param  \DateTime $last_saved_date_time (optional)
     * @param  string $last_modified_by_staff_id (optional)
     * @param  string $last_modified_by_staff_username (optional)
     * @param  string $last_modified_by_staff_title (optional)
     * @param  string $last_modified_by_staff_first_name (optional)
     * @param  string $last_modified_by_staff_surname (optional)
     * @param  string $note_text (optional)
     * @param  \Jiwa\Model\SalesOrderNotePATCHRequest $body (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function salesOrderNotePATCHRequestInvoiceIDNotesNoteIDUpdateRequest($accept, $invoice_id, $note_id, $jiwa_stateful = null, $note_type = null, $line_no = null, $last_saved_date_time = null, $last_modified_by_staff_id = null, $last_modified_by_staff_username = null, $last_modified_by_staff_title = null, $last_modified_by_staff_first_name = null, $last_modified_by_staff_surname = null, $note_text = null, $body = null)
    {
        // verify the required parameter 'accept' is set
        if ($accept === null || (is_array($accept) && count($accept) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $accept when calling salesOrderNotePATCHRequestInvoiceIDNotesNoteIDUpdate'
            );
        }
        // verify the required parameter 'invoice_id' is set
        if ($invoice_id === null || (is_array($invoice_id) && count($invoice_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $invoice_id when calling salesOrderNotePATCHRequestInvoiceIDNotesNoteIDUpdate'
            );
        }
        // verify the required parameter 'note_id' is set
        if ($note_id === null || (is_array($note_id) && count($note_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $note_id when calling salesOrderNotePATCHRequestInvoiceIDNotesNoteIDUpdate'
            );
        }

        $resourcePath = '/SalesOrders/{InvoiceID}/Notes/{NoteID}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        if ($note_type !== null) {
            $queryParams['NoteType'] = ObjectSerializer::toQueryValue($note_type);
        }
        // query params
        if ($line_no !== null) {
            $queryParams['LineNo'] = ObjectSerializer::toQueryValue($line_no);
        }
        // query params
        if ($last_saved_date_time !== null) {
            $queryParams['LastSavedDateTime'] = ObjectSerializer::toQueryValue($last_saved_date_time);
        }
        // query params
        if ($last_modified_by_staff_id !== null) {
            $queryParams['LastModifiedByStaffID'] = ObjectSerializer::toQueryValue($last_modified_by_staff_id);
        }
        // query params
        if ($last_modified_by_staff_username !== null) {
            $queryParams['LastModifiedByStaffUsername'] = ObjectSerializer::toQueryValue($last_modified_by_staff_username);
        }
        // query params
        if ($last_modified_by_staff_title !== null) {
            $queryParams['LastModifiedByStaffTitle'] = ObjectSerializer::toQueryValue($last_modified_by_staff_title);
        }
        // query params
        if ($last_modified_by_staff_first_name !== null) {
            $queryParams['LastModifiedByStaffFirstName'] = ObjectSerializer::toQueryValue($last_modified_by_staff_first_name);
        }
        // query params
        if ($last_modified_by_staff_surname !== null) {
            $queryParams['LastModifiedByStaffSurname'] = ObjectSerializer::toQueryValue($last_modified_by_staff_surname);
        }
        // query params
        if ($note_text !== null) {
            $queryParams['NoteText'] = ObjectSerializer::toQueryValue($note_text);
        }
        // header params
        if ($accept !== null) {
            $headerParams['Accept'] = ObjectSerializer::toHeaderValue($accept);
        }
        // header params
        if ($jiwa_stateful !== null) {
            $headerParams['jiwa-stateful'] = ObjectSerializer::toHeaderValue($jiwa_stateful);
        }

        // path params
        if ($invoice_id !== null) {
            $resourcePath = str_replace(
                '{' . 'InvoiceID' . '}',
                ObjectSerializer::toPathValue($invoice_id),
                $resourcePath
            );
        }
        // path params
        if ($note_id !== null) {
            $resourcePath = str_replace(
                '{' . 'NoteID' . '}',
                ObjectSerializer::toPathValue($note_id),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;
        if (isset($body)) {
            $_tempBody = $body;
        }

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json', 'application/xml']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json', 'application/xml'],
                ['application/x-www-form-urlencoded', 'application/json', 'application/xml']
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            
            if($headers['Content-Type'] === 'application/json') {
                // \stdClass has no __toString(), so we should encode it manually
                if ($httpBody instanceof \stdClass) {
                    $httpBody = \GuzzleHttp\json_encode($httpBody);
                }
                // array has no __toString(), so we should encode it manually
                if(is_array($httpBody)) {
                    $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($httpBody));
                }
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\Query::build($formParams);
            }
        }

        // this endpoint requires HTTP basic authentication
        if ($this->config->getUsername() !== null || $this->config->getPassword() !== null) {
            $headers['Authorization'] = 'Basic ' . base64_encode($this->config->getUsername() . ":" . $this->config->getPassword());
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\Query::build($queryParams);
        return new Request(
            'PATCH',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation salesOrderNotePOSTRequestInvoiceIDNotesPost
     *
     * Appends a note to a sales order.
     *
     * @param  string $accept Accept Header (required)
     * @param  string $invoice_id invoice_id (required)
     * @param  bool $jiwa_stateful Stateful indicator (optional)
     * @param  string $note_type note_type (optional)
     * @param  int $line_no line_no (optional)
     * @param  \DateTime $last_saved_date_time last_saved_date_time (optional)
     * @param  string $last_modified_by_staff_id last_modified_by_staff_id (optional)
     * @param  string $last_modified_by_staff_username last_modified_by_staff_username (optional)
     * @param  string $last_modified_by_staff_title last_modified_by_staff_title (optional)
     * @param  string $last_modified_by_staff_first_name last_modified_by_staff_first_name (optional)
     * @param  string $last_modified_by_staff_surname last_modified_by_staff_surname (optional)
     * @param  string $note_text note_text (optional)
     * @param  \Jiwa\Model\SalesOrderNotePOSTRequest $body body (optional)
     *
     * @throws \Jiwa\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Jiwa\Model\Note
     */
    public function salesOrderNotePOSTRequestInvoiceIDNotesPost($accept, $invoice_id, $jiwa_stateful = null, $note_type = null, $line_no = null, $last_saved_date_time = null, $last_modified_by_staff_id = null, $last_modified_by_staff_username = null, $last_modified_by_staff_title = null, $last_modified_by_staff_first_name = null, $last_modified_by_staff_surname = null, $note_text = null, $body = null)
    {
        list($response) = $this->salesOrderNotePOSTRequestInvoiceIDNotesPostWithHttpInfo($accept, $invoice_id, $jiwa_stateful, $note_type, $line_no, $last_saved_date_time, $last_modified_by_staff_id, $last_modified_by_staff_username, $last_modified_by_staff_title, $last_modified_by_staff_first_name, $last_modified_by_staff_surname, $note_text, $body);
        return $response;
    }

    /**
     * Operation salesOrderNotePOSTRequestInvoiceIDNotesPostWithHttpInfo
     *
     * Appends a note to a sales order.
     *
     * @param  string $accept Accept Header (required)
     * @param  string $invoice_id (required)
     * @param  bool $jiwa_stateful Stateful indicator (optional)
     * @param  string $note_type (optional)
     * @param  int $line_no (optional)
     * @param  \DateTime $last_saved_date_time (optional)
     * @param  string $last_modified_by_staff_id (optional)
     * @param  string $last_modified_by_staff_username (optional)
     * @param  string $last_modified_by_staff_title (optional)
     * @param  string $last_modified_by_staff_first_name (optional)
     * @param  string $last_modified_by_staff_surname (optional)
     * @param  string $note_text (optional)
     * @param  \Jiwa\Model\SalesOrderNotePOSTRequest $body (optional)
     *
     * @throws \Jiwa\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Jiwa\Model\Note, HTTP status code, HTTP response headers (array of strings)
     */
    public function salesOrderNotePOSTRequestInvoiceIDNotesPostWithHttpInfo($accept, $invoice_id, $jiwa_stateful = null, $note_type = null, $line_no = null, $last_saved_date_time = null, $last_modified_by_staff_id = null, $last_modified_by_staff_username = null, $last_modified_by_staff_title = null, $last_modified_by_staff_first_name = null, $last_modified_by_staff_surname = null, $note_text = null, $body = null)
    {
        $returnType = '\Jiwa\Model\Note';
        $request = $this->salesOrderNotePOSTRequestInvoiceIDNotesPostRequest($accept, $invoice_id, $jiwa_stateful, $note_type, $line_no, $last_saved_date_time, $last_modified_by_staff_id, $last_modified_by_staff_username, $last_modified_by_staff_title, $last_modified_by_staff_first_name, $last_modified_by_staff_surname, $note_text, $body);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Jiwa\Model\Note',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 403:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Jiwa\Model\Note',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 401:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Jiwa\Model\Note',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 404:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Jiwa\Model\Note',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 201:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Jiwa\Model\Note',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation salesOrderNotePOSTRequestInvoiceIDNotesPostAsync
     *
     * Appends a note to a sales order.
     *
     * @param  string $accept Accept Header (required)
     * @param  string $invoice_id (required)
     * @param  bool $jiwa_stateful Stateful indicator (optional)
     * @param  string $note_type (optional)
     * @param  int $line_no (optional)
     * @param  \DateTime $last_saved_date_time (optional)
     * @param  string $last_modified_by_staff_id (optional)
     * @param  string $last_modified_by_staff_username (optional)
     * @param  string $last_modified_by_staff_title (optional)
     * @param  string $last_modified_by_staff_first_name (optional)
     * @param  string $last_modified_by_staff_surname (optional)
     * @param  string $note_text (optional)
     * @param  \Jiwa\Model\SalesOrderNotePOSTRequest $body (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function salesOrderNotePOSTRequestInvoiceIDNotesPostAsync($accept, $invoice_id, $jiwa_stateful = null, $note_type = null, $line_no = null, $last_saved_date_time = null, $last_modified_by_staff_id = null, $last_modified_by_staff_username = null, $last_modified_by_staff_title = null, $last_modified_by_staff_first_name = null, $last_modified_by_staff_surname = null, $note_text = null, $body = null)
    {
        return $this->salesOrderNotePOSTRequestInvoiceIDNotesPostAsyncWithHttpInfo($accept, $invoice_id, $jiwa_stateful, $note_type, $line_no, $last_saved_date_time, $last_modified_by_staff_id, $last_modified_by_staff_username, $last_modified_by_staff_title, $last_modified_by_staff_first_name, $last_modified_by_staff_surname, $note_text, $body)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation salesOrderNotePOSTRequestInvoiceIDNotesPostAsyncWithHttpInfo
     *
     * Appends a note to a sales order.
     *
     * @param  string $accept Accept Header (required)
     * @param  string $invoice_id (required)
     * @param  bool $jiwa_stateful Stateful indicator (optional)
     * @param  string $note_type (optional)
     * @param  int $line_no (optional)
     * @param  \DateTime $last_saved_date_time (optional)
     * @param  string $last_modified_by_staff_id (optional)
     * @param  string $last_modified_by_staff_username (optional)
     * @param  string $last_modified_by_staff_title (optional)
     * @param  string $last_modified_by_staff_first_name (optional)
     * @param  string $last_modified_by_staff_surname (optional)
     * @param  string $note_text (optional)
     * @param  \Jiwa\Model\SalesOrderNotePOSTRequest $body (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function salesOrderNotePOSTRequestInvoiceIDNotesPostAsyncWithHttpInfo($accept, $invoice_id, $jiwa_stateful = null, $note_type = null, $line_no = null, $last_saved_date_time = null, $last_modified_by_staff_id = null, $last_modified_by_staff_username = null, $last_modified_by_staff_title = null, $last_modified_by_staff_first_name = null, $last_modified_by_staff_surname = null, $note_text = null, $body = null)
    {
        $returnType = '\Jiwa\Model\Note';
        $request = $this->salesOrderNotePOSTRequestInvoiceIDNotesPostRequest($accept, $invoice_id, $jiwa_stateful, $note_type, $line_no, $last_saved_date_time, $last_modified_by_staff_id, $last_modified_by_staff_username, $last_modified_by_staff_title, $last_modified_by_staff_first_name, $last_modified_by_staff_surname, $note_text, $body);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'salesOrderNotePOSTRequestInvoiceIDNotesPost'
     *
     * @param  string $accept Accept Header (required)
     * @param  string $invoice_id (required)
     * @param  bool $jiwa_stateful Stateful indicator (optional)
     * @param  string $note_type (optional)
     * @param  int $line_no (optional)
     * @param  \DateTime $last_saved_date_time (optional)
     * @param  string $last_modified_by_staff_id (optional)
     * @param  string $last_modified_by_staff_username (optional)
     * @param  string $last_modified_by_staff_title (optional)
     * @param  string $last_modified_by_staff_first_name (optional)
     * @param  string $last_modified_by_staff_surname (optional)
     * @param  string $note_text (optional)
     * @param  \Jiwa\Model\SalesOrderNotePOSTRequest $body (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function salesOrderNotePOSTRequestInvoiceIDNotesPostRequest($accept, $invoice_id, $jiwa_stateful = null, $note_type = null, $line_no = null, $last_saved_date_time = null, $last_modified_by_staff_id = null, $last_modified_by_staff_username = null, $last_modified_by_staff_title = null, $last_modified_by_staff_first_name = null, $last_modified_by_staff_surname = null, $note_text = null, $body = null)
    {
        // verify the required parameter 'accept' is set
        if ($accept === null || (is_array($accept) && count($accept) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $accept when calling salesOrderNotePOSTRequestInvoiceIDNotesPost'
            );
        }
        // verify the required parameter 'invoice_id' is set
        if ($invoice_id === null || (is_array($invoice_id) && count($invoice_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $invoice_id when calling salesOrderNotePOSTRequestInvoiceIDNotesPost'
            );
        }

        $resourcePath = '/SalesOrders/{InvoiceID}/Notes';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        if ($note_type !== null) {
            $queryParams['NoteType'] = ObjectSerializer::toQueryValue($note_type);
        }
        // query params
        if ($line_no !== null) {
            $queryParams['LineNo'] = ObjectSerializer::toQueryValue($line_no);
        }
        // query params
        if ($last_saved_date_time !== null) {
            $queryParams['LastSavedDateTime'] = ObjectSerializer::toQueryValue($last_saved_date_time);
        }
        // query params
        if ($last_modified_by_staff_id !== null) {
            $queryParams['LastModifiedByStaffID'] = ObjectSerializer::toQueryValue($last_modified_by_staff_id);
        }
        // query params
        if ($last_modified_by_staff_username !== null) {
            $queryParams['LastModifiedByStaffUsername'] = ObjectSerializer::toQueryValue($last_modified_by_staff_username);
        }
        // query params
        if ($last_modified_by_staff_title !== null) {
            $queryParams['LastModifiedByStaffTitle'] = ObjectSerializer::toQueryValue($last_modified_by_staff_title);
        }
        // query params
        if ($last_modified_by_staff_first_name !== null) {
            $queryParams['LastModifiedByStaffFirstName'] = ObjectSerializer::toQueryValue($last_modified_by_staff_first_name);
        }
        // query params
        if ($last_modified_by_staff_surname !== null) {
            $queryParams['LastModifiedByStaffSurname'] = ObjectSerializer::toQueryValue($last_modified_by_staff_surname);
        }
        // query params
        if ($note_text !== null) {
            $queryParams['NoteText'] = ObjectSerializer::toQueryValue($note_text);
        }
        // header params
        if ($accept !== null) {
            $headerParams['Accept'] = ObjectSerializer::toHeaderValue($accept);
        }
        // header params
        if ($jiwa_stateful !== null) {
            $headerParams['jiwa-stateful'] = ObjectSerializer::toHeaderValue($jiwa_stateful);
        }

        // path params
        if ($invoice_id !== null) {
            $resourcePath = str_replace(
                '{' . 'InvoiceID' . '}',
                ObjectSerializer::toPathValue($invoice_id),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;
        if (isset($body)) {
            $_tempBody = $body;
        }

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json', 'application/xml']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json', 'application/xml'],
                ['application/x-www-form-urlencoded', 'application/json', 'application/xml']
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            
            if($headers['Content-Type'] === 'application/json') {
                // \stdClass has no __toString(), so we should encode it manually
                if ($httpBody instanceof \stdClass) {
                    $httpBody = \GuzzleHttp\json_encode($httpBody);
                }
                // array has no __toString(), so we should encode it manually
                if(is_array($httpBody)) {
                    $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($httpBody));
                }
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\Query::build($formParams);
            }
        }

        // this endpoint requires HTTP basic authentication
        if ($this->config->getUsername() !== null || $this->config->getPassword() !== null) {
            $headers['Authorization'] = 'Basic ' . base64_encode($this->config->getUsername() . ":" . $this->config->getPassword());
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\Query::build($queryParams);
        return new Request(
            'POST',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation salesOrderNoteTypeDELETERequestNoteTypesNoteTypeIDDelete
     *
     * Deletes a sales order note type.
     *
     * @param  string $accept Accept Header (required)
     * @param  string $note_type_id note_type_id (required)
     * @param  bool $jiwa_stateful Stateful indicator (optional)
     *
     * @throws \Jiwa\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Jiwa\Model\Object
     */
    public function salesOrderNoteTypeDELETERequestNoteTypesNoteTypeIDDelete($accept, $note_type_id, $jiwa_stateful = null)
    {
        list($response) = $this->salesOrderNoteTypeDELETERequestNoteTypesNoteTypeIDDeleteWithHttpInfo($accept, $note_type_id, $jiwa_stateful);
        return $response;
    }

    /**
     * Operation salesOrderNoteTypeDELETERequestNoteTypesNoteTypeIDDeleteWithHttpInfo
     *
     * Deletes a sales order note type.
     *
     * @param  string $accept Accept Header (required)
     * @param  string $note_type_id (required)
     * @param  bool $jiwa_stateful Stateful indicator (optional)
     *
     * @throws \Jiwa\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Jiwa\Model\Object, HTTP status code, HTTP response headers (array of strings)
     */
    public function salesOrderNoteTypeDELETERequestNoteTypesNoteTypeIDDeleteWithHttpInfo($accept, $note_type_id, $jiwa_stateful = null)
    {
        $returnType = '\Jiwa\Model\Object';
        $request = $this->salesOrderNoteTypeDELETERequestNoteTypesNoteTypeIDDeleteRequest($accept, $note_type_id, $jiwa_stateful);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Jiwa\Model\Object',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 404:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Jiwa\Model\Object',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 204:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Jiwa\Model\Object',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 401:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Jiwa\Model\Object',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 403:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Jiwa\Model\Object',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation salesOrderNoteTypeDELETERequestNoteTypesNoteTypeIDDeleteAsync
     *
     * Deletes a sales order note type.
     *
     * @param  string $accept Accept Header (required)
     * @param  string $note_type_id (required)
     * @param  bool $jiwa_stateful Stateful indicator (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function salesOrderNoteTypeDELETERequestNoteTypesNoteTypeIDDeleteAsync($accept, $note_type_id, $jiwa_stateful = null)
    {
        return $this->salesOrderNoteTypeDELETERequestNoteTypesNoteTypeIDDeleteAsyncWithHttpInfo($accept, $note_type_id, $jiwa_stateful)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation salesOrderNoteTypeDELETERequestNoteTypesNoteTypeIDDeleteAsyncWithHttpInfo
     *
     * Deletes a sales order note type.
     *
     * @param  string $accept Accept Header (required)
     * @param  string $note_type_id (required)
     * @param  bool $jiwa_stateful Stateful indicator (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function salesOrderNoteTypeDELETERequestNoteTypesNoteTypeIDDeleteAsyncWithHttpInfo($accept, $note_type_id, $jiwa_stateful = null)
    {
        $returnType = '\Jiwa\Model\Object';
        $request = $this->salesOrderNoteTypeDELETERequestNoteTypesNoteTypeIDDeleteRequest($accept, $note_type_id, $jiwa_stateful);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'salesOrderNoteTypeDELETERequestNoteTypesNoteTypeIDDelete'
     *
     * @param  string $accept Accept Header (required)
     * @param  string $note_type_id (required)
     * @param  bool $jiwa_stateful Stateful indicator (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function salesOrderNoteTypeDELETERequestNoteTypesNoteTypeIDDeleteRequest($accept, $note_type_id, $jiwa_stateful = null)
    {
        // verify the required parameter 'accept' is set
        if ($accept === null || (is_array($accept) && count($accept) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $accept when calling salesOrderNoteTypeDELETERequestNoteTypesNoteTypeIDDelete'
            );
        }
        // verify the required parameter 'note_type_id' is set
        if ($note_type_id === null || (is_array($note_type_id) && count($note_type_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $note_type_id when calling salesOrderNoteTypeDELETERequestNoteTypesNoteTypeIDDelete'
            );
        }

        $resourcePath = '/SalesOrders/NoteTypes/{NoteTypeID}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // header params
        if ($accept !== null) {
            $headerParams['Accept'] = ObjectSerializer::toHeaderValue($accept);
        }
        // header params
        if ($jiwa_stateful !== null) {
            $headerParams['jiwa-stateful'] = ObjectSerializer::toHeaderValue($jiwa_stateful);
        }

        // path params
        if ($note_type_id !== null) {
            $resourcePath = str_replace(
                '{' . 'NoteTypeID' . '}',
                ObjectSerializer::toPathValue($note_type_id),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json', 'application/xml']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json', 'application/xml'],
                ['application/x-www-form-urlencoded', 'application/json', 'application/xml']
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            
            if($headers['Content-Type'] === 'application/json') {
                // \stdClass has no __toString(), so we should encode it manually
                if ($httpBody instanceof \stdClass) {
                    $httpBody = \GuzzleHttp\json_encode($httpBody);
                }
                // array has no __toString(), so we should encode it manually
                if(is_array($httpBody)) {
                    $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($httpBody));
                }
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\Query::build($formParams);
            }
        }

        // this endpoint requires HTTP basic authentication
        if ($this->config->getUsername() !== null || $this->config->getPassword() !== null) {
            $headers['Authorization'] = 'Basic ' . base64_encode($this->config->getUsername() . ":" . $this->config->getPassword());
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\Query::build($queryParams);
        return new Request(
            'DELETE',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation salesOrderNoteTypeGETRequestNoteTypesNoteTypeIDGet
     *
     * Retrieves a sales order note type.
     *
     * @param  string $accept Accept Header (required)
     * @param  string $note_type_id note_type_id (required)
     * @param  bool $jiwa_stateful Stateful indicator (optional)
     *
     * @throws \Jiwa\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Jiwa\Model\NoteType
     */
    public function salesOrderNoteTypeGETRequestNoteTypesNoteTypeIDGet($accept, $note_type_id, $jiwa_stateful = null)
    {
        list($response) = $this->salesOrderNoteTypeGETRequestNoteTypesNoteTypeIDGetWithHttpInfo($accept, $note_type_id, $jiwa_stateful);
        return $response;
    }

    /**
     * Operation salesOrderNoteTypeGETRequestNoteTypesNoteTypeIDGetWithHttpInfo
     *
     * Retrieves a sales order note type.
     *
     * @param  string $accept Accept Header (required)
     * @param  string $note_type_id (required)
     * @param  bool $jiwa_stateful Stateful indicator (optional)
     *
     * @throws \Jiwa\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Jiwa\Model\NoteType, HTTP status code, HTTP response headers (array of strings)
     */
    public function salesOrderNoteTypeGETRequestNoteTypesNoteTypeIDGetWithHttpInfo($accept, $note_type_id, $jiwa_stateful = null)
    {
        $returnType = '\Jiwa\Model\NoteType';
        $request = $this->salesOrderNoteTypeGETRequestNoteTypesNoteTypeIDGetRequest($accept, $note_type_id, $jiwa_stateful);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Jiwa\Model\NoteType',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 403:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Jiwa\Model\NoteType',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 401:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Jiwa\Model\NoteType',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 404:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Jiwa\Model\NoteType',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation salesOrderNoteTypeGETRequestNoteTypesNoteTypeIDGetAsync
     *
     * Retrieves a sales order note type.
     *
     * @param  string $accept Accept Header (required)
     * @param  string $note_type_id (required)
     * @param  bool $jiwa_stateful Stateful indicator (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function salesOrderNoteTypeGETRequestNoteTypesNoteTypeIDGetAsync($accept, $note_type_id, $jiwa_stateful = null)
    {
        return $this->salesOrderNoteTypeGETRequestNoteTypesNoteTypeIDGetAsyncWithHttpInfo($accept, $note_type_id, $jiwa_stateful)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation salesOrderNoteTypeGETRequestNoteTypesNoteTypeIDGetAsyncWithHttpInfo
     *
     * Retrieves a sales order note type.
     *
     * @param  string $accept Accept Header (required)
     * @param  string $note_type_id (required)
     * @param  bool $jiwa_stateful Stateful indicator (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function salesOrderNoteTypeGETRequestNoteTypesNoteTypeIDGetAsyncWithHttpInfo($accept, $note_type_id, $jiwa_stateful = null)
    {
        $returnType = '\Jiwa\Model\NoteType';
        $request = $this->salesOrderNoteTypeGETRequestNoteTypesNoteTypeIDGetRequest($accept, $note_type_id, $jiwa_stateful);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'salesOrderNoteTypeGETRequestNoteTypesNoteTypeIDGet'
     *
     * @param  string $accept Accept Header (required)
     * @param  string $note_type_id (required)
     * @param  bool $jiwa_stateful Stateful indicator (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function salesOrderNoteTypeGETRequestNoteTypesNoteTypeIDGetRequest($accept, $note_type_id, $jiwa_stateful = null)
    {
        // verify the required parameter 'accept' is set
        if ($accept === null || (is_array($accept) && count($accept) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $accept when calling salesOrderNoteTypeGETRequestNoteTypesNoteTypeIDGet'
            );
        }
        // verify the required parameter 'note_type_id' is set
        if ($note_type_id === null || (is_array($note_type_id) && count($note_type_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $note_type_id when calling salesOrderNoteTypeGETRequestNoteTypesNoteTypeIDGet'
            );
        }

        $resourcePath = '/SalesOrders/NoteTypes/{NoteTypeID}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // header params
        if ($accept !== null) {
            $headerParams['Accept'] = ObjectSerializer::toHeaderValue($accept);
        }
        // header params
        if ($jiwa_stateful !== null) {
            $headerParams['jiwa-stateful'] = ObjectSerializer::toHeaderValue($jiwa_stateful);
        }

        // path params
        if ($note_type_id !== null) {
            $resourcePath = str_replace(
                '{' . 'NoteTypeID' . '}',
                ObjectSerializer::toPathValue($note_type_id),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json', 'application/xml']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json', 'application/xml'],
                ['application/x-www-form-urlencoded', 'application/json', 'application/xml']
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            
            if($headers['Content-Type'] === 'application/json') {
                // \stdClass has no __toString(), so we should encode it manually
                if ($httpBody instanceof \stdClass) {
                    $httpBody = \GuzzleHttp\json_encode($httpBody);
                }
                // array has no __toString(), so we should encode it manually
                if(is_array($httpBody)) {
                    $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($httpBody));
                }
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\Query::build($formParams);
            }
        }

        // this endpoint requires HTTP basic authentication
        if ($this->config->getUsername() !== null || $this->config->getPassword() !== null) {
            $headers['Authorization'] = 'Basic ' . base64_encode($this->config->getUsername() . ":" . $this->config->getPassword());
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\Query::build($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation salesOrderNoteTypePATCHRequestNoteTypesNoteTypeIDUpdate
     *
     * Updates a sales order note type.
     *
     * @param  string $accept Accept Header (required)
     * @param  string $note_type_id note_type_id (required)
     * @param  bool $jiwa_stateful Stateful indicator (optional)
     * @param  string $description description (optional)
     * @param  bool $default_type default_type (optional)
     * @param  int $item_no item_no (optional)
     * @param  \Jiwa\Model\SalesOrderNoteTypePATCHRequest $body body (optional)
     *
     * @throws \Jiwa\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Jiwa\Model\NoteType
     */
    public function salesOrderNoteTypePATCHRequestNoteTypesNoteTypeIDUpdate($accept, $note_type_id, $jiwa_stateful = null, $description = null, $default_type = null, $item_no = null, $body = null)
    {
        list($response) = $this->salesOrderNoteTypePATCHRequestNoteTypesNoteTypeIDUpdateWithHttpInfo($accept, $note_type_id, $jiwa_stateful, $description, $default_type, $item_no, $body);
        return $response;
    }

    /**
     * Operation salesOrderNoteTypePATCHRequestNoteTypesNoteTypeIDUpdateWithHttpInfo
     *
     * Updates a sales order note type.
     *
     * @param  string $accept Accept Header (required)
     * @param  string $note_type_id (required)
     * @param  bool $jiwa_stateful Stateful indicator (optional)
     * @param  string $description (optional)
     * @param  bool $default_type (optional)
     * @param  int $item_no (optional)
     * @param  \Jiwa\Model\SalesOrderNoteTypePATCHRequest $body (optional)
     *
     * @throws \Jiwa\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Jiwa\Model\NoteType, HTTP status code, HTTP response headers (array of strings)
     */
    public function salesOrderNoteTypePATCHRequestNoteTypesNoteTypeIDUpdateWithHttpInfo($accept, $note_type_id, $jiwa_stateful = null, $description = null, $default_type = null, $item_no = null, $body = null)
    {
        $returnType = '\Jiwa\Model\NoteType';
        $request = $this->salesOrderNoteTypePATCHRequestNoteTypesNoteTypeIDUpdateRequest($accept, $note_type_id, $jiwa_stateful, $description, $default_type, $item_no, $body);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Jiwa\Model\NoteType',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 403:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Jiwa\Model\NoteType',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 404:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Jiwa\Model\NoteType',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 401:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Jiwa\Model\NoteType',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation salesOrderNoteTypePATCHRequestNoteTypesNoteTypeIDUpdateAsync
     *
     * Updates a sales order note type.
     *
     * @param  string $accept Accept Header (required)
     * @param  string $note_type_id (required)
     * @param  bool $jiwa_stateful Stateful indicator (optional)
     * @param  string $description (optional)
     * @param  bool $default_type (optional)
     * @param  int $item_no (optional)
     * @param  \Jiwa\Model\SalesOrderNoteTypePATCHRequest $body (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function salesOrderNoteTypePATCHRequestNoteTypesNoteTypeIDUpdateAsync($accept, $note_type_id, $jiwa_stateful = null, $description = null, $default_type = null, $item_no = null, $body = null)
    {
        return $this->salesOrderNoteTypePATCHRequestNoteTypesNoteTypeIDUpdateAsyncWithHttpInfo($accept, $note_type_id, $jiwa_stateful, $description, $default_type, $item_no, $body)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation salesOrderNoteTypePATCHRequestNoteTypesNoteTypeIDUpdateAsyncWithHttpInfo
     *
     * Updates a sales order note type.
     *
     * @param  string $accept Accept Header (required)
     * @param  string $note_type_id (required)
     * @param  bool $jiwa_stateful Stateful indicator (optional)
     * @param  string $description (optional)
     * @param  bool $default_type (optional)
     * @param  int $item_no (optional)
     * @param  \Jiwa\Model\SalesOrderNoteTypePATCHRequest $body (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function salesOrderNoteTypePATCHRequestNoteTypesNoteTypeIDUpdateAsyncWithHttpInfo($accept, $note_type_id, $jiwa_stateful = null, $description = null, $default_type = null, $item_no = null, $body = null)
    {
        $returnType = '\Jiwa\Model\NoteType';
        $request = $this->salesOrderNoteTypePATCHRequestNoteTypesNoteTypeIDUpdateRequest($accept, $note_type_id, $jiwa_stateful, $description, $default_type, $item_no, $body);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'salesOrderNoteTypePATCHRequestNoteTypesNoteTypeIDUpdate'
     *
     * @param  string $accept Accept Header (required)
     * @param  string $note_type_id (required)
     * @param  bool $jiwa_stateful Stateful indicator (optional)
     * @param  string $description (optional)
     * @param  bool $default_type (optional)
     * @param  int $item_no (optional)
     * @param  \Jiwa\Model\SalesOrderNoteTypePATCHRequest $body (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function salesOrderNoteTypePATCHRequestNoteTypesNoteTypeIDUpdateRequest($accept, $note_type_id, $jiwa_stateful = null, $description = null, $default_type = null, $item_no = null, $body = null)
    {
        // verify the required parameter 'accept' is set
        if ($accept === null || (is_array($accept) && count($accept) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $accept when calling salesOrderNoteTypePATCHRequestNoteTypesNoteTypeIDUpdate'
            );
        }
        // verify the required parameter 'note_type_id' is set
        if ($note_type_id === null || (is_array($note_type_id) && count($note_type_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $note_type_id when calling salesOrderNoteTypePATCHRequestNoteTypesNoteTypeIDUpdate'
            );
        }

        $resourcePath = '/SalesOrders/NoteTypes/{NoteTypeID}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        if ($description !== null) {
            $queryParams['Description'] = ObjectSerializer::toQueryValue($description);
        }
        // query params
        if ($default_type !== null) {
            $queryParams['DefaultType'] = ObjectSerializer::toQueryValue($default_type);
        }
        // query params
        if ($item_no !== null) {
            $queryParams['ItemNo'] = ObjectSerializer::toQueryValue($item_no);
        }
        // header params
        if ($accept !== null) {
            $headerParams['Accept'] = ObjectSerializer::toHeaderValue($accept);
        }
        // header params
        if ($jiwa_stateful !== null) {
            $headerParams['jiwa-stateful'] = ObjectSerializer::toHeaderValue($jiwa_stateful);
        }

        // path params
        if ($note_type_id !== null) {
            $resourcePath = str_replace(
                '{' . 'NoteTypeID' . '}',
                ObjectSerializer::toPathValue($note_type_id),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;
        if (isset($body)) {
            $_tempBody = $body;
        }

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json', 'application/xml']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json', 'application/xml'],
                ['application/x-www-form-urlencoded', 'application/json', 'application/xml']
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            
            if($headers['Content-Type'] === 'application/json') {
                // \stdClass has no __toString(), so we should encode it manually
                if ($httpBody instanceof \stdClass) {
                    $httpBody = \GuzzleHttp\json_encode($httpBody);
                }
                // array has no __toString(), so we should encode it manually
                if(is_array($httpBody)) {
                    $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($httpBody));
                }
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\Query::build($formParams);
            }
        }

        // this endpoint requires HTTP basic authentication
        if ($this->config->getUsername() !== null || $this->config->getPassword() !== null) {
            $headers['Authorization'] = 'Basic ' . base64_encode($this->config->getUsername() . ":" . $this->config->getPassword());
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\Query::build($queryParams);
        return new Request(
            'PATCH',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation salesOrderNoteTypePOSTRequestNoteTypesPost
     *
     * Creates a new sales order note type.
     *
     * @param  string $accept Accept Header (required)
     * @param  bool $jiwa_stateful Stateful indicator (optional)
     * @param  string $description description (optional)
     * @param  bool $default_type default_type (optional)
     * @param  int $item_no item_no (optional)
     * @param  \Jiwa\Model\SalesOrderNoteTypePOSTRequest $body body (optional)
     *
     * @throws \Jiwa\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Jiwa\Model\NoteType
     */
    public function salesOrderNoteTypePOSTRequestNoteTypesPost($accept, $jiwa_stateful = null, $description = null, $default_type = null, $item_no = null, $body = null)
    {
        list($response) = $this->salesOrderNoteTypePOSTRequestNoteTypesPostWithHttpInfo($accept, $jiwa_stateful, $description, $default_type, $item_no, $body);
        return $response;
    }

    /**
     * Operation salesOrderNoteTypePOSTRequestNoteTypesPostWithHttpInfo
     *
     * Creates a new sales order note type.
     *
     * @param  string $accept Accept Header (required)
     * @param  bool $jiwa_stateful Stateful indicator (optional)
     * @param  string $description (optional)
     * @param  bool $default_type (optional)
     * @param  int $item_no (optional)
     * @param  \Jiwa\Model\SalesOrderNoteTypePOSTRequest $body (optional)
     *
     * @throws \Jiwa\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Jiwa\Model\NoteType, HTTP status code, HTTP response headers (array of strings)
     */
    public function salesOrderNoteTypePOSTRequestNoteTypesPostWithHttpInfo($accept, $jiwa_stateful = null, $description = null, $default_type = null, $item_no = null, $body = null)
    {
        $returnType = '\Jiwa\Model\NoteType';
        $request = $this->salesOrderNoteTypePOSTRequestNoteTypesPostRequest($accept, $jiwa_stateful, $description, $default_type, $item_no, $body);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Jiwa\Model\NoteType',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 201:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Jiwa\Model\NoteType',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 403:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Jiwa\Model\NoteType',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 401:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Jiwa\Model\NoteType',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation salesOrderNoteTypePOSTRequestNoteTypesPostAsync
     *
     * Creates a new sales order note type.
     *
     * @param  string $accept Accept Header (required)
     * @param  bool $jiwa_stateful Stateful indicator (optional)
     * @param  string $description (optional)
     * @param  bool $default_type (optional)
     * @param  int $item_no (optional)
     * @param  \Jiwa\Model\SalesOrderNoteTypePOSTRequest $body (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function salesOrderNoteTypePOSTRequestNoteTypesPostAsync($accept, $jiwa_stateful = null, $description = null, $default_type = null, $item_no = null, $body = null)
    {
        return $this->salesOrderNoteTypePOSTRequestNoteTypesPostAsyncWithHttpInfo($accept, $jiwa_stateful, $description, $default_type, $item_no, $body)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation salesOrderNoteTypePOSTRequestNoteTypesPostAsyncWithHttpInfo
     *
     * Creates a new sales order note type.
     *
     * @param  string $accept Accept Header (required)
     * @param  bool $jiwa_stateful Stateful indicator (optional)
     * @param  string $description (optional)
     * @param  bool $default_type (optional)
     * @param  int $item_no (optional)
     * @param  \Jiwa\Model\SalesOrderNoteTypePOSTRequest $body (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function salesOrderNoteTypePOSTRequestNoteTypesPostAsyncWithHttpInfo($accept, $jiwa_stateful = null, $description = null, $default_type = null, $item_no = null, $body = null)
    {
        $returnType = '\Jiwa\Model\NoteType';
        $request = $this->salesOrderNoteTypePOSTRequestNoteTypesPostRequest($accept, $jiwa_stateful, $description, $default_type, $item_no, $body);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'salesOrderNoteTypePOSTRequestNoteTypesPost'
     *
     * @param  string $accept Accept Header (required)
     * @param  bool $jiwa_stateful Stateful indicator (optional)
     * @param  string $description (optional)
     * @param  bool $default_type (optional)
     * @param  int $item_no (optional)
     * @param  \Jiwa\Model\SalesOrderNoteTypePOSTRequest $body (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function salesOrderNoteTypePOSTRequestNoteTypesPostRequest($accept, $jiwa_stateful = null, $description = null, $default_type = null, $item_no = null, $body = null)
    {
        // verify the required parameter 'accept' is set
        if ($accept === null || (is_array($accept) && count($accept) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $accept when calling salesOrderNoteTypePOSTRequestNoteTypesPost'
            );
        }

        $resourcePath = '/SalesOrders/NoteTypes';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        if ($description !== null) {
            $queryParams['Description'] = ObjectSerializer::toQueryValue($description);
        }
        // query params
        if ($default_type !== null) {
            $queryParams['DefaultType'] = ObjectSerializer::toQueryValue($default_type);
        }
        // query params
        if ($item_no !== null) {
            $queryParams['ItemNo'] = ObjectSerializer::toQueryValue($item_no);
        }
        // header params
        if ($accept !== null) {
            $headerParams['Accept'] = ObjectSerializer::toHeaderValue($accept);
        }
        // header params
        if ($jiwa_stateful !== null) {
            $headerParams['jiwa-stateful'] = ObjectSerializer::toHeaderValue($jiwa_stateful);
        }


        // body params
        $_tempBody = null;
        if (isset($body)) {
            $_tempBody = $body;
        }

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json', 'application/xml']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json', 'application/xml'],
                ['application/x-www-form-urlencoded', 'application/json', 'application/xml']
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            
            if($headers['Content-Type'] === 'application/json') {
                // \stdClass has no __toString(), so we should encode it manually
                if ($httpBody instanceof \stdClass) {
                    $httpBody = \GuzzleHttp\json_encode($httpBody);
                }
                // array has no __toString(), so we should encode it manually
                if(is_array($httpBody)) {
                    $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($httpBody));
                }
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\Query::build($formParams);
            }
        }

        // this endpoint requires HTTP basic authentication
        if ($this->config->getUsername() !== null || $this->config->getPassword() !== null) {
            $headers['Authorization'] = 'Basic ' . base64_encode($this->config->getUsername() . ":" . $this->config->getPassword());
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\Query::build($queryParams);
        return new Request(
            'POST',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation salesOrderNoteTypesGETManyRequestNoteTypesGet
     *
     * Retrieves a list of sales order note types.
     *
     * @param  string $accept Accept Header (required)
     * @param  bool $jiwa_stateful Stateful indicator (optional)
     *
     * @throws \Jiwa\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Jiwa\Model\NoteType[]
     */
    public function salesOrderNoteTypesGETManyRequestNoteTypesGet($accept, $jiwa_stateful = null)
    {
        list($response) = $this->salesOrderNoteTypesGETManyRequestNoteTypesGetWithHttpInfo($accept, $jiwa_stateful);
        return $response;
    }

    /**
     * Operation salesOrderNoteTypesGETManyRequestNoteTypesGetWithHttpInfo
     *
     * Retrieves a list of sales order note types.
     *
     * @param  string $accept Accept Header (required)
     * @param  bool $jiwa_stateful Stateful indicator (optional)
     *
     * @throws \Jiwa\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Jiwa\Model\NoteType[], HTTP status code, HTTP response headers (array of strings)
     */
    public function salesOrderNoteTypesGETManyRequestNoteTypesGetWithHttpInfo($accept, $jiwa_stateful = null)
    {
        $returnType = '\Jiwa\Model\NoteType[]';
        $request = $this->salesOrderNoteTypesGETManyRequestNoteTypesGetRequest($accept, $jiwa_stateful);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Jiwa\Model\NoteType[]',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 403:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Jiwa\Model\NoteType[]',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 401:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Jiwa\Model\NoteType[]',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation salesOrderNoteTypesGETManyRequestNoteTypesGetAsync
     *
     * Retrieves a list of sales order note types.
     *
     * @param  string $accept Accept Header (required)
     * @param  bool $jiwa_stateful Stateful indicator (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function salesOrderNoteTypesGETManyRequestNoteTypesGetAsync($accept, $jiwa_stateful = null)
    {
        return $this->salesOrderNoteTypesGETManyRequestNoteTypesGetAsyncWithHttpInfo($accept, $jiwa_stateful)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation salesOrderNoteTypesGETManyRequestNoteTypesGetAsyncWithHttpInfo
     *
     * Retrieves a list of sales order note types.
     *
     * @param  string $accept Accept Header (required)
     * @param  bool $jiwa_stateful Stateful indicator (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function salesOrderNoteTypesGETManyRequestNoteTypesGetAsyncWithHttpInfo($accept, $jiwa_stateful = null)
    {
        $returnType = '\Jiwa\Model\NoteType[]';
        $request = $this->salesOrderNoteTypesGETManyRequestNoteTypesGetRequest($accept, $jiwa_stateful);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'salesOrderNoteTypesGETManyRequestNoteTypesGet'
     *
     * @param  string $accept Accept Header (required)
     * @param  bool $jiwa_stateful Stateful indicator (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function salesOrderNoteTypesGETManyRequestNoteTypesGetRequest($accept, $jiwa_stateful = null)
    {
        // verify the required parameter 'accept' is set
        if ($accept === null || (is_array($accept) && count($accept) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $accept when calling salesOrderNoteTypesGETManyRequestNoteTypesGet'
            );
        }

        $resourcePath = '/SalesOrders/NoteTypes';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // header params
        if ($accept !== null) {
            $headerParams['Accept'] = ObjectSerializer::toHeaderValue($accept);
        }
        // header params
        if ($jiwa_stateful !== null) {
            $headerParams['jiwa-stateful'] = ObjectSerializer::toHeaderValue($jiwa_stateful);
        }


        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json', 'application/xml']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json', 'application/xml'],
                ['application/x-www-form-urlencoded', 'application/json', 'application/xml']
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            
            if($headers['Content-Type'] === 'application/json') {
                // \stdClass has no __toString(), so we should encode it manually
                if ($httpBody instanceof \stdClass) {
                    $httpBody = \GuzzleHttp\json_encode($httpBody);
                }
                // array has no __toString(), so we should encode it manually
                if(is_array($httpBody)) {
                    $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($httpBody));
                }
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\Query::build($formParams);
            }
        }

        // this endpoint requires HTTP basic authentication
        if ($this->config->getUsername() !== null || $this->config->getPassword() !== null) {
            $headers['Authorization'] = 'Basic ' . base64_encode($this->config->getUsername() . ":" . $this->config->getPassword());
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\Query::build($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation salesOrderNotesGETManyRequestInvoiceIDNotesGet
     *
     * Retrieves a list of sales order notes.
     *
     * @param  string $accept Accept Header (required)
     * @param  string $invoice_id invoice_id (required)
     * @param  bool $jiwa_stateful Stateful indicator (optional)
     *
     * @throws \Jiwa\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Jiwa\Model\Note[]
     */
    public function salesOrderNotesGETManyRequestInvoiceIDNotesGet($accept, $invoice_id, $jiwa_stateful = null)
    {
        list($response) = $this->salesOrderNotesGETManyRequestInvoiceIDNotesGetWithHttpInfo($accept, $invoice_id, $jiwa_stateful);
        return $response;
    }

    /**
     * Operation salesOrderNotesGETManyRequestInvoiceIDNotesGetWithHttpInfo
     *
     * Retrieves a list of sales order notes.
     *
     * @param  string $accept Accept Header (required)
     * @param  string $invoice_id (required)
     * @param  bool $jiwa_stateful Stateful indicator (optional)
     *
     * @throws \Jiwa\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Jiwa\Model\Note[], HTTP status code, HTTP response headers (array of strings)
     */
    public function salesOrderNotesGETManyRequestInvoiceIDNotesGetWithHttpInfo($accept, $invoice_id, $jiwa_stateful = null)
    {
        $returnType = '\Jiwa\Model\Note[]';
        $request = $this->salesOrderNotesGETManyRequestInvoiceIDNotesGetRequest($accept, $invoice_id, $jiwa_stateful);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Jiwa\Model\Note[]',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 403:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Jiwa\Model\Note[]',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 401:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Jiwa\Model\Note[]',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 404:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Jiwa\Model\Note[]',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation salesOrderNotesGETManyRequestInvoiceIDNotesGetAsync
     *
     * Retrieves a list of sales order notes.
     *
     * @param  string $accept Accept Header (required)
     * @param  string $invoice_id (required)
     * @param  bool $jiwa_stateful Stateful indicator (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function salesOrderNotesGETManyRequestInvoiceIDNotesGetAsync($accept, $invoice_id, $jiwa_stateful = null)
    {
        return $this->salesOrderNotesGETManyRequestInvoiceIDNotesGetAsyncWithHttpInfo($accept, $invoice_id, $jiwa_stateful)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation salesOrderNotesGETManyRequestInvoiceIDNotesGetAsyncWithHttpInfo
     *
     * Retrieves a list of sales order notes.
     *
     * @param  string $accept Accept Header (required)
     * @param  string $invoice_id (required)
     * @param  bool $jiwa_stateful Stateful indicator (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function salesOrderNotesGETManyRequestInvoiceIDNotesGetAsyncWithHttpInfo($accept, $invoice_id, $jiwa_stateful = null)
    {
        $returnType = '\Jiwa\Model\Note[]';
        $request = $this->salesOrderNotesGETManyRequestInvoiceIDNotesGetRequest($accept, $invoice_id, $jiwa_stateful);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'salesOrderNotesGETManyRequestInvoiceIDNotesGet'
     *
     * @param  string $accept Accept Header (required)
     * @param  string $invoice_id (required)
     * @param  bool $jiwa_stateful Stateful indicator (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function salesOrderNotesGETManyRequestInvoiceIDNotesGetRequest($accept, $invoice_id, $jiwa_stateful = null)
    {
        // verify the required parameter 'accept' is set
        if ($accept === null || (is_array($accept) && count($accept) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $accept when calling salesOrderNotesGETManyRequestInvoiceIDNotesGet'
            );
        }
        // verify the required parameter 'invoice_id' is set
        if ($invoice_id === null || (is_array($invoice_id) && count($invoice_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $invoice_id when calling salesOrderNotesGETManyRequestInvoiceIDNotesGet'
            );
        }

        $resourcePath = '/SalesOrders/{InvoiceID}/Notes';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // header params
        if ($accept !== null) {
            $headerParams['Accept'] = ObjectSerializer::toHeaderValue($accept);
        }
        // header params
        if ($jiwa_stateful !== null) {
            $headerParams['jiwa-stateful'] = ObjectSerializer::toHeaderValue($jiwa_stateful);
        }

        // path params
        if ($invoice_id !== null) {
            $resourcePath = str_replace(
                '{' . 'InvoiceID' . '}',
                ObjectSerializer::toPathValue($invoice_id),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json', 'application/xml']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json', 'application/xml'],
                ['application/x-www-form-urlencoded', 'application/json', 'application/xml']
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            
            if($headers['Content-Type'] === 'application/json') {
                // \stdClass has no __toString(), so we should encode it manually
                if ($httpBody instanceof \stdClass) {
                    $httpBody = \GuzzleHttp\json_encode($httpBody);
                }
                // array has no __toString(), so we should encode it manually
                if(is_array($httpBody)) {
                    $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($httpBody));
                }
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\Query::build($formParams);
            }
        }

        // this endpoint requires HTTP basic authentication
        if ($this->config->getUsername() !== null || $this->config->getPassword() !== null) {
            $headers['Authorization'] = 'Basic ' . base64_encode($this->config->getUsername() . ":" . $this->config->getPassword());
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\Query::build($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation salesOrderPATCHRequestInvoiceIDUpdate
     *
     * Updates a sales order.
     *
     * @param  string $accept Accept Header (required)
     * @param  string $invoice_id invoice_id (required)
     * @param  bool $jiwa_stateful Stateful indicator (optional)
     * @param  string $type type (optional)
     * @param  string $system_settings system_settings (optional)
     * @param  \DateTime $last_saved_date_time last_saved_date_time (optional)
     * @param  \DateTime $initiated_date initiated_date (optional)
     * @param  \DateTime $invoice_init_date invoice_init_date (optional)
     * @param  string $sales_order_type sales_order_type (optional)
     * @param  string $order_type order_type (optional)
     * @param  string $status status (optional)
     * @param  string $edi_status edi_status (optional)
     * @param  string $bill_type bill_type (optional)
     * @param  \DateTime $expected_delivery_date expected_delivery_date (optional)
     * @param  \DateTime $delivered_date delivered_date (optional)
     * @param  bool $delivered delivered (optional)
     * @param  string $edi_pick_status edi_pick_status (optional)
     * @param  string $edi_order_type edi_order_type (optional)
     * @param  \DateTime $edi_deliver_not_before_date edi_deliver_not_before_date (optional)
     * @param  \DateTime $edi_deliver_not_after_date edi_deliver_not_after_date (optional)
     * @param  string $cash_sales cash_sales (optional)
     * @param  bool $drop_shipment drop_shipment (optional)
     * @param  double $cartage1_ex_gst cartage1_ex_gst (optional)
     * @param  double $cartage1_gst_rate cartage1_gst_rate (optional)
     * @param  double $cartage1_gst cartage1_gst (optional)
     * @param  double $cartage2_ex_gst cartage2_ex_gst (optional)
     * @param  double $cartage2_gst_rate cartage2_gst_rate (optional)
     * @param  double $cartage2_gst cartage2_gst (optional)
     * @param  double $cartage3_ex_gst cartage3_ex_gst (optional)
     * @param  double $cartage3_gst_rate cartage3_gst_rate (optional)
     * @param  double $cartage3_gst cartage3_gst (optional)
     * @param  double $rcti_amount rcti_amount (optional)
     * @param  \DateTime $rcti_date rcti_date (optional)
     * @param  string $job_costing job_costing (optional)
     * @param  string $invoice_no invoice_no (optional)
     * @param  string $logical_id logical_id (optional)
     * @param  string $logical_warehouse_description logical_warehouse_description (optional)
     * @param  string $physical_warehouse_description physical_warehouse_description (optional)
     * @param  bool $credit_note credit_note (optional)
     * @param  string $staff_id staff_id (optional)
     * @param  string $staff_user_name staff_user_name (optional)
     * @param  string $staff_title staff_title (optional)
     * @param  string $staff_first_name staff_first_name (optional)
     * @param  string $staff_surname staff_surname (optional)
     * @param  string $branch_id branch_id (optional)
     * @param  string $branch_description branch_description (optional)
     * @param  string $branch_name branch_name (optional)
     * @param  string $order_no order_no (optional)
     * @param  string $so_reference so_reference (optional)
     * @param  string $sender_edi_address sender_edi_address (optional)
     * @param  string $receiver_edi_address receiver_edi_address (optional)
     * @param  string $edi_vendor_number edi_vendor_number (optional)
     * @param  string $edi_buyer_number edi_buyer_number (optional)
     * @param  string $debtor_id debtor_id (optional)
     * @param  string $debtor_account_no debtor_account_no (optional)
     * @param  string $debtor_name debtor_name (optional)
     * @param  string $debtor_email_address debtor_email_address (optional)
     * @param  string $debtor_contact_name debtor_contact_name (optional)
     * @param  string $ediasn ediasn (optional)
     * @param  string $delivery_addressee delivery_addressee (optional)
     * @param  string $delivery_address1 delivery_address1 (optional)
     * @param  string $delivery_address2 delivery_address2 (optional)
     * @param  string $delivery_address_suburb delivery_address_suburb (optional)
     * @param  string $delivery_address_state delivery_address_state (optional)
     * @param  string $delivery_address_contact_name delivery_address_contact_name (optional)
     * @param  string $delivery_address_postcode delivery_address_postcode (optional)
     * @param  string $delivery_address_country delivery_address_country (optional)
     * @param  string $delivery_address_notes delivery_address_notes (optional)
     * @param  string $delivery_address_courier_details delivery_address_courier_details (optional)
     * @param  string $rcti_no rcti_no (optional)
     * @param  string $custom_field_values custom_field_values (optional)
     * @param  string $notes notes (optional)
     * @param  string $documents documents (optional)
     * @param  string $payments payments (optional)
     * @param  string $lines lines (optional)
     * @param  string $histories histories (optional)
     * @param  string $as_ns as_ns (optional)
     * @param  \Jiwa\Model\SalesOrderPATCHRequest $body body (optional)
     *
     * @throws \Jiwa\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Jiwa\Model\SalesOrder
     */
    public function salesOrderPATCHRequestInvoiceIDUpdate($accept, $invoice_id, $jiwa_stateful = null, $type = null, $system_settings = null, $last_saved_date_time = null, $initiated_date = null, $invoice_init_date = null, $sales_order_type = null, $order_type = null, $status = null, $edi_status = null, $bill_type = null, $expected_delivery_date = null, $delivered_date = null, $delivered = null, $edi_pick_status = null, $edi_order_type = null, $edi_deliver_not_before_date = null, $edi_deliver_not_after_date = null, $cash_sales = null, $drop_shipment = null, $cartage1_ex_gst = null, $cartage1_gst_rate = null, $cartage1_gst = null, $cartage2_ex_gst = null, $cartage2_gst_rate = null, $cartage2_gst = null, $cartage3_ex_gst = null, $cartage3_gst_rate = null, $cartage3_gst = null, $rcti_amount = null, $rcti_date = null, $job_costing = null, $invoice_no = null, $logical_id = null, $logical_warehouse_description = null, $physical_warehouse_description = null, $credit_note = null, $staff_id = null, $staff_user_name = null, $staff_title = null, $staff_first_name = null, $staff_surname = null, $branch_id = null, $branch_description = null, $branch_name = null, $order_no = null, $so_reference = null, $sender_edi_address = null, $receiver_edi_address = null, $edi_vendor_number = null, $edi_buyer_number = null, $debtor_id = null, $debtor_account_no = null, $debtor_name = null, $debtor_email_address = null, $debtor_contact_name = null, $ediasn = null, $delivery_addressee = null, $delivery_address1 = null, $delivery_address2 = null, $delivery_address_suburb = null, $delivery_address_state = null, $delivery_address_contact_name = null, $delivery_address_postcode = null, $delivery_address_country = null, $delivery_address_notes = null, $delivery_address_courier_details = null, $rcti_no = null, $custom_field_values = null, $notes = null, $documents = null, $payments = null, $lines = null, $histories = null, $as_ns = null, $body = null)
    {
        list($response) = $this->salesOrderPATCHRequestInvoiceIDUpdateWithHttpInfo($accept, $invoice_id, $jiwa_stateful, $type, $system_settings, $last_saved_date_time, $initiated_date, $invoice_init_date, $sales_order_type, $order_type, $status, $edi_status, $bill_type, $expected_delivery_date, $delivered_date, $delivered, $edi_pick_status, $edi_order_type, $edi_deliver_not_before_date, $edi_deliver_not_after_date, $cash_sales, $drop_shipment, $cartage1_ex_gst, $cartage1_gst_rate, $cartage1_gst, $cartage2_ex_gst, $cartage2_gst_rate, $cartage2_gst, $cartage3_ex_gst, $cartage3_gst_rate, $cartage3_gst, $rcti_amount, $rcti_date, $job_costing, $invoice_no, $logical_id, $logical_warehouse_description, $physical_warehouse_description, $credit_note, $staff_id, $staff_user_name, $staff_title, $staff_first_name, $staff_surname, $branch_id, $branch_description, $branch_name, $order_no, $so_reference, $sender_edi_address, $receiver_edi_address, $edi_vendor_number, $edi_buyer_number, $debtor_id, $debtor_account_no, $debtor_name, $debtor_email_address, $debtor_contact_name, $ediasn, $delivery_addressee, $delivery_address1, $delivery_address2, $delivery_address_suburb, $delivery_address_state, $delivery_address_contact_name, $delivery_address_postcode, $delivery_address_country, $delivery_address_notes, $delivery_address_courier_details, $rcti_no, $custom_field_values, $notes, $documents, $payments, $lines, $histories, $as_ns, $body);
        return $response;
    }

    /**
     * Operation salesOrderPATCHRequestInvoiceIDUpdateWithHttpInfo
     *
     * Updates a sales order.
     *
     * @param  string $accept Accept Header (required)
     * @param  string $invoice_id (required)
     * @param  bool $jiwa_stateful Stateful indicator (optional)
     * @param  string $type (optional)
     * @param  string $system_settings (optional)
     * @param  \DateTime $last_saved_date_time (optional)
     * @param  \DateTime $initiated_date (optional)
     * @param  \DateTime $invoice_init_date (optional)
     * @param  string $sales_order_type (optional)
     * @param  string $order_type (optional)
     * @param  string $status (optional)
     * @param  string $edi_status (optional)
     * @param  string $bill_type (optional)
     * @param  \DateTime $expected_delivery_date (optional)
     * @param  \DateTime $delivered_date (optional)
     * @param  bool $delivered (optional)
     * @param  string $edi_pick_status (optional)
     * @param  string $edi_order_type (optional)
     * @param  \DateTime $edi_deliver_not_before_date (optional)
     * @param  \DateTime $edi_deliver_not_after_date (optional)
     * @param  string $cash_sales (optional)
     * @param  bool $drop_shipment (optional)
     * @param  double $cartage1_ex_gst (optional)
     * @param  double $cartage1_gst_rate (optional)
     * @param  double $cartage1_gst (optional)
     * @param  double $cartage2_ex_gst (optional)
     * @param  double $cartage2_gst_rate (optional)
     * @param  double $cartage2_gst (optional)
     * @param  double $cartage3_ex_gst (optional)
     * @param  double $cartage3_gst_rate (optional)
     * @param  double $cartage3_gst (optional)
     * @param  double $rcti_amount (optional)
     * @param  \DateTime $rcti_date (optional)
     * @param  string $job_costing (optional)
     * @param  string $invoice_no (optional)
     * @param  string $logical_id (optional)
     * @param  string $logical_warehouse_description (optional)
     * @param  string $physical_warehouse_description (optional)
     * @param  bool $credit_note (optional)
     * @param  string $staff_id (optional)
     * @param  string $staff_user_name (optional)
     * @param  string $staff_title (optional)
     * @param  string $staff_first_name (optional)
     * @param  string $staff_surname (optional)
     * @param  string $branch_id (optional)
     * @param  string $branch_description (optional)
     * @param  string $branch_name (optional)
     * @param  string $order_no (optional)
     * @param  string $so_reference (optional)
     * @param  string $sender_edi_address (optional)
     * @param  string $receiver_edi_address (optional)
     * @param  string $edi_vendor_number (optional)
     * @param  string $edi_buyer_number (optional)
     * @param  string $debtor_id (optional)
     * @param  string $debtor_account_no (optional)
     * @param  string $debtor_name (optional)
     * @param  string $debtor_email_address (optional)
     * @param  string $debtor_contact_name (optional)
     * @param  string $ediasn (optional)
     * @param  string $delivery_addressee (optional)
     * @param  string $delivery_address1 (optional)
     * @param  string $delivery_address2 (optional)
     * @param  string $delivery_address_suburb (optional)
     * @param  string $delivery_address_state (optional)
     * @param  string $delivery_address_contact_name (optional)
     * @param  string $delivery_address_postcode (optional)
     * @param  string $delivery_address_country (optional)
     * @param  string $delivery_address_notes (optional)
     * @param  string $delivery_address_courier_details (optional)
     * @param  string $rcti_no (optional)
     * @param  string $custom_field_values (optional)
     * @param  string $notes (optional)
     * @param  string $documents (optional)
     * @param  string $payments (optional)
     * @param  string $lines (optional)
     * @param  string $histories (optional)
     * @param  string $as_ns (optional)
     * @param  \Jiwa\Model\SalesOrderPATCHRequest $body (optional)
     *
     * @throws \Jiwa\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Jiwa\Model\SalesOrder, HTTP status code, HTTP response headers (array of strings)
     */
    public function salesOrderPATCHRequestInvoiceIDUpdateWithHttpInfo($accept, $invoice_id, $jiwa_stateful = null, $type = null, $system_settings = null, $last_saved_date_time = null, $initiated_date = null, $invoice_init_date = null, $sales_order_type = null, $order_type = null, $status = null, $edi_status = null, $bill_type = null, $expected_delivery_date = null, $delivered_date = null, $delivered = null, $edi_pick_status = null, $edi_order_type = null, $edi_deliver_not_before_date = null, $edi_deliver_not_after_date = null, $cash_sales = null, $drop_shipment = null, $cartage1_ex_gst = null, $cartage1_gst_rate = null, $cartage1_gst = null, $cartage2_ex_gst = null, $cartage2_gst_rate = null, $cartage2_gst = null, $cartage3_ex_gst = null, $cartage3_gst_rate = null, $cartage3_gst = null, $rcti_amount = null, $rcti_date = null, $job_costing = null, $invoice_no = null, $logical_id = null, $logical_warehouse_description = null, $physical_warehouse_description = null, $credit_note = null, $staff_id = null, $staff_user_name = null, $staff_title = null, $staff_first_name = null, $staff_surname = null, $branch_id = null, $branch_description = null, $branch_name = null, $order_no = null, $so_reference = null, $sender_edi_address = null, $receiver_edi_address = null, $edi_vendor_number = null, $edi_buyer_number = null, $debtor_id = null, $debtor_account_no = null, $debtor_name = null, $debtor_email_address = null, $debtor_contact_name = null, $ediasn = null, $delivery_addressee = null, $delivery_address1 = null, $delivery_address2 = null, $delivery_address_suburb = null, $delivery_address_state = null, $delivery_address_contact_name = null, $delivery_address_postcode = null, $delivery_address_country = null, $delivery_address_notes = null, $delivery_address_courier_details = null, $rcti_no = null, $custom_field_values = null, $notes = null, $documents = null, $payments = null, $lines = null, $histories = null, $as_ns = null, $body = null)
    {
        $returnType = '\Jiwa\Model\SalesOrder';
        $request = $this->salesOrderPATCHRequestInvoiceIDUpdateRequest($accept, $invoice_id, $jiwa_stateful, $type, $system_settings, $last_saved_date_time, $initiated_date, $invoice_init_date, $sales_order_type, $order_type, $status, $edi_status, $bill_type, $expected_delivery_date, $delivered_date, $delivered, $edi_pick_status, $edi_order_type, $edi_deliver_not_before_date, $edi_deliver_not_after_date, $cash_sales, $drop_shipment, $cartage1_ex_gst, $cartage1_gst_rate, $cartage1_gst, $cartage2_ex_gst, $cartage2_gst_rate, $cartage2_gst, $cartage3_ex_gst, $cartage3_gst_rate, $cartage3_gst, $rcti_amount, $rcti_date, $job_costing, $invoice_no, $logical_id, $logical_warehouse_description, $physical_warehouse_description, $credit_note, $staff_id, $staff_user_name, $staff_title, $staff_first_name, $staff_surname, $branch_id, $branch_description, $branch_name, $order_no, $so_reference, $sender_edi_address, $receiver_edi_address, $edi_vendor_number, $edi_buyer_number, $debtor_id, $debtor_account_no, $debtor_name, $debtor_email_address, $debtor_contact_name, $ediasn, $delivery_addressee, $delivery_address1, $delivery_address2, $delivery_address_suburb, $delivery_address_state, $delivery_address_contact_name, $delivery_address_postcode, $delivery_address_country, $delivery_address_notes, $delivery_address_courier_details, $rcti_no, $custom_field_values, $notes, $documents, $payments, $lines, $histories, $as_ns, $body);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Jiwa\Model\SalesOrder',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 403:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Jiwa\Model\SalesOrder',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 404:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Jiwa\Model\SalesOrder',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 401:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Jiwa\Model\SalesOrder',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation salesOrderPATCHRequestInvoiceIDUpdateAsync
     *
     * Updates a sales order.
     *
     * @param  string $accept Accept Header (required)
     * @param  string $invoice_id (required)
     * @param  bool $jiwa_stateful Stateful indicator (optional)
     * @param  string $type (optional)
     * @param  string $system_settings (optional)
     * @param  \DateTime $last_saved_date_time (optional)
     * @param  \DateTime $initiated_date (optional)
     * @param  \DateTime $invoice_init_date (optional)
     * @param  string $sales_order_type (optional)
     * @param  string $order_type (optional)
     * @param  string $status (optional)
     * @param  string $edi_status (optional)
     * @param  string $bill_type (optional)
     * @param  \DateTime $expected_delivery_date (optional)
     * @param  \DateTime $delivered_date (optional)
     * @param  bool $delivered (optional)
     * @param  string $edi_pick_status (optional)
     * @param  string $edi_order_type (optional)
     * @param  \DateTime $edi_deliver_not_before_date (optional)
     * @param  \DateTime $edi_deliver_not_after_date (optional)
     * @param  string $cash_sales (optional)
     * @param  bool $drop_shipment (optional)
     * @param  double $cartage1_ex_gst (optional)
     * @param  double $cartage1_gst_rate (optional)
     * @param  double $cartage1_gst (optional)
     * @param  double $cartage2_ex_gst (optional)
     * @param  double $cartage2_gst_rate (optional)
     * @param  double $cartage2_gst (optional)
     * @param  double $cartage3_ex_gst (optional)
     * @param  double $cartage3_gst_rate (optional)
     * @param  double $cartage3_gst (optional)
     * @param  double $rcti_amount (optional)
     * @param  \DateTime $rcti_date (optional)
     * @param  string $job_costing (optional)
     * @param  string $invoice_no (optional)
     * @param  string $logical_id (optional)
     * @param  string $logical_warehouse_description (optional)
     * @param  string $physical_warehouse_description (optional)
     * @param  bool $credit_note (optional)
     * @param  string $staff_id (optional)
     * @param  string $staff_user_name (optional)
     * @param  string $staff_title (optional)
     * @param  string $staff_first_name (optional)
     * @param  string $staff_surname (optional)
     * @param  string $branch_id (optional)
     * @param  string $branch_description (optional)
     * @param  string $branch_name (optional)
     * @param  string $order_no (optional)
     * @param  string $so_reference (optional)
     * @param  string $sender_edi_address (optional)
     * @param  string $receiver_edi_address (optional)
     * @param  string $edi_vendor_number (optional)
     * @param  string $edi_buyer_number (optional)
     * @param  string $debtor_id (optional)
     * @param  string $debtor_account_no (optional)
     * @param  string $debtor_name (optional)
     * @param  string $debtor_email_address (optional)
     * @param  string $debtor_contact_name (optional)
     * @param  string $ediasn (optional)
     * @param  string $delivery_addressee (optional)
     * @param  string $delivery_address1 (optional)
     * @param  string $delivery_address2 (optional)
     * @param  string $delivery_address_suburb (optional)
     * @param  string $delivery_address_state (optional)
     * @param  string $delivery_address_contact_name (optional)
     * @param  string $delivery_address_postcode (optional)
     * @param  string $delivery_address_country (optional)
     * @param  string $delivery_address_notes (optional)
     * @param  string $delivery_address_courier_details (optional)
     * @param  string $rcti_no (optional)
     * @param  string $custom_field_values (optional)
     * @param  string $notes (optional)
     * @param  string $documents (optional)
     * @param  string $payments (optional)
     * @param  string $lines (optional)
     * @param  string $histories (optional)
     * @param  string $as_ns (optional)
     * @param  \Jiwa\Model\SalesOrderPATCHRequest $body (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function salesOrderPATCHRequestInvoiceIDUpdateAsync($accept, $invoice_id, $jiwa_stateful = null, $type = null, $system_settings = null, $last_saved_date_time = null, $initiated_date = null, $invoice_init_date = null, $sales_order_type = null, $order_type = null, $status = null, $edi_status = null, $bill_type = null, $expected_delivery_date = null, $delivered_date = null, $delivered = null, $edi_pick_status = null, $edi_order_type = null, $edi_deliver_not_before_date = null, $edi_deliver_not_after_date = null, $cash_sales = null, $drop_shipment = null, $cartage1_ex_gst = null, $cartage1_gst_rate = null, $cartage1_gst = null, $cartage2_ex_gst = null, $cartage2_gst_rate = null, $cartage2_gst = null, $cartage3_ex_gst = null, $cartage3_gst_rate = null, $cartage3_gst = null, $rcti_amount = null, $rcti_date = null, $job_costing = null, $invoice_no = null, $logical_id = null, $logical_warehouse_description = null, $physical_warehouse_description = null, $credit_note = null, $staff_id = null, $staff_user_name = null, $staff_title = null, $staff_first_name = null, $staff_surname = null, $branch_id = null, $branch_description = null, $branch_name = null, $order_no = null, $so_reference = null, $sender_edi_address = null, $receiver_edi_address = null, $edi_vendor_number = null, $edi_buyer_number = null, $debtor_id = null, $debtor_account_no = null, $debtor_name = null, $debtor_email_address = null, $debtor_contact_name = null, $ediasn = null, $delivery_addressee = null, $delivery_address1 = null, $delivery_address2 = null, $delivery_address_suburb = null, $delivery_address_state = null, $delivery_address_contact_name = null, $delivery_address_postcode = null, $delivery_address_country = null, $delivery_address_notes = null, $delivery_address_courier_details = null, $rcti_no = null, $custom_field_values = null, $notes = null, $documents = null, $payments = null, $lines = null, $histories = null, $as_ns = null, $body = null)
    {
        return $this->salesOrderPATCHRequestInvoiceIDUpdateAsyncWithHttpInfo($accept, $invoice_id, $jiwa_stateful, $type, $system_settings, $last_saved_date_time, $initiated_date, $invoice_init_date, $sales_order_type, $order_type, $status, $edi_status, $bill_type, $expected_delivery_date, $delivered_date, $delivered, $edi_pick_status, $edi_order_type, $edi_deliver_not_before_date, $edi_deliver_not_after_date, $cash_sales, $drop_shipment, $cartage1_ex_gst, $cartage1_gst_rate, $cartage1_gst, $cartage2_ex_gst, $cartage2_gst_rate, $cartage2_gst, $cartage3_ex_gst, $cartage3_gst_rate, $cartage3_gst, $rcti_amount, $rcti_date, $job_costing, $invoice_no, $logical_id, $logical_warehouse_description, $physical_warehouse_description, $credit_note, $staff_id, $staff_user_name, $staff_title, $staff_first_name, $staff_surname, $branch_id, $branch_description, $branch_name, $order_no, $so_reference, $sender_edi_address, $receiver_edi_address, $edi_vendor_number, $edi_buyer_number, $debtor_id, $debtor_account_no, $debtor_name, $debtor_email_address, $debtor_contact_name, $ediasn, $delivery_addressee, $delivery_address1, $delivery_address2, $delivery_address_suburb, $delivery_address_state, $delivery_address_contact_name, $delivery_address_postcode, $delivery_address_country, $delivery_address_notes, $delivery_address_courier_details, $rcti_no, $custom_field_values, $notes, $documents, $payments, $lines, $histories, $as_ns, $body)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation salesOrderPATCHRequestInvoiceIDUpdateAsyncWithHttpInfo
     *
     * Updates a sales order.
     *
     * @param  string $accept Accept Header (required)
     * @param  string $invoice_id (required)
     * @param  bool $jiwa_stateful Stateful indicator (optional)
     * @param  string $type (optional)
     * @param  string $system_settings (optional)
     * @param  \DateTime $last_saved_date_time (optional)
     * @param  \DateTime $initiated_date (optional)
     * @param  \DateTime $invoice_init_date (optional)
     * @param  string $sales_order_type (optional)
     * @param  string $order_type (optional)
     * @param  string $status (optional)
     * @param  string $edi_status (optional)
     * @param  string $bill_type (optional)
     * @param  \DateTime $expected_delivery_date (optional)
     * @param  \DateTime $delivered_date (optional)
     * @param  bool $delivered (optional)
     * @param  string $edi_pick_status (optional)
     * @param  string $edi_order_type (optional)
     * @param  \DateTime $edi_deliver_not_before_date (optional)
     * @param  \DateTime $edi_deliver_not_after_date (optional)
     * @param  string $cash_sales (optional)
     * @param  bool $drop_shipment (optional)
     * @param  double $cartage1_ex_gst (optional)
     * @param  double $cartage1_gst_rate (optional)
     * @param  double $cartage1_gst (optional)
     * @param  double $cartage2_ex_gst (optional)
     * @param  double $cartage2_gst_rate (optional)
     * @param  double $cartage2_gst (optional)
     * @param  double $cartage3_ex_gst (optional)
     * @param  double $cartage3_gst_rate (optional)
     * @param  double $cartage3_gst (optional)
     * @param  double $rcti_amount (optional)
     * @param  \DateTime $rcti_date (optional)
     * @param  string $job_costing (optional)
     * @param  string $invoice_no (optional)
     * @param  string $logical_id (optional)
     * @param  string $logical_warehouse_description (optional)
     * @param  string $physical_warehouse_description (optional)
     * @param  bool $credit_note (optional)
     * @param  string $staff_id (optional)
     * @param  string $staff_user_name (optional)
     * @param  string $staff_title (optional)
     * @param  string $staff_first_name (optional)
     * @param  string $staff_surname (optional)
     * @param  string $branch_id (optional)
     * @param  string $branch_description (optional)
     * @param  string $branch_name (optional)
     * @param  string $order_no (optional)
     * @param  string $so_reference (optional)
     * @param  string $sender_edi_address (optional)
     * @param  string $receiver_edi_address (optional)
     * @param  string $edi_vendor_number (optional)
     * @param  string $edi_buyer_number (optional)
     * @param  string $debtor_id (optional)
     * @param  string $debtor_account_no (optional)
     * @param  string $debtor_name (optional)
     * @param  string $debtor_email_address (optional)
     * @param  string $debtor_contact_name (optional)
     * @param  string $ediasn (optional)
     * @param  string $delivery_addressee (optional)
     * @param  string $delivery_address1 (optional)
     * @param  string $delivery_address2 (optional)
     * @param  string $delivery_address_suburb (optional)
     * @param  string $delivery_address_state (optional)
     * @param  string $delivery_address_contact_name (optional)
     * @param  string $delivery_address_postcode (optional)
     * @param  string $delivery_address_country (optional)
     * @param  string $delivery_address_notes (optional)
     * @param  string $delivery_address_courier_details (optional)
     * @param  string $rcti_no (optional)
     * @param  string $custom_field_values (optional)
     * @param  string $notes (optional)
     * @param  string $documents (optional)
     * @param  string $payments (optional)
     * @param  string $lines (optional)
     * @param  string $histories (optional)
     * @param  string $as_ns (optional)
     * @param  \Jiwa\Model\SalesOrderPATCHRequest $body (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function salesOrderPATCHRequestInvoiceIDUpdateAsyncWithHttpInfo($accept, $invoice_id, $jiwa_stateful = null, $type = null, $system_settings = null, $last_saved_date_time = null, $initiated_date = null, $invoice_init_date = null, $sales_order_type = null, $order_type = null, $status = null, $edi_status = null, $bill_type = null, $expected_delivery_date = null, $delivered_date = null, $delivered = null, $edi_pick_status = null, $edi_order_type = null, $edi_deliver_not_before_date = null, $edi_deliver_not_after_date = null, $cash_sales = null, $drop_shipment = null, $cartage1_ex_gst = null, $cartage1_gst_rate = null, $cartage1_gst = null, $cartage2_ex_gst = null, $cartage2_gst_rate = null, $cartage2_gst = null, $cartage3_ex_gst = null, $cartage3_gst_rate = null, $cartage3_gst = null, $rcti_amount = null, $rcti_date = null, $job_costing = null, $invoice_no = null, $logical_id = null, $logical_warehouse_description = null, $physical_warehouse_description = null, $credit_note = null, $staff_id = null, $staff_user_name = null, $staff_title = null, $staff_first_name = null, $staff_surname = null, $branch_id = null, $branch_description = null, $branch_name = null, $order_no = null, $so_reference = null, $sender_edi_address = null, $receiver_edi_address = null, $edi_vendor_number = null, $edi_buyer_number = null, $debtor_id = null, $debtor_account_no = null, $debtor_name = null, $debtor_email_address = null, $debtor_contact_name = null, $ediasn = null, $delivery_addressee = null, $delivery_address1 = null, $delivery_address2 = null, $delivery_address_suburb = null, $delivery_address_state = null, $delivery_address_contact_name = null, $delivery_address_postcode = null, $delivery_address_country = null, $delivery_address_notes = null, $delivery_address_courier_details = null, $rcti_no = null, $custom_field_values = null, $notes = null, $documents = null, $payments = null, $lines = null, $histories = null, $as_ns = null, $body = null)
    {
        $returnType = '\Jiwa\Model\SalesOrder';
        $request = $this->salesOrderPATCHRequestInvoiceIDUpdateRequest($accept, $invoice_id, $jiwa_stateful, $type, $system_settings, $last_saved_date_time, $initiated_date, $invoice_init_date, $sales_order_type, $order_type, $status, $edi_status, $bill_type, $expected_delivery_date, $delivered_date, $delivered, $edi_pick_status, $edi_order_type, $edi_deliver_not_before_date, $edi_deliver_not_after_date, $cash_sales, $drop_shipment, $cartage1_ex_gst, $cartage1_gst_rate, $cartage1_gst, $cartage2_ex_gst, $cartage2_gst_rate, $cartage2_gst, $cartage3_ex_gst, $cartage3_gst_rate, $cartage3_gst, $rcti_amount, $rcti_date, $job_costing, $invoice_no, $logical_id, $logical_warehouse_description, $physical_warehouse_description, $credit_note, $staff_id, $staff_user_name, $staff_title, $staff_first_name, $staff_surname, $branch_id, $branch_description, $branch_name, $order_no, $so_reference, $sender_edi_address, $receiver_edi_address, $edi_vendor_number, $edi_buyer_number, $debtor_id, $debtor_account_no, $debtor_name, $debtor_email_address, $debtor_contact_name, $ediasn, $delivery_addressee, $delivery_address1, $delivery_address2, $delivery_address_suburb, $delivery_address_state, $delivery_address_contact_name, $delivery_address_postcode, $delivery_address_country, $delivery_address_notes, $delivery_address_courier_details, $rcti_no, $custom_field_values, $notes, $documents, $payments, $lines, $histories, $as_ns, $body);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'salesOrderPATCHRequestInvoiceIDUpdate'
     *
     * @param  string $accept Accept Header (required)
     * @param  string $invoice_id (required)
     * @param  bool $jiwa_stateful Stateful indicator (optional)
     * @param  string $type (optional)
     * @param  string $system_settings (optional)
     * @param  \DateTime $last_saved_date_time (optional)
     * @param  \DateTime $initiated_date (optional)
     * @param  \DateTime $invoice_init_date (optional)
     * @param  string $sales_order_type (optional)
     * @param  string $order_type (optional)
     * @param  string $status (optional)
     * @param  string $edi_status (optional)
     * @param  string $bill_type (optional)
     * @param  \DateTime $expected_delivery_date (optional)
     * @param  \DateTime $delivered_date (optional)
     * @param  bool $delivered (optional)
     * @param  string $edi_pick_status (optional)
     * @param  string $edi_order_type (optional)
     * @param  \DateTime $edi_deliver_not_before_date (optional)
     * @param  \DateTime $edi_deliver_not_after_date (optional)
     * @param  string $cash_sales (optional)
     * @param  bool $drop_shipment (optional)
     * @param  double $cartage1_ex_gst (optional)
     * @param  double $cartage1_gst_rate (optional)
     * @param  double $cartage1_gst (optional)
     * @param  double $cartage2_ex_gst (optional)
     * @param  double $cartage2_gst_rate (optional)
     * @param  double $cartage2_gst (optional)
     * @param  double $cartage3_ex_gst (optional)
     * @param  double $cartage3_gst_rate (optional)
     * @param  double $cartage3_gst (optional)
     * @param  double $rcti_amount (optional)
     * @param  \DateTime $rcti_date (optional)
     * @param  string $job_costing (optional)
     * @param  string $invoice_no (optional)
     * @param  string $logical_id (optional)
     * @param  string $logical_warehouse_description (optional)
     * @param  string $physical_warehouse_description (optional)
     * @param  bool $credit_note (optional)
     * @param  string $staff_id (optional)
     * @param  string $staff_user_name (optional)
     * @param  string $staff_title (optional)
     * @param  string $staff_first_name (optional)
     * @param  string $staff_surname (optional)
     * @param  string $branch_id (optional)
     * @param  string $branch_description (optional)
     * @param  string $branch_name (optional)
     * @param  string $order_no (optional)
     * @param  string $so_reference (optional)
     * @param  string $sender_edi_address (optional)
     * @param  string $receiver_edi_address (optional)
     * @param  string $edi_vendor_number (optional)
     * @param  string $edi_buyer_number (optional)
     * @param  string $debtor_id (optional)
     * @param  string $debtor_account_no (optional)
     * @param  string $debtor_name (optional)
     * @param  string $debtor_email_address (optional)
     * @param  string $debtor_contact_name (optional)
     * @param  string $ediasn (optional)
     * @param  string $delivery_addressee (optional)
     * @param  string $delivery_address1 (optional)
     * @param  string $delivery_address2 (optional)
     * @param  string $delivery_address_suburb (optional)
     * @param  string $delivery_address_state (optional)
     * @param  string $delivery_address_contact_name (optional)
     * @param  string $delivery_address_postcode (optional)
     * @param  string $delivery_address_country (optional)
     * @param  string $delivery_address_notes (optional)
     * @param  string $delivery_address_courier_details (optional)
     * @param  string $rcti_no (optional)
     * @param  string $custom_field_values (optional)
     * @param  string $notes (optional)
     * @param  string $documents (optional)
     * @param  string $payments (optional)
     * @param  string $lines (optional)
     * @param  string $histories (optional)
     * @param  string $as_ns (optional)
     * @param  \Jiwa\Model\SalesOrderPATCHRequest $body (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function salesOrderPATCHRequestInvoiceIDUpdateRequest($accept, $invoice_id, $jiwa_stateful = null, $type = null, $system_settings = null, $last_saved_date_time = null, $initiated_date = null, $invoice_init_date = null, $sales_order_type = null, $order_type = null, $status = null, $edi_status = null, $bill_type = null, $expected_delivery_date = null, $delivered_date = null, $delivered = null, $edi_pick_status = null, $edi_order_type = null, $edi_deliver_not_before_date = null, $edi_deliver_not_after_date = null, $cash_sales = null, $drop_shipment = null, $cartage1_ex_gst = null, $cartage1_gst_rate = null, $cartage1_gst = null, $cartage2_ex_gst = null, $cartage2_gst_rate = null, $cartage2_gst = null, $cartage3_ex_gst = null, $cartage3_gst_rate = null, $cartage3_gst = null, $rcti_amount = null, $rcti_date = null, $job_costing = null, $invoice_no = null, $logical_id = null, $logical_warehouse_description = null, $physical_warehouse_description = null, $credit_note = null, $staff_id = null, $staff_user_name = null, $staff_title = null, $staff_first_name = null, $staff_surname = null, $branch_id = null, $branch_description = null, $branch_name = null, $order_no = null, $so_reference = null, $sender_edi_address = null, $receiver_edi_address = null, $edi_vendor_number = null, $edi_buyer_number = null, $debtor_id = null, $debtor_account_no = null, $debtor_name = null, $debtor_email_address = null, $debtor_contact_name = null, $ediasn = null, $delivery_addressee = null, $delivery_address1 = null, $delivery_address2 = null, $delivery_address_suburb = null, $delivery_address_state = null, $delivery_address_contact_name = null, $delivery_address_postcode = null, $delivery_address_country = null, $delivery_address_notes = null, $delivery_address_courier_details = null, $rcti_no = null, $custom_field_values = null, $notes = null, $documents = null, $payments = null, $lines = null, $histories = null, $as_ns = null, $body = null)
    {
        // verify the required parameter 'accept' is set
        if ($accept === null || (is_array($accept) && count($accept) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $accept when calling salesOrderPATCHRequestInvoiceIDUpdate'
            );
        }
        // verify the required parameter 'invoice_id' is set
        if ($invoice_id === null || (is_array($invoice_id) && count($invoice_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $invoice_id when calling salesOrderPATCHRequestInvoiceIDUpdate'
            );
        }

        $resourcePath = '/SalesOrders/{InvoiceID}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        if ($type !== null) {
            $queryParams['Type'] = ObjectSerializer::toQueryValue($type);
        }
        // query params
        if ($system_settings !== null) {
            $queryParams['SystemSettings'] = ObjectSerializer::toQueryValue($system_settings);
        }
        // query params
        if ($last_saved_date_time !== null) {
            $queryParams['LastSavedDateTime'] = ObjectSerializer::toQueryValue($last_saved_date_time);
        }
        // query params
        if ($initiated_date !== null) {
            $queryParams['InitiatedDate'] = ObjectSerializer::toQueryValue($initiated_date);
        }
        // query params
        if ($invoice_init_date !== null) {
            $queryParams['InvoiceInitDate'] = ObjectSerializer::toQueryValue($invoice_init_date);
        }
        // query params
        if ($sales_order_type !== null) {
            $queryParams['SalesOrderType'] = ObjectSerializer::toQueryValue($sales_order_type);
        }
        // query params
        if ($order_type !== null) {
            $queryParams['OrderType'] = ObjectSerializer::toQueryValue($order_type);
        }
        // query params
        if ($status !== null) {
            $queryParams['Status'] = ObjectSerializer::toQueryValue($status);
        }
        // query params
        if ($edi_status !== null) {
            $queryParams['EDIStatus'] = ObjectSerializer::toQueryValue($edi_status);
        }
        // query params
        if ($bill_type !== null) {
            $queryParams['BillType'] = ObjectSerializer::toQueryValue($bill_type);
        }
        // query params
        if ($expected_delivery_date !== null) {
            $queryParams['ExpectedDeliveryDate'] = ObjectSerializer::toQueryValue($expected_delivery_date);
        }
        // query params
        if ($delivered_date !== null) {
            $queryParams['DeliveredDate'] = ObjectSerializer::toQueryValue($delivered_date);
        }
        // query params
        if ($delivered !== null) {
            $queryParams['Delivered'] = ObjectSerializer::toQueryValue($delivered);
        }
        // query params
        if ($edi_pick_status !== null) {
            $queryParams['EDIPickStatus'] = ObjectSerializer::toQueryValue($edi_pick_status);
        }
        // query params
        if ($edi_order_type !== null) {
            $queryParams['EDIOrderType'] = ObjectSerializer::toQueryValue($edi_order_type);
        }
        // query params
        if ($edi_deliver_not_before_date !== null) {
            $queryParams['EDIDeliverNotBeforeDate'] = ObjectSerializer::toQueryValue($edi_deliver_not_before_date);
        }
        // query params
        if ($edi_deliver_not_after_date !== null) {
            $queryParams['EDIDeliverNotAfterDate'] = ObjectSerializer::toQueryValue($edi_deliver_not_after_date);
        }
        // query params
        if ($cash_sales !== null) {
            $queryParams['CashSales'] = ObjectSerializer::toQueryValue($cash_sales);
        }
        // query params
        if ($drop_shipment !== null) {
            $queryParams['DropShipment'] = ObjectSerializer::toQueryValue($drop_shipment);
        }
        // query params
        if ($cartage1_ex_gst !== null) {
            $queryParams['Cartage1ExGst'] = ObjectSerializer::toQueryValue($cartage1_ex_gst);
        }
        // query params
        if ($cartage1_gst_rate !== null) {
            $queryParams['Cartage1GstRate'] = ObjectSerializer::toQueryValue($cartage1_gst_rate);
        }
        // query params
        if ($cartage1_gst !== null) {
            $queryParams['Cartage1Gst'] = ObjectSerializer::toQueryValue($cartage1_gst);
        }
        // query params
        if ($cartage2_ex_gst !== null) {
            $queryParams['Cartage2ExGst'] = ObjectSerializer::toQueryValue($cartage2_ex_gst);
        }
        // query params
        if ($cartage2_gst_rate !== null) {
            $queryParams['Cartage2GstRate'] = ObjectSerializer::toQueryValue($cartage2_gst_rate);
        }
        // query params
        if ($cartage2_gst !== null) {
            $queryParams['Cartage2Gst'] = ObjectSerializer::toQueryValue($cartage2_gst);
        }
        // query params
        if ($cartage3_ex_gst !== null) {
            $queryParams['Cartage3ExGst'] = ObjectSerializer::toQueryValue($cartage3_ex_gst);
        }
        // query params
        if ($cartage3_gst_rate !== null) {
            $queryParams['Cartage3GstRate'] = ObjectSerializer::toQueryValue($cartage3_gst_rate);
        }
        // query params
        if ($cartage3_gst !== null) {
            $queryParams['Cartage3Gst'] = ObjectSerializer::toQueryValue($cartage3_gst);
        }
        // query params
        if ($rcti_amount !== null) {
            $queryParams['RCTIAmount'] = ObjectSerializer::toQueryValue($rcti_amount);
        }
        // query params
        if ($rcti_date !== null) {
            $queryParams['RCTIDate'] = ObjectSerializer::toQueryValue($rcti_date);
        }
        // query params
        if ($job_costing !== null) {
            $queryParams['JobCosting'] = ObjectSerializer::toQueryValue($job_costing);
        }
        // query params
        if ($invoice_no !== null) {
            $queryParams['InvoiceNo'] = ObjectSerializer::toQueryValue($invoice_no);
        }
        // query params
        if ($logical_id !== null) {
            $queryParams['LogicalID'] = ObjectSerializer::toQueryValue($logical_id);
        }
        // query params
        if ($logical_warehouse_description !== null) {
            $queryParams['LogicalWarehouseDescription'] = ObjectSerializer::toQueryValue($logical_warehouse_description);
        }
        // query params
        if ($physical_warehouse_description !== null) {
            $queryParams['PhysicalWarehouseDescription'] = ObjectSerializer::toQueryValue($physical_warehouse_description);
        }
        // query params
        if ($credit_note !== null) {
            $queryParams['CreditNote'] = ObjectSerializer::toQueryValue($credit_note);
        }
        // query params
        if ($staff_id !== null) {
            $queryParams['StaffID'] = ObjectSerializer::toQueryValue($staff_id);
        }
        // query params
        if ($staff_user_name !== null) {
            $queryParams['StaffUserName'] = ObjectSerializer::toQueryValue($staff_user_name);
        }
        // query params
        if ($staff_title !== null) {
            $queryParams['StaffTitle'] = ObjectSerializer::toQueryValue($staff_title);
        }
        // query params
        if ($staff_first_name !== null) {
            $queryParams['StaffFirstName'] = ObjectSerializer::toQueryValue($staff_first_name);
        }
        // query params
        if ($staff_surname !== null) {
            $queryParams['StaffSurname'] = ObjectSerializer::toQueryValue($staff_surname);
        }
        // query params
        if ($branch_id !== null) {
            $queryParams['BranchID'] = ObjectSerializer::toQueryValue($branch_id);
        }
        // query params
        if ($branch_description !== null) {
            $queryParams['BranchDescription'] = ObjectSerializer::toQueryValue($branch_description);
        }
        // query params
        if ($branch_name !== null) {
            $queryParams['BranchName'] = ObjectSerializer::toQueryValue($branch_name);
        }
        // query params
        if ($order_no !== null) {
            $queryParams['OrderNo'] = ObjectSerializer::toQueryValue($order_no);
        }
        // query params
        if ($so_reference !== null) {
            $queryParams['SOReference'] = ObjectSerializer::toQueryValue($so_reference);
        }
        // query params
        if ($sender_edi_address !== null) {
            $queryParams['SenderEDIAddress'] = ObjectSerializer::toQueryValue($sender_edi_address);
        }
        // query params
        if ($receiver_edi_address !== null) {
            $queryParams['ReceiverEDIAddress'] = ObjectSerializer::toQueryValue($receiver_edi_address);
        }
        // query params
        if ($edi_vendor_number !== null) {
            $queryParams['EDIVendorNumber'] = ObjectSerializer::toQueryValue($edi_vendor_number);
        }
        // query params
        if ($edi_buyer_number !== null) {
            $queryParams['EDIBuyerNumber'] = ObjectSerializer::toQueryValue($edi_buyer_number);
        }
        // query params
        if ($debtor_id !== null) {
            $queryParams['DebtorID'] = ObjectSerializer::toQueryValue($debtor_id);
        }
        // query params
        if ($debtor_account_no !== null) {
            $queryParams['DebtorAccountNo'] = ObjectSerializer::toQueryValue($debtor_account_no);
        }
        // query params
        if ($debtor_name !== null) {
            $queryParams['DebtorName'] = ObjectSerializer::toQueryValue($debtor_name);
        }
        // query params
        if ($debtor_email_address !== null) {
            $queryParams['DebtorEmailAddress'] = ObjectSerializer::toQueryValue($debtor_email_address);
        }
        // query params
        if ($debtor_contact_name !== null) {
            $queryParams['DebtorContactName'] = ObjectSerializer::toQueryValue($debtor_contact_name);
        }
        // query params
        if ($ediasn !== null) {
            $queryParams['EDIASN'] = ObjectSerializer::toQueryValue($ediasn);
        }
        // query params
        if ($delivery_addressee !== null) {
            $queryParams['DeliveryAddressee'] = ObjectSerializer::toQueryValue($delivery_addressee);
        }
        // query params
        if ($delivery_address1 !== null) {
            $queryParams['DeliveryAddress1'] = ObjectSerializer::toQueryValue($delivery_address1);
        }
        // query params
        if ($delivery_address2 !== null) {
            $queryParams['DeliveryAddress2'] = ObjectSerializer::toQueryValue($delivery_address2);
        }
        // query params
        if ($delivery_address_suburb !== null) {
            $queryParams['DeliveryAddressSuburb'] = ObjectSerializer::toQueryValue($delivery_address_suburb);
        }
        // query params
        if ($delivery_address_state !== null) {
            $queryParams['DeliveryAddressState'] = ObjectSerializer::toQueryValue($delivery_address_state);
        }
        // query params
        if ($delivery_address_contact_name !== null) {
            $queryParams['DeliveryAddressContactName'] = ObjectSerializer::toQueryValue($delivery_address_contact_name);
        }
        // query params
        if ($delivery_address_postcode !== null) {
            $queryParams['DeliveryAddressPostcode'] = ObjectSerializer::toQueryValue($delivery_address_postcode);
        }
        // query params
        if ($delivery_address_country !== null) {
            $queryParams['DeliveryAddressCountry'] = ObjectSerializer::toQueryValue($delivery_address_country);
        }
        // query params
        if ($delivery_address_notes !== null) {
            $queryParams['DeliveryAddressNotes'] = ObjectSerializer::toQueryValue($delivery_address_notes);
        }
        // query params
        if ($delivery_address_courier_details !== null) {
            $queryParams['DeliveryAddressCourierDetails'] = ObjectSerializer::toQueryValue($delivery_address_courier_details);
        }
        // query params
        if ($rcti_no !== null) {
            $queryParams['RCTINo'] = ObjectSerializer::toQueryValue($rcti_no);
        }
        // query params
        if ($custom_field_values !== null) {
            $queryParams['CustomFieldValues'] = ObjectSerializer::toQueryValue($custom_field_values);
        }
        // query params
        if ($notes !== null) {
            $queryParams['Notes'] = ObjectSerializer::toQueryValue($notes);
        }
        // query params
        if ($documents !== null) {
            $queryParams['Documents'] = ObjectSerializer::toQueryValue($documents);
        }
        // query params
        if ($payments !== null) {
            $queryParams['Payments'] = ObjectSerializer::toQueryValue($payments);
        }
        // query params
        if ($lines !== null) {
            $queryParams['Lines'] = ObjectSerializer::toQueryValue($lines);
        }
        // query params
        if ($histories !== null) {
            $queryParams['Histories'] = ObjectSerializer::toQueryValue($histories);
        }
        // query params
        if ($as_ns !== null) {
            $queryParams['ASNs'] = ObjectSerializer::toQueryValue($as_ns);
        }
        // header params
        if ($accept !== null) {
            $headerParams['Accept'] = ObjectSerializer::toHeaderValue($accept);
        }
        // header params
        if ($jiwa_stateful !== null) {
            $headerParams['jiwa-stateful'] = ObjectSerializer::toHeaderValue($jiwa_stateful);
        }

        // path params
        if ($invoice_id !== null) {
            $resourcePath = str_replace(
                '{' . 'InvoiceID' . '}',
                ObjectSerializer::toPathValue($invoice_id),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;
        if (isset($body)) {
            $_tempBody = $body;
        }

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json', 'application/xml']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json', 'application/xml'],
                ['application/x-www-form-urlencoded', 'application/json', 'application/xml']
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            
            if($headers['Content-Type'] === 'application/json') {
                // \stdClass has no __toString(), so we should encode it manually
                if ($httpBody instanceof \stdClass) {
                    $httpBody = \GuzzleHttp\json_encode($httpBody);
                }
                // array has no __toString(), so we should encode it manually
                if(is_array($httpBody)) {
                    $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($httpBody));
                }
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\Query::build($formParams);
            }
        }

        // this endpoint requires HTTP basic authentication
        if ($this->config->getUsername() !== null || $this->config->getPassword() !== null) {
            $headers['Authorization'] = 'Basic ' . base64_encode($this->config->getUsername() . ":" . $this->config->getPassword());
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\Query::build($queryParams);
        return new Request(
            'PATCH',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation salesOrderPOSTRequestPost
     *
     * Creates a new sales order.
     *
     * @param  string $accept Accept Header (required)
     * @param  bool $jiwa_stateful Stateful indicator (optional)
     * @param  string $type type (optional)
     * @param  string $system_settings system_settings (optional)
     * @param  \DateTime $initiated_date initiated_date (optional)
     * @param  \DateTime $invoice_init_date invoice_init_date (optional)
     * @param  string $sales_order_type sales_order_type (optional)
     * @param  string $order_type order_type (optional)
     * @param  string $status status (optional)
     * @param  string $edi_status edi_status (optional)
     * @param  string $bill_type bill_type (optional)
     * @param  \DateTime $expected_delivery_date expected_delivery_date (optional)
     * @param  \DateTime $delivered_date delivered_date (optional)
     * @param  bool $delivered delivered (optional)
     * @param  string $edi_pick_status edi_pick_status (optional)
     * @param  string $edi_order_type edi_order_type (optional)
     * @param  \DateTime $edi_deliver_not_before_date edi_deliver_not_before_date (optional)
     * @param  \DateTime $edi_deliver_not_after_date edi_deliver_not_after_date (optional)
     * @param  string $cash_sales cash_sales (optional)
     * @param  bool $drop_shipment drop_shipment (optional)
     * @param  double $cartage1_ex_gst cartage1_ex_gst (optional)
     * @param  double $cartage1_gst_rate cartage1_gst_rate (optional)
     * @param  double $cartage1_gst cartage1_gst (optional)
     * @param  double $cartage2_ex_gst cartage2_ex_gst (optional)
     * @param  double $cartage2_gst_rate cartage2_gst_rate (optional)
     * @param  double $cartage2_gst cartage2_gst (optional)
     * @param  double $cartage3_ex_gst cartage3_ex_gst (optional)
     * @param  double $cartage3_gst_rate cartage3_gst_rate (optional)
     * @param  double $cartage3_gst cartage3_gst (optional)
     * @param  double $rcti_amount rcti_amount (optional)
     * @param  \DateTime $rcti_date rcti_date (optional)
     * @param  string $job_costing job_costing (optional)
     * @param  string $invoice_no invoice_no (optional)
     * @param  string $logical_id logical_id (optional)
     * @param  string $logical_warehouse_description logical_warehouse_description (optional)
     * @param  string $physical_warehouse_description physical_warehouse_description (optional)
     * @param  bool $credit_note credit_note (optional)
     * @param  string $staff_id staff_id (optional)
     * @param  string $staff_user_name staff_user_name (optional)
     * @param  string $staff_title staff_title (optional)
     * @param  string $staff_first_name staff_first_name (optional)
     * @param  string $staff_surname staff_surname (optional)
     * @param  string $branch_id branch_id (optional)
     * @param  string $branch_description branch_description (optional)
     * @param  string $branch_name branch_name (optional)
     * @param  string $order_no order_no (optional)
     * @param  string $so_reference so_reference (optional)
     * @param  string $sender_edi_address sender_edi_address (optional)
     * @param  string $receiver_edi_address receiver_edi_address (optional)
     * @param  string $edi_vendor_number edi_vendor_number (optional)
     * @param  string $edi_buyer_number edi_buyer_number (optional)
     * @param  string $debtor_id debtor_id (optional)
     * @param  string $debtor_account_no debtor_account_no (optional)
     * @param  string $debtor_name debtor_name (optional)
     * @param  string $debtor_email_address debtor_email_address (optional)
     * @param  string $debtor_contact_name debtor_contact_name (optional)
     * @param  string $ediasn ediasn (optional)
     * @param  string $delivery_addressee delivery_addressee (optional)
     * @param  string $delivery_address1 delivery_address1 (optional)
     * @param  string $delivery_address2 delivery_address2 (optional)
     * @param  string $delivery_address_suburb delivery_address_suburb (optional)
     * @param  string $delivery_address_state delivery_address_state (optional)
     * @param  string $delivery_address_contact_name delivery_address_contact_name (optional)
     * @param  string $delivery_address_postcode delivery_address_postcode (optional)
     * @param  string $delivery_address_country delivery_address_country (optional)
     * @param  string $delivery_address_notes delivery_address_notes (optional)
     * @param  string $delivery_address_courier_details delivery_address_courier_details (optional)
     * @param  string $rcti_no rcti_no (optional)
     * @param  string $custom_field_values custom_field_values (optional)
     * @param  string $notes notes (optional)
     * @param  string $documents documents (optional)
     * @param  string $payments payments (optional)
     * @param  string $lines lines (optional)
     * @param  string $histories histories (optional)
     * @param  string $as_ns as_ns (optional)
     * @param  \Jiwa\Model\SalesOrderPOSTRequest $body body (optional)
     *
     * @throws \Jiwa\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Jiwa\Model\SalesOrder
     */
    public function salesOrderPOSTRequestPost($accept, $jiwa_stateful = null, $type = null, $system_settings = null, $initiated_date = null, $invoice_init_date = null, $sales_order_type = null, $order_type = null, $status = null, $edi_status = null, $bill_type = null, $expected_delivery_date = null, $delivered_date = null, $delivered = null, $edi_pick_status = null, $edi_order_type = null, $edi_deliver_not_before_date = null, $edi_deliver_not_after_date = null, $cash_sales = null, $drop_shipment = null, $cartage1_ex_gst = null, $cartage1_gst_rate = null, $cartage1_gst = null, $cartage2_ex_gst = null, $cartage2_gst_rate = null, $cartage2_gst = null, $cartage3_ex_gst = null, $cartage3_gst_rate = null, $cartage3_gst = null, $rcti_amount = null, $rcti_date = null, $job_costing = null, $invoice_no = null, $logical_id = null, $logical_warehouse_description = null, $physical_warehouse_description = null, $credit_note = null, $staff_id = null, $staff_user_name = null, $staff_title = null, $staff_first_name = null, $staff_surname = null, $branch_id = null, $branch_description = null, $branch_name = null, $order_no = null, $so_reference = null, $sender_edi_address = null, $receiver_edi_address = null, $edi_vendor_number = null, $edi_buyer_number = null, $debtor_id = null, $debtor_account_no = null, $debtor_name = null, $debtor_email_address = null, $debtor_contact_name = null, $ediasn = null, $delivery_addressee = null, $delivery_address1 = null, $delivery_address2 = null, $delivery_address_suburb = null, $delivery_address_state = null, $delivery_address_contact_name = null, $delivery_address_postcode = null, $delivery_address_country = null, $delivery_address_notes = null, $delivery_address_courier_details = null, $rcti_no = null, $custom_field_values = null, $notes = null, $documents = null, $payments = null, $lines = null, $histories = null, $as_ns = null, $body = null)
    {
        list($response) = $this->salesOrderPOSTRequestPostWithHttpInfo($accept, $jiwa_stateful, $type, $system_settings, $initiated_date, $invoice_init_date, $sales_order_type, $order_type, $status, $edi_status, $bill_type, $expected_delivery_date, $delivered_date, $delivered, $edi_pick_status, $edi_order_type, $edi_deliver_not_before_date, $edi_deliver_not_after_date, $cash_sales, $drop_shipment, $cartage1_ex_gst, $cartage1_gst_rate, $cartage1_gst, $cartage2_ex_gst, $cartage2_gst_rate, $cartage2_gst, $cartage3_ex_gst, $cartage3_gst_rate, $cartage3_gst, $rcti_amount, $rcti_date, $job_costing, $invoice_no, $logical_id, $logical_warehouse_description, $physical_warehouse_description, $credit_note, $staff_id, $staff_user_name, $staff_title, $staff_first_name, $staff_surname, $branch_id, $branch_description, $branch_name, $order_no, $so_reference, $sender_edi_address, $receiver_edi_address, $edi_vendor_number, $edi_buyer_number, $debtor_id, $debtor_account_no, $debtor_name, $debtor_email_address, $debtor_contact_name, $ediasn, $delivery_addressee, $delivery_address1, $delivery_address2, $delivery_address_suburb, $delivery_address_state, $delivery_address_contact_name, $delivery_address_postcode, $delivery_address_country, $delivery_address_notes, $delivery_address_courier_details, $rcti_no, $custom_field_values, $notes, $documents, $payments, $lines, $histories, $as_ns, $body);
        return $response;
    }

    /**
     * Operation salesOrderPOSTRequestPostWithHttpInfo
     *
     * Creates a new sales order.
     *
     * @param  string $accept Accept Header (required)
     * @param  bool $jiwa_stateful Stateful indicator (optional)
     * @param  string $type (optional)
     * @param  string $system_settings (optional)
     * @param  \DateTime $initiated_date (optional)
     * @param  \DateTime $invoice_init_date (optional)
     * @param  string $sales_order_type (optional)
     * @param  string $order_type (optional)
     * @param  string $status (optional)
     * @param  string $edi_status (optional)
     * @param  string $bill_type (optional)
     * @param  \DateTime $expected_delivery_date (optional)
     * @param  \DateTime $delivered_date (optional)
     * @param  bool $delivered (optional)
     * @param  string $edi_pick_status (optional)
     * @param  string $edi_order_type (optional)
     * @param  \DateTime $edi_deliver_not_before_date (optional)
     * @param  \DateTime $edi_deliver_not_after_date (optional)
     * @param  string $cash_sales (optional)
     * @param  bool $drop_shipment (optional)
     * @param  double $cartage1_ex_gst (optional)
     * @param  double $cartage1_gst_rate (optional)
     * @param  double $cartage1_gst (optional)
     * @param  double $cartage2_ex_gst (optional)
     * @param  double $cartage2_gst_rate (optional)
     * @param  double $cartage2_gst (optional)
     * @param  double $cartage3_ex_gst (optional)
     * @param  double $cartage3_gst_rate (optional)
     * @param  double $cartage3_gst (optional)
     * @param  double $rcti_amount (optional)
     * @param  \DateTime $rcti_date (optional)
     * @param  string $job_costing (optional)
     * @param  string $invoice_no (optional)
     * @param  string $logical_id (optional)
     * @param  string $logical_warehouse_description (optional)
     * @param  string $physical_warehouse_description (optional)
     * @param  bool $credit_note (optional)
     * @param  string $staff_id (optional)
     * @param  string $staff_user_name (optional)
     * @param  string $staff_title (optional)
     * @param  string $staff_first_name (optional)
     * @param  string $staff_surname (optional)
     * @param  string $branch_id (optional)
     * @param  string $branch_description (optional)
     * @param  string $branch_name (optional)
     * @param  string $order_no (optional)
     * @param  string $so_reference (optional)
     * @param  string $sender_edi_address (optional)
     * @param  string $receiver_edi_address (optional)
     * @param  string $edi_vendor_number (optional)
     * @param  string $edi_buyer_number (optional)
     * @param  string $debtor_id (optional)
     * @param  string $debtor_account_no (optional)
     * @param  string $debtor_name (optional)
     * @param  string $debtor_email_address (optional)
     * @param  string $debtor_contact_name (optional)
     * @param  string $ediasn (optional)
     * @param  string $delivery_addressee (optional)
     * @param  string $delivery_address1 (optional)
     * @param  string $delivery_address2 (optional)
     * @param  string $delivery_address_suburb (optional)
     * @param  string $delivery_address_state (optional)
     * @param  string $delivery_address_contact_name (optional)
     * @param  string $delivery_address_postcode (optional)
     * @param  string $delivery_address_country (optional)
     * @param  string $delivery_address_notes (optional)
     * @param  string $delivery_address_courier_details (optional)
     * @param  string $rcti_no (optional)
     * @param  string $custom_field_values (optional)
     * @param  string $notes (optional)
     * @param  string $documents (optional)
     * @param  string $payments (optional)
     * @param  string $lines (optional)
     * @param  string $histories (optional)
     * @param  string $as_ns (optional)
     * @param  \Jiwa\Model\SalesOrderPOSTRequest $body (optional)
     *
     * @throws \Jiwa\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Jiwa\Model\SalesOrder, HTTP status code, HTTP response headers (array of strings)
     */
    public function salesOrderPOSTRequestPostWithHttpInfo($accept, $jiwa_stateful = null, $type = null, $system_settings = null, $initiated_date = null, $invoice_init_date = null, $sales_order_type = null, $order_type = null, $status = null, $edi_status = null, $bill_type = null, $expected_delivery_date = null, $delivered_date = null, $delivered = null, $edi_pick_status = null, $edi_order_type = null, $edi_deliver_not_before_date = null, $edi_deliver_not_after_date = null, $cash_sales = null, $drop_shipment = null, $cartage1_ex_gst = null, $cartage1_gst_rate = null, $cartage1_gst = null, $cartage2_ex_gst = null, $cartage2_gst_rate = null, $cartage2_gst = null, $cartage3_ex_gst = null, $cartage3_gst_rate = null, $cartage3_gst = null, $rcti_amount = null, $rcti_date = null, $job_costing = null, $invoice_no = null, $logical_id = null, $logical_warehouse_description = null, $physical_warehouse_description = null, $credit_note = null, $staff_id = null, $staff_user_name = null, $staff_title = null, $staff_first_name = null, $staff_surname = null, $branch_id = null, $branch_description = null, $branch_name = null, $order_no = null, $so_reference = null, $sender_edi_address = null, $receiver_edi_address = null, $edi_vendor_number = null, $edi_buyer_number = null, $debtor_id = null, $debtor_account_no = null, $debtor_name = null, $debtor_email_address = null, $debtor_contact_name = null, $ediasn = null, $delivery_addressee = null, $delivery_address1 = null, $delivery_address2 = null, $delivery_address_suburb = null, $delivery_address_state = null, $delivery_address_contact_name = null, $delivery_address_postcode = null, $delivery_address_country = null, $delivery_address_notes = null, $delivery_address_courier_details = null, $rcti_no = null, $custom_field_values = null, $notes = null, $documents = null, $payments = null, $lines = null, $histories = null, $as_ns = null, $body = null)
    {
        $returnType = '\Jiwa\Model\SalesOrder';
        $request = $this->salesOrderPOSTRequestPostRequest($accept, $jiwa_stateful, $type, $system_settings, $initiated_date, $invoice_init_date, $sales_order_type, $order_type, $status, $edi_status, $bill_type, $expected_delivery_date, $delivered_date, $delivered, $edi_pick_status, $edi_order_type, $edi_deliver_not_before_date, $edi_deliver_not_after_date, $cash_sales, $drop_shipment, $cartage1_ex_gst, $cartage1_gst_rate, $cartage1_gst, $cartage2_ex_gst, $cartage2_gst_rate, $cartage2_gst, $cartage3_ex_gst, $cartage3_gst_rate, $cartage3_gst, $rcti_amount, $rcti_date, $job_costing, $invoice_no, $logical_id, $logical_warehouse_description, $physical_warehouse_description, $credit_note, $staff_id, $staff_user_name, $staff_title, $staff_first_name, $staff_surname, $branch_id, $branch_description, $branch_name, $order_no, $so_reference, $sender_edi_address, $receiver_edi_address, $edi_vendor_number, $edi_buyer_number, $debtor_id, $debtor_account_no, $debtor_name, $debtor_email_address, $debtor_contact_name, $ediasn, $delivery_addressee, $delivery_address1, $delivery_address2, $delivery_address_suburb, $delivery_address_state, $delivery_address_contact_name, $delivery_address_postcode, $delivery_address_country, $delivery_address_notes, $delivery_address_courier_details, $rcti_no, $custom_field_values, $notes, $documents, $payments, $lines, $histories, $as_ns, $body);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Jiwa\Model\SalesOrder',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 201:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Jiwa\Model\SalesOrder',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 401:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Jiwa\Model\SalesOrder',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 403:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Jiwa\Model\SalesOrder',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation salesOrderPOSTRequestPostAsync
     *
     * Creates a new sales order.
     *
     * @param  string $accept Accept Header (required)
     * @param  bool $jiwa_stateful Stateful indicator (optional)
     * @param  string $type (optional)
     * @param  string $system_settings (optional)
     * @param  \DateTime $initiated_date (optional)
     * @param  \DateTime $invoice_init_date (optional)
     * @param  string $sales_order_type (optional)
     * @param  string $order_type (optional)
     * @param  string $status (optional)
     * @param  string $edi_status (optional)
     * @param  string $bill_type (optional)
     * @param  \DateTime $expected_delivery_date (optional)
     * @param  \DateTime $delivered_date (optional)
     * @param  bool $delivered (optional)
     * @param  string $edi_pick_status (optional)
     * @param  string $edi_order_type (optional)
     * @param  \DateTime $edi_deliver_not_before_date (optional)
     * @param  \DateTime $edi_deliver_not_after_date (optional)
     * @param  string $cash_sales (optional)
     * @param  bool $drop_shipment (optional)
     * @param  double $cartage1_ex_gst (optional)
     * @param  double $cartage1_gst_rate (optional)
     * @param  double $cartage1_gst (optional)
     * @param  double $cartage2_ex_gst (optional)
     * @param  double $cartage2_gst_rate (optional)
     * @param  double $cartage2_gst (optional)
     * @param  double $cartage3_ex_gst (optional)
     * @param  double $cartage3_gst_rate (optional)
     * @param  double $cartage3_gst (optional)
     * @param  double $rcti_amount (optional)
     * @param  \DateTime $rcti_date (optional)
     * @param  string $job_costing (optional)
     * @param  string $invoice_no (optional)
     * @param  string $logical_id (optional)
     * @param  string $logical_warehouse_description (optional)
     * @param  string $physical_warehouse_description (optional)
     * @param  bool $credit_note (optional)
     * @param  string $staff_id (optional)
     * @param  string $staff_user_name (optional)
     * @param  string $staff_title (optional)
     * @param  string $staff_first_name (optional)
     * @param  string $staff_surname (optional)
     * @param  string $branch_id (optional)
     * @param  string $branch_description (optional)
     * @param  string $branch_name (optional)
     * @param  string $order_no (optional)
     * @param  string $so_reference (optional)
     * @param  string $sender_edi_address (optional)
     * @param  string $receiver_edi_address (optional)
     * @param  string $edi_vendor_number (optional)
     * @param  string $edi_buyer_number (optional)
     * @param  string $debtor_id (optional)
     * @param  string $debtor_account_no (optional)
     * @param  string $debtor_name (optional)
     * @param  string $debtor_email_address (optional)
     * @param  string $debtor_contact_name (optional)
     * @param  string $ediasn (optional)
     * @param  string $delivery_addressee (optional)
     * @param  string $delivery_address1 (optional)
     * @param  string $delivery_address2 (optional)
     * @param  string $delivery_address_suburb (optional)
     * @param  string $delivery_address_state (optional)
     * @param  string $delivery_address_contact_name (optional)
     * @param  string $delivery_address_postcode (optional)
     * @param  string $delivery_address_country (optional)
     * @param  string $delivery_address_notes (optional)
     * @param  string $delivery_address_courier_details (optional)
     * @param  string $rcti_no (optional)
     * @param  string $custom_field_values (optional)
     * @param  string $notes (optional)
     * @param  string $documents (optional)
     * @param  string $payments (optional)
     * @param  string $lines (optional)
     * @param  string $histories (optional)
     * @param  string $as_ns (optional)
     * @param  \Jiwa\Model\SalesOrderPOSTRequest $body (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function salesOrderPOSTRequestPostAsync($accept, $jiwa_stateful = null, $type = null, $system_settings = null, $initiated_date = null, $invoice_init_date = null, $sales_order_type = null, $order_type = null, $status = null, $edi_status = null, $bill_type = null, $expected_delivery_date = null, $delivered_date = null, $delivered = null, $edi_pick_status = null, $edi_order_type = null, $edi_deliver_not_before_date = null, $edi_deliver_not_after_date = null, $cash_sales = null, $drop_shipment = null, $cartage1_ex_gst = null, $cartage1_gst_rate = null, $cartage1_gst = null, $cartage2_ex_gst = null, $cartage2_gst_rate = null, $cartage2_gst = null, $cartage3_ex_gst = null, $cartage3_gst_rate = null, $cartage3_gst = null, $rcti_amount = null, $rcti_date = null, $job_costing = null, $invoice_no = null, $logical_id = null, $logical_warehouse_description = null, $physical_warehouse_description = null, $credit_note = null, $staff_id = null, $staff_user_name = null, $staff_title = null, $staff_first_name = null, $staff_surname = null, $branch_id = null, $branch_description = null, $branch_name = null, $order_no = null, $so_reference = null, $sender_edi_address = null, $receiver_edi_address = null, $edi_vendor_number = null, $edi_buyer_number = null, $debtor_id = null, $debtor_account_no = null, $debtor_name = null, $debtor_email_address = null, $debtor_contact_name = null, $ediasn = null, $delivery_addressee = null, $delivery_address1 = null, $delivery_address2 = null, $delivery_address_suburb = null, $delivery_address_state = null, $delivery_address_contact_name = null, $delivery_address_postcode = null, $delivery_address_country = null, $delivery_address_notes = null, $delivery_address_courier_details = null, $rcti_no = null, $custom_field_values = null, $notes = null, $documents = null, $payments = null, $lines = null, $histories = null, $as_ns = null, $body = null)
    {
        return $this->salesOrderPOSTRequestPostAsyncWithHttpInfo($accept, $jiwa_stateful, $type, $system_settings, $initiated_date, $invoice_init_date, $sales_order_type, $order_type, $status, $edi_status, $bill_type, $expected_delivery_date, $delivered_date, $delivered, $edi_pick_status, $edi_order_type, $edi_deliver_not_before_date, $edi_deliver_not_after_date, $cash_sales, $drop_shipment, $cartage1_ex_gst, $cartage1_gst_rate, $cartage1_gst, $cartage2_ex_gst, $cartage2_gst_rate, $cartage2_gst, $cartage3_ex_gst, $cartage3_gst_rate, $cartage3_gst, $rcti_amount, $rcti_date, $job_costing, $invoice_no, $logical_id, $logical_warehouse_description, $physical_warehouse_description, $credit_note, $staff_id, $staff_user_name, $staff_title, $staff_first_name, $staff_surname, $branch_id, $branch_description, $branch_name, $order_no, $so_reference, $sender_edi_address, $receiver_edi_address, $edi_vendor_number, $edi_buyer_number, $debtor_id, $debtor_account_no, $debtor_name, $debtor_email_address, $debtor_contact_name, $ediasn, $delivery_addressee, $delivery_address1, $delivery_address2, $delivery_address_suburb, $delivery_address_state, $delivery_address_contact_name, $delivery_address_postcode, $delivery_address_country, $delivery_address_notes, $delivery_address_courier_details, $rcti_no, $custom_field_values, $notes, $documents, $payments, $lines, $histories, $as_ns, $body)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation salesOrderPOSTRequestPostAsyncWithHttpInfo
     *
     * Creates a new sales order.
     *
     * @param  string $accept Accept Header (required)
     * @param  bool $jiwa_stateful Stateful indicator (optional)
     * @param  string $type (optional)
     * @param  string $system_settings (optional)
     * @param  \DateTime $initiated_date (optional)
     * @param  \DateTime $invoice_init_date (optional)
     * @param  string $sales_order_type (optional)
     * @param  string $order_type (optional)
     * @param  string $status (optional)
     * @param  string $edi_status (optional)
     * @param  string $bill_type (optional)
     * @param  \DateTime $expected_delivery_date (optional)
     * @param  \DateTime $delivered_date (optional)
     * @param  bool $delivered (optional)
     * @param  string $edi_pick_status (optional)
     * @param  string $edi_order_type (optional)
     * @param  \DateTime $edi_deliver_not_before_date (optional)
     * @param  \DateTime $edi_deliver_not_after_date (optional)
     * @param  string $cash_sales (optional)
     * @param  bool $drop_shipment (optional)
     * @param  double $cartage1_ex_gst (optional)
     * @param  double $cartage1_gst_rate (optional)
     * @param  double $cartage1_gst (optional)
     * @param  double $cartage2_ex_gst (optional)
     * @param  double $cartage2_gst_rate (optional)
     * @param  double $cartage2_gst (optional)
     * @param  double $cartage3_ex_gst (optional)
     * @param  double $cartage3_gst_rate (optional)
     * @param  double $cartage3_gst (optional)
     * @param  double $rcti_amount (optional)
     * @param  \DateTime $rcti_date (optional)
     * @param  string $job_costing (optional)
     * @param  string $invoice_no (optional)
     * @param  string $logical_id (optional)
     * @param  string $logical_warehouse_description (optional)
     * @param  string $physical_warehouse_description (optional)
     * @param  bool $credit_note (optional)
     * @param  string $staff_id (optional)
     * @param  string $staff_user_name (optional)
     * @param  string $staff_title (optional)
     * @param  string $staff_first_name (optional)
     * @param  string $staff_surname (optional)
     * @param  string $branch_id (optional)
     * @param  string $branch_description (optional)
     * @param  string $branch_name (optional)
     * @param  string $order_no (optional)
     * @param  string $so_reference (optional)
     * @param  string $sender_edi_address (optional)
     * @param  string $receiver_edi_address (optional)
     * @param  string $edi_vendor_number (optional)
     * @param  string $edi_buyer_number (optional)
     * @param  string $debtor_id (optional)
     * @param  string $debtor_account_no (optional)
     * @param  string $debtor_name (optional)
     * @param  string $debtor_email_address (optional)
     * @param  string $debtor_contact_name (optional)
     * @param  string $ediasn (optional)
     * @param  string $delivery_addressee (optional)
     * @param  string $delivery_address1 (optional)
     * @param  string $delivery_address2 (optional)
     * @param  string $delivery_address_suburb (optional)
     * @param  string $delivery_address_state (optional)
     * @param  string $delivery_address_contact_name (optional)
     * @param  string $delivery_address_postcode (optional)
     * @param  string $delivery_address_country (optional)
     * @param  string $delivery_address_notes (optional)
     * @param  string $delivery_address_courier_details (optional)
     * @param  string $rcti_no (optional)
     * @param  string $custom_field_values (optional)
     * @param  string $notes (optional)
     * @param  string $documents (optional)
     * @param  string $payments (optional)
     * @param  string $lines (optional)
     * @param  string $histories (optional)
     * @param  string $as_ns (optional)
     * @param  \Jiwa\Model\SalesOrderPOSTRequest $body (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function salesOrderPOSTRequestPostAsyncWithHttpInfo($accept, $jiwa_stateful = null, $type = null, $system_settings = null, $initiated_date = null, $invoice_init_date = null, $sales_order_type = null, $order_type = null, $status = null, $edi_status = null, $bill_type = null, $expected_delivery_date = null, $delivered_date = null, $delivered = null, $edi_pick_status = null, $edi_order_type = null, $edi_deliver_not_before_date = null, $edi_deliver_not_after_date = null, $cash_sales = null, $drop_shipment = null, $cartage1_ex_gst = null, $cartage1_gst_rate = null, $cartage1_gst = null, $cartage2_ex_gst = null, $cartage2_gst_rate = null, $cartage2_gst = null, $cartage3_ex_gst = null, $cartage3_gst_rate = null, $cartage3_gst = null, $rcti_amount = null, $rcti_date = null, $job_costing = null, $invoice_no = null, $logical_id = null, $logical_warehouse_description = null, $physical_warehouse_description = null, $credit_note = null, $staff_id = null, $staff_user_name = null, $staff_title = null, $staff_first_name = null, $staff_surname = null, $branch_id = null, $branch_description = null, $branch_name = null, $order_no = null, $so_reference = null, $sender_edi_address = null, $receiver_edi_address = null, $edi_vendor_number = null, $edi_buyer_number = null, $debtor_id = null, $debtor_account_no = null, $debtor_name = null, $debtor_email_address = null, $debtor_contact_name = null, $ediasn = null, $delivery_addressee = null, $delivery_address1 = null, $delivery_address2 = null, $delivery_address_suburb = null, $delivery_address_state = null, $delivery_address_contact_name = null, $delivery_address_postcode = null, $delivery_address_country = null, $delivery_address_notes = null, $delivery_address_courier_details = null, $rcti_no = null, $custom_field_values = null, $notes = null, $documents = null, $payments = null, $lines = null, $histories = null, $as_ns = null, $body = null)
    {
        $returnType = '\Jiwa\Model\SalesOrder';
        $request = $this->salesOrderPOSTRequestPostRequest($accept, $jiwa_stateful, $type, $system_settings, $initiated_date, $invoice_init_date, $sales_order_type, $order_type, $status, $edi_status, $bill_type, $expected_delivery_date, $delivered_date, $delivered, $edi_pick_status, $edi_order_type, $edi_deliver_not_before_date, $edi_deliver_not_after_date, $cash_sales, $drop_shipment, $cartage1_ex_gst, $cartage1_gst_rate, $cartage1_gst, $cartage2_ex_gst, $cartage2_gst_rate, $cartage2_gst, $cartage3_ex_gst, $cartage3_gst_rate, $cartage3_gst, $rcti_amount, $rcti_date, $job_costing, $invoice_no, $logical_id, $logical_warehouse_description, $physical_warehouse_description, $credit_note, $staff_id, $staff_user_name, $staff_title, $staff_first_name, $staff_surname, $branch_id, $branch_description, $branch_name, $order_no, $so_reference, $sender_edi_address, $receiver_edi_address, $edi_vendor_number, $edi_buyer_number, $debtor_id, $debtor_account_no, $debtor_name, $debtor_email_address, $debtor_contact_name, $ediasn, $delivery_addressee, $delivery_address1, $delivery_address2, $delivery_address_suburb, $delivery_address_state, $delivery_address_contact_name, $delivery_address_postcode, $delivery_address_country, $delivery_address_notes, $delivery_address_courier_details, $rcti_no, $custom_field_values, $notes, $documents, $payments, $lines, $histories, $as_ns, $body);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'salesOrderPOSTRequestPost'
     *
     * @param  string $accept Accept Header (required)
     * @param  bool $jiwa_stateful Stateful indicator (optional)
     * @param  string $type (optional)
     * @param  string $system_settings (optional)
     * @param  \DateTime $initiated_date (optional)
     * @param  \DateTime $invoice_init_date (optional)
     * @param  string $sales_order_type (optional)
     * @param  string $order_type (optional)
     * @param  string $status (optional)
     * @param  string $edi_status (optional)
     * @param  string $bill_type (optional)
     * @param  \DateTime $expected_delivery_date (optional)
     * @param  \DateTime $delivered_date (optional)
     * @param  bool $delivered (optional)
     * @param  string $edi_pick_status (optional)
     * @param  string $edi_order_type (optional)
     * @param  \DateTime $edi_deliver_not_before_date (optional)
     * @param  \DateTime $edi_deliver_not_after_date (optional)
     * @param  string $cash_sales (optional)
     * @param  bool $drop_shipment (optional)
     * @param  double $cartage1_ex_gst (optional)
     * @param  double $cartage1_gst_rate (optional)
     * @param  double $cartage1_gst (optional)
     * @param  double $cartage2_ex_gst (optional)
     * @param  double $cartage2_gst_rate (optional)
     * @param  double $cartage2_gst (optional)
     * @param  double $cartage3_ex_gst (optional)
     * @param  double $cartage3_gst_rate (optional)
     * @param  double $cartage3_gst (optional)
     * @param  double $rcti_amount (optional)
     * @param  \DateTime $rcti_date (optional)
     * @param  string $job_costing (optional)
     * @param  string $invoice_no (optional)
     * @param  string $logical_id (optional)
     * @param  string $logical_warehouse_description (optional)
     * @param  string $physical_warehouse_description (optional)
     * @param  bool $credit_note (optional)
     * @param  string $staff_id (optional)
     * @param  string $staff_user_name (optional)
     * @param  string $staff_title (optional)
     * @param  string $staff_first_name (optional)
     * @param  string $staff_surname (optional)
     * @param  string $branch_id (optional)
     * @param  string $branch_description (optional)
     * @param  string $branch_name (optional)
     * @param  string $order_no (optional)
     * @param  string $so_reference (optional)
     * @param  string $sender_edi_address (optional)
     * @param  string $receiver_edi_address (optional)
     * @param  string $edi_vendor_number (optional)
     * @param  string $edi_buyer_number (optional)
     * @param  string $debtor_id (optional)
     * @param  string $debtor_account_no (optional)
     * @param  string $debtor_name (optional)
     * @param  string $debtor_email_address (optional)
     * @param  string $debtor_contact_name (optional)
     * @param  string $ediasn (optional)
     * @param  string $delivery_addressee (optional)
     * @param  string $delivery_address1 (optional)
     * @param  string $delivery_address2 (optional)
     * @param  string $delivery_address_suburb (optional)
     * @param  string $delivery_address_state (optional)
     * @param  string $delivery_address_contact_name (optional)
     * @param  string $delivery_address_postcode (optional)
     * @param  string $delivery_address_country (optional)
     * @param  string $delivery_address_notes (optional)
     * @param  string $delivery_address_courier_details (optional)
     * @param  string $rcti_no (optional)
     * @param  string $custom_field_values (optional)
     * @param  string $notes (optional)
     * @param  string $documents (optional)
     * @param  string $payments (optional)
     * @param  string $lines (optional)
     * @param  string $histories (optional)
     * @param  string $as_ns (optional)
     * @param  \Jiwa\Model\SalesOrderPOSTRequest $body (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function salesOrderPOSTRequestPostRequest($accept, $jiwa_stateful = null, $type = null, $system_settings = null, $initiated_date = null, $invoice_init_date = null, $sales_order_type = null, $order_type = null, $status = null, $edi_status = null, $bill_type = null, $expected_delivery_date = null, $delivered_date = null, $delivered = null, $edi_pick_status = null, $edi_order_type = null, $edi_deliver_not_before_date = null, $edi_deliver_not_after_date = null, $cash_sales = null, $drop_shipment = null, $cartage1_ex_gst = null, $cartage1_gst_rate = null, $cartage1_gst = null, $cartage2_ex_gst = null, $cartage2_gst_rate = null, $cartage2_gst = null, $cartage3_ex_gst = null, $cartage3_gst_rate = null, $cartage3_gst = null, $rcti_amount = null, $rcti_date = null, $job_costing = null, $invoice_no = null, $logical_id = null, $logical_warehouse_description = null, $physical_warehouse_description = null, $credit_note = null, $staff_id = null, $staff_user_name = null, $staff_title = null, $staff_first_name = null, $staff_surname = null, $branch_id = null, $branch_description = null, $branch_name = null, $order_no = null, $so_reference = null, $sender_edi_address = null, $receiver_edi_address = null, $edi_vendor_number = null, $edi_buyer_number = null, $debtor_id = null, $debtor_account_no = null, $debtor_name = null, $debtor_email_address = null, $debtor_contact_name = null, $ediasn = null, $delivery_addressee = null, $delivery_address1 = null, $delivery_address2 = null, $delivery_address_suburb = null, $delivery_address_state = null, $delivery_address_contact_name = null, $delivery_address_postcode = null, $delivery_address_country = null, $delivery_address_notes = null, $delivery_address_courier_details = null, $rcti_no = null, $custom_field_values = null, $notes = null, $documents = null, $payments = null, $lines = null, $histories = null, $as_ns = null, $body = null)
    {
        // verify the required parameter 'accept' is set
        if ($accept === null || (is_array($accept) && count($accept) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $accept when calling salesOrderPOSTRequestPost'
            );
        }

        $resourcePath = '/SalesOrders';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        if ($type !== null) {
            $queryParams['Type'] = ObjectSerializer::toQueryValue($type);
        }
        // query params
        if ($system_settings !== null) {
            $queryParams['SystemSettings'] = ObjectSerializer::toQueryValue($system_settings);
        }
        // query params
        if ($initiated_date !== null) {
            $queryParams['InitiatedDate'] = ObjectSerializer::toQueryValue($initiated_date);
        }
        // query params
        if ($invoice_init_date !== null) {
            $queryParams['InvoiceInitDate'] = ObjectSerializer::toQueryValue($invoice_init_date);
        }
        // query params
        if ($sales_order_type !== null) {
            $queryParams['SalesOrderType'] = ObjectSerializer::toQueryValue($sales_order_type);
        }
        // query params
        if ($order_type !== null) {
            $queryParams['OrderType'] = ObjectSerializer::toQueryValue($order_type);
        }
        // query params
        if ($status !== null) {
            $queryParams['Status'] = ObjectSerializer::toQueryValue($status);
        }
        // query params
        if ($edi_status !== null) {
            $queryParams['EDIStatus'] = ObjectSerializer::toQueryValue($edi_status);
        }
        // query params
        if ($bill_type !== null) {
            $queryParams['BillType'] = ObjectSerializer::toQueryValue($bill_type);
        }
        // query params
        if ($expected_delivery_date !== null) {
            $queryParams['ExpectedDeliveryDate'] = ObjectSerializer::toQueryValue($expected_delivery_date);
        }
        // query params
        if ($delivered_date !== null) {
            $queryParams['DeliveredDate'] = ObjectSerializer::toQueryValue($delivered_date);
        }
        // query params
        if ($delivered !== null) {
            $queryParams['Delivered'] = ObjectSerializer::toQueryValue($delivered);
        }
        // query params
        if ($edi_pick_status !== null) {
            $queryParams['EDIPickStatus'] = ObjectSerializer::toQueryValue($edi_pick_status);
        }
        // query params
        if ($edi_order_type !== null) {
            $queryParams['EDIOrderType'] = ObjectSerializer::toQueryValue($edi_order_type);
        }
        // query params
        if ($edi_deliver_not_before_date !== null) {
            $queryParams['EDIDeliverNotBeforeDate'] = ObjectSerializer::toQueryValue($edi_deliver_not_before_date);
        }
        // query params
        if ($edi_deliver_not_after_date !== null) {
            $queryParams['EDIDeliverNotAfterDate'] = ObjectSerializer::toQueryValue($edi_deliver_not_after_date);
        }
        // query params
        if ($cash_sales !== null) {
            $queryParams['CashSales'] = ObjectSerializer::toQueryValue($cash_sales);
        }
        // query params
        if ($drop_shipment !== null) {
            $queryParams['DropShipment'] = ObjectSerializer::toQueryValue($drop_shipment);
        }
        // query params
        if ($cartage1_ex_gst !== null) {
            $queryParams['Cartage1ExGst'] = ObjectSerializer::toQueryValue($cartage1_ex_gst);
        }
        // query params
        if ($cartage1_gst_rate !== null) {
            $queryParams['Cartage1GstRate'] = ObjectSerializer::toQueryValue($cartage1_gst_rate);
        }
        // query params
        if ($cartage1_gst !== null) {
            $queryParams['Cartage1Gst'] = ObjectSerializer::toQueryValue($cartage1_gst);
        }
        // query params
        if ($cartage2_ex_gst !== null) {
            $queryParams['Cartage2ExGst'] = ObjectSerializer::toQueryValue($cartage2_ex_gst);
        }
        // query params
        if ($cartage2_gst_rate !== null) {
            $queryParams['Cartage2GstRate'] = ObjectSerializer::toQueryValue($cartage2_gst_rate);
        }
        // query params
        if ($cartage2_gst !== null) {
            $queryParams['Cartage2Gst'] = ObjectSerializer::toQueryValue($cartage2_gst);
        }
        // query params
        if ($cartage3_ex_gst !== null) {
            $queryParams['Cartage3ExGst'] = ObjectSerializer::toQueryValue($cartage3_ex_gst);
        }
        // query params
        if ($cartage3_gst_rate !== null) {
            $queryParams['Cartage3GstRate'] = ObjectSerializer::toQueryValue($cartage3_gst_rate);
        }
        // query params
        if ($cartage3_gst !== null) {
            $queryParams['Cartage3Gst'] = ObjectSerializer::toQueryValue($cartage3_gst);
        }
        // query params
        if ($rcti_amount !== null) {
            $queryParams['RCTIAmount'] = ObjectSerializer::toQueryValue($rcti_amount);
        }
        // query params
        if ($rcti_date !== null) {
            $queryParams['RCTIDate'] = ObjectSerializer::toQueryValue($rcti_date);
        }
        // query params
        if ($job_costing !== null) {
            $queryParams['JobCosting'] = ObjectSerializer::toQueryValue($job_costing);
        }
        // query params
        if ($invoice_no !== null) {
            $queryParams['InvoiceNo'] = ObjectSerializer::toQueryValue($invoice_no);
        }
        // query params
        if ($logical_id !== null) {
            $queryParams['LogicalID'] = ObjectSerializer::toQueryValue($logical_id);
        }
        // query params
        if ($logical_warehouse_description !== null) {
            $queryParams['LogicalWarehouseDescription'] = ObjectSerializer::toQueryValue($logical_warehouse_description);
        }
        // query params
        if ($physical_warehouse_description !== null) {
            $queryParams['PhysicalWarehouseDescription'] = ObjectSerializer::toQueryValue($physical_warehouse_description);
        }
        // query params
        if ($credit_note !== null) {
            $queryParams['CreditNote'] = ObjectSerializer::toQueryValue($credit_note);
        }
        // query params
        if ($staff_id !== null) {
            $queryParams['StaffID'] = ObjectSerializer::toQueryValue($staff_id);
        }
        // query params
        if ($staff_user_name !== null) {
            $queryParams['StaffUserName'] = ObjectSerializer::toQueryValue($staff_user_name);
        }
        // query params
        if ($staff_title !== null) {
            $queryParams['StaffTitle'] = ObjectSerializer::toQueryValue($staff_title);
        }
        // query params
        if ($staff_first_name !== null) {
            $queryParams['StaffFirstName'] = ObjectSerializer::toQueryValue($staff_first_name);
        }
        // query params
        if ($staff_surname !== null) {
            $queryParams['StaffSurname'] = ObjectSerializer::toQueryValue($staff_surname);
        }
        // query params
        if ($branch_id !== null) {
            $queryParams['BranchID'] = ObjectSerializer::toQueryValue($branch_id);
        }
        // query params
        if ($branch_description !== null) {
            $queryParams['BranchDescription'] = ObjectSerializer::toQueryValue($branch_description);
        }
        // query params
        if ($branch_name !== null) {
            $queryParams['BranchName'] = ObjectSerializer::toQueryValue($branch_name);
        }
        // query params
        if ($order_no !== null) {
            $queryParams['OrderNo'] = ObjectSerializer::toQueryValue($order_no);
        }
        // query params
        if ($so_reference !== null) {
            $queryParams['SOReference'] = ObjectSerializer::toQueryValue($so_reference);
        }
        // query params
        if ($sender_edi_address !== null) {
            $queryParams['SenderEDIAddress'] = ObjectSerializer::toQueryValue($sender_edi_address);
        }
        // query params
        if ($receiver_edi_address !== null) {
            $queryParams['ReceiverEDIAddress'] = ObjectSerializer::toQueryValue($receiver_edi_address);
        }
        // query params
        if ($edi_vendor_number !== null) {
            $queryParams['EDIVendorNumber'] = ObjectSerializer::toQueryValue($edi_vendor_number);
        }
        // query params
        if ($edi_buyer_number !== null) {
            $queryParams['EDIBuyerNumber'] = ObjectSerializer::toQueryValue($edi_buyer_number);
        }
        // query params
        if ($debtor_id !== null) {
            $queryParams['DebtorID'] = ObjectSerializer::toQueryValue($debtor_id);
        }
        // query params
        if ($debtor_account_no !== null) {
            $queryParams['DebtorAccountNo'] = ObjectSerializer::toQueryValue($debtor_account_no);
        }
        // query params
        if ($debtor_name !== null) {
            $queryParams['DebtorName'] = ObjectSerializer::toQueryValue($debtor_name);
        }
        // query params
        if ($debtor_email_address !== null) {
            $queryParams['DebtorEmailAddress'] = ObjectSerializer::toQueryValue($debtor_email_address);
        }
        // query params
        if ($debtor_contact_name !== null) {
            $queryParams['DebtorContactName'] = ObjectSerializer::toQueryValue($debtor_contact_name);
        }
        // query params
        if ($ediasn !== null) {
            $queryParams['EDIASN'] = ObjectSerializer::toQueryValue($ediasn);
        }
        // query params
        if ($delivery_addressee !== null) {
            $queryParams['DeliveryAddressee'] = ObjectSerializer::toQueryValue($delivery_addressee);
        }
        // query params
        if ($delivery_address1 !== null) {
            $queryParams['DeliveryAddress1'] = ObjectSerializer::toQueryValue($delivery_address1);
        }
        // query params
        if ($delivery_address2 !== null) {
            $queryParams['DeliveryAddress2'] = ObjectSerializer::toQueryValue($delivery_address2);
        }
        // query params
        if ($delivery_address_suburb !== null) {
            $queryParams['DeliveryAddressSuburb'] = ObjectSerializer::toQueryValue($delivery_address_suburb);
        }
        // query params
        if ($delivery_address_state !== null) {
            $queryParams['DeliveryAddressState'] = ObjectSerializer::toQueryValue($delivery_address_state);
        }
        // query params
        if ($delivery_address_contact_name !== null) {
            $queryParams['DeliveryAddressContactName'] = ObjectSerializer::toQueryValue($delivery_address_contact_name);
        }
        // query params
        if ($delivery_address_postcode !== null) {
            $queryParams['DeliveryAddressPostcode'] = ObjectSerializer::toQueryValue($delivery_address_postcode);
        }
        // query params
        if ($delivery_address_country !== null) {
            $queryParams['DeliveryAddressCountry'] = ObjectSerializer::toQueryValue($delivery_address_country);
        }
        // query params
        if ($delivery_address_notes !== null) {
            $queryParams['DeliveryAddressNotes'] = ObjectSerializer::toQueryValue($delivery_address_notes);
        }
        // query params
        if ($delivery_address_courier_details !== null) {
            $queryParams['DeliveryAddressCourierDetails'] = ObjectSerializer::toQueryValue($delivery_address_courier_details);
        }
        // query params
        if ($rcti_no !== null) {
            $queryParams['RCTINo'] = ObjectSerializer::toQueryValue($rcti_no);
        }
        // query params
        if ($custom_field_values !== null) {
            $queryParams['CustomFieldValues'] = ObjectSerializer::toQueryValue($custom_field_values);
        }
        // query params
        if ($notes !== null) {
            $queryParams['Notes'] = ObjectSerializer::toQueryValue($notes);
        }
        // query params
        if ($documents !== null) {
            $queryParams['Documents'] = ObjectSerializer::toQueryValue($documents);
        }
        // query params
        if ($payments !== null) {
            $queryParams['Payments'] = ObjectSerializer::toQueryValue($payments);
        }
        // query params
        if ($lines !== null) {
            $queryParams['Lines'] = ObjectSerializer::toQueryValue($lines);
        }
        // query params
        if ($histories !== null) {
            $queryParams['Histories'] = ObjectSerializer::toQueryValue($histories);
        }
        // query params
        if ($as_ns !== null) {
            $queryParams['ASNs'] = ObjectSerializer::toQueryValue($as_ns);
        }
        // header params
        if ($accept !== null) {
            $headerParams['Accept'] = ObjectSerializer::toHeaderValue($accept);
        }
        // header params
        if ($jiwa_stateful !== null) {
            $headerParams['jiwa-stateful'] = ObjectSerializer::toHeaderValue($jiwa_stateful);
        }


        // body params
        $_tempBody = null;
        if (isset($body)) {
            $_tempBody = $body;
        }

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json', 'application/xml']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json', 'application/xml'],
                ['application/x-www-form-urlencoded', 'application/json', 'application/xml']
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            
            if($headers['Content-Type'] === 'application/json') {
                // \stdClass has no __toString(), so we should encode it manually
                if ($httpBody instanceof \stdClass) {
                    $httpBody = \GuzzleHttp\json_encode($httpBody);
                }
                // array has no __toString(), so we should encode it manually
                if(is_array($httpBody)) {
                    $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($httpBody));
                }
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\Query::build($formParams);
            }
        }

        // this endpoint requires HTTP basic authentication
        if ($this->config->getUsername() !== null || $this->config->getPassword() !== null) {
            $headers['Authorization'] = 'Basic ' . base64_encode($this->config->getUsername() . ":" . $this->config->getPassword());
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\Query::build($queryParams);
        return new Request(
            'POST',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation salesOrderPROCESSRequestInvoiceIDProcessGet
     *
     * Processes a sales order.
     *
     * @param  string $accept Accept Header (required)
     * @param  string $invoice_id invoice_id (required)
     * @param  bool $jiwa_stateful Stateful indicator (optional)
     *
     * @throws \Jiwa\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Jiwa\Model\SalesOrder
     */
    public function salesOrderPROCESSRequestInvoiceIDProcessGet($accept, $invoice_id, $jiwa_stateful = null)
    {
        list($response) = $this->salesOrderPROCESSRequestInvoiceIDProcessGetWithHttpInfo($accept, $invoice_id, $jiwa_stateful);
        return $response;
    }

    /**
     * Operation salesOrderPROCESSRequestInvoiceIDProcessGetWithHttpInfo
     *
     * Processes a sales order.
     *
     * @param  string $accept Accept Header (required)
     * @param  string $invoice_id (required)
     * @param  bool $jiwa_stateful Stateful indicator (optional)
     *
     * @throws \Jiwa\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Jiwa\Model\SalesOrder, HTTP status code, HTTP response headers (array of strings)
     */
    public function salesOrderPROCESSRequestInvoiceIDProcessGetWithHttpInfo($accept, $invoice_id, $jiwa_stateful = null)
    {
        $returnType = '\Jiwa\Model\SalesOrder';
        $request = $this->salesOrderPROCESSRequestInvoiceIDProcessGetRequest($accept, $invoice_id, $jiwa_stateful);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Jiwa\Model\SalesOrder',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 403:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Jiwa\Model\SalesOrder',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 404:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Jiwa\Model\SalesOrder',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 401:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Jiwa\Model\SalesOrder',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation salesOrderPROCESSRequestInvoiceIDProcessGetAsync
     *
     * Processes a sales order.
     *
     * @param  string $accept Accept Header (required)
     * @param  string $invoice_id (required)
     * @param  bool $jiwa_stateful Stateful indicator (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function salesOrderPROCESSRequestInvoiceIDProcessGetAsync($accept, $invoice_id, $jiwa_stateful = null)
    {
        return $this->salesOrderPROCESSRequestInvoiceIDProcessGetAsyncWithHttpInfo($accept, $invoice_id, $jiwa_stateful)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation salesOrderPROCESSRequestInvoiceIDProcessGetAsyncWithHttpInfo
     *
     * Processes a sales order.
     *
     * @param  string $accept Accept Header (required)
     * @param  string $invoice_id (required)
     * @param  bool $jiwa_stateful Stateful indicator (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function salesOrderPROCESSRequestInvoiceIDProcessGetAsyncWithHttpInfo($accept, $invoice_id, $jiwa_stateful = null)
    {
        $returnType = '\Jiwa\Model\SalesOrder';
        $request = $this->salesOrderPROCESSRequestInvoiceIDProcessGetRequest($accept, $invoice_id, $jiwa_stateful);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'salesOrderPROCESSRequestInvoiceIDProcessGet'
     *
     * @param  string $accept Accept Header (required)
     * @param  string $invoice_id (required)
     * @param  bool $jiwa_stateful Stateful indicator (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function salesOrderPROCESSRequestInvoiceIDProcessGetRequest($accept, $invoice_id, $jiwa_stateful = null)
    {
        // verify the required parameter 'accept' is set
        if ($accept === null || (is_array($accept) && count($accept) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $accept when calling salesOrderPROCESSRequestInvoiceIDProcessGet'
            );
        }
        // verify the required parameter 'invoice_id' is set
        if ($invoice_id === null || (is_array($invoice_id) && count($invoice_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $invoice_id when calling salesOrderPROCESSRequestInvoiceIDProcessGet'
            );
        }

        $resourcePath = '/SalesOrders/{InvoiceID}/Process';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // header params
        if ($accept !== null) {
            $headerParams['Accept'] = ObjectSerializer::toHeaderValue($accept);
        }
        // header params
        if ($jiwa_stateful !== null) {
            $headerParams['jiwa-stateful'] = ObjectSerializer::toHeaderValue($jiwa_stateful);
        }

        // path params
        if ($invoice_id !== null) {
            $resourcePath = str_replace(
                '{' . 'InvoiceID' . '}',
                ObjectSerializer::toPathValue($invoice_id),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json', 'application/xml']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json', 'application/xml'],
                ['application/x-www-form-urlencoded', 'application/json', 'application/xml']
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            
            if($headers['Content-Type'] === 'application/json') {
                // \stdClass has no __toString(), so we should encode it manually
                if ($httpBody instanceof \stdClass) {
                    $httpBody = \GuzzleHttp\json_encode($httpBody);
                }
                // array has no __toString(), so we should encode it manually
                if(is_array($httpBody)) {
                    $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($httpBody));
                }
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\Query::build($formParams);
            }
        }

        // this endpoint requires HTTP basic authentication
        if ($this->config->getUsername() !== null || $this->config->getPassword() !== null) {
            $headers['Authorization'] = 'Basic ' . base64_encode($this->config->getUsername() . ":" . $this->config->getPassword());
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\Query::build($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation salesOrderPaymentTypesDELETERequestPaymentTypesPaymentTypeIDDelete
     *
     * Deletes a payment type
     *
     * @param  string $accept Accept Header (required)
     * @param  string $payment_type_id payment_type_id (required)
     * @param  bool $jiwa_stateful Stateful indicator (optional)
     *
     * @throws \Jiwa\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Jiwa\Model\Object
     */
    public function salesOrderPaymentTypesDELETERequestPaymentTypesPaymentTypeIDDelete($accept, $payment_type_id, $jiwa_stateful = null)
    {
        list($response) = $this->salesOrderPaymentTypesDELETERequestPaymentTypesPaymentTypeIDDeleteWithHttpInfo($accept, $payment_type_id, $jiwa_stateful);
        return $response;
    }

    /**
     * Operation salesOrderPaymentTypesDELETERequestPaymentTypesPaymentTypeIDDeleteWithHttpInfo
     *
     * Deletes a payment type
     *
     * @param  string $accept Accept Header (required)
     * @param  string $payment_type_id (required)
     * @param  bool $jiwa_stateful Stateful indicator (optional)
     *
     * @throws \Jiwa\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Jiwa\Model\Object, HTTP status code, HTTP response headers (array of strings)
     */
    public function salesOrderPaymentTypesDELETERequestPaymentTypesPaymentTypeIDDeleteWithHttpInfo($accept, $payment_type_id, $jiwa_stateful = null)
    {
        $returnType = '\Jiwa\Model\Object';
        $request = $this->salesOrderPaymentTypesDELETERequestPaymentTypesPaymentTypeIDDeleteRequest($accept, $payment_type_id, $jiwa_stateful);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Jiwa\Model\Object',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 403:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Jiwa\Model\Object',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 404:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Jiwa\Model\Object',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 401:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Jiwa\Model\Object',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation salesOrderPaymentTypesDELETERequestPaymentTypesPaymentTypeIDDeleteAsync
     *
     * Deletes a payment type
     *
     * @param  string $accept Accept Header (required)
     * @param  string $payment_type_id (required)
     * @param  bool $jiwa_stateful Stateful indicator (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function salesOrderPaymentTypesDELETERequestPaymentTypesPaymentTypeIDDeleteAsync($accept, $payment_type_id, $jiwa_stateful = null)
    {
        return $this->salesOrderPaymentTypesDELETERequestPaymentTypesPaymentTypeIDDeleteAsyncWithHttpInfo($accept, $payment_type_id, $jiwa_stateful)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation salesOrderPaymentTypesDELETERequestPaymentTypesPaymentTypeIDDeleteAsyncWithHttpInfo
     *
     * Deletes a payment type
     *
     * @param  string $accept Accept Header (required)
     * @param  string $payment_type_id (required)
     * @param  bool $jiwa_stateful Stateful indicator (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function salesOrderPaymentTypesDELETERequestPaymentTypesPaymentTypeIDDeleteAsyncWithHttpInfo($accept, $payment_type_id, $jiwa_stateful = null)
    {
        $returnType = '\Jiwa\Model\Object';
        $request = $this->salesOrderPaymentTypesDELETERequestPaymentTypesPaymentTypeIDDeleteRequest($accept, $payment_type_id, $jiwa_stateful);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'salesOrderPaymentTypesDELETERequestPaymentTypesPaymentTypeIDDelete'
     *
     * @param  string $accept Accept Header (required)
     * @param  string $payment_type_id (required)
     * @param  bool $jiwa_stateful Stateful indicator (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function salesOrderPaymentTypesDELETERequestPaymentTypesPaymentTypeIDDeleteRequest($accept, $payment_type_id, $jiwa_stateful = null)
    {
        // verify the required parameter 'accept' is set
        if ($accept === null || (is_array($accept) && count($accept) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $accept when calling salesOrderPaymentTypesDELETERequestPaymentTypesPaymentTypeIDDelete'
            );
        }
        // verify the required parameter 'payment_type_id' is set
        if ($payment_type_id === null || (is_array($payment_type_id) && count($payment_type_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $payment_type_id when calling salesOrderPaymentTypesDELETERequestPaymentTypesPaymentTypeIDDelete'
            );
        }

        $resourcePath = '/SalesOrders/PaymentTypes/{PaymentTypeID}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // header params
        if ($accept !== null) {
            $headerParams['Accept'] = ObjectSerializer::toHeaderValue($accept);
        }
        // header params
        if ($jiwa_stateful !== null) {
            $headerParams['jiwa-stateful'] = ObjectSerializer::toHeaderValue($jiwa_stateful);
        }

        // path params
        if ($payment_type_id !== null) {
            $resourcePath = str_replace(
                '{' . 'PaymentTypeID' . '}',
                ObjectSerializer::toPathValue($payment_type_id),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json', 'application/xml']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json', 'application/xml'],
                ['application/x-www-form-urlencoded', 'application/json', 'application/xml']
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            
            if($headers['Content-Type'] === 'application/json') {
                // \stdClass has no __toString(), so we should encode it manually
                if ($httpBody instanceof \stdClass) {
                    $httpBody = \GuzzleHttp\json_encode($httpBody);
                }
                // array has no __toString(), so we should encode it manually
                if(is_array($httpBody)) {
                    $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($httpBody));
                }
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\Query::build($formParams);
            }
        }

        // this endpoint requires HTTP basic authentication
        if ($this->config->getUsername() !== null || $this->config->getPassword() !== null) {
            $headers['Authorization'] = 'Basic ' . base64_encode($this->config->getUsername() . ":" . $this->config->getPassword());
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\Query::build($queryParams);
        return new Request(
            'DELETE',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation salesOrderPaymentTypesGETManyRequestPaymentTypesGet
     *
     * Retrieves a list of payment types
     *
     * @param  string $accept Accept Header (required)
     * @param  bool $jiwa_stateful Stateful indicator (optional)
     *
     * @throws \Jiwa\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Jiwa\Model\PaymentType[]
     */
    public function salesOrderPaymentTypesGETManyRequestPaymentTypesGet($accept, $jiwa_stateful = null)
    {
        list($response) = $this->salesOrderPaymentTypesGETManyRequestPaymentTypesGetWithHttpInfo($accept, $jiwa_stateful);
        return $response;
    }

    /**
     * Operation salesOrderPaymentTypesGETManyRequestPaymentTypesGetWithHttpInfo
     *
     * Retrieves a list of payment types
     *
     * @param  string $accept Accept Header (required)
     * @param  bool $jiwa_stateful Stateful indicator (optional)
     *
     * @throws \Jiwa\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Jiwa\Model\PaymentType[], HTTP status code, HTTP response headers (array of strings)
     */
    public function salesOrderPaymentTypesGETManyRequestPaymentTypesGetWithHttpInfo($accept, $jiwa_stateful = null)
    {
        $returnType = '\Jiwa\Model\PaymentType[]';
        $request = $this->salesOrderPaymentTypesGETManyRequestPaymentTypesGetRequest($accept, $jiwa_stateful);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Jiwa\Model\PaymentType[]',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 401:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Jiwa\Model\PaymentType[]',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 403:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Jiwa\Model\PaymentType[]',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation salesOrderPaymentTypesGETManyRequestPaymentTypesGetAsync
     *
     * Retrieves a list of payment types
     *
     * @param  string $accept Accept Header (required)
     * @param  bool $jiwa_stateful Stateful indicator (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function salesOrderPaymentTypesGETManyRequestPaymentTypesGetAsync($accept, $jiwa_stateful = null)
    {
        return $this->salesOrderPaymentTypesGETManyRequestPaymentTypesGetAsyncWithHttpInfo($accept, $jiwa_stateful)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation salesOrderPaymentTypesGETManyRequestPaymentTypesGetAsyncWithHttpInfo
     *
     * Retrieves a list of payment types
     *
     * @param  string $accept Accept Header (required)
     * @param  bool $jiwa_stateful Stateful indicator (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function salesOrderPaymentTypesGETManyRequestPaymentTypesGetAsyncWithHttpInfo($accept, $jiwa_stateful = null)
    {
        $returnType = '\Jiwa\Model\PaymentType[]';
        $request = $this->salesOrderPaymentTypesGETManyRequestPaymentTypesGetRequest($accept, $jiwa_stateful);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'salesOrderPaymentTypesGETManyRequestPaymentTypesGet'
     *
     * @param  string $accept Accept Header (required)
     * @param  bool $jiwa_stateful Stateful indicator (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function salesOrderPaymentTypesGETManyRequestPaymentTypesGetRequest($accept, $jiwa_stateful = null)
    {
        // verify the required parameter 'accept' is set
        if ($accept === null || (is_array($accept) && count($accept) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $accept when calling salesOrderPaymentTypesGETManyRequestPaymentTypesGet'
            );
        }

        $resourcePath = '/SalesOrders/PaymentTypes';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // header params
        if ($accept !== null) {
            $headerParams['Accept'] = ObjectSerializer::toHeaderValue($accept);
        }
        // header params
        if ($jiwa_stateful !== null) {
            $headerParams['jiwa-stateful'] = ObjectSerializer::toHeaderValue($jiwa_stateful);
        }


        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json', 'application/xml']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json', 'application/xml'],
                ['application/x-www-form-urlencoded', 'application/json', 'application/xml']
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            
            if($headers['Content-Type'] === 'application/json') {
                // \stdClass has no __toString(), so we should encode it manually
                if ($httpBody instanceof \stdClass) {
                    $httpBody = \GuzzleHttp\json_encode($httpBody);
                }
                // array has no __toString(), so we should encode it manually
                if(is_array($httpBody)) {
                    $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($httpBody));
                }
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\Query::build($formParams);
            }
        }

        // this endpoint requires HTTP basic authentication
        if ($this->config->getUsername() !== null || $this->config->getPassword() !== null) {
            $headers['Authorization'] = 'Basic ' . base64_encode($this->config->getUsername() . ":" . $this->config->getPassword());
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\Query::build($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation salesOrderPaymentTypesGETRequestPaymentTypesPaymentTypeIDGet
     *
     * Retrieves a payment type
     *
     * @param  string $accept Accept Header (required)
     * @param  string $payment_type_id payment_type_id (required)
     * @param  bool $jiwa_stateful Stateful indicator (optional)
     *
     * @throws \Jiwa\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Jiwa\Model\PaymentType
     */
    public function salesOrderPaymentTypesGETRequestPaymentTypesPaymentTypeIDGet($accept, $payment_type_id, $jiwa_stateful = null)
    {
        list($response) = $this->salesOrderPaymentTypesGETRequestPaymentTypesPaymentTypeIDGetWithHttpInfo($accept, $payment_type_id, $jiwa_stateful);
        return $response;
    }

    /**
     * Operation salesOrderPaymentTypesGETRequestPaymentTypesPaymentTypeIDGetWithHttpInfo
     *
     * Retrieves a payment type
     *
     * @param  string $accept Accept Header (required)
     * @param  string $payment_type_id (required)
     * @param  bool $jiwa_stateful Stateful indicator (optional)
     *
     * @throws \Jiwa\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Jiwa\Model\PaymentType, HTTP status code, HTTP response headers (array of strings)
     */
    public function salesOrderPaymentTypesGETRequestPaymentTypesPaymentTypeIDGetWithHttpInfo($accept, $payment_type_id, $jiwa_stateful = null)
    {
        $returnType = '\Jiwa\Model\PaymentType';
        $request = $this->salesOrderPaymentTypesGETRequestPaymentTypesPaymentTypeIDGetRequest($accept, $payment_type_id, $jiwa_stateful);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Jiwa\Model\PaymentType',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 404:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Jiwa\Model\PaymentType',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 401:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Jiwa\Model\PaymentType',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 403:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Jiwa\Model\PaymentType',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation salesOrderPaymentTypesGETRequestPaymentTypesPaymentTypeIDGetAsync
     *
     * Retrieves a payment type
     *
     * @param  string $accept Accept Header (required)
     * @param  string $payment_type_id (required)
     * @param  bool $jiwa_stateful Stateful indicator (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function salesOrderPaymentTypesGETRequestPaymentTypesPaymentTypeIDGetAsync($accept, $payment_type_id, $jiwa_stateful = null)
    {
        return $this->salesOrderPaymentTypesGETRequestPaymentTypesPaymentTypeIDGetAsyncWithHttpInfo($accept, $payment_type_id, $jiwa_stateful)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation salesOrderPaymentTypesGETRequestPaymentTypesPaymentTypeIDGetAsyncWithHttpInfo
     *
     * Retrieves a payment type
     *
     * @param  string $accept Accept Header (required)
     * @param  string $payment_type_id (required)
     * @param  bool $jiwa_stateful Stateful indicator (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function salesOrderPaymentTypesGETRequestPaymentTypesPaymentTypeIDGetAsyncWithHttpInfo($accept, $payment_type_id, $jiwa_stateful = null)
    {
        $returnType = '\Jiwa\Model\PaymentType';
        $request = $this->salesOrderPaymentTypesGETRequestPaymentTypesPaymentTypeIDGetRequest($accept, $payment_type_id, $jiwa_stateful);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'salesOrderPaymentTypesGETRequestPaymentTypesPaymentTypeIDGet'
     *
     * @param  string $accept Accept Header (required)
     * @param  string $payment_type_id (required)
     * @param  bool $jiwa_stateful Stateful indicator (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function salesOrderPaymentTypesGETRequestPaymentTypesPaymentTypeIDGetRequest($accept, $payment_type_id, $jiwa_stateful = null)
    {
        // verify the required parameter 'accept' is set
        if ($accept === null || (is_array($accept) && count($accept) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $accept when calling salesOrderPaymentTypesGETRequestPaymentTypesPaymentTypeIDGet'
            );
        }
        // verify the required parameter 'payment_type_id' is set
        if ($payment_type_id === null || (is_array($payment_type_id) && count($payment_type_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $payment_type_id when calling salesOrderPaymentTypesGETRequestPaymentTypesPaymentTypeIDGet'
            );
        }

        $resourcePath = '/SalesOrders/PaymentTypes/{PaymentTypeID}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // header params
        if ($accept !== null) {
            $headerParams['Accept'] = ObjectSerializer::toHeaderValue($accept);
        }
        // header params
        if ($jiwa_stateful !== null) {
            $headerParams['jiwa-stateful'] = ObjectSerializer::toHeaderValue($jiwa_stateful);
        }

        // path params
        if ($payment_type_id !== null) {
            $resourcePath = str_replace(
                '{' . 'PaymentTypeID' . '}',
                ObjectSerializer::toPathValue($payment_type_id),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json', 'application/xml']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json', 'application/xml'],
                ['application/x-www-form-urlencoded', 'application/json', 'application/xml']
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            
            if($headers['Content-Type'] === 'application/json') {
                // \stdClass has no __toString(), so we should encode it manually
                if ($httpBody instanceof \stdClass) {
                    $httpBody = \GuzzleHttp\json_encode($httpBody);
                }
                // array has no __toString(), so we should encode it manually
                if(is_array($httpBody)) {
                    $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($httpBody));
                }
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\Query::build($formParams);
            }
        }

        // this endpoint requires HTTP basic authentication
        if ($this->config->getUsername() !== null || $this->config->getPassword() !== null) {
            $headers['Authorization'] = 'Basic ' . base64_encode($this->config->getUsername() . ":" . $this->config->getPassword());
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\Query::build($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation salesOrderPaymentTypesPATCHRequestPaymentTypesPaymentTypeIDUpdate
     *
     * Updates a payment type
     *
     * @param  string $accept Accept Header (required)
     * @param  string $payment_type_id payment_type_id (required)
     * @param  bool $jiwa_stateful Stateful indicator (optional)
     * @param  string $name name (optional)
     * @param  string $code code (optional)
     * @param  int $item_no item_no (optional)
     * @param  bool $is_enabled is_enabled (optional)
     * @param  bool $is_default is_default (optional)
     * @param  bool $is_credit_card is_credit_card (optional)
     * @param  bool $is_pos is_pos (optional)
     * @param  string $general_ledger_account general_ledger_account (optional)
     * @param  \Jiwa\Model\SalesOrderPaymentTypesPATCHRequest $body body (optional)
     *
     * @throws \Jiwa\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Jiwa\Model\PaymentType
     */
    public function salesOrderPaymentTypesPATCHRequestPaymentTypesPaymentTypeIDUpdate($accept, $payment_type_id, $jiwa_stateful = null, $name = null, $code = null, $item_no = null, $is_enabled = null, $is_default = null, $is_credit_card = null, $is_pos = null, $general_ledger_account = null, $body = null)
    {
        list($response) = $this->salesOrderPaymentTypesPATCHRequestPaymentTypesPaymentTypeIDUpdateWithHttpInfo($accept, $payment_type_id, $jiwa_stateful, $name, $code, $item_no, $is_enabled, $is_default, $is_credit_card, $is_pos, $general_ledger_account, $body);
        return $response;
    }

    /**
     * Operation salesOrderPaymentTypesPATCHRequestPaymentTypesPaymentTypeIDUpdateWithHttpInfo
     *
     * Updates a payment type
     *
     * @param  string $accept Accept Header (required)
     * @param  string $payment_type_id (required)
     * @param  bool $jiwa_stateful Stateful indicator (optional)
     * @param  string $name (optional)
     * @param  string $code (optional)
     * @param  int $item_no (optional)
     * @param  bool $is_enabled (optional)
     * @param  bool $is_default (optional)
     * @param  bool $is_credit_card (optional)
     * @param  bool $is_pos (optional)
     * @param  string $general_ledger_account (optional)
     * @param  \Jiwa\Model\SalesOrderPaymentTypesPATCHRequest $body (optional)
     *
     * @throws \Jiwa\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Jiwa\Model\PaymentType, HTTP status code, HTTP response headers (array of strings)
     */
    public function salesOrderPaymentTypesPATCHRequestPaymentTypesPaymentTypeIDUpdateWithHttpInfo($accept, $payment_type_id, $jiwa_stateful = null, $name = null, $code = null, $item_no = null, $is_enabled = null, $is_default = null, $is_credit_card = null, $is_pos = null, $general_ledger_account = null, $body = null)
    {
        $returnType = '\Jiwa\Model\PaymentType';
        $request = $this->salesOrderPaymentTypesPATCHRequestPaymentTypesPaymentTypeIDUpdateRequest($accept, $payment_type_id, $jiwa_stateful, $name, $code, $item_no, $is_enabled, $is_default, $is_credit_card, $is_pos, $general_ledger_account, $body);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Jiwa\Model\PaymentType',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 401:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Jiwa\Model\PaymentType',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 403:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Jiwa\Model\PaymentType',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 404:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Jiwa\Model\PaymentType',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation salesOrderPaymentTypesPATCHRequestPaymentTypesPaymentTypeIDUpdateAsync
     *
     * Updates a payment type
     *
     * @param  string $accept Accept Header (required)
     * @param  string $payment_type_id (required)
     * @param  bool $jiwa_stateful Stateful indicator (optional)
     * @param  string $name (optional)
     * @param  string $code (optional)
     * @param  int $item_no (optional)
     * @param  bool $is_enabled (optional)
     * @param  bool $is_default (optional)
     * @param  bool $is_credit_card (optional)
     * @param  bool $is_pos (optional)
     * @param  string $general_ledger_account (optional)
     * @param  \Jiwa\Model\SalesOrderPaymentTypesPATCHRequest $body (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function salesOrderPaymentTypesPATCHRequestPaymentTypesPaymentTypeIDUpdateAsync($accept, $payment_type_id, $jiwa_stateful = null, $name = null, $code = null, $item_no = null, $is_enabled = null, $is_default = null, $is_credit_card = null, $is_pos = null, $general_ledger_account = null, $body = null)
    {
        return $this->salesOrderPaymentTypesPATCHRequestPaymentTypesPaymentTypeIDUpdateAsyncWithHttpInfo($accept, $payment_type_id, $jiwa_stateful, $name, $code, $item_no, $is_enabled, $is_default, $is_credit_card, $is_pos, $general_ledger_account, $body)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation salesOrderPaymentTypesPATCHRequestPaymentTypesPaymentTypeIDUpdateAsyncWithHttpInfo
     *
     * Updates a payment type
     *
     * @param  string $accept Accept Header (required)
     * @param  string $payment_type_id (required)
     * @param  bool $jiwa_stateful Stateful indicator (optional)
     * @param  string $name (optional)
     * @param  string $code (optional)
     * @param  int $item_no (optional)
     * @param  bool $is_enabled (optional)
     * @param  bool $is_default (optional)
     * @param  bool $is_credit_card (optional)
     * @param  bool $is_pos (optional)
     * @param  string $general_ledger_account (optional)
     * @param  \Jiwa\Model\SalesOrderPaymentTypesPATCHRequest $body (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function salesOrderPaymentTypesPATCHRequestPaymentTypesPaymentTypeIDUpdateAsyncWithHttpInfo($accept, $payment_type_id, $jiwa_stateful = null, $name = null, $code = null, $item_no = null, $is_enabled = null, $is_default = null, $is_credit_card = null, $is_pos = null, $general_ledger_account = null, $body = null)
    {
        $returnType = '\Jiwa\Model\PaymentType';
        $request = $this->salesOrderPaymentTypesPATCHRequestPaymentTypesPaymentTypeIDUpdateRequest($accept, $payment_type_id, $jiwa_stateful, $name, $code, $item_no, $is_enabled, $is_default, $is_credit_card, $is_pos, $general_ledger_account, $body);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'salesOrderPaymentTypesPATCHRequestPaymentTypesPaymentTypeIDUpdate'
     *
     * @param  string $accept Accept Header (required)
     * @param  string $payment_type_id (required)
     * @param  bool $jiwa_stateful Stateful indicator (optional)
     * @param  string $name (optional)
     * @param  string $code (optional)
     * @param  int $item_no (optional)
     * @param  bool $is_enabled (optional)
     * @param  bool $is_default (optional)
     * @param  bool $is_credit_card (optional)
     * @param  bool $is_pos (optional)
     * @param  string $general_ledger_account (optional)
     * @param  \Jiwa\Model\SalesOrderPaymentTypesPATCHRequest $body (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function salesOrderPaymentTypesPATCHRequestPaymentTypesPaymentTypeIDUpdateRequest($accept, $payment_type_id, $jiwa_stateful = null, $name = null, $code = null, $item_no = null, $is_enabled = null, $is_default = null, $is_credit_card = null, $is_pos = null, $general_ledger_account = null, $body = null)
    {
        // verify the required parameter 'accept' is set
        if ($accept === null || (is_array($accept) && count($accept) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $accept when calling salesOrderPaymentTypesPATCHRequestPaymentTypesPaymentTypeIDUpdate'
            );
        }
        // verify the required parameter 'payment_type_id' is set
        if ($payment_type_id === null || (is_array($payment_type_id) && count($payment_type_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $payment_type_id when calling salesOrderPaymentTypesPATCHRequestPaymentTypesPaymentTypeIDUpdate'
            );
        }

        $resourcePath = '/SalesOrders/PaymentTypes/{PaymentTypeID}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        if ($name !== null) {
            $queryParams['Name'] = ObjectSerializer::toQueryValue($name);
        }
        // query params
        if ($code !== null) {
            $queryParams['Code'] = ObjectSerializer::toQueryValue($code);
        }
        // query params
        if ($item_no !== null) {
            $queryParams['ItemNo'] = ObjectSerializer::toQueryValue($item_no);
        }
        // query params
        if ($is_enabled !== null) {
            $queryParams['IsEnabled'] = ObjectSerializer::toQueryValue($is_enabled);
        }
        // query params
        if ($is_default !== null) {
            $queryParams['IsDefault'] = ObjectSerializer::toQueryValue($is_default);
        }
        // query params
        if ($is_credit_card !== null) {
            $queryParams['IsCreditCard'] = ObjectSerializer::toQueryValue($is_credit_card);
        }
        // query params
        if ($is_pos !== null) {
            $queryParams['IsPOS'] = ObjectSerializer::toQueryValue($is_pos);
        }
        // query params
        if ($general_ledger_account !== null) {
            $queryParams['GeneralLedgerAccount'] = ObjectSerializer::toQueryValue($general_ledger_account);
        }
        // header params
        if ($accept !== null) {
            $headerParams['Accept'] = ObjectSerializer::toHeaderValue($accept);
        }
        // header params
        if ($jiwa_stateful !== null) {
            $headerParams['jiwa-stateful'] = ObjectSerializer::toHeaderValue($jiwa_stateful);
        }

        // path params
        if ($payment_type_id !== null) {
            $resourcePath = str_replace(
                '{' . 'PaymentTypeID' . '}',
                ObjectSerializer::toPathValue($payment_type_id),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;
        if (isset($body)) {
            $_tempBody = $body;
        }

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json', 'application/xml']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json', 'application/xml'],
                ['application/x-www-form-urlencoded', 'application/json', 'application/xml']
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            
            if($headers['Content-Type'] === 'application/json') {
                // \stdClass has no __toString(), so we should encode it manually
                if ($httpBody instanceof \stdClass) {
                    $httpBody = \GuzzleHttp\json_encode($httpBody);
                }
                // array has no __toString(), so we should encode it manually
                if(is_array($httpBody)) {
                    $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($httpBody));
                }
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\Query::build($formParams);
            }
        }

        // this endpoint requires HTTP basic authentication
        if ($this->config->getUsername() !== null || $this->config->getPassword() !== null) {
            $headers['Authorization'] = 'Basic ' . base64_encode($this->config->getUsername() . ":" . $this->config->getPassword());
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\Query::build($queryParams);
        return new Request(
            'PATCH',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation salesOrderPaymentTypesPOSTRequestPaymentTypesPost
     *
     * Adds a payment type
     *
     * @param  string $accept Accept Header (required)
     * @param  bool $jiwa_stateful Stateful indicator (optional)
     * @param  string $name name (optional)
     * @param  string $code code (optional)
     * @param  int $item_no item_no (optional)
     * @param  bool $is_enabled is_enabled (optional)
     * @param  bool $is_default is_default (optional)
     * @param  bool $is_credit_card is_credit_card (optional)
     * @param  bool $is_pos is_pos (optional)
     * @param  string $general_ledger_account general_ledger_account (optional)
     * @param  \Jiwa\Model\SalesOrderPaymentTypesPOSTRequest $body body (optional)
     *
     * @throws \Jiwa\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Jiwa\Model\PaymentType
     */
    public function salesOrderPaymentTypesPOSTRequestPaymentTypesPost($accept, $jiwa_stateful = null, $name = null, $code = null, $item_no = null, $is_enabled = null, $is_default = null, $is_credit_card = null, $is_pos = null, $general_ledger_account = null, $body = null)
    {
        list($response) = $this->salesOrderPaymentTypesPOSTRequestPaymentTypesPostWithHttpInfo($accept, $jiwa_stateful, $name, $code, $item_no, $is_enabled, $is_default, $is_credit_card, $is_pos, $general_ledger_account, $body);
        return $response;
    }

    /**
     * Operation salesOrderPaymentTypesPOSTRequestPaymentTypesPostWithHttpInfo
     *
     * Adds a payment type
     *
     * @param  string $accept Accept Header (required)
     * @param  bool $jiwa_stateful Stateful indicator (optional)
     * @param  string $name (optional)
     * @param  string $code (optional)
     * @param  int $item_no (optional)
     * @param  bool $is_enabled (optional)
     * @param  bool $is_default (optional)
     * @param  bool $is_credit_card (optional)
     * @param  bool $is_pos (optional)
     * @param  string $general_ledger_account (optional)
     * @param  \Jiwa\Model\SalesOrderPaymentTypesPOSTRequest $body (optional)
     *
     * @throws \Jiwa\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Jiwa\Model\PaymentType, HTTP status code, HTTP response headers (array of strings)
     */
    public function salesOrderPaymentTypesPOSTRequestPaymentTypesPostWithHttpInfo($accept, $jiwa_stateful = null, $name = null, $code = null, $item_no = null, $is_enabled = null, $is_default = null, $is_credit_card = null, $is_pos = null, $general_ledger_account = null, $body = null)
    {
        $returnType = '\Jiwa\Model\PaymentType';
        $request = $this->salesOrderPaymentTypesPOSTRequestPaymentTypesPostRequest($accept, $jiwa_stateful, $name, $code, $item_no, $is_enabled, $is_default, $is_credit_card, $is_pos, $general_ledger_account, $body);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Jiwa\Model\PaymentType',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 403:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Jiwa\Model\PaymentType',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 201:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Jiwa\Model\PaymentType',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 401:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Jiwa\Model\PaymentType',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation salesOrderPaymentTypesPOSTRequestPaymentTypesPostAsync
     *
     * Adds a payment type
     *
     * @param  string $accept Accept Header (required)
     * @param  bool $jiwa_stateful Stateful indicator (optional)
     * @param  string $name (optional)
     * @param  string $code (optional)
     * @param  int $item_no (optional)
     * @param  bool $is_enabled (optional)
     * @param  bool $is_default (optional)
     * @param  bool $is_credit_card (optional)
     * @param  bool $is_pos (optional)
     * @param  string $general_ledger_account (optional)
     * @param  \Jiwa\Model\SalesOrderPaymentTypesPOSTRequest $body (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function salesOrderPaymentTypesPOSTRequestPaymentTypesPostAsync($accept, $jiwa_stateful = null, $name = null, $code = null, $item_no = null, $is_enabled = null, $is_default = null, $is_credit_card = null, $is_pos = null, $general_ledger_account = null, $body = null)
    {
        return $this->salesOrderPaymentTypesPOSTRequestPaymentTypesPostAsyncWithHttpInfo($accept, $jiwa_stateful, $name, $code, $item_no, $is_enabled, $is_default, $is_credit_card, $is_pos, $general_ledger_account, $body)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation salesOrderPaymentTypesPOSTRequestPaymentTypesPostAsyncWithHttpInfo
     *
     * Adds a payment type
     *
     * @param  string $accept Accept Header (required)
     * @param  bool $jiwa_stateful Stateful indicator (optional)
     * @param  string $name (optional)
     * @param  string $code (optional)
     * @param  int $item_no (optional)
     * @param  bool $is_enabled (optional)
     * @param  bool $is_default (optional)
     * @param  bool $is_credit_card (optional)
     * @param  bool $is_pos (optional)
     * @param  string $general_ledger_account (optional)
     * @param  \Jiwa\Model\SalesOrderPaymentTypesPOSTRequest $body (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function salesOrderPaymentTypesPOSTRequestPaymentTypesPostAsyncWithHttpInfo($accept, $jiwa_stateful = null, $name = null, $code = null, $item_no = null, $is_enabled = null, $is_default = null, $is_credit_card = null, $is_pos = null, $general_ledger_account = null, $body = null)
    {
        $returnType = '\Jiwa\Model\PaymentType';
        $request = $this->salesOrderPaymentTypesPOSTRequestPaymentTypesPostRequest($accept, $jiwa_stateful, $name, $code, $item_no, $is_enabled, $is_default, $is_credit_card, $is_pos, $general_ledger_account, $body);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'salesOrderPaymentTypesPOSTRequestPaymentTypesPost'
     *
     * @param  string $accept Accept Header (required)
     * @param  bool $jiwa_stateful Stateful indicator (optional)
     * @param  string $name (optional)
     * @param  string $code (optional)
     * @param  int $item_no (optional)
     * @param  bool $is_enabled (optional)
     * @param  bool $is_default (optional)
     * @param  bool $is_credit_card (optional)
     * @param  bool $is_pos (optional)
     * @param  string $general_ledger_account (optional)
     * @param  \Jiwa\Model\SalesOrderPaymentTypesPOSTRequest $body (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function salesOrderPaymentTypesPOSTRequestPaymentTypesPostRequest($accept, $jiwa_stateful = null, $name = null, $code = null, $item_no = null, $is_enabled = null, $is_default = null, $is_credit_card = null, $is_pos = null, $general_ledger_account = null, $body = null)
    {
        // verify the required parameter 'accept' is set
        if ($accept === null || (is_array($accept) && count($accept) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $accept when calling salesOrderPaymentTypesPOSTRequestPaymentTypesPost'
            );
        }

        $resourcePath = '/SalesOrders/PaymentTypes';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        if ($name !== null) {
            $queryParams['Name'] = ObjectSerializer::toQueryValue($name);
        }
        // query params
        if ($code !== null) {
            $queryParams['Code'] = ObjectSerializer::toQueryValue($code);
        }
        // query params
        if ($item_no !== null) {
            $queryParams['ItemNo'] = ObjectSerializer::toQueryValue($item_no);
        }
        // query params
        if ($is_enabled !== null) {
            $queryParams['IsEnabled'] = ObjectSerializer::toQueryValue($is_enabled);
        }
        // query params
        if ($is_default !== null) {
            $queryParams['IsDefault'] = ObjectSerializer::toQueryValue($is_default);
        }
        // query params
        if ($is_credit_card !== null) {
            $queryParams['IsCreditCard'] = ObjectSerializer::toQueryValue($is_credit_card);
        }
        // query params
        if ($is_pos !== null) {
            $queryParams['IsPOS'] = ObjectSerializer::toQueryValue($is_pos);
        }
        // query params
        if ($general_ledger_account !== null) {
            $queryParams['GeneralLedgerAccount'] = ObjectSerializer::toQueryValue($general_ledger_account);
        }
        // header params
        if ($accept !== null) {
            $headerParams['Accept'] = ObjectSerializer::toHeaderValue($accept);
        }
        // header params
        if ($jiwa_stateful !== null) {
            $headerParams['jiwa-stateful'] = ObjectSerializer::toHeaderValue($jiwa_stateful);
        }


        // body params
        $_tempBody = null;
        if (isset($body)) {
            $_tempBody = $body;
        }

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json', 'application/xml']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json', 'application/xml'],
                ['application/x-www-form-urlencoded', 'application/json', 'application/xml']
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            
            if($headers['Content-Type'] === 'application/json') {
                // \stdClass has no __toString(), so we should encode it manually
                if ($httpBody instanceof \stdClass) {
                    $httpBody = \GuzzleHttp\json_encode($httpBody);
                }
                // array has no __toString(), so we should encode it manually
                if(is_array($httpBody)) {
                    $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($httpBody));
                }
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\Query::build($formParams);
            }
        }

        // this endpoint requires HTTP basic authentication
        if ($this->config->getUsername() !== null || $this->config->getPassword() !== null) {
            $headers['Authorization'] = 'Basic ' . base64_encode($this->config->getUsername() . ":" . $this->config->getPassword());
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\Query::build($queryParams);
        return new Request(
            'POST',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation salesOrderPaymentsDELETERequestInvoiceIDPaymentsPaymentIDDelete
     *
     * Deletes a payment for a sales order
     *
     * @param  string $accept Accept Header (required)
     * @param  string $invoice_id invoice_id (required)
     * @param  string $payment_id payment_id (required)
     * @param  bool $jiwa_stateful Stateful indicator (optional)
     *
     * @throws \Jiwa\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Jiwa\Model\Object
     */
    public function salesOrderPaymentsDELETERequestInvoiceIDPaymentsPaymentIDDelete($accept, $invoice_id, $payment_id, $jiwa_stateful = null)
    {
        list($response) = $this->salesOrderPaymentsDELETERequestInvoiceIDPaymentsPaymentIDDeleteWithHttpInfo($accept, $invoice_id, $payment_id, $jiwa_stateful);
        return $response;
    }

    /**
     * Operation salesOrderPaymentsDELETERequestInvoiceIDPaymentsPaymentIDDeleteWithHttpInfo
     *
     * Deletes a payment for a sales order
     *
     * @param  string $accept Accept Header (required)
     * @param  string $invoice_id (required)
     * @param  string $payment_id (required)
     * @param  bool $jiwa_stateful Stateful indicator (optional)
     *
     * @throws \Jiwa\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Jiwa\Model\Object, HTTP status code, HTTP response headers (array of strings)
     */
    public function salesOrderPaymentsDELETERequestInvoiceIDPaymentsPaymentIDDeleteWithHttpInfo($accept, $invoice_id, $payment_id, $jiwa_stateful = null)
    {
        $returnType = '\Jiwa\Model\Object';
        $request = $this->salesOrderPaymentsDELETERequestInvoiceIDPaymentsPaymentIDDeleteRequest($accept, $invoice_id, $payment_id, $jiwa_stateful);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Jiwa\Model\Object',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 204:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Jiwa\Model\Object',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 403:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Jiwa\Model\Object',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 404:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Jiwa\Model\Object',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 401:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Jiwa\Model\Object',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation salesOrderPaymentsDELETERequestInvoiceIDPaymentsPaymentIDDeleteAsync
     *
     * Deletes a payment for a sales order
     *
     * @param  string $accept Accept Header (required)
     * @param  string $invoice_id (required)
     * @param  string $payment_id (required)
     * @param  bool $jiwa_stateful Stateful indicator (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function salesOrderPaymentsDELETERequestInvoiceIDPaymentsPaymentIDDeleteAsync($accept, $invoice_id, $payment_id, $jiwa_stateful = null)
    {
        return $this->salesOrderPaymentsDELETERequestInvoiceIDPaymentsPaymentIDDeleteAsyncWithHttpInfo($accept, $invoice_id, $payment_id, $jiwa_stateful)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation salesOrderPaymentsDELETERequestInvoiceIDPaymentsPaymentIDDeleteAsyncWithHttpInfo
     *
     * Deletes a payment for a sales order
     *
     * @param  string $accept Accept Header (required)
     * @param  string $invoice_id (required)
     * @param  string $payment_id (required)
     * @param  bool $jiwa_stateful Stateful indicator (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function salesOrderPaymentsDELETERequestInvoiceIDPaymentsPaymentIDDeleteAsyncWithHttpInfo($accept, $invoice_id, $payment_id, $jiwa_stateful = null)
    {
        $returnType = '\Jiwa\Model\Object';
        $request = $this->salesOrderPaymentsDELETERequestInvoiceIDPaymentsPaymentIDDeleteRequest($accept, $invoice_id, $payment_id, $jiwa_stateful);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'salesOrderPaymentsDELETERequestInvoiceIDPaymentsPaymentIDDelete'
     *
     * @param  string $accept Accept Header (required)
     * @param  string $invoice_id (required)
     * @param  string $payment_id (required)
     * @param  bool $jiwa_stateful Stateful indicator (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function salesOrderPaymentsDELETERequestInvoiceIDPaymentsPaymentIDDeleteRequest($accept, $invoice_id, $payment_id, $jiwa_stateful = null)
    {
        // verify the required parameter 'accept' is set
        if ($accept === null || (is_array($accept) && count($accept) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $accept when calling salesOrderPaymentsDELETERequestInvoiceIDPaymentsPaymentIDDelete'
            );
        }
        // verify the required parameter 'invoice_id' is set
        if ($invoice_id === null || (is_array($invoice_id) && count($invoice_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $invoice_id when calling salesOrderPaymentsDELETERequestInvoiceIDPaymentsPaymentIDDelete'
            );
        }
        // verify the required parameter 'payment_id' is set
        if ($payment_id === null || (is_array($payment_id) && count($payment_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $payment_id when calling salesOrderPaymentsDELETERequestInvoiceIDPaymentsPaymentIDDelete'
            );
        }

        $resourcePath = '/SalesOrders/{InvoiceID}/Payments/{PaymentID}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // header params
        if ($accept !== null) {
            $headerParams['Accept'] = ObjectSerializer::toHeaderValue($accept);
        }
        // header params
        if ($jiwa_stateful !== null) {
            $headerParams['jiwa-stateful'] = ObjectSerializer::toHeaderValue($jiwa_stateful);
        }

        // path params
        if ($invoice_id !== null) {
            $resourcePath = str_replace(
                '{' . 'InvoiceID' . '}',
                ObjectSerializer::toPathValue($invoice_id),
                $resourcePath
            );
        }
        // path params
        if ($payment_id !== null) {
            $resourcePath = str_replace(
                '{' . 'PaymentID' . '}',
                ObjectSerializer::toPathValue($payment_id),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json', 'application/xml']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json', 'application/xml'],
                ['application/x-www-form-urlencoded', 'application/json', 'application/xml']
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            
            if($headers['Content-Type'] === 'application/json') {
                // \stdClass has no __toString(), so we should encode it manually
                if ($httpBody instanceof \stdClass) {
                    $httpBody = \GuzzleHttp\json_encode($httpBody);
                }
                // array has no __toString(), so we should encode it manually
                if(is_array($httpBody)) {
                    $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($httpBody));
                }
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\Query::build($formParams);
            }
        }

        // this endpoint requires HTTP basic authentication
        if ($this->config->getUsername() !== null || $this->config->getPassword() !== null) {
            $headers['Authorization'] = 'Basic ' . base64_encode($this->config->getUsername() . ":" . $this->config->getPassword());
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\Query::build($queryParams);
        return new Request(
            'DELETE',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation salesOrderPaymentsGETManyRequestInvoiceIDPaymentsGet
     *
     * Retrieves a list of payments for a sales order
     *
     * @param  string $accept Accept Header (required)
     * @param  string $invoice_id invoice_id (required)
     * @param  bool $jiwa_stateful Stateful indicator (optional)
     *
     * @throws \Jiwa\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Jiwa\Model\SalesOrderPayment[]
     */
    public function salesOrderPaymentsGETManyRequestInvoiceIDPaymentsGet($accept, $invoice_id, $jiwa_stateful = null)
    {
        list($response) = $this->salesOrderPaymentsGETManyRequestInvoiceIDPaymentsGetWithHttpInfo($accept, $invoice_id, $jiwa_stateful);
        return $response;
    }

    /**
     * Operation salesOrderPaymentsGETManyRequestInvoiceIDPaymentsGetWithHttpInfo
     *
     * Retrieves a list of payments for a sales order
     *
     * @param  string $accept Accept Header (required)
     * @param  string $invoice_id (required)
     * @param  bool $jiwa_stateful Stateful indicator (optional)
     *
     * @throws \Jiwa\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Jiwa\Model\SalesOrderPayment[], HTTP status code, HTTP response headers (array of strings)
     */
    public function salesOrderPaymentsGETManyRequestInvoiceIDPaymentsGetWithHttpInfo($accept, $invoice_id, $jiwa_stateful = null)
    {
        $returnType = '\Jiwa\Model\SalesOrderPayment[]';
        $request = $this->salesOrderPaymentsGETManyRequestInvoiceIDPaymentsGetRequest($accept, $invoice_id, $jiwa_stateful);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Jiwa\Model\SalesOrderPayment[]',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 401:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Jiwa\Model\SalesOrderPayment[]',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 403:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Jiwa\Model\SalesOrderPayment[]',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation salesOrderPaymentsGETManyRequestInvoiceIDPaymentsGetAsync
     *
     * Retrieves a list of payments for a sales order
     *
     * @param  string $accept Accept Header (required)
     * @param  string $invoice_id (required)
     * @param  bool $jiwa_stateful Stateful indicator (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function salesOrderPaymentsGETManyRequestInvoiceIDPaymentsGetAsync($accept, $invoice_id, $jiwa_stateful = null)
    {
        return $this->salesOrderPaymentsGETManyRequestInvoiceIDPaymentsGetAsyncWithHttpInfo($accept, $invoice_id, $jiwa_stateful)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation salesOrderPaymentsGETManyRequestInvoiceIDPaymentsGetAsyncWithHttpInfo
     *
     * Retrieves a list of payments for a sales order
     *
     * @param  string $accept Accept Header (required)
     * @param  string $invoice_id (required)
     * @param  bool $jiwa_stateful Stateful indicator (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function salesOrderPaymentsGETManyRequestInvoiceIDPaymentsGetAsyncWithHttpInfo($accept, $invoice_id, $jiwa_stateful = null)
    {
        $returnType = '\Jiwa\Model\SalesOrderPayment[]';
        $request = $this->salesOrderPaymentsGETManyRequestInvoiceIDPaymentsGetRequest($accept, $invoice_id, $jiwa_stateful);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'salesOrderPaymentsGETManyRequestInvoiceIDPaymentsGet'
     *
     * @param  string $accept Accept Header (required)
     * @param  string $invoice_id (required)
     * @param  bool $jiwa_stateful Stateful indicator (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function salesOrderPaymentsGETManyRequestInvoiceIDPaymentsGetRequest($accept, $invoice_id, $jiwa_stateful = null)
    {
        // verify the required parameter 'accept' is set
        if ($accept === null || (is_array($accept) && count($accept) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $accept when calling salesOrderPaymentsGETManyRequestInvoiceIDPaymentsGet'
            );
        }
        // verify the required parameter 'invoice_id' is set
        if ($invoice_id === null || (is_array($invoice_id) && count($invoice_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $invoice_id when calling salesOrderPaymentsGETManyRequestInvoiceIDPaymentsGet'
            );
        }

        $resourcePath = '/SalesOrders/{InvoiceID}/Payments';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // header params
        if ($accept !== null) {
            $headerParams['Accept'] = ObjectSerializer::toHeaderValue($accept);
        }
        // header params
        if ($jiwa_stateful !== null) {
            $headerParams['jiwa-stateful'] = ObjectSerializer::toHeaderValue($jiwa_stateful);
        }

        // path params
        if ($invoice_id !== null) {
            $resourcePath = str_replace(
                '{' . 'InvoiceID' . '}',
                ObjectSerializer::toPathValue($invoice_id),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json', 'application/xml']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json', 'application/xml'],
                ['application/x-www-form-urlencoded', 'application/json', 'application/xml']
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            
            if($headers['Content-Type'] === 'application/json') {
                // \stdClass has no __toString(), so we should encode it manually
                if ($httpBody instanceof \stdClass) {
                    $httpBody = \GuzzleHttp\json_encode($httpBody);
                }
                // array has no __toString(), so we should encode it manually
                if(is_array($httpBody)) {
                    $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($httpBody));
                }
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\Query::build($formParams);
            }
        }

        // this endpoint requires HTTP basic authentication
        if ($this->config->getUsername() !== null || $this->config->getPassword() !== null) {
            $headers['Authorization'] = 'Basic ' . base64_encode($this->config->getUsername() . ":" . $this->config->getPassword());
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\Query::build($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation salesOrderPaymentsGETRequestInvoiceIDPaymentsPaymentIDGet
     *
     * Retrieves a payment for a sales order
     *
     * @param  string $accept Accept Header (required)
     * @param  string $invoice_id invoice_id (required)
     * @param  string $payment_id payment_id (required)
     * @param  bool $jiwa_stateful Stateful indicator (optional)
     *
     * @throws \Jiwa\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Jiwa\Model\SalesOrderPayment
     */
    public function salesOrderPaymentsGETRequestInvoiceIDPaymentsPaymentIDGet($accept, $invoice_id, $payment_id, $jiwa_stateful = null)
    {
        list($response) = $this->salesOrderPaymentsGETRequestInvoiceIDPaymentsPaymentIDGetWithHttpInfo($accept, $invoice_id, $payment_id, $jiwa_stateful);
        return $response;
    }

    /**
     * Operation salesOrderPaymentsGETRequestInvoiceIDPaymentsPaymentIDGetWithHttpInfo
     *
     * Retrieves a payment for a sales order
     *
     * @param  string $accept Accept Header (required)
     * @param  string $invoice_id (required)
     * @param  string $payment_id (required)
     * @param  bool $jiwa_stateful Stateful indicator (optional)
     *
     * @throws \Jiwa\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Jiwa\Model\SalesOrderPayment, HTTP status code, HTTP response headers (array of strings)
     */
    public function salesOrderPaymentsGETRequestInvoiceIDPaymentsPaymentIDGetWithHttpInfo($accept, $invoice_id, $payment_id, $jiwa_stateful = null)
    {
        $returnType = '\Jiwa\Model\SalesOrderPayment';
        $request = $this->salesOrderPaymentsGETRequestInvoiceIDPaymentsPaymentIDGetRequest($accept, $invoice_id, $payment_id, $jiwa_stateful);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Jiwa\Model\SalesOrderPayment',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 403:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Jiwa\Model\SalesOrderPayment',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 401:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Jiwa\Model\SalesOrderPayment',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 404:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Jiwa\Model\SalesOrderPayment',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation salesOrderPaymentsGETRequestInvoiceIDPaymentsPaymentIDGetAsync
     *
     * Retrieves a payment for a sales order
     *
     * @param  string $accept Accept Header (required)
     * @param  string $invoice_id (required)
     * @param  string $payment_id (required)
     * @param  bool $jiwa_stateful Stateful indicator (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function salesOrderPaymentsGETRequestInvoiceIDPaymentsPaymentIDGetAsync($accept, $invoice_id, $payment_id, $jiwa_stateful = null)
    {
        return $this->salesOrderPaymentsGETRequestInvoiceIDPaymentsPaymentIDGetAsyncWithHttpInfo($accept, $invoice_id, $payment_id, $jiwa_stateful)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation salesOrderPaymentsGETRequestInvoiceIDPaymentsPaymentIDGetAsyncWithHttpInfo
     *
     * Retrieves a payment for a sales order
     *
     * @param  string $accept Accept Header (required)
     * @param  string $invoice_id (required)
     * @param  string $payment_id (required)
     * @param  bool $jiwa_stateful Stateful indicator (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function salesOrderPaymentsGETRequestInvoiceIDPaymentsPaymentIDGetAsyncWithHttpInfo($accept, $invoice_id, $payment_id, $jiwa_stateful = null)
    {
        $returnType = '\Jiwa\Model\SalesOrderPayment';
        $request = $this->salesOrderPaymentsGETRequestInvoiceIDPaymentsPaymentIDGetRequest($accept, $invoice_id, $payment_id, $jiwa_stateful);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'salesOrderPaymentsGETRequestInvoiceIDPaymentsPaymentIDGet'
     *
     * @param  string $accept Accept Header (required)
     * @param  string $invoice_id (required)
     * @param  string $payment_id (required)
     * @param  bool $jiwa_stateful Stateful indicator (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function salesOrderPaymentsGETRequestInvoiceIDPaymentsPaymentIDGetRequest($accept, $invoice_id, $payment_id, $jiwa_stateful = null)
    {
        // verify the required parameter 'accept' is set
        if ($accept === null || (is_array($accept) && count($accept) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $accept when calling salesOrderPaymentsGETRequestInvoiceIDPaymentsPaymentIDGet'
            );
        }
        // verify the required parameter 'invoice_id' is set
        if ($invoice_id === null || (is_array($invoice_id) && count($invoice_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $invoice_id when calling salesOrderPaymentsGETRequestInvoiceIDPaymentsPaymentIDGet'
            );
        }
        // verify the required parameter 'payment_id' is set
        if ($payment_id === null || (is_array($payment_id) && count($payment_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $payment_id when calling salesOrderPaymentsGETRequestInvoiceIDPaymentsPaymentIDGet'
            );
        }

        $resourcePath = '/SalesOrders/{InvoiceID}/Payments/{PaymentID}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // header params
        if ($accept !== null) {
            $headerParams['Accept'] = ObjectSerializer::toHeaderValue($accept);
        }
        // header params
        if ($jiwa_stateful !== null) {
            $headerParams['jiwa-stateful'] = ObjectSerializer::toHeaderValue($jiwa_stateful);
        }

        // path params
        if ($invoice_id !== null) {
            $resourcePath = str_replace(
                '{' . 'InvoiceID' . '}',
                ObjectSerializer::toPathValue($invoice_id),
                $resourcePath
            );
        }
        // path params
        if ($payment_id !== null) {
            $resourcePath = str_replace(
                '{' . 'PaymentID' . '}',
                ObjectSerializer::toPathValue($payment_id),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json', 'application/xml']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json', 'application/xml'],
                ['application/x-www-form-urlencoded', 'application/json', 'application/xml']
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            
            if($headers['Content-Type'] === 'application/json') {
                // \stdClass has no __toString(), so we should encode it manually
                if ($httpBody instanceof \stdClass) {
                    $httpBody = \GuzzleHttp\json_encode($httpBody);
                }
                // array has no __toString(), so we should encode it manually
                if(is_array($httpBody)) {
                    $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($httpBody));
                }
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\Query::build($formParams);
            }
        }

        // this endpoint requires HTTP basic authentication
        if ($this->config->getUsername() !== null || $this->config->getPassword() !== null) {
            $headers['Authorization'] = 'Basic ' . base64_encode($this->config->getUsername() . ":" . $this->config->getPassword());
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\Query::build($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation salesOrderPaymentsPATCHRequestInvoiceIDPaymentsPaymentIDUpdate
     *
     * Updates a payment for a sales order
     *
     * @param  string $accept Accept Header (required)
     * @param  string $invoice_id invoice_id (required)
     * @param  string $payment_id payment_id (required)
     * @param  bool $jiwa_stateful Stateful indicator (optional)
     * @param  int $history_no history_no (optional)
     * @param  string $payment_type payment_type (optional)
     * @param  double $amount_paid amount_paid (optional)
     * @param  \DateTime $payment_date payment_date (optional)
     * @param  bool $process_payment process_payment (optional)
     * @param  string $authorisation_status authorisation_status (optional)
     * @param  int $payment_gateway_return_code payment_gateway_return_code (optional)
     * @param  bool $processed processed (optional)
     * @param  \DateTime $card_expiry card_expiry (optional)
     * @param  string $payment_ref payment_ref (optional)
     * @param  string $authorisation_number authorisation_number (optional)
     * @param  string $payment_gateway_return_message payment_gateway_return_message (optional)
     * @param  string $card_number card_number (optional)
     * @param  string $card_holder card_holder (optional)
     * @param  string $bank_name bank_name (optional)
     * @param  string $bsbn bsbn (optional)
     * @param  string $bank_acc bank_acc (optional)
     * @param  string $account_name account_name (optional)
     * @param  \Jiwa\Model\SalesOrderPaymentsPATCHRequest $body body (optional)
     *
     * @throws \Jiwa\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Jiwa\Model\SalesOrderPayment
     */
    public function salesOrderPaymentsPATCHRequestInvoiceIDPaymentsPaymentIDUpdate($accept, $invoice_id, $payment_id, $jiwa_stateful = null, $history_no = null, $payment_type = null, $amount_paid = null, $payment_date = null, $process_payment = null, $authorisation_status = null, $payment_gateway_return_code = null, $processed = null, $card_expiry = null, $payment_ref = null, $authorisation_number = null, $payment_gateway_return_message = null, $card_number = null, $card_holder = null, $bank_name = null, $bsbn = null, $bank_acc = null, $account_name = null, $body = null)
    {
        list($response) = $this->salesOrderPaymentsPATCHRequestInvoiceIDPaymentsPaymentIDUpdateWithHttpInfo($accept, $invoice_id, $payment_id, $jiwa_stateful, $history_no, $payment_type, $amount_paid, $payment_date, $process_payment, $authorisation_status, $payment_gateway_return_code, $processed, $card_expiry, $payment_ref, $authorisation_number, $payment_gateway_return_message, $card_number, $card_holder, $bank_name, $bsbn, $bank_acc, $account_name, $body);
        return $response;
    }

    /**
     * Operation salesOrderPaymentsPATCHRequestInvoiceIDPaymentsPaymentIDUpdateWithHttpInfo
     *
     * Updates a payment for a sales order
     *
     * @param  string $accept Accept Header (required)
     * @param  string $invoice_id (required)
     * @param  string $payment_id (required)
     * @param  bool $jiwa_stateful Stateful indicator (optional)
     * @param  int $history_no (optional)
     * @param  string $payment_type (optional)
     * @param  double $amount_paid (optional)
     * @param  \DateTime $payment_date (optional)
     * @param  bool $process_payment (optional)
     * @param  string $authorisation_status (optional)
     * @param  int $payment_gateway_return_code (optional)
     * @param  bool $processed (optional)
     * @param  \DateTime $card_expiry (optional)
     * @param  string $payment_ref (optional)
     * @param  string $authorisation_number (optional)
     * @param  string $payment_gateway_return_message (optional)
     * @param  string $card_number (optional)
     * @param  string $card_holder (optional)
     * @param  string $bank_name (optional)
     * @param  string $bsbn (optional)
     * @param  string $bank_acc (optional)
     * @param  string $account_name (optional)
     * @param  \Jiwa\Model\SalesOrderPaymentsPATCHRequest $body (optional)
     *
     * @throws \Jiwa\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Jiwa\Model\SalesOrderPayment, HTTP status code, HTTP response headers (array of strings)
     */
    public function salesOrderPaymentsPATCHRequestInvoiceIDPaymentsPaymentIDUpdateWithHttpInfo($accept, $invoice_id, $payment_id, $jiwa_stateful = null, $history_no = null, $payment_type = null, $amount_paid = null, $payment_date = null, $process_payment = null, $authorisation_status = null, $payment_gateway_return_code = null, $processed = null, $card_expiry = null, $payment_ref = null, $authorisation_number = null, $payment_gateway_return_message = null, $card_number = null, $card_holder = null, $bank_name = null, $bsbn = null, $bank_acc = null, $account_name = null, $body = null)
    {
        $returnType = '\Jiwa\Model\SalesOrderPayment';
        $request = $this->salesOrderPaymentsPATCHRequestInvoiceIDPaymentsPaymentIDUpdateRequest($accept, $invoice_id, $payment_id, $jiwa_stateful, $history_no, $payment_type, $amount_paid, $payment_date, $process_payment, $authorisation_status, $payment_gateway_return_code, $processed, $card_expiry, $payment_ref, $authorisation_number, $payment_gateway_return_message, $card_number, $card_holder, $bank_name, $bsbn, $bank_acc, $account_name, $body);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Jiwa\Model\SalesOrderPayment',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 401:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Jiwa\Model\SalesOrderPayment',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 404:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Jiwa\Model\SalesOrderPayment',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 403:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Jiwa\Model\SalesOrderPayment',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation salesOrderPaymentsPATCHRequestInvoiceIDPaymentsPaymentIDUpdateAsync
     *
     * Updates a payment for a sales order
     *
     * @param  string $accept Accept Header (required)
     * @param  string $invoice_id (required)
     * @param  string $payment_id (required)
     * @param  bool $jiwa_stateful Stateful indicator (optional)
     * @param  int $history_no (optional)
     * @param  string $payment_type (optional)
     * @param  double $amount_paid (optional)
     * @param  \DateTime $payment_date (optional)
     * @param  bool $process_payment (optional)
     * @param  string $authorisation_status (optional)
     * @param  int $payment_gateway_return_code (optional)
     * @param  bool $processed (optional)
     * @param  \DateTime $card_expiry (optional)
     * @param  string $payment_ref (optional)
     * @param  string $authorisation_number (optional)
     * @param  string $payment_gateway_return_message (optional)
     * @param  string $card_number (optional)
     * @param  string $card_holder (optional)
     * @param  string $bank_name (optional)
     * @param  string $bsbn (optional)
     * @param  string $bank_acc (optional)
     * @param  string $account_name (optional)
     * @param  \Jiwa\Model\SalesOrderPaymentsPATCHRequest $body (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function salesOrderPaymentsPATCHRequestInvoiceIDPaymentsPaymentIDUpdateAsync($accept, $invoice_id, $payment_id, $jiwa_stateful = null, $history_no = null, $payment_type = null, $amount_paid = null, $payment_date = null, $process_payment = null, $authorisation_status = null, $payment_gateway_return_code = null, $processed = null, $card_expiry = null, $payment_ref = null, $authorisation_number = null, $payment_gateway_return_message = null, $card_number = null, $card_holder = null, $bank_name = null, $bsbn = null, $bank_acc = null, $account_name = null, $body = null)
    {
        return $this->salesOrderPaymentsPATCHRequestInvoiceIDPaymentsPaymentIDUpdateAsyncWithHttpInfo($accept, $invoice_id, $payment_id, $jiwa_stateful, $history_no, $payment_type, $amount_paid, $payment_date, $process_payment, $authorisation_status, $payment_gateway_return_code, $processed, $card_expiry, $payment_ref, $authorisation_number, $payment_gateway_return_message, $card_number, $card_holder, $bank_name, $bsbn, $bank_acc, $account_name, $body)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation salesOrderPaymentsPATCHRequestInvoiceIDPaymentsPaymentIDUpdateAsyncWithHttpInfo
     *
     * Updates a payment for a sales order
     *
     * @param  string $accept Accept Header (required)
     * @param  string $invoice_id (required)
     * @param  string $payment_id (required)
     * @param  bool $jiwa_stateful Stateful indicator (optional)
     * @param  int $history_no (optional)
     * @param  string $payment_type (optional)
     * @param  double $amount_paid (optional)
     * @param  \DateTime $payment_date (optional)
     * @param  bool $process_payment (optional)
     * @param  string $authorisation_status (optional)
     * @param  int $payment_gateway_return_code (optional)
     * @param  bool $processed (optional)
     * @param  \DateTime $card_expiry (optional)
     * @param  string $payment_ref (optional)
     * @param  string $authorisation_number (optional)
     * @param  string $payment_gateway_return_message (optional)
     * @param  string $card_number (optional)
     * @param  string $card_holder (optional)
     * @param  string $bank_name (optional)
     * @param  string $bsbn (optional)
     * @param  string $bank_acc (optional)
     * @param  string $account_name (optional)
     * @param  \Jiwa\Model\SalesOrderPaymentsPATCHRequest $body (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function salesOrderPaymentsPATCHRequestInvoiceIDPaymentsPaymentIDUpdateAsyncWithHttpInfo($accept, $invoice_id, $payment_id, $jiwa_stateful = null, $history_no = null, $payment_type = null, $amount_paid = null, $payment_date = null, $process_payment = null, $authorisation_status = null, $payment_gateway_return_code = null, $processed = null, $card_expiry = null, $payment_ref = null, $authorisation_number = null, $payment_gateway_return_message = null, $card_number = null, $card_holder = null, $bank_name = null, $bsbn = null, $bank_acc = null, $account_name = null, $body = null)
    {
        $returnType = '\Jiwa\Model\SalesOrderPayment';
        $request = $this->salesOrderPaymentsPATCHRequestInvoiceIDPaymentsPaymentIDUpdateRequest($accept, $invoice_id, $payment_id, $jiwa_stateful, $history_no, $payment_type, $amount_paid, $payment_date, $process_payment, $authorisation_status, $payment_gateway_return_code, $processed, $card_expiry, $payment_ref, $authorisation_number, $payment_gateway_return_message, $card_number, $card_holder, $bank_name, $bsbn, $bank_acc, $account_name, $body);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'salesOrderPaymentsPATCHRequestInvoiceIDPaymentsPaymentIDUpdate'
     *
     * @param  string $accept Accept Header (required)
     * @param  string $invoice_id (required)
     * @param  string $payment_id (required)
     * @param  bool $jiwa_stateful Stateful indicator (optional)
     * @param  int $history_no (optional)
     * @param  string $payment_type (optional)
     * @param  double $amount_paid (optional)
     * @param  \DateTime $payment_date (optional)
     * @param  bool $process_payment (optional)
     * @param  string $authorisation_status (optional)
     * @param  int $payment_gateway_return_code (optional)
     * @param  bool $processed (optional)
     * @param  \DateTime $card_expiry (optional)
     * @param  string $payment_ref (optional)
     * @param  string $authorisation_number (optional)
     * @param  string $payment_gateway_return_message (optional)
     * @param  string $card_number (optional)
     * @param  string $card_holder (optional)
     * @param  string $bank_name (optional)
     * @param  string $bsbn (optional)
     * @param  string $bank_acc (optional)
     * @param  string $account_name (optional)
     * @param  \Jiwa\Model\SalesOrderPaymentsPATCHRequest $body (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function salesOrderPaymentsPATCHRequestInvoiceIDPaymentsPaymentIDUpdateRequest($accept, $invoice_id, $payment_id, $jiwa_stateful = null, $history_no = null, $payment_type = null, $amount_paid = null, $payment_date = null, $process_payment = null, $authorisation_status = null, $payment_gateway_return_code = null, $processed = null, $card_expiry = null, $payment_ref = null, $authorisation_number = null, $payment_gateway_return_message = null, $card_number = null, $card_holder = null, $bank_name = null, $bsbn = null, $bank_acc = null, $account_name = null, $body = null)
    {
        // verify the required parameter 'accept' is set
        if ($accept === null || (is_array($accept) && count($accept) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $accept when calling salesOrderPaymentsPATCHRequestInvoiceIDPaymentsPaymentIDUpdate'
            );
        }
        // verify the required parameter 'invoice_id' is set
        if ($invoice_id === null || (is_array($invoice_id) && count($invoice_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $invoice_id when calling salesOrderPaymentsPATCHRequestInvoiceIDPaymentsPaymentIDUpdate'
            );
        }
        // verify the required parameter 'payment_id' is set
        if ($payment_id === null || (is_array($payment_id) && count($payment_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $payment_id when calling salesOrderPaymentsPATCHRequestInvoiceIDPaymentsPaymentIDUpdate'
            );
        }

        $resourcePath = '/SalesOrders/{InvoiceID}/Payments/{PaymentID}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        if ($history_no !== null) {
            $queryParams['HistoryNo'] = ObjectSerializer::toQueryValue($history_no);
        }
        // query params
        if ($payment_type !== null) {
            $queryParams['PaymentType'] = ObjectSerializer::toQueryValue($payment_type);
        }
        // query params
        if ($amount_paid !== null) {
            $queryParams['AmountPaid'] = ObjectSerializer::toQueryValue($amount_paid);
        }
        // query params
        if ($payment_date !== null) {
            $queryParams['PaymentDate'] = ObjectSerializer::toQueryValue($payment_date);
        }
        // query params
        if ($process_payment !== null) {
            $queryParams['ProcessPayment'] = ObjectSerializer::toQueryValue($process_payment);
        }
        // query params
        if ($authorisation_status !== null) {
            $queryParams['AuthorisationStatus'] = ObjectSerializer::toQueryValue($authorisation_status);
        }
        // query params
        if ($payment_gateway_return_code !== null) {
            $queryParams['PaymentGatewayReturnCode'] = ObjectSerializer::toQueryValue($payment_gateway_return_code);
        }
        // query params
        if ($processed !== null) {
            $queryParams['Processed'] = ObjectSerializer::toQueryValue($processed);
        }
        // query params
        if ($card_expiry !== null) {
            $queryParams['CardExpiry'] = ObjectSerializer::toQueryValue($card_expiry);
        }
        // query params
        if ($payment_ref !== null) {
            $queryParams['PaymentRef'] = ObjectSerializer::toQueryValue($payment_ref);
        }
        // query params
        if ($authorisation_number !== null) {
            $queryParams['AuthorisationNumber'] = ObjectSerializer::toQueryValue($authorisation_number);
        }
        // query params
        if ($payment_gateway_return_message !== null) {
            $queryParams['PaymentGatewayReturnMessage'] = ObjectSerializer::toQueryValue($payment_gateway_return_message);
        }
        // query params
        if ($card_number !== null) {
            $queryParams['CardNumber'] = ObjectSerializer::toQueryValue($card_number);
        }
        // query params
        if ($card_holder !== null) {
            $queryParams['CardHolder'] = ObjectSerializer::toQueryValue($card_holder);
        }
        // query params
        if ($bank_name !== null) {
            $queryParams['BankName'] = ObjectSerializer::toQueryValue($bank_name);
        }
        // query params
        if ($bsbn !== null) {
            $queryParams['BSBN'] = ObjectSerializer::toQueryValue($bsbn);
        }
        // query params
        if ($bank_acc !== null) {
            $queryParams['BankAcc'] = ObjectSerializer::toQueryValue($bank_acc);
        }
        // query params
        if ($account_name !== null) {
            $queryParams['AccountName'] = ObjectSerializer::toQueryValue($account_name);
        }
        // header params
        if ($accept !== null) {
            $headerParams['Accept'] = ObjectSerializer::toHeaderValue($accept);
        }
        // header params
        if ($jiwa_stateful !== null) {
            $headerParams['jiwa-stateful'] = ObjectSerializer::toHeaderValue($jiwa_stateful);
        }

        // path params
        if ($invoice_id !== null) {
            $resourcePath = str_replace(
                '{' . 'InvoiceID' . '}',
                ObjectSerializer::toPathValue($invoice_id),
                $resourcePath
            );
        }
        // path params
        if ($payment_id !== null) {
            $resourcePath = str_replace(
                '{' . 'PaymentID' . '}',
                ObjectSerializer::toPathValue($payment_id),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;
        if (isset($body)) {
            $_tempBody = $body;
        }

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json', 'application/xml']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json', 'application/xml'],
                ['application/x-www-form-urlencoded', 'application/json', 'application/xml']
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            
            if($headers['Content-Type'] === 'application/json') {
                // \stdClass has no __toString(), so we should encode it manually
                if ($httpBody instanceof \stdClass) {
                    $httpBody = \GuzzleHttp\json_encode($httpBody);
                }
                // array has no __toString(), so we should encode it manually
                if(is_array($httpBody)) {
                    $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($httpBody));
                }
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\Query::build($formParams);
            }
        }

        // this endpoint requires HTTP basic authentication
        if ($this->config->getUsername() !== null || $this->config->getPassword() !== null) {
            $headers['Authorization'] = 'Basic ' . base64_encode($this->config->getUsername() . ":" . $this->config->getPassword());
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\Query::build($queryParams);
        return new Request(
            'PATCH',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation salesOrderPaymentsPOSTRequestInvoiceIDHistorysInvoiceHistoryIDPaymentsPost
     *
     * Adds a payment to a sales order
     *
     * @param  string $accept Accept Header (required)
     * @param  string $invoice_id invoice_id (required)
     * @param  string $invoice_history_id invoice_history_id (required)
     * @param  bool $jiwa_stateful Stateful indicator (optional)
     * @param  string $payment_type payment_type (optional)
     * @param  double $amount_paid amount_paid (optional)
     * @param  \DateTime $payment_date payment_date (optional)
     * @param  bool $process_payment process_payment (optional)
     * @param  string $authorisation_status authorisation_status (optional)
     * @param  int $payment_gateway_return_code payment_gateway_return_code (optional)
     * @param  bool $processed processed (optional)
     * @param  \DateTime $card_expiry card_expiry (optional)
     * @param  string $payment_ref payment_ref (optional)
     * @param  string $authorisation_number authorisation_number (optional)
     * @param  string $payment_gateway_return_message payment_gateway_return_message (optional)
     * @param  string $card_number card_number (optional)
     * @param  string $card_holder card_holder (optional)
     * @param  string $bank_name bank_name (optional)
     * @param  string $bsbn bsbn (optional)
     * @param  string $bank_acc bank_acc (optional)
     * @param  string $account_name account_name (optional)
     * @param  \Jiwa\Model\SalesOrderPaymentsPOSTRequest $body body (optional)
     *
     * @throws \Jiwa\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Jiwa\Model\SalesOrderPayment
     */
    public function salesOrderPaymentsPOSTRequestInvoiceIDHistorysInvoiceHistoryIDPaymentsPost($accept, $invoice_id, $invoice_history_id, $jiwa_stateful = null, $payment_type = null, $amount_paid = null, $payment_date = null, $process_payment = null, $authorisation_status = null, $payment_gateway_return_code = null, $processed = null, $card_expiry = null, $payment_ref = null, $authorisation_number = null, $payment_gateway_return_message = null, $card_number = null, $card_holder = null, $bank_name = null, $bsbn = null, $bank_acc = null, $account_name = null, $body = null)
    {
        list($response) = $this->salesOrderPaymentsPOSTRequestInvoiceIDHistorysInvoiceHistoryIDPaymentsPostWithHttpInfo($accept, $invoice_id, $invoice_history_id, $jiwa_stateful, $payment_type, $amount_paid, $payment_date, $process_payment, $authorisation_status, $payment_gateway_return_code, $processed, $card_expiry, $payment_ref, $authorisation_number, $payment_gateway_return_message, $card_number, $card_holder, $bank_name, $bsbn, $bank_acc, $account_name, $body);
        return $response;
    }

    /**
     * Operation salesOrderPaymentsPOSTRequestInvoiceIDHistorysInvoiceHistoryIDPaymentsPostWithHttpInfo
     *
     * Adds a payment to a sales order
     *
     * @param  string $accept Accept Header (required)
     * @param  string $invoice_id (required)
     * @param  string $invoice_history_id (required)
     * @param  bool $jiwa_stateful Stateful indicator (optional)
     * @param  string $payment_type (optional)
     * @param  double $amount_paid (optional)
     * @param  \DateTime $payment_date (optional)
     * @param  bool $process_payment (optional)
     * @param  string $authorisation_status (optional)
     * @param  int $payment_gateway_return_code (optional)
     * @param  bool $processed (optional)
     * @param  \DateTime $card_expiry (optional)
     * @param  string $payment_ref (optional)
     * @param  string $authorisation_number (optional)
     * @param  string $payment_gateway_return_message (optional)
     * @param  string $card_number (optional)
     * @param  string $card_holder (optional)
     * @param  string $bank_name (optional)
     * @param  string $bsbn (optional)
     * @param  string $bank_acc (optional)
     * @param  string $account_name (optional)
     * @param  \Jiwa\Model\SalesOrderPaymentsPOSTRequest $body (optional)
     *
     * @throws \Jiwa\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Jiwa\Model\SalesOrderPayment, HTTP status code, HTTP response headers (array of strings)
     */
    public function salesOrderPaymentsPOSTRequestInvoiceIDHistorysInvoiceHistoryIDPaymentsPostWithHttpInfo($accept, $invoice_id, $invoice_history_id, $jiwa_stateful = null, $payment_type = null, $amount_paid = null, $payment_date = null, $process_payment = null, $authorisation_status = null, $payment_gateway_return_code = null, $processed = null, $card_expiry = null, $payment_ref = null, $authorisation_number = null, $payment_gateway_return_message = null, $card_number = null, $card_holder = null, $bank_name = null, $bsbn = null, $bank_acc = null, $account_name = null, $body = null)
    {
        $returnType = '\Jiwa\Model\SalesOrderPayment';
        $request = $this->salesOrderPaymentsPOSTRequestInvoiceIDHistorysInvoiceHistoryIDPaymentsPostRequest($accept, $invoice_id, $invoice_history_id, $jiwa_stateful, $payment_type, $amount_paid, $payment_date, $process_payment, $authorisation_status, $payment_gateway_return_code, $processed, $card_expiry, $payment_ref, $authorisation_number, $payment_gateway_return_message, $card_number, $card_holder, $bank_name, $bsbn, $bank_acc, $account_name, $body);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Jiwa\Model\SalesOrderPayment',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 401:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Jiwa\Model\SalesOrderPayment',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 403:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Jiwa\Model\SalesOrderPayment',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation salesOrderPaymentsPOSTRequestInvoiceIDHistorysInvoiceHistoryIDPaymentsPostAsync
     *
     * Adds a payment to a sales order
     *
     * @param  string $accept Accept Header (required)
     * @param  string $invoice_id (required)
     * @param  string $invoice_history_id (required)
     * @param  bool $jiwa_stateful Stateful indicator (optional)
     * @param  string $payment_type (optional)
     * @param  double $amount_paid (optional)
     * @param  \DateTime $payment_date (optional)
     * @param  bool $process_payment (optional)
     * @param  string $authorisation_status (optional)
     * @param  int $payment_gateway_return_code (optional)
     * @param  bool $processed (optional)
     * @param  \DateTime $card_expiry (optional)
     * @param  string $payment_ref (optional)
     * @param  string $authorisation_number (optional)
     * @param  string $payment_gateway_return_message (optional)
     * @param  string $card_number (optional)
     * @param  string $card_holder (optional)
     * @param  string $bank_name (optional)
     * @param  string $bsbn (optional)
     * @param  string $bank_acc (optional)
     * @param  string $account_name (optional)
     * @param  \Jiwa\Model\SalesOrderPaymentsPOSTRequest $body (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function salesOrderPaymentsPOSTRequestInvoiceIDHistorysInvoiceHistoryIDPaymentsPostAsync($accept, $invoice_id, $invoice_history_id, $jiwa_stateful = null, $payment_type = null, $amount_paid = null, $payment_date = null, $process_payment = null, $authorisation_status = null, $payment_gateway_return_code = null, $processed = null, $card_expiry = null, $payment_ref = null, $authorisation_number = null, $payment_gateway_return_message = null, $card_number = null, $card_holder = null, $bank_name = null, $bsbn = null, $bank_acc = null, $account_name = null, $body = null)
    {
        return $this->salesOrderPaymentsPOSTRequestInvoiceIDHistorysInvoiceHistoryIDPaymentsPostAsyncWithHttpInfo($accept, $invoice_id, $invoice_history_id, $jiwa_stateful, $payment_type, $amount_paid, $payment_date, $process_payment, $authorisation_status, $payment_gateway_return_code, $processed, $card_expiry, $payment_ref, $authorisation_number, $payment_gateway_return_message, $card_number, $card_holder, $bank_name, $bsbn, $bank_acc, $account_name, $body)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation salesOrderPaymentsPOSTRequestInvoiceIDHistorysInvoiceHistoryIDPaymentsPostAsyncWithHttpInfo
     *
     * Adds a payment to a sales order
     *
     * @param  string $accept Accept Header (required)
     * @param  string $invoice_id (required)
     * @param  string $invoice_history_id (required)
     * @param  bool $jiwa_stateful Stateful indicator (optional)
     * @param  string $payment_type (optional)
     * @param  double $amount_paid (optional)
     * @param  \DateTime $payment_date (optional)
     * @param  bool $process_payment (optional)
     * @param  string $authorisation_status (optional)
     * @param  int $payment_gateway_return_code (optional)
     * @param  bool $processed (optional)
     * @param  \DateTime $card_expiry (optional)
     * @param  string $payment_ref (optional)
     * @param  string $authorisation_number (optional)
     * @param  string $payment_gateway_return_message (optional)
     * @param  string $card_number (optional)
     * @param  string $card_holder (optional)
     * @param  string $bank_name (optional)
     * @param  string $bsbn (optional)
     * @param  string $bank_acc (optional)
     * @param  string $account_name (optional)
     * @param  \Jiwa\Model\SalesOrderPaymentsPOSTRequest $body (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function salesOrderPaymentsPOSTRequestInvoiceIDHistorysInvoiceHistoryIDPaymentsPostAsyncWithHttpInfo($accept, $invoice_id, $invoice_history_id, $jiwa_stateful = null, $payment_type = null, $amount_paid = null, $payment_date = null, $process_payment = null, $authorisation_status = null, $payment_gateway_return_code = null, $processed = null, $card_expiry = null, $payment_ref = null, $authorisation_number = null, $payment_gateway_return_message = null, $card_number = null, $card_holder = null, $bank_name = null, $bsbn = null, $bank_acc = null, $account_name = null, $body = null)
    {
        $returnType = '\Jiwa\Model\SalesOrderPayment';
        $request = $this->salesOrderPaymentsPOSTRequestInvoiceIDHistorysInvoiceHistoryIDPaymentsPostRequest($accept, $invoice_id, $invoice_history_id, $jiwa_stateful, $payment_type, $amount_paid, $payment_date, $process_payment, $authorisation_status, $payment_gateway_return_code, $processed, $card_expiry, $payment_ref, $authorisation_number, $payment_gateway_return_message, $card_number, $card_holder, $bank_name, $bsbn, $bank_acc, $account_name, $body);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'salesOrderPaymentsPOSTRequestInvoiceIDHistorysInvoiceHistoryIDPaymentsPost'
     *
     * @param  string $accept Accept Header (required)
     * @param  string $invoice_id (required)
     * @param  string $invoice_history_id (required)
     * @param  bool $jiwa_stateful Stateful indicator (optional)
     * @param  string $payment_type (optional)
     * @param  double $amount_paid (optional)
     * @param  \DateTime $payment_date (optional)
     * @param  bool $process_payment (optional)
     * @param  string $authorisation_status (optional)
     * @param  int $payment_gateway_return_code (optional)
     * @param  bool $processed (optional)
     * @param  \DateTime $card_expiry (optional)
     * @param  string $payment_ref (optional)
     * @param  string $authorisation_number (optional)
     * @param  string $payment_gateway_return_message (optional)
     * @param  string $card_number (optional)
     * @param  string $card_holder (optional)
     * @param  string $bank_name (optional)
     * @param  string $bsbn (optional)
     * @param  string $bank_acc (optional)
     * @param  string $account_name (optional)
     * @param  \Jiwa\Model\SalesOrderPaymentsPOSTRequest $body (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function salesOrderPaymentsPOSTRequestInvoiceIDHistorysInvoiceHistoryIDPaymentsPostRequest($accept, $invoice_id, $invoice_history_id, $jiwa_stateful = null, $payment_type = null, $amount_paid = null, $payment_date = null, $process_payment = null, $authorisation_status = null, $payment_gateway_return_code = null, $processed = null, $card_expiry = null, $payment_ref = null, $authorisation_number = null, $payment_gateway_return_message = null, $card_number = null, $card_holder = null, $bank_name = null, $bsbn = null, $bank_acc = null, $account_name = null, $body = null)
    {
        // verify the required parameter 'accept' is set
        if ($accept === null || (is_array($accept) && count($accept) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $accept when calling salesOrderPaymentsPOSTRequestInvoiceIDHistorysInvoiceHistoryIDPaymentsPost'
            );
        }
        // verify the required parameter 'invoice_id' is set
        if ($invoice_id === null || (is_array($invoice_id) && count($invoice_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $invoice_id when calling salesOrderPaymentsPOSTRequestInvoiceIDHistorysInvoiceHistoryIDPaymentsPost'
            );
        }
        // verify the required parameter 'invoice_history_id' is set
        if ($invoice_history_id === null || (is_array($invoice_history_id) && count($invoice_history_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $invoice_history_id when calling salesOrderPaymentsPOSTRequestInvoiceIDHistorysInvoiceHistoryIDPaymentsPost'
            );
        }

        $resourcePath = '/SalesOrders/{InvoiceID}/Historys/{InvoiceHistoryID}/Payments';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        if ($payment_type !== null) {
            $queryParams['PaymentType'] = ObjectSerializer::toQueryValue($payment_type);
        }
        // query params
        if ($amount_paid !== null) {
            $queryParams['AmountPaid'] = ObjectSerializer::toQueryValue($amount_paid);
        }
        // query params
        if ($payment_date !== null) {
            $queryParams['PaymentDate'] = ObjectSerializer::toQueryValue($payment_date);
        }
        // query params
        if ($process_payment !== null) {
            $queryParams['ProcessPayment'] = ObjectSerializer::toQueryValue($process_payment);
        }
        // query params
        if ($authorisation_status !== null) {
            $queryParams['AuthorisationStatus'] = ObjectSerializer::toQueryValue($authorisation_status);
        }
        // query params
        if ($payment_gateway_return_code !== null) {
            $queryParams['PaymentGatewayReturnCode'] = ObjectSerializer::toQueryValue($payment_gateway_return_code);
        }
        // query params
        if ($processed !== null) {
            $queryParams['Processed'] = ObjectSerializer::toQueryValue($processed);
        }
        // query params
        if ($card_expiry !== null) {
            $queryParams['CardExpiry'] = ObjectSerializer::toQueryValue($card_expiry);
        }
        // query params
        if ($payment_ref !== null) {
            $queryParams['PaymentRef'] = ObjectSerializer::toQueryValue($payment_ref);
        }
        // query params
        if ($authorisation_number !== null) {
            $queryParams['AuthorisationNumber'] = ObjectSerializer::toQueryValue($authorisation_number);
        }
        // query params
        if ($payment_gateway_return_message !== null) {
            $queryParams['PaymentGatewayReturnMessage'] = ObjectSerializer::toQueryValue($payment_gateway_return_message);
        }
        // query params
        if ($card_number !== null) {
            $queryParams['CardNumber'] = ObjectSerializer::toQueryValue($card_number);
        }
        // query params
        if ($card_holder !== null) {
            $queryParams['CardHolder'] = ObjectSerializer::toQueryValue($card_holder);
        }
        // query params
        if ($bank_name !== null) {
            $queryParams['BankName'] = ObjectSerializer::toQueryValue($bank_name);
        }
        // query params
        if ($bsbn !== null) {
            $queryParams['BSBN'] = ObjectSerializer::toQueryValue($bsbn);
        }
        // query params
        if ($bank_acc !== null) {
            $queryParams['BankAcc'] = ObjectSerializer::toQueryValue($bank_acc);
        }
        // query params
        if ($account_name !== null) {
            $queryParams['AccountName'] = ObjectSerializer::toQueryValue($account_name);
        }
        // header params
        if ($accept !== null) {
            $headerParams['Accept'] = ObjectSerializer::toHeaderValue($accept);
        }
        // header params
        if ($jiwa_stateful !== null) {
            $headerParams['jiwa-stateful'] = ObjectSerializer::toHeaderValue($jiwa_stateful);
        }

        // path params
        if ($invoice_id !== null) {
            $resourcePath = str_replace(
                '{' . 'InvoiceID' . '}',
                ObjectSerializer::toPathValue($invoice_id),
                $resourcePath
            );
        }
        // path params
        if ($invoice_history_id !== null) {
            $resourcePath = str_replace(
                '{' . 'InvoiceHistoryID' . '}',
                ObjectSerializer::toPathValue($invoice_history_id),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;
        if (isset($body)) {
            $_tempBody = $body;
        }

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json', 'application/xml']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json', 'application/xml'],
                ['application/x-www-form-urlencoded', 'application/json', 'application/xml']
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            
            if($headers['Content-Type'] === 'application/json') {
                // \stdClass has no __toString(), so we should encode it manually
                if ($httpBody instanceof \stdClass) {
                    $httpBody = \GuzzleHttp\json_encode($httpBody);
                }
                // array has no __toString(), so we should encode it manually
                if(is_array($httpBody)) {
                    $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($httpBody));
                }
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\Query::build($formParams);
            }
        }

        // this endpoint requires HTTP basic authentication
        if ($this->config->getUsername() !== null || $this->config->getPassword() !== null) {
            $headers['Authorization'] = 'Basic ' . base64_encode($this->config->getUsername() . ":" . $this->config->getPassword());
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\Query::build($queryParams);
        return new Request(
            'POST',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation salesOrderSAVERequestInvoiceIDSaveGet
     *
     * Saves a stateful sales order.
     *
     * @param  string $accept Accept Header (required)
     * @param  string $invoice_id invoice_id (required)
     * @param  bool $jiwa_stateful Stateful indicator (optional)
     *
     * @throws \Jiwa\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Jiwa\Model\SalesOrder
     */
    public function salesOrderSAVERequestInvoiceIDSaveGet($accept, $invoice_id, $jiwa_stateful = null)
    {
        list($response) = $this->salesOrderSAVERequestInvoiceIDSaveGetWithHttpInfo($accept, $invoice_id, $jiwa_stateful);
        return $response;
    }

    /**
     * Operation salesOrderSAVERequestInvoiceIDSaveGetWithHttpInfo
     *
     * Saves a stateful sales order.
     *
     * @param  string $accept Accept Header (required)
     * @param  string $invoice_id (required)
     * @param  bool $jiwa_stateful Stateful indicator (optional)
     *
     * @throws \Jiwa\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Jiwa\Model\SalesOrder, HTTP status code, HTTP response headers (array of strings)
     */
    public function salesOrderSAVERequestInvoiceIDSaveGetWithHttpInfo($accept, $invoice_id, $jiwa_stateful = null)
    {
        $returnType = '\Jiwa\Model\SalesOrder';
        $request = $this->salesOrderSAVERequestInvoiceIDSaveGetRequest($accept, $invoice_id, $jiwa_stateful);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Jiwa\Model\SalesOrder',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 404:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Jiwa\Model\SalesOrder',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 401:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Jiwa\Model\SalesOrder',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 403:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Jiwa\Model\SalesOrder',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation salesOrderSAVERequestInvoiceIDSaveGetAsync
     *
     * Saves a stateful sales order.
     *
     * @param  string $accept Accept Header (required)
     * @param  string $invoice_id (required)
     * @param  bool $jiwa_stateful Stateful indicator (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function salesOrderSAVERequestInvoiceIDSaveGetAsync($accept, $invoice_id, $jiwa_stateful = null)
    {
        return $this->salesOrderSAVERequestInvoiceIDSaveGetAsyncWithHttpInfo($accept, $invoice_id, $jiwa_stateful)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation salesOrderSAVERequestInvoiceIDSaveGetAsyncWithHttpInfo
     *
     * Saves a stateful sales order.
     *
     * @param  string $accept Accept Header (required)
     * @param  string $invoice_id (required)
     * @param  bool $jiwa_stateful Stateful indicator (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function salesOrderSAVERequestInvoiceIDSaveGetAsyncWithHttpInfo($accept, $invoice_id, $jiwa_stateful = null)
    {
        $returnType = '\Jiwa\Model\SalesOrder';
        $request = $this->salesOrderSAVERequestInvoiceIDSaveGetRequest($accept, $invoice_id, $jiwa_stateful);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'salesOrderSAVERequestInvoiceIDSaveGet'
     *
     * @param  string $accept Accept Header (required)
     * @param  string $invoice_id (required)
     * @param  bool $jiwa_stateful Stateful indicator (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function salesOrderSAVERequestInvoiceIDSaveGetRequest($accept, $invoice_id, $jiwa_stateful = null)
    {
        // verify the required parameter 'accept' is set
        if ($accept === null || (is_array($accept) && count($accept) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $accept when calling salesOrderSAVERequestInvoiceIDSaveGet'
            );
        }
        // verify the required parameter 'invoice_id' is set
        if ($invoice_id === null || (is_array($invoice_id) && count($invoice_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $invoice_id when calling salesOrderSAVERequestInvoiceIDSaveGet'
            );
        }

        $resourcePath = '/SalesOrders/{InvoiceID}/Save';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // header params
        if ($accept !== null) {
            $headerParams['Accept'] = ObjectSerializer::toHeaderValue($accept);
        }
        // header params
        if ($jiwa_stateful !== null) {
            $headerParams['jiwa-stateful'] = ObjectSerializer::toHeaderValue($jiwa_stateful);
        }

        // path params
        if ($invoice_id !== null) {
            $resourcePath = str_replace(
                '{' . 'InvoiceID' . '}',
                ObjectSerializer::toPathValue($invoice_id),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json', 'application/xml']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json', 'application/xml'],
                ['application/x-www-form-urlencoded', 'application/json', 'application/xml']
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            
            if($headers['Content-Type'] === 'application/json') {
                // \stdClass has no __toString(), so we should encode it manually
                if ($httpBody instanceof \stdClass) {
                    $httpBody = \GuzzleHttp\json_encode($httpBody);
                }
                // array has no __toString(), so we should encode it manually
                if(is_array($httpBody)) {
                    $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($httpBody));
                }
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\Query::build($formParams);
            }
        }

        // this endpoint requires HTTP basic authentication
        if ($this->config->getUsername() !== null || $this->config->getPassword() !== null) {
            $headers['Authorization'] = 'Basic ' . base64_encode($this->config->getUsername() . ":" . $this->config->getPassword());
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\Query::build($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Create http client option
     *
     * @throws \RuntimeException on file opening failure
     * @return array of http client options
     */
    protected function createHttpClientOption()
    {
        $options = [];
        if ($this->config->getDebug()) {
            $options[RequestOptions::DEBUG] = fopen($this->config->getDebugFile(), 'a');
            if (!$options[RequestOptions::DEBUG]) {
                throw new \RuntimeException('Failed to open the debug file: ' . $this->config->getDebugFile());
            }
        }

        return $options;
    }
}

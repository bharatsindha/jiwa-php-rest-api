<?php
/**
 * CreditorsApi
 * PHP version 5
 *
 * @category Class
 * @package  Jiwa
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * JiwaAPI
 *
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: 1.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 * Swagger Codegen version: 2.4.28-SNAPSHOT
 */

/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Jiwa\Api;

use GuzzleHttp\Client;
use GuzzleHttp\ClientInterface;
use GuzzleHttp\Exception\RequestException;
use GuzzleHttp\Psr7\MultipartStream;
use GuzzleHttp\Psr7\Request;
use GuzzleHttp\RequestOptions;
use Jiwa\ApiException;
use Jiwa\Configuration;
use Jiwa\HeaderSelector;
use Jiwa\ObjectSerializer;

/**
 * CreditorsApi Class Doc Comment
 *
 * @category Class
 * @package  Jiwa
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class CreditorsApi
{
    /**
     * @var ClientInterface
     */
    protected $client;

    /**
     * @var Configuration
     */
    protected $config;

    /**
     * @var HeaderSelector
     */
    protected $headerSelector;

    /**
     * @param ClientInterface $client
     * @param Configuration   $config
     * @param HeaderSelector  $selector
     */
    public function __construct(
        ClientInterface $client = null,
        Configuration $config = null,
        HeaderSelector $selector = null
    ) {
        $this->client = $client ?: new Client();
        $this->config = $config ?: new Configuration();
        $this->headerSelector = $selector ?: new HeaderSelector();
    }

    /**
     * @return Configuration
     */
    public function getConfig()
    {
        return $this->config;
    }

    /**
     * Operation creditorABANDONRequestAbandonDelete
     *
     * Abandons a stateful creditor.
     *
     * @param  string $accept Accept Header (required)
     * @param  bool $jiwa_stateful Stateful indicator (optional)
     * @param  string $creditor_id creditor_id (optional)
     *
     * @throws \Jiwa\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Jiwa\Model\Object
     */
    public function creditorABANDONRequestAbandonDelete($accept, $jiwa_stateful = null, $creditor_id = null)
    {
        list($response) = $this->creditorABANDONRequestAbandonDeleteWithHttpInfo($accept, $jiwa_stateful, $creditor_id);
        return $response;
    }

    /**
     * Operation creditorABANDONRequestAbandonDeleteWithHttpInfo
     *
     * Abandons a stateful creditor.
     *
     * @param  string $accept Accept Header (required)
     * @param  bool $jiwa_stateful Stateful indicator (optional)
     * @param  string $creditor_id (optional)
     *
     * @throws \Jiwa\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Jiwa\Model\Object, HTTP status code, HTTP response headers (array of strings)
     */
    public function creditorABANDONRequestAbandonDeleteWithHttpInfo($accept, $jiwa_stateful = null, $creditor_id = null)
    {
        $returnType = '\Jiwa\Model\Object';
        $request = $this->creditorABANDONRequestAbandonDeleteRequest($accept, $jiwa_stateful, $creditor_id);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Jiwa\Model\Object',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 403:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Jiwa\Model\Object',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 404:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Jiwa\Model\Object',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 401:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Jiwa\Model\Object',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation creditorABANDONRequestAbandonDeleteAsync
     *
     * Abandons a stateful creditor.
     *
     * @param  string $accept Accept Header (required)
     * @param  bool $jiwa_stateful Stateful indicator (optional)
     * @param  string $creditor_id (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function creditorABANDONRequestAbandonDeleteAsync($accept, $jiwa_stateful = null, $creditor_id = null)
    {
        return $this->creditorABANDONRequestAbandonDeleteAsyncWithHttpInfo($accept, $jiwa_stateful, $creditor_id)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation creditorABANDONRequestAbandonDeleteAsyncWithHttpInfo
     *
     * Abandons a stateful creditor.
     *
     * @param  string $accept Accept Header (required)
     * @param  bool $jiwa_stateful Stateful indicator (optional)
     * @param  string $creditor_id (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function creditorABANDONRequestAbandonDeleteAsyncWithHttpInfo($accept, $jiwa_stateful = null, $creditor_id = null)
    {
        $returnType = '\Jiwa\Model\Object';
        $request = $this->creditorABANDONRequestAbandonDeleteRequest($accept, $jiwa_stateful, $creditor_id);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'creditorABANDONRequestAbandonDelete'
     *
     * @param  string $accept Accept Header (required)
     * @param  bool $jiwa_stateful Stateful indicator (optional)
     * @param  string $creditor_id (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function creditorABANDONRequestAbandonDeleteRequest($accept, $jiwa_stateful = null, $creditor_id = null)
    {
        // verify the required parameter 'accept' is set
        if ($accept === null || (is_array($accept) && count($accept) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $accept when calling creditorABANDONRequestAbandonDelete'
            );
        }

        $resourcePath = '/Creditors/Abandon';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        if ($creditor_id !== null) {
            $queryParams['CreditorID'] = ObjectSerializer::toQueryValue($creditor_id);
        }
        // header params
        if ($accept !== null) {
            $headerParams['Accept'] = ObjectSerializer::toHeaderValue($accept);
        }
        // header params
        if ($jiwa_stateful !== null) {
            $headerParams['jiwa-stateful'] = ObjectSerializer::toHeaderValue($jiwa_stateful);
        }


        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json', 'application/xml']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json', 'application/xml'],
                ['application/x-www-form-urlencoded', 'application/json', 'application/xml']
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            
            if($headers['Content-Type'] === 'application/json') {
                // \stdClass has no __toString(), so we should encode it manually
                if ($httpBody instanceof \stdClass) {
                    $httpBody = \GuzzleHttp\json_encode($httpBody);
                }
                // array has no __toString(), so we should encode it manually
                if(is_array($httpBody)) {
                    $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($httpBody));
                }
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\Query::build($formParams);
            }
        }

        // this endpoint requires HTTP basic authentication
        if ($this->config->getUsername() !== null || $this->config->getPassword() !== null) {
            $headers['Authorization'] = 'Basic ' . base64_encode($this->config->getUsername() . ":" . $this->config->getPassword());
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\Query::build($queryParams);
        return new Request(
            'DELETE',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation creditorClassificationABANDONRequestClassificationsAbandonDelete
     *
     * Abandons a stateful creditor classification.
     *
     * @param  string $accept Accept Header (required)
     * @param  bool $jiwa_stateful Stateful indicator (optional)
     * @param  string $classification_id classification_id (optional)
     *
     * @throws \Jiwa\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Jiwa\Model\Object
     */
    public function creditorClassificationABANDONRequestClassificationsAbandonDelete($accept, $jiwa_stateful = null, $classification_id = null)
    {
        list($response) = $this->creditorClassificationABANDONRequestClassificationsAbandonDeleteWithHttpInfo($accept, $jiwa_stateful, $classification_id);
        return $response;
    }

    /**
     * Operation creditorClassificationABANDONRequestClassificationsAbandonDeleteWithHttpInfo
     *
     * Abandons a stateful creditor classification.
     *
     * @param  string $accept Accept Header (required)
     * @param  bool $jiwa_stateful Stateful indicator (optional)
     * @param  string $classification_id (optional)
     *
     * @throws \Jiwa\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Jiwa\Model\Object, HTTP status code, HTTP response headers (array of strings)
     */
    public function creditorClassificationABANDONRequestClassificationsAbandonDeleteWithHttpInfo($accept, $jiwa_stateful = null, $classification_id = null)
    {
        $returnType = '\Jiwa\Model\Object';
        $request = $this->creditorClassificationABANDONRequestClassificationsAbandonDeleteRequest($accept, $jiwa_stateful, $classification_id);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Jiwa\Model\Object',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 404:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Jiwa\Model\Object',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 403:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Jiwa\Model\Object',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 401:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Jiwa\Model\Object',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation creditorClassificationABANDONRequestClassificationsAbandonDeleteAsync
     *
     * Abandons a stateful creditor classification.
     *
     * @param  string $accept Accept Header (required)
     * @param  bool $jiwa_stateful Stateful indicator (optional)
     * @param  string $classification_id (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function creditorClassificationABANDONRequestClassificationsAbandonDeleteAsync($accept, $jiwa_stateful = null, $classification_id = null)
    {
        return $this->creditorClassificationABANDONRequestClassificationsAbandonDeleteAsyncWithHttpInfo($accept, $jiwa_stateful, $classification_id)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation creditorClassificationABANDONRequestClassificationsAbandonDeleteAsyncWithHttpInfo
     *
     * Abandons a stateful creditor classification.
     *
     * @param  string $accept Accept Header (required)
     * @param  bool $jiwa_stateful Stateful indicator (optional)
     * @param  string $classification_id (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function creditorClassificationABANDONRequestClassificationsAbandonDeleteAsyncWithHttpInfo($accept, $jiwa_stateful = null, $classification_id = null)
    {
        $returnType = '\Jiwa\Model\Object';
        $request = $this->creditorClassificationABANDONRequestClassificationsAbandonDeleteRequest($accept, $jiwa_stateful, $classification_id);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'creditorClassificationABANDONRequestClassificationsAbandonDelete'
     *
     * @param  string $accept Accept Header (required)
     * @param  bool $jiwa_stateful Stateful indicator (optional)
     * @param  string $classification_id (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function creditorClassificationABANDONRequestClassificationsAbandonDeleteRequest($accept, $jiwa_stateful = null, $classification_id = null)
    {
        // verify the required parameter 'accept' is set
        if ($accept === null || (is_array($accept) && count($accept) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $accept when calling creditorClassificationABANDONRequestClassificationsAbandonDelete'
            );
        }

        $resourcePath = '/Creditors/Classifications/Abandon';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        if ($classification_id !== null) {
            $queryParams['ClassificationID'] = ObjectSerializer::toQueryValue($classification_id);
        }
        // header params
        if ($accept !== null) {
            $headerParams['Accept'] = ObjectSerializer::toHeaderValue($accept);
        }
        // header params
        if ($jiwa_stateful !== null) {
            $headerParams['jiwa-stateful'] = ObjectSerializer::toHeaderValue($jiwa_stateful);
        }


        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json', 'application/xml']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json', 'application/xml'],
                ['application/x-www-form-urlencoded', 'application/json', 'application/xml']
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            
            if($headers['Content-Type'] === 'application/json') {
                // \stdClass has no __toString(), so we should encode it manually
                if ($httpBody instanceof \stdClass) {
                    $httpBody = \GuzzleHttp\json_encode($httpBody);
                }
                // array has no __toString(), so we should encode it manually
                if(is_array($httpBody)) {
                    $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($httpBody));
                }
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\Query::build($formParams);
            }
        }

        // this endpoint requires HTTP basic authentication
        if ($this->config->getUsername() !== null || $this->config->getPassword() !== null) {
            $headers['Authorization'] = 'Basic ' . base64_encode($this->config->getUsername() . ":" . $this->config->getPassword());
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\Query::build($queryParams);
        return new Request(
            'DELETE',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation creditorClassificationDELETERequestClassificationsClassificationIDDelete
     *
     * Deletes a creditor classification.
     *
     * @param  string $accept Accept Header (required)
     * @param  string $classification_id classification_id (required)
     * @param  bool $jiwa_stateful Stateful indicator (optional)
     *
     * @throws \Jiwa\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Jiwa\Model\Object
     */
    public function creditorClassificationDELETERequestClassificationsClassificationIDDelete($accept, $classification_id, $jiwa_stateful = null)
    {
        list($response) = $this->creditorClassificationDELETERequestClassificationsClassificationIDDeleteWithHttpInfo($accept, $classification_id, $jiwa_stateful);
        return $response;
    }

    /**
     * Operation creditorClassificationDELETERequestClassificationsClassificationIDDeleteWithHttpInfo
     *
     * Deletes a creditor classification.
     *
     * @param  string $accept Accept Header (required)
     * @param  string $classification_id (required)
     * @param  bool $jiwa_stateful Stateful indicator (optional)
     *
     * @throws \Jiwa\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Jiwa\Model\Object, HTTP status code, HTTP response headers (array of strings)
     */
    public function creditorClassificationDELETERequestClassificationsClassificationIDDeleteWithHttpInfo($accept, $classification_id, $jiwa_stateful = null)
    {
        $returnType = '\Jiwa\Model\Object';
        $request = $this->creditorClassificationDELETERequestClassificationsClassificationIDDeleteRequest($accept, $classification_id, $jiwa_stateful);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Jiwa\Model\Object',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 403:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Jiwa\Model\Object',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 404:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Jiwa\Model\Object',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 204:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Jiwa\Model\Object',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 401:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Jiwa\Model\Object',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation creditorClassificationDELETERequestClassificationsClassificationIDDeleteAsync
     *
     * Deletes a creditor classification.
     *
     * @param  string $accept Accept Header (required)
     * @param  string $classification_id (required)
     * @param  bool $jiwa_stateful Stateful indicator (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function creditorClassificationDELETERequestClassificationsClassificationIDDeleteAsync($accept, $classification_id, $jiwa_stateful = null)
    {
        return $this->creditorClassificationDELETERequestClassificationsClassificationIDDeleteAsyncWithHttpInfo($accept, $classification_id, $jiwa_stateful)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation creditorClassificationDELETERequestClassificationsClassificationIDDeleteAsyncWithHttpInfo
     *
     * Deletes a creditor classification.
     *
     * @param  string $accept Accept Header (required)
     * @param  string $classification_id (required)
     * @param  bool $jiwa_stateful Stateful indicator (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function creditorClassificationDELETERequestClassificationsClassificationIDDeleteAsyncWithHttpInfo($accept, $classification_id, $jiwa_stateful = null)
    {
        $returnType = '\Jiwa\Model\Object';
        $request = $this->creditorClassificationDELETERequestClassificationsClassificationIDDeleteRequest($accept, $classification_id, $jiwa_stateful);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'creditorClassificationDELETERequestClassificationsClassificationIDDelete'
     *
     * @param  string $accept Accept Header (required)
     * @param  string $classification_id (required)
     * @param  bool $jiwa_stateful Stateful indicator (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function creditorClassificationDELETERequestClassificationsClassificationIDDeleteRequest($accept, $classification_id, $jiwa_stateful = null)
    {
        // verify the required parameter 'accept' is set
        if ($accept === null || (is_array($accept) && count($accept) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $accept when calling creditorClassificationDELETERequestClassificationsClassificationIDDelete'
            );
        }
        // verify the required parameter 'classification_id' is set
        if ($classification_id === null || (is_array($classification_id) && count($classification_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $classification_id when calling creditorClassificationDELETERequestClassificationsClassificationIDDelete'
            );
        }

        $resourcePath = '/Creditors/Classifications/{ClassificationID}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // header params
        if ($accept !== null) {
            $headerParams['Accept'] = ObjectSerializer::toHeaderValue($accept);
        }
        // header params
        if ($jiwa_stateful !== null) {
            $headerParams['jiwa-stateful'] = ObjectSerializer::toHeaderValue($jiwa_stateful);
        }

        // path params
        if ($classification_id !== null) {
            $resourcePath = str_replace(
                '{' . 'ClassificationID' . '}',
                ObjectSerializer::toPathValue($classification_id),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json', 'application/xml']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json', 'application/xml'],
                ['application/x-www-form-urlencoded', 'application/json', 'application/xml']
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            
            if($headers['Content-Type'] === 'application/json') {
                // \stdClass has no __toString(), so we should encode it manually
                if ($httpBody instanceof \stdClass) {
                    $httpBody = \GuzzleHttp\json_encode($httpBody);
                }
                // array has no __toString(), so we should encode it manually
                if(is_array($httpBody)) {
                    $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($httpBody));
                }
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\Query::build($formParams);
            }
        }

        // this endpoint requires HTTP basic authentication
        if ($this->config->getUsername() !== null || $this->config->getPassword() !== null) {
            $headers['Authorization'] = 'Basic ' . base64_encode($this->config->getUsername() . ":" . $this->config->getPassword());
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\Query::build($queryParams);
        return new Request(
            'DELETE',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation creditorClassificationGETRequestClassificationsClassificationIDGet
     *
     * Retrieves a creditor classification.
     *
     * @param  string $accept Accept Header (required)
     * @param  string $classification_id classification_id (required)
     * @param  bool $jiwa_stateful Stateful indicator (optional)
     *
     * @throws \Jiwa\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Jiwa\Model\CreditorClassification
     */
    public function creditorClassificationGETRequestClassificationsClassificationIDGet($accept, $classification_id, $jiwa_stateful = null)
    {
        list($response) = $this->creditorClassificationGETRequestClassificationsClassificationIDGetWithHttpInfo($accept, $classification_id, $jiwa_stateful);
        return $response;
    }

    /**
     * Operation creditorClassificationGETRequestClassificationsClassificationIDGetWithHttpInfo
     *
     * Retrieves a creditor classification.
     *
     * @param  string $accept Accept Header (required)
     * @param  string $classification_id (required)
     * @param  bool $jiwa_stateful Stateful indicator (optional)
     *
     * @throws \Jiwa\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Jiwa\Model\CreditorClassification, HTTP status code, HTTP response headers (array of strings)
     */
    public function creditorClassificationGETRequestClassificationsClassificationIDGetWithHttpInfo($accept, $classification_id, $jiwa_stateful = null)
    {
        $returnType = '\Jiwa\Model\CreditorClassification';
        $request = $this->creditorClassificationGETRequestClassificationsClassificationIDGetRequest($accept, $classification_id, $jiwa_stateful);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Jiwa\Model\CreditorClassification',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 403:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Jiwa\Model\CreditorClassification',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 401:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Jiwa\Model\CreditorClassification',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 404:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Jiwa\Model\CreditorClassification',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation creditorClassificationGETRequestClassificationsClassificationIDGetAsync
     *
     * Retrieves a creditor classification.
     *
     * @param  string $accept Accept Header (required)
     * @param  string $classification_id (required)
     * @param  bool $jiwa_stateful Stateful indicator (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function creditorClassificationGETRequestClassificationsClassificationIDGetAsync($accept, $classification_id, $jiwa_stateful = null)
    {
        return $this->creditorClassificationGETRequestClassificationsClassificationIDGetAsyncWithHttpInfo($accept, $classification_id, $jiwa_stateful)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation creditorClassificationGETRequestClassificationsClassificationIDGetAsyncWithHttpInfo
     *
     * Retrieves a creditor classification.
     *
     * @param  string $accept Accept Header (required)
     * @param  string $classification_id (required)
     * @param  bool $jiwa_stateful Stateful indicator (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function creditorClassificationGETRequestClassificationsClassificationIDGetAsyncWithHttpInfo($accept, $classification_id, $jiwa_stateful = null)
    {
        $returnType = '\Jiwa\Model\CreditorClassification';
        $request = $this->creditorClassificationGETRequestClassificationsClassificationIDGetRequest($accept, $classification_id, $jiwa_stateful);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'creditorClassificationGETRequestClassificationsClassificationIDGet'
     *
     * @param  string $accept Accept Header (required)
     * @param  string $classification_id (required)
     * @param  bool $jiwa_stateful Stateful indicator (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function creditorClassificationGETRequestClassificationsClassificationIDGetRequest($accept, $classification_id, $jiwa_stateful = null)
    {
        // verify the required parameter 'accept' is set
        if ($accept === null || (is_array($accept) && count($accept) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $accept when calling creditorClassificationGETRequestClassificationsClassificationIDGet'
            );
        }
        // verify the required parameter 'classification_id' is set
        if ($classification_id === null || (is_array($classification_id) && count($classification_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $classification_id when calling creditorClassificationGETRequestClassificationsClassificationIDGet'
            );
        }

        $resourcePath = '/Creditors/Classifications/{ClassificationID}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // header params
        if ($accept !== null) {
            $headerParams['Accept'] = ObjectSerializer::toHeaderValue($accept);
        }
        // header params
        if ($jiwa_stateful !== null) {
            $headerParams['jiwa-stateful'] = ObjectSerializer::toHeaderValue($jiwa_stateful);
        }

        // path params
        if ($classification_id !== null) {
            $resourcePath = str_replace(
                '{' . 'ClassificationID' . '}',
                ObjectSerializer::toPathValue($classification_id),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json', 'application/xml']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json', 'application/xml'],
                ['application/x-www-form-urlencoded', 'application/json', 'application/xml']
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            
            if($headers['Content-Type'] === 'application/json') {
                // \stdClass has no __toString(), so we should encode it manually
                if ($httpBody instanceof \stdClass) {
                    $httpBody = \GuzzleHttp\json_encode($httpBody);
                }
                // array has no __toString(), so we should encode it manually
                if(is_array($httpBody)) {
                    $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($httpBody));
                }
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\Query::build($formParams);
            }
        }

        // this endpoint requires HTTP basic authentication
        if ($this->config->getUsername() !== null || $this->config->getPassword() !== null) {
            $headers['Authorization'] = 'Basic ' . base64_encode($this->config->getUsername() . ":" . $this->config->getPassword());
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\Query::build($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation creditorClassificationPATCHRequestClassificationsClassificationIDUpdate
     *
     * Updates a creditor classification.
     *
     * @param  string $accept Accept Header (required)
     * @param  string $classification_id classification_id (required)
     * @param  bool $jiwa_stateful Stateful indicator (optional)
     * @param  string $description description (optional)
     * @param  \DateTime $last_saved_date_time last_saved_date_time (optional)
     * @param  bool $is_default is_default (optional)
     * @param  int $terms_days terms_days (optional)
     * @param  string $terms_type terms_type (optional)
     * @param  string $po_workflows_rec_id po_workflows_rec_id (optional)
     * @param  string $po_workflows_name po_workflows_name (optional)
     * @param  string $po_workflows_description po_workflows_description (optional)
     * @param  string $creditor_ledgers creditor_ledgers (optional)
     * @param  \Jiwa\Model\CreditorClassificationPATCHRequest $body body (optional)
     *
     * @throws \Jiwa\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Jiwa\Model\CreditorClassification
     */
    public function creditorClassificationPATCHRequestClassificationsClassificationIDUpdate($accept, $classification_id, $jiwa_stateful = null, $description = null, $last_saved_date_time = null, $is_default = null, $terms_days = null, $terms_type = null, $po_workflows_rec_id = null, $po_workflows_name = null, $po_workflows_description = null, $creditor_ledgers = null, $body = null)
    {
        list($response) = $this->creditorClassificationPATCHRequestClassificationsClassificationIDUpdateWithHttpInfo($accept, $classification_id, $jiwa_stateful, $description, $last_saved_date_time, $is_default, $terms_days, $terms_type, $po_workflows_rec_id, $po_workflows_name, $po_workflows_description, $creditor_ledgers, $body);
        return $response;
    }

    /**
     * Operation creditorClassificationPATCHRequestClassificationsClassificationIDUpdateWithHttpInfo
     *
     * Updates a creditor classification.
     *
     * @param  string $accept Accept Header (required)
     * @param  string $classification_id (required)
     * @param  bool $jiwa_stateful Stateful indicator (optional)
     * @param  string $description (optional)
     * @param  \DateTime $last_saved_date_time (optional)
     * @param  bool $is_default (optional)
     * @param  int $terms_days (optional)
     * @param  string $terms_type (optional)
     * @param  string $po_workflows_rec_id (optional)
     * @param  string $po_workflows_name (optional)
     * @param  string $po_workflows_description (optional)
     * @param  string $creditor_ledgers (optional)
     * @param  \Jiwa\Model\CreditorClassificationPATCHRequest $body (optional)
     *
     * @throws \Jiwa\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Jiwa\Model\CreditorClassification, HTTP status code, HTTP response headers (array of strings)
     */
    public function creditorClassificationPATCHRequestClassificationsClassificationIDUpdateWithHttpInfo($accept, $classification_id, $jiwa_stateful = null, $description = null, $last_saved_date_time = null, $is_default = null, $terms_days = null, $terms_type = null, $po_workflows_rec_id = null, $po_workflows_name = null, $po_workflows_description = null, $creditor_ledgers = null, $body = null)
    {
        $returnType = '\Jiwa\Model\CreditorClassification';
        $request = $this->creditorClassificationPATCHRequestClassificationsClassificationIDUpdateRequest($accept, $classification_id, $jiwa_stateful, $description, $last_saved_date_time, $is_default, $terms_days, $terms_type, $po_workflows_rec_id, $po_workflows_name, $po_workflows_description, $creditor_ledgers, $body);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Jiwa\Model\CreditorClassification',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 401:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Jiwa\Model\CreditorClassification',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 403:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Jiwa\Model\CreditorClassification',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 404:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Jiwa\Model\CreditorClassification',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation creditorClassificationPATCHRequestClassificationsClassificationIDUpdateAsync
     *
     * Updates a creditor classification.
     *
     * @param  string $accept Accept Header (required)
     * @param  string $classification_id (required)
     * @param  bool $jiwa_stateful Stateful indicator (optional)
     * @param  string $description (optional)
     * @param  \DateTime $last_saved_date_time (optional)
     * @param  bool $is_default (optional)
     * @param  int $terms_days (optional)
     * @param  string $terms_type (optional)
     * @param  string $po_workflows_rec_id (optional)
     * @param  string $po_workflows_name (optional)
     * @param  string $po_workflows_description (optional)
     * @param  string $creditor_ledgers (optional)
     * @param  \Jiwa\Model\CreditorClassificationPATCHRequest $body (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function creditorClassificationPATCHRequestClassificationsClassificationIDUpdateAsync($accept, $classification_id, $jiwa_stateful = null, $description = null, $last_saved_date_time = null, $is_default = null, $terms_days = null, $terms_type = null, $po_workflows_rec_id = null, $po_workflows_name = null, $po_workflows_description = null, $creditor_ledgers = null, $body = null)
    {
        return $this->creditorClassificationPATCHRequestClassificationsClassificationIDUpdateAsyncWithHttpInfo($accept, $classification_id, $jiwa_stateful, $description, $last_saved_date_time, $is_default, $terms_days, $terms_type, $po_workflows_rec_id, $po_workflows_name, $po_workflows_description, $creditor_ledgers, $body)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation creditorClassificationPATCHRequestClassificationsClassificationIDUpdateAsyncWithHttpInfo
     *
     * Updates a creditor classification.
     *
     * @param  string $accept Accept Header (required)
     * @param  string $classification_id (required)
     * @param  bool $jiwa_stateful Stateful indicator (optional)
     * @param  string $description (optional)
     * @param  \DateTime $last_saved_date_time (optional)
     * @param  bool $is_default (optional)
     * @param  int $terms_days (optional)
     * @param  string $terms_type (optional)
     * @param  string $po_workflows_rec_id (optional)
     * @param  string $po_workflows_name (optional)
     * @param  string $po_workflows_description (optional)
     * @param  string $creditor_ledgers (optional)
     * @param  \Jiwa\Model\CreditorClassificationPATCHRequest $body (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function creditorClassificationPATCHRequestClassificationsClassificationIDUpdateAsyncWithHttpInfo($accept, $classification_id, $jiwa_stateful = null, $description = null, $last_saved_date_time = null, $is_default = null, $terms_days = null, $terms_type = null, $po_workflows_rec_id = null, $po_workflows_name = null, $po_workflows_description = null, $creditor_ledgers = null, $body = null)
    {
        $returnType = '\Jiwa\Model\CreditorClassification';
        $request = $this->creditorClassificationPATCHRequestClassificationsClassificationIDUpdateRequest($accept, $classification_id, $jiwa_stateful, $description, $last_saved_date_time, $is_default, $terms_days, $terms_type, $po_workflows_rec_id, $po_workflows_name, $po_workflows_description, $creditor_ledgers, $body);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'creditorClassificationPATCHRequestClassificationsClassificationIDUpdate'
     *
     * @param  string $accept Accept Header (required)
     * @param  string $classification_id (required)
     * @param  bool $jiwa_stateful Stateful indicator (optional)
     * @param  string $description (optional)
     * @param  \DateTime $last_saved_date_time (optional)
     * @param  bool $is_default (optional)
     * @param  int $terms_days (optional)
     * @param  string $terms_type (optional)
     * @param  string $po_workflows_rec_id (optional)
     * @param  string $po_workflows_name (optional)
     * @param  string $po_workflows_description (optional)
     * @param  string $creditor_ledgers (optional)
     * @param  \Jiwa\Model\CreditorClassificationPATCHRequest $body (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function creditorClassificationPATCHRequestClassificationsClassificationIDUpdateRequest($accept, $classification_id, $jiwa_stateful = null, $description = null, $last_saved_date_time = null, $is_default = null, $terms_days = null, $terms_type = null, $po_workflows_rec_id = null, $po_workflows_name = null, $po_workflows_description = null, $creditor_ledgers = null, $body = null)
    {
        // verify the required parameter 'accept' is set
        if ($accept === null || (is_array($accept) && count($accept) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $accept when calling creditorClassificationPATCHRequestClassificationsClassificationIDUpdate'
            );
        }
        // verify the required parameter 'classification_id' is set
        if ($classification_id === null || (is_array($classification_id) && count($classification_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $classification_id when calling creditorClassificationPATCHRequestClassificationsClassificationIDUpdate'
            );
        }

        $resourcePath = '/Creditors/Classifications/{ClassificationID}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        if ($description !== null) {
            $queryParams['Description'] = ObjectSerializer::toQueryValue($description);
        }
        // query params
        if ($last_saved_date_time !== null) {
            $queryParams['LastSavedDateTime'] = ObjectSerializer::toQueryValue($last_saved_date_time);
        }
        // query params
        if ($is_default !== null) {
            $queryParams['IsDefault'] = ObjectSerializer::toQueryValue($is_default);
        }
        // query params
        if ($terms_days !== null) {
            $queryParams['TermsDays'] = ObjectSerializer::toQueryValue($terms_days);
        }
        // query params
        if ($terms_type !== null) {
            $queryParams['TermsType'] = ObjectSerializer::toQueryValue($terms_type);
        }
        // query params
        if ($po_workflows_rec_id !== null) {
            $queryParams['PO_Workflows_RecID'] = ObjectSerializer::toQueryValue($po_workflows_rec_id);
        }
        // query params
        if ($po_workflows_name !== null) {
            $queryParams['PO_Workflows_Name'] = ObjectSerializer::toQueryValue($po_workflows_name);
        }
        // query params
        if ($po_workflows_description !== null) {
            $queryParams['PO_Workflows_Description'] = ObjectSerializer::toQueryValue($po_workflows_description);
        }
        // query params
        if ($creditor_ledgers !== null) {
            $queryParams['CreditorLedgers'] = ObjectSerializer::toQueryValue($creditor_ledgers);
        }
        // header params
        if ($accept !== null) {
            $headerParams['Accept'] = ObjectSerializer::toHeaderValue($accept);
        }
        // header params
        if ($jiwa_stateful !== null) {
            $headerParams['jiwa-stateful'] = ObjectSerializer::toHeaderValue($jiwa_stateful);
        }

        // path params
        if ($classification_id !== null) {
            $resourcePath = str_replace(
                '{' . 'ClassificationID' . '}',
                ObjectSerializer::toPathValue($classification_id),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;
        if (isset($body)) {
            $_tempBody = $body;
        }

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json', 'application/xml']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json', 'application/xml'],
                ['application/x-www-form-urlencoded', 'application/json', 'application/xml']
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            
            if($headers['Content-Type'] === 'application/json') {
                // \stdClass has no __toString(), so we should encode it manually
                if ($httpBody instanceof \stdClass) {
                    $httpBody = \GuzzleHttp\json_encode($httpBody);
                }
                // array has no __toString(), so we should encode it manually
                if(is_array($httpBody)) {
                    $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($httpBody));
                }
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\Query::build($formParams);
            }
        }

        // this endpoint requires HTTP basic authentication
        if ($this->config->getUsername() !== null || $this->config->getPassword() !== null) {
            $headers['Authorization'] = 'Basic ' . base64_encode($this->config->getUsername() . ":" . $this->config->getPassword());
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\Query::build($queryParams);
        return new Request(
            'PATCH',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation creditorClassificationPOSTRequestClassificationsPost
     *
     * Creates a creditor classification.
     *
     * @param  string $accept Accept Header (required)
     * @param  bool $jiwa_stateful Stateful indicator (optional)
     * @param  string $description description (optional)
     * @param  bool $is_default is_default (optional)
     * @param  int $terms_days terms_days (optional)
     * @param  string $terms_type terms_type (optional)
     * @param  string $po_workflows_rec_id po_workflows_rec_id (optional)
     * @param  string $po_workflows_name po_workflows_name (optional)
     * @param  string $po_workflows_description po_workflows_description (optional)
     * @param  string $creditor_ledgers creditor_ledgers (optional)
     * @param  \Jiwa\Model\CreditorClassificationPOSTRequest $body body (optional)
     *
     * @throws \Jiwa\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Jiwa\Model\CreditorClassification
     */
    public function creditorClassificationPOSTRequestClassificationsPost($accept, $jiwa_stateful = null, $description = null, $is_default = null, $terms_days = null, $terms_type = null, $po_workflows_rec_id = null, $po_workflows_name = null, $po_workflows_description = null, $creditor_ledgers = null, $body = null)
    {
        list($response) = $this->creditorClassificationPOSTRequestClassificationsPostWithHttpInfo($accept, $jiwa_stateful, $description, $is_default, $terms_days, $terms_type, $po_workflows_rec_id, $po_workflows_name, $po_workflows_description, $creditor_ledgers, $body);
        return $response;
    }

    /**
     * Operation creditorClassificationPOSTRequestClassificationsPostWithHttpInfo
     *
     * Creates a creditor classification.
     *
     * @param  string $accept Accept Header (required)
     * @param  bool $jiwa_stateful Stateful indicator (optional)
     * @param  string $description (optional)
     * @param  bool $is_default (optional)
     * @param  int $terms_days (optional)
     * @param  string $terms_type (optional)
     * @param  string $po_workflows_rec_id (optional)
     * @param  string $po_workflows_name (optional)
     * @param  string $po_workflows_description (optional)
     * @param  string $creditor_ledgers (optional)
     * @param  \Jiwa\Model\CreditorClassificationPOSTRequest $body (optional)
     *
     * @throws \Jiwa\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Jiwa\Model\CreditorClassification, HTTP status code, HTTP response headers (array of strings)
     */
    public function creditorClassificationPOSTRequestClassificationsPostWithHttpInfo($accept, $jiwa_stateful = null, $description = null, $is_default = null, $terms_days = null, $terms_type = null, $po_workflows_rec_id = null, $po_workflows_name = null, $po_workflows_description = null, $creditor_ledgers = null, $body = null)
    {
        $returnType = '\Jiwa\Model\CreditorClassification';
        $request = $this->creditorClassificationPOSTRequestClassificationsPostRequest($accept, $jiwa_stateful, $description, $is_default, $terms_days, $terms_type, $po_workflows_rec_id, $po_workflows_name, $po_workflows_description, $creditor_ledgers, $body);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Jiwa\Model\CreditorClassification',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 401:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Jiwa\Model\CreditorClassification',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 403:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Jiwa\Model\CreditorClassification',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 201:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Jiwa\Model\CreditorClassification',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation creditorClassificationPOSTRequestClassificationsPostAsync
     *
     * Creates a creditor classification.
     *
     * @param  string $accept Accept Header (required)
     * @param  bool $jiwa_stateful Stateful indicator (optional)
     * @param  string $description (optional)
     * @param  bool $is_default (optional)
     * @param  int $terms_days (optional)
     * @param  string $terms_type (optional)
     * @param  string $po_workflows_rec_id (optional)
     * @param  string $po_workflows_name (optional)
     * @param  string $po_workflows_description (optional)
     * @param  string $creditor_ledgers (optional)
     * @param  \Jiwa\Model\CreditorClassificationPOSTRequest $body (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function creditorClassificationPOSTRequestClassificationsPostAsync($accept, $jiwa_stateful = null, $description = null, $is_default = null, $terms_days = null, $terms_type = null, $po_workflows_rec_id = null, $po_workflows_name = null, $po_workflows_description = null, $creditor_ledgers = null, $body = null)
    {
        return $this->creditorClassificationPOSTRequestClassificationsPostAsyncWithHttpInfo($accept, $jiwa_stateful, $description, $is_default, $terms_days, $terms_type, $po_workflows_rec_id, $po_workflows_name, $po_workflows_description, $creditor_ledgers, $body)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation creditorClassificationPOSTRequestClassificationsPostAsyncWithHttpInfo
     *
     * Creates a creditor classification.
     *
     * @param  string $accept Accept Header (required)
     * @param  bool $jiwa_stateful Stateful indicator (optional)
     * @param  string $description (optional)
     * @param  bool $is_default (optional)
     * @param  int $terms_days (optional)
     * @param  string $terms_type (optional)
     * @param  string $po_workflows_rec_id (optional)
     * @param  string $po_workflows_name (optional)
     * @param  string $po_workflows_description (optional)
     * @param  string $creditor_ledgers (optional)
     * @param  \Jiwa\Model\CreditorClassificationPOSTRequest $body (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function creditorClassificationPOSTRequestClassificationsPostAsyncWithHttpInfo($accept, $jiwa_stateful = null, $description = null, $is_default = null, $terms_days = null, $terms_type = null, $po_workflows_rec_id = null, $po_workflows_name = null, $po_workflows_description = null, $creditor_ledgers = null, $body = null)
    {
        $returnType = '\Jiwa\Model\CreditorClassification';
        $request = $this->creditorClassificationPOSTRequestClassificationsPostRequest($accept, $jiwa_stateful, $description, $is_default, $terms_days, $terms_type, $po_workflows_rec_id, $po_workflows_name, $po_workflows_description, $creditor_ledgers, $body);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'creditorClassificationPOSTRequestClassificationsPost'
     *
     * @param  string $accept Accept Header (required)
     * @param  bool $jiwa_stateful Stateful indicator (optional)
     * @param  string $description (optional)
     * @param  bool $is_default (optional)
     * @param  int $terms_days (optional)
     * @param  string $terms_type (optional)
     * @param  string $po_workflows_rec_id (optional)
     * @param  string $po_workflows_name (optional)
     * @param  string $po_workflows_description (optional)
     * @param  string $creditor_ledgers (optional)
     * @param  \Jiwa\Model\CreditorClassificationPOSTRequest $body (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function creditorClassificationPOSTRequestClassificationsPostRequest($accept, $jiwa_stateful = null, $description = null, $is_default = null, $terms_days = null, $terms_type = null, $po_workflows_rec_id = null, $po_workflows_name = null, $po_workflows_description = null, $creditor_ledgers = null, $body = null)
    {
        // verify the required parameter 'accept' is set
        if ($accept === null || (is_array($accept) && count($accept) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $accept when calling creditorClassificationPOSTRequestClassificationsPost'
            );
        }

        $resourcePath = '/Creditors/Classifications';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        if ($description !== null) {
            $queryParams['Description'] = ObjectSerializer::toQueryValue($description);
        }
        // query params
        if ($is_default !== null) {
            $queryParams['IsDefault'] = ObjectSerializer::toQueryValue($is_default);
        }
        // query params
        if ($terms_days !== null) {
            $queryParams['TermsDays'] = ObjectSerializer::toQueryValue($terms_days);
        }
        // query params
        if ($terms_type !== null) {
            $queryParams['TermsType'] = ObjectSerializer::toQueryValue($terms_type);
        }
        // query params
        if ($po_workflows_rec_id !== null) {
            $queryParams['PO_Workflows_RecID'] = ObjectSerializer::toQueryValue($po_workflows_rec_id);
        }
        // query params
        if ($po_workflows_name !== null) {
            $queryParams['PO_Workflows_Name'] = ObjectSerializer::toQueryValue($po_workflows_name);
        }
        // query params
        if ($po_workflows_description !== null) {
            $queryParams['PO_Workflows_Description'] = ObjectSerializer::toQueryValue($po_workflows_description);
        }
        // query params
        if ($creditor_ledgers !== null) {
            $queryParams['CreditorLedgers'] = ObjectSerializer::toQueryValue($creditor_ledgers);
        }
        // header params
        if ($accept !== null) {
            $headerParams['Accept'] = ObjectSerializer::toHeaderValue($accept);
        }
        // header params
        if ($jiwa_stateful !== null) {
            $headerParams['jiwa-stateful'] = ObjectSerializer::toHeaderValue($jiwa_stateful);
        }


        // body params
        $_tempBody = null;
        if (isset($body)) {
            $_tempBody = $body;
        }

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json', 'application/xml']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json', 'application/xml'],
                ['application/x-www-form-urlencoded', 'application/json', 'application/xml']
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            
            if($headers['Content-Type'] === 'application/json') {
                // \stdClass has no __toString(), so we should encode it manually
                if ($httpBody instanceof \stdClass) {
                    $httpBody = \GuzzleHttp\json_encode($httpBody);
                }
                // array has no __toString(), so we should encode it manually
                if(is_array($httpBody)) {
                    $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($httpBody));
                }
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\Query::build($formParams);
            }
        }

        // this endpoint requires HTTP basic authentication
        if ($this->config->getUsername() !== null || $this->config->getPassword() !== null) {
            $headers['Authorization'] = 'Basic ' . base64_encode($this->config->getUsername() . ":" . $this->config->getPassword());
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\Query::build($queryParams);
        return new Request(
            'POST',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation creditorClassificationSAVERequestClassificationsSaveGet
     *
     * Saves a stateful creditor classification.
     *
     * @param  string $accept Accept Header (required)
     * @param  bool $jiwa_stateful Stateful indicator (optional)
     * @param  string $classification_id classification_id (optional)
     *
     * @throws \Jiwa\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Jiwa\Model\CreditorClassification
     */
    public function creditorClassificationSAVERequestClassificationsSaveGet($accept, $jiwa_stateful = null, $classification_id = null)
    {
        list($response) = $this->creditorClassificationSAVERequestClassificationsSaveGetWithHttpInfo($accept, $jiwa_stateful, $classification_id);
        return $response;
    }

    /**
     * Operation creditorClassificationSAVERequestClassificationsSaveGetWithHttpInfo
     *
     * Saves a stateful creditor classification.
     *
     * @param  string $accept Accept Header (required)
     * @param  bool $jiwa_stateful Stateful indicator (optional)
     * @param  string $classification_id (optional)
     *
     * @throws \Jiwa\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Jiwa\Model\CreditorClassification, HTTP status code, HTTP response headers (array of strings)
     */
    public function creditorClassificationSAVERequestClassificationsSaveGetWithHttpInfo($accept, $jiwa_stateful = null, $classification_id = null)
    {
        $returnType = '\Jiwa\Model\CreditorClassification';
        $request = $this->creditorClassificationSAVERequestClassificationsSaveGetRequest($accept, $jiwa_stateful, $classification_id);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Jiwa\Model\CreditorClassification',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 401:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Jiwa\Model\CreditorClassification',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 403:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Jiwa\Model\CreditorClassification',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 404:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Jiwa\Model\CreditorClassification',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation creditorClassificationSAVERequestClassificationsSaveGetAsync
     *
     * Saves a stateful creditor classification.
     *
     * @param  string $accept Accept Header (required)
     * @param  bool $jiwa_stateful Stateful indicator (optional)
     * @param  string $classification_id (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function creditorClassificationSAVERequestClassificationsSaveGetAsync($accept, $jiwa_stateful = null, $classification_id = null)
    {
        return $this->creditorClassificationSAVERequestClassificationsSaveGetAsyncWithHttpInfo($accept, $jiwa_stateful, $classification_id)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation creditorClassificationSAVERequestClassificationsSaveGetAsyncWithHttpInfo
     *
     * Saves a stateful creditor classification.
     *
     * @param  string $accept Accept Header (required)
     * @param  bool $jiwa_stateful Stateful indicator (optional)
     * @param  string $classification_id (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function creditorClassificationSAVERequestClassificationsSaveGetAsyncWithHttpInfo($accept, $jiwa_stateful = null, $classification_id = null)
    {
        $returnType = '\Jiwa\Model\CreditorClassification';
        $request = $this->creditorClassificationSAVERequestClassificationsSaveGetRequest($accept, $jiwa_stateful, $classification_id);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'creditorClassificationSAVERequestClassificationsSaveGet'
     *
     * @param  string $accept Accept Header (required)
     * @param  bool $jiwa_stateful Stateful indicator (optional)
     * @param  string $classification_id (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function creditorClassificationSAVERequestClassificationsSaveGetRequest($accept, $jiwa_stateful = null, $classification_id = null)
    {
        // verify the required parameter 'accept' is set
        if ($accept === null || (is_array($accept) && count($accept) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $accept when calling creditorClassificationSAVERequestClassificationsSaveGet'
            );
        }

        $resourcePath = '/Creditors/Classifications/Save';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        if ($classification_id !== null) {
            $queryParams['ClassificationID'] = ObjectSerializer::toQueryValue($classification_id);
        }
        // header params
        if ($accept !== null) {
            $headerParams['Accept'] = ObjectSerializer::toHeaderValue($accept);
        }
        // header params
        if ($jiwa_stateful !== null) {
            $headerParams['jiwa-stateful'] = ObjectSerializer::toHeaderValue($jiwa_stateful);
        }


        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json', 'application/xml']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json', 'application/xml'],
                ['application/x-www-form-urlencoded', 'application/json', 'application/xml']
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            
            if($headers['Content-Type'] === 'application/json') {
                // \stdClass has no __toString(), so we should encode it manually
                if ($httpBody instanceof \stdClass) {
                    $httpBody = \GuzzleHttp\json_encode($httpBody);
                }
                // array has no __toString(), so we should encode it manually
                if(is_array($httpBody)) {
                    $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($httpBody));
                }
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\Query::build($formParams);
            }
        }

        // this endpoint requires HTTP basic authentication
        if ($this->config->getUsername() !== null || $this->config->getPassword() !== null) {
            $headers['Authorization'] = 'Basic ' . base64_encode($this->config->getUsername() . ":" . $this->config->getPassword());
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\Query::build($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation creditorDELETERequestCreditorIDDelete
     *
     * Deletes a creditor.
     *
     * @param  string $accept Accept Header (required)
     * @param  string $creditor_id creditor_id (required)
     * @param  bool $jiwa_stateful Stateful indicator (optional)
     *
     * @throws \Jiwa\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Jiwa\Model\Object
     */
    public function creditorDELETERequestCreditorIDDelete($accept, $creditor_id, $jiwa_stateful = null)
    {
        list($response) = $this->creditorDELETERequestCreditorIDDeleteWithHttpInfo($accept, $creditor_id, $jiwa_stateful);
        return $response;
    }

    /**
     * Operation creditorDELETERequestCreditorIDDeleteWithHttpInfo
     *
     * Deletes a creditor.
     *
     * @param  string $accept Accept Header (required)
     * @param  string $creditor_id (required)
     * @param  bool $jiwa_stateful Stateful indicator (optional)
     *
     * @throws \Jiwa\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Jiwa\Model\Object, HTTP status code, HTTP response headers (array of strings)
     */
    public function creditorDELETERequestCreditorIDDeleteWithHttpInfo($accept, $creditor_id, $jiwa_stateful = null)
    {
        $returnType = '\Jiwa\Model\Object';
        $request = $this->creditorDELETERequestCreditorIDDeleteRequest($accept, $creditor_id, $jiwa_stateful);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Jiwa\Model\Object',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 404:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Jiwa\Model\Object',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 204:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Jiwa\Model\Object',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 401:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Jiwa\Model\Object',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 403:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Jiwa\Model\Object',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation creditorDELETERequestCreditorIDDeleteAsync
     *
     * Deletes a creditor.
     *
     * @param  string $accept Accept Header (required)
     * @param  string $creditor_id (required)
     * @param  bool $jiwa_stateful Stateful indicator (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function creditorDELETERequestCreditorIDDeleteAsync($accept, $creditor_id, $jiwa_stateful = null)
    {
        return $this->creditorDELETERequestCreditorIDDeleteAsyncWithHttpInfo($accept, $creditor_id, $jiwa_stateful)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation creditorDELETERequestCreditorIDDeleteAsyncWithHttpInfo
     *
     * Deletes a creditor.
     *
     * @param  string $accept Accept Header (required)
     * @param  string $creditor_id (required)
     * @param  bool $jiwa_stateful Stateful indicator (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function creditorDELETERequestCreditorIDDeleteAsyncWithHttpInfo($accept, $creditor_id, $jiwa_stateful = null)
    {
        $returnType = '\Jiwa\Model\Object';
        $request = $this->creditorDELETERequestCreditorIDDeleteRequest($accept, $creditor_id, $jiwa_stateful);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'creditorDELETERequestCreditorIDDelete'
     *
     * @param  string $accept Accept Header (required)
     * @param  string $creditor_id (required)
     * @param  bool $jiwa_stateful Stateful indicator (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function creditorDELETERequestCreditorIDDeleteRequest($accept, $creditor_id, $jiwa_stateful = null)
    {
        // verify the required parameter 'accept' is set
        if ($accept === null || (is_array($accept) && count($accept) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $accept when calling creditorDELETERequestCreditorIDDelete'
            );
        }
        // verify the required parameter 'creditor_id' is set
        if ($creditor_id === null || (is_array($creditor_id) && count($creditor_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $creditor_id when calling creditorDELETERequestCreditorIDDelete'
            );
        }

        $resourcePath = '/Creditors/{CreditorID}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // header params
        if ($accept !== null) {
            $headerParams['Accept'] = ObjectSerializer::toHeaderValue($accept);
        }
        // header params
        if ($jiwa_stateful !== null) {
            $headerParams['jiwa-stateful'] = ObjectSerializer::toHeaderValue($jiwa_stateful);
        }

        // path params
        if ($creditor_id !== null) {
            $resourcePath = str_replace(
                '{' . 'CreditorID' . '}',
                ObjectSerializer::toPathValue($creditor_id),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json', 'application/xml']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json', 'application/xml'],
                ['application/x-www-form-urlencoded', 'application/json', 'application/xml']
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            
            if($headers['Content-Type'] === 'application/json') {
                // \stdClass has no __toString(), so we should encode it manually
                if ($httpBody instanceof \stdClass) {
                    $httpBody = \GuzzleHttp\json_encode($httpBody);
                }
                // array has no __toString(), so we should encode it manually
                if(is_array($httpBody)) {
                    $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($httpBody));
                }
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\Query::build($formParams);
            }
        }

        // this endpoint requires HTTP basic authentication
        if ($this->config->getUsername() !== null || $this->config->getPassword() !== null) {
            $headers['Authorization'] = 'Basic ' . base64_encode($this->config->getUsername() . ":" . $this->config->getPassword());
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\Query::build($queryParams);
        return new Request(
            'DELETE',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation creditorGETRequestCreditorIDGet
     *
     * Retrieves a creditor.
     *
     * @param  string $accept Accept Header (required)
     * @param  string $creditor_id creditor_id (required)
     * @param  bool $jiwa_stateful Stateful indicator (optional)
     *
     * @throws \Jiwa\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Jiwa\Model\Creditor
     */
    public function creditorGETRequestCreditorIDGet($accept, $creditor_id, $jiwa_stateful = null)
    {
        list($response) = $this->creditorGETRequestCreditorIDGetWithHttpInfo($accept, $creditor_id, $jiwa_stateful);
        return $response;
    }

    /**
     * Operation creditorGETRequestCreditorIDGetWithHttpInfo
     *
     * Retrieves a creditor.
     *
     * @param  string $accept Accept Header (required)
     * @param  string $creditor_id (required)
     * @param  bool $jiwa_stateful Stateful indicator (optional)
     *
     * @throws \Jiwa\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Jiwa\Model\Creditor, HTTP status code, HTTP response headers (array of strings)
     */
    public function creditorGETRequestCreditorIDGetWithHttpInfo($accept, $creditor_id, $jiwa_stateful = null)
    {
        $returnType = '\Jiwa\Model\Creditor';
        $request = $this->creditorGETRequestCreditorIDGetRequest($accept, $creditor_id, $jiwa_stateful);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Jiwa\Model\Creditor',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 404:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Jiwa\Model\Creditor',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 401:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Jiwa\Model\Creditor',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 403:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Jiwa\Model\Creditor',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation creditorGETRequestCreditorIDGetAsync
     *
     * Retrieves a creditor.
     *
     * @param  string $accept Accept Header (required)
     * @param  string $creditor_id (required)
     * @param  bool $jiwa_stateful Stateful indicator (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function creditorGETRequestCreditorIDGetAsync($accept, $creditor_id, $jiwa_stateful = null)
    {
        return $this->creditorGETRequestCreditorIDGetAsyncWithHttpInfo($accept, $creditor_id, $jiwa_stateful)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation creditorGETRequestCreditorIDGetAsyncWithHttpInfo
     *
     * Retrieves a creditor.
     *
     * @param  string $accept Accept Header (required)
     * @param  string $creditor_id (required)
     * @param  bool $jiwa_stateful Stateful indicator (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function creditorGETRequestCreditorIDGetAsyncWithHttpInfo($accept, $creditor_id, $jiwa_stateful = null)
    {
        $returnType = '\Jiwa\Model\Creditor';
        $request = $this->creditorGETRequestCreditorIDGetRequest($accept, $creditor_id, $jiwa_stateful);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'creditorGETRequestCreditorIDGet'
     *
     * @param  string $accept Accept Header (required)
     * @param  string $creditor_id (required)
     * @param  bool $jiwa_stateful Stateful indicator (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function creditorGETRequestCreditorIDGetRequest($accept, $creditor_id, $jiwa_stateful = null)
    {
        // verify the required parameter 'accept' is set
        if ($accept === null || (is_array($accept) && count($accept) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $accept when calling creditorGETRequestCreditorIDGet'
            );
        }
        // verify the required parameter 'creditor_id' is set
        if ($creditor_id === null || (is_array($creditor_id) && count($creditor_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $creditor_id when calling creditorGETRequestCreditorIDGet'
            );
        }

        $resourcePath = '/Creditors/{CreditorID}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // header params
        if ($accept !== null) {
            $headerParams['Accept'] = ObjectSerializer::toHeaderValue($accept);
        }
        // header params
        if ($jiwa_stateful !== null) {
            $headerParams['jiwa-stateful'] = ObjectSerializer::toHeaderValue($jiwa_stateful);
        }

        // path params
        if ($creditor_id !== null) {
            $resourcePath = str_replace(
                '{' . 'CreditorID' . '}',
                ObjectSerializer::toPathValue($creditor_id),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json', 'application/xml']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json', 'application/xml'],
                ['application/x-www-form-urlencoded', 'application/json', 'application/xml']
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            
            if($headers['Content-Type'] === 'application/json') {
                // \stdClass has no __toString(), so we should encode it manually
                if ($httpBody instanceof \stdClass) {
                    $httpBody = \GuzzleHttp\json_encode($httpBody);
                }
                // array has no __toString(), so we should encode it manually
                if(is_array($httpBody)) {
                    $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($httpBody));
                }
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\Query::build($formParams);
            }
        }

        // this endpoint requires HTTP basic authentication
        if ($this->config->getUsername() !== null || $this->config->getPassword() !== null) {
            $headers['Authorization'] = 'Basic ' . base64_encode($this->config->getUsername() . ":" . $this->config->getPassword());
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\Query::build($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation creditorPATCHRequestCreditorIDUpdate
     *
     * Updates a creditor.
     *
     * @param  string $accept Accept Header (required)
     * @param  string $creditor_id creditor_id (required)
     * @param  bool $jiwa_stateful Stateful indicator (optional)
     * @param  string $account_no account_no (optional)
     * @param  string $alt_account_no alt_account_no (optional)
     * @param  string $name name (optional)
     * @param  string $warehouse_addresses warehouse_addresses (optional)
     * @param  \DateTime $last_saved_date_time last_saved_date_time (optional)
     * @param  \Jiwa\Model\CreditorPATCHRequest $body body (optional)
     *
     * @throws \Jiwa\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Jiwa\Model\Creditor
     */
    public function creditorPATCHRequestCreditorIDUpdate($accept, $creditor_id, $jiwa_stateful = null, $account_no = null, $alt_account_no = null, $name = null, $warehouse_addresses = null, $last_saved_date_time = null, $body = null)
    {
        list($response) = $this->creditorPATCHRequestCreditorIDUpdateWithHttpInfo($accept, $creditor_id, $jiwa_stateful, $account_no, $alt_account_no, $name, $warehouse_addresses, $last_saved_date_time, $body);
        return $response;
    }

    /**
     * Operation creditorPATCHRequestCreditorIDUpdateWithHttpInfo
     *
     * Updates a creditor.
     *
     * @param  string $accept Accept Header (required)
     * @param  string $creditor_id (required)
     * @param  bool $jiwa_stateful Stateful indicator (optional)
     * @param  string $account_no (optional)
     * @param  string $alt_account_no (optional)
     * @param  string $name (optional)
     * @param  string $warehouse_addresses (optional)
     * @param  \DateTime $last_saved_date_time (optional)
     * @param  \Jiwa\Model\CreditorPATCHRequest $body (optional)
     *
     * @throws \Jiwa\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Jiwa\Model\Creditor, HTTP status code, HTTP response headers (array of strings)
     */
    public function creditorPATCHRequestCreditorIDUpdateWithHttpInfo($accept, $creditor_id, $jiwa_stateful = null, $account_no = null, $alt_account_no = null, $name = null, $warehouse_addresses = null, $last_saved_date_time = null, $body = null)
    {
        $returnType = '\Jiwa\Model\Creditor';
        $request = $this->creditorPATCHRequestCreditorIDUpdateRequest($accept, $creditor_id, $jiwa_stateful, $account_no, $alt_account_no, $name, $warehouse_addresses, $last_saved_date_time, $body);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Jiwa\Model\Creditor',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 401:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Jiwa\Model\Creditor',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 404:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Jiwa\Model\Creditor',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 403:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Jiwa\Model\Creditor',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation creditorPATCHRequestCreditorIDUpdateAsync
     *
     * Updates a creditor.
     *
     * @param  string $accept Accept Header (required)
     * @param  string $creditor_id (required)
     * @param  bool $jiwa_stateful Stateful indicator (optional)
     * @param  string $account_no (optional)
     * @param  string $alt_account_no (optional)
     * @param  string $name (optional)
     * @param  string $warehouse_addresses (optional)
     * @param  \DateTime $last_saved_date_time (optional)
     * @param  \Jiwa\Model\CreditorPATCHRequest $body (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function creditorPATCHRequestCreditorIDUpdateAsync($accept, $creditor_id, $jiwa_stateful = null, $account_no = null, $alt_account_no = null, $name = null, $warehouse_addresses = null, $last_saved_date_time = null, $body = null)
    {
        return $this->creditorPATCHRequestCreditorIDUpdateAsyncWithHttpInfo($accept, $creditor_id, $jiwa_stateful, $account_no, $alt_account_no, $name, $warehouse_addresses, $last_saved_date_time, $body)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation creditorPATCHRequestCreditorIDUpdateAsyncWithHttpInfo
     *
     * Updates a creditor.
     *
     * @param  string $accept Accept Header (required)
     * @param  string $creditor_id (required)
     * @param  bool $jiwa_stateful Stateful indicator (optional)
     * @param  string $account_no (optional)
     * @param  string $alt_account_no (optional)
     * @param  string $name (optional)
     * @param  string $warehouse_addresses (optional)
     * @param  \DateTime $last_saved_date_time (optional)
     * @param  \Jiwa\Model\CreditorPATCHRequest $body (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function creditorPATCHRequestCreditorIDUpdateAsyncWithHttpInfo($accept, $creditor_id, $jiwa_stateful = null, $account_no = null, $alt_account_no = null, $name = null, $warehouse_addresses = null, $last_saved_date_time = null, $body = null)
    {
        $returnType = '\Jiwa\Model\Creditor';
        $request = $this->creditorPATCHRequestCreditorIDUpdateRequest($accept, $creditor_id, $jiwa_stateful, $account_no, $alt_account_no, $name, $warehouse_addresses, $last_saved_date_time, $body);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'creditorPATCHRequestCreditorIDUpdate'
     *
     * @param  string $accept Accept Header (required)
     * @param  string $creditor_id (required)
     * @param  bool $jiwa_stateful Stateful indicator (optional)
     * @param  string $account_no (optional)
     * @param  string $alt_account_no (optional)
     * @param  string $name (optional)
     * @param  string $warehouse_addresses (optional)
     * @param  \DateTime $last_saved_date_time (optional)
     * @param  \Jiwa\Model\CreditorPATCHRequest $body (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function creditorPATCHRequestCreditorIDUpdateRequest($accept, $creditor_id, $jiwa_stateful = null, $account_no = null, $alt_account_no = null, $name = null, $warehouse_addresses = null, $last_saved_date_time = null, $body = null)
    {
        // verify the required parameter 'accept' is set
        if ($accept === null || (is_array($accept) && count($accept) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $accept when calling creditorPATCHRequestCreditorIDUpdate'
            );
        }
        // verify the required parameter 'creditor_id' is set
        if ($creditor_id === null || (is_array($creditor_id) && count($creditor_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $creditor_id when calling creditorPATCHRequestCreditorIDUpdate'
            );
        }

        $resourcePath = '/Creditors/{CreditorID}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        if ($account_no !== null) {
            $queryParams['AccountNo'] = ObjectSerializer::toQueryValue($account_no);
        }
        // query params
        if ($alt_account_no !== null) {
            $queryParams['AltAccountNo'] = ObjectSerializer::toQueryValue($alt_account_no);
        }
        // query params
        if ($name !== null) {
            $queryParams['Name'] = ObjectSerializer::toQueryValue($name);
        }
        // query params
        if ($warehouse_addresses !== null) {
            $queryParams['WarehouseAddresses'] = ObjectSerializer::toQueryValue($warehouse_addresses);
        }
        // query params
        if ($last_saved_date_time !== null) {
            $queryParams['LastSavedDateTime'] = ObjectSerializer::toQueryValue($last_saved_date_time);
        }
        // header params
        if ($accept !== null) {
            $headerParams['Accept'] = ObjectSerializer::toHeaderValue($accept);
        }
        // header params
        if ($jiwa_stateful !== null) {
            $headerParams['jiwa-stateful'] = ObjectSerializer::toHeaderValue($jiwa_stateful);
        }

        // path params
        if ($creditor_id !== null) {
            $resourcePath = str_replace(
                '{' . 'CreditorID' . '}',
                ObjectSerializer::toPathValue($creditor_id),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;
        if (isset($body)) {
            $_tempBody = $body;
        }

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json', 'application/xml']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json', 'application/xml'],
                ['application/x-www-form-urlencoded', 'application/json', 'application/xml']
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            
            if($headers['Content-Type'] === 'application/json') {
                // \stdClass has no __toString(), so we should encode it manually
                if ($httpBody instanceof \stdClass) {
                    $httpBody = \GuzzleHttp\json_encode($httpBody);
                }
                // array has no __toString(), so we should encode it manually
                if(is_array($httpBody)) {
                    $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($httpBody));
                }
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\Query::build($formParams);
            }
        }

        // this endpoint requires HTTP basic authentication
        if ($this->config->getUsername() !== null || $this->config->getPassword() !== null) {
            $headers['Authorization'] = 'Basic ' . base64_encode($this->config->getUsername() . ":" . $this->config->getPassword());
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\Query::build($queryParams);
        return new Request(
            'PATCH',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation creditorPOSTRequestPost
     *
     * Creates a creditor.
     *
     * @param  string $accept Accept Header (required)
     * @param  bool $jiwa_stateful Stateful indicator (optional)
     * @param  string $account_no account_no (optional)
     * @param  string $alt_account_no alt_account_no (optional)
     * @param  string $name name (optional)
     * @param  string $warehouse_addresses warehouse_addresses (optional)
     * @param  \Jiwa\Model\CreditorPOSTRequest $body body (optional)
     *
     * @throws \Jiwa\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Jiwa\Model\Creditor
     */
    public function creditorPOSTRequestPost($accept, $jiwa_stateful = null, $account_no = null, $alt_account_no = null, $name = null, $warehouse_addresses = null, $body = null)
    {
        list($response) = $this->creditorPOSTRequestPostWithHttpInfo($accept, $jiwa_stateful, $account_no, $alt_account_no, $name, $warehouse_addresses, $body);
        return $response;
    }

    /**
     * Operation creditorPOSTRequestPostWithHttpInfo
     *
     * Creates a creditor.
     *
     * @param  string $accept Accept Header (required)
     * @param  bool $jiwa_stateful Stateful indicator (optional)
     * @param  string $account_no (optional)
     * @param  string $alt_account_no (optional)
     * @param  string $name (optional)
     * @param  string $warehouse_addresses (optional)
     * @param  \Jiwa\Model\CreditorPOSTRequest $body (optional)
     *
     * @throws \Jiwa\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Jiwa\Model\Creditor, HTTP status code, HTTP response headers (array of strings)
     */
    public function creditorPOSTRequestPostWithHttpInfo($accept, $jiwa_stateful = null, $account_no = null, $alt_account_no = null, $name = null, $warehouse_addresses = null, $body = null)
    {
        $returnType = '\Jiwa\Model\Creditor';
        $request = $this->creditorPOSTRequestPostRequest($accept, $jiwa_stateful, $account_no, $alt_account_no, $name, $warehouse_addresses, $body);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Jiwa\Model\Creditor',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 401:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Jiwa\Model\Creditor',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 403:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Jiwa\Model\Creditor',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 201:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Jiwa\Model\Creditor',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation creditorPOSTRequestPostAsync
     *
     * Creates a creditor.
     *
     * @param  string $accept Accept Header (required)
     * @param  bool $jiwa_stateful Stateful indicator (optional)
     * @param  string $account_no (optional)
     * @param  string $alt_account_no (optional)
     * @param  string $name (optional)
     * @param  string $warehouse_addresses (optional)
     * @param  \Jiwa\Model\CreditorPOSTRequest $body (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function creditorPOSTRequestPostAsync($accept, $jiwa_stateful = null, $account_no = null, $alt_account_no = null, $name = null, $warehouse_addresses = null, $body = null)
    {
        return $this->creditorPOSTRequestPostAsyncWithHttpInfo($accept, $jiwa_stateful, $account_no, $alt_account_no, $name, $warehouse_addresses, $body)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation creditorPOSTRequestPostAsyncWithHttpInfo
     *
     * Creates a creditor.
     *
     * @param  string $accept Accept Header (required)
     * @param  bool $jiwa_stateful Stateful indicator (optional)
     * @param  string $account_no (optional)
     * @param  string $alt_account_no (optional)
     * @param  string $name (optional)
     * @param  string $warehouse_addresses (optional)
     * @param  \Jiwa\Model\CreditorPOSTRequest $body (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function creditorPOSTRequestPostAsyncWithHttpInfo($accept, $jiwa_stateful = null, $account_no = null, $alt_account_no = null, $name = null, $warehouse_addresses = null, $body = null)
    {
        $returnType = '\Jiwa\Model\Creditor';
        $request = $this->creditorPOSTRequestPostRequest($accept, $jiwa_stateful, $account_no, $alt_account_no, $name, $warehouse_addresses, $body);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'creditorPOSTRequestPost'
     *
     * @param  string $accept Accept Header (required)
     * @param  bool $jiwa_stateful Stateful indicator (optional)
     * @param  string $account_no (optional)
     * @param  string $alt_account_no (optional)
     * @param  string $name (optional)
     * @param  string $warehouse_addresses (optional)
     * @param  \Jiwa\Model\CreditorPOSTRequest $body (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function creditorPOSTRequestPostRequest($accept, $jiwa_stateful = null, $account_no = null, $alt_account_no = null, $name = null, $warehouse_addresses = null, $body = null)
    {
        // verify the required parameter 'accept' is set
        if ($accept === null || (is_array($accept) && count($accept) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $accept when calling creditorPOSTRequestPost'
            );
        }

        $resourcePath = '/Creditors';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        if ($account_no !== null) {
            $queryParams['AccountNo'] = ObjectSerializer::toQueryValue($account_no);
        }
        // query params
        if ($alt_account_no !== null) {
            $queryParams['AltAccountNo'] = ObjectSerializer::toQueryValue($alt_account_no);
        }
        // query params
        if ($name !== null) {
            $queryParams['Name'] = ObjectSerializer::toQueryValue($name);
        }
        // query params
        if ($warehouse_addresses !== null) {
            $queryParams['WarehouseAddresses'] = ObjectSerializer::toQueryValue($warehouse_addresses);
        }
        // header params
        if ($accept !== null) {
            $headerParams['Accept'] = ObjectSerializer::toHeaderValue($accept);
        }
        // header params
        if ($jiwa_stateful !== null) {
            $headerParams['jiwa-stateful'] = ObjectSerializer::toHeaderValue($jiwa_stateful);
        }


        // body params
        $_tempBody = null;
        if (isset($body)) {
            $_tempBody = $body;
        }

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json', 'application/xml']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json', 'application/xml'],
                ['application/x-www-form-urlencoded', 'application/json', 'application/xml']
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            
            if($headers['Content-Type'] === 'application/json') {
                // \stdClass has no __toString(), so we should encode it manually
                if ($httpBody instanceof \stdClass) {
                    $httpBody = \GuzzleHttp\json_encode($httpBody);
                }
                // array has no __toString(), so we should encode it manually
                if(is_array($httpBody)) {
                    $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($httpBody));
                }
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\Query::build($formParams);
            }
        }

        // this endpoint requires HTTP basic authentication
        if ($this->config->getUsername() !== null || $this->config->getPassword() !== null) {
            $headers['Authorization'] = 'Basic ' . base64_encode($this->config->getUsername() . ":" . $this->config->getPassword());
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\Query::build($queryParams);
        return new Request(
            'POST',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation creditorSAVERequestSaveGet
     *
     * Saves a stateful creditor.
     *
     * @param  string $accept Accept Header (required)
     * @param  bool $jiwa_stateful Stateful indicator (optional)
     * @param  string $creditor_id creditor_id (optional)
     *
     * @throws \Jiwa\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Jiwa\Model\Creditor
     */
    public function creditorSAVERequestSaveGet($accept, $jiwa_stateful = null, $creditor_id = null)
    {
        list($response) = $this->creditorSAVERequestSaveGetWithHttpInfo($accept, $jiwa_stateful, $creditor_id);
        return $response;
    }

    /**
     * Operation creditorSAVERequestSaveGetWithHttpInfo
     *
     * Saves a stateful creditor.
     *
     * @param  string $accept Accept Header (required)
     * @param  bool $jiwa_stateful Stateful indicator (optional)
     * @param  string $creditor_id (optional)
     *
     * @throws \Jiwa\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Jiwa\Model\Creditor, HTTP status code, HTTP response headers (array of strings)
     */
    public function creditorSAVERequestSaveGetWithHttpInfo($accept, $jiwa_stateful = null, $creditor_id = null)
    {
        $returnType = '\Jiwa\Model\Creditor';
        $request = $this->creditorSAVERequestSaveGetRequest($accept, $jiwa_stateful, $creditor_id);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Jiwa\Model\Creditor',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 404:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Jiwa\Model\Creditor',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 401:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Jiwa\Model\Creditor',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 403:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Jiwa\Model\Creditor',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation creditorSAVERequestSaveGetAsync
     *
     * Saves a stateful creditor.
     *
     * @param  string $accept Accept Header (required)
     * @param  bool $jiwa_stateful Stateful indicator (optional)
     * @param  string $creditor_id (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function creditorSAVERequestSaveGetAsync($accept, $jiwa_stateful = null, $creditor_id = null)
    {
        return $this->creditorSAVERequestSaveGetAsyncWithHttpInfo($accept, $jiwa_stateful, $creditor_id)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation creditorSAVERequestSaveGetAsyncWithHttpInfo
     *
     * Saves a stateful creditor.
     *
     * @param  string $accept Accept Header (required)
     * @param  bool $jiwa_stateful Stateful indicator (optional)
     * @param  string $creditor_id (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function creditorSAVERequestSaveGetAsyncWithHttpInfo($accept, $jiwa_stateful = null, $creditor_id = null)
    {
        $returnType = '\Jiwa\Model\Creditor';
        $request = $this->creditorSAVERequestSaveGetRequest($accept, $jiwa_stateful, $creditor_id);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'creditorSAVERequestSaveGet'
     *
     * @param  string $accept Accept Header (required)
     * @param  bool $jiwa_stateful Stateful indicator (optional)
     * @param  string $creditor_id (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function creditorSAVERequestSaveGetRequest($accept, $jiwa_stateful = null, $creditor_id = null)
    {
        // verify the required parameter 'accept' is set
        if ($accept === null || (is_array($accept) && count($accept) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $accept when calling creditorSAVERequestSaveGet'
            );
        }

        $resourcePath = '/Creditors/Save';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        if ($creditor_id !== null) {
            $queryParams['CreditorID'] = ObjectSerializer::toQueryValue($creditor_id);
        }
        // header params
        if ($accept !== null) {
            $headerParams['Accept'] = ObjectSerializer::toHeaderValue($accept);
        }
        // header params
        if ($jiwa_stateful !== null) {
            $headerParams['jiwa-stateful'] = ObjectSerializer::toHeaderValue($jiwa_stateful);
        }


        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json', 'application/xml']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json', 'application/xml'],
                ['application/x-www-form-urlencoded', 'application/json', 'application/xml']
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            
            if($headers['Content-Type'] === 'application/json') {
                // \stdClass has no __toString(), so we should encode it manually
                if ($httpBody instanceof \stdClass) {
                    $httpBody = \GuzzleHttp\json_encode($httpBody);
                }
                // array has no __toString(), so we should encode it manually
                if(is_array($httpBody)) {
                    $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($httpBody));
                }
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\Query::build($formParams);
            }
        }

        // this endpoint requires HTTP basic authentication
        if ($this->config->getUsername() !== null || $this->config->getPassword() !== null) {
            $headers['Authorization'] = 'Basic ' . base64_encode($this->config->getUsername() . ":" . $this->config->getPassword());
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\Query::build($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation creditorWarehouseAddressDELETERequestCreditorIDWarehouseAddressWarehouseAddressIDDelete
     *
     * Deletes a warehouse address from a creditor.
     *
     * @param  string $accept Accept Header (required)
     * @param  string $creditor_id creditor_id (required)
     * @param  string $warehouse_address_id warehouse_address_id (required)
     * @param  bool $jiwa_stateful Stateful indicator (optional)
     * @param  string $description description (optional)
     * @param  string $address1 address1 (optional)
     * @param  string $address2 address2 (optional)
     * @param  string $address3 address3 (optional)
     * @param  string $address4 address4 (optional)
     * @param  string $postcode postcode (optional)
     * @param  string $country country (optional)
     * @param  string $notes notes (optional)
     * @param  string $courier_details courier_details (optional)
     * @param  int $default_delivery_days default_delivery_days (optional)
     * @param  bool $is_default is_default (optional)
     *
     * @throws \Jiwa\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Jiwa\Model\Object
     */
    public function creditorWarehouseAddressDELETERequestCreditorIDWarehouseAddressWarehouseAddressIDDelete($accept, $creditor_id, $warehouse_address_id, $jiwa_stateful = null, $description = null, $address1 = null, $address2 = null, $address3 = null, $address4 = null, $postcode = null, $country = null, $notes = null, $courier_details = null, $default_delivery_days = null, $is_default = null)
    {
        list($response) = $this->creditorWarehouseAddressDELETERequestCreditorIDWarehouseAddressWarehouseAddressIDDeleteWithHttpInfo($accept, $creditor_id, $warehouse_address_id, $jiwa_stateful, $description, $address1, $address2, $address3, $address4, $postcode, $country, $notes, $courier_details, $default_delivery_days, $is_default);
        return $response;
    }

    /**
     * Operation creditorWarehouseAddressDELETERequestCreditorIDWarehouseAddressWarehouseAddressIDDeleteWithHttpInfo
     *
     * Deletes a warehouse address from a creditor.
     *
     * @param  string $accept Accept Header (required)
     * @param  string $creditor_id (required)
     * @param  string $warehouse_address_id (required)
     * @param  bool $jiwa_stateful Stateful indicator (optional)
     * @param  string $description (optional)
     * @param  string $address1 (optional)
     * @param  string $address2 (optional)
     * @param  string $address3 (optional)
     * @param  string $address4 (optional)
     * @param  string $postcode (optional)
     * @param  string $country (optional)
     * @param  string $notes (optional)
     * @param  string $courier_details (optional)
     * @param  int $default_delivery_days (optional)
     * @param  bool $is_default (optional)
     *
     * @throws \Jiwa\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Jiwa\Model\Object, HTTP status code, HTTP response headers (array of strings)
     */
    public function creditorWarehouseAddressDELETERequestCreditorIDWarehouseAddressWarehouseAddressIDDeleteWithHttpInfo($accept, $creditor_id, $warehouse_address_id, $jiwa_stateful = null, $description = null, $address1 = null, $address2 = null, $address3 = null, $address4 = null, $postcode = null, $country = null, $notes = null, $courier_details = null, $default_delivery_days = null, $is_default = null)
    {
        $returnType = '\Jiwa\Model\Object';
        $request = $this->creditorWarehouseAddressDELETERequestCreditorIDWarehouseAddressWarehouseAddressIDDeleteRequest($accept, $creditor_id, $warehouse_address_id, $jiwa_stateful, $description, $address1, $address2, $address3, $address4, $postcode, $country, $notes, $courier_details, $default_delivery_days, $is_default);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Jiwa\Model\Object',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 401:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Jiwa\Model\Object',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 403:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Jiwa\Model\Object',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 204:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Jiwa\Model\Object',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 404:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Jiwa\Model\Object',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation creditorWarehouseAddressDELETERequestCreditorIDWarehouseAddressWarehouseAddressIDDeleteAsync
     *
     * Deletes a warehouse address from a creditor.
     *
     * @param  string $accept Accept Header (required)
     * @param  string $creditor_id (required)
     * @param  string $warehouse_address_id (required)
     * @param  bool $jiwa_stateful Stateful indicator (optional)
     * @param  string $description (optional)
     * @param  string $address1 (optional)
     * @param  string $address2 (optional)
     * @param  string $address3 (optional)
     * @param  string $address4 (optional)
     * @param  string $postcode (optional)
     * @param  string $country (optional)
     * @param  string $notes (optional)
     * @param  string $courier_details (optional)
     * @param  int $default_delivery_days (optional)
     * @param  bool $is_default (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function creditorWarehouseAddressDELETERequestCreditorIDWarehouseAddressWarehouseAddressIDDeleteAsync($accept, $creditor_id, $warehouse_address_id, $jiwa_stateful = null, $description = null, $address1 = null, $address2 = null, $address3 = null, $address4 = null, $postcode = null, $country = null, $notes = null, $courier_details = null, $default_delivery_days = null, $is_default = null)
    {
        return $this->creditorWarehouseAddressDELETERequestCreditorIDWarehouseAddressWarehouseAddressIDDeleteAsyncWithHttpInfo($accept, $creditor_id, $warehouse_address_id, $jiwa_stateful, $description, $address1, $address2, $address3, $address4, $postcode, $country, $notes, $courier_details, $default_delivery_days, $is_default)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation creditorWarehouseAddressDELETERequestCreditorIDWarehouseAddressWarehouseAddressIDDeleteAsyncWithHttpInfo
     *
     * Deletes a warehouse address from a creditor.
     *
     * @param  string $accept Accept Header (required)
     * @param  string $creditor_id (required)
     * @param  string $warehouse_address_id (required)
     * @param  bool $jiwa_stateful Stateful indicator (optional)
     * @param  string $description (optional)
     * @param  string $address1 (optional)
     * @param  string $address2 (optional)
     * @param  string $address3 (optional)
     * @param  string $address4 (optional)
     * @param  string $postcode (optional)
     * @param  string $country (optional)
     * @param  string $notes (optional)
     * @param  string $courier_details (optional)
     * @param  int $default_delivery_days (optional)
     * @param  bool $is_default (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function creditorWarehouseAddressDELETERequestCreditorIDWarehouseAddressWarehouseAddressIDDeleteAsyncWithHttpInfo($accept, $creditor_id, $warehouse_address_id, $jiwa_stateful = null, $description = null, $address1 = null, $address2 = null, $address3 = null, $address4 = null, $postcode = null, $country = null, $notes = null, $courier_details = null, $default_delivery_days = null, $is_default = null)
    {
        $returnType = '\Jiwa\Model\Object';
        $request = $this->creditorWarehouseAddressDELETERequestCreditorIDWarehouseAddressWarehouseAddressIDDeleteRequest($accept, $creditor_id, $warehouse_address_id, $jiwa_stateful, $description, $address1, $address2, $address3, $address4, $postcode, $country, $notes, $courier_details, $default_delivery_days, $is_default);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'creditorWarehouseAddressDELETERequestCreditorIDWarehouseAddressWarehouseAddressIDDelete'
     *
     * @param  string $accept Accept Header (required)
     * @param  string $creditor_id (required)
     * @param  string $warehouse_address_id (required)
     * @param  bool $jiwa_stateful Stateful indicator (optional)
     * @param  string $description (optional)
     * @param  string $address1 (optional)
     * @param  string $address2 (optional)
     * @param  string $address3 (optional)
     * @param  string $address4 (optional)
     * @param  string $postcode (optional)
     * @param  string $country (optional)
     * @param  string $notes (optional)
     * @param  string $courier_details (optional)
     * @param  int $default_delivery_days (optional)
     * @param  bool $is_default (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function creditorWarehouseAddressDELETERequestCreditorIDWarehouseAddressWarehouseAddressIDDeleteRequest($accept, $creditor_id, $warehouse_address_id, $jiwa_stateful = null, $description = null, $address1 = null, $address2 = null, $address3 = null, $address4 = null, $postcode = null, $country = null, $notes = null, $courier_details = null, $default_delivery_days = null, $is_default = null)
    {
        // verify the required parameter 'accept' is set
        if ($accept === null || (is_array($accept) && count($accept) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $accept when calling creditorWarehouseAddressDELETERequestCreditorIDWarehouseAddressWarehouseAddressIDDelete'
            );
        }
        // verify the required parameter 'creditor_id' is set
        if ($creditor_id === null || (is_array($creditor_id) && count($creditor_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $creditor_id when calling creditorWarehouseAddressDELETERequestCreditorIDWarehouseAddressWarehouseAddressIDDelete'
            );
        }
        // verify the required parameter 'warehouse_address_id' is set
        if ($warehouse_address_id === null || (is_array($warehouse_address_id) && count($warehouse_address_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $warehouse_address_id when calling creditorWarehouseAddressDELETERequestCreditorIDWarehouseAddressWarehouseAddressIDDelete'
            );
        }

        $resourcePath = '/Creditors/{CreditorID}/WarehouseAddress/{WarehouseAddressID}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        if ($description !== null) {
            $queryParams['Description'] = ObjectSerializer::toQueryValue($description);
        }
        // query params
        if ($address1 !== null) {
            $queryParams['Address1'] = ObjectSerializer::toQueryValue($address1);
        }
        // query params
        if ($address2 !== null) {
            $queryParams['Address2'] = ObjectSerializer::toQueryValue($address2);
        }
        // query params
        if ($address3 !== null) {
            $queryParams['Address3'] = ObjectSerializer::toQueryValue($address3);
        }
        // query params
        if ($address4 !== null) {
            $queryParams['Address4'] = ObjectSerializer::toQueryValue($address4);
        }
        // query params
        if ($postcode !== null) {
            $queryParams['Postcode'] = ObjectSerializer::toQueryValue($postcode);
        }
        // query params
        if ($country !== null) {
            $queryParams['Country'] = ObjectSerializer::toQueryValue($country);
        }
        // query params
        if ($notes !== null) {
            $queryParams['Notes'] = ObjectSerializer::toQueryValue($notes);
        }
        // query params
        if ($courier_details !== null) {
            $queryParams['CourierDetails'] = ObjectSerializer::toQueryValue($courier_details);
        }
        // query params
        if ($default_delivery_days !== null) {
            $queryParams['DefaultDeliveryDays'] = ObjectSerializer::toQueryValue($default_delivery_days);
        }
        // query params
        if ($is_default !== null) {
            $queryParams['IsDefault'] = ObjectSerializer::toQueryValue($is_default);
        }
        // header params
        if ($accept !== null) {
            $headerParams['Accept'] = ObjectSerializer::toHeaderValue($accept);
        }
        // header params
        if ($jiwa_stateful !== null) {
            $headerParams['jiwa-stateful'] = ObjectSerializer::toHeaderValue($jiwa_stateful);
        }

        // path params
        if ($creditor_id !== null) {
            $resourcePath = str_replace(
                '{' . 'CreditorID' . '}',
                ObjectSerializer::toPathValue($creditor_id),
                $resourcePath
            );
        }
        // path params
        if ($warehouse_address_id !== null) {
            $resourcePath = str_replace(
                '{' . 'WarehouseAddressID' . '}',
                ObjectSerializer::toPathValue($warehouse_address_id),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json', 'application/xml']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json', 'application/xml'],
                ['application/x-www-form-urlencoded', 'application/json', 'application/xml']
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            
            if($headers['Content-Type'] === 'application/json') {
                // \stdClass has no __toString(), so we should encode it manually
                if ($httpBody instanceof \stdClass) {
                    $httpBody = \GuzzleHttp\json_encode($httpBody);
                }
                // array has no __toString(), so we should encode it manually
                if(is_array($httpBody)) {
                    $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($httpBody));
                }
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\Query::build($formParams);
            }
        }

        // this endpoint requires HTTP basic authentication
        if ($this->config->getUsername() !== null || $this->config->getPassword() !== null) {
            $headers['Authorization'] = 'Basic ' . base64_encode($this->config->getUsername() . ":" . $this->config->getPassword());
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\Query::build($queryParams);
        return new Request(
            'DELETE',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation creditorWarehouseAddressGETRequestCreditorIDWarehouseAddressWarehouseAddressIDGet
     *
     * Retrieves a creditor warehouse address.
     *
     * @param  string $accept Accept Header (required)
     * @param  string $creditor_id creditor_id (required)
     * @param  string $warehouse_address_id warehouse_address_id (required)
     * @param  bool $jiwa_stateful Stateful indicator (optional)
     *
     * @throws \Jiwa\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Jiwa\Model\CreditorWarehouseAddress
     */
    public function creditorWarehouseAddressGETRequestCreditorIDWarehouseAddressWarehouseAddressIDGet($accept, $creditor_id, $warehouse_address_id, $jiwa_stateful = null)
    {
        list($response) = $this->creditorWarehouseAddressGETRequestCreditorIDWarehouseAddressWarehouseAddressIDGetWithHttpInfo($accept, $creditor_id, $warehouse_address_id, $jiwa_stateful);
        return $response;
    }

    /**
     * Operation creditorWarehouseAddressGETRequestCreditorIDWarehouseAddressWarehouseAddressIDGetWithHttpInfo
     *
     * Retrieves a creditor warehouse address.
     *
     * @param  string $accept Accept Header (required)
     * @param  string $creditor_id (required)
     * @param  string $warehouse_address_id (required)
     * @param  bool $jiwa_stateful Stateful indicator (optional)
     *
     * @throws \Jiwa\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Jiwa\Model\CreditorWarehouseAddress, HTTP status code, HTTP response headers (array of strings)
     */
    public function creditorWarehouseAddressGETRequestCreditorIDWarehouseAddressWarehouseAddressIDGetWithHttpInfo($accept, $creditor_id, $warehouse_address_id, $jiwa_stateful = null)
    {
        $returnType = '\Jiwa\Model\CreditorWarehouseAddress';
        $request = $this->creditorWarehouseAddressGETRequestCreditorIDWarehouseAddressWarehouseAddressIDGetRequest($accept, $creditor_id, $warehouse_address_id, $jiwa_stateful);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Jiwa\Model\CreditorWarehouseAddress',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 401:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Jiwa\Model\CreditorWarehouseAddress',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 404:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Jiwa\Model\CreditorWarehouseAddress',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 403:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Jiwa\Model\CreditorWarehouseAddress',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation creditorWarehouseAddressGETRequestCreditorIDWarehouseAddressWarehouseAddressIDGetAsync
     *
     * Retrieves a creditor warehouse address.
     *
     * @param  string $accept Accept Header (required)
     * @param  string $creditor_id (required)
     * @param  string $warehouse_address_id (required)
     * @param  bool $jiwa_stateful Stateful indicator (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function creditorWarehouseAddressGETRequestCreditorIDWarehouseAddressWarehouseAddressIDGetAsync($accept, $creditor_id, $warehouse_address_id, $jiwa_stateful = null)
    {
        return $this->creditorWarehouseAddressGETRequestCreditorIDWarehouseAddressWarehouseAddressIDGetAsyncWithHttpInfo($accept, $creditor_id, $warehouse_address_id, $jiwa_stateful)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation creditorWarehouseAddressGETRequestCreditorIDWarehouseAddressWarehouseAddressIDGetAsyncWithHttpInfo
     *
     * Retrieves a creditor warehouse address.
     *
     * @param  string $accept Accept Header (required)
     * @param  string $creditor_id (required)
     * @param  string $warehouse_address_id (required)
     * @param  bool $jiwa_stateful Stateful indicator (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function creditorWarehouseAddressGETRequestCreditorIDWarehouseAddressWarehouseAddressIDGetAsyncWithHttpInfo($accept, $creditor_id, $warehouse_address_id, $jiwa_stateful = null)
    {
        $returnType = '\Jiwa\Model\CreditorWarehouseAddress';
        $request = $this->creditorWarehouseAddressGETRequestCreditorIDWarehouseAddressWarehouseAddressIDGetRequest($accept, $creditor_id, $warehouse_address_id, $jiwa_stateful);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'creditorWarehouseAddressGETRequestCreditorIDWarehouseAddressWarehouseAddressIDGet'
     *
     * @param  string $accept Accept Header (required)
     * @param  string $creditor_id (required)
     * @param  string $warehouse_address_id (required)
     * @param  bool $jiwa_stateful Stateful indicator (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function creditorWarehouseAddressGETRequestCreditorIDWarehouseAddressWarehouseAddressIDGetRequest($accept, $creditor_id, $warehouse_address_id, $jiwa_stateful = null)
    {
        // verify the required parameter 'accept' is set
        if ($accept === null || (is_array($accept) && count($accept) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $accept when calling creditorWarehouseAddressGETRequestCreditorIDWarehouseAddressWarehouseAddressIDGet'
            );
        }
        // verify the required parameter 'creditor_id' is set
        if ($creditor_id === null || (is_array($creditor_id) && count($creditor_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $creditor_id when calling creditorWarehouseAddressGETRequestCreditorIDWarehouseAddressWarehouseAddressIDGet'
            );
        }
        // verify the required parameter 'warehouse_address_id' is set
        if ($warehouse_address_id === null || (is_array($warehouse_address_id) && count($warehouse_address_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $warehouse_address_id when calling creditorWarehouseAddressGETRequestCreditorIDWarehouseAddressWarehouseAddressIDGet'
            );
        }

        $resourcePath = '/Creditors/{CreditorID}/WarehouseAddress/{WarehouseAddressID}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // header params
        if ($accept !== null) {
            $headerParams['Accept'] = ObjectSerializer::toHeaderValue($accept);
        }
        // header params
        if ($jiwa_stateful !== null) {
            $headerParams['jiwa-stateful'] = ObjectSerializer::toHeaderValue($jiwa_stateful);
        }

        // path params
        if ($creditor_id !== null) {
            $resourcePath = str_replace(
                '{' . 'CreditorID' . '}',
                ObjectSerializer::toPathValue($creditor_id),
                $resourcePath
            );
        }
        // path params
        if ($warehouse_address_id !== null) {
            $resourcePath = str_replace(
                '{' . 'WarehouseAddressID' . '}',
                ObjectSerializer::toPathValue($warehouse_address_id),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json', 'application/xml']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json', 'application/xml'],
                ['application/x-www-form-urlencoded', 'application/json', 'application/xml']
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            
            if($headers['Content-Type'] === 'application/json') {
                // \stdClass has no __toString(), so we should encode it manually
                if ($httpBody instanceof \stdClass) {
                    $httpBody = \GuzzleHttp\json_encode($httpBody);
                }
                // array has no __toString(), so we should encode it manually
                if(is_array($httpBody)) {
                    $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($httpBody));
                }
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\Query::build($formParams);
            }
        }

        // this endpoint requires HTTP basic authentication
        if ($this->config->getUsername() !== null || $this->config->getPassword() !== null) {
            $headers['Authorization'] = 'Basic ' . base64_encode($this->config->getUsername() . ":" . $this->config->getPassword());
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\Query::build($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation creditorWarehouseAddressPATCHRequestCreditorIDWarehouseAddressWarehouseAddressIDUpdate
     *
     * Updates a warehouse address for a creditor.
     *
     * @param  string $accept Accept Header (required)
     * @param  string $creditor_id creditor_id (required)
     * @param  string $warehouse_address_id warehouse_address_id (required)
     * @param  bool $jiwa_stateful Stateful indicator (optional)
     * @param  string $description description (optional)
     * @param  string $address1 address1 (optional)
     * @param  string $address2 address2 (optional)
     * @param  string $address3 address3 (optional)
     * @param  string $address4 address4 (optional)
     * @param  string $postcode postcode (optional)
     * @param  string $country country (optional)
     * @param  string $notes notes (optional)
     * @param  string $courier_details courier_details (optional)
     * @param  int $default_delivery_days default_delivery_days (optional)
     * @param  bool $is_default is_default (optional)
     * @param  \Jiwa\Model\CreditorWarehouseAddressPATCHRequest $body body (optional)
     *
     * @throws \Jiwa\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Jiwa\Model\CreditorWarehouseAddress
     */
    public function creditorWarehouseAddressPATCHRequestCreditorIDWarehouseAddressWarehouseAddressIDUpdate($accept, $creditor_id, $warehouse_address_id, $jiwa_stateful = null, $description = null, $address1 = null, $address2 = null, $address3 = null, $address4 = null, $postcode = null, $country = null, $notes = null, $courier_details = null, $default_delivery_days = null, $is_default = null, $body = null)
    {
        list($response) = $this->creditorWarehouseAddressPATCHRequestCreditorIDWarehouseAddressWarehouseAddressIDUpdateWithHttpInfo($accept, $creditor_id, $warehouse_address_id, $jiwa_stateful, $description, $address1, $address2, $address3, $address4, $postcode, $country, $notes, $courier_details, $default_delivery_days, $is_default, $body);
        return $response;
    }

    /**
     * Operation creditorWarehouseAddressPATCHRequestCreditorIDWarehouseAddressWarehouseAddressIDUpdateWithHttpInfo
     *
     * Updates a warehouse address for a creditor.
     *
     * @param  string $accept Accept Header (required)
     * @param  string $creditor_id (required)
     * @param  string $warehouse_address_id (required)
     * @param  bool $jiwa_stateful Stateful indicator (optional)
     * @param  string $description (optional)
     * @param  string $address1 (optional)
     * @param  string $address2 (optional)
     * @param  string $address3 (optional)
     * @param  string $address4 (optional)
     * @param  string $postcode (optional)
     * @param  string $country (optional)
     * @param  string $notes (optional)
     * @param  string $courier_details (optional)
     * @param  int $default_delivery_days (optional)
     * @param  bool $is_default (optional)
     * @param  \Jiwa\Model\CreditorWarehouseAddressPATCHRequest $body (optional)
     *
     * @throws \Jiwa\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Jiwa\Model\CreditorWarehouseAddress, HTTP status code, HTTP response headers (array of strings)
     */
    public function creditorWarehouseAddressPATCHRequestCreditorIDWarehouseAddressWarehouseAddressIDUpdateWithHttpInfo($accept, $creditor_id, $warehouse_address_id, $jiwa_stateful = null, $description = null, $address1 = null, $address2 = null, $address3 = null, $address4 = null, $postcode = null, $country = null, $notes = null, $courier_details = null, $default_delivery_days = null, $is_default = null, $body = null)
    {
        $returnType = '\Jiwa\Model\CreditorWarehouseAddress';
        $request = $this->creditorWarehouseAddressPATCHRequestCreditorIDWarehouseAddressWarehouseAddressIDUpdateRequest($accept, $creditor_id, $warehouse_address_id, $jiwa_stateful, $description, $address1, $address2, $address3, $address4, $postcode, $country, $notes, $courier_details, $default_delivery_days, $is_default, $body);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Jiwa\Model\CreditorWarehouseAddress',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 404:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Jiwa\Model\CreditorWarehouseAddress',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 401:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Jiwa\Model\CreditorWarehouseAddress',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 403:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Jiwa\Model\CreditorWarehouseAddress',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation creditorWarehouseAddressPATCHRequestCreditorIDWarehouseAddressWarehouseAddressIDUpdateAsync
     *
     * Updates a warehouse address for a creditor.
     *
     * @param  string $accept Accept Header (required)
     * @param  string $creditor_id (required)
     * @param  string $warehouse_address_id (required)
     * @param  bool $jiwa_stateful Stateful indicator (optional)
     * @param  string $description (optional)
     * @param  string $address1 (optional)
     * @param  string $address2 (optional)
     * @param  string $address3 (optional)
     * @param  string $address4 (optional)
     * @param  string $postcode (optional)
     * @param  string $country (optional)
     * @param  string $notes (optional)
     * @param  string $courier_details (optional)
     * @param  int $default_delivery_days (optional)
     * @param  bool $is_default (optional)
     * @param  \Jiwa\Model\CreditorWarehouseAddressPATCHRequest $body (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function creditorWarehouseAddressPATCHRequestCreditorIDWarehouseAddressWarehouseAddressIDUpdateAsync($accept, $creditor_id, $warehouse_address_id, $jiwa_stateful = null, $description = null, $address1 = null, $address2 = null, $address3 = null, $address4 = null, $postcode = null, $country = null, $notes = null, $courier_details = null, $default_delivery_days = null, $is_default = null, $body = null)
    {
        return $this->creditorWarehouseAddressPATCHRequestCreditorIDWarehouseAddressWarehouseAddressIDUpdateAsyncWithHttpInfo($accept, $creditor_id, $warehouse_address_id, $jiwa_stateful, $description, $address1, $address2, $address3, $address4, $postcode, $country, $notes, $courier_details, $default_delivery_days, $is_default, $body)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation creditorWarehouseAddressPATCHRequestCreditorIDWarehouseAddressWarehouseAddressIDUpdateAsyncWithHttpInfo
     *
     * Updates a warehouse address for a creditor.
     *
     * @param  string $accept Accept Header (required)
     * @param  string $creditor_id (required)
     * @param  string $warehouse_address_id (required)
     * @param  bool $jiwa_stateful Stateful indicator (optional)
     * @param  string $description (optional)
     * @param  string $address1 (optional)
     * @param  string $address2 (optional)
     * @param  string $address3 (optional)
     * @param  string $address4 (optional)
     * @param  string $postcode (optional)
     * @param  string $country (optional)
     * @param  string $notes (optional)
     * @param  string $courier_details (optional)
     * @param  int $default_delivery_days (optional)
     * @param  bool $is_default (optional)
     * @param  \Jiwa\Model\CreditorWarehouseAddressPATCHRequest $body (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function creditorWarehouseAddressPATCHRequestCreditorIDWarehouseAddressWarehouseAddressIDUpdateAsyncWithHttpInfo($accept, $creditor_id, $warehouse_address_id, $jiwa_stateful = null, $description = null, $address1 = null, $address2 = null, $address3 = null, $address4 = null, $postcode = null, $country = null, $notes = null, $courier_details = null, $default_delivery_days = null, $is_default = null, $body = null)
    {
        $returnType = '\Jiwa\Model\CreditorWarehouseAddress';
        $request = $this->creditorWarehouseAddressPATCHRequestCreditorIDWarehouseAddressWarehouseAddressIDUpdateRequest($accept, $creditor_id, $warehouse_address_id, $jiwa_stateful, $description, $address1, $address2, $address3, $address4, $postcode, $country, $notes, $courier_details, $default_delivery_days, $is_default, $body);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'creditorWarehouseAddressPATCHRequestCreditorIDWarehouseAddressWarehouseAddressIDUpdate'
     *
     * @param  string $accept Accept Header (required)
     * @param  string $creditor_id (required)
     * @param  string $warehouse_address_id (required)
     * @param  bool $jiwa_stateful Stateful indicator (optional)
     * @param  string $description (optional)
     * @param  string $address1 (optional)
     * @param  string $address2 (optional)
     * @param  string $address3 (optional)
     * @param  string $address4 (optional)
     * @param  string $postcode (optional)
     * @param  string $country (optional)
     * @param  string $notes (optional)
     * @param  string $courier_details (optional)
     * @param  int $default_delivery_days (optional)
     * @param  bool $is_default (optional)
     * @param  \Jiwa\Model\CreditorWarehouseAddressPATCHRequest $body (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function creditorWarehouseAddressPATCHRequestCreditorIDWarehouseAddressWarehouseAddressIDUpdateRequest($accept, $creditor_id, $warehouse_address_id, $jiwa_stateful = null, $description = null, $address1 = null, $address2 = null, $address3 = null, $address4 = null, $postcode = null, $country = null, $notes = null, $courier_details = null, $default_delivery_days = null, $is_default = null, $body = null)
    {
        // verify the required parameter 'accept' is set
        if ($accept === null || (is_array($accept) && count($accept) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $accept when calling creditorWarehouseAddressPATCHRequestCreditorIDWarehouseAddressWarehouseAddressIDUpdate'
            );
        }
        // verify the required parameter 'creditor_id' is set
        if ($creditor_id === null || (is_array($creditor_id) && count($creditor_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $creditor_id when calling creditorWarehouseAddressPATCHRequestCreditorIDWarehouseAddressWarehouseAddressIDUpdate'
            );
        }
        // verify the required parameter 'warehouse_address_id' is set
        if ($warehouse_address_id === null || (is_array($warehouse_address_id) && count($warehouse_address_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $warehouse_address_id when calling creditorWarehouseAddressPATCHRequestCreditorIDWarehouseAddressWarehouseAddressIDUpdate'
            );
        }

        $resourcePath = '/Creditors/{CreditorID}/WarehouseAddress/{WarehouseAddressID}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        if ($description !== null) {
            $queryParams['Description'] = ObjectSerializer::toQueryValue($description);
        }
        // query params
        if ($address1 !== null) {
            $queryParams['Address1'] = ObjectSerializer::toQueryValue($address1);
        }
        // query params
        if ($address2 !== null) {
            $queryParams['Address2'] = ObjectSerializer::toQueryValue($address2);
        }
        // query params
        if ($address3 !== null) {
            $queryParams['Address3'] = ObjectSerializer::toQueryValue($address3);
        }
        // query params
        if ($address4 !== null) {
            $queryParams['Address4'] = ObjectSerializer::toQueryValue($address4);
        }
        // query params
        if ($postcode !== null) {
            $queryParams['Postcode'] = ObjectSerializer::toQueryValue($postcode);
        }
        // query params
        if ($country !== null) {
            $queryParams['Country'] = ObjectSerializer::toQueryValue($country);
        }
        // query params
        if ($notes !== null) {
            $queryParams['Notes'] = ObjectSerializer::toQueryValue($notes);
        }
        // query params
        if ($courier_details !== null) {
            $queryParams['CourierDetails'] = ObjectSerializer::toQueryValue($courier_details);
        }
        // query params
        if ($default_delivery_days !== null) {
            $queryParams['DefaultDeliveryDays'] = ObjectSerializer::toQueryValue($default_delivery_days);
        }
        // query params
        if ($is_default !== null) {
            $queryParams['IsDefault'] = ObjectSerializer::toQueryValue($is_default);
        }
        // header params
        if ($accept !== null) {
            $headerParams['Accept'] = ObjectSerializer::toHeaderValue($accept);
        }
        // header params
        if ($jiwa_stateful !== null) {
            $headerParams['jiwa-stateful'] = ObjectSerializer::toHeaderValue($jiwa_stateful);
        }

        // path params
        if ($creditor_id !== null) {
            $resourcePath = str_replace(
                '{' . 'CreditorID' . '}',
                ObjectSerializer::toPathValue($creditor_id),
                $resourcePath
            );
        }
        // path params
        if ($warehouse_address_id !== null) {
            $resourcePath = str_replace(
                '{' . 'WarehouseAddressID' . '}',
                ObjectSerializer::toPathValue($warehouse_address_id),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;
        if (isset($body)) {
            $_tempBody = $body;
        }

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json', 'application/xml']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json', 'application/xml'],
                ['application/x-www-form-urlencoded', 'application/json', 'application/xml']
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            
            if($headers['Content-Type'] === 'application/json') {
                // \stdClass has no __toString(), so we should encode it manually
                if ($httpBody instanceof \stdClass) {
                    $httpBody = \GuzzleHttp\json_encode($httpBody);
                }
                // array has no __toString(), so we should encode it manually
                if(is_array($httpBody)) {
                    $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($httpBody));
                }
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\Query::build($formParams);
            }
        }

        // this endpoint requires HTTP basic authentication
        if ($this->config->getUsername() !== null || $this->config->getPassword() !== null) {
            $headers['Authorization'] = 'Basic ' . base64_encode($this->config->getUsername() . ":" . $this->config->getPassword());
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\Query::build($queryParams);
        return new Request(
            'PATCH',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation creditorWarehouseAddressPOSTRequestCreditorIDWarehouseAddressPost
     *
     * Appends a warehouse to a creditor.
     *
     * @param  string $accept Accept Header (required)
     * @param  string $creditor_id creditor_id (required)
     * @param  bool $jiwa_stateful Stateful indicator (optional)
     * @param  string $description description (optional)
     * @param  string $address1 address1 (optional)
     * @param  string $address2 address2 (optional)
     * @param  string $address3 address3 (optional)
     * @param  string $address4 address4 (optional)
     * @param  string $postcode postcode (optional)
     * @param  string $country country (optional)
     * @param  string $notes notes (optional)
     * @param  string $courier_details courier_details (optional)
     * @param  int $default_delivery_days default_delivery_days (optional)
     * @param  bool $is_default is_default (optional)
     * @param  \Jiwa\Model\CreditorWarehouseAddressPOSTRequest $body body (optional)
     *
     * @throws \Jiwa\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Jiwa\Model\CreditorWarehouseAddress
     */
    public function creditorWarehouseAddressPOSTRequestCreditorIDWarehouseAddressPost($accept, $creditor_id, $jiwa_stateful = null, $description = null, $address1 = null, $address2 = null, $address3 = null, $address4 = null, $postcode = null, $country = null, $notes = null, $courier_details = null, $default_delivery_days = null, $is_default = null, $body = null)
    {
        list($response) = $this->creditorWarehouseAddressPOSTRequestCreditorIDWarehouseAddressPostWithHttpInfo($accept, $creditor_id, $jiwa_stateful, $description, $address1, $address2, $address3, $address4, $postcode, $country, $notes, $courier_details, $default_delivery_days, $is_default, $body);
        return $response;
    }

    /**
     * Operation creditorWarehouseAddressPOSTRequestCreditorIDWarehouseAddressPostWithHttpInfo
     *
     * Appends a warehouse to a creditor.
     *
     * @param  string $accept Accept Header (required)
     * @param  string $creditor_id (required)
     * @param  bool $jiwa_stateful Stateful indicator (optional)
     * @param  string $description (optional)
     * @param  string $address1 (optional)
     * @param  string $address2 (optional)
     * @param  string $address3 (optional)
     * @param  string $address4 (optional)
     * @param  string $postcode (optional)
     * @param  string $country (optional)
     * @param  string $notes (optional)
     * @param  string $courier_details (optional)
     * @param  int $default_delivery_days (optional)
     * @param  bool $is_default (optional)
     * @param  \Jiwa\Model\CreditorWarehouseAddressPOSTRequest $body (optional)
     *
     * @throws \Jiwa\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Jiwa\Model\CreditorWarehouseAddress, HTTP status code, HTTP response headers (array of strings)
     */
    public function creditorWarehouseAddressPOSTRequestCreditorIDWarehouseAddressPostWithHttpInfo($accept, $creditor_id, $jiwa_stateful = null, $description = null, $address1 = null, $address2 = null, $address3 = null, $address4 = null, $postcode = null, $country = null, $notes = null, $courier_details = null, $default_delivery_days = null, $is_default = null, $body = null)
    {
        $returnType = '\Jiwa\Model\CreditorWarehouseAddress';
        $request = $this->creditorWarehouseAddressPOSTRequestCreditorIDWarehouseAddressPostRequest($accept, $creditor_id, $jiwa_stateful, $description, $address1, $address2, $address3, $address4, $postcode, $country, $notes, $courier_details, $default_delivery_days, $is_default, $body);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Jiwa\Model\CreditorWarehouseAddress',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 201:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Jiwa\Model\CreditorWarehouseAddress',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 401:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Jiwa\Model\CreditorWarehouseAddress',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 403:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Jiwa\Model\CreditorWarehouseAddress',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 404:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Jiwa\Model\CreditorWarehouseAddress',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation creditorWarehouseAddressPOSTRequestCreditorIDWarehouseAddressPostAsync
     *
     * Appends a warehouse to a creditor.
     *
     * @param  string $accept Accept Header (required)
     * @param  string $creditor_id (required)
     * @param  bool $jiwa_stateful Stateful indicator (optional)
     * @param  string $description (optional)
     * @param  string $address1 (optional)
     * @param  string $address2 (optional)
     * @param  string $address3 (optional)
     * @param  string $address4 (optional)
     * @param  string $postcode (optional)
     * @param  string $country (optional)
     * @param  string $notes (optional)
     * @param  string $courier_details (optional)
     * @param  int $default_delivery_days (optional)
     * @param  bool $is_default (optional)
     * @param  \Jiwa\Model\CreditorWarehouseAddressPOSTRequest $body (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function creditorWarehouseAddressPOSTRequestCreditorIDWarehouseAddressPostAsync($accept, $creditor_id, $jiwa_stateful = null, $description = null, $address1 = null, $address2 = null, $address3 = null, $address4 = null, $postcode = null, $country = null, $notes = null, $courier_details = null, $default_delivery_days = null, $is_default = null, $body = null)
    {
        return $this->creditorWarehouseAddressPOSTRequestCreditorIDWarehouseAddressPostAsyncWithHttpInfo($accept, $creditor_id, $jiwa_stateful, $description, $address1, $address2, $address3, $address4, $postcode, $country, $notes, $courier_details, $default_delivery_days, $is_default, $body)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation creditorWarehouseAddressPOSTRequestCreditorIDWarehouseAddressPostAsyncWithHttpInfo
     *
     * Appends a warehouse to a creditor.
     *
     * @param  string $accept Accept Header (required)
     * @param  string $creditor_id (required)
     * @param  bool $jiwa_stateful Stateful indicator (optional)
     * @param  string $description (optional)
     * @param  string $address1 (optional)
     * @param  string $address2 (optional)
     * @param  string $address3 (optional)
     * @param  string $address4 (optional)
     * @param  string $postcode (optional)
     * @param  string $country (optional)
     * @param  string $notes (optional)
     * @param  string $courier_details (optional)
     * @param  int $default_delivery_days (optional)
     * @param  bool $is_default (optional)
     * @param  \Jiwa\Model\CreditorWarehouseAddressPOSTRequest $body (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function creditorWarehouseAddressPOSTRequestCreditorIDWarehouseAddressPostAsyncWithHttpInfo($accept, $creditor_id, $jiwa_stateful = null, $description = null, $address1 = null, $address2 = null, $address3 = null, $address4 = null, $postcode = null, $country = null, $notes = null, $courier_details = null, $default_delivery_days = null, $is_default = null, $body = null)
    {
        $returnType = '\Jiwa\Model\CreditorWarehouseAddress';
        $request = $this->creditorWarehouseAddressPOSTRequestCreditorIDWarehouseAddressPostRequest($accept, $creditor_id, $jiwa_stateful, $description, $address1, $address2, $address3, $address4, $postcode, $country, $notes, $courier_details, $default_delivery_days, $is_default, $body);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'creditorWarehouseAddressPOSTRequestCreditorIDWarehouseAddressPost'
     *
     * @param  string $accept Accept Header (required)
     * @param  string $creditor_id (required)
     * @param  bool $jiwa_stateful Stateful indicator (optional)
     * @param  string $description (optional)
     * @param  string $address1 (optional)
     * @param  string $address2 (optional)
     * @param  string $address3 (optional)
     * @param  string $address4 (optional)
     * @param  string $postcode (optional)
     * @param  string $country (optional)
     * @param  string $notes (optional)
     * @param  string $courier_details (optional)
     * @param  int $default_delivery_days (optional)
     * @param  bool $is_default (optional)
     * @param  \Jiwa\Model\CreditorWarehouseAddressPOSTRequest $body (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function creditorWarehouseAddressPOSTRequestCreditorIDWarehouseAddressPostRequest($accept, $creditor_id, $jiwa_stateful = null, $description = null, $address1 = null, $address2 = null, $address3 = null, $address4 = null, $postcode = null, $country = null, $notes = null, $courier_details = null, $default_delivery_days = null, $is_default = null, $body = null)
    {
        // verify the required parameter 'accept' is set
        if ($accept === null || (is_array($accept) && count($accept) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $accept when calling creditorWarehouseAddressPOSTRequestCreditorIDWarehouseAddressPost'
            );
        }
        // verify the required parameter 'creditor_id' is set
        if ($creditor_id === null || (is_array($creditor_id) && count($creditor_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $creditor_id when calling creditorWarehouseAddressPOSTRequestCreditorIDWarehouseAddressPost'
            );
        }

        $resourcePath = '/Creditors/{CreditorID}/WarehouseAddress';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        if ($description !== null) {
            $queryParams['Description'] = ObjectSerializer::toQueryValue($description);
        }
        // query params
        if ($address1 !== null) {
            $queryParams['Address1'] = ObjectSerializer::toQueryValue($address1);
        }
        // query params
        if ($address2 !== null) {
            $queryParams['Address2'] = ObjectSerializer::toQueryValue($address2);
        }
        // query params
        if ($address3 !== null) {
            $queryParams['Address3'] = ObjectSerializer::toQueryValue($address3);
        }
        // query params
        if ($address4 !== null) {
            $queryParams['Address4'] = ObjectSerializer::toQueryValue($address4);
        }
        // query params
        if ($postcode !== null) {
            $queryParams['Postcode'] = ObjectSerializer::toQueryValue($postcode);
        }
        // query params
        if ($country !== null) {
            $queryParams['Country'] = ObjectSerializer::toQueryValue($country);
        }
        // query params
        if ($notes !== null) {
            $queryParams['Notes'] = ObjectSerializer::toQueryValue($notes);
        }
        // query params
        if ($courier_details !== null) {
            $queryParams['CourierDetails'] = ObjectSerializer::toQueryValue($courier_details);
        }
        // query params
        if ($default_delivery_days !== null) {
            $queryParams['DefaultDeliveryDays'] = ObjectSerializer::toQueryValue($default_delivery_days);
        }
        // query params
        if ($is_default !== null) {
            $queryParams['IsDefault'] = ObjectSerializer::toQueryValue($is_default);
        }
        // header params
        if ($accept !== null) {
            $headerParams['Accept'] = ObjectSerializer::toHeaderValue($accept);
        }
        // header params
        if ($jiwa_stateful !== null) {
            $headerParams['jiwa-stateful'] = ObjectSerializer::toHeaderValue($jiwa_stateful);
        }

        // path params
        if ($creditor_id !== null) {
            $resourcePath = str_replace(
                '{' . 'CreditorID' . '}',
                ObjectSerializer::toPathValue($creditor_id),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;
        if (isset($body)) {
            $_tempBody = $body;
        }

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json', 'application/xml']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json', 'application/xml'],
                ['application/x-www-form-urlencoded', 'application/json', 'application/xml']
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            
            if($headers['Content-Type'] === 'application/json') {
                // \stdClass has no __toString(), so we should encode it manually
                if ($httpBody instanceof \stdClass) {
                    $httpBody = \GuzzleHttp\json_encode($httpBody);
                }
                // array has no __toString(), so we should encode it manually
                if(is_array($httpBody)) {
                    $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($httpBody));
                }
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\Query::build($formParams);
            }
        }

        // this endpoint requires HTTP basic authentication
        if ($this->config->getUsername() !== null || $this->config->getPassword() !== null) {
            $headers['Authorization'] = 'Basic ' . base64_encode($this->config->getUsername() . ":" . $this->config->getPassword());
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\Query::build($queryParams);
        return new Request(
            'POST',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation creditorWarehouseAddressesGETManyRequestCreditorIDWarehouseAddressesGet
     *
     * Retrieves a list of creditor warehouse addresses.
     *
     * @param  string $accept Accept Header (required)
     * @param  string $creditor_id creditor_id (required)
     * @param  bool $jiwa_stateful Stateful indicator (optional)
     *
     * @throws \Jiwa\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Jiwa\Model\CreditorWarehouseAddress[]
     */
    public function creditorWarehouseAddressesGETManyRequestCreditorIDWarehouseAddressesGet($accept, $creditor_id, $jiwa_stateful = null)
    {
        list($response) = $this->creditorWarehouseAddressesGETManyRequestCreditorIDWarehouseAddressesGetWithHttpInfo($accept, $creditor_id, $jiwa_stateful);
        return $response;
    }

    /**
     * Operation creditorWarehouseAddressesGETManyRequestCreditorIDWarehouseAddressesGetWithHttpInfo
     *
     * Retrieves a list of creditor warehouse addresses.
     *
     * @param  string $accept Accept Header (required)
     * @param  string $creditor_id (required)
     * @param  bool $jiwa_stateful Stateful indicator (optional)
     *
     * @throws \Jiwa\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Jiwa\Model\CreditorWarehouseAddress[], HTTP status code, HTTP response headers (array of strings)
     */
    public function creditorWarehouseAddressesGETManyRequestCreditorIDWarehouseAddressesGetWithHttpInfo($accept, $creditor_id, $jiwa_stateful = null)
    {
        $returnType = '\Jiwa\Model\CreditorWarehouseAddress[]';
        $request = $this->creditorWarehouseAddressesGETManyRequestCreditorIDWarehouseAddressesGetRequest($accept, $creditor_id, $jiwa_stateful);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Jiwa\Model\CreditorWarehouseAddress[]',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 403:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Jiwa\Model\CreditorWarehouseAddress[]',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 401:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Jiwa\Model\CreditorWarehouseAddress[]',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 404:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Jiwa\Model\CreditorWarehouseAddress[]',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation creditorWarehouseAddressesGETManyRequestCreditorIDWarehouseAddressesGetAsync
     *
     * Retrieves a list of creditor warehouse addresses.
     *
     * @param  string $accept Accept Header (required)
     * @param  string $creditor_id (required)
     * @param  bool $jiwa_stateful Stateful indicator (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function creditorWarehouseAddressesGETManyRequestCreditorIDWarehouseAddressesGetAsync($accept, $creditor_id, $jiwa_stateful = null)
    {
        return $this->creditorWarehouseAddressesGETManyRequestCreditorIDWarehouseAddressesGetAsyncWithHttpInfo($accept, $creditor_id, $jiwa_stateful)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation creditorWarehouseAddressesGETManyRequestCreditorIDWarehouseAddressesGetAsyncWithHttpInfo
     *
     * Retrieves a list of creditor warehouse addresses.
     *
     * @param  string $accept Accept Header (required)
     * @param  string $creditor_id (required)
     * @param  bool $jiwa_stateful Stateful indicator (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function creditorWarehouseAddressesGETManyRequestCreditorIDWarehouseAddressesGetAsyncWithHttpInfo($accept, $creditor_id, $jiwa_stateful = null)
    {
        $returnType = '\Jiwa\Model\CreditorWarehouseAddress[]';
        $request = $this->creditorWarehouseAddressesGETManyRequestCreditorIDWarehouseAddressesGetRequest($accept, $creditor_id, $jiwa_stateful);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'creditorWarehouseAddressesGETManyRequestCreditorIDWarehouseAddressesGet'
     *
     * @param  string $accept Accept Header (required)
     * @param  string $creditor_id (required)
     * @param  bool $jiwa_stateful Stateful indicator (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function creditorWarehouseAddressesGETManyRequestCreditorIDWarehouseAddressesGetRequest($accept, $creditor_id, $jiwa_stateful = null)
    {
        // verify the required parameter 'accept' is set
        if ($accept === null || (is_array($accept) && count($accept) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $accept when calling creditorWarehouseAddressesGETManyRequestCreditorIDWarehouseAddressesGet'
            );
        }
        // verify the required parameter 'creditor_id' is set
        if ($creditor_id === null || (is_array($creditor_id) && count($creditor_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $creditor_id when calling creditorWarehouseAddressesGETManyRequestCreditorIDWarehouseAddressesGet'
            );
        }

        $resourcePath = '/Creditors/{CreditorID}/WarehouseAddresses';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // header params
        if ($accept !== null) {
            $headerParams['Accept'] = ObjectSerializer::toHeaderValue($accept);
        }
        // header params
        if ($jiwa_stateful !== null) {
            $headerParams['jiwa-stateful'] = ObjectSerializer::toHeaderValue($jiwa_stateful);
        }

        // path params
        if ($creditor_id !== null) {
            $resourcePath = str_replace(
                '{' . 'CreditorID' . '}',
                ObjectSerializer::toPathValue($creditor_id),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json', 'application/xml']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json', 'application/xml'],
                ['application/x-www-form-urlencoded', 'application/json', 'application/xml']
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            
            if($headers['Content-Type'] === 'application/json') {
                // \stdClass has no __toString(), so we should encode it manually
                if ($httpBody instanceof \stdClass) {
                    $httpBody = \GuzzleHttp\json_encode($httpBody);
                }
                // array has no __toString(), so we should encode it manually
                if(is_array($httpBody)) {
                    $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($httpBody));
                }
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\Query::build($formParams);
            }
        }

        // this endpoint requires HTTP basic authentication
        if ($this->config->getUsername() !== null || $this->config->getPassword() !== null) {
            $headers['Authorization'] = 'Basic ' . base64_encode($this->config->getUsername() . ":" . $this->config->getPassword());
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\Query::build($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Create http client option
     *
     * @throws \RuntimeException on file opening failure
     * @return array of http client options
     */
    protected function createHttpClientOption()
    {
        $options = [];
        if ($this->config->getDebug()) {
            $options[RequestOptions::DEBUG] = fopen($this->config->getDebugFile(), 'a');
            if (!$options[RequestOptions::DEBUG]) {
                throw new \RuntimeException('Failed to open the debug file: ' . $this->config->getDebugFile());
            }
        }

        return $options;
    }
}

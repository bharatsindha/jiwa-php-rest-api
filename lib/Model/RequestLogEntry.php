<?php
/**
 * RequestLogEntry
 *
 * PHP version 5
 *
 * @category Class
 * @package  Jiwa
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * JiwaAPI
 *
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: 1.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 * Swagger Codegen version: 2.4.28-SNAPSHOT
 */

/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Jiwa\JiwaModel;

use \ArrayAccess;
use \Jiwa\ObjectSerializer;

/**
 * RequestLogEntry Class Doc Comment
 *
 * @category Class
 * @description RequestLogEntry
 * @package  Jiwa
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class RequestLogEntry implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $swaggerModelName = 'RequestLogEntry';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerTypes = [
        'id' => 'int',
        'date_time' => '\DateTime',
        'status_code' => 'int',
        'status_description' => 'string',
        'http_method' => 'string',
        'absolute_uri' => 'string',
        'path_info' => 'string',
        'request_body' => 'string',
        'request_dto' => '\Jiwa\JiwaModel\Object',
        'user_auth_id' => 'string',
        'session_id' => 'string',
        'ip_address' => 'string',
        'forwarded_for' => 'string',
        'referer' => 'string',
        'headers' => '\Jiwa\JiwaModel\DictionaryStringString_',
        'form_data' => '\Jiwa\JiwaModel\DictionaryStringString_',
        'items' => '\Jiwa\JiwaModel\DictionaryStringString_',
        'session' => '\Jiwa\JiwaModel\Object',
        'response_dto' => '\Jiwa\JiwaModel\Object',
        'error_response' => '\Jiwa\JiwaModel\Object',
        'exception_source' => 'string',
        'exception_data' => '\Jiwa\JiwaModel\IDictionary',
        'request_duration' => 'string'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerFormats = [
        'id' => 'int64',
        'date_time' => 'date-time',
        'status_code' => 'int32',
        'status_description' => null,
        'http_method' => null,
        'absolute_uri' => null,
        'path_info' => null,
        'request_body' => null,
        'request_dto' => null,
        'user_auth_id' => null,
        'session_id' => null,
        'ip_address' => null,
        'forwarded_for' => null,
        'referer' => null,
        'headers' => null,
        'form_data' => null,
        'items' => null,
        'session' => null,
        'response_dto' => null,
        'error_response' => null,
        'exception_source' => null,
        'exception_data' => null,
        'request_duration' => null
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerFormats()
    {
        return self::$swaggerFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'id' => 'Id',
        'date_time' => 'DateTime',
        'status_code' => 'StatusCode',
        'status_description' => 'StatusDescription',
        'http_method' => 'HttpMethod',
        'absolute_uri' => 'AbsoluteUri',
        'path_info' => 'PathInfo',
        'request_body' => 'RequestBody',
        'request_dto' => 'RequestDto',
        'user_auth_id' => 'UserAuthId',
        'session_id' => 'SessionId',
        'ip_address' => 'IpAddress',
        'forwarded_for' => 'ForwardedFor',
        'referer' => 'Referer',
        'headers' => 'Headers',
        'form_data' => 'FormData',
        'items' => 'Items',
        'session' => 'Session',
        'response_dto' => 'ResponseDto',
        'error_response' => 'ErrorResponse',
        'exception_source' => 'ExceptionSource',
        'exception_data' => 'ExceptionData',
        'request_duration' => 'RequestDuration'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'id' => 'setId',
        'date_time' => 'setDateTime',
        'status_code' => 'setStatusCode',
        'status_description' => 'setStatusDescription',
        'http_method' => 'setHttpMethod',
        'absolute_uri' => 'setAbsoluteUri',
        'path_info' => 'setPathInfo',
        'request_body' => 'setRequestBody',
        'request_dto' => 'setRequestDto',
        'user_auth_id' => 'setUserAuthId',
        'session_id' => 'setSessionId',
        'ip_address' => 'setIpAddress',
        'forwarded_for' => 'setForwardedFor',
        'referer' => 'setReferer',
        'headers' => 'setHeaders',
        'form_data' => 'setFormData',
        'items' => 'setItems',
        'session' => 'setSession',
        'response_dto' => 'setResponseDto',
        'error_response' => 'setErrorResponse',
        'exception_source' => 'setExceptionSource',
        'exception_data' => 'setExceptionData',
        'request_duration' => 'setRequestDuration'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'id' => 'getId',
        'date_time' => 'getDateTime',
        'status_code' => 'getStatusCode',
        'status_description' => 'getStatusDescription',
        'http_method' => 'getHttpMethod',
        'absolute_uri' => 'getAbsoluteUri',
        'path_info' => 'getPathInfo',
        'request_body' => 'getRequestBody',
        'request_dto' => 'getRequestDto',
        'user_auth_id' => 'getUserAuthId',
        'session_id' => 'getSessionId',
        'ip_address' => 'getIpAddress',
        'forwarded_for' => 'getForwardedFor',
        'referer' => 'getReferer',
        'headers' => 'getHeaders',
        'form_data' => 'getFormData',
        'items' => 'getItems',
        'session' => 'getSession',
        'response_dto' => 'getResponseDto',
        'error_response' => 'getErrorResponse',
        'exception_source' => 'getExceptionSource',
        'exception_data' => 'getExceptionData',
        'request_duration' => 'getRequestDuration'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$swaggerModelName;
    }

    

    

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['id'] = isset($data['id']) ? $data['id'] : null;
        $this->container['date_time'] = isset($data['date_time']) ? $data['date_time'] : null;
        $this->container['status_code'] = isset($data['status_code']) ? $data['status_code'] : null;
        $this->container['status_description'] = isset($data['status_description']) ? $data['status_description'] : null;
        $this->container['http_method'] = isset($data['http_method']) ? $data['http_method'] : null;
        $this->container['absolute_uri'] = isset($data['absolute_uri']) ? $data['absolute_uri'] : null;
        $this->container['path_info'] = isset($data['path_info']) ? $data['path_info'] : null;
        $this->container['request_body'] = isset($data['request_body']) ? $data['request_body'] : null;
        $this->container['request_dto'] = isset($data['request_dto']) ? $data['request_dto'] : null;
        $this->container['user_auth_id'] = isset($data['user_auth_id']) ? $data['user_auth_id'] : null;
        $this->container['session_id'] = isset($data['session_id']) ? $data['session_id'] : null;
        $this->container['ip_address'] = isset($data['ip_address']) ? $data['ip_address'] : null;
        $this->container['forwarded_for'] = isset($data['forwarded_for']) ? $data['forwarded_for'] : null;
        $this->container['referer'] = isset($data['referer']) ? $data['referer'] : null;
        $this->container['headers'] = isset($data['headers']) ? $data['headers'] : null;
        $this->container['form_data'] = isset($data['form_data']) ? $data['form_data'] : null;
        $this->container['items'] = isset($data['items']) ? $data['items'] : null;
        $this->container['session'] = isset($data['session']) ? $data['session'] : null;
        $this->container['response_dto'] = isset($data['response_dto']) ? $data['response_dto'] : null;
        $this->container['error_response'] = isset($data['error_response']) ? $data['error_response'] : null;
        $this->container['exception_source'] = isset($data['exception_source']) ? $data['exception_source'] : null;
        $this->container['exception_data'] = isset($data['exception_data']) ? $data['exception_data'] : null;
        $this->container['request_duration'] = isset($data['request_duration']) ? $data['request_duration'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets id
     *
     * @return int
     */
    public function getId()
    {
        return $this->container['id'];
    }

    /**
     * Sets id
     *
     * @param int $id id
     *
     * @return $this
     */
    public function setId($id)
    {
        $this->container['id'] = $id;

        return $this;
    }

    /**
     * Gets date_time
     *
     * @return \DateTime
     */
    public function getDateTime()
    {
        return $this->container['date_time'];
    }

    /**
     * Sets date_time
     *
     * @param \DateTime $date_time date_time
     *
     * @return $this
     */
    public function setDateTime($date_time)
    {
        $this->container['date_time'] = $date_time;

        return $this;
    }

    /**
     * Gets status_code
     *
     * @return int
     */
    public function getStatusCode()
    {
        return $this->container['status_code'];
    }

    /**
     * Sets status_code
     *
     * @param int $status_code status_code
     *
     * @return $this
     */
    public function setStatusCode($status_code)
    {
        $this->container['status_code'] = $status_code;

        return $this;
    }

    /**
     * Gets status_description
     *
     * @return string
     */
    public function getStatusDescription()
    {
        return $this->container['status_description'];
    }

    /**
     * Sets status_description
     *
     * @param string $status_description status_description
     *
     * @return $this
     */
    public function setStatusDescription($status_description)
    {
        $this->container['status_description'] = $status_description;

        return $this;
    }

    /**
     * Gets http_method
     *
     * @return string
     */
    public function getHttpMethod()
    {
        return $this->container['http_method'];
    }

    /**
     * Sets http_method
     *
     * @param string $http_method http_method
     *
     * @return $this
     */
    public function setHttpMethod($http_method)
    {
        $this->container['http_method'] = $http_method;

        return $this;
    }

    /**
     * Gets absolute_uri
     *
     * @return string
     */
    public function getAbsoluteUri()
    {
        return $this->container['absolute_uri'];
    }

    /**
     * Sets absolute_uri
     *
     * @param string $absolute_uri absolute_uri
     *
     * @return $this
     */
    public function setAbsoluteUri($absolute_uri)
    {
        $this->container['absolute_uri'] = $absolute_uri;

        return $this;
    }

    /**
     * Gets path_info
     *
     * @return string
     */
    public function getPathInfo()
    {
        return $this->container['path_info'];
    }

    /**
     * Sets path_info
     *
     * @param string $path_info path_info
     *
     * @return $this
     */
    public function setPathInfo($path_info)
    {
        $this->container['path_info'] = $path_info;

        return $this;
    }

    /**
     * Gets request_body
     *
     * @return string
     */
    public function getRequestBody()
    {
        return $this->container['request_body'];
    }

    /**
     * Sets request_body
     *
     * @param string $request_body request_body
     *
     * @return $this
     */
    public function setRequestBody($request_body)
    {
        $this->container['request_body'] = $request_body;

        return $this;
    }

    /**
     * Gets request_dto
     *
     * @return \Jiwa\JiwaModel\Object
     */
    public function getRequestDto()
    {
        return $this->container['request_dto'];
    }

    /**
     * Sets request_dto
     *
     * @param \Jiwa\JiwaModel\Object $request_dto request_dto
     *
     * @return $this
     */
    public function setRequestDto($request_dto)
    {
        $this->container['request_dto'] = $request_dto;

        return $this;
    }

    /**
     * Gets user_auth_id
     *
     * @return string
     */
    public function getUserAuthId()
    {
        return $this->container['user_auth_id'];
    }

    /**
     * Sets user_auth_id
     *
     * @param string $user_auth_id user_auth_id
     *
     * @return $this
     */
    public function setUserAuthId($user_auth_id)
    {
        $this->container['user_auth_id'] = $user_auth_id;

        return $this;
    }

    /**
     * Gets session_id
     *
     * @return string
     */
    public function getSessionId()
    {
        return $this->container['session_id'];
    }

    /**
     * Sets session_id
     *
     * @param string $session_id session_id
     *
     * @return $this
     */
    public function setSessionId($session_id)
    {
        $this->container['session_id'] = $session_id;

        return $this;
    }

    /**
     * Gets ip_address
     *
     * @return string
     */
    public function getIpAddress()
    {
        return $this->container['ip_address'];
    }

    /**
     * Sets ip_address
     *
     * @param string $ip_address ip_address
     *
     * @return $this
     */
    public function setIpAddress($ip_address)
    {
        $this->container['ip_address'] = $ip_address;

        return $this;
    }

    /**
     * Gets forwarded_for
     *
     * @return string
     */
    public function getForwardedFor()
    {
        return $this->container['forwarded_for'];
    }

    /**
     * Sets forwarded_for
     *
     * @param string $forwarded_for forwarded_for
     *
     * @return $this
     */
    public function setForwardedFor($forwarded_for)
    {
        $this->container['forwarded_for'] = $forwarded_for;

        return $this;
    }

    /**
     * Gets referer
     *
     * @return string
     */
    public function getReferer()
    {
        return $this->container['referer'];
    }

    /**
     * Sets referer
     *
     * @param string $referer referer
     *
     * @return $this
     */
    public function setReferer($referer)
    {
        $this->container['referer'] = $referer;

        return $this;
    }

    /**
     * Gets headers
     *
     * @return \Jiwa\JiwaModel\DictionaryStringString_
     */
    public function getHeaders()
    {
        return $this->container['headers'];
    }

    /**
     * Sets headers
     *
     * @param \Jiwa\JiwaModel\DictionaryStringString_ $headers headers
     *
     * @return $this
     */
    public function setHeaders($headers)
    {
        $this->container['headers'] = $headers;

        return $this;
    }

    /**
     * Gets form_data
     *
     * @return \Jiwa\JiwaModel\DictionaryStringString_
     */
    public function getFormData()
    {
        return $this->container['form_data'];
    }

    /**
     * Sets form_data
     *
     * @param \Jiwa\JiwaModel\DictionaryStringString_ $form_data form_data
     *
     * @return $this
     */
    public function setFormData($form_data)
    {
        $this->container['form_data'] = $form_data;

        return $this;
    }

    /**
     * Gets items
     *
     * @return \Jiwa\JiwaModel\DictionaryStringString_
     */
    public function getItems()
    {
        return $this->container['items'];
    }

    /**
     * Sets items
     *
     * @param \Jiwa\JiwaModel\DictionaryStringString_ $items items
     *
     * @return $this
     */
    public function setItems($items)
    {
        $this->container['items'] = $items;

        return $this;
    }

    /**
     * Gets session
     *
     * @return \Jiwa\JiwaModel\Object
     */
    public function getSession()
    {
        return $this->container['session'];
    }

    /**
     * Sets session
     *
     * @param \Jiwa\JiwaModel\Object $session session
     *
     * @return $this
     */
    public function setSession($session)
    {
        $this->container['session'] = $session;

        return $this;
    }

    /**
     * Gets response_dto
     *
     * @return \Jiwa\JiwaModel\Object
     */
    public function getResponseDto()
    {
        return $this->container['response_dto'];
    }

    /**
     * Sets response_dto
     *
     * @param \Jiwa\JiwaModel\Object $response_dto response_dto
     *
     * @return $this
     */
    public function setResponseDto($response_dto)
    {
        $this->container['response_dto'] = $response_dto;

        return $this;
    }

    /**
     * Gets error_response
     *
     * @return \Jiwa\JiwaModel\Object
     */
    public function getErrorResponse()
    {
        return $this->container['error_response'];
    }

    /**
     * Sets error_response
     *
     * @param \Jiwa\JiwaModel\Object $error_response error_response
     *
     * @return $this
     */
    public function setErrorResponse($error_response)
    {
        $this->container['error_response'] = $error_response;

        return $this;
    }

    /**
     * Gets exception_source
     *
     * @return string
     */
    public function getExceptionSource()
    {
        return $this->container['exception_source'];
    }

    /**
     * Sets exception_source
     *
     * @param string $exception_source exception_source
     *
     * @return $this
     */
    public function setExceptionSource($exception_source)
    {
        $this->container['exception_source'] = $exception_source;

        return $this;
    }

    /**
     * Gets exception_data
     *
     * @return \Jiwa\JiwaModel\IDictionary
     */
    public function getExceptionData()
    {
        return $this->container['exception_data'];
    }

    /**
     * Sets exception_data
     *
     * @param \Jiwa\JiwaModel\IDictionary $exception_data exception_data
     *
     * @return $this
     */
    public function setExceptionData($exception_data)
    {
        $this->container['exception_data'] = $exception_data;

        return $this;
    }

    /**
     * Gets request_duration
     *
     * @return string
     */
    public function getRequestDuration()
    {
        return $this->container['request_duration'];
    }

    /**
     * Sets request_duration
     *
     * @param string $request_duration request_duration
     *
     * @return $this
     */
    public function setRequestDuration($request_duration)
    {
        $this->container['request_duration'] = $request_duration;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(
                ObjectSerializer::sanitizeForSerialization($this),
                JSON_PRETTY_PRINT
            );
        }

        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}



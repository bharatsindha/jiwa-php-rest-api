<?php
/**
 * GLSets
 *
 * PHP version 5
 *
 * @category Class
 * @package  Jiwa
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * JiwaAPI
 *
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: 1.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 * Swagger Codegen version: 2.4.28-SNAPSHOT
 */

/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Jiwa\Model;

use \ArrayAccess;
use \Jiwa\ObjectSerializer;

/**
 * GLSets Class Doc Comment
 *
 * @category Class
 * @description GL_Sets
 * @package  Jiwa
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class GLSets implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $swaggerModelName = 'GL_Sets';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerTypes = [
        'gl_set_id' => 'string',
        'last_saved_date_time' => '\DateTime',
        'set_no' => 'string',
        'post_date_time' => '\DateTime',
        'posted_to_period_no' => 'int',
        'description' => 'string',
        'source' => 'string',
        'source_id' => 'string',
        'user_name' => 'string',
        'set_type' => 'int',
        'repeating_type' => 'int',
        'repeating_units' => 'int',
        'next_repeating_date' => '\DateTime',
        'repeating_will_end' => 'bool',
        'repeating_end_date' => '\DateTime',
        'reverse_type' => 'int',
        'reverse_period' => 'int',
        'reverse_date' => '\DateTime',
        'reversed' => 'bool',
        'year_no' => 'int'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerFormats = [
        'gl_set_id' => null,
        'last_saved_date_time' => 'date-time',
        'set_no' => null,
        'post_date_time' => 'date-time',
        'posted_to_period_no' => 'int32',
        'description' => null,
        'source' => null,
        'source_id' => null,
        'user_name' => null,
        'set_type' => 'int32',
        'repeating_type' => 'int32',
        'repeating_units' => 'int32',
        'next_repeating_date' => 'date-time',
        'repeating_will_end' => null,
        'repeating_end_date' => 'date-time',
        'reverse_type' => 'int32',
        'reverse_period' => 'int32',
        'reverse_date' => 'date-time',
        'reversed' => null,
        'year_no' => 'int32'
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerFormats()
    {
        return self::$swaggerFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'gl_set_id' => 'GLSetID',
        'last_saved_date_time' => 'LastSavedDateTime',
        'set_no' => 'SetNo',
        'post_date_time' => 'PostDateTime',
        'posted_to_period_no' => 'PostedToPeriodNo',
        'description' => 'Description',
        'source' => 'Source',
        'source_id' => 'SourceID',
        'user_name' => 'UserName',
        'set_type' => 'SetType',
        'repeating_type' => 'RepeatingType',
        'repeating_units' => 'RepeatingUnits',
        'next_repeating_date' => 'NextRepeatingDate',
        'repeating_will_end' => 'RepeatingWillEnd',
        'repeating_end_date' => 'RepeatingEndDate',
        'reverse_type' => 'ReverseType',
        'reverse_period' => 'ReversePeriod',
        'reverse_date' => 'ReverseDate',
        'reversed' => 'Reversed',
        'year_no' => 'YearNo'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'gl_set_id' => 'setGlSetId',
        'last_saved_date_time' => 'setLastSavedDateTime',
        'set_no' => 'setSetNo',
        'post_date_time' => 'setPostDateTime',
        'posted_to_period_no' => 'setPostedToPeriodNo',
        'description' => 'setDescription',
        'source' => 'setSource',
        'source_id' => 'setSourceId',
        'user_name' => 'setUserName',
        'set_type' => 'setSetType',
        'repeating_type' => 'setRepeatingType',
        'repeating_units' => 'setRepeatingUnits',
        'next_repeating_date' => 'setNextRepeatingDate',
        'repeating_will_end' => 'setRepeatingWillEnd',
        'repeating_end_date' => 'setRepeatingEndDate',
        'reverse_type' => 'setReverseType',
        'reverse_period' => 'setReversePeriod',
        'reverse_date' => 'setReverseDate',
        'reversed' => 'setReversed',
        'year_no' => 'setYearNo'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'gl_set_id' => 'getGlSetId',
        'last_saved_date_time' => 'getLastSavedDateTime',
        'set_no' => 'getSetNo',
        'post_date_time' => 'getPostDateTime',
        'posted_to_period_no' => 'getPostedToPeriodNo',
        'description' => 'getDescription',
        'source' => 'getSource',
        'source_id' => 'getSourceId',
        'user_name' => 'getUserName',
        'set_type' => 'getSetType',
        'repeating_type' => 'getRepeatingType',
        'repeating_units' => 'getRepeatingUnits',
        'next_repeating_date' => 'getNextRepeatingDate',
        'repeating_will_end' => 'getRepeatingWillEnd',
        'repeating_end_date' => 'getRepeatingEndDate',
        'reverse_type' => 'getReverseType',
        'reverse_period' => 'getReversePeriod',
        'reverse_date' => 'getReverseDate',
        'reversed' => 'getReversed',
        'year_no' => 'getYearNo'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$swaggerModelName;
    }

    

    

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['gl_set_id'] = isset($data['gl_set_id']) ? $data['gl_set_id'] : null;
        $this->container['last_saved_date_time'] = isset($data['last_saved_date_time']) ? $data['last_saved_date_time'] : null;
        $this->container['set_no'] = isset($data['set_no']) ? $data['set_no'] : null;
        $this->container['post_date_time'] = isset($data['post_date_time']) ? $data['post_date_time'] : null;
        $this->container['posted_to_period_no'] = isset($data['posted_to_period_no']) ? $data['posted_to_period_no'] : null;
        $this->container['description'] = isset($data['description']) ? $data['description'] : null;
        $this->container['source'] = isset($data['source']) ? $data['source'] : null;
        $this->container['source_id'] = isset($data['source_id']) ? $data['source_id'] : null;
        $this->container['user_name'] = isset($data['user_name']) ? $data['user_name'] : null;
        $this->container['set_type'] = isset($data['set_type']) ? $data['set_type'] : null;
        $this->container['repeating_type'] = isset($data['repeating_type']) ? $data['repeating_type'] : null;
        $this->container['repeating_units'] = isset($data['repeating_units']) ? $data['repeating_units'] : null;
        $this->container['next_repeating_date'] = isset($data['next_repeating_date']) ? $data['next_repeating_date'] : null;
        $this->container['repeating_will_end'] = isset($data['repeating_will_end']) ? $data['repeating_will_end'] : null;
        $this->container['repeating_end_date'] = isset($data['repeating_end_date']) ? $data['repeating_end_date'] : null;
        $this->container['reverse_type'] = isset($data['reverse_type']) ? $data['reverse_type'] : null;
        $this->container['reverse_period'] = isset($data['reverse_period']) ? $data['reverse_period'] : null;
        $this->container['reverse_date'] = isset($data['reverse_date']) ? $data['reverse_date'] : null;
        $this->container['reversed'] = isset($data['reversed']) ? $data['reversed'] : null;
        $this->container['year_no'] = isset($data['year_no']) ? $data['year_no'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets gl_set_id
     *
     * @return string
     */
    public function getGlSetId()
    {
        return $this->container['gl_set_id'];
    }

    /**
     * Sets gl_set_id
     *
     * @param string $gl_set_id gl_set_id
     *
     * @return $this
     */
    public function setGlSetId($gl_set_id)
    {
        $this->container['gl_set_id'] = $gl_set_id;

        return $this;
    }

    /**
     * Gets last_saved_date_time
     *
     * @return \DateTime
     */
    public function getLastSavedDateTime()
    {
        return $this->container['last_saved_date_time'];
    }

    /**
     * Sets last_saved_date_time
     *
     * @param \DateTime $last_saved_date_time last_saved_date_time
     *
     * @return $this
     */
    public function setLastSavedDateTime($last_saved_date_time)
    {
        $this->container['last_saved_date_time'] = $last_saved_date_time;

        return $this;
    }

    /**
     * Gets set_no
     *
     * @return string
     */
    public function getSetNo()
    {
        return $this->container['set_no'];
    }

    /**
     * Sets set_no
     *
     * @param string $set_no set_no
     *
     * @return $this
     */
    public function setSetNo($set_no)
    {
        $this->container['set_no'] = $set_no;

        return $this;
    }

    /**
     * Gets post_date_time
     *
     * @return \DateTime
     */
    public function getPostDateTime()
    {
        return $this->container['post_date_time'];
    }

    /**
     * Sets post_date_time
     *
     * @param \DateTime $post_date_time post_date_time
     *
     * @return $this
     */
    public function setPostDateTime($post_date_time)
    {
        $this->container['post_date_time'] = $post_date_time;

        return $this;
    }

    /**
     * Gets posted_to_period_no
     *
     * @return int
     */
    public function getPostedToPeriodNo()
    {
        return $this->container['posted_to_period_no'];
    }

    /**
     * Sets posted_to_period_no
     *
     * @param int $posted_to_period_no posted_to_period_no
     *
     * @return $this
     */
    public function setPostedToPeriodNo($posted_to_period_no)
    {
        $this->container['posted_to_period_no'] = $posted_to_period_no;

        return $this;
    }

    /**
     * Gets description
     *
     * @return string
     */
    public function getDescription()
    {
        return $this->container['description'];
    }

    /**
     * Sets description
     *
     * @param string $description description
     *
     * @return $this
     */
    public function setDescription($description)
    {
        $this->container['description'] = $description;

        return $this;
    }

    /**
     * Gets source
     *
     * @return string
     */
    public function getSource()
    {
        return $this->container['source'];
    }

    /**
     * Sets source
     *
     * @param string $source source
     *
     * @return $this
     */
    public function setSource($source)
    {
        $this->container['source'] = $source;

        return $this;
    }

    /**
     * Gets source_id
     *
     * @return string
     */
    public function getSourceId()
    {
        return $this->container['source_id'];
    }

    /**
     * Sets source_id
     *
     * @param string $source_id source_id
     *
     * @return $this
     */
    public function setSourceId($source_id)
    {
        $this->container['source_id'] = $source_id;

        return $this;
    }

    /**
     * Gets user_name
     *
     * @return string
     */
    public function getUserName()
    {
        return $this->container['user_name'];
    }

    /**
     * Sets user_name
     *
     * @param string $user_name user_name
     *
     * @return $this
     */
    public function setUserName($user_name)
    {
        $this->container['user_name'] = $user_name;

        return $this;
    }

    /**
     * Gets set_type
     *
     * @return int
     */
    public function getSetType()
    {
        return $this->container['set_type'];
    }

    /**
     * Sets set_type
     *
     * @param int $set_type set_type
     *
     * @return $this
     */
    public function setSetType($set_type)
    {
        $this->container['set_type'] = $set_type;

        return $this;
    }

    /**
     * Gets repeating_type
     *
     * @return int
     */
    public function getRepeatingType()
    {
        return $this->container['repeating_type'];
    }

    /**
     * Sets repeating_type
     *
     * @param int $repeating_type repeating_type
     *
     * @return $this
     */
    public function setRepeatingType($repeating_type)
    {
        $this->container['repeating_type'] = $repeating_type;

        return $this;
    }

    /**
     * Gets repeating_units
     *
     * @return int
     */
    public function getRepeatingUnits()
    {
        return $this->container['repeating_units'];
    }

    /**
     * Sets repeating_units
     *
     * @param int $repeating_units repeating_units
     *
     * @return $this
     */
    public function setRepeatingUnits($repeating_units)
    {
        $this->container['repeating_units'] = $repeating_units;

        return $this;
    }

    /**
     * Gets next_repeating_date
     *
     * @return \DateTime
     */
    public function getNextRepeatingDate()
    {
        return $this->container['next_repeating_date'];
    }

    /**
     * Sets next_repeating_date
     *
     * @param \DateTime $next_repeating_date next_repeating_date
     *
     * @return $this
     */
    public function setNextRepeatingDate($next_repeating_date)
    {
        $this->container['next_repeating_date'] = $next_repeating_date;

        return $this;
    }

    /**
     * Gets repeating_will_end
     *
     * @return bool
     */
    public function getRepeatingWillEnd()
    {
        return $this->container['repeating_will_end'];
    }

    /**
     * Sets repeating_will_end
     *
     * @param bool $repeating_will_end repeating_will_end
     *
     * @return $this
     */
    public function setRepeatingWillEnd($repeating_will_end)
    {
        $this->container['repeating_will_end'] = $repeating_will_end;

        return $this;
    }

    /**
     * Gets repeating_end_date
     *
     * @return \DateTime
     */
    public function getRepeatingEndDate()
    {
        return $this->container['repeating_end_date'];
    }

    /**
     * Sets repeating_end_date
     *
     * @param \DateTime $repeating_end_date repeating_end_date
     *
     * @return $this
     */
    public function setRepeatingEndDate($repeating_end_date)
    {
        $this->container['repeating_end_date'] = $repeating_end_date;

        return $this;
    }

    /**
     * Gets reverse_type
     *
     * @return int
     */
    public function getReverseType()
    {
        return $this->container['reverse_type'];
    }

    /**
     * Sets reverse_type
     *
     * @param int $reverse_type reverse_type
     *
     * @return $this
     */
    public function setReverseType($reverse_type)
    {
        $this->container['reverse_type'] = $reverse_type;

        return $this;
    }

    /**
     * Gets reverse_period
     *
     * @return int
     */
    public function getReversePeriod()
    {
        return $this->container['reverse_period'];
    }

    /**
     * Sets reverse_period
     *
     * @param int $reverse_period reverse_period
     *
     * @return $this
     */
    public function setReversePeriod($reverse_period)
    {
        $this->container['reverse_period'] = $reverse_period;

        return $this;
    }

    /**
     * Gets reverse_date
     *
     * @return \DateTime
     */
    public function getReverseDate()
    {
        return $this->container['reverse_date'];
    }

    /**
     * Sets reverse_date
     *
     * @param \DateTime $reverse_date reverse_date
     *
     * @return $this
     */
    public function setReverseDate($reverse_date)
    {
        $this->container['reverse_date'] = $reverse_date;

        return $this;
    }

    /**
     * Gets reversed
     *
     * @return bool
     */
    public function getReversed()
    {
        return $this->container['reversed'];
    }

    /**
     * Sets reversed
     *
     * @param bool $reversed reversed
     *
     * @return $this
     */
    public function setReversed($reversed)
    {
        $this->container['reversed'] = $reversed;

        return $this;
    }

    /**
     * Gets year_no
     *
     * @return int
     */
    public function getYearNo()
    {
        return $this->container['year_no'];
    }

    /**
     * Sets year_no
     *
     * @param int $year_no year_no
     *
     * @return $this
     */
    public function setYearNo($year_no)
    {
        $this->container['year_no'] = $year_no;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(
                ObjectSerializer::sanitizeForSerialization($this),
                JSON_PRETTY_PRINT
            );
        }

        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}



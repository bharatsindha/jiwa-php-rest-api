<?php
/**
 * TXMain
 *
 * PHP version 5
 *
 * @category Class
 * @package  Jiwa
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * JiwaAPI
 *
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: 1.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 * Swagger Codegen version: 2.4.28-SNAPSHOT
 */

/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Jiwa\JiwaModel;

use \ArrayAccess;
use \Jiwa\ObjectSerializer;

/**
 * TXMain Class Doc Comment
 *
 * @category Class
 * @description TX_Main
 * @package  Jiwa
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class TXMain implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $swaggerModelName = 'TX_Main';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerTypes = [
        'tax_id' => 'string',
        'description' => 'string',
        'tax_rate' => 'double',
        'last_saved_date_time' => '\DateTime',
        's1' => 'string',
        's2' => 'string',
        's3' => 'string',
        's4' => 'string',
        'default_rate' => 'int',
        'gst_tax_group' => 'int',
        'default_rate_in_group' => 'bool',
        'bas_code' => 'int',
        'disabled' => 'bool'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerFormats = [
        'tax_id' => null,
        'description' => null,
        'tax_rate' => 'double',
        'last_saved_date_time' => 'date-time',
        's1' => null,
        's2' => null,
        's3' => null,
        's4' => null,
        'default_rate' => 'int32',
        'gst_tax_group' => 'int32',
        'default_rate_in_group' => null,
        'bas_code' => 'int32',
        'disabled' => null
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerFormats()
    {
        return self::$swaggerFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'tax_id' => 'TaxID',
        'description' => 'Description',
        'tax_rate' => 'TaxRate',
        'last_saved_date_time' => 'LastSavedDateTime',
        's1' => 'S1',
        's2' => 'S2',
        's3' => 'S3',
        's4' => 'S4',
        'default_rate' => 'DefaultRate',
        'gst_tax_group' => 'GSTTaxGroup',
        'default_rate_in_group' => 'DefaultRateInGroup',
        'bas_code' => 'BASCode',
        'disabled' => 'Disabled'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'tax_id' => 'setTaxId',
        'description' => 'setDescription',
        'tax_rate' => 'setTaxRate',
        'last_saved_date_time' => 'setLastSavedDateTime',
        's1' => 'setS1',
        's2' => 'setS2',
        's3' => 'setS3',
        's4' => 'setS4',
        'default_rate' => 'setDefaultRate',
        'gst_tax_group' => 'setGstTaxGroup',
        'default_rate_in_group' => 'setDefaultRateInGroup',
        'bas_code' => 'setBasCode',
        'disabled' => 'setDisabled'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'tax_id' => 'getTaxId',
        'description' => 'getDescription',
        'tax_rate' => 'getTaxRate',
        'last_saved_date_time' => 'getLastSavedDateTime',
        's1' => 'getS1',
        's2' => 'getS2',
        's3' => 'getS3',
        's4' => 'getS4',
        'default_rate' => 'getDefaultRate',
        'gst_tax_group' => 'getGstTaxGroup',
        'default_rate_in_group' => 'getDefaultRateInGroup',
        'bas_code' => 'getBasCode',
        'disabled' => 'getDisabled'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$swaggerModelName;
    }

    

    

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['tax_id'] = isset($data['tax_id']) ? $data['tax_id'] : null;
        $this->container['description'] = isset($data['description']) ? $data['description'] : null;
        $this->container['tax_rate'] = isset($data['tax_rate']) ? $data['tax_rate'] : null;
        $this->container['last_saved_date_time'] = isset($data['last_saved_date_time']) ? $data['last_saved_date_time'] : null;
        $this->container['s1'] = isset($data['s1']) ? $data['s1'] : null;
        $this->container['s2'] = isset($data['s2']) ? $data['s2'] : null;
        $this->container['s3'] = isset($data['s3']) ? $data['s3'] : null;
        $this->container['s4'] = isset($data['s4']) ? $data['s4'] : null;
        $this->container['default_rate'] = isset($data['default_rate']) ? $data['default_rate'] : null;
        $this->container['gst_tax_group'] = isset($data['gst_tax_group']) ? $data['gst_tax_group'] : null;
        $this->container['default_rate_in_group'] = isset($data['default_rate_in_group']) ? $data['default_rate_in_group'] : null;
        $this->container['bas_code'] = isset($data['bas_code']) ? $data['bas_code'] : null;
        $this->container['disabled'] = isset($data['disabled']) ? $data['disabled'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets tax_id
     *
     * @return string
     */
    public function getTaxId()
    {
        return $this->container['tax_id'];
    }

    /**
     * Sets tax_id
     *
     * @param string $tax_id tax_id
     *
     * @return $this
     */
    public function setTaxId($tax_id)
    {
        $this->container['tax_id'] = $tax_id;

        return $this;
    }

    /**
     * Gets description
     *
     * @return string
     */
    public function getDescription()
    {
        return $this->container['description'];
    }

    /**
     * Sets description
     *
     * @param string $description description
     *
     * @return $this
     */
    public function setDescription($description)
    {
        $this->container['description'] = $description;

        return $this;
    }

    /**
     * Gets tax_rate
     *
     * @return double
     */
    public function getTaxRate()
    {
        return $this->container['tax_rate'];
    }

    /**
     * Sets tax_rate
     *
     * @param double $tax_rate tax_rate
     *
     * @return $this
     */
    public function setTaxRate($tax_rate)
    {
        $this->container['tax_rate'] = $tax_rate;

        return $this;
    }

    /**
     * Gets last_saved_date_time
     *
     * @return \DateTime
     */
    public function getLastSavedDateTime()
    {
        return $this->container['last_saved_date_time'];
    }

    /**
     * Sets last_saved_date_time
     *
     * @param \DateTime $last_saved_date_time last_saved_date_time
     *
     * @return $this
     */
    public function setLastSavedDateTime($last_saved_date_time)
    {
        $this->container['last_saved_date_time'] = $last_saved_date_time;

        return $this;
    }

    /**
     * Gets s1
     *
     * @return string
     */
    public function getS1()
    {
        return $this->container['s1'];
    }

    /**
     * Sets s1
     *
     * @param string $s1 s1
     *
     * @return $this
     */
    public function setS1($s1)
    {
        $this->container['s1'] = $s1;

        return $this;
    }

    /**
     * Gets s2
     *
     * @return string
     */
    public function getS2()
    {
        return $this->container['s2'];
    }

    /**
     * Sets s2
     *
     * @param string $s2 s2
     *
     * @return $this
     */
    public function setS2($s2)
    {
        $this->container['s2'] = $s2;

        return $this;
    }

    /**
     * Gets s3
     *
     * @return string
     */
    public function getS3()
    {
        return $this->container['s3'];
    }

    /**
     * Sets s3
     *
     * @param string $s3 s3
     *
     * @return $this
     */
    public function setS3($s3)
    {
        $this->container['s3'] = $s3;

        return $this;
    }

    /**
     * Gets s4
     *
     * @return string
     */
    public function getS4()
    {
        return $this->container['s4'];
    }

    /**
     * Sets s4
     *
     * @param string $s4 s4
     *
     * @return $this
     */
    public function setS4($s4)
    {
        $this->container['s4'] = $s4;

        return $this;
    }

    /**
     * Gets default_rate
     *
     * @return int
     */
    public function getDefaultRate()
    {
        return $this->container['default_rate'];
    }

    /**
     * Sets default_rate
     *
     * @param int $default_rate default_rate
     *
     * @return $this
     */
    public function setDefaultRate($default_rate)
    {
        $this->container['default_rate'] = $default_rate;

        return $this;
    }

    /**
     * Gets gst_tax_group
     *
     * @return int
     */
    public function getGstTaxGroup()
    {
        return $this->container['gst_tax_group'];
    }

    /**
     * Sets gst_tax_group
     *
     * @param int $gst_tax_group gst_tax_group
     *
     * @return $this
     */
    public function setGstTaxGroup($gst_tax_group)
    {
        $this->container['gst_tax_group'] = $gst_tax_group;

        return $this;
    }

    /**
     * Gets default_rate_in_group
     *
     * @return bool
     */
    public function getDefaultRateInGroup()
    {
        return $this->container['default_rate_in_group'];
    }

    /**
     * Sets default_rate_in_group
     *
     * @param bool $default_rate_in_group default_rate_in_group
     *
     * @return $this
     */
    public function setDefaultRateInGroup($default_rate_in_group)
    {
        $this->container['default_rate_in_group'] = $default_rate_in_group;

        return $this;
    }

    /**
     * Gets bas_code
     *
     * @return int
     */
    public function getBasCode()
    {
        return $this->container['bas_code'];
    }

    /**
     * Sets bas_code
     *
     * @param int $bas_code bas_code
     *
     * @return $this
     */
    public function setBasCode($bas_code)
    {
        $this->container['bas_code'] = $bas_code;

        return $this;
    }

    /**
     * Gets disabled
     *
     * @return bool
     */
    public function getDisabled()
    {
        return $this->container['disabled'];
    }

    /**
     * Sets disabled
     *
     * @param bool $disabled disabled
     *
     * @return $this
     */
    public function setDisabled($disabled)
    {
        $this->container['disabled'] = $disabled;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(
                ObjectSerializer::sanitizeForSerialization($this),
                JSON_PRETTY_PRINT
            );
        }

        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}



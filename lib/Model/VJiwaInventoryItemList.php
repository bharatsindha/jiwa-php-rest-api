<?php
/**
 * VJiwaInventoryItemList
 *
 * PHP version 5
 *
 * @category Class
 * @package  Jiwa
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * JiwaAPI
 *
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: 1.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 * Swagger Codegen version: 2.4.28-SNAPSHOT
 */

/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Jiwa\Model;

use \ArrayAccess;
use \Jiwa\ObjectSerializer;

/**
 * VJiwaInventoryItemList Class Doc Comment
 *
 * @category Class
 * @description v_Jiwa_Inventory_Item_List
 * @package  Jiwa
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class VJiwaInventoryItemList implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $swaggerModelName = 'v_Jiwa_Inventory_Item_List';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerTypes = [
        'inventory_id' => 'string',
        'part_no' => 'string',
        'description' => 'string',
        'picture' => 'string',
        'inventory_classification_id' => 'string',
        'classification_description' => 'string',
        'category1_id' => 'string',
        'category1_description' => 'string',
        'category2_id' => 'string',
        'category2_description' => 'string',
        'category3_id' => 'string',
        'category3_description' => 'string',
        'category4_id' => 'string',
        'category4_description' => 'string',
        'category5_id' => 'string',
        'category5_description' => 'string',
        'in_logical_id' => 'string',
        'logical_warehouse_description' => 'string',
        'in_physical_id' => 'string',
        'physical_warehouse_description' => 'string',
        'available_stock' => 'double',
        'sell_price' => 'double',
        'rrp_price' => 'double',
        'last_saved_date_time' => '\DateTime'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerFormats = [
        'inventory_id' => null,
        'part_no' => null,
        'description' => null,
        'picture' => 'binary',
        'inventory_classification_id' => null,
        'classification_description' => null,
        'category1_id' => null,
        'category1_description' => null,
        'category2_id' => null,
        'category2_description' => null,
        'category3_id' => null,
        'category3_description' => null,
        'category4_id' => null,
        'category4_description' => null,
        'category5_id' => null,
        'category5_description' => null,
        'in_logical_id' => null,
        'logical_warehouse_description' => null,
        'in_physical_id' => null,
        'physical_warehouse_description' => null,
        'available_stock' => 'double',
        'sell_price' => 'double',
        'rrp_price' => 'double',
        'last_saved_date_time' => 'date-time'
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerFormats()
    {
        return self::$swaggerFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'inventory_id' => 'InventoryID',
        'part_no' => 'PartNo',
        'description' => 'Description',
        'picture' => 'Picture',
        'inventory_classification_id' => 'InventoryClassificationID',
        'classification_description' => 'ClassificationDescription',
        'category1_id' => 'Category1ID',
        'category1_description' => 'Category1Description',
        'category2_id' => 'Category2ID',
        'category2_description' => 'Category2Description',
        'category3_id' => 'Category3ID',
        'category3_description' => 'Category3Description',
        'category4_id' => 'Category4ID',
        'category4_description' => 'Category4Description',
        'category5_id' => 'Category5ID',
        'category5_description' => 'Category5Description',
        'in_logical_id' => 'IN_LogicalID',
        'logical_warehouse_description' => 'LogicalWarehouseDescription',
        'in_physical_id' => 'IN_PhysicalID',
        'physical_warehouse_description' => 'PhysicalWarehouseDescription',
        'available_stock' => 'AvailableStock',
        'sell_price' => 'SellPrice',
        'rrp_price' => 'RRPPrice',
        'last_saved_date_time' => 'LastSavedDateTime'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'inventory_id' => 'setInventoryId',
        'part_no' => 'setPartNo',
        'description' => 'setDescription',
        'picture' => 'setPicture',
        'inventory_classification_id' => 'setInventoryClassificationId',
        'classification_description' => 'setClassificationDescription',
        'category1_id' => 'setCategory1Id',
        'category1_description' => 'setCategory1Description',
        'category2_id' => 'setCategory2Id',
        'category2_description' => 'setCategory2Description',
        'category3_id' => 'setCategory3Id',
        'category3_description' => 'setCategory3Description',
        'category4_id' => 'setCategory4Id',
        'category4_description' => 'setCategory4Description',
        'category5_id' => 'setCategory5Id',
        'category5_description' => 'setCategory5Description',
        'in_logical_id' => 'setInLogicalId',
        'logical_warehouse_description' => 'setLogicalWarehouseDescription',
        'in_physical_id' => 'setInPhysicalId',
        'physical_warehouse_description' => 'setPhysicalWarehouseDescription',
        'available_stock' => 'setAvailableStock',
        'sell_price' => 'setSellPrice',
        'rrp_price' => 'setRrpPrice',
        'last_saved_date_time' => 'setLastSavedDateTime'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'inventory_id' => 'getInventoryId',
        'part_no' => 'getPartNo',
        'description' => 'getDescription',
        'picture' => 'getPicture',
        'inventory_classification_id' => 'getInventoryClassificationId',
        'classification_description' => 'getClassificationDescription',
        'category1_id' => 'getCategory1Id',
        'category1_description' => 'getCategory1Description',
        'category2_id' => 'getCategory2Id',
        'category2_description' => 'getCategory2Description',
        'category3_id' => 'getCategory3Id',
        'category3_description' => 'getCategory3Description',
        'category4_id' => 'getCategory4Id',
        'category4_description' => 'getCategory4Description',
        'category5_id' => 'getCategory5Id',
        'category5_description' => 'getCategory5Description',
        'in_logical_id' => 'getInLogicalId',
        'logical_warehouse_description' => 'getLogicalWarehouseDescription',
        'in_physical_id' => 'getInPhysicalId',
        'physical_warehouse_description' => 'getPhysicalWarehouseDescription',
        'available_stock' => 'getAvailableStock',
        'sell_price' => 'getSellPrice',
        'rrp_price' => 'getRrpPrice',
        'last_saved_date_time' => 'getLastSavedDateTime'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$swaggerModelName;
    }

    

    

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['inventory_id'] = isset($data['inventory_id']) ? $data['inventory_id'] : null;
        $this->container['part_no'] = isset($data['part_no']) ? $data['part_no'] : null;
        $this->container['description'] = isset($data['description']) ? $data['description'] : null;
        $this->container['picture'] = isset($data['picture']) ? $data['picture'] : null;
        $this->container['inventory_classification_id'] = isset($data['inventory_classification_id']) ? $data['inventory_classification_id'] : null;
        $this->container['classification_description'] = isset($data['classification_description']) ? $data['classification_description'] : null;
        $this->container['category1_id'] = isset($data['category1_id']) ? $data['category1_id'] : null;
        $this->container['category1_description'] = isset($data['category1_description']) ? $data['category1_description'] : null;
        $this->container['category2_id'] = isset($data['category2_id']) ? $data['category2_id'] : null;
        $this->container['category2_description'] = isset($data['category2_description']) ? $data['category2_description'] : null;
        $this->container['category3_id'] = isset($data['category3_id']) ? $data['category3_id'] : null;
        $this->container['category3_description'] = isset($data['category3_description']) ? $data['category3_description'] : null;
        $this->container['category4_id'] = isset($data['category4_id']) ? $data['category4_id'] : null;
        $this->container['category4_description'] = isset($data['category4_description']) ? $data['category4_description'] : null;
        $this->container['category5_id'] = isset($data['category5_id']) ? $data['category5_id'] : null;
        $this->container['category5_description'] = isset($data['category5_description']) ? $data['category5_description'] : null;
        $this->container['in_logical_id'] = isset($data['in_logical_id']) ? $data['in_logical_id'] : null;
        $this->container['logical_warehouse_description'] = isset($data['logical_warehouse_description']) ? $data['logical_warehouse_description'] : null;
        $this->container['in_physical_id'] = isset($data['in_physical_id']) ? $data['in_physical_id'] : null;
        $this->container['physical_warehouse_description'] = isset($data['physical_warehouse_description']) ? $data['physical_warehouse_description'] : null;
        $this->container['available_stock'] = isset($data['available_stock']) ? $data['available_stock'] : null;
        $this->container['sell_price'] = isset($data['sell_price']) ? $data['sell_price'] : null;
        $this->container['rrp_price'] = isset($data['rrp_price']) ? $data['rrp_price'] : null;
        $this->container['last_saved_date_time'] = isset($data['last_saved_date_time']) ? $data['last_saved_date_time'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets inventory_id
     *
     * @return string
     */
    public function getInventoryId()
    {
        return $this->container['inventory_id'];
    }

    /**
     * Sets inventory_id
     *
     * @param string $inventory_id inventory_id
     *
     * @return $this
     */
    public function setInventoryId($inventory_id)
    {
        $this->container['inventory_id'] = $inventory_id;

        return $this;
    }

    /**
     * Gets part_no
     *
     * @return string
     */
    public function getPartNo()
    {
        return $this->container['part_no'];
    }

    /**
     * Sets part_no
     *
     * @param string $part_no part_no
     *
     * @return $this
     */
    public function setPartNo($part_no)
    {
        $this->container['part_no'] = $part_no;

        return $this;
    }

    /**
     * Gets description
     *
     * @return string
     */
    public function getDescription()
    {
        return $this->container['description'];
    }

    /**
     * Sets description
     *
     * @param string $description description
     *
     * @return $this
     */
    public function setDescription($description)
    {
        $this->container['description'] = $description;

        return $this;
    }

    /**
     * Gets picture
     *
     * @return string
     */
    public function getPicture()
    {
        return $this->container['picture'];
    }

    /**
     * Sets picture
     *
     * @param string $picture picture
     *
     * @return $this
     */
    public function setPicture($picture)
    {
        $this->container['picture'] = $picture;

        return $this;
    }

    /**
     * Gets inventory_classification_id
     *
     * @return string
     */
    public function getInventoryClassificationId()
    {
        return $this->container['inventory_classification_id'];
    }

    /**
     * Sets inventory_classification_id
     *
     * @param string $inventory_classification_id inventory_classification_id
     *
     * @return $this
     */
    public function setInventoryClassificationId($inventory_classification_id)
    {
        $this->container['inventory_classification_id'] = $inventory_classification_id;

        return $this;
    }

    /**
     * Gets classification_description
     *
     * @return string
     */
    public function getClassificationDescription()
    {
        return $this->container['classification_description'];
    }

    /**
     * Sets classification_description
     *
     * @param string $classification_description classification_description
     *
     * @return $this
     */
    public function setClassificationDescription($classification_description)
    {
        $this->container['classification_description'] = $classification_description;

        return $this;
    }

    /**
     * Gets category1_id
     *
     * @return string
     */
    public function getCategory1Id()
    {
        return $this->container['category1_id'];
    }

    /**
     * Sets category1_id
     *
     * @param string $category1_id category1_id
     *
     * @return $this
     */
    public function setCategory1Id($category1_id)
    {
        $this->container['category1_id'] = $category1_id;

        return $this;
    }

    /**
     * Gets category1_description
     *
     * @return string
     */
    public function getCategory1Description()
    {
        return $this->container['category1_description'];
    }

    /**
     * Sets category1_description
     *
     * @param string $category1_description category1_description
     *
     * @return $this
     */
    public function setCategory1Description($category1_description)
    {
        $this->container['category1_description'] = $category1_description;

        return $this;
    }

    /**
     * Gets category2_id
     *
     * @return string
     */
    public function getCategory2Id()
    {
        return $this->container['category2_id'];
    }

    /**
     * Sets category2_id
     *
     * @param string $category2_id category2_id
     *
     * @return $this
     */
    public function setCategory2Id($category2_id)
    {
        $this->container['category2_id'] = $category2_id;

        return $this;
    }

    /**
     * Gets category2_description
     *
     * @return string
     */
    public function getCategory2Description()
    {
        return $this->container['category2_description'];
    }

    /**
     * Sets category2_description
     *
     * @param string $category2_description category2_description
     *
     * @return $this
     */
    public function setCategory2Description($category2_description)
    {
        $this->container['category2_description'] = $category2_description;

        return $this;
    }

    /**
     * Gets category3_id
     *
     * @return string
     */
    public function getCategory3Id()
    {
        return $this->container['category3_id'];
    }

    /**
     * Sets category3_id
     *
     * @param string $category3_id category3_id
     *
     * @return $this
     */
    public function setCategory3Id($category3_id)
    {
        $this->container['category3_id'] = $category3_id;

        return $this;
    }

    /**
     * Gets category3_description
     *
     * @return string
     */
    public function getCategory3Description()
    {
        return $this->container['category3_description'];
    }

    /**
     * Sets category3_description
     *
     * @param string $category3_description category3_description
     *
     * @return $this
     */
    public function setCategory3Description($category3_description)
    {
        $this->container['category3_description'] = $category3_description;

        return $this;
    }

    /**
     * Gets category4_id
     *
     * @return string
     */
    public function getCategory4Id()
    {
        return $this->container['category4_id'];
    }

    /**
     * Sets category4_id
     *
     * @param string $category4_id category4_id
     *
     * @return $this
     */
    public function setCategory4Id($category4_id)
    {
        $this->container['category4_id'] = $category4_id;

        return $this;
    }

    /**
     * Gets category4_description
     *
     * @return string
     */
    public function getCategory4Description()
    {
        return $this->container['category4_description'];
    }

    /**
     * Sets category4_description
     *
     * @param string $category4_description category4_description
     *
     * @return $this
     */
    public function setCategory4Description($category4_description)
    {
        $this->container['category4_description'] = $category4_description;

        return $this;
    }

    /**
     * Gets category5_id
     *
     * @return string
     */
    public function getCategory5Id()
    {
        return $this->container['category5_id'];
    }

    /**
     * Sets category5_id
     *
     * @param string $category5_id category5_id
     *
     * @return $this
     */
    public function setCategory5Id($category5_id)
    {
        $this->container['category5_id'] = $category5_id;

        return $this;
    }

    /**
     * Gets category5_description
     *
     * @return string
     */
    public function getCategory5Description()
    {
        return $this->container['category5_description'];
    }

    /**
     * Sets category5_description
     *
     * @param string $category5_description category5_description
     *
     * @return $this
     */
    public function setCategory5Description($category5_description)
    {
        $this->container['category5_description'] = $category5_description;

        return $this;
    }

    /**
     * Gets in_logical_id
     *
     * @return string
     */
    public function getInLogicalId()
    {
        return $this->container['in_logical_id'];
    }

    /**
     * Sets in_logical_id
     *
     * @param string $in_logical_id in_logical_id
     *
     * @return $this
     */
    public function setInLogicalId($in_logical_id)
    {
        $this->container['in_logical_id'] = $in_logical_id;

        return $this;
    }

    /**
     * Gets logical_warehouse_description
     *
     * @return string
     */
    public function getLogicalWarehouseDescription()
    {
        return $this->container['logical_warehouse_description'];
    }

    /**
     * Sets logical_warehouse_description
     *
     * @param string $logical_warehouse_description logical_warehouse_description
     *
     * @return $this
     */
    public function setLogicalWarehouseDescription($logical_warehouse_description)
    {
        $this->container['logical_warehouse_description'] = $logical_warehouse_description;

        return $this;
    }

    /**
     * Gets in_physical_id
     *
     * @return string
     */
    public function getInPhysicalId()
    {
        return $this->container['in_physical_id'];
    }

    /**
     * Sets in_physical_id
     *
     * @param string $in_physical_id in_physical_id
     *
     * @return $this
     */
    public function setInPhysicalId($in_physical_id)
    {
        $this->container['in_physical_id'] = $in_physical_id;

        return $this;
    }

    /**
     * Gets physical_warehouse_description
     *
     * @return string
     */
    public function getPhysicalWarehouseDescription()
    {
        return $this->container['physical_warehouse_description'];
    }

    /**
     * Sets physical_warehouse_description
     *
     * @param string $physical_warehouse_description physical_warehouse_description
     *
     * @return $this
     */
    public function setPhysicalWarehouseDescription($physical_warehouse_description)
    {
        $this->container['physical_warehouse_description'] = $physical_warehouse_description;

        return $this;
    }

    /**
     * Gets available_stock
     *
     * @return double
     */
    public function getAvailableStock()
    {
        return $this->container['available_stock'];
    }

    /**
     * Sets available_stock
     *
     * @param double $available_stock available_stock
     *
     * @return $this
     */
    public function setAvailableStock($available_stock)
    {
        $this->container['available_stock'] = $available_stock;

        return $this;
    }

    /**
     * Gets sell_price
     *
     * @return double
     */
    public function getSellPrice()
    {
        return $this->container['sell_price'];
    }

    /**
     * Sets sell_price
     *
     * @param double $sell_price sell_price
     *
     * @return $this
     */
    public function setSellPrice($sell_price)
    {
        $this->container['sell_price'] = $sell_price;

        return $this;
    }

    /**
     * Gets rrp_price
     *
     * @return double
     */
    public function getRrpPrice()
    {
        return $this->container['rrp_price'];
    }

    /**
     * Sets rrp_price
     *
     * @param double $rrp_price rrp_price
     *
     * @return $this
     */
    public function setRrpPrice($rrp_price)
    {
        $this->container['rrp_price'] = $rrp_price;

        return $this;
    }

    /**
     * Gets last_saved_date_time
     *
     * @return \DateTime
     */
    public function getLastSavedDateTime()
    {
        return $this->container['last_saved_date_time'];
    }

    /**
     * Sets last_saved_date_time
     *
     * @param \DateTime $last_saved_date_time last_saved_date_time
     *
     * @return $this
     */
    public function setLastSavedDateTime($last_saved_date_time)
    {
        $this->container['last_saved_date_time'] = $last_saved_date_time;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(
                ObjectSerializer::sanitizeForSerialization($this),
                JSON_PRETTY_PRINT
            );
        }

        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}



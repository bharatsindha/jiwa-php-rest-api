<?php
/**
 * DebtorClassificationPATCHRequest
 *
 * PHP version 5
 *
 * @category Class
 * @package  Jiwa
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * JiwaAPI
 *
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: 1.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 * Swagger Codegen version: 2.4.28-SNAPSHOT
 */

/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Jiwa\JiwaModel;

use \ArrayAccess;
use \Jiwa\ObjectSerializer;

/**
 * DebtorClassificationPATCHRequest Class Doc Comment
 *
 * @category Class
 * @description DebtorClassificationPATCHRequest
 * @package  Jiwa
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class DebtorClassificationPATCHRequest implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $swaggerModelName = 'DebtorClassificationPATCHRequest';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerTypes = [
        'classification_id' => 'string',
        'description' => 'string',
        'last_saved_date_time' => '\DateTime',
        'is_default' => 'bool',
        'terms_days' => 'int',
        'terms_type' => 'string',
        'pricing_group_id' => 'string',
        'pricing_group_description' => 'string',
        'sell_pricing_scheme_id' => 'string',
        'sell_pricing_scheme_description' => 'string',
        'debtor_ledgers' => '\Jiwa\JiwaModel\DebtorLedger[]'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerFormats = [
        'classification_id' => null,
        'description' => null,
        'last_saved_date_time' => 'date-time',
        'is_default' => null,
        'terms_days' => 'int32',
        'terms_type' => null,
        'pricing_group_id' => null,
        'pricing_group_description' => null,
        'sell_pricing_scheme_id' => null,
        'sell_pricing_scheme_description' => null,
        'debtor_ledgers' => null
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerFormats()
    {
        return self::$swaggerFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'classification_id' => 'ClassificationID',
        'description' => 'Description',
        'last_saved_date_time' => 'LastSavedDateTime',
        'is_default' => 'IsDefault',
        'terms_days' => 'TermsDays',
        'terms_type' => 'TermsType',
        'pricing_group_id' => 'PricingGroupID',
        'pricing_group_description' => 'PricingGroupDescription',
        'sell_pricing_scheme_id' => 'SellPricingSchemeID',
        'sell_pricing_scheme_description' => 'SellPricingSchemeDescription',
        'debtor_ledgers' => 'DebtorLedgers'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'classification_id' => 'setClassificationId',
        'description' => 'setDescription',
        'last_saved_date_time' => 'setLastSavedDateTime',
        'is_default' => 'setIsDefault',
        'terms_days' => 'setTermsDays',
        'terms_type' => 'setTermsType',
        'pricing_group_id' => 'setPricingGroupId',
        'pricing_group_description' => 'setPricingGroupDescription',
        'sell_pricing_scheme_id' => 'setSellPricingSchemeId',
        'sell_pricing_scheme_description' => 'setSellPricingSchemeDescription',
        'debtor_ledgers' => 'setDebtorLedgers'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'classification_id' => 'getClassificationId',
        'description' => 'getDescription',
        'last_saved_date_time' => 'getLastSavedDateTime',
        'is_default' => 'getIsDefault',
        'terms_days' => 'getTermsDays',
        'terms_type' => 'getTermsType',
        'pricing_group_id' => 'getPricingGroupId',
        'pricing_group_description' => 'getPricingGroupDescription',
        'sell_pricing_scheme_id' => 'getSellPricingSchemeId',
        'sell_pricing_scheme_description' => 'getSellPricingSchemeDescription',
        'debtor_ledgers' => 'getDebtorLedgers'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$swaggerModelName;
    }

    

    

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['classification_id'] = isset($data['classification_id']) ? $data['classification_id'] : null;
        $this->container['description'] = isset($data['description']) ? $data['description'] : null;
        $this->container['last_saved_date_time'] = isset($data['last_saved_date_time']) ? $data['last_saved_date_time'] : null;
        $this->container['is_default'] = isset($data['is_default']) ? $data['is_default'] : null;
        $this->container['terms_days'] = isset($data['terms_days']) ? $data['terms_days'] : null;
        $this->container['terms_type'] = isset($data['terms_type']) ? $data['terms_type'] : null;
        $this->container['pricing_group_id'] = isset($data['pricing_group_id']) ? $data['pricing_group_id'] : null;
        $this->container['pricing_group_description'] = isset($data['pricing_group_description']) ? $data['pricing_group_description'] : null;
        $this->container['sell_pricing_scheme_id'] = isset($data['sell_pricing_scheme_id']) ? $data['sell_pricing_scheme_id'] : null;
        $this->container['sell_pricing_scheme_description'] = isset($data['sell_pricing_scheme_description']) ? $data['sell_pricing_scheme_description'] : null;
        $this->container['debtor_ledgers'] = isset($data['debtor_ledgers']) ? $data['debtor_ledgers'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets classification_id
     *
     * @return string
     */
    public function getClassificationId()
    {
        return $this->container['classification_id'];
    }

    /**
     * Sets classification_id
     *
     * @param string $classification_id classification_id
     *
     * @return $this
     */
    public function setClassificationId($classification_id)
    {
        $this->container['classification_id'] = $classification_id;

        return $this;
    }

    /**
     * Gets description
     *
     * @return string
     */
    public function getDescription()
    {
        return $this->container['description'];
    }

    /**
     * Sets description
     *
     * @param string $description description
     *
     * @return $this
     */
    public function setDescription($description)
    {
        $this->container['description'] = $description;

        return $this;
    }

    /**
     * Gets last_saved_date_time
     *
     * @return \DateTime
     */
    public function getLastSavedDateTime()
    {
        return $this->container['last_saved_date_time'];
    }

    /**
     * Sets last_saved_date_time
     *
     * @param \DateTime $last_saved_date_time last_saved_date_time
     *
     * @return $this
     */
    public function setLastSavedDateTime($last_saved_date_time)
    {
        $this->container['last_saved_date_time'] = $last_saved_date_time;

        return $this;
    }

    /**
     * Gets is_default
     *
     * @return bool
     */
    public function getIsDefault()
    {
        return $this->container['is_default'];
    }

    /**
     * Sets is_default
     *
     * @param bool $is_default is_default
     *
     * @return $this
     */
    public function setIsDefault($is_default)
    {
        $this->container['is_default'] = $is_default;

        return $this;
    }

    /**
     * Gets terms_days
     *
     * @return int
     */
    public function getTermsDays()
    {
        return $this->container['terms_days'];
    }

    /**
     * Sets terms_days
     *
     * @param int $terms_days terms_days
     *
     * @return $this
     */
    public function setTermsDays($terms_days)
    {
        $this->container['terms_days'] = $terms_days;

        return $this;
    }

    /**
     * Gets terms_type
     *
     * @return string
     */
    public function getTermsType()
    {
        return $this->container['terms_type'];
    }

    /**
     * Sets terms_type
     *
     * @param string $terms_type terms_type
     *
     * @return $this
     */
    public function setTermsType($terms_type)
    {
        $this->container['terms_type'] = $terms_type;

        return $this;
    }

    /**
     * Gets pricing_group_id
     *
     * @return string
     */
    public function getPricingGroupId()
    {
        return $this->container['pricing_group_id'];
    }

    /**
     * Sets pricing_group_id
     *
     * @param string $pricing_group_id pricing_group_id
     *
     * @return $this
     */
    public function setPricingGroupId($pricing_group_id)
    {
        $this->container['pricing_group_id'] = $pricing_group_id;

        return $this;
    }

    /**
     * Gets pricing_group_description
     *
     * @return string
     */
    public function getPricingGroupDescription()
    {
        return $this->container['pricing_group_description'];
    }

    /**
     * Sets pricing_group_description
     *
     * @param string $pricing_group_description pricing_group_description
     *
     * @return $this
     */
    public function setPricingGroupDescription($pricing_group_description)
    {
        $this->container['pricing_group_description'] = $pricing_group_description;

        return $this;
    }

    /**
     * Gets sell_pricing_scheme_id
     *
     * @return string
     */
    public function getSellPricingSchemeId()
    {
        return $this->container['sell_pricing_scheme_id'];
    }

    /**
     * Sets sell_pricing_scheme_id
     *
     * @param string $sell_pricing_scheme_id sell_pricing_scheme_id
     *
     * @return $this
     */
    public function setSellPricingSchemeId($sell_pricing_scheme_id)
    {
        $this->container['sell_pricing_scheme_id'] = $sell_pricing_scheme_id;

        return $this;
    }

    /**
     * Gets sell_pricing_scheme_description
     *
     * @return string
     */
    public function getSellPricingSchemeDescription()
    {
        return $this->container['sell_pricing_scheme_description'];
    }

    /**
     * Sets sell_pricing_scheme_description
     *
     * @param string $sell_pricing_scheme_description sell_pricing_scheme_description
     *
     * @return $this
     */
    public function setSellPricingSchemeDescription($sell_pricing_scheme_description)
    {
        $this->container['sell_pricing_scheme_description'] = $sell_pricing_scheme_description;

        return $this;
    }

    /**
     * Gets debtor_ledgers
     *
     * @return \Jiwa\JiwaModel\DebtorLedger[]
     */
    public function getDebtorLedgers()
    {
        return $this->container['debtor_ledgers'];
    }

    /**
     * Sets debtor_ledgers
     *
     * @param \Jiwa\JiwaModel\DebtorLedger[] $debtor_ledgers debtor_ledgers
     *
     * @return $this
     */
    public function setDebtorLedgers($debtor_ledgers)
    {
        $this->container['debtor_ledgers'] = $debtor_ledgers;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(
                ObjectSerializer::sanitizeForSerialization($this),
                JSON_PRETTY_PRINT
            );
        }

        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}



<?php
/**
 * SYSysValues
 *
 * PHP version 5
 *
 * @category Class
 * @package  Jiwa
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * JiwaAPI
 *
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: 1.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 * Swagger Codegen version: 2.4.28-SNAPSHOT
 */

/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Jiwa\Model;

use \ArrayAccess;
use \Jiwa\ObjectSerializer;

/**
 * SYSysValues Class Doc Comment
 *
 * @category Class
 * @description SY_SysValues
 * @package  Jiwa
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class SYSysValues implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $swaggerModelName = 'SY_SysValues';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerTypes = [
        'rec_id' => 'string',
        'section' => 'string',
        'id_key' => 'string',
        'contents' => 'string',
        'description' => 'string',
        'cell_type' => 'int',
        'display_order' => 'int',
        'section_caption' => 'string',
        'read_only' => 'bool',
        'script_format_cell' => 'string',
        'script_button_clicked' => 'string',
        'script_read_data' => 'string',
        'grid_handler_code' => 'string'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerFormats = [
        'rec_id' => null,
        'section' => null,
        'id_key' => null,
        'contents' => null,
        'description' => null,
        'cell_type' => 'int32',
        'display_order' => 'int32',
        'section_caption' => null,
        'read_only' => null,
        'script_format_cell' => null,
        'script_button_clicked' => null,
        'script_read_data' => null,
        'grid_handler_code' => null
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerFormats()
    {
        return self::$swaggerFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'rec_id' => 'RecID',
        'section' => 'Section',
        'id_key' => 'IDKey',
        'contents' => 'Contents',
        'description' => 'Description',
        'cell_type' => 'CellType',
        'display_order' => 'DisplayOrder',
        'section_caption' => 'SectionCaption',
        'read_only' => 'ReadOnly',
        'script_format_cell' => 'ScriptFormatCell',
        'script_button_clicked' => 'ScriptButtonClicked',
        'script_read_data' => 'ScriptReadData',
        'grid_handler_code' => 'GridHandlerCode'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'rec_id' => 'setRecId',
        'section' => 'setSection',
        'id_key' => 'setIdKey',
        'contents' => 'setContents',
        'description' => 'setDescription',
        'cell_type' => 'setCellType',
        'display_order' => 'setDisplayOrder',
        'section_caption' => 'setSectionCaption',
        'read_only' => 'setReadOnly',
        'script_format_cell' => 'setScriptFormatCell',
        'script_button_clicked' => 'setScriptButtonClicked',
        'script_read_data' => 'setScriptReadData',
        'grid_handler_code' => 'setGridHandlerCode'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'rec_id' => 'getRecId',
        'section' => 'getSection',
        'id_key' => 'getIdKey',
        'contents' => 'getContents',
        'description' => 'getDescription',
        'cell_type' => 'getCellType',
        'display_order' => 'getDisplayOrder',
        'section_caption' => 'getSectionCaption',
        'read_only' => 'getReadOnly',
        'script_format_cell' => 'getScriptFormatCell',
        'script_button_clicked' => 'getScriptButtonClicked',
        'script_read_data' => 'getScriptReadData',
        'grid_handler_code' => 'getGridHandlerCode'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$swaggerModelName;
    }

    

    

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['rec_id'] = isset($data['rec_id']) ? $data['rec_id'] : null;
        $this->container['section'] = isset($data['section']) ? $data['section'] : null;
        $this->container['id_key'] = isset($data['id_key']) ? $data['id_key'] : null;
        $this->container['contents'] = isset($data['contents']) ? $data['contents'] : null;
        $this->container['description'] = isset($data['description']) ? $data['description'] : null;
        $this->container['cell_type'] = isset($data['cell_type']) ? $data['cell_type'] : null;
        $this->container['display_order'] = isset($data['display_order']) ? $data['display_order'] : null;
        $this->container['section_caption'] = isset($data['section_caption']) ? $data['section_caption'] : null;
        $this->container['read_only'] = isset($data['read_only']) ? $data['read_only'] : null;
        $this->container['script_format_cell'] = isset($data['script_format_cell']) ? $data['script_format_cell'] : null;
        $this->container['script_button_clicked'] = isset($data['script_button_clicked']) ? $data['script_button_clicked'] : null;
        $this->container['script_read_data'] = isset($data['script_read_data']) ? $data['script_read_data'] : null;
        $this->container['grid_handler_code'] = isset($data['grid_handler_code']) ? $data['grid_handler_code'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets rec_id
     *
     * @return string
     */
    public function getRecId()
    {
        return $this->container['rec_id'];
    }

    /**
     * Sets rec_id
     *
     * @param string $rec_id rec_id
     *
     * @return $this
     */
    public function setRecId($rec_id)
    {
        $this->container['rec_id'] = $rec_id;

        return $this;
    }

    /**
     * Gets section
     *
     * @return string
     */
    public function getSection()
    {
        return $this->container['section'];
    }

    /**
     * Sets section
     *
     * @param string $section section
     *
     * @return $this
     */
    public function setSection($section)
    {
        $this->container['section'] = $section;

        return $this;
    }

    /**
     * Gets id_key
     *
     * @return string
     */
    public function getIdKey()
    {
        return $this->container['id_key'];
    }

    /**
     * Sets id_key
     *
     * @param string $id_key id_key
     *
     * @return $this
     */
    public function setIdKey($id_key)
    {
        $this->container['id_key'] = $id_key;

        return $this;
    }

    /**
     * Gets contents
     *
     * @return string
     */
    public function getContents()
    {
        return $this->container['contents'];
    }

    /**
     * Sets contents
     *
     * @param string $contents contents
     *
     * @return $this
     */
    public function setContents($contents)
    {
        $this->container['contents'] = $contents;

        return $this;
    }

    /**
     * Gets description
     *
     * @return string
     */
    public function getDescription()
    {
        return $this->container['description'];
    }

    /**
     * Sets description
     *
     * @param string $description description
     *
     * @return $this
     */
    public function setDescription($description)
    {
        $this->container['description'] = $description;

        return $this;
    }

    /**
     * Gets cell_type
     *
     * @return int
     */
    public function getCellType()
    {
        return $this->container['cell_type'];
    }

    /**
     * Sets cell_type
     *
     * @param int $cell_type cell_type
     *
     * @return $this
     */
    public function setCellType($cell_type)
    {
        $this->container['cell_type'] = $cell_type;

        return $this;
    }

    /**
     * Gets display_order
     *
     * @return int
     */
    public function getDisplayOrder()
    {
        return $this->container['display_order'];
    }

    /**
     * Sets display_order
     *
     * @param int $display_order display_order
     *
     * @return $this
     */
    public function setDisplayOrder($display_order)
    {
        $this->container['display_order'] = $display_order;

        return $this;
    }

    /**
     * Gets section_caption
     *
     * @return string
     */
    public function getSectionCaption()
    {
        return $this->container['section_caption'];
    }

    /**
     * Sets section_caption
     *
     * @param string $section_caption section_caption
     *
     * @return $this
     */
    public function setSectionCaption($section_caption)
    {
        $this->container['section_caption'] = $section_caption;

        return $this;
    }

    /**
     * Gets read_only
     *
     * @return bool
     */
    public function getReadOnly()
    {
        return $this->container['read_only'];
    }

    /**
     * Sets read_only
     *
     * @param bool $read_only read_only
     *
     * @return $this
     */
    public function setReadOnly($read_only)
    {
        $this->container['read_only'] = $read_only;

        return $this;
    }

    /**
     * Gets script_format_cell
     *
     * @return string
     */
    public function getScriptFormatCell()
    {
        return $this->container['script_format_cell'];
    }

    /**
     * Sets script_format_cell
     *
     * @param string $script_format_cell script_format_cell
     *
     * @return $this
     */
    public function setScriptFormatCell($script_format_cell)
    {
        $this->container['script_format_cell'] = $script_format_cell;

        return $this;
    }

    /**
     * Gets script_button_clicked
     *
     * @return string
     */
    public function getScriptButtonClicked()
    {
        return $this->container['script_button_clicked'];
    }

    /**
     * Sets script_button_clicked
     *
     * @param string $script_button_clicked script_button_clicked
     *
     * @return $this
     */
    public function setScriptButtonClicked($script_button_clicked)
    {
        $this->container['script_button_clicked'] = $script_button_clicked;

        return $this;
    }

    /**
     * Gets script_read_data
     *
     * @return string
     */
    public function getScriptReadData()
    {
        return $this->container['script_read_data'];
    }

    /**
     * Sets script_read_data
     *
     * @param string $script_read_data script_read_data
     *
     * @return $this
     */
    public function setScriptReadData($script_read_data)
    {
        $this->container['script_read_data'] = $script_read_data;

        return $this;
    }

    /**
     * Gets grid_handler_code
     *
     * @return string
     */
    public function getGridHandlerCode()
    {
        return $this->container['grid_handler_code'];
    }

    /**
     * Sets grid_handler_code
     *
     * @param string $grid_handler_code grid_handler_code
     *
     * @return $this
     */
    public function setGridHandlerCode($grid_handler_code)
    {
        $this->container['grid_handler_code'] = $grid_handler_code;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(
                ObjectSerializer::sanitizeForSerialization($this),
                JSON_PRETTY_PRINT
            );
        }

        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}



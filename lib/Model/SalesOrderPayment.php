<?php
/**
 * SalesOrderPayment
 *
 * PHP version 5
 *
 * @category Class
 * @package  Jiwa
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * JiwaAPI
 *
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: 1.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 * Swagger Codegen version: 2.4.28-SNAPSHOT
 */

/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Jiwa\JiwaModel;

use \ArrayAccess;
use \Jiwa\ObjectSerializer;

/**
 * SalesOrderPayment Class Doc Comment
 *
 * @category Class
 * @description SalesOrderPayment
 * @package  Jiwa
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class SalesOrderPayment implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $swaggerModelName = 'SalesOrderPayment';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerTypes = [
        'history_no' => 'int',
        'payment_type' => '\Jiwa\JiwaModel\PaymentType',
        'amount_paid' => 'double',
        'payment_date' => '\DateTime',
        'process_payment' => 'bool',
        'authorisation_status' => 'string',
        'payment_gateway_return_code' => 'int',
        'processed' => 'bool',
        'card_expiry' => '\DateTime',
        'payment_id' => 'string',
        'payment_ref' => 'string',
        'authorisation_number' => 'string',
        'payment_gateway_return_message' => 'string',
        'card_number' => 'string',
        'card_holder' => 'string',
        'bank_name' => 'string',
        'bsbn' => 'string',
        'bank_acc' => 'string',
        'account_name' => 'string'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerFormats = [
        'history_no' => 'int32',
        'payment_type' => null,
        'amount_paid' => 'double',
        'payment_date' => 'date-time',
        'process_payment' => null,
        'authorisation_status' => null,
        'payment_gateway_return_code' => 'int32',
        'processed' => null,
        'card_expiry' => 'date-time',
        'payment_id' => null,
        'payment_ref' => null,
        'authorisation_number' => null,
        'payment_gateway_return_message' => null,
        'card_number' => null,
        'card_holder' => null,
        'bank_name' => null,
        'bsbn' => null,
        'bank_acc' => null,
        'account_name' => null
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerFormats()
    {
        return self::$swaggerFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'history_no' => 'HistoryNo',
        'payment_type' => 'PaymentType',
        'amount_paid' => 'AmountPaid',
        'payment_date' => 'PaymentDate',
        'process_payment' => 'ProcessPayment',
        'authorisation_status' => 'AuthorisationStatus',
        'payment_gateway_return_code' => 'PaymentGatewayReturnCode',
        'processed' => 'Processed',
        'card_expiry' => 'CardExpiry',
        'payment_id' => 'PaymentID',
        'payment_ref' => 'PaymentRef',
        'authorisation_number' => 'AuthorisationNumber',
        'payment_gateway_return_message' => 'PaymentGatewayReturnMessage',
        'card_number' => 'CardNumber',
        'card_holder' => 'CardHolder',
        'bank_name' => 'BankName',
        'bsbn' => 'BSBN',
        'bank_acc' => 'BankAcc',
        'account_name' => 'AccountName'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'history_no' => 'setHistoryNo',
        'payment_type' => 'setPaymentType',
        'amount_paid' => 'setAmountPaid',
        'payment_date' => 'setPaymentDate',
        'process_payment' => 'setProcessPayment',
        'authorisation_status' => 'setAuthorisationStatus',
        'payment_gateway_return_code' => 'setPaymentGatewayReturnCode',
        'processed' => 'setProcessed',
        'card_expiry' => 'setCardExpiry',
        'payment_id' => 'setPaymentId',
        'payment_ref' => 'setPaymentRef',
        'authorisation_number' => 'setAuthorisationNumber',
        'payment_gateway_return_message' => 'setPaymentGatewayReturnMessage',
        'card_number' => 'setCardNumber',
        'card_holder' => 'setCardHolder',
        'bank_name' => 'setBankName',
        'bsbn' => 'setBsbn',
        'bank_acc' => 'setBankAcc',
        'account_name' => 'setAccountName'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'history_no' => 'getHistoryNo',
        'payment_type' => 'getPaymentType',
        'amount_paid' => 'getAmountPaid',
        'payment_date' => 'getPaymentDate',
        'process_payment' => 'getProcessPayment',
        'authorisation_status' => 'getAuthorisationStatus',
        'payment_gateway_return_code' => 'getPaymentGatewayReturnCode',
        'processed' => 'getProcessed',
        'card_expiry' => 'getCardExpiry',
        'payment_id' => 'getPaymentId',
        'payment_ref' => 'getPaymentRef',
        'authorisation_number' => 'getAuthorisationNumber',
        'payment_gateway_return_message' => 'getPaymentGatewayReturnMessage',
        'card_number' => 'getCardNumber',
        'card_holder' => 'getCardHolder',
        'bank_name' => 'getBankName',
        'bsbn' => 'getBsbn',
        'bank_acc' => 'getBankAcc',
        'account_name' => 'getAccountName'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$swaggerModelName;
    }

    

    

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['history_no'] = isset($data['history_no']) ? $data['history_no'] : null;
        $this->container['payment_type'] = isset($data['payment_type']) ? $data['payment_type'] : null;
        $this->container['amount_paid'] = isset($data['amount_paid']) ? $data['amount_paid'] : null;
        $this->container['payment_date'] = isset($data['payment_date']) ? $data['payment_date'] : null;
        $this->container['process_payment'] = isset($data['process_payment']) ? $data['process_payment'] : null;
        $this->container['authorisation_status'] = isset($data['authorisation_status']) ? $data['authorisation_status'] : null;
        $this->container['payment_gateway_return_code'] = isset($data['payment_gateway_return_code']) ? $data['payment_gateway_return_code'] : null;
        $this->container['processed'] = isset($data['processed']) ? $data['processed'] : null;
        $this->container['card_expiry'] = isset($data['card_expiry']) ? $data['card_expiry'] : null;
        $this->container['payment_id'] = isset($data['payment_id']) ? $data['payment_id'] : null;
        $this->container['payment_ref'] = isset($data['payment_ref']) ? $data['payment_ref'] : null;
        $this->container['authorisation_number'] = isset($data['authorisation_number']) ? $data['authorisation_number'] : null;
        $this->container['payment_gateway_return_message'] = isset($data['payment_gateway_return_message']) ? $data['payment_gateway_return_message'] : null;
        $this->container['card_number'] = isset($data['card_number']) ? $data['card_number'] : null;
        $this->container['card_holder'] = isset($data['card_holder']) ? $data['card_holder'] : null;
        $this->container['bank_name'] = isset($data['bank_name']) ? $data['bank_name'] : null;
        $this->container['bsbn'] = isset($data['bsbn']) ? $data['bsbn'] : null;
        $this->container['bank_acc'] = isset($data['bank_acc']) ? $data['bank_acc'] : null;
        $this->container['account_name'] = isset($data['account_name']) ? $data['account_name'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets history_no
     *
     * @return int
     */
    public function getHistoryNo()
    {
        return $this->container['history_no'];
    }

    /**
     * Sets history_no
     *
     * @param int $history_no history_no
     *
     * @return $this
     */
    public function setHistoryNo($history_no)
    {
        $this->container['history_no'] = $history_no;

        return $this;
    }

    /**
     * Gets payment_type
     *
     * @return \Jiwa\JiwaModel\PaymentType
     */
    public function getPaymentType()
    {
        return $this->container['payment_type'];
    }

    /**
     * Sets payment_type
     *
     * @param \Jiwa\JiwaModel\PaymentType $payment_type payment_type
     *
     * @return $this
     */
    public function setPaymentType($payment_type)
    {
        $this->container['payment_type'] = $payment_type;

        return $this;
    }

    /**
     * Gets amount_paid
     *
     * @return double
     */
    public function getAmountPaid()
    {
        return $this->container['amount_paid'];
    }

    /**
     * Sets amount_paid
     *
     * @param double $amount_paid amount_paid
     *
     * @return $this
     */
    public function setAmountPaid($amount_paid)
    {
        $this->container['amount_paid'] = $amount_paid;

        return $this;
    }

    /**
     * Gets payment_date
     *
     * @return \DateTime
     */
    public function getPaymentDate()
    {
        return $this->container['payment_date'];
    }

    /**
     * Sets payment_date
     *
     * @param \DateTime $payment_date payment_date
     *
     * @return $this
     */
    public function setPaymentDate($payment_date)
    {
        $this->container['payment_date'] = $payment_date;

        return $this;
    }

    /**
     * Gets process_payment
     *
     * @return bool
     */
    public function getProcessPayment()
    {
        return $this->container['process_payment'];
    }

    /**
     * Sets process_payment
     *
     * @param bool $process_payment process_payment
     *
     * @return $this
     */
    public function setProcessPayment($process_payment)
    {
        $this->container['process_payment'] = $process_payment;

        return $this;
    }

    /**
     * Gets authorisation_status
     *
     * @return string
     */
    public function getAuthorisationStatus()
    {
        return $this->container['authorisation_status'];
    }

    /**
     * Sets authorisation_status
     *
     * @param string $authorisation_status authorisation_status
     *
     * @return $this
     */
    public function setAuthorisationStatus($authorisation_status)
    {
        $this->container['authorisation_status'] = $authorisation_status;

        return $this;
    }

    /**
     * Gets payment_gateway_return_code
     *
     * @return int
     */
    public function getPaymentGatewayReturnCode()
    {
        return $this->container['payment_gateway_return_code'];
    }

    /**
     * Sets payment_gateway_return_code
     *
     * @param int $payment_gateway_return_code payment_gateway_return_code
     *
     * @return $this
     */
    public function setPaymentGatewayReturnCode($payment_gateway_return_code)
    {
        $this->container['payment_gateway_return_code'] = $payment_gateway_return_code;

        return $this;
    }

    /**
     * Gets processed
     *
     * @return bool
     */
    public function getProcessed()
    {
        return $this->container['processed'];
    }

    /**
     * Sets processed
     *
     * @param bool $processed processed
     *
     * @return $this
     */
    public function setProcessed($processed)
    {
        $this->container['processed'] = $processed;

        return $this;
    }

    /**
     * Gets card_expiry
     *
     * @return \DateTime
     */
    public function getCardExpiry()
    {
        return $this->container['card_expiry'];
    }

    /**
     * Sets card_expiry
     *
     * @param \DateTime $card_expiry card_expiry
     *
     * @return $this
     */
    public function setCardExpiry($card_expiry)
    {
        $this->container['card_expiry'] = $card_expiry;

        return $this;
    }

    /**
     * Gets payment_id
     *
     * @return string
     */
    public function getPaymentId()
    {
        return $this->container['payment_id'];
    }

    /**
     * Sets payment_id
     *
     * @param string $payment_id payment_id
     *
     * @return $this
     */
    public function setPaymentId($payment_id)
    {
        $this->container['payment_id'] = $payment_id;

        return $this;
    }

    /**
     * Gets payment_ref
     *
     * @return string
     */
    public function getPaymentRef()
    {
        return $this->container['payment_ref'];
    }

    /**
     * Sets payment_ref
     *
     * @param string $payment_ref payment_ref
     *
     * @return $this
     */
    public function setPaymentRef($payment_ref)
    {
        $this->container['payment_ref'] = $payment_ref;

        return $this;
    }

    /**
     * Gets authorisation_number
     *
     * @return string
     */
    public function getAuthorisationNumber()
    {
        return $this->container['authorisation_number'];
    }

    /**
     * Sets authorisation_number
     *
     * @param string $authorisation_number authorisation_number
     *
     * @return $this
     */
    public function setAuthorisationNumber($authorisation_number)
    {
        $this->container['authorisation_number'] = $authorisation_number;

        return $this;
    }

    /**
     * Gets payment_gateway_return_message
     *
     * @return string
     */
    public function getPaymentGatewayReturnMessage()
    {
        return $this->container['payment_gateway_return_message'];
    }

    /**
     * Sets payment_gateway_return_message
     *
     * @param string $payment_gateway_return_message payment_gateway_return_message
     *
     * @return $this
     */
    public function setPaymentGatewayReturnMessage($payment_gateway_return_message)
    {
        $this->container['payment_gateway_return_message'] = $payment_gateway_return_message;

        return $this;
    }

    /**
     * Gets card_number
     *
     * @return string
     */
    public function getCardNumber()
    {
        return $this->container['card_number'];
    }

    /**
     * Sets card_number
     *
     * @param string $card_number card_number
     *
     * @return $this
     */
    public function setCardNumber($card_number)
    {
        $this->container['card_number'] = $card_number;

        return $this;
    }

    /**
     * Gets card_holder
     *
     * @return string
     */
    public function getCardHolder()
    {
        return $this->container['card_holder'];
    }

    /**
     * Sets card_holder
     *
     * @param string $card_holder card_holder
     *
     * @return $this
     */
    public function setCardHolder($card_holder)
    {
        $this->container['card_holder'] = $card_holder;

        return $this;
    }

    /**
     * Gets bank_name
     *
     * @return string
     */
    public function getBankName()
    {
        return $this->container['bank_name'];
    }

    /**
     * Sets bank_name
     *
     * @param string $bank_name bank_name
     *
     * @return $this
     */
    public function setBankName($bank_name)
    {
        $this->container['bank_name'] = $bank_name;

        return $this;
    }

    /**
     * Gets bsbn
     *
     * @return string
     */
    public function getBsbn()
    {
        return $this->container['bsbn'];
    }

    /**
     * Sets bsbn
     *
     * @param string $bsbn bsbn
     *
     * @return $this
     */
    public function setBsbn($bsbn)
    {
        $this->container['bsbn'] = $bsbn;

        return $this;
    }

    /**
     * Gets bank_acc
     *
     * @return string
     */
    public function getBankAcc()
    {
        return $this->container['bank_acc'];
    }

    /**
     * Sets bank_acc
     *
     * @param string $bank_acc bank_acc
     *
     * @return $this
     */
    public function setBankAcc($bank_acc)
    {
        $this->container['bank_acc'] = $bank_acc;

        return $this;
    }

    /**
     * Gets account_name
     *
     * @return string
     */
    public function getAccountName()
    {
        return $this->container['account_name'];
    }

    /**
     * Sets account_name
     *
     * @param string $account_name account_name
     *
     * @return $this
     */
    public function setAccountName($account_name)
    {
        $this->container['account_name'] = $account_name;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(
                ObjectSerializer::sanitizeForSerialization($this),
                JSON_PRETTY_PRINT
            );
        }

        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}



<?php
/**
 * PIMain
 *
 * PHP version 5
 *
 * @category Class
 * @package  Jiwa
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * JiwaAPI
 *
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: 1.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 * Swagger Codegen version: 2.4.28-SNAPSHOT
 */

/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Jiwa\JiwaModel;

use \ArrayAccess;
use \Jiwa\ObjectSerializer;

/**
 * PIMain Class Doc Comment
 *
 * @category Class
 * @description PI_Main
 * @package  Jiwa
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class PIMain implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $swaggerModelName = 'PI_Main';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerTypes = [
        'pi_main_id' => 'string',
        'last_saved_date_time' => '\DateTime',
        'invoice_no' => 'string',
        'creditor_id' => 'string',
        'invoice_date' => '\DateTime',
        'status' => 'int',
        'freight' => 'double',
        'duty' => 'double',
        'insurance' => 'double',
        'due_date' => '\DateTime',
        'in_logical_id' => 'string',
        'total_line_tax' => 'double',
        'adj_tax' => 'double',
        'freight_tax_id' => 'string',
        'freight_tax_rate' => 'double',
        'freight_tax_amount' => 'double',
        'duty_tax_id' => 'string',
        'duty_tax_rate' => 'double',
        'duty_tax_amount' => 'double',
        'insurance_tax_id' => 'string',
        'insurance_tax_rate' => 'double',
        'insurance_tax_amount' => 'double',
        'currency_id' => 'string',
        'decimal_places' => 'int',
        'fx_decimal_places' => 'int'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerFormats = [
        'pi_main_id' => null,
        'last_saved_date_time' => 'date-time',
        'invoice_no' => null,
        'creditor_id' => null,
        'invoice_date' => 'date-time',
        'status' => 'int32',
        'freight' => 'double',
        'duty' => 'double',
        'insurance' => 'double',
        'due_date' => 'date-time',
        'in_logical_id' => null,
        'total_line_tax' => 'double',
        'adj_tax' => 'double',
        'freight_tax_id' => null,
        'freight_tax_rate' => 'double',
        'freight_tax_amount' => 'double',
        'duty_tax_id' => null,
        'duty_tax_rate' => 'double',
        'duty_tax_amount' => 'double',
        'insurance_tax_id' => null,
        'insurance_tax_rate' => 'double',
        'insurance_tax_amount' => 'double',
        'currency_id' => null,
        'decimal_places' => 'int32',
        'fx_decimal_places' => 'int32'
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerFormats()
    {
        return self::$swaggerFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'pi_main_id' => 'PI_MainID',
        'last_saved_date_time' => 'LastSavedDateTime',
        'invoice_no' => 'InvoiceNo',
        'creditor_id' => 'CreditorID',
        'invoice_date' => 'InvoiceDate',
        'status' => 'Status',
        'freight' => 'Freight',
        'duty' => 'Duty',
        'insurance' => 'Insurance',
        'due_date' => 'DueDate',
        'in_logical_id' => 'IN_LogicalID',
        'total_line_tax' => 'TotalLineTax',
        'adj_tax' => 'AdjTax',
        'freight_tax_id' => 'FreightTaxID',
        'freight_tax_rate' => 'FreightTaxRate',
        'freight_tax_amount' => 'FreightTaxAmount',
        'duty_tax_id' => 'DutyTaxID',
        'duty_tax_rate' => 'DutyTaxRate',
        'duty_tax_amount' => 'DutyTaxAmount',
        'insurance_tax_id' => 'InsuranceTaxID',
        'insurance_tax_rate' => 'InsuranceTaxRate',
        'insurance_tax_amount' => 'InsuranceTaxAmount',
        'currency_id' => 'CurrencyID',
        'decimal_places' => 'DecimalPlaces',
        'fx_decimal_places' => 'FXDecimalPlaces'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'pi_main_id' => 'setPiMainId',
        'last_saved_date_time' => 'setLastSavedDateTime',
        'invoice_no' => 'setInvoiceNo',
        'creditor_id' => 'setCreditorId',
        'invoice_date' => 'setInvoiceDate',
        'status' => 'setStatus',
        'freight' => 'setFreight',
        'duty' => 'setDuty',
        'insurance' => 'setInsurance',
        'due_date' => 'setDueDate',
        'in_logical_id' => 'setInLogicalId',
        'total_line_tax' => 'setTotalLineTax',
        'adj_tax' => 'setAdjTax',
        'freight_tax_id' => 'setFreightTaxId',
        'freight_tax_rate' => 'setFreightTaxRate',
        'freight_tax_amount' => 'setFreightTaxAmount',
        'duty_tax_id' => 'setDutyTaxId',
        'duty_tax_rate' => 'setDutyTaxRate',
        'duty_tax_amount' => 'setDutyTaxAmount',
        'insurance_tax_id' => 'setInsuranceTaxId',
        'insurance_tax_rate' => 'setInsuranceTaxRate',
        'insurance_tax_amount' => 'setInsuranceTaxAmount',
        'currency_id' => 'setCurrencyId',
        'decimal_places' => 'setDecimalPlaces',
        'fx_decimal_places' => 'setFxDecimalPlaces'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'pi_main_id' => 'getPiMainId',
        'last_saved_date_time' => 'getLastSavedDateTime',
        'invoice_no' => 'getInvoiceNo',
        'creditor_id' => 'getCreditorId',
        'invoice_date' => 'getInvoiceDate',
        'status' => 'getStatus',
        'freight' => 'getFreight',
        'duty' => 'getDuty',
        'insurance' => 'getInsurance',
        'due_date' => 'getDueDate',
        'in_logical_id' => 'getInLogicalId',
        'total_line_tax' => 'getTotalLineTax',
        'adj_tax' => 'getAdjTax',
        'freight_tax_id' => 'getFreightTaxId',
        'freight_tax_rate' => 'getFreightTaxRate',
        'freight_tax_amount' => 'getFreightTaxAmount',
        'duty_tax_id' => 'getDutyTaxId',
        'duty_tax_rate' => 'getDutyTaxRate',
        'duty_tax_amount' => 'getDutyTaxAmount',
        'insurance_tax_id' => 'getInsuranceTaxId',
        'insurance_tax_rate' => 'getInsuranceTaxRate',
        'insurance_tax_amount' => 'getInsuranceTaxAmount',
        'currency_id' => 'getCurrencyId',
        'decimal_places' => 'getDecimalPlaces',
        'fx_decimal_places' => 'getFxDecimalPlaces'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$swaggerModelName;
    }

    

    

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['pi_main_id'] = isset($data['pi_main_id']) ? $data['pi_main_id'] : null;
        $this->container['last_saved_date_time'] = isset($data['last_saved_date_time']) ? $data['last_saved_date_time'] : null;
        $this->container['invoice_no'] = isset($data['invoice_no']) ? $data['invoice_no'] : null;
        $this->container['creditor_id'] = isset($data['creditor_id']) ? $data['creditor_id'] : null;
        $this->container['invoice_date'] = isset($data['invoice_date']) ? $data['invoice_date'] : null;
        $this->container['status'] = isset($data['status']) ? $data['status'] : null;
        $this->container['freight'] = isset($data['freight']) ? $data['freight'] : null;
        $this->container['duty'] = isset($data['duty']) ? $data['duty'] : null;
        $this->container['insurance'] = isset($data['insurance']) ? $data['insurance'] : null;
        $this->container['due_date'] = isset($data['due_date']) ? $data['due_date'] : null;
        $this->container['in_logical_id'] = isset($data['in_logical_id']) ? $data['in_logical_id'] : null;
        $this->container['total_line_tax'] = isset($data['total_line_tax']) ? $data['total_line_tax'] : null;
        $this->container['adj_tax'] = isset($data['adj_tax']) ? $data['adj_tax'] : null;
        $this->container['freight_tax_id'] = isset($data['freight_tax_id']) ? $data['freight_tax_id'] : null;
        $this->container['freight_tax_rate'] = isset($data['freight_tax_rate']) ? $data['freight_tax_rate'] : null;
        $this->container['freight_tax_amount'] = isset($data['freight_tax_amount']) ? $data['freight_tax_amount'] : null;
        $this->container['duty_tax_id'] = isset($data['duty_tax_id']) ? $data['duty_tax_id'] : null;
        $this->container['duty_tax_rate'] = isset($data['duty_tax_rate']) ? $data['duty_tax_rate'] : null;
        $this->container['duty_tax_amount'] = isset($data['duty_tax_amount']) ? $data['duty_tax_amount'] : null;
        $this->container['insurance_tax_id'] = isset($data['insurance_tax_id']) ? $data['insurance_tax_id'] : null;
        $this->container['insurance_tax_rate'] = isset($data['insurance_tax_rate']) ? $data['insurance_tax_rate'] : null;
        $this->container['insurance_tax_amount'] = isset($data['insurance_tax_amount']) ? $data['insurance_tax_amount'] : null;
        $this->container['currency_id'] = isset($data['currency_id']) ? $data['currency_id'] : null;
        $this->container['decimal_places'] = isset($data['decimal_places']) ? $data['decimal_places'] : null;
        $this->container['fx_decimal_places'] = isset($data['fx_decimal_places']) ? $data['fx_decimal_places'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets pi_main_id
     *
     * @return string
     */
    public function getPiMainId()
    {
        return $this->container['pi_main_id'];
    }

    /**
     * Sets pi_main_id
     *
     * @param string $pi_main_id pi_main_id
     *
     * @return $this
     */
    public function setPiMainId($pi_main_id)
    {
        $this->container['pi_main_id'] = $pi_main_id;

        return $this;
    }

    /**
     * Gets last_saved_date_time
     *
     * @return \DateTime
     */
    public function getLastSavedDateTime()
    {
        return $this->container['last_saved_date_time'];
    }

    /**
     * Sets last_saved_date_time
     *
     * @param \DateTime $last_saved_date_time last_saved_date_time
     *
     * @return $this
     */
    public function setLastSavedDateTime($last_saved_date_time)
    {
        $this->container['last_saved_date_time'] = $last_saved_date_time;

        return $this;
    }

    /**
     * Gets invoice_no
     *
     * @return string
     */
    public function getInvoiceNo()
    {
        return $this->container['invoice_no'];
    }

    /**
     * Sets invoice_no
     *
     * @param string $invoice_no invoice_no
     *
     * @return $this
     */
    public function setInvoiceNo($invoice_no)
    {
        $this->container['invoice_no'] = $invoice_no;

        return $this;
    }

    /**
     * Gets creditor_id
     *
     * @return string
     */
    public function getCreditorId()
    {
        return $this->container['creditor_id'];
    }

    /**
     * Sets creditor_id
     *
     * @param string $creditor_id creditor_id
     *
     * @return $this
     */
    public function setCreditorId($creditor_id)
    {
        $this->container['creditor_id'] = $creditor_id;

        return $this;
    }

    /**
     * Gets invoice_date
     *
     * @return \DateTime
     */
    public function getInvoiceDate()
    {
        return $this->container['invoice_date'];
    }

    /**
     * Sets invoice_date
     *
     * @param \DateTime $invoice_date invoice_date
     *
     * @return $this
     */
    public function setInvoiceDate($invoice_date)
    {
        $this->container['invoice_date'] = $invoice_date;

        return $this;
    }

    /**
     * Gets status
     *
     * @return int
     */
    public function getStatus()
    {
        return $this->container['status'];
    }

    /**
     * Sets status
     *
     * @param int $status status
     *
     * @return $this
     */
    public function setStatus($status)
    {
        $this->container['status'] = $status;

        return $this;
    }

    /**
     * Gets freight
     *
     * @return double
     */
    public function getFreight()
    {
        return $this->container['freight'];
    }

    /**
     * Sets freight
     *
     * @param double $freight freight
     *
     * @return $this
     */
    public function setFreight($freight)
    {
        $this->container['freight'] = $freight;

        return $this;
    }

    /**
     * Gets duty
     *
     * @return double
     */
    public function getDuty()
    {
        return $this->container['duty'];
    }

    /**
     * Sets duty
     *
     * @param double $duty duty
     *
     * @return $this
     */
    public function setDuty($duty)
    {
        $this->container['duty'] = $duty;

        return $this;
    }

    /**
     * Gets insurance
     *
     * @return double
     */
    public function getInsurance()
    {
        return $this->container['insurance'];
    }

    /**
     * Sets insurance
     *
     * @param double $insurance insurance
     *
     * @return $this
     */
    public function setInsurance($insurance)
    {
        $this->container['insurance'] = $insurance;

        return $this;
    }

    /**
     * Gets due_date
     *
     * @return \DateTime
     */
    public function getDueDate()
    {
        return $this->container['due_date'];
    }

    /**
     * Sets due_date
     *
     * @param \DateTime $due_date due_date
     *
     * @return $this
     */
    public function setDueDate($due_date)
    {
        $this->container['due_date'] = $due_date;

        return $this;
    }

    /**
     * Gets in_logical_id
     *
     * @return string
     */
    public function getInLogicalId()
    {
        return $this->container['in_logical_id'];
    }

    /**
     * Sets in_logical_id
     *
     * @param string $in_logical_id in_logical_id
     *
     * @return $this
     */
    public function setInLogicalId($in_logical_id)
    {
        $this->container['in_logical_id'] = $in_logical_id;

        return $this;
    }

    /**
     * Gets total_line_tax
     *
     * @return double
     */
    public function getTotalLineTax()
    {
        return $this->container['total_line_tax'];
    }

    /**
     * Sets total_line_tax
     *
     * @param double $total_line_tax total_line_tax
     *
     * @return $this
     */
    public function setTotalLineTax($total_line_tax)
    {
        $this->container['total_line_tax'] = $total_line_tax;

        return $this;
    }

    /**
     * Gets adj_tax
     *
     * @return double
     */
    public function getAdjTax()
    {
        return $this->container['adj_tax'];
    }

    /**
     * Sets adj_tax
     *
     * @param double $adj_tax adj_tax
     *
     * @return $this
     */
    public function setAdjTax($adj_tax)
    {
        $this->container['adj_tax'] = $adj_tax;

        return $this;
    }

    /**
     * Gets freight_tax_id
     *
     * @return string
     */
    public function getFreightTaxId()
    {
        return $this->container['freight_tax_id'];
    }

    /**
     * Sets freight_tax_id
     *
     * @param string $freight_tax_id freight_tax_id
     *
     * @return $this
     */
    public function setFreightTaxId($freight_tax_id)
    {
        $this->container['freight_tax_id'] = $freight_tax_id;

        return $this;
    }

    /**
     * Gets freight_tax_rate
     *
     * @return double
     */
    public function getFreightTaxRate()
    {
        return $this->container['freight_tax_rate'];
    }

    /**
     * Sets freight_tax_rate
     *
     * @param double $freight_tax_rate freight_tax_rate
     *
     * @return $this
     */
    public function setFreightTaxRate($freight_tax_rate)
    {
        $this->container['freight_tax_rate'] = $freight_tax_rate;

        return $this;
    }

    /**
     * Gets freight_tax_amount
     *
     * @return double
     */
    public function getFreightTaxAmount()
    {
        return $this->container['freight_tax_amount'];
    }

    /**
     * Sets freight_tax_amount
     *
     * @param double $freight_tax_amount freight_tax_amount
     *
     * @return $this
     */
    public function setFreightTaxAmount($freight_tax_amount)
    {
        $this->container['freight_tax_amount'] = $freight_tax_amount;

        return $this;
    }

    /**
     * Gets duty_tax_id
     *
     * @return string
     */
    public function getDutyTaxId()
    {
        return $this->container['duty_tax_id'];
    }

    /**
     * Sets duty_tax_id
     *
     * @param string $duty_tax_id duty_tax_id
     *
     * @return $this
     */
    public function setDutyTaxId($duty_tax_id)
    {
        $this->container['duty_tax_id'] = $duty_tax_id;

        return $this;
    }

    /**
     * Gets duty_tax_rate
     *
     * @return double
     */
    public function getDutyTaxRate()
    {
        return $this->container['duty_tax_rate'];
    }

    /**
     * Sets duty_tax_rate
     *
     * @param double $duty_tax_rate duty_tax_rate
     *
     * @return $this
     */
    public function setDutyTaxRate($duty_tax_rate)
    {
        $this->container['duty_tax_rate'] = $duty_tax_rate;

        return $this;
    }

    /**
     * Gets duty_tax_amount
     *
     * @return double
     */
    public function getDutyTaxAmount()
    {
        return $this->container['duty_tax_amount'];
    }

    /**
     * Sets duty_tax_amount
     *
     * @param double $duty_tax_amount duty_tax_amount
     *
     * @return $this
     */
    public function setDutyTaxAmount($duty_tax_amount)
    {
        $this->container['duty_tax_amount'] = $duty_tax_amount;

        return $this;
    }

    /**
     * Gets insurance_tax_id
     *
     * @return string
     */
    public function getInsuranceTaxId()
    {
        return $this->container['insurance_tax_id'];
    }

    /**
     * Sets insurance_tax_id
     *
     * @param string $insurance_tax_id insurance_tax_id
     *
     * @return $this
     */
    public function setInsuranceTaxId($insurance_tax_id)
    {
        $this->container['insurance_tax_id'] = $insurance_tax_id;

        return $this;
    }

    /**
     * Gets insurance_tax_rate
     *
     * @return double
     */
    public function getInsuranceTaxRate()
    {
        return $this->container['insurance_tax_rate'];
    }

    /**
     * Sets insurance_tax_rate
     *
     * @param double $insurance_tax_rate insurance_tax_rate
     *
     * @return $this
     */
    public function setInsuranceTaxRate($insurance_tax_rate)
    {
        $this->container['insurance_tax_rate'] = $insurance_tax_rate;

        return $this;
    }

    /**
     * Gets insurance_tax_amount
     *
     * @return double
     */
    public function getInsuranceTaxAmount()
    {
        return $this->container['insurance_tax_amount'];
    }

    /**
     * Sets insurance_tax_amount
     *
     * @param double $insurance_tax_amount insurance_tax_amount
     *
     * @return $this
     */
    public function setInsuranceTaxAmount($insurance_tax_amount)
    {
        $this->container['insurance_tax_amount'] = $insurance_tax_amount;

        return $this;
    }

    /**
     * Gets currency_id
     *
     * @return string
     */
    public function getCurrencyId()
    {
        return $this->container['currency_id'];
    }

    /**
     * Sets currency_id
     *
     * @param string $currency_id currency_id
     *
     * @return $this
     */
    public function setCurrencyId($currency_id)
    {
        $this->container['currency_id'] = $currency_id;

        return $this;
    }

    /**
     * Gets decimal_places
     *
     * @return int
     */
    public function getDecimalPlaces()
    {
        return $this->container['decimal_places'];
    }

    /**
     * Sets decimal_places
     *
     * @param int $decimal_places decimal_places
     *
     * @return $this
     */
    public function setDecimalPlaces($decimal_places)
    {
        $this->container['decimal_places'] = $decimal_places;

        return $this;
    }

    /**
     * Gets fx_decimal_places
     *
     * @return int
     */
    public function getFxDecimalPlaces()
    {
        return $this->container['fx_decimal_places'];
    }

    /**
     * Sets fx_decimal_places
     *
     * @param int $fx_decimal_places fx_decimal_places
     *
     * @return $this
     */
    public function setFxDecimalPlaces($fx_decimal_places)
    {
        $this->container['fx_decimal_places'] = $fx_decimal_places;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(
                ObjectSerializer::sanitizeForSerialization($this),
                JSON_PRETTY_PRINT
            );
        }

        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}



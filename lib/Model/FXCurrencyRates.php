<?php
/**
 * FXCurrencyRates
 *
 * PHP version 5
 *
 * @category Class
 * @package  Jiwa
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * JiwaAPI
 *
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: 1.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 * Swagger Codegen version: 2.4.28-SNAPSHOT
 */

/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Jiwa\Model;

use \ArrayAccess;
use \Jiwa\ObjectSerializer;

/**
 * FXCurrencyRates Class Doc Comment
 *
 * @category Class
 * @description FX_CurrencyRates
 * @package  Jiwa
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class FXCurrencyRates implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $swaggerModelName = 'FX_CurrencyRates';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerTypes = [
        'rec_id' => 'string',
        'fx_main_rec_id' => 'string',
        'date_entered' => '\DateTime',
        'effective_date' => '\DateTime',
        'effective_date_end' => '\DateTime',
        'transaction_rate' => 'double',
        'item_no' => 'int',
        'row_hash' => 'string'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerFormats = [
        'rec_id' => null,
        'fx_main_rec_id' => null,
        'date_entered' => 'date-time',
        'effective_date' => 'date-time',
        'effective_date_end' => 'date-time',
        'transaction_rate' => 'double',
        'item_no' => 'int32',
        'row_hash' => 'binary'
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerFormats()
    {
        return self::$swaggerFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'rec_id' => 'RecID',
        'fx_main_rec_id' => 'FX_Main_RecID',
        'date_entered' => 'DateEntered',
        'effective_date' => 'EffectiveDate',
        'effective_date_end' => 'EffectiveDateEnd',
        'transaction_rate' => 'TransactionRate',
        'item_no' => 'ItemNo',
        'row_hash' => 'RowHash'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'rec_id' => 'setRecId',
        'fx_main_rec_id' => 'setFxMainRecId',
        'date_entered' => 'setDateEntered',
        'effective_date' => 'setEffectiveDate',
        'effective_date_end' => 'setEffectiveDateEnd',
        'transaction_rate' => 'setTransactionRate',
        'item_no' => 'setItemNo',
        'row_hash' => 'setRowHash'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'rec_id' => 'getRecId',
        'fx_main_rec_id' => 'getFxMainRecId',
        'date_entered' => 'getDateEntered',
        'effective_date' => 'getEffectiveDate',
        'effective_date_end' => 'getEffectiveDateEnd',
        'transaction_rate' => 'getTransactionRate',
        'item_no' => 'getItemNo',
        'row_hash' => 'getRowHash'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$swaggerModelName;
    }

    

    

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['rec_id'] = isset($data['rec_id']) ? $data['rec_id'] : null;
        $this->container['fx_main_rec_id'] = isset($data['fx_main_rec_id']) ? $data['fx_main_rec_id'] : null;
        $this->container['date_entered'] = isset($data['date_entered']) ? $data['date_entered'] : null;
        $this->container['effective_date'] = isset($data['effective_date']) ? $data['effective_date'] : null;
        $this->container['effective_date_end'] = isset($data['effective_date_end']) ? $data['effective_date_end'] : null;
        $this->container['transaction_rate'] = isset($data['transaction_rate']) ? $data['transaction_rate'] : null;
        $this->container['item_no'] = isset($data['item_no']) ? $data['item_no'] : null;
        $this->container['row_hash'] = isset($data['row_hash']) ? $data['row_hash'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets rec_id
     *
     * @return string
     */
    public function getRecId()
    {
        return $this->container['rec_id'];
    }

    /**
     * Sets rec_id
     *
     * @param string $rec_id rec_id
     *
     * @return $this
     */
    public function setRecId($rec_id)
    {
        $this->container['rec_id'] = $rec_id;

        return $this;
    }

    /**
     * Gets fx_main_rec_id
     *
     * @return string
     */
    public function getFxMainRecId()
    {
        return $this->container['fx_main_rec_id'];
    }

    /**
     * Sets fx_main_rec_id
     *
     * @param string $fx_main_rec_id fx_main_rec_id
     *
     * @return $this
     */
    public function setFxMainRecId($fx_main_rec_id)
    {
        $this->container['fx_main_rec_id'] = $fx_main_rec_id;

        return $this;
    }

    /**
     * Gets date_entered
     *
     * @return \DateTime
     */
    public function getDateEntered()
    {
        return $this->container['date_entered'];
    }

    /**
     * Sets date_entered
     *
     * @param \DateTime $date_entered date_entered
     *
     * @return $this
     */
    public function setDateEntered($date_entered)
    {
        $this->container['date_entered'] = $date_entered;

        return $this;
    }

    /**
     * Gets effective_date
     *
     * @return \DateTime
     */
    public function getEffectiveDate()
    {
        return $this->container['effective_date'];
    }

    /**
     * Sets effective_date
     *
     * @param \DateTime $effective_date effective_date
     *
     * @return $this
     */
    public function setEffectiveDate($effective_date)
    {
        $this->container['effective_date'] = $effective_date;

        return $this;
    }

    /**
     * Gets effective_date_end
     *
     * @return \DateTime
     */
    public function getEffectiveDateEnd()
    {
        return $this->container['effective_date_end'];
    }

    /**
     * Sets effective_date_end
     *
     * @param \DateTime $effective_date_end effective_date_end
     *
     * @return $this
     */
    public function setEffectiveDateEnd($effective_date_end)
    {
        $this->container['effective_date_end'] = $effective_date_end;

        return $this;
    }

    /**
     * Gets transaction_rate
     *
     * @return double
     */
    public function getTransactionRate()
    {
        return $this->container['transaction_rate'];
    }

    /**
     * Sets transaction_rate
     *
     * @param double $transaction_rate transaction_rate
     *
     * @return $this
     */
    public function setTransactionRate($transaction_rate)
    {
        $this->container['transaction_rate'] = $transaction_rate;

        return $this;
    }

    /**
     * Gets item_no
     *
     * @return int
     */
    public function getItemNo()
    {
        return $this->container['item_no'];
    }

    /**
     * Sets item_no
     *
     * @param int $item_no item_no
     *
     * @return $this
     */
    public function setItemNo($item_no)
    {
        $this->container['item_no'] = $item_no;

        return $this;
    }

    /**
     * Gets row_hash
     *
     * @return string
     */
    public function getRowHash()
    {
        return $this->container['row_hash'];
    }

    /**
     * Sets row_hash
     *
     * @param string $row_hash row_hash
     *
     * @return $this
     */
    public function setRowHash($row_hash)
    {
        $this->container['row_hash'] = $row_hash;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(
                ObjectSerializer::sanitizeForSerialization($this),
                JSON_PRETTY_PRINT
            );
        }

        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}



<?php
/**
 * StaffCurrentUserGETResponse
 *
 * PHP version 5
 *
 * @category Class
 * @package  Jiwa
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * JiwaAPI
 *
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: 1.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 * Swagger Codegen version: 2.4.28-SNAPSHOT
 */

/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Jiwa\JiwaModel;

use \ArrayAccess;
use \Jiwa\ObjectSerializer;

/**
 * StaffCurrentUserGETResponse Class Doc Comment
 *
 * @category Class
 * @description StaffCurrentUserGETResponse
 * @package  Jiwa
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class StaffCurrentUserGETResponse implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $swaggerModelName = 'StaffCurrentUserGETResponse';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerTypes = [
        'session_id' => 'string',
        'ip_address' => 'string',
        'staff_id' => 'string',
        'username' => 'string',
        'login_date_time' => '\DateTime',
        'duration_days' => 'int',
        'duration_hours' => 'int',
        'duration_minutes' => 'int',
        'duration_seconds' => 'int',
        'request_count' => 'int',
        'concurrent_request_count' => 'int',
        'max_concurrent_request_count' => 'int'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerFormats = [
        'session_id' => null,
        'ip_address' => null,
        'staff_id' => null,
        'username' => null,
        'login_date_time' => 'date-time',
        'duration_days' => 'int32',
        'duration_hours' => 'int32',
        'duration_minutes' => 'int32',
        'duration_seconds' => 'int32',
        'request_count' => 'int64',
        'concurrent_request_count' => 'int64',
        'max_concurrent_request_count' => 'int64'
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerFormats()
    {
        return self::$swaggerFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'session_id' => 'SessionID',
        'ip_address' => 'IPAddress',
        'staff_id' => 'StaffID',
        'username' => 'Username',
        'login_date_time' => 'LoginDateTime',
        'duration_days' => 'DurationDays',
        'duration_hours' => 'DurationHours',
        'duration_minutes' => 'DurationMinutes',
        'duration_seconds' => 'DurationSeconds',
        'request_count' => 'RequestCount',
        'concurrent_request_count' => 'ConcurrentRequestCount',
        'max_concurrent_request_count' => 'MaxConcurrentRequestCount'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'session_id' => 'setSessionId',
        'ip_address' => 'setIpAddress',
        'staff_id' => 'setStaffId',
        'username' => 'setUsername',
        'login_date_time' => 'setLoginDateTime',
        'duration_days' => 'setDurationDays',
        'duration_hours' => 'setDurationHours',
        'duration_minutes' => 'setDurationMinutes',
        'duration_seconds' => 'setDurationSeconds',
        'request_count' => 'setRequestCount',
        'concurrent_request_count' => 'setConcurrentRequestCount',
        'max_concurrent_request_count' => 'setMaxConcurrentRequestCount'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'session_id' => 'getSessionId',
        'ip_address' => 'getIpAddress',
        'staff_id' => 'getStaffId',
        'username' => 'getUsername',
        'login_date_time' => 'getLoginDateTime',
        'duration_days' => 'getDurationDays',
        'duration_hours' => 'getDurationHours',
        'duration_minutes' => 'getDurationMinutes',
        'duration_seconds' => 'getDurationSeconds',
        'request_count' => 'getRequestCount',
        'concurrent_request_count' => 'getConcurrentRequestCount',
        'max_concurrent_request_count' => 'getMaxConcurrentRequestCount'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$swaggerModelName;
    }

    

    

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['session_id'] = isset($data['session_id']) ? $data['session_id'] : null;
        $this->container['ip_address'] = isset($data['ip_address']) ? $data['ip_address'] : null;
        $this->container['staff_id'] = isset($data['staff_id']) ? $data['staff_id'] : null;
        $this->container['username'] = isset($data['username']) ? $data['username'] : null;
        $this->container['login_date_time'] = isset($data['login_date_time']) ? $data['login_date_time'] : null;
        $this->container['duration_days'] = isset($data['duration_days']) ? $data['duration_days'] : null;
        $this->container['duration_hours'] = isset($data['duration_hours']) ? $data['duration_hours'] : null;
        $this->container['duration_minutes'] = isset($data['duration_minutes']) ? $data['duration_minutes'] : null;
        $this->container['duration_seconds'] = isset($data['duration_seconds']) ? $data['duration_seconds'] : null;
        $this->container['request_count'] = isset($data['request_count']) ? $data['request_count'] : null;
        $this->container['concurrent_request_count'] = isset($data['concurrent_request_count']) ? $data['concurrent_request_count'] : null;
        $this->container['max_concurrent_request_count'] = isset($data['max_concurrent_request_count']) ? $data['max_concurrent_request_count'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets session_id
     *
     * @return string
     */
    public function getSessionId()
    {
        return $this->container['session_id'];
    }

    /**
     * Sets session_id
     *
     * @param string $session_id session_id
     *
     * @return $this
     */
    public function setSessionId($session_id)
    {
        $this->container['session_id'] = $session_id;

        return $this;
    }

    /**
     * Gets ip_address
     *
     * @return string
     */
    public function getIpAddress()
    {
        return $this->container['ip_address'];
    }

    /**
     * Sets ip_address
     *
     * @param string $ip_address ip_address
     *
     * @return $this
     */
    public function setIpAddress($ip_address)
    {
        $this->container['ip_address'] = $ip_address;

        return $this;
    }

    /**
     * Gets staff_id
     *
     * @return string
     */
    public function getStaffId()
    {
        return $this->container['staff_id'];
    }

    /**
     * Sets staff_id
     *
     * @param string $staff_id staff_id
     *
     * @return $this
     */
    public function setStaffId($staff_id)
    {
        $this->container['staff_id'] = $staff_id;

        return $this;
    }

    /**
     * Gets username
     *
     * @return string
     */
    public function getUsername()
    {
        return $this->container['username'];
    }

    /**
     * Sets username
     *
     * @param string $username username
     *
     * @return $this
     */
    public function setUsername($username)
    {
        $this->container['username'] = $username;

        return $this;
    }

    /**
     * Gets login_date_time
     *
     * @return \DateTime
     */
    public function getLoginDateTime()
    {
        return $this->container['login_date_time'];
    }

    /**
     * Sets login_date_time
     *
     * @param \DateTime $login_date_time login_date_time
     *
     * @return $this
     */
    public function setLoginDateTime($login_date_time)
    {
        $this->container['login_date_time'] = $login_date_time;

        return $this;
    }

    /**
     * Gets duration_days
     *
     * @return int
     */
    public function getDurationDays()
    {
        return $this->container['duration_days'];
    }

    /**
     * Sets duration_days
     *
     * @param int $duration_days duration_days
     *
     * @return $this
     */
    public function setDurationDays($duration_days)
    {
        $this->container['duration_days'] = $duration_days;

        return $this;
    }

    /**
     * Gets duration_hours
     *
     * @return int
     */
    public function getDurationHours()
    {
        return $this->container['duration_hours'];
    }

    /**
     * Sets duration_hours
     *
     * @param int $duration_hours duration_hours
     *
     * @return $this
     */
    public function setDurationHours($duration_hours)
    {
        $this->container['duration_hours'] = $duration_hours;

        return $this;
    }

    /**
     * Gets duration_minutes
     *
     * @return int
     */
    public function getDurationMinutes()
    {
        return $this->container['duration_minutes'];
    }

    /**
     * Sets duration_minutes
     *
     * @param int $duration_minutes duration_minutes
     *
     * @return $this
     */
    public function setDurationMinutes($duration_minutes)
    {
        $this->container['duration_minutes'] = $duration_minutes;

        return $this;
    }

    /**
     * Gets duration_seconds
     *
     * @return int
     */
    public function getDurationSeconds()
    {
        return $this->container['duration_seconds'];
    }

    /**
     * Sets duration_seconds
     *
     * @param int $duration_seconds duration_seconds
     *
     * @return $this
     */
    public function setDurationSeconds($duration_seconds)
    {
        $this->container['duration_seconds'] = $duration_seconds;

        return $this;
    }

    /**
     * Gets request_count
     *
     * @return int
     */
    public function getRequestCount()
    {
        return $this->container['request_count'];
    }

    /**
     * Sets request_count
     *
     * @param int $request_count request_count
     *
     * @return $this
     */
    public function setRequestCount($request_count)
    {
        $this->container['request_count'] = $request_count;

        return $this;
    }

    /**
     * Gets concurrent_request_count
     *
     * @return int
     */
    public function getConcurrentRequestCount()
    {
        return $this->container['concurrent_request_count'];
    }

    /**
     * Sets concurrent_request_count
     *
     * @param int $concurrent_request_count concurrent_request_count
     *
     * @return $this
     */
    public function setConcurrentRequestCount($concurrent_request_count)
    {
        $this->container['concurrent_request_count'] = $concurrent_request_count;

        return $this;
    }

    /**
     * Gets max_concurrent_request_count
     *
     * @return int
     */
    public function getMaxConcurrentRequestCount()
    {
        return $this->container['max_concurrent_request_count'];
    }

    /**
     * Sets max_concurrent_request_count
     *
     * @param int $max_concurrent_request_count max_concurrent_request_count
     *
     * @return $this
     */
    public function setMaxConcurrentRequestCount($max_concurrent_request_count)
    {
        $this->container['max_concurrent_request_count'] = $max_concurrent_request_count;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(
                ObjectSerializer::sanitizeForSerialization($this),
                JSON_PRETTY_PRINT
            );
        }

        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}



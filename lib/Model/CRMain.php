<?php
/**
 * CRMain
 *
 * PHP version 5
 *
 * @category Class
 * @package  Jiwa
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * JiwaAPI
 *
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: 1.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 * Swagger Codegen version: 2.4.28-SNAPSHOT
 */

/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Jiwa\JiwaModel;

use \ArrayAccess;
use \Jiwa\ObjectSerializer;

/**
 * CRMain Class Doc Comment
 *
 * @category Class
 * @description CR_Main
 * @package  Jiwa
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class CRMain implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $swaggerModelName = 'CR_Main';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerTypes = [
        'creditor_id' => 'string',
        'last_saved_date_time' => '\DateTime',
        'account_no' => 'string',
        'name' => 'string',
        'address1' => 'string',
        'address2' => 'string',
        'address3' => 'string',
        'address4' => 'string',
        'post_code' => 'string',
        'phone' => 'string',
        'fax' => 'string',
        'bank_name' => 'string',
        'bank_acc' => 'string',
        'bsbn' => 'string',
        'account_name' => 'string',
        'default_payment_type' => 'int',
        'credit_limit' => 'double',
        'early_pay_dis_on_remit_days' => 'int',
        'early_pay_dis_on_remit_amt' => 'double',
        'last_sale_date' => '\DateTime',
        'last_payment_date' => '\DateTime',
        'classification_id' => 'string',
        'account_on_hold' => 'bool',
        'email_address' => 'string',
        'current_balance' => 'double',
        'period1' => 'double',
        'period2' => 'double',
        'period3' => 'double',
        'period4' => 'double',
        'alt_account_no' => 'string',
        'commence_date' => '\DateTime',
        'terms_days' => 'int',
        'acn' => 'string',
        'currency_id' => 'string',
        'uses_fx' => 'bool',
        'abn' => 'string',
        'terms_type' => 'int',
        'aust_post_dpid' => 'string',
        'aust_post_bcsp' => 'string',
        'min_po_value' => 'double',
        'max_po_value' => 'double',
        'period_type' => 'int',
        'trading_name' => 'string',
        'company_name' => 'string',
        'proprietor_name' => 'string',
        'fx_current_balance' => 'double',
        'fx_period1' => 'double',
        'fx_period2' => 'double',
        'fx_period3' => 'double',
        'fx_period4' => 'double',
        'trading_status' => 'int',
        'ledger_id_creditor_control' => 'string',
        'ledger_id_creditor_purchases' => 'string',
        'ledger_id_creditor_discounts' => 'string',
        'ledger_id_creditor_sourced_payments' => 'string',
        'ledger_id_creditor_sourced_debit_adjustment' => 'string',
        'ledger_id_creditor_sourced_purchase' => 'string',
        'ledger_id_creditor_sourced_credit_adjustment' => 'string',
        'ledger_id_creditor_freight' => 'string',
        'ledger_id_creditor_insurance' => 'string',
        'ledger_id_creditor_duty' => 'string',
        'ledger_id_creditor_realised_gain_loss' => 'string',
        'ledger_id_creditor_un_realised_gain_loss' => 'string',
        'po_workflows_rec_id' => 'string',
        'country' => 'string'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerFormats = [
        'creditor_id' => null,
        'last_saved_date_time' => 'date-time',
        'account_no' => null,
        'name' => null,
        'address1' => null,
        'address2' => null,
        'address3' => null,
        'address4' => null,
        'post_code' => null,
        'phone' => null,
        'fax' => null,
        'bank_name' => null,
        'bank_acc' => null,
        'bsbn' => null,
        'account_name' => null,
        'default_payment_type' => 'int32',
        'credit_limit' => 'double',
        'early_pay_dis_on_remit_days' => 'int32',
        'early_pay_dis_on_remit_amt' => 'double',
        'last_sale_date' => 'date-time',
        'last_payment_date' => 'date-time',
        'classification_id' => null,
        'account_on_hold' => null,
        'email_address' => null,
        'current_balance' => 'double',
        'period1' => 'double',
        'period2' => 'double',
        'period3' => 'double',
        'period4' => 'double',
        'alt_account_no' => null,
        'commence_date' => 'date-time',
        'terms_days' => 'int32',
        'acn' => null,
        'currency_id' => null,
        'uses_fx' => null,
        'abn' => null,
        'terms_type' => 'int32',
        'aust_post_dpid' => null,
        'aust_post_bcsp' => null,
        'min_po_value' => 'double',
        'max_po_value' => 'double',
        'period_type' => 'int32',
        'trading_name' => null,
        'company_name' => null,
        'proprietor_name' => null,
        'fx_current_balance' => 'double',
        'fx_period1' => 'double',
        'fx_period2' => 'double',
        'fx_period3' => 'double',
        'fx_period4' => 'double',
        'trading_status' => 'int32',
        'ledger_id_creditor_control' => null,
        'ledger_id_creditor_purchases' => null,
        'ledger_id_creditor_discounts' => null,
        'ledger_id_creditor_sourced_payments' => null,
        'ledger_id_creditor_sourced_debit_adjustment' => null,
        'ledger_id_creditor_sourced_purchase' => null,
        'ledger_id_creditor_sourced_credit_adjustment' => null,
        'ledger_id_creditor_freight' => null,
        'ledger_id_creditor_insurance' => null,
        'ledger_id_creditor_duty' => null,
        'ledger_id_creditor_realised_gain_loss' => null,
        'ledger_id_creditor_un_realised_gain_loss' => null,
        'po_workflows_rec_id' => null,
        'country' => null
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerFormats()
    {
        return self::$swaggerFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'creditor_id' => 'CreditorID',
        'last_saved_date_time' => 'LastSavedDateTime',
        'account_no' => 'AccountNo',
        'name' => 'Name',
        'address1' => 'Address1',
        'address2' => 'Address2',
        'address3' => 'Address3',
        'address4' => 'Address4',
        'post_code' => 'PostCode',
        'phone' => 'Phone',
        'fax' => 'Fax',
        'bank_name' => 'BankName',
        'bank_acc' => 'BankAcc',
        'bsbn' => 'BSBN',
        'account_name' => 'AccountName',
        'default_payment_type' => 'DefaultPaymentType',
        'credit_limit' => 'CreditLimit',
        'early_pay_dis_on_remit_days' => 'EarlyPayDisOnRemitDays',
        'early_pay_dis_on_remit_amt' => 'EarlyPayDisOnRemitAmt',
        'last_sale_date' => 'LastSaleDate',
        'last_payment_date' => 'LastPaymentDate',
        'classification_id' => 'ClassificationID',
        'account_on_hold' => 'AccountOnHold',
        'email_address' => 'EmailAddress',
        'current_balance' => 'CurrentBalance',
        'period1' => 'Period1',
        'period2' => 'Period2',
        'period3' => 'Period3',
        'period4' => 'Period4',
        'alt_account_no' => 'AltAccountNo',
        'commence_date' => 'CommenceDate',
        'terms_days' => 'TermsDays',
        'acn' => 'ACN',
        'currency_id' => 'CurrencyID',
        'uses_fx' => 'UsesFX',
        'abn' => 'ABN',
        'terms_type' => 'TermsType',
        'aust_post_dpid' => 'AustPostDPID',
        'aust_post_bcsp' => 'AustPostBCSP',
        'min_po_value' => 'MinPOValue',
        'max_po_value' => 'MaxPOValue',
        'period_type' => 'PeriodType',
        'trading_name' => 'TradingName',
        'company_name' => 'CompanyName',
        'proprietor_name' => 'ProprietorName',
        'fx_current_balance' => 'FXCurrentBalance',
        'fx_period1' => 'FXPeriod1',
        'fx_period2' => 'FXPeriod2',
        'fx_period3' => 'FXPeriod3',
        'fx_period4' => 'FXPeriod4',
        'trading_status' => 'TradingStatus',
        'ledger_id_creditor_control' => 'LedgerIDCreditorControl',
        'ledger_id_creditor_purchases' => 'LedgerIDCreditorPurchases',
        'ledger_id_creditor_discounts' => 'LedgerIDCreditorDiscounts',
        'ledger_id_creditor_sourced_payments' => 'LedgerIDCreditorSourcedPayments',
        'ledger_id_creditor_sourced_debit_adjustment' => 'LedgerIDCreditorSourcedDebitAdjustment',
        'ledger_id_creditor_sourced_purchase' => 'LedgerIDCreditorSourcedPurchase',
        'ledger_id_creditor_sourced_credit_adjustment' => 'LedgerIDCreditorSourcedCreditAdjustment',
        'ledger_id_creditor_freight' => 'LedgerIDCreditorFreight',
        'ledger_id_creditor_insurance' => 'LedgerIDCreditorInsurance',
        'ledger_id_creditor_duty' => 'LedgerIDCreditorDuty',
        'ledger_id_creditor_realised_gain_loss' => 'LedgerIDCreditorRealisedGainLoss',
        'ledger_id_creditor_un_realised_gain_loss' => 'LedgerIDCreditorUnRealisedGainLoss',
        'po_workflows_rec_id' => 'PO_Workflows_RecID',
        'country' => 'Country'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'creditor_id' => 'setCreditorId',
        'last_saved_date_time' => 'setLastSavedDateTime',
        'account_no' => 'setAccountNo',
        'name' => 'setName',
        'address1' => 'setAddress1',
        'address2' => 'setAddress2',
        'address3' => 'setAddress3',
        'address4' => 'setAddress4',
        'post_code' => 'setPostCode',
        'phone' => 'setPhone',
        'fax' => 'setFax',
        'bank_name' => 'setBankName',
        'bank_acc' => 'setBankAcc',
        'bsbn' => 'setBsbn',
        'account_name' => 'setAccountName',
        'default_payment_type' => 'setDefaultPaymentType',
        'credit_limit' => 'setCreditLimit',
        'early_pay_dis_on_remit_days' => 'setEarlyPayDisOnRemitDays',
        'early_pay_dis_on_remit_amt' => 'setEarlyPayDisOnRemitAmt',
        'last_sale_date' => 'setLastSaleDate',
        'last_payment_date' => 'setLastPaymentDate',
        'classification_id' => 'setClassificationId',
        'account_on_hold' => 'setAccountOnHold',
        'email_address' => 'setEmailAddress',
        'current_balance' => 'setCurrentBalance',
        'period1' => 'setPeriod1',
        'period2' => 'setPeriod2',
        'period3' => 'setPeriod3',
        'period4' => 'setPeriod4',
        'alt_account_no' => 'setAltAccountNo',
        'commence_date' => 'setCommenceDate',
        'terms_days' => 'setTermsDays',
        'acn' => 'setAcn',
        'currency_id' => 'setCurrencyId',
        'uses_fx' => 'setUsesFx',
        'abn' => 'setAbn',
        'terms_type' => 'setTermsType',
        'aust_post_dpid' => 'setAustPostDpid',
        'aust_post_bcsp' => 'setAustPostBcsp',
        'min_po_value' => 'setMinPoValue',
        'max_po_value' => 'setMaxPoValue',
        'period_type' => 'setPeriodType',
        'trading_name' => 'setTradingName',
        'company_name' => 'setCompanyName',
        'proprietor_name' => 'setProprietorName',
        'fx_current_balance' => 'setFxCurrentBalance',
        'fx_period1' => 'setFxPeriod1',
        'fx_period2' => 'setFxPeriod2',
        'fx_period3' => 'setFxPeriod3',
        'fx_period4' => 'setFxPeriod4',
        'trading_status' => 'setTradingStatus',
        'ledger_id_creditor_control' => 'setLedgerIdCreditorControl',
        'ledger_id_creditor_purchases' => 'setLedgerIdCreditorPurchases',
        'ledger_id_creditor_discounts' => 'setLedgerIdCreditorDiscounts',
        'ledger_id_creditor_sourced_payments' => 'setLedgerIdCreditorSourcedPayments',
        'ledger_id_creditor_sourced_debit_adjustment' => 'setLedgerIdCreditorSourcedDebitAdjustment',
        'ledger_id_creditor_sourced_purchase' => 'setLedgerIdCreditorSourcedPurchase',
        'ledger_id_creditor_sourced_credit_adjustment' => 'setLedgerIdCreditorSourcedCreditAdjustment',
        'ledger_id_creditor_freight' => 'setLedgerIdCreditorFreight',
        'ledger_id_creditor_insurance' => 'setLedgerIdCreditorInsurance',
        'ledger_id_creditor_duty' => 'setLedgerIdCreditorDuty',
        'ledger_id_creditor_realised_gain_loss' => 'setLedgerIdCreditorRealisedGainLoss',
        'ledger_id_creditor_un_realised_gain_loss' => 'setLedgerIdCreditorUnRealisedGainLoss',
        'po_workflows_rec_id' => 'setPoWorkflowsRecId',
        'country' => 'setCountry'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'creditor_id' => 'getCreditorId',
        'last_saved_date_time' => 'getLastSavedDateTime',
        'account_no' => 'getAccountNo',
        'name' => 'getName',
        'address1' => 'getAddress1',
        'address2' => 'getAddress2',
        'address3' => 'getAddress3',
        'address4' => 'getAddress4',
        'post_code' => 'getPostCode',
        'phone' => 'getPhone',
        'fax' => 'getFax',
        'bank_name' => 'getBankName',
        'bank_acc' => 'getBankAcc',
        'bsbn' => 'getBsbn',
        'account_name' => 'getAccountName',
        'default_payment_type' => 'getDefaultPaymentType',
        'credit_limit' => 'getCreditLimit',
        'early_pay_dis_on_remit_days' => 'getEarlyPayDisOnRemitDays',
        'early_pay_dis_on_remit_amt' => 'getEarlyPayDisOnRemitAmt',
        'last_sale_date' => 'getLastSaleDate',
        'last_payment_date' => 'getLastPaymentDate',
        'classification_id' => 'getClassificationId',
        'account_on_hold' => 'getAccountOnHold',
        'email_address' => 'getEmailAddress',
        'current_balance' => 'getCurrentBalance',
        'period1' => 'getPeriod1',
        'period2' => 'getPeriod2',
        'period3' => 'getPeriod3',
        'period4' => 'getPeriod4',
        'alt_account_no' => 'getAltAccountNo',
        'commence_date' => 'getCommenceDate',
        'terms_days' => 'getTermsDays',
        'acn' => 'getAcn',
        'currency_id' => 'getCurrencyId',
        'uses_fx' => 'getUsesFx',
        'abn' => 'getAbn',
        'terms_type' => 'getTermsType',
        'aust_post_dpid' => 'getAustPostDpid',
        'aust_post_bcsp' => 'getAustPostBcsp',
        'min_po_value' => 'getMinPoValue',
        'max_po_value' => 'getMaxPoValue',
        'period_type' => 'getPeriodType',
        'trading_name' => 'getTradingName',
        'company_name' => 'getCompanyName',
        'proprietor_name' => 'getProprietorName',
        'fx_current_balance' => 'getFxCurrentBalance',
        'fx_period1' => 'getFxPeriod1',
        'fx_period2' => 'getFxPeriod2',
        'fx_period3' => 'getFxPeriod3',
        'fx_period4' => 'getFxPeriod4',
        'trading_status' => 'getTradingStatus',
        'ledger_id_creditor_control' => 'getLedgerIdCreditorControl',
        'ledger_id_creditor_purchases' => 'getLedgerIdCreditorPurchases',
        'ledger_id_creditor_discounts' => 'getLedgerIdCreditorDiscounts',
        'ledger_id_creditor_sourced_payments' => 'getLedgerIdCreditorSourcedPayments',
        'ledger_id_creditor_sourced_debit_adjustment' => 'getLedgerIdCreditorSourcedDebitAdjustment',
        'ledger_id_creditor_sourced_purchase' => 'getLedgerIdCreditorSourcedPurchase',
        'ledger_id_creditor_sourced_credit_adjustment' => 'getLedgerIdCreditorSourcedCreditAdjustment',
        'ledger_id_creditor_freight' => 'getLedgerIdCreditorFreight',
        'ledger_id_creditor_insurance' => 'getLedgerIdCreditorInsurance',
        'ledger_id_creditor_duty' => 'getLedgerIdCreditorDuty',
        'ledger_id_creditor_realised_gain_loss' => 'getLedgerIdCreditorRealisedGainLoss',
        'ledger_id_creditor_un_realised_gain_loss' => 'getLedgerIdCreditorUnRealisedGainLoss',
        'po_workflows_rec_id' => 'getPoWorkflowsRecId',
        'country' => 'getCountry'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$swaggerModelName;
    }

    

    

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['creditor_id'] = isset($data['creditor_id']) ? $data['creditor_id'] : null;
        $this->container['last_saved_date_time'] = isset($data['last_saved_date_time']) ? $data['last_saved_date_time'] : null;
        $this->container['account_no'] = isset($data['account_no']) ? $data['account_no'] : null;
        $this->container['name'] = isset($data['name']) ? $data['name'] : null;
        $this->container['address1'] = isset($data['address1']) ? $data['address1'] : null;
        $this->container['address2'] = isset($data['address2']) ? $data['address2'] : null;
        $this->container['address3'] = isset($data['address3']) ? $data['address3'] : null;
        $this->container['address4'] = isset($data['address4']) ? $data['address4'] : null;
        $this->container['post_code'] = isset($data['post_code']) ? $data['post_code'] : null;
        $this->container['phone'] = isset($data['phone']) ? $data['phone'] : null;
        $this->container['fax'] = isset($data['fax']) ? $data['fax'] : null;
        $this->container['bank_name'] = isset($data['bank_name']) ? $data['bank_name'] : null;
        $this->container['bank_acc'] = isset($data['bank_acc']) ? $data['bank_acc'] : null;
        $this->container['bsbn'] = isset($data['bsbn']) ? $data['bsbn'] : null;
        $this->container['account_name'] = isset($data['account_name']) ? $data['account_name'] : null;
        $this->container['default_payment_type'] = isset($data['default_payment_type']) ? $data['default_payment_type'] : null;
        $this->container['credit_limit'] = isset($data['credit_limit']) ? $data['credit_limit'] : null;
        $this->container['early_pay_dis_on_remit_days'] = isset($data['early_pay_dis_on_remit_days']) ? $data['early_pay_dis_on_remit_days'] : null;
        $this->container['early_pay_dis_on_remit_amt'] = isset($data['early_pay_dis_on_remit_amt']) ? $data['early_pay_dis_on_remit_amt'] : null;
        $this->container['last_sale_date'] = isset($data['last_sale_date']) ? $data['last_sale_date'] : null;
        $this->container['last_payment_date'] = isset($data['last_payment_date']) ? $data['last_payment_date'] : null;
        $this->container['classification_id'] = isset($data['classification_id']) ? $data['classification_id'] : null;
        $this->container['account_on_hold'] = isset($data['account_on_hold']) ? $data['account_on_hold'] : null;
        $this->container['email_address'] = isset($data['email_address']) ? $data['email_address'] : null;
        $this->container['current_balance'] = isset($data['current_balance']) ? $data['current_balance'] : null;
        $this->container['period1'] = isset($data['period1']) ? $data['period1'] : null;
        $this->container['period2'] = isset($data['period2']) ? $data['period2'] : null;
        $this->container['period3'] = isset($data['period3']) ? $data['period3'] : null;
        $this->container['period4'] = isset($data['period4']) ? $data['period4'] : null;
        $this->container['alt_account_no'] = isset($data['alt_account_no']) ? $data['alt_account_no'] : null;
        $this->container['commence_date'] = isset($data['commence_date']) ? $data['commence_date'] : null;
        $this->container['terms_days'] = isset($data['terms_days']) ? $data['terms_days'] : null;
        $this->container['acn'] = isset($data['acn']) ? $data['acn'] : null;
        $this->container['currency_id'] = isset($data['currency_id']) ? $data['currency_id'] : null;
        $this->container['uses_fx'] = isset($data['uses_fx']) ? $data['uses_fx'] : null;
        $this->container['abn'] = isset($data['abn']) ? $data['abn'] : null;
        $this->container['terms_type'] = isset($data['terms_type']) ? $data['terms_type'] : null;
        $this->container['aust_post_dpid'] = isset($data['aust_post_dpid']) ? $data['aust_post_dpid'] : null;
        $this->container['aust_post_bcsp'] = isset($data['aust_post_bcsp']) ? $data['aust_post_bcsp'] : null;
        $this->container['min_po_value'] = isset($data['min_po_value']) ? $data['min_po_value'] : null;
        $this->container['max_po_value'] = isset($data['max_po_value']) ? $data['max_po_value'] : null;
        $this->container['period_type'] = isset($data['period_type']) ? $data['period_type'] : null;
        $this->container['trading_name'] = isset($data['trading_name']) ? $data['trading_name'] : null;
        $this->container['company_name'] = isset($data['company_name']) ? $data['company_name'] : null;
        $this->container['proprietor_name'] = isset($data['proprietor_name']) ? $data['proprietor_name'] : null;
        $this->container['fx_current_balance'] = isset($data['fx_current_balance']) ? $data['fx_current_balance'] : null;
        $this->container['fx_period1'] = isset($data['fx_period1']) ? $data['fx_period1'] : null;
        $this->container['fx_period2'] = isset($data['fx_period2']) ? $data['fx_period2'] : null;
        $this->container['fx_period3'] = isset($data['fx_period3']) ? $data['fx_period3'] : null;
        $this->container['fx_period4'] = isset($data['fx_period4']) ? $data['fx_period4'] : null;
        $this->container['trading_status'] = isset($data['trading_status']) ? $data['trading_status'] : null;
        $this->container['ledger_id_creditor_control'] = isset($data['ledger_id_creditor_control']) ? $data['ledger_id_creditor_control'] : null;
        $this->container['ledger_id_creditor_purchases'] = isset($data['ledger_id_creditor_purchases']) ? $data['ledger_id_creditor_purchases'] : null;
        $this->container['ledger_id_creditor_discounts'] = isset($data['ledger_id_creditor_discounts']) ? $data['ledger_id_creditor_discounts'] : null;
        $this->container['ledger_id_creditor_sourced_payments'] = isset($data['ledger_id_creditor_sourced_payments']) ? $data['ledger_id_creditor_sourced_payments'] : null;
        $this->container['ledger_id_creditor_sourced_debit_adjustment'] = isset($data['ledger_id_creditor_sourced_debit_adjustment']) ? $data['ledger_id_creditor_sourced_debit_adjustment'] : null;
        $this->container['ledger_id_creditor_sourced_purchase'] = isset($data['ledger_id_creditor_sourced_purchase']) ? $data['ledger_id_creditor_sourced_purchase'] : null;
        $this->container['ledger_id_creditor_sourced_credit_adjustment'] = isset($data['ledger_id_creditor_sourced_credit_adjustment']) ? $data['ledger_id_creditor_sourced_credit_adjustment'] : null;
        $this->container['ledger_id_creditor_freight'] = isset($data['ledger_id_creditor_freight']) ? $data['ledger_id_creditor_freight'] : null;
        $this->container['ledger_id_creditor_insurance'] = isset($data['ledger_id_creditor_insurance']) ? $data['ledger_id_creditor_insurance'] : null;
        $this->container['ledger_id_creditor_duty'] = isset($data['ledger_id_creditor_duty']) ? $data['ledger_id_creditor_duty'] : null;
        $this->container['ledger_id_creditor_realised_gain_loss'] = isset($data['ledger_id_creditor_realised_gain_loss']) ? $data['ledger_id_creditor_realised_gain_loss'] : null;
        $this->container['ledger_id_creditor_un_realised_gain_loss'] = isset($data['ledger_id_creditor_un_realised_gain_loss']) ? $data['ledger_id_creditor_un_realised_gain_loss'] : null;
        $this->container['po_workflows_rec_id'] = isset($data['po_workflows_rec_id']) ? $data['po_workflows_rec_id'] : null;
        $this->container['country'] = isset($data['country']) ? $data['country'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets creditor_id
     *
     * @return string
     */
    public function getCreditorId()
    {
        return $this->container['creditor_id'];
    }

    /**
     * Sets creditor_id
     *
     * @param string $creditor_id creditor_id
     *
     * @return $this
     */
    public function setCreditorId($creditor_id)
    {
        $this->container['creditor_id'] = $creditor_id;

        return $this;
    }

    /**
     * Gets last_saved_date_time
     *
     * @return \DateTime
     */
    public function getLastSavedDateTime()
    {
        return $this->container['last_saved_date_time'];
    }

    /**
     * Sets last_saved_date_time
     *
     * @param \DateTime $last_saved_date_time last_saved_date_time
     *
     * @return $this
     */
    public function setLastSavedDateTime($last_saved_date_time)
    {
        $this->container['last_saved_date_time'] = $last_saved_date_time;

        return $this;
    }

    /**
     * Gets account_no
     *
     * @return string
     */
    public function getAccountNo()
    {
        return $this->container['account_no'];
    }

    /**
     * Sets account_no
     *
     * @param string $account_no account_no
     *
     * @return $this
     */
    public function setAccountNo($account_no)
    {
        $this->container['account_no'] = $account_no;

        return $this;
    }

    /**
     * Gets name
     *
     * @return string
     */
    public function getName()
    {
        return $this->container['name'];
    }

    /**
     * Sets name
     *
     * @param string $name name
     *
     * @return $this
     */
    public function setName($name)
    {
        $this->container['name'] = $name;

        return $this;
    }

    /**
     * Gets address1
     *
     * @return string
     */
    public function getAddress1()
    {
        return $this->container['address1'];
    }

    /**
     * Sets address1
     *
     * @param string $address1 address1
     *
     * @return $this
     */
    public function setAddress1($address1)
    {
        $this->container['address1'] = $address1;

        return $this;
    }

    /**
     * Gets address2
     *
     * @return string
     */
    public function getAddress2()
    {
        return $this->container['address2'];
    }

    /**
     * Sets address2
     *
     * @param string $address2 address2
     *
     * @return $this
     */
    public function setAddress2($address2)
    {
        $this->container['address2'] = $address2;

        return $this;
    }

    /**
     * Gets address3
     *
     * @return string
     */
    public function getAddress3()
    {
        return $this->container['address3'];
    }

    /**
     * Sets address3
     *
     * @param string $address3 address3
     *
     * @return $this
     */
    public function setAddress3($address3)
    {
        $this->container['address3'] = $address3;

        return $this;
    }

    /**
     * Gets address4
     *
     * @return string
     */
    public function getAddress4()
    {
        return $this->container['address4'];
    }

    /**
     * Sets address4
     *
     * @param string $address4 address4
     *
     * @return $this
     */
    public function setAddress4($address4)
    {
        $this->container['address4'] = $address4;

        return $this;
    }

    /**
     * Gets post_code
     *
     * @return string
     */
    public function getPostCode()
    {
        return $this->container['post_code'];
    }

    /**
     * Sets post_code
     *
     * @param string $post_code post_code
     *
     * @return $this
     */
    public function setPostCode($post_code)
    {
        $this->container['post_code'] = $post_code;

        return $this;
    }

    /**
     * Gets phone
     *
     * @return string
     */
    public function getPhone()
    {
        return $this->container['phone'];
    }

    /**
     * Sets phone
     *
     * @param string $phone phone
     *
     * @return $this
     */
    public function setPhone($phone)
    {
        $this->container['phone'] = $phone;

        return $this;
    }

    /**
     * Gets fax
     *
     * @return string
     */
    public function getFax()
    {
        return $this->container['fax'];
    }

    /**
     * Sets fax
     *
     * @param string $fax fax
     *
     * @return $this
     */
    public function setFax($fax)
    {
        $this->container['fax'] = $fax;

        return $this;
    }

    /**
     * Gets bank_name
     *
     * @return string
     */
    public function getBankName()
    {
        return $this->container['bank_name'];
    }

    /**
     * Sets bank_name
     *
     * @param string $bank_name bank_name
     *
     * @return $this
     */
    public function setBankName($bank_name)
    {
        $this->container['bank_name'] = $bank_name;

        return $this;
    }

    /**
     * Gets bank_acc
     *
     * @return string
     */
    public function getBankAcc()
    {
        return $this->container['bank_acc'];
    }

    /**
     * Sets bank_acc
     *
     * @param string $bank_acc bank_acc
     *
     * @return $this
     */
    public function setBankAcc($bank_acc)
    {
        $this->container['bank_acc'] = $bank_acc;

        return $this;
    }

    /**
     * Gets bsbn
     *
     * @return string
     */
    public function getBsbn()
    {
        return $this->container['bsbn'];
    }

    /**
     * Sets bsbn
     *
     * @param string $bsbn bsbn
     *
     * @return $this
     */
    public function setBsbn($bsbn)
    {
        $this->container['bsbn'] = $bsbn;

        return $this;
    }

    /**
     * Gets account_name
     *
     * @return string
     */
    public function getAccountName()
    {
        return $this->container['account_name'];
    }

    /**
     * Sets account_name
     *
     * @param string $account_name account_name
     *
     * @return $this
     */
    public function setAccountName($account_name)
    {
        $this->container['account_name'] = $account_name;

        return $this;
    }

    /**
     * Gets default_payment_type
     *
     * @return int
     */
    public function getDefaultPaymentType()
    {
        return $this->container['default_payment_type'];
    }

    /**
     * Sets default_payment_type
     *
     * @param int $default_payment_type default_payment_type
     *
     * @return $this
     */
    public function setDefaultPaymentType($default_payment_type)
    {
        $this->container['default_payment_type'] = $default_payment_type;

        return $this;
    }

    /**
     * Gets credit_limit
     *
     * @return double
     */
    public function getCreditLimit()
    {
        return $this->container['credit_limit'];
    }

    /**
     * Sets credit_limit
     *
     * @param double $credit_limit credit_limit
     *
     * @return $this
     */
    public function setCreditLimit($credit_limit)
    {
        $this->container['credit_limit'] = $credit_limit;

        return $this;
    }

    /**
     * Gets early_pay_dis_on_remit_days
     *
     * @return int
     */
    public function getEarlyPayDisOnRemitDays()
    {
        return $this->container['early_pay_dis_on_remit_days'];
    }

    /**
     * Sets early_pay_dis_on_remit_days
     *
     * @param int $early_pay_dis_on_remit_days early_pay_dis_on_remit_days
     *
     * @return $this
     */
    public function setEarlyPayDisOnRemitDays($early_pay_dis_on_remit_days)
    {
        $this->container['early_pay_dis_on_remit_days'] = $early_pay_dis_on_remit_days;

        return $this;
    }

    /**
     * Gets early_pay_dis_on_remit_amt
     *
     * @return double
     */
    public function getEarlyPayDisOnRemitAmt()
    {
        return $this->container['early_pay_dis_on_remit_amt'];
    }

    /**
     * Sets early_pay_dis_on_remit_amt
     *
     * @param double $early_pay_dis_on_remit_amt early_pay_dis_on_remit_amt
     *
     * @return $this
     */
    public function setEarlyPayDisOnRemitAmt($early_pay_dis_on_remit_amt)
    {
        $this->container['early_pay_dis_on_remit_amt'] = $early_pay_dis_on_remit_amt;

        return $this;
    }

    /**
     * Gets last_sale_date
     *
     * @return \DateTime
     */
    public function getLastSaleDate()
    {
        return $this->container['last_sale_date'];
    }

    /**
     * Sets last_sale_date
     *
     * @param \DateTime $last_sale_date last_sale_date
     *
     * @return $this
     */
    public function setLastSaleDate($last_sale_date)
    {
        $this->container['last_sale_date'] = $last_sale_date;

        return $this;
    }

    /**
     * Gets last_payment_date
     *
     * @return \DateTime
     */
    public function getLastPaymentDate()
    {
        return $this->container['last_payment_date'];
    }

    /**
     * Sets last_payment_date
     *
     * @param \DateTime $last_payment_date last_payment_date
     *
     * @return $this
     */
    public function setLastPaymentDate($last_payment_date)
    {
        $this->container['last_payment_date'] = $last_payment_date;

        return $this;
    }

    /**
     * Gets classification_id
     *
     * @return string
     */
    public function getClassificationId()
    {
        return $this->container['classification_id'];
    }

    /**
     * Sets classification_id
     *
     * @param string $classification_id classification_id
     *
     * @return $this
     */
    public function setClassificationId($classification_id)
    {
        $this->container['classification_id'] = $classification_id;

        return $this;
    }

    /**
     * Gets account_on_hold
     *
     * @return bool
     */
    public function getAccountOnHold()
    {
        return $this->container['account_on_hold'];
    }

    /**
     * Sets account_on_hold
     *
     * @param bool $account_on_hold account_on_hold
     *
     * @return $this
     */
    public function setAccountOnHold($account_on_hold)
    {
        $this->container['account_on_hold'] = $account_on_hold;

        return $this;
    }

    /**
     * Gets email_address
     *
     * @return string
     */
    public function getEmailAddress()
    {
        return $this->container['email_address'];
    }

    /**
     * Sets email_address
     *
     * @param string $email_address email_address
     *
     * @return $this
     */
    public function setEmailAddress($email_address)
    {
        $this->container['email_address'] = $email_address;

        return $this;
    }

    /**
     * Gets current_balance
     *
     * @return double
     */
    public function getCurrentBalance()
    {
        return $this->container['current_balance'];
    }

    /**
     * Sets current_balance
     *
     * @param double $current_balance current_balance
     *
     * @return $this
     */
    public function setCurrentBalance($current_balance)
    {
        $this->container['current_balance'] = $current_balance;

        return $this;
    }

    /**
     * Gets period1
     *
     * @return double
     */
    public function getPeriod1()
    {
        return $this->container['period1'];
    }

    /**
     * Sets period1
     *
     * @param double $period1 period1
     *
     * @return $this
     */
    public function setPeriod1($period1)
    {
        $this->container['period1'] = $period1;

        return $this;
    }

    /**
     * Gets period2
     *
     * @return double
     */
    public function getPeriod2()
    {
        return $this->container['period2'];
    }

    /**
     * Sets period2
     *
     * @param double $period2 period2
     *
     * @return $this
     */
    public function setPeriod2($period2)
    {
        $this->container['period2'] = $period2;

        return $this;
    }

    /**
     * Gets period3
     *
     * @return double
     */
    public function getPeriod3()
    {
        return $this->container['period3'];
    }

    /**
     * Sets period3
     *
     * @param double $period3 period3
     *
     * @return $this
     */
    public function setPeriod3($period3)
    {
        $this->container['period3'] = $period3;

        return $this;
    }

    /**
     * Gets period4
     *
     * @return double
     */
    public function getPeriod4()
    {
        return $this->container['period4'];
    }

    /**
     * Sets period4
     *
     * @param double $period4 period4
     *
     * @return $this
     */
    public function setPeriod4($period4)
    {
        $this->container['period4'] = $period4;

        return $this;
    }

    /**
     * Gets alt_account_no
     *
     * @return string
     */
    public function getAltAccountNo()
    {
        return $this->container['alt_account_no'];
    }

    /**
     * Sets alt_account_no
     *
     * @param string $alt_account_no alt_account_no
     *
     * @return $this
     */
    public function setAltAccountNo($alt_account_no)
    {
        $this->container['alt_account_no'] = $alt_account_no;

        return $this;
    }

    /**
     * Gets commence_date
     *
     * @return \DateTime
     */
    public function getCommenceDate()
    {
        return $this->container['commence_date'];
    }

    /**
     * Sets commence_date
     *
     * @param \DateTime $commence_date commence_date
     *
     * @return $this
     */
    public function setCommenceDate($commence_date)
    {
        $this->container['commence_date'] = $commence_date;

        return $this;
    }

    /**
     * Gets terms_days
     *
     * @return int
     */
    public function getTermsDays()
    {
        return $this->container['terms_days'];
    }

    /**
     * Sets terms_days
     *
     * @param int $terms_days terms_days
     *
     * @return $this
     */
    public function setTermsDays($terms_days)
    {
        $this->container['terms_days'] = $terms_days;

        return $this;
    }

    /**
     * Gets acn
     *
     * @return string
     */
    public function getAcn()
    {
        return $this->container['acn'];
    }

    /**
     * Sets acn
     *
     * @param string $acn acn
     *
     * @return $this
     */
    public function setAcn($acn)
    {
        $this->container['acn'] = $acn;

        return $this;
    }

    /**
     * Gets currency_id
     *
     * @return string
     */
    public function getCurrencyId()
    {
        return $this->container['currency_id'];
    }

    /**
     * Sets currency_id
     *
     * @param string $currency_id currency_id
     *
     * @return $this
     */
    public function setCurrencyId($currency_id)
    {
        $this->container['currency_id'] = $currency_id;

        return $this;
    }

    /**
     * Gets uses_fx
     *
     * @return bool
     */
    public function getUsesFx()
    {
        return $this->container['uses_fx'];
    }

    /**
     * Sets uses_fx
     *
     * @param bool $uses_fx uses_fx
     *
     * @return $this
     */
    public function setUsesFx($uses_fx)
    {
        $this->container['uses_fx'] = $uses_fx;

        return $this;
    }

    /**
     * Gets abn
     *
     * @return string
     */
    public function getAbn()
    {
        return $this->container['abn'];
    }

    /**
     * Sets abn
     *
     * @param string $abn abn
     *
     * @return $this
     */
    public function setAbn($abn)
    {
        $this->container['abn'] = $abn;

        return $this;
    }

    /**
     * Gets terms_type
     *
     * @return int
     */
    public function getTermsType()
    {
        return $this->container['terms_type'];
    }

    /**
     * Sets terms_type
     *
     * @param int $terms_type terms_type
     *
     * @return $this
     */
    public function setTermsType($terms_type)
    {
        $this->container['terms_type'] = $terms_type;

        return $this;
    }

    /**
     * Gets aust_post_dpid
     *
     * @return string
     */
    public function getAustPostDpid()
    {
        return $this->container['aust_post_dpid'];
    }

    /**
     * Sets aust_post_dpid
     *
     * @param string $aust_post_dpid aust_post_dpid
     *
     * @return $this
     */
    public function setAustPostDpid($aust_post_dpid)
    {
        $this->container['aust_post_dpid'] = $aust_post_dpid;

        return $this;
    }

    /**
     * Gets aust_post_bcsp
     *
     * @return string
     */
    public function getAustPostBcsp()
    {
        return $this->container['aust_post_bcsp'];
    }

    /**
     * Sets aust_post_bcsp
     *
     * @param string $aust_post_bcsp aust_post_bcsp
     *
     * @return $this
     */
    public function setAustPostBcsp($aust_post_bcsp)
    {
        $this->container['aust_post_bcsp'] = $aust_post_bcsp;

        return $this;
    }

    /**
     * Gets min_po_value
     *
     * @return double
     */
    public function getMinPoValue()
    {
        return $this->container['min_po_value'];
    }

    /**
     * Sets min_po_value
     *
     * @param double $min_po_value min_po_value
     *
     * @return $this
     */
    public function setMinPoValue($min_po_value)
    {
        $this->container['min_po_value'] = $min_po_value;

        return $this;
    }

    /**
     * Gets max_po_value
     *
     * @return double
     */
    public function getMaxPoValue()
    {
        return $this->container['max_po_value'];
    }

    /**
     * Sets max_po_value
     *
     * @param double $max_po_value max_po_value
     *
     * @return $this
     */
    public function setMaxPoValue($max_po_value)
    {
        $this->container['max_po_value'] = $max_po_value;

        return $this;
    }

    /**
     * Gets period_type
     *
     * @return int
     */
    public function getPeriodType()
    {
        return $this->container['period_type'];
    }

    /**
     * Sets period_type
     *
     * @param int $period_type period_type
     *
     * @return $this
     */
    public function setPeriodType($period_type)
    {
        $this->container['period_type'] = $period_type;

        return $this;
    }

    /**
     * Gets trading_name
     *
     * @return string
     */
    public function getTradingName()
    {
        return $this->container['trading_name'];
    }

    /**
     * Sets trading_name
     *
     * @param string $trading_name trading_name
     *
     * @return $this
     */
    public function setTradingName($trading_name)
    {
        $this->container['trading_name'] = $trading_name;

        return $this;
    }

    /**
     * Gets company_name
     *
     * @return string
     */
    public function getCompanyName()
    {
        return $this->container['company_name'];
    }

    /**
     * Sets company_name
     *
     * @param string $company_name company_name
     *
     * @return $this
     */
    public function setCompanyName($company_name)
    {
        $this->container['company_name'] = $company_name;

        return $this;
    }

    /**
     * Gets proprietor_name
     *
     * @return string
     */
    public function getProprietorName()
    {
        return $this->container['proprietor_name'];
    }

    /**
     * Sets proprietor_name
     *
     * @param string $proprietor_name proprietor_name
     *
     * @return $this
     */
    public function setProprietorName($proprietor_name)
    {
        $this->container['proprietor_name'] = $proprietor_name;

        return $this;
    }

    /**
     * Gets fx_current_balance
     *
     * @return double
     */
    public function getFxCurrentBalance()
    {
        return $this->container['fx_current_balance'];
    }

    /**
     * Sets fx_current_balance
     *
     * @param double $fx_current_balance fx_current_balance
     *
     * @return $this
     */
    public function setFxCurrentBalance($fx_current_balance)
    {
        $this->container['fx_current_balance'] = $fx_current_balance;

        return $this;
    }

    /**
     * Gets fx_period1
     *
     * @return double
     */
    public function getFxPeriod1()
    {
        return $this->container['fx_period1'];
    }

    /**
     * Sets fx_period1
     *
     * @param double $fx_period1 fx_period1
     *
     * @return $this
     */
    public function setFxPeriod1($fx_period1)
    {
        $this->container['fx_period1'] = $fx_period1;

        return $this;
    }

    /**
     * Gets fx_period2
     *
     * @return double
     */
    public function getFxPeriod2()
    {
        return $this->container['fx_period2'];
    }

    /**
     * Sets fx_period2
     *
     * @param double $fx_period2 fx_period2
     *
     * @return $this
     */
    public function setFxPeriod2($fx_period2)
    {
        $this->container['fx_period2'] = $fx_period2;

        return $this;
    }

    /**
     * Gets fx_period3
     *
     * @return double
     */
    public function getFxPeriod3()
    {
        return $this->container['fx_period3'];
    }

    /**
     * Sets fx_period3
     *
     * @param double $fx_period3 fx_period3
     *
     * @return $this
     */
    public function setFxPeriod3($fx_period3)
    {
        $this->container['fx_period3'] = $fx_period3;

        return $this;
    }

    /**
     * Gets fx_period4
     *
     * @return double
     */
    public function getFxPeriod4()
    {
        return $this->container['fx_period4'];
    }

    /**
     * Sets fx_period4
     *
     * @param double $fx_period4 fx_period4
     *
     * @return $this
     */
    public function setFxPeriod4($fx_period4)
    {
        $this->container['fx_period4'] = $fx_period4;

        return $this;
    }

    /**
     * Gets trading_status
     *
     * @return int
     */
    public function getTradingStatus()
    {
        return $this->container['trading_status'];
    }

    /**
     * Sets trading_status
     *
     * @param int $trading_status trading_status
     *
     * @return $this
     */
    public function setTradingStatus($trading_status)
    {
        $this->container['trading_status'] = $trading_status;

        return $this;
    }

    /**
     * Gets ledger_id_creditor_control
     *
     * @return string
     */
    public function getLedgerIdCreditorControl()
    {
        return $this->container['ledger_id_creditor_control'];
    }

    /**
     * Sets ledger_id_creditor_control
     *
     * @param string $ledger_id_creditor_control ledger_id_creditor_control
     *
     * @return $this
     */
    public function setLedgerIdCreditorControl($ledger_id_creditor_control)
    {
        $this->container['ledger_id_creditor_control'] = $ledger_id_creditor_control;

        return $this;
    }

    /**
     * Gets ledger_id_creditor_purchases
     *
     * @return string
     */
    public function getLedgerIdCreditorPurchases()
    {
        return $this->container['ledger_id_creditor_purchases'];
    }

    /**
     * Sets ledger_id_creditor_purchases
     *
     * @param string $ledger_id_creditor_purchases ledger_id_creditor_purchases
     *
     * @return $this
     */
    public function setLedgerIdCreditorPurchases($ledger_id_creditor_purchases)
    {
        $this->container['ledger_id_creditor_purchases'] = $ledger_id_creditor_purchases;

        return $this;
    }

    /**
     * Gets ledger_id_creditor_discounts
     *
     * @return string
     */
    public function getLedgerIdCreditorDiscounts()
    {
        return $this->container['ledger_id_creditor_discounts'];
    }

    /**
     * Sets ledger_id_creditor_discounts
     *
     * @param string $ledger_id_creditor_discounts ledger_id_creditor_discounts
     *
     * @return $this
     */
    public function setLedgerIdCreditorDiscounts($ledger_id_creditor_discounts)
    {
        $this->container['ledger_id_creditor_discounts'] = $ledger_id_creditor_discounts;

        return $this;
    }

    /**
     * Gets ledger_id_creditor_sourced_payments
     *
     * @return string
     */
    public function getLedgerIdCreditorSourcedPayments()
    {
        return $this->container['ledger_id_creditor_sourced_payments'];
    }

    /**
     * Sets ledger_id_creditor_sourced_payments
     *
     * @param string $ledger_id_creditor_sourced_payments ledger_id_creditor_sourced_payments
     *
     * @return $this
     */
    public function setLedgerIdCreditorSourcedPayments($ledger_id_creditor_sourced_payments)
    {
        $this->container['ledger_id_creditor_sourced_payments'] = $ledger_id_creditor_sourced_payments;

        return $this;
    }

    /**
     * Gets ledger_id_creditor_sourced_debit_adjustment
     *
     * @return string
     */
    public function getLedgerIdCreditorSourcedDebitAdjustment()
    {
        return $this->container['ledger_id_creditor_sourced_debit_adjustment'];
    }

    /**
     * Sets ledger_id_creditor_sourced_debit_adjustment
     *
     * @param string $ledger_id_creditor_sourced_debit_adjustment ledger_id_creditor_sourced_debit_adjustment
     *
     * @return $this
     */
    public function setLedgerIdCreditorSourcedDebitAdjustment($ledger_id_creditor_sourced_debit_adjustment)
    {
        $this->container['ledger_id_creditor_sourced_debit_adjustment'] = $ledger_id_creditor_sourced_debit_adjustment;

        return $this;
    }

    /**
     * Gets ledger_id_creditor_sourced_purchase
     *
     * @return string
     */
    public function getLedgerIdCreditorSourcedPurchase()
    {
        return $this->container['ledger_id_creditor_sourced_purchase'];
    }

    /**
     * Sets ledger_id_creditor_sourced_purchase
     *
     * @param string $ledger_id_creditor_sourced_purchase ledger_id_creditor_sourced_purchase
     *
     * @return $this
     */
    public function setLedgerIdCreditorSourcedPurchase($ledger_id_creditor_sourced_purchase)
    {
        $this->container['ledger_id_creditor_sourced_purchase'] = $ledger_id_creditor_sourced_purchase;

        return $this;
    }

    /**
     * Gets ledger_id_creditor_sourced_credit_adjustment
     *
     * @return string
     */
    public function getLedgerIdCreditorSourcedCreditAdjustment()
    {
        return $this->container['ledger_id_creditor_sourced_credit_adjustment'];
    }

    /**
     * Sets ledger_id_creditor_sourced_credit_adjustment
     *
     * @param string $ledger_id_creditor_sourced_credit_adjustment ledger_id_creditor_sourced_credit_adjustment
     *
     * @return $this
     */
    public function setLedgerIdCreditorSourcedCreditAdjustment($ledger_id_creditor_sourced_credit_adjustment)
    {
        $this->container['ledger_id_creditor_sourced_credit_adjustment'] = $ledger_id_creditor_sourced_credit_adjustment;

        return $this;
    }

    /**
     * Gets ledger_id_creditor_freight
     *
     * @return string
     */
    public function getLedgerIdCreditorFreight()
    {
        return $this->container['ledger_id_creditor_freight'];
    }

    /**
     * Sets ledger_id_creditor_freight
     *
     * @param string $ledger_id_creditor_freight ledger_id_creditor_freight
     *
     * @return $this
     */
    public function setLedgerIdCreditorFreight($ledger_id_creditor_freight)
    {
        $this->container['ledger_id_creditor_freight'] = $ledger_id_creditor_freight;

        return $this;
    }

    /**
     * Gets ledger_id_creditor_insurance
     *
     * @return string
     */
    public function getLedgerIdCreditorInsurance()
    {
        return $this->container['ledger_id_creditor_insurance'];
    }

    /**
     * Sets ledger_id_creditor_insurance
     *
     * @param string $ledger_id_creditor_insurance ledger_id_creditor_insurance
     *
     * @return $this
     */
    public function setLedgerIdCreditorInsurance($ledger_id_creditor_insurance)
    {
        $this->container['ledger_id_creditor_insurance'] = $ledger_id_creditor_insurance;

        return $this;
    }

    /**
     * Gets ledger_id_creditor_duty
     *
     * @return string
     */
    public function getLedgerIdCreditorDuty()
    {
        return $this->container['ledger_id_creditor_duty'];
    }

    /**
     * Sets ledger_id_creditor_duty
     *
     * @param string $ledger_id_creditor_duty ledger_id_creditor_duty
     *
     * @return $this
     */
    public function setLedgerIdCreditorDuty($ledger_id_creditor_duty)
    {
        $this->container['ledger_id_creditor_duty'] = $ledger_id_creditor_duty;

        return $this;
    }

    /**
     * Gets ledger_id_creditor_realised_gain_loss
     *
     * @return string
     */
    public function getLedgerIdCreditorRealisedGainLoss()
    {
        return $this->container['ledger_id_creditor_realised_gain_loss'];
    }

    /**
     * Sets ledger_id_creditor_realised_gain_loss
     *
     * @param string $ledger_id_creditor_realised_gain_loss ledger_id_creditor_realised_gain_loss
     *
     * @return $this
     */
    public function setLedgerIdCreditorRealisedGainLoss($ledger_id_creditor_realised_gain_loss)
    {
        $this->container['ledger_id_creditor_realised_gain_loss'] = $ledger_id_creditor_realised_gain_loss;

        return $this;
    }

    /**
     * Gets ledger_id_creditor_un_realised_gain_loss
     *
     * @return string
     */
    public function getLedgerIdCreditorUnRealisedGainLoss()
    {
        return $this->container['ledger_id_creditor_un_realised_gain_loss'];
    }

    /**
     * Sets ledger_id_creditor_un_realised_gain_loss
     *
     * @param string $ledger_id_creditor_un_realised_gain_loss ledger_id_creditor_un_realised_gain_loss
     *
     * @return $this
     */
    public function setLedgerIdCreditorUnRealisedGainLoss($ledger_id_creditor_un_realised_gain_loss)
    {
        $this->container['ledger_id_creditor_un_realised_gain_loss'] = $ledger_id_creditor_un_realised_gain_loss;

        return $this;
    }

    /**
     * Gets po_workflows_rec_id
     *
     * @return string
     */
    public function getPoWorkflowsRecId()
    {
        return $this->container['po_workflows_rec_id'];
    }

    /**
     * Sets po_workflows_rec_id
     *
     * @param string $po_workflows_rec_id po_workflows_rec_id
     *
     * @return $this
     */
    public function setPoWorkflowsRecId($po_workflows_rec_id)
    {
        $this->container['po_workflows_rec_id'] = $po_workflows_rec_id;

        return $this;
    }

    /**
     * Gets country
     *
     * @return string
     */
    public function getCountry()
    {
        return $this->container['country'];
    }

    /**
     * Sets country
     *
     * @param string $country country
     *
     * @return $this
     */
    public function setCountry($country)
    {
        $this->container['country'] = $country;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(
                ObjectSerializer::sanitizeForSerialization($this),
                JSON_PRETTY_PRINT
            );
        }

        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}



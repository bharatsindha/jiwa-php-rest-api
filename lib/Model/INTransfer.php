<?php
/**
 * INTransfer
 *
 * PHP version 5
 *
 * @category Class
 * @package  Jiwa
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * JiwaAPI
 *
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: 1.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 * Swagger Codegen version: 2.4.28-SNAPSHOT
 */

/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Jiwa\JiwaModel;

use \ArrayAccess;
use \Jiwa\ObjectSerializer;

/**
 * INTransfer Class Doc Comment
 *
 * @category Class
 * @description IN_Transfer
 * @package  Jiwa
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class INTransfer implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $swaggerModelName = 'IN_Transfer';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerTypes = [
        'transfer_id' => 'string',
        'last_saved_date_time' => '\DateTime',
        'transfer_no' => 'string',
        'transfer_date' => '\DateTime',
        'reference' => 'string',
        'in_logical_id' => 'string',
        'status' => 'int',
        'created_date_time' => '\DateTime',
        'created_by_staff_id' => 'string',
        'last_saved_by_staff_id' => 'string',
        'in_transfer_reasons_rec_id' => 'string'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerFormats = [
        'transfer_id' => null,
        'last_saved_date_time' => 'date-time',
        'transfer_no' => null,
        'transfer_date' => 'date-time',
        'reference' => null,
        'in_logical_id' => null,
        'status' => 'int32',
        'created_date_time' => 'date-time',
        'created_by_staff_id' => null,
        'last_saved_by_staff_id' => null,
        'in_transfer_reasons_rec_id' => null
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerFormats()
    {
        return self::$swaggerFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'transfer_id' => 'TransferID',
        'last_saved_date_time' => 'LastSavedDateTime',
        'transfer_no' => 'TransferNo',
        'transfer_date' => 'TransferDate',
        'reference' => 'Reference',
        'in_logical_id' => 'IN_LogicalID',
        'status' => 'Status',
        'created_date_time' => 'CreatedDateTime',
        'created_by_staff_id' => 'CreatedByStaffID',
        'last_saved_by_staff_id' => 'LastSavedByStaffID',
        'in_transfer_reasons_rec_id' => 'IN_TransferReasons_RecID'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'transfer_id' => 'setTransferId',
        'last_saved_date_time' => 'setLastSavedDateTime',
        'transfer_no' => 'setTransferNo',
        'transfer_date' => 'setTransferDate',
        'reference' => 'setReference',
        'in_logical_id' => 'setInLogicalId',
        'status' => 'setStatus',
        'created_date_time' => 'setCreatedDateTime',
        'created_by_staff_id' => 'setCreatedByStaffId',
        'last_saved_by_staff_id' => 'setLastSavedByStaffId',
        'in_transfer_reasons_rec_id' => 'setInTransferReasonsRecId'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'transfer_id' => 'getTransferId',
        'last_saved_date_time' => 'getLastSavedDateTime',
        'transfer_no' => 'getTransferNo',
        'transfer_date' => 'getTransferDate',
        'reference' => 'getReference',
        'in_logical_id' => 'getInLogicalId',
        'status' => 'getStatus',
        'created_date_time' => 'getCreatedDateTime',
        'created_by_staff_id' => 'getCreatedByStaffId',
        'last_saved_by_staff_id' => 'getLastSavedByStaffId',
        'in_transfer_reasons_rec_id' => 'getInTransferReasonsRecId'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$swaggerModelName;
    }

    

    

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['transfer_id'] = isset($data['transfer_id']) ? $data['transfer_id'] : null;
        $this->container['last_saved_date_time'] = isset($data['last_saved_date_time']) ? $data['last_saved_date_time'] : null;
        $this->container['transfer_no'] = isset($data['transfer_no']) ? $data['transfer_no'] : null;
        $this->container['transfer_date'] = isset($data['transfer_date']) ? $data['transfer_date'] : null;
        $this->container['reference'] = isset($data['reference']) ? $data['reference'] : null;
        $this->container['in_logical_id'] = isset($data['in_logical_id']) ? $data['in_logical_id'] : null;
        $this->container['status'] = isset($data['status']) ? $data['status'] : null;
        $this->container['created_date_time'] = isset($data['created_date_time']) ? $data['created_date_time'] : null;
        $this->container['created_by_staff_id'] = isset($data['created_by_staff_id']) ? $data['created_by_staff_id'] : null;
        $this->container['last_saved_by_staff_id'] = isset($data['last_saved_by_staff_id']) ? $data['last_saved_by_staff_id'] : null;
        $this->container['in_transfer_reasons_rec_id'] = isset($data['in_transfer_reasons_rec_id']) ? $data['in_transfer_reasons_rec_id'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets transfer_id
     *
     * @return string
     */
    public function getTransferId()
    {
        return $this->container['transfer_id'];
    }

    /**
     * Sets transfer_id
     *
     * @param string $transfer_id transfer_id
     *
     * @return $this
     */
    public function setTransferId($transfer_id)
    {
        $this->container['transfer_id'] = $transfer_id;

        return $this;
    }

    /**
     * Gets last_saved_date_time
     *
     * @return \DateTime
     */
    public function getLastSavedDateTime()
    {
        return $this->container['last_saved_date_time'];
    }

    /**
     * Sets last_saved_date_time
     *
     * @param \DateTime $last_saved_date_time last_saved_date_time
     *
     * @return $this
     */
    public function setLastSavedDateTime($last_saved_date_time)
    {
        $this->container['last_saved_date_time'] = $last_saved_date_time;

        return $this;
    }

    /**
     * Gets transfer_no
     *
     * @return string
     */
    public function getTransferNo()
    {
        return $this->container['transfer_no'];
    }

    /**
     * Sets transfer_no
     *
     * @param string $transfer_no transfer_no
     *
     * @return $this
     */
    public function setTransferNo($transfer_no)
    {
        $this->container['transfer_no'] = $transfer_no;

        return $this;
    }

    /**
     * Gets transfer_date
     *
     * @return \DateTime
     */
    public function getTransferDate()
    {
        return $this->container['transfer_date'];
    }

    /**
     * Sets transfer_date
     *
     * @param \DateTime $transfer_date transfer_date
     *
     * @return $this
     */
    public function setTransferDate($transfer_date)
    {
        $this->container['transfer_date'] = $transfer_date;

        return $this;
    }

    /**
     * Gets reference
     *
     * @return string
     */
    public function getReference()
    {
        return $this->container['reference'];
    }

    /**
     * Sets reference
     *
     * @param string $reference reference
     *
     * @return $this
     */
    public function setReference($reference)
    {
        $this->container['reference'] = $reference;

        return $this;
    }

    /**
     * Gets in_logical_id
     *
     * @return string
     */
    public function getInLogicalId()
    {
        return $this->container['in_logical_id'];
    }

    /**
     * Sets in_logical_id
     *
     * @param string $in_logical_id in_logical_id
     *
     * @return $this
     */
    public function setInLogicalId($in_logical_id)
    {
        $this->container['in_logical_id'] = $in_logical_id;

        return $this;
    }

    /**
     * Gets status
     *
     * @return int
     */
    public function getStatus()
    {
        return $this->container['status'];
    }

    /**
     * Sets status
     *
     * @param int $status status
     *
     * @return $this
     */
    public function setStatus($status)
    {
        $this->container['status'] = $status;

        return $this;
    }

    /**
     * Gets created_date_time
     *
     * @return \DateTime
     */
    public function getCreatedDateTime()
    {
        return $this->container['created_date_time'];
    }

    /**
     * Sets created_date_time
     *
     * @param \DateTime $created_date_time created_date_time
     *
     * @return $this
     */
    public function setCreatedDateTime($created_date_time)
    {
        $this->container['created_date_time'] = $created_date_time;

        return $this;
    }

    /**
     * Gets created_by_staff_id
     *
     * @return string
     */
    public function getCreatedByStaffId()
    {
        return $this->container['created_by_staff_id'];
    }

    /**
     * Sets created_by_staff_id
     *
     * @param string $created_by_staff_id created_by_staff_id
     *
     * @return $this
     */
    public function setCreatedByStaffId($created_by_staff_id)
    {
        $this->container['created_by_staff_id'] = $created_by_staff_id;

        return $this;
    }

    /**
     * Gets last_saved_by_staff_id
     *
     * @return string
     */
    public function getLastSavedByStaffId()
    {
        return $this->container['last_saved_by_staff_id'];
    }

    /**
     * Sets last_saved_by_staff_id
     *
     * @param string $last_saved_by_staff_id last_saved_by_staff_id
     *
     * @return $this
     */
    public function setLastSavedByStaffId($last_saved_by_staff_id)
    {
        $this->container['last_saved_by_staff_id'] = $last_saved_by_staff_id;

        return $this;
    }

    /**
     * Gets in_transfer_reasons_rec_id
     *
     * @return string
     */
    public function getInTransferReasonsRecId()
    {
        return $this->container['in_transfer_reasons_rec_id'];
    }

    /**
     * Sets in_transfer_reasons_rec_id
     *
     * @param string $in_transfer_reasons_rec_id in_transfer_reasons_rec_id
     *
     * @return $this
     */
    public function setInTransferReasonsRecId($in_transfer_reasons_rec_id)
    {
        $this->container['in_transfer_reasons_rec_id'] = $in_transfer_reasons_rec_id;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(
                ObjectSerializer::sanitizeForSerialization($this),
                JSON_PRETTY_PRINT
            );
        }

        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}



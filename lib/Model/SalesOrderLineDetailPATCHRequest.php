<?php
/**
 * SalesOrderLineDetailPATCHRequest
 *
 * PHP version 5
 *
 * @category Class
 * @package  Jiwa
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * JiwaAPI
 *
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: 1.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 * Swagger Codegen version: 2.4.28-SNAPSHOT
 */

/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Jiwa\Model;

use \ArrayAccess;
use \Jiwa\ObjectSerializer;

/**
 * SalesOrderLineDetailPATCHRequest Class Doc Comment
 *
 * @category Class
 * @description SalesOrderLineDetailPATCHRequest
 * @package  Jiwa
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class SalesOrderLineDetailPATCHRequest implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $swaggerModelName = 'SalesOrderLineDetailPATCHRequest';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerTypes = [
        'invoice_id' => 'string',
        'invoice_history_id' => 'string',
        'invoice_line_id' => 'string',
        'details_line_id' => 'string',
        'cost' => 'double',
        'date_in' => '\DateTime',
        'expiry_date' => '\DateTime',
        'special_price' => 'double',
        'quantity' => 'double',
        'line_detail_id' => 'string',
        'bin_location' => 'string',
        'serial_no' => 'string',
        'sohid' => 'string',
        'in_logical_id' => 'string'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerFormats = [
        'invoice_id' => null,
        'invoice_history_id' => null,
        'invoice_line_id' => null,
        'details_line_id' => null,
        'cost' => 'double',
        'date_in' => 'date-time',
        'expiry_date' => 'date-time',
        'special_price' => 'double',
        'quantity' => 'double',
        'line_detail_id' => null,
        'bin_location' => null,
        'serial_no' => null,
        'sohid' => null,
        'in_logical_id' => null
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerFormats()
    {
        return self::$swaggerFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'invoice_id' => 'InvoiceID',
        'invoice_history_id' => 'InvoiceHistoryID',
        'invoice_line_id' => 'InvoiceLineID',
        'details_line_id' => 'DetailsLineID',
        'cost' => 'Cost',
        'date_in' => 'DateIn',
        'expiry_date' => 'ExpiryDate',
        'special_price' => 'SpecialPrice',
        'quantity' => 'Quantity',
        'line_detail_id' => 'LineDetailID',
        'bin_location' => 'BinLocation',
        'serial_no' => 'SerialNo',
        'sohid' => 'SOHID',
        'in_logical_id' => 'IN_LogicalID'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'invoice_id' => 'setInvoiceId',
        'invoice_history_id' => 'setInvoiceHistoryId',
        'invoice_line_id' => 'setInvoiceLineId',
        'details_line_id' => 'setDetailsLineId',
        'cost' => 'setCost',
        'date_in' => 'setDateIn',
        'expiry_date' => 'setExpiryDate',
        'special_price' => 'setSpecialPrice',
        'quantity' => 'setQuantity',
        'line_detail_id' => 'setLineDetailId',
        'bin_location' => 'setBinLocation',
        'serial_no' => 'setSerialNo',
        'sohid' => 'setSohid',
        'in_logical_id' => 'setInLogicalId'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'invoice_id' => 'getInvoiceId',
        'invoice_history_id' => 'getInvoiceHistoryId',
        'invoice_line_id' => 'getInvoiceLineId',
        'details_line_id' => 'getDetailsLineId',
        'cost' => 'getCost',
        'date_in' => 'getDateIn',
        'expiry_date' => 'getExpiryDate',
        'special_price' => 'getSpecialPrice',
        'quantity' => 'getQuantity',
        'line_detail_id' => 'getLineDetailId',
        'bin_location' => 'getBinLocation',
        'serial_no' => 'getSerialNo',
        'sohid' => 'getSohid',
        'in_logical_id' => 'getInLogicalId'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$swaggerModelName;
    }

    

    

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['invoice_id'] = isset($data['invoice_id']) ? $data['invoice_id'] : null;
        $this->container['invoice_history_id'] = isset($data['invoice_history_id']) ? $data['invoice_history_id'] : null;
        $this->container['invoice_line_id'] = isset($data['invoice_line_id']) ? $data['invoice_line_id'] : null;
        $this->container['details_line_id'] = isset($data['details_line_id']) ? $data['details_line_id'] : null;
        $this->container['cost'] = isset($data['cost']) ? $data['cost'] : null;
        $this->container['date_in'] = isset($data['date_in']) ? $data['date_in'] : null;
        $this->container['expiry_date'] = isset($data['expiry_date']) ? $data['expiry_date'] : null;
        $this->container['special_price'] = isset($data['special_price']) ? $data['special_price'] : null;
        $this->container['quantity'] = isset($data['quantity']) ? $data['quantity'] : null;
        $this->container['line_detail_id'] = isset($data['line_detail_id']) ? $data['line_detail_id'] : null;
        $this->container['bin_location'] = isset($data['bin_location']) ? $data['bin_location'] : null;
        $this->container['serial_no'] = isset($data['serial_no']) ? $data['serial_no'] : null;
        $this->container['sohid'] = isset($data['sohid']) ? $data['sohid'] : null;
        $this->container['in_logical_id'] = isset($data['in_logical_id']) ? $data['in_logical_id'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets invoice_id
     *
     * @return string
     */
    public function getInvoiceId()
    {
        return $this->container['invoice_id'];
    }

    /**
     * Sets invoice_id
     *
     * @param string $invoice_id invoice_id
     *
     * @return $this
     */
    public function setInvoiceId($invoice_id)
    {
        $this->container['invoice_id'] = $invoice_id;

        return $this;
    }

    /**
     * Gets invoice_history_id
     *
     * @return string
     */
    public function getInvoiceHistoryId()
    {
        return $this->container['invoice_history_id'];
    }

    /**
     * Sets invoice_history_id
     *
     * @param string $invoice_history_id invoice_history_id
     *
     * @return $this
     */
    public function setInvoiceHistoryId($invoice_history_id)
    {
        $this->container['invoice_history_id'] = $invoice_history_id;

        return $this;
    }

    /**
     * Gets invoice_line_id
     *
     * @return string
     */
    public function getInvoiceLineId()
    {
        return $this->container['invoice_line_id'];
    }

    /**
     * Sets invoice_line_id
     *
     * @param string $invoice_line_id invoice_line_id
     *
     * @return $this
     */
    public function setInvoiceLineId($invoice_line_id)
    {
        $this->container['invoice_line_id'] = $invoice_line_id;

        return $this;
    }

    /**
     * Gets details_line_id
     *
     * @return string
     */
    public function getDetailsLineId()
    {
        return $this->container['details_line_id'];
    }

    /**
     * Sets details_line_id
     *
     * @param string $details_line_id details_line_id
     *
     * @return $this
     */
    public function setDetailsLineId($details_line_id)
    {
        $this->container['details_line_id'] = $details_line_id;

        return $this;
    }

    /**
     * Gets cost
     *
     * @return double
     */
    public function getCost()
    {
        return $this->container['cost'];
    }

    /**
     * Sets cost
     *
     * @param double $cost cost
     *
     * @return $this
     */
    public function setCost($cost)
    {
        $this->container['cost'] = $cost;

        return $this;
    }

    /**
     * Gets date_in
     *
     * @return \DateTime
     */
    public function getDateIn()
    {
        return $this->container['date_in'];
    }

    /**
     * Sets date_in
     *
     * @param \DateTime $date_in date_in
     *
     * @return $this
     */
    public function setDateIn($date_in)
    {
        $this->container['date_in'] = $date_in;

        return $this;
    }

    /**
     * Gets expiry_date
     *
     * @return \DateTime
     */
    public function getExpiryDate()
    {
        return $this->container['expiry_date'];
    }

    /**
     * Sets expiry_date
     *
     * @param \DateTime $expiry_date expiry_date
     *
     * @return $this
     */
    public function setExpiryDate($expiry_date)
    {
        $this->container['expiry_date'] = $expiry_date;

        return $this;
    }

    /**
     * Gets special_price
     *
     * @return double
     */
    public function getSpecialPrice()
    {
        return $this->container['special_price'];
    }

    /**
     * Sets special_price
     *
     * @param double $special_price special_price
     *
     * @return $this
     */
    public function setSpecialPrice($special_price)
    {
        $this->container['special_price'] = $special_price;

        return $this;
    }

    /**
     * Gets quantity
     *
     * @return double
     */
    public function getQuantity()
    {
        return $this->container['quantity'];
    }

    /**
     * Sets quantity
     *
     * @param double $quantity quantity
     *
     * @return $this
     */
    public function setQuantity($quantity)
    {
        $this->container['quantity'] = $quantity;

        return $this;
    }

    /**
     * Gets line_detail_id
     *
     * @return string
     */
    public function getLineDetailId()
    {
        return $this->container['line_detail_id'];
    }

    /**
     * Sets line_detail_id
     *
     * @param string $line_detail_id line_detail_id
     *
     * @return $this
     */
    public function setLineDetailId($line_detail_id)
    {
        $this->container['line_detail_id'] = $line_detail_id;

        return $this;
    }

    /**
     * Gets bin_location
     *
     * @return string
     */
    public function getBinLocation()
    {
        return $this->container['bin_location'];
    }

    /**
     * Sets bin_location
     *
     * @param string $bin_location bin_location
     *
     * @return $this
     */
    public function setBinLocation($bin_location)
    {
        $this->container['bin_location'] = $bin_location;

        return $this;
    }

    /**
     * Gets serial_no
     *
     * @return string
     */
    public function getSerialNo()
    {
        return $this->container['serial_no'];
    }

    /**
     * Sets serial_no
     *
     * @param string $serial_no serial_no
     *
     * @return $this
     */
    public function setSerialNo($serial_no)
    {
        $this->container['serial_no'] = $serial_no;

        return $this;
    }

    /**
     * Gets sohid
     *
     * @return string
     */
    public function getSohid()
    {
        return $this->container['sohid'];
    }

    /**
     * Sets sohid
     *
     * @param string $sohid sohid
     *
     * @return $this
     */
    public function setSohid($sohid)
    {
        $this->container['sohid'] = $sohid;

        return $this;
    }

    /**
     * Gets in_logical_id
     *
     * @return string
     */
    public function getInLogicalId()
    {
        return $this->container['in_logical_id'];
    }

    /**
     * Sets in_logical_id
     *
     * @param string $in_logical_id in_logical_id
     *
     * @return $this
     */
    public function setInLogicalId($in_logical_id)
    {
        $this->container['in_logical_id'] = $in_logical_id;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(
                ObjectSerializer::sanitizeForSerialization($this),
                JSON_PRETTY_PRINT
            );
        }

        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}



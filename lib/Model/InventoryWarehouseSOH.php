<?php
/**
 * InventoryWarehouseSOH
 *
 * PHP version 5
 *
 * @category Class
 * @package  Jiwa
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * JiwaAPI
 *
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: 1.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 * Swagger Codegen version: 2.4.28-SNAPSHOT
 */

/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Jiwa\JiwaModel;

use \ArrayAccess;
use \Jiwa\ObjectSerializer;

/**
 * InventoryWarehouseSOH Class Doc Comment
 *
 * @category Class
 * @description InventoryWarehouseSOH
 * @package  Jiwa
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class InventoryWarehouseSOH implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $swaggerModelName = 'InventoryWarehouseSOH';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerTypes = [
        'in_logical_id' => 'string',
        'warehouse' => 'string',
        'total_soh' => 'double',
        'total_back_orders' => 'double',
        'manual_back_orders' => 'double',
        'auto_back_orders' => 'double',
        'ship_on_completion' => 'double',
        'warehouse_transfers' => 'double',
        'unprocessed_sales' => 'double',
        'forward_requirements' => 'double',
        'bom_component_wip' => 'double'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerFormats = [
        'in_logical_id' => null,
        'warehouse' => null,
        'total_soh' => 'double',
        'total_back_orders' => 'double',
        'manual_back_orders' => 'double',
        'auto_back_orders' => 'double',
        'ship_on_completion' => 'double',
        'warehouse_transfers' => 'double',
        'unprocessed_sales' => 'double',
        'forward_requirements' => 'double',
        'bom_component_wip' => 'double'
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerFormats()
    {
        return self::$swaggerFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'in_logical_id' => 'IN_LogicalID',
        'warehouse' => 'Warehouse',
        'total_soh' => 'TotalSOH',
        'total_back_orders' => 'TotalBackOrders',
        'manual_back_orders' => 'ManualBackOrders',
        'auto_back_orders' => 'AutoBackOrders',
        'ship_on_completion' => 'ShipOnCompletion',
        'warehouse_transfers' => 'WarehouseTransfers',
        'unprocessed_sales' => 'UnprocessedSales',
        'forward_requirements' => 'ForwardRequirements',
        'bom_component_wip' => 'BOMComponentWIP'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'in_logical_id' => 'setInLogicalId',
        'warehouse' => 'setWarehouse',
        'total_soh' => 'setTotalSoh',
        'total_back_orders' => 'setTotalBackOrders',
        'manual_back_orders' => 'setManualBackOrders',
        'auto_back_orders' => 'setAutoBackOrders',
        'ship_on_completion' => 'setShipOnCompletion',
        'warehouse_transfers' => 'setWarehouseTransfers',
        'unprocessed_sales' => 'setUnprocessedSales',
        'forward_requirements' => 'setForwardRequirements',
        'bom_component_wip' => 'setBomComponentWip'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'in_logical_id' => 'getInLogicalId',
        'warehouse' => 'getWarehouse',
        'total_soh' => 'getTotalSoh',
        'total_back_orders' => 'getTotalBackOrders',
        'manual_back_orders' => 'getManualBackOrders',
        'auto_back_orders' => 'getAutoBackOrders',
        'ship_on_completion' => 'getShipOnCompletion',
        'warehouse_transfers' => 'getWarehouseTransfers',
        'unprocessed_sales' => 'getUnprocessedSales',
        'forward_requirements' => 'getForwardRequirements',
        'bom_component_wip' => 'getBomComponentWip'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$swaggerModelName;
    }

    

    

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['in_logical_id'] = isset($data['in_logical_id']) ? $data['in_logical_id'] : null;
        $this->container['warehouse'] = isset($data['warehouse']) ? $data['warehouse'] : null;
        $this->container['total_soh'] = isset($data['total_soh']) ? $data['total_soh'] : null;
        $this->container['total_back_orders'] = isset($data['total_back_orders']) ? $data['total_back_orders'] : null;
        $this->container['manual_back_orders'] = isset($data['manual_back_orders']) ? $data['manual_back_orders'] : null;
        $this->container['auto_back_orders'] = isset($data['auto_back_orders']) ? $data['auto_back_orders'] : null;
        $this->container['ship_on_completion'] = isset($data['ship_on_completion']) ? $data['ship_on_completion'] : null;
        $this->container['warehouse_transfers'] = isset($data['warehouse_transfers']) ? $data['warehouse_transfers'] : null;
        $this->container['unprocessed_sales'] = isset($data['unprocessed_sales']) ? $data['unprocessed_sales'] : null;
        $this->container['forward_requirements'] = isset($data['forward_requirements']) ? $data['forward_requirements'] : null;
        $this->container['bom_component_wip'] = isset($data['bom_component_wip']) ? $data['bom_component_wip'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets in_logical_id
     *
     * @return string
     */
    public function getInLogicalId()
    {
        return $this->container['in_logical_id'];
    }

    /**
     * Sets in_logical_id
     *
     * @param string $in_logical_id in_logical_id
     *
     * @return $this
     */
    public function setInLogicalId($in_logical_id)
    {
        $this->container['in_logical_id'] = $in_logical_id;

        return $this;
    }

    /**
     * Gets warehouse
     *
     * @return string
     */
    public function getWarehouse()
    {
        return $this->container['warehouse'];
    }

    /**
     * Sets warehouse
     *
     * @param string $warehouse warehouse
     *
     * @return $this
     */
    public function setWarehouse($warehouse)
    {
        $this->container['warehouse'] = $warehouse;

        return $this;
    }

    /**
     * Gets total_soh
     *
     * @return double
     */
    public function getTotalSoh()
    {
        return $this->container['total_soh'];
    }

    /**
     * Sets total_soh
     *
     * @param double $total_soh total_soh
     *
     * @return $this
     */
    public function setTotalSoh($total_soh)
    {
        $this->container['total_soh'] = $total_soh;

        return $this;
    }

    /**
     * Gets total_back_orders
     *
     * @return double
     */
    public function getTotalBackOrders()
    {
        return $this->container['total_back_orders'];
    }

    /**
     * Sets total_back_orders
     *
     * @param double $total_back_orders total_back_orders
     *
     * @return $this
     */
    public function setTotalBackOrders($total_back_orders)
    {
        $this->container['total_back_orders'] = $total_back_orders;

        return $this;
    }

    /**
     * Gets manual_back_orders
     *
     * @return double
     */
    public function getManualBackOrders()
    {
        return $this->container['manual_back_orders'];
    }

    /**
     * Sets manual_back_orders
     *
     * @param double $manual_back_orders manual_back_orders
     *
     * @return $this
     */
    public function setManualBackOrders($manual_back_orders)
    {
        $this->container['manual_back_orders'] = $manual_back_orders;

        return $this;
    }

    /**
     * Gets auto_back_orders
     *
     * @return double
     */
    public function getAutoBackOrders()
    {
        return $this->container['auto_back_orders'];
    }

    /**
     * Sets auto_back_orders
     *
     * @param double $auto_back_orders auto_back_orders
     *
     * @return $this
     */
    public function setAutoBackOrders($auto_back_orders)
    {
        $this->container['auto_back_orders'] = $auto_back_orders;

        return $this;
    }

    /**
     * Gets ship_on_completion
     *
     * @return double
     */
    public function getShipOnCompletion()
    {
        return $this->container['ship_on_completion'];
    }

    /**
     * Sets ship_on_completion
     *
     * @param double $ship_on_completion ship_on_completion
     *
     * @return $this
     */
    public function setShipOnCompletion($ship_on_completion)
    {
        $this->container['ship_on_completion'] = $ship_on_completion;

        return $this;
    }

    /**
     * Gets warehouse_transfers
     *
     * @return double
     */
    public function getWarehouseTransfers()
    {
        return $this->container['warehouse_transfers'];
    }

    /**
     * Sets warehouse_transfers
     *
     * @param double $warehouse_transfers warehouse_transfers
     *
     * @return $this
     */
    public function setWarehouseTransfers($warehouse_transfers)
    {
        $this->container['warehouse_transfers'] = $warehouse_transfers;

        return $this;
    }

    /**
     * Gets unprocessed_sales
     *
     * @return double
     */
    public function getUnprocessedSales()
    {
        return $this->container['unprocessed_sales'];
    }

    /**
     * Sets unprocessed_sales
     *
     * @param double $unprocessed_sales unprocessed_sales
     *
     * @return $this
     */
    public function setUnprocessedSales($unprocessed_sales)
    {
        $this->container['unprocessed_sales'] = $unprocessed_sales;

        return $this;
    }

    /**
     * Gets forward_requirements
     *
     * @return double
     */
    public function getForwardRequirements()
    {
        return $this->container['forward_requirements'];
    }

    /**
     * Sets forward_requirements
     *
     * @param double $forward_requirements forward_requirements
     *
     * @return $this
     */
    public function setForwardRequirements($forward_requirements)
    {
        $this->container['forward_requirements'] = $forward_requirements;

        return $this;
    }

    /**
     * Gets bom_component_wip
     *
     * @return double
     */
    public function getBomComponentWip()
    {
        return $this->container['bom_component_wip'];
    }

    /**
     * Sets bom_component_wip
     *
     * @param double $bom_component_wip bom_component_wip
     *
     * @return $this
     */
    public function setBomComponentWip($bom_component_wip)
    {
        $this->container['bom_component_wip'] = $bom_component_wip;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(
                ObjectSerializer::sanitizeForSerialization($this),
                JSON_PRETTY_PRINT
            );
        }

        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}



<?php
/**
 * SalesOrderCarrier
 *
 * PHP version 5
 *
 * @category Class
 * @package  Jiwa
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * JiwaAPI
 *
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: 1.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 * Swagger Codegen version: 2.4.28-SNAPSHOT
 */

/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Jiwa\JiwaModel;

use \ArrayAccess;
use \Jiwa\ObjectSerializer;

/**
 * SalesOrderCarrier Class Doc Comment
 *
 * @category Class
 * @description SalesOrderCarrier
 * @package  Jiwa
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class SalesOrderCarrier implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $swaggerModelName = 'SalesOrderCarrier';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerTypes = [
        'carrier_id' => 'string',
        'carrier_name' => 'string',
        'account_no' => 'string',
        'service' => '\Jiwa\JiwaModel\SalesOrderCarrierService',
        'use_least_cost' => 'bool',
        'charge_to' => 'string',
        'status' => 'string',
        'freight_item_collection' => '\Jiwa\JiwaModel\SalesOrderFreightItem[]',
        'consignment_note_collection' => '\Jiwa\JiwaModel\SalesOrderConsignmentNote[]'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerFormats = [
        'carrier_id' => null,
        'carrier_name' => null,
        'account_no' => null,
        'service' => null,
        'use_least_cost' => null,
        'charge_to' => null,
        'status' => null,
        'freight_item_collection' => null,
        'consignment_note_collection' => null
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerFormats()
    {
        return self::$swaggerFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'carrier_id' => 'CarrierID',
        'carrier_name' => 'CarrierName',
        'account_no' => 'AccountNo',
        'service' => 'Service',
        'use_least_cost' => 'UseLeastCost',
        'charge_to' => 'ChargeTo',
        'status' => 'Status',
        'freight_item_collection' => 'FreightItemCollection',
        'consignment_note_collection' => 'ConsignmentNoteCollection'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'carrier_id' => 'setCarrierId',
        'carrier_name' => 'setCarrierName',
        'account_no' => 'setAccountNo',
        'service' => 'setService',
        'use_least_cost' => 'setUseLeastCost',
        'charge_to' => 'setChargeTo',
        'status' => 'setStatus',
        'freight_item_collection' => 'setFreightItemCollection',
        'consignment_note_collection' => 'setConsignmentNoteCollection'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'carrier_id' => 'getCarrierId',
        'carrier_name' => 'getCarrierName',
        'account_no' => 'getAccountNo',
        'service' => 'getService',
        'use_least_cost' => 'getUseLeastCost',
        'charge_to' => 'getChargeTo',
        'status' => 'getStatus',
        'freight_item_collection' => 'getFreightItemCollection',
        'consignment_note_collection' => 'getConsignmentNoteCollection'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$swaggerModelName;
    }

    

    

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['carrier_id'] = isset($data['carrier_id']) ? $data['carrier_id'] : null;
        $this->container['carrier_name'] = isset($data['carrier_name']) ? $data['carrier_name'] : null;
        $this->container['account_no'] = isset($data['account_no']) ? $data['account_no'] : null;
        $this->container['service'] = isset($data['service']) ? $data['service'] : null;
        $this->container['use_least_cost'] = isset($data['use_least_cost']) ? $data['use_least_cost'] : null;
        $this->container['charge_to'] = isset($data['charge_to']) ? $data['charge_to'] : null;
        $this->container['status'] = isset($data['status']) ? $data['status'] : null;
        $this->container['freight_item_collection'] = isset($data['freight_item_collection']) ? $data['freight_item_collection'] : null;
        $this->container['consignment_note_collection'] = isset($data['consignment_note_collection']) ? $data['consignment_note_collection'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets carrier_id
     *
     * @return string
     */
    public function getCarrierId()
    {
        return $this->container['carrier_id'];
    }

    /**
     * Sets carrier_id
     *
     * @param string $carrier_id carrier_id
     *
     * @return $this
     */
    public function setCarrierId($carrier_id)
    {
        $this->container['carrier_id'] = $carrier_id;

        return $this;
    }

    /**
     * Gets carrier_name
     *
     * @return string
     */
    public function getCarrierName()
    {
        return $this->container['carrier_name'];
    }

    /**
     * Sets carrier_name
     *
     * @param string $carrier_name carrier_name
     *
     * @return $this
     */
    public function setCarrierName($carrier_name)
    {
        $this->container['carrier_name'] = $carrier_name;

        return $this;
    }

    /**
     * Gets account_no
     *
     * @return string
     */
    public function getAccountNo()
    {
        return $this->container['account_no'];
    }

    /**
     * Sets account_no
     *
     * @param string $account_no account_no
     *
     * @return $this
     */
    public function setAccountNo($account_no)
    {
        $this->container['account_no'] = $account_no;

        return $this;
    }

    /**
     * Gets service
     *
     * @return \Jiwa\JiwaModel\SalesOrderCarrierService
     */
    public function getService()
    {
        return $this->container['service'];
    }

    /**
     * Sets service
     *
     * @param \Jiwa\JiwaModel\SalesOrderCarrierService $service service
     *
     * @return $this
     */
    public function setService($service)
    {
        $this->container['service'] = $service;

        return $this;
    }

    /**
     * Gets use_least_cost
     *
     * @return bool
     */
    public function getUseLeastCost()
    {
        return $this->container['use_least_cost'];
    }

    /**
     * Sets use_least_cost
     *
     * @param bool $use_least_cost use_least_cost
     *
     * @return $this
     */
    public function setUseLeastCost($use_least_cost)
    {
        $this->container['use_least_cost'] = $use_least_cost;

        return $this;
    }

    /**
     * Gets charge_to
     *
     * @return string
     */
    public function getChargeTo()
    {
        return $this->container['charge_to'];
    }

    /**
     * Sets charge_to
     *
     * @param string $charge_to charge_to
     *
     * @return $this
     */
    public function setChargeTo($charge_to)
    {
        $this->container['charge_to'] = $charge_to;

        return $this;
    }

    /**
     * Gets status
     *
     * @return string
     */
    public function getStatus()
    {
        return $this->container['status'];
    }

    /**
     * Sets status
     *
     * @param string $status status
     *
     * @return $this
     */
    public function setStatus($status)
    {
        $this->container['status'] = $status;

        return $this;
    }

    /**
     * Gets freight_item_collection
     *
     * @return \Jiwa\JiwaModel\SalesOrderFreightItem[]
     */
    public function getFreightItemCollection()
    {
        return $this->container['freight_item_collection'];
    }

    /**
     * Sets freight_item_collection
     *
     * @param \Jiwa\JiwaModel\SalesOrderFreightItem[] $freight_item_collection freight_item_collection
     *
     * @return $this
     */
    public function setFreightItemCollection($freight_item_collection)
    {
        $this->container['freight_item_collection'] = $freight_item_collection;

        return $this;
    }

    /**
     * Gets consignment_note_collection
     *
     * @return \Jiwa\JiwaModel\SalesOrderConsignmentNote[]
     */
    public function getConsignmentNoteCollection()
    {
        return $this->container['consignment_note_collection'];
    }

    /**
     * Sets consignment_note_collection
     *
     * @param \Jiwa\JiwaModel\SalesOrderConsignmentNote[] $consignment_note_collection consignment_note_collection
     *
     * @return $this
     */
    public function setConsignmentNoteCollection($consignment_note_collection)
    {
        $this->container['consignment_note_collection'] = $consignment_note_collection;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(
                ObjectSerializer::sanitizeForSerialization($this),
                JSON_PRETTY_PRINT
            );
        }

        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}



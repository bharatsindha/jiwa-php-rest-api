<?php
/**
 * Credit
 *
 * PHP version 5
 *
 * @category Class
 * @package  Jiwa
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * JiwaAPI
 *
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: 1.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 * Swagger Codegen version: 2.4.28-SNAPSHOT
 */

/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Jiwa\Model;

use \ArrayAccess;
use \Jiwa\ObjectSerializer;

/**
 * Credit Class Doc Comment
 *
 * @category Class
 * @description Credit
 * @package  Jiwa
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class Credit implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $swaggerModelName = 'Credit';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerTypes = [
        'rec_id' => 'string',
        'credit_no' => 'string',
        'creditor_ref' => 'string',
        'status' => 'string',
        'last_saved_date_time' => '\DateTime',
        'created_by' => '\Jiwa\Model\StaffMember',
        'credit_date' => '\DateTime',
        'creditor_id' => 'string',
        'creditor_account_no' => 'string',
        'creditor_name' => 'string',
        'row_hash' => 'string',
        'documents' => '\Jiwa\Model\Document[]',
        'notes' => '\Jiwa\Model\Note[]',
        'custom_field_values' => '\Jiwa\Model\CustomFieldValue[]',
        'lines' => '\Jiwa\Model\Line[]',
        'shippings' => '\Jiwa\Model\ShippingEntity[]',
        'purchase_orders' => '\Jiwa\Model\PurchaseOrder[]'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerFormats = [
        'rec_id' => null,
        'credit_no' => null,
        'creditor_ref' => null,
        'status' => null,
        'last_saved_date_time' => 'date-time',
        'created_by' => null,
        'credit_date' => 'date-time',
        'creditor_id' => null,
        'creditor_account_no' => null,
        'creditor_name' => null,
        'row_hash' => 'binary',
        'documents' => null,
        'notes' => null,
        'custom_field_values' => null,
        'lines' => null,
        'shippings' => null,
        'purchase_orders' => null
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerFormats()
    {
        return self::$swaggerFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'rec_id' => 'RecID',
        'credit_no' => 'CreditNo',
        'creditor_ref' => 'CreditorRef',
        'status' => 'Status',
        'last_saved_date_time' => 'LastSavedDateTime',
        'created_by' => 'CreatedBy',
        'credit_date' => 'CreditDate',
        'creditor_id' => 'CreditorID',
        'creditor_account_no' => 'CreditorAccountNo',
        'creditor_name' => 'CreditorName',
        'row_hash' => 'RowHash',
        'documents' => 'Documents',
        'notes' => 'Notes',
        'custom_field_values' => 'CustomFieldValues',
        'lines' => 'Lines',
        'shippings' => 'Shippings',
        'purchase_orders' => 'PurchaseOrders'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'rec_id' => 'setRecId',
        'credit_no' => 'setCreditNo',
        'creditor_ref' => 'setCreditorRef',
        'status' => 'setStatus',
        'last_saved_date_time' => 'setLastSavedDateTime',
        'created_by' => 'setCreatedBy',
        'credit_date' => 'setCreditDate',
        'creditor_id' => 'setCreditorId',
        'creditor_account_no' => 'setCreditorAccountNo',
        'creditor_name' => 'setCreditorName',
        'row_hash' => 'setRowHash',
        'documents' => 'setDocuments',
        'notes' => 'setNotes',
        'custom_field_values' => 'setCustomFieldValues',
        'lines' => 'setLines',
        'shippings' => 'setShippings',
        'purchase_orders' => 'setPurchaseOrders'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'rec_id' => 'getRecId',
        'credit_no' => 'getCreditNo',
        'creditor_ref' => 'getCreditorRef',
        'status' => 'getStatus',
        'last_saved_date_time' => 'getLastSavedDateTime',
        'created_by' => 'getCreatedBy',
        'credit_date' => 'getCreditDate',
        'creditor_id' => 'getCreditorId',
        'creditor_account_no' => 'getCreditorAccountNo',
        'creditor_name' => 'getCreditorName',
        'row_hash' => 'getRowHash',
        'documents' => 'getDocuments',
        'notes' => 'getNotes',
        'custom_field_values' => 'getCustomFieldValues',
        'lines' => 'getLines',
        'shippings' => 'getShippings',
        'purchase_orders' => 'getPurchaseOrders'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$swaggerModelName;
    }

    

    

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['rec_id'] = isset($data['rec_id']) ? $data['rec_id'] : null;
        $this->container['credit_no'] = isset($data['credit_no']) ? $data['credit_no'] : null;
        $this->container['creditor_ref'] = isset($data['creditor_ref']) ? $data['creditor_ref'] : null;
        $this->container['status'] = isset($data['status']) ? $data['status'] : null;
        $this->container['last_saved_date_time'] = isset($data['last_saved_date_time']) ? $data['last_saved_date_time'] : null;
        $this->container['created_by'] = isset($data['created_by']) ? $data['created_by'] : null;
        $this->container['credit_date'] = isset($data['credit_date']) ? $data['credit_date'] : null;
        $this->container['creditor_id'] = isset($data['creditor_id']) ? $data['creditor_id'] : null;
        $this->container['creditor_account_no'] = isset($data['creditor_account_no']) ? $data['creditor_account_no'] : null;
        $this->container['creditor_name'] = isset($data['creditor_name']) ? $data['creditor_name'] : null;
        $this->container['row_hash'] = isset($data['row_hash']) ? $data['row_hash'] : null;
        $this->container['documents'] = isset($data['documents']) ? $data['documents'] : null;
        $this->container['notes'] = isset($data['notes']) ? $data['notes'] : null;
        $this->container['custom_field_values'] = isset($data['custom_field_values']) ? $data['custom_field_values'] : null;
        $this->container['lines'] = isset($data['lines']) ? $data['lines'] : null;
        $this->container['shippings'] = isset($data['shippings']) ? $data['shippings'] : null;
        $this->container['purchase_orders'] = isset($data['purchase_orders']) ? $data['purchase_orders'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets rec_id
     *
     * @return string
     */
    public function getRecId()
    {
        return $this->container['rec_id'];
    }

    /**
     * Sets rec_id
     *
     * @param string $rec_id rec_id
     *
     * @return $this
     */
    public function setRecId($rec_id)
    {
        $this->container['rec_id'] = $rec_id;

        return $this;
    }

    /**
     * Gets credit_no
     *
     * @return string
     */
    public function getCreditNo()
    {
        return $this->container['credit_no'];
    }

    /**
     * Sets credit_no
     *
     * @param string $credit_no credit_no
     *
     * @return $this
     */
    public function setCreditNo($credit_no)
    {
        $this->container['credit_no'] = $credit_no;

        return $this;
    }

    /**
     * Gets creditor_ref
     *
     * @return string
     */
    public function getCreditorRef()
    {
        return $this->container['creditor_ref'];
    }

    /**
     * Sets creditor_ref
     *
     * @param string $creditor_ref creditor_ref
     *
     * @return $this
     */
    public function setCreditorRef($creditor_ref)
    {
        $this->container['creditor_ref'] = $creditor_ref;

        return $this;
    }

    /**
     * Gets status
     *
     * @return string
     */
    public function getStatus()
    {
        return $this->container['status'];
    }

    /**
     * Sets status
     *
     * @param string $status status
     *
     * @return $this
     */
    public function setStatus($status)
    {
        $this->container['status'] = $status;

        return $this;
    }

    /**
     * Gets last_saved_date_time
     *
     * @return \DateTime
     */
    public function getLastSavedDateTime()
    {
        return $this->container['last_saved_date_time'];
    }

    /**
     * Sets last_saved_date_time
     *
     * @param \DateTime $last_saved_date_time last_saved_date_time
     *
     * @return $this
     */
    public function setLastSavedDateTime($last_saved_date_time)
    {
        $this->container['last_saved_date_time'] = $last_saved_date_time;

        return $this;
    }

    /**
     * Gets created_by
     *
     * @return \Jiwa\Model\StaffMember
     */
    public function getCreatedBy()
    {
        return $this->container['created_by'];
    }

    /**
     * Sets created_by
     *
     * @param \Jiwa\Model\StaffMember $created_by created_by
     *
     * @return $this
     */
    public function setCreatedBy($created_by)
    {
        $this->container['created_by'] = $created_by;

        return $this;
    }

    /**
     * Gets credit_date
     *
     * @return \DateTime
     */
    public function getCreditDate()
    {
        return $this->container['credit_date'];
    }

    /**
     * Sets credit_date
     *
     * @param \DateTime $credit_date credit_date
     *
     * @return $this
     */
    public function setCreditDate($credit_date)
    {
        $this->container['credit_date'] = $credit_date;

        return $this;
    }

    /**
     * Gets creditor_id
     *
     * @return string
     */
    public function getCreditorId()
    {
        return $this->container['creditor_id'];
    }

    /**
     * Sets creditor_id
     *
     * @param string $creditor_id creditor_id
     *
     * @return $this
     */
    public function setCreditorId($creditor_id)
    {
        $this->container['creditor_id'] = $creditor_id;

        return $this;
    }

    /**
     * Gets creditor_account_no
     *
     * @return string
     */
    public function getCreditorAccountNo()
    {
        return $this->container['creditor_account_no'];
    }

    /**
     * Sets creditor_account_no
     *
     * @param string $creditor_account_no creditor_account_no
     *
     * @return $this
     */
    public function setCreditorAccountNo($creditor_account_no)
    {
        $this->container['creditor_account_no'] = $creditor_account_no;

        return $this;
    }

    /**
     * Gets creditor_name
     *
     * @return string
     */
    public function getCreditorName()
    {
        return $this->container['creditor_name'];
    }

    /**
     * Sets creditor_name
     *
     * @param string $creditor_name creditor_name
     *
     * @return $this
     */
    public function setCreditorName($creditor_name)
    {
        $this->container['creditor_name'] = $creditor_name;

        return $this;
    }

    /**
     * Gets row_hash
     *
     * @return string
     */
    public function getRowHash()
    {
        return $this->container['row_hash'];
    }

    /**
     * Sets row_hash
     *
     * @param string $row_hash row_hash
     *
     * @return $this
     */
    public function setRowHash($row_hash)
    {
        $this->container['row_hash'] = $row_hash;

        return $this;
    }

    /**
     * Gets documents
     *
     * @return \Jiwa\Model\Document[]
     */
    public function getDocuments()
    {
        return $this->container['documents'];
    }

    /**
     * Sets documents
     *
     * @param \Jiwa\Model\Document[] $documents documents
     *
     * @return $this
     */
    public function setDocuments($documents)
    {
        $this->container['documents'] = $documents;

        return $this;
    }

    /**
     * Gets notes
     *
     * @return \Jiwa\Model\Note[]
     */
    public function getNotes()
    {
        return $this->container['notes'];
    }

    /**
     * Sets notes
     *
     * @param \Jiwa\Model\Note[] $notes notes
     *
     * @return $this
     */
    public function setNotes($notes)
    {
        $this->container['notes'] = $notes;

        return $this;
    }

    /**
     * Gets custom_field_values
     *
     * @return \Jiwa\Model\CustomFieldValue[]
     */
    public function getCustomFieldValues()
    {
        return $this->container['custom_field_values'];
    }

    /**
     * Sets custom_field_values
     *
     * @param \Jiwa\Model\CustomFieldValue[] $custom_field_values custom_field_values
     *
     * @return $this
     */
    public function setCustomFieldValues($custom_field_values)
    {
        $this->container['custom_field_values'] = $custom_field_values;

        return $this;
    }

    /**
     * Gets lines
     *
     * @return \Jiwa\Model\Line[]
     */
    public function getLines()
    {
        return $this->container['lines'];
    }

    /**
     * Sets lines
     *
     * @param \Jiwa\Model\Line[] $lines lines
     *
     * @return $this
     */
    public function setLines($lines)
    {
        $this->container['lines'] = $lines;

        return $this;
    }

    /**
     * Gets shippings
     *
     * @return \Jiwa\Model\ShippingEntity[]
     */
    public function getShippings()
    {
        return $this->container['shippings'];
    }

    /**
     * Sets shippings
     *
     * @param \Jiwa\Model\ShippingEntity[] $shippings shippings
     *
     * @return $this
     */
    public function setShippings($shippings)
    {
        $this->container['shippings'] = $shippings;

        return $this;
    }

    /**
     * Gets purchase_orders
     *
     * @return \Jiwa\Model\PurchaseOrder[]
     */
    public function getPurchaseOrders()
    {
        return $this->container['purchase_orders'];
    }

    /**
     * Sets purchase_orders
     *
     * @param \Jiwa\Model\PurchaseOrder[] $purchase_orders purchase_orders
     *
     * @return $this
     */
    public function setPurchaseOrders($purchase_orders)
    {
        $this->container['purchase_orders'] = $purchase_orders;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(
                ObjectSerializer::sanitizeForSerialization($this),
                JSON_PRETTY_PRINT
            );
        }

        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}



<?php
/**
 * JournalSet
 *
 * PHP version 5
 *
 * @category Class
 * @package  Jiwa
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * JiwaAPI
 *
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: 1.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 * Swagger Codegen version: 2.4.28-SNAPSHOT
 */

/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Jiwa\JiwaModel;

use \ArrayAccess;
use \Jiwa\ObjectSerializer;

/**
 * JournalSet Class Doc Comment
 *
 * @category Class
 * @description JournalSet
 * @package  Jiwa
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class JournalSet implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $swaggerModelName = 'JournalSet';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerTypes = [
        'journal_set_id' => 'string',
        'set_no' => 'string',
        'set_type' => 'string',
        'description' => 'string',
        'source' => 'string',
        'source_id' => 'string',
        'posted_date' => '\DateTime',
        'is_reversed' => 'bool',
        'reverse_type' => 'string',
        'reverse_date' => '\DateTime',
        'repeating_units' => 'int',
        'repeating_type' => 'string',
        'next_repeating_date' => '\DateTime',
        'repeating_will_end' => 'bool',
        'repeating_end_date' => '\DateTime',
        'last_saved_date_time' => '\DateTime',
        'staff' => '\Jiwa\JiwaModel\StaffMember',
        'lines' => '\Jiwa\JiwaModel\JournalSetLine[]',
        'notes' => '\Jiwa\JiwaModel\Note[]',
        'documents' => '\Jiwa\JiwaModel\Document[]',
        'posted_to_period_no' => 'int',
        'posted_to_period_name' => 'string',
        'posted_to_year_type' => 'string',
        'posted_to_year_no' => 'int',
        'posted_to_period_no_is_globally_locked' => 'bool',
        'posted_to_period_no_is_externally_locked' => 'bool'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerFormats = [
        'journal_set_id' => null,
        'set_no' => null,
        'set_type' => null,
        'description' => null,
        'source' => null,
        'source_id' => null,
        'posted_date' => 'date-time',
        'is_reversed' => null,
        'reverse_type' => null,
        'reverse_date' => 'date-time',
        'repeating_units' => 'int32',
        'repeating_type' => null,
        'next_repeating_date' => 'date-time',
        'repeating_will_end' => null,
        'repeating_end_date' => 'date-time',
        'last_saved_date_time' => 'date-time',
        'staff' => null,
        'lines' => null,
        'notes' => null,
        'documents' => null,
        'posted_to_period_no' => 'int32',
        'posted_to_period_name' => null,
        'posted_to_year_type' => null,
        'posted_to_year_no' => 'int32',
        'posted_to_period_no_is_globally_locked' => null,
        'posted_to_period_no_is_externally_locked' => null
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerFormats()
    {
        return self::$swaggerFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'journal_set_id' => 'JournalSetID',
        'set_no' => 'SetNo',
        'set_type' => 'SetType',
        'description' => 'Description',
        'source' => 'Source',
        'source_id' => 'SourceID',
        'posted_date' => 'PostedDate',
        'is_reversed' => 'IsReversed',
        'reverse_type' => 'ReverseType',
        'reverse_date' => 'ReverseDate',
        'repeating_units' => 'RepeatingUnits',
        'repeating_type' => 'RepeatingType',
        'next_repeating_date' => 'NextRepeatingDate',
        'repeating_will_end' => 'RepeatingWillEnd',
        'repeating_end_date' => 'RepeatingEndDate',
        'last_saved_date_time' => 'LastSavedDateTime',
        'staff' => 'Staff',
        'lines' => 'Lines',
        'notes' => 'Notes',
        'documents' => 'Documents',
        'posted_to_period_no' => 'PostedToPeriodNo',
        'posted_to_period_name' => 'PostedToPeriodName',
        'posted_to_year_type' => 'PostedToYearType',
        'posted_to_year_no' => 'PostedToYearNo',
        'posted_to_period_no_is_globally_locked' => 'PostedToPeriodNoIsGloballyLocked',
        'posted_to_period_no_is_externally_locked' => 'PostedToPeriodNoIsExternallyLocked'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'journal_set_id' => 'setJournalSetId',
        'set_no' => 'setSetNo',
        'set_type' => 'setSetType',
        'description' => 'setDescription',
        'source' => 'setSource',
        'source_id' => 'setSourceId',
        'posted_date' => 'setPostedDate',
        'is_reversed' => 'setIsReversed',
        'reverse_type' => 'setReverseType',
        'reverse_date' => 'setReverseDate',
        'repeating_units' => 'setRepeatingUnits',
        'repeating_type' => 'setRepeatingType',
        'next_repeating_date' => 'setNextRepeatingDate',
        'repeating_will_end' => 'setRepeatingWillEnd',
        'repeating_end_date' => 'setRepeatingEndDate',
        'last_saved_date_time' => 'setLastSavedDateTime',
        'staff' => 'setStaff',
        'lines' => 'setLines',
        'notes' => 'setNotes',
        'documents' => 'setDocuments',
        'posted_to_period_no' => 'setPostedToPeriodNo',
        'posted_to_period_name' => 'setPostedToPeriodName',
        'posted_to_year_type' => 'setPostedToYearType',
        'posted_to_year_no' => 'setPostedToYearNo',
        'posted_to_period_no_is_globally_locked' => 'setPostedToPeriodNoIsGloballyLocked',
        'posted_to_period_no_is_externally_locked' => 'setPostedToPeriodNoIsExternallyLocked'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'journal_set_id' => 'getJournalSetId',
        'set_no' => 'getSetNo',
        'set_type' => 'getSetType',
        'description' => 'getDescription',
        'source' => 'getSource',
        'source_id' => 'getSourceId',
        'posted_date' => 'getPostedDate',
        'is_reversed' => 'getIsReversed',
        'reverse_type' => 'getReverseType',
        'reverse_date' => 'getReverseDate',
        'repeating_units' => 'getRepeatingUnits',
        'repeating_type' => 'getRepeatingType',
        'next_repeating_date' => 'getNextRepeatingDate',
        'repeating_will_end' => 'getRepeatingWillEnd',
        'repeating_end_date' => 'getRepeatingEndDate',
        'last_saved_date_time' => 'getLastSavedDateTime',
        'staff' => 'getStaff',
        'lines' => 'getLines',
        'notes' => 'getNotes',
        'documents' => 'getDocuments',
        'posted_to_period_no' => 'getPostedToPeriodNo',
        'posted_to_period_name' => 'getPostedToPeriodName',
        'posted_to_year_type' => 'getPostedToYearType',
        'posted_to_year_no' => 'getPostedToYearNo',
        'posted_to_period_no_is_globally_locked' => 'getPostedToPeriodNoIsGloballyLocked',
        'posted_to_period_no_is_externally_locked' => 'getPostedToPeriodNoIsExternallyLocked'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$swaggerModelName;
    }

    

    

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['journal_set_id'] = isset($data['journal_set_id']) ? $data['journal_set_id'] : null;
        $this->container['set_no'] = isset($data['set_no']) ? $data['set_no'] : null;
        $this->container['set_type'] = isset($data['set_type']) ? $data['set_type'] : null;
        $this->container['description'] = isset($data['description']) ? $data['description'] : null;
        $this->container['source'] = isset($data['source']) ? $data['source'] : null;
        $this->container['source_id'] = isset($data['source_id']) ? $data['source_id'] : null;
        $this->container['posted_date'] = isset($data['posted_date']) ? $data['posted_date'] : null;
        $this->container['is_reversed'] = isset($data['is_reversed']) ? $data['is_reversed'] : null;
        $this->container['reverse_type'] = isset($data['reverse_type']) ? $data['reverse_type'] : null;
        $this->container['reverse_date'] = isset($data['reverse_date']) ? $data['reverse_date'] : null;
        $this->container['repeating_units'] = isset($data['repeating_units']) ? $data['repeating_units'] : null;
        $this->container['repeating_type'] = isset($data['repeating_type']) ? $data['repeating_type'] : null;
        $this->container['next_repeating_date'] = isset($data['next_repeating_date']) ? $data['next_repeating_date'] : null;
        $this->container['repeating_will_end'] = isset($data['repeating_will_end']) ? $data['repeating_will_end'] : null;
        $this->container['repeating_end_date'] = isset($data['repeating_end_date']) ? $data['repeating_end_date'] : null;
        $this->container['last_saved_date_time'] = isset($data['last_saved_date_time']) ? $data['last_saved_date_time'] : null;
        $this->container['staff'] = isset($data['staff']) ? $data['staff'] : null;
        $this->container['lines'] = isset($data['lines']) ? $data['lines'] : null;
        $this->container['notes'] = isset($data['notes']) ? $data['notes'] : null;
        $this->container['documents'] = isset($data['documents']) ? $data['documents'] : null;
        $this->container['posted_to_period_no'] = isset($data['posted_to_period_no']) ? $data['posted_to_period_no'] : null;
        $this->container['posted_to_period_name'] = isset($data['posted_to_period_name']) ? $data['posted_to_period_name'] : null;
        $this->container['posted_to_year_type'] = isset($data['posted_to_year_type']) ? $data['posted_to_year_type'] : null;
        $this->container['posted_to_year_no'] = isset($data['posted_to_year_no']) ? $data['posted_to_year_no'] : null;
        $this->container['posted_to_period_no_is_globally_locked'] = isset($data['posted_to_period_no_is_globally_locked']) ? $data['posted_to_period_no_is_globally_locked'] : null;
        $this->container['posted_to_period_no_is_externally_locked'] = isset($data['posted_to_period_no_is_externally_locked']) ? $data['posted_to_period_no_is_externally_locked'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets journal_set_id
     *
     * @return string
     */
    public function getJournalSetId()
    {
        return $this->container['journal_set_id'];
    }

    /**
     * Sets journal_set_id
     *
     * @param string $journal_set_id journal_set_id
     *
     * @return $this
     */
    public function setJournalSetId($journal_set_id)
    {
        $this->container['journal_set_id'] = $journal_set_id;

        return $this;
    }

    /**
     * Gets set_no
     *
     * @return string
     */
    public function getSetNo()
    {
        return $this->container['set_no'];
    }

    /**
     * Sets set_no
     *
     * @param string $set_no set_no
     *
     * @return $this
     */
    public function setSetNo($set_no)
    {
        $this->container['set_no'] = $set_no;

        return $this;
    }

    /**
     * Gets set_type
     *
     * @return string
     */
    public function getSetType()
    {
        return $this->container['set_type'];
    }

    /**
     * Sets set_type
     *
     * @param string $set_type set_type
     *
     * @return $this
     */
    public function setSetType($set_type)
    {
        $this->container['set_type'] = $set_type;

        return $this;
    }

    /**
     * Gets description
     *
     * @return string
     */
    public function getDescription()
    {
        return $this->container['description'];
    }

    /**
     * Sets description
     *
     * @param string $description description
     *
     * @return $this
     */
    public function setDescription($description)
    {
        $this->container['description'] = $description;

        return $this;
    }

    /**
     * Gets source
     *
     * @return string
     */
    public function getSource()
    {
        return $this->container['source'];
    }

    /**
     * Sets source
     *
     * @param string $source source
     *
     * @return $this
     */
    public function setSource($source)
    {
        $this->container['source'] = $source;

        return $this;
    }

    /**
     * Gets source_id
     *
     * @return string
     */
    public function getSourceId()
    {
        return $this->container['source_id'];
    }

    /**
     * Sets source_id
     *
     * @param string $source_id source_id
     *
     * @return $this
     */
    public function setSourceId($source_id)
    {
        $this->container['source_id'] = $source_id;

        return $this;
    }

    /**
     * Gets posted_date
     *
     * @return \DateTime
     */
    public function getPostedDate()
    {
        return $this->container['posted_date'];
    }

    /**
     * Sets posted_date
     *
     * @param \DateTime $posted_date posted_date
     *
     * @return $this
     */
    public function setPostedDate($posted_date)
    {
        $this->container['posted_date'] = $posted_date;

        return $this;
    }

    /**
     * Gets is_reversed
     *
     * @return bool
     */
    public function getIsReversed()
    {
        return $this->container['is_reversed'];
    }

    /**
     * Sets is_reversed
     *
     * @param bool $is_reversed is_reversed
     *
     * @return $this
     */
    public function setIsReversed($is_reversed)
    {
        $this->container['is_reversed'] = $is_reversed;

        return $this;
    }

    /**
     * Gets reverse_type
     *
     * @return string
     */
    public function getReverseType()
    {
        return $this->container['reverse_type'];
    }

    /**
     * Sets reverse_type
     *
     * @param string $reverse_type reverse_type
     *
     * @return $this
     */
    public function setReverseType($reverse_type)
    {
        $this->container['reverse_type'] = $reverse_type;

        return $this;
    }

    /**
     * Gets reverse_date
     *
     * @return \DateTime
     */
    public function getReverseDate()
    {
        return $this->container['reverse_date'];
    }

    /**
     * Sets reverse_date
     *
     * @param \DateTime $reverse_date reverse_date
     *
     * @return $this
     */
    public function setReverseDate($reverse_date)
    {
        $this->container['reverse_date'] = $reverse_date;

        return $this;
    }

    /**
     * Gets repeating_units
     *
     * @return int
     */
    public function getRepeatingUnits()
    {
        return $this->container['repeating_units'];
    }

    /**
     * Sets repeating_units
     *
     * @param int $repeating_units repeating_units
     *
     * @return $this
     */
    public function setRepeatingUnits($repeating_units)
    {
        $this->container['repeating_units'] = $repeating_units;

        return $this;
    }

    /**
     * Gets repeating_type
     *
     * @return string
     */
    public function getRepeatingType()
    {
        return $this->container['repeating_type'];
    }

    /**
     * Sets repeating_type
     *
     * @param string $repeating_type repeating_type
     *
     * @return $this
     */
    public function setRepeatingType($repeating_type)
    {
        $this->container['repeating_type'] = $repeating_type;

        return $this;
    }

    /**
     * Gets next_repeating_date
     *
     * @return \DateTime
     */
    public function getNextRepeatingDate()
    {
        return $this->container['next_repeating_date'];
    }

    /**
     * Sets next_repeating_date
     *
     * @param \DateTime $next_repeating_date next_repeating_date
     *
     * @return $this
     */
    public function setNextRepeatingDate($next_repeating_date)
    {
        $this->container['next_repeating_date'] = $next_repeating_date;

        return $this;
    }

    /**
     * Gets repeating_will_end
     *
     * @return bool
     */
    public function getRepeatingWillEnd()
    {
        return $this->container['repeating_will_end'];
    }

    /**
     * Sets repeating_will_end
     *
     * @param bool $repeating_will_end repeating_will_end
     *
     * @return $this
     */
    public function setRepeatingWillEnd($repeating_will_end)
    {
        $this->container['repeating_will_end'] = $repeating_will_end;

        return $this;
    }

    /**
     * Gets repeating_end_date
     *
     * @return \DateTime
     */
    public function getRepeatingEndDate()
    {
        return $this->container['repeating_end_date'];
    }

    /**
     * Sets repeating_end_date
     *
     * @param \DateTime $repeating_end_date repeating_end_date
     *
     * @return $this
     */
    public function setRepeatingEndDate($repeating_end_date)
    {
        $this->container['repeating_end_date'] = $repeating_end_date;

        return $this;
    }

    /**
     * Gets last_saved_date_time
     *
     * @return \DateTime
     */
    public function getLastSavedDateTime()
    {
        return $this->container['last_saved_date_time'];
    }

    /**
     * Sets last_saved_date_time
     *
     * @param \DateTime $last_saved_date_time last_saved_date_time
     *
     * @return $this
     */
    public function setLastSavedDateTime($last_saved_date_time)
    {
        $this->container['last_saved_date_time'] = $last_saved_date_time;

        return $this;
    }

    /**
     * Gets staff
     *
     * @return \Jiwa\JiwaModel\StaffMember
     */
    public function getStaff()
    {
        return $this->container['staff'];
    }

    /**
     * Sets staff
     *
     * @param \Jiwa\JiwaModel\StaffMember $staff staff
     *
     * @return $this
     */
    public function setStaff($staff)
    {
        $this->container['staff'] = $staff;

        return $this;
    }

    /**
     * Gets lines
     *
     * @return \Jiwa\JiwaModel\JournalSetLine[]
     */
    public function getLines()
    {
        return $this->container['lines'];
    }

    /**
     * Sets lines
     *
     * @param \Jiwa\JiwaModel\JournalSetLine[] $lines lines
     *
     * @return $this
     */
    public function setLines($lines)
    {
        $this->container['lines'] = $lines;

        return $this;
    }

    /**
     * Gets notes
     *
     * @return \Jiwa\JiwaModel\Note[]
     */
    public function getNotes()
    {
        return $this->container['notes'];
    }

    /**
     * Sets notes
     *
     * @param \Jiwa\JiwaModel\Note[] $notes notes
     *
     * @return $this
     */
    public function setNotes($notes)
    {
        $this->container['notes'] = $notes;

        return $this;
    }

    /**
     * Gets documents
     *
     * @return \Jiwa\JiwaModel\Document[]
     */
    public function getDocuments()
    {
        return $this->container['documents'];
    }

    /**
     * Sets documents
     *
     * @param \Jiwa\JiwaModel\Document[] $documents documents
     *
     * @return $this
     */
    public function setDocuments($documents)
    {
        $this->container['documents'] = $documents;

        return $this;
    }

    /**
     * Gets posted_to_period_no
     *
     * @return int
     */
    public function getPostedToPeriodNo()
    {
        return $this->container['posted_to_period_no'];
    }

    /**
     * Sets posted_to_period_no
     *
     * @param int $posted_to_period_no posted_to_period_no
     *
     * @return $this
     */
    public function setPostedToPeriodNo($posted_to_period_no)
    {
        $this->container['posted_to_period_no'] = $posted_to_period_no;

        return $this;
    }

    /**
     * Gets posted_to_period_name
     *
     * @return string
     */
    public function getPostedToPeriodName()
    {
        return $this->container['posted_to_period_name'];
    }

    /**
     * Sets posted_to_period_name
     *
     * @param string $posted_to_period_name posted_to_period_name
     *
     * @return $this
     */
    public function setPostedToPeriodName($posted_to_period_name)
    {
        $this->container['posted_to_period_name'] = $posted_to_period_name;

        return $this;
    }

    /**
     * Gets posted_to_year_type
     *
     * @return string
     */
    public function getPostedToYearType()
    {
        return $this->container['posted_to_year_type'];
    }

    /**
     * Sets posted_to_year_type
     *
     * @param string $posted_to_year_type posted_to_year_type
     *
     * @return $this
     */
    public function setPostedToYearType($posted_to_year_type)
    {
        $this->container['posted_to_year_type'] = $posted_to_year_type;

        return $this;
    }

    /**
     * Gets posted_to_year_no
     *
     * @return int
     */
    public function getPostedToYearNo()
    {
        return $this->container['posted_to_year_no'];
    }

    /**
     * Sets posted_to_year_no
     *
     * @param int $posted_to_year_no posted_to_year_no
     *
     * @return $this
     */
    public function setPostedToYearNo($posted_to_year_no)
    {
        $this->container['posted_to_year_no'] = $posted_to_year_no;

        return $this;
    }

    /**
     * Gets posted_to_period_no_is_globally_locked
     *
     * @return bool
     */
    public function getPostedToPeriodNoIsGloballyLocked()
    {
        return $this->container['posted_to_period_no_is_globally_locked'];
    }

    /**
     * Sets posted_to_period_no_is_globally_locked
     *
     * @param bool $posted_to_period_no_is_globally_locked posted_to_period_no_is_globally_locked
     *
     * @return $this
     */
    public function setPostedToPeriodNoIsGloballyLocked($posted_to_period_no_is_globally_locked)
    {
        $this->container['posted_to_period_no_is_globally_locked'] = $posted_to_period_no_is_globally_locked;

        return $this;
    }

    /**
     * Gets posted_to_period_no_is_externally_locked
     *
     * @return bool
     */
    public function getPostedToPeriodNoIsExternallyLocked()
    {
        return $this->container['posted_to_period_no_is_externally_locked'];
    }

    /**
     * Sets posted_to_period_no_is_externally_locked
     *
     * @param bool $posted_to_period_no_is_externally_locked posted_to_period_no_is_externally_locked
     *
     * @return $this
     */
    public function setPostedToPeriodNoIsExternallyLocked($posted_to_period_no_is_externally_locked)
    {
        $this->container['posted_to_period_no_is_externally_locked'] = $posted_to_period_no_is_externally_locked;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(
                ObjectSerializer::sanitizeForSerialization($this),
                JSON_PRETTY_PRINT
            );
        }

        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}



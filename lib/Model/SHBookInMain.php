<?php
/**
 * SHBookInMain
 *
 * PHP version 5
 *
 * @category Class
 * @package  Jiwa
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * JiwaAPI
 *
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: 1.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 * Swagger Codegen version: 2.4.28-SNAPSHOT
 */

/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Jiwa\JiwaModel;

use \ArrayAccess;
use \Jiwa\ObjectSerializer;

/**
 * SHBookInMain Class Doc Comment
 *
 * @category Class
 * @description SH_BookInMain
 * @package  Jiwa
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class SHBookInMain implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $swaggerModelName = 'SH_BookInMain';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerTypes = [
        'book_in_id' => 'string',
        'book_in_no' => 'string',
        'last_saved_date_time' => '\DateTime',
        'shipment_id' => 'string',
        'book_in_date' => '\DateTime',
        'status' => 'bool',
        'in_logical_id' => 'string',
        'setid' => 'string'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerFormats = [
        'book_in_id' => null,
        'book_in_no' => null,
        'last_saved_date_time' => 'date-time',
        'shipment_id' => null,
        'book_in_date' => 'date-time',
        'status' => null,
        'in_logical_id' => null,
        'setid' => null
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerFormats()
    {
        return self::$swaggerFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'book_in_id' => 'BookInID',
        'book_in_no' => 'BookInNo',
        'last_saved_date_time' => 'LastSavedDateTime',
        'shipment_id' => 'ShipmentID',
        'book_in_date' => 'BookInDate',
        'status' => 'Status',
        'in_logical_id' => 'IN_LogicalID',
        'setid' => 'SETID'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'book_in_id' => 'setBookInId',
        'book_in_no' => 'setBookInNo',
        'last_saved_date_time' => 'setLastSavedDateTime',
        'shipment_id' => 'setShipmentId',
        'book_in_date' => 'setBookInDate',
        'status' => 'setStatus',
        'in_logical_id' => 'setInLogicalId',
        'setid' => 'setSetid'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'book_in_id' => 'getBookInId',
        'book_in_no' => 'getBookInNo',
        'last_saved_date_time' => 'getLastSavedDateTime',
        'shipment_id' => 'getShipmentId',
        'book_in_date' => 'getBookInDate',
        'status' => 'getStatus',
        'in_logical_id' => 'getInLogicalId',
        'setid' => 'getSetid'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$swaggerModelName;
    }

    

    

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['book_in_id'] = isset($data['book_in_id']) ? $data['book_in_id'] : null;
        $this->container['book_in_no'] = isset($data['book_in_no']) ? $data['book_in_no'] : null;
        $this->container['last_saved_date_time'] = isset($data['last_saved_date_time']) ? $data['last_saved_date_time'] : null;
        $this->container['shipment_id'] = isset($data['shipment_id']) ? $data['shipment_id'] : null;
        $this->container['book_in_date'] = isset($data['book_in_date']) ? $data['book_in_date'] : null;
        $this->container['status'] = isset($data['status']) ? $data['status'] : null;
        $this->container['in_logical_id'] = isset($data['in_logical_id']) ? $data['in_logical_id'] : null;
        $this->container['setid'] = isset($data['setid']) ? $data['setid'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets book_in_id
     *
     * @return string
     */
    public function getBookInId()
    {
        return $this->container['book_in_id'];
    }

    /**
     * Sets book_in_id
     *
     * @param string $book_in_id book_in_id
     *
     * @return $this
     */
    public function setBookInId($book_in_id)
    {
        $this->container['book_in_id'] = $book_in_id;

        return $this;
    }

    /**
     * Gets book_in_no
     *
     * @return string
     */
    public function getBookInNo()
    {
        return $this->container['book_in_no'];
    }

    /**
     * Sets book_in_no
     *
     * @param string $book_in_no book_in_no
     *
     * @return $this
     */
    public function setBookInNo($book_in_no)
    {
        $this->container['book_in_no'] = $book_in_no;

        return $this;
    }

    /**
     * Gets last_saved_date_time
     *
     * @return \DateTime
     */
    public function getLastSavedDateTime()
    {
        return $this->container['last_saved_date_time'];
    }

    /**
     * Sets last_saved_date_time
     *
     * @param \DateTime $last_saved_date_time last_saved_date_time
     *
     * @return $this
     */
    public function setLastSavedDateTime($last_saved_date_time)
    {
        $this->container['last_saved_date_time'] = $last_saved_date_time;

        return $this;
    }

    /**
     * Gets shipment_id
     *
     * @return string
     */
    public function getShipmentId()
    {
        return $this->container['shipment_id'];
    }

    /**
     * Sets shipment_id
     *
     * @param string $shipment_id shipment_id
     *
     * @return $this
     */
    public function setShipmentId($shipment_id)
    {
        $this->container['shipment_id'] = $shipment_id;

        return $this;
    }

    /**
     * Gets book_in_date
     *
     * @return \DateTime
     */
    public function getBookInDate()
    {
        return $this->container['book_in_date'];
    }

    /**
     * Sets book_in_date
     *
     * @param \DateTime $book_in_date book_in_date
     *
     * @return $this
     */
    public function setBookInDate($book_in_date)
    {
        $this->container['book_in_date'] = $book_in_date;

        return $this;
    }

    /**
     * Gets status
     *
     * @return bool
     */
    public function getStatus()
    {
        return $this->container['status'];
    }

    /**
     * Sets status
     *
     * @param bool $status status
     *
     * @return $this
     */
    public function setStatus($status)
    {
        $this->container['status'] = $status;

        return $this;
    }

    /**
     * Gets in_logical_id
     *
     * @return string
     */
    public function getInLogicalId()
    {
        return $this->container['in_logical_id'];
    }

    /**
     * Sets in_logical_id
     *
     * @param string $in_logical_id in_logical_id
     *
     * @return $this
     */
    public function setInLogicalId($in_logical_id)
    {
        $this->container['in_logical_id'] = $in_logical_id;

        return $this;
    }

    /**
     * Gets setid
     *
     * @return string
     */
    public function getSetid()
    {
        return $this->container['setid'];
    }

    /**
     * Sets setid
     *
     * @param string $setid setid
     *
     * @return $this
     */
    public function setSetid($setid)
    {
        $this->container['setid'] = $setid;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(
                ObjectSerializer::sanitizeForSerialization($this),
                JSON_PRETTY_PRINT
            );
        }

        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}



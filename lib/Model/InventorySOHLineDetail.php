<?php
/**
 * InventorySOHLineDetail
 *
 * PHP version 5
 *
 * @category Class
 * @package  Jiwa
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * JiwaAPI
 *
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: 1.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 * Swagger Codegen version: 2.4.28-SNAPSHOT
 */

/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Jiwa\JiwaModel;

use \ArrayAccess;
use \Jiwa\ObjectSerializer;

/**
 * InventorySOHLineDetail Class Doc Comment
 *
 * @category Class
 * @description InventorySOHLineDetail
 * @package  Jiwa
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class InventorySOHLineDetail implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $swaggerModelName = 'InventorySOHLineDetail';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerTypes = [
        'in_soh_link_id' => 'string',
        'cost' => 'double',
        'date_in' => '\DateTime',
        'expiry_date' => '\DateTime',
        'special_price' => 'double',
        'quantity' => 'double',
        'quantity_in' => 'double',
        'quantity_left' => 'double',
        'quantity_allocated' => 'double',
        'line_detail_id' => 'string',
        'serial_no' => 'string',
        'in_logical_id' => 'string',
        'ref' => 'string',
        'history_text' => 'string',
        'source_id' => 'string',
        'bin_location' => '\Jiwa\JiwaModel\InventoryBinLocation'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerFormats = [
        'in_soh_link_id' => null,
        'cost' => 'double',
        'date_in' => 'date-time',
        'expiry_date' => 'date-time',
        'special_price' => 'double',
        'quantity' => 'double',
        'quantity_in' => 'double',
        'quantity_left' => 'double',
        'quantity_allocated' => 'double',
        'line_detail_id' => null,
        'serial_no' => null,
        'in_logical_id' => null,
        'ref' => null,
        'history_text' => null,
        'source_id' => null,
        'bin_location' => null
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerFormats()
    {
        return self::$swaggerFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'in_soh_link_id' => 'IN_SOH_LinkID',
        'cost' => 'Cost',
        'date_in' => 'DateIn',
        'expiry_date' => 'ExpiryDate',
        'special_price' => 'SpecialPrice',
        'quantity' => 'Quantity',
        'quantity_in' => 'QuantityIn',
        'quantity_left' => 'QuantityLeft',
        'quantity_allocated' => 'QuantityAllocated',
        'line_detail_id' => 'LineDetailID',
        'serial_no' => 'SerialNo',
        'in_logical_id' => 'IN_LogicalID',
        'ref' => 'Ref',
        'history_text' => 'HistoryText',
        'source_id' => 'SourceID',
        'bin_location' => 'BinLocation'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'in_soh_link_id' => 'setInSohLinkId',
        'cost' => 'setCost',
        'date_in' => 'setDateIn',
        'expiry_date' => 'setExpiryDate',
        'special_price' => 'setSpecialPrice',
        'quantity' => 'setQuantity',
        'quantity_in' => 'setQuantityIn',
        'quantity_left' => 'setQuantityLeft',
        'quantity_allocated' => 'setQuantityAllocated',
        'line_detail_id' => 'setLineDetailId',
        'serial_no' => 'setSerialNo',
        'in_logical_id' => 'setInLogicalId',
        'ref' => 'setRef',
        'history_text' => 'setHistoryText',
        'source_id' => 'setSourceId',
        'bin_location' => 'setBinLocation'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'in_soh_link_id' => 'getInSohLinkId',
        'cost' => 'getCost',
        'date_in' => 'getDateIn',
        'expiry_date' => 'getExpiryDate',
        'special_price' => 'getSpecialPrice',
        'quantity' => 'getQuantity',
        'quantity_in' => 'getQuantityIn',
        'quantity_left' => 'getQuantityLeft',
        'quantity_allocated' => 'getQuantityAllocated',
        'line_detail_id' => 'getLineDetailId',
        'serial_no' => 'getSerialNo',
        'in_logical_id' => 'getInLogicalId',
        'ref' => 'getRef',
        'history_text' => 'getHistoryText',
        'source_id' => 'getSourceId',
        'bin_location' => 'getBinLocation'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$swaggerModelName;
    }

    

    

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['in_soh_link_id'] = isset($data['in_soh_link_id']) ? $data['in_soh_link_id'] : null;
        $this->container['cost'] = isset($data['cost']) ? $data['cost'] : null;
        $this->container['date_in'] = isset($data['date_in']) ? $data['date_in'] : null;
        $this->container['expiry_date'] = isset($data['expiry_date']) ? $data['expiry_date'] : null;
        $this->container['special_price'] = isset($data['special_price']) ? $data['special_price'] : null;
        $this->container['quantity'] = isset($data['quantity']) ? $data['quantity'] : null;
        $this->container['quantity_in'] = isset($data['quantity_in']) ? $data['quantity_in'] : null;
        $this->container['quantity_left'] = isset($data['quantity_left']) ? $data['quantity_left'] : null;
        $this->container['quantity_allocated'] = isset($data['quantity_allocated']) ? $data['quantity_allocated'] : null;
        $this->container['line_detail_id'] = isset($data['line_detail_id']) ? $data['line_detail_id'] : null;
        $this->container['serial_no'] = isset($data['serial_no']) ? $data['serial_no'] : null;
        $this->container['in_logical_id'] = isset($data['in_logical_id']) ? $data['in_logical_id'] : null;
        $this->container['ref'] = isset($data['ref']) ? $data['ref'] : null;
        $this->container['history_text'] = isset($data['history_text']) ? $data['history_text'] : null;
        $this->container['source_id'] = isset($data['source_id']) ? $data['source_id'] : null;
        $this->container['bin_location'] = isset($data['bin_location']) ? $data['bin_location'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets in_soh_link_id
     *
     * @return string
     */
    public function getInSohLinkId()
    {
        return $this->container['in_soh_link_id'];
    }

    /**
     * Sets in_soh_link_id
     *
     * @param string $in_soh_link_id in_soh_link_id
     *
     * @return $this
     */
    public function setInSohLinkId($in_soh_link_id)
    {
        $this->container['in_soh_link_id'] = $in_soh_link_id;

        return $this;
    }

    /**
     * Gets cost
     *
     * @return double
     */
    public function getCost()
    {
        return $this->container['cost'];
    }

    /**
     * Sets cost
     *
     * @param double $cost cost
     *
     * @return $this
     */
    public function setCost($cost)
    {
        $this->container['cost'] = $cost;

        return $this;
    }

    /**
     * Gets date_in
     *
     * @return \DateTime
     */
    public function getDateIn()
    {
        return $this->container['date_in'];
    }

    /**
     * Sets date_in
     *
     * @param \DateTime $date_in date_in
     *
     * @return $this
     */
    public function setDateIn($date_in)
    {
        $this->container['date_in'] = $date_in;

        return $this;
    }

    /**
     * Gets expiry_date
     *
     * @return \DateTime
     */
    public function getExpiryDate()
    {
        return $this->container['expiry_date'];
    }

    /**
     * Sets expiry_date
     *
     * @param \DateTime $expiry_date expiry_date
     *
     * @return $this
     */
    public function setExpiryDate($expiry_date)
    {
        $this->container['expiry_date'] = $expiry_date;

        return $this;
    }

    /**
     * Gets special_price
     *
     * @return double
     */
    public function getSpecialPrice()
    {
        return $this->container['special_price'];
    }

    /**
     * Sets special_price
     *
     * @param double $special_price special_price
     *
     * @return $this
     */
    public function setSpecialPrice($special_price)
    {
        $this->container['special_price'] = $special_price;

        return $this;
    }

    /**
     * Gets quantity
     *
     * @return double
     */
    public function getQuantity()
    {
        return $this->container['quantity'];
    }

    /**
     * Sets quantity
     *
     * @param double $quantity quantity
     *
     * @return $this
     */
    public function setQuantity($quantity)
    {
        $this->container['quantity'] = $quantity;

        return $this;
    }

    /**
     * Gets quantity_in
     *
     * @return double
     */
    public function getQuantityIn()
    {
        return $this->container['quantity_in'];
    }

    /**
     * Sets quantity_in
     *
     * @param double $quantity_in quantity_in
     *
     * @return $this
     */
    public function setQuantityIn($quantity_in)
    {
        $this->container['quantity_in'] = $quantity_in;

        return $this;
    }

    /**
     * Gets quantity_left
     *
     * @return double
     */
    public function getQuantityLeft()
    {
        return $this->container['quantity_left'];
    }

    /**
     * Sets quantity_left
     *
     * @param double $quantity_left quantity_left
     *
     * @return $this
     */
    public function setQuantityLeft($quantity_left)
    {
        $this->container['quantity_left'] = $quantity_left;

        return $this;
    }

    /**
     * Gets quantity_allocated
     *
     * @return double
     */
    public function getQuantityAllocated()
    {
        return $this->container['quantity_allocated'];
    }

    /**
     * Sets quantity_allocated
     *
     * @param double $quantity_allocated quantity_allocated
     *
     * @return $this
     */
    public function setQuantityAllocated($quantity_allocated)
    {
        $this->container['quantity_allocated'] = $quantity_allocated;

        return $this;
    }

    /**
     * Gets line_detail_id
     *
     * @return string
     */
    public function getLineDetailId()
    {
        return $this->container['line_detail_id'];
    }

    /**
     * Sets line_detail_id
     *
     * @param string $line_detail_id line_detail_id
     *
     * @return $this
     */
    public function setLineDetailId($line_detail_id)
    {
        $this->container['line_detail_id'] = $line_detail_id;

        return $this;
    }

    /**
     * Gets serial_no
     *
     * @return string
     */
    public function getSerialNo()
    {
        return $this->container['serial_no'];
    }

    /**
     * Sets serial_no
     *
     * @param string $serial_no serial_no
     *
     * @return $this
     */
    public function setSerialNo($serial_no)
    {
        $this->container['serial_no'] = $serial_no;

        return $this;
    }

    /**
     * Gets in_logical_id
     *
     * @return string
     */
    public function getInLogicalId()
    {
        return $this->container['in_logical_id'];
    }

    /**
     * Sets in_logical_id
     *
     * @param string $in_logical_id in_logical_id
     *
     * @return $this
     */
    public function setInLogicalId($in_logical_id)
    {
        $this->container['in_logical_id'] = $in_logical_id;

        return $this;
    }

    /**
     * Gets ref
     *
     * @return string
     */
    public function getRef()
    {
        return $this->container['ref'];
    }

    /**
     * Sets ref
     *
     * @param string $ref ref
     *
     * @return $this
     */
    public function setRef($ref)
    {
        $this->container['ref'] = $ref;

        return $this;
    }

    /**
     * Gets history_text
     *
     * @return string
     */
    public function getHistoryText()
    {
        return $this->container['history_text'];
    }

    /**
     * Sets history_text
     *
     * @param string $history_text history_text
     *
     * @return $this
     */
    public function setHistoryText($history_text)
    {
        $this->container['history_text'] = $history_text;

        return $this;
    }

    /**
     * Gets source_id
     *
     * @return string
     */
    public function getSourceId()
    {
        return $this->container['source_id'];
    }

    /**
     * Sets source_id
     *
     * @param string $source_id source_id
     *
     * @return $this
     */
    public function setSourceId($source_id)
    {
        $this->container['source_id'] = $source_id;

        return $this;
    }

    /**
     * Gets bin_location
     *
     * @return \Jiwa\JiwaModel\InventoryBinLocation
     */
    public function getBinLocation()
    {
        return $this->container['bin_location'];
    }

    /**
     * Sets bin_location
     *
     * @param \Jiwa\JiwaModel\InventoryBinLocation $bin_location bin_location
     *
     * @return $this
     */
    public function setBinLocation($bin_location)
    {
        $this->container['bin_location'] = $bin_location;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(
                ObjectSerializer::sanitizeForSerialization($this),
                JSON_PRETTY_PRINT
            );
        }

        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}



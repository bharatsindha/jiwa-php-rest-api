<?php
/**
 * SalesQuoteNotePATCHRequest
 *
 * PHP version 5
 *
 * @category Class
 * @package  Jiwa
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * JiwaAPI
 *
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: 1.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 * Swagger Codegen version: 2.4.28-SNAPSHOT
 */

/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Jiwa\JiwaModel;

use \ArrayAccess;
use \Jiwa\ObjectSerializer;

/**
 * SalesQuoteNotePATCHRequest Class Doc Comment
 *
 * @category Class
 * @description SalesQuoteNotePATCHRequest
 * @package  Jiwa
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class SalesQuoteNotePATCHRequest implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $swaggerModelName = 'SalesQuoteNotePATCHRequest';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerTypes = [
        'quote_id' => 'string',
        'note_id' => 'string',
        'note_type' => '\Jiwa\JiwaModel\NoteType',
        'line_no' => 'int',
        'last_saved_date_time' => '\DateTime',
        'last_modified_by_staff_id' => 'string',
        'last_modified_by_staff_username' => 'string',
        'last_modified_by_staff_title' => 'string',
        'last_modified_by_staff_first_name' => 'string',
        'last_modified_by_staff_surname' => 'string',
        'note_text' => 'string'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerFormats = [
        'quote_id' => null,
        'note_id' => null,
        'note_type' => null,
        'line_no' => 'int32',
        'last_saved_date_time' => 'date-time',
        'last_modified_by_staff_id' => null,
        'last_modified_by_staff_username' => null,
        'last_modified_by_staff_title' => null,
        'last_modified_by_staff_first_name' => null,
        'last_modified_by_staff_surname' => null,
        'note_text' => null
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerFormats()
    {
        return self::$swaggerFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'quote_id' => 'QuoteID',
        'note_id' => 'NoteID',
        'note_type' => 'NoteType',
        'line_no' => 'LineNo',
        'last_saved_date_time' => 'LastSavedDateTime',
        'last_modified_by_staff_id' => 'LastModifiedByStaffID',
        'last_modified_by_staff_username' => 'LastModifiedByStaffUsername',
        'last_modified_by_staff_title' => 'LastModifiedByStaffTitle',
        'last_modified_by_staff_first_name' => 'LastModifiedByStaffFirstName',
        'last_modified_by_staff_surname' => 'LastModifiedByStaffSurname',
        'note_text' => 'NoteText'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'quote_id' => 'setQuoteId',
        'note_id' => 'setNoteId',
        'note_type' => 'setNoteType',
        'line_no' => 'setLineNo',
        'last_saved_date_time' => 'setLastSavedDateTime',
        'last_modified_by_staff_id' => 'setLastModifiedByStaffId',
        'last_modified_by_staff_username' => 'setLastModifiedByStaffUsername',
        'last_modified_by_staff_title' => 'setLastModifiedByStaffTitle',
        'last_modified_by_staff_first_name' => 'setLastModifiedByStaffFirstName',
        'last_modified_by_staff_surname' => 'setLastModifiedByStaffSurname',
        'note_text' => 'setNoteText'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'quote_id' => 'getQuoteId',
        'note_id' => 'getNoteId',
        'note_type' => 'getNoteType',
        'line_no' => 'getLineNo',
        'last_saved_date_time' => 'getLastSavedDateTime',
        'last_modified_by_staff_id' => 'getLastModifiedByStaffId',
        'last_modified_by_staff_username' => 'getLastModifiedByStaffUsername',
        'last_modified_by_staff_title' => 'getLastModifiedByStaffTitle',
        'last_modified_by_staff_first_name' => 'getLastModifiedByStaffFirstName',
        'last_modified_by_staff_surname' => 'getLastModifiedByStaffSurname',
        'note_text' => 'getNoteText'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$swaggerModelName;
    }

    

    

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['quote_id'] = isset($data['quote_id']) ? $data['quote_id'] : null;
        $this->container['note_id'] = isset($data['note_id']) ? $data['note_id'] : null;
        $this->container['note_type'] = isset($data['note_type']) ? $data['note_type'] : null;
        $this->container['line_no'] = isset($data['line_no']) ? $data['line_no'] : null;
        $this->container['last_saved_date_time'] = isset($data['last_saved_date_time']) ? $data['last_saved_date_time'] : null;
        $this->container['last_modified_by_staff_id'] = isset($data['last_modified_by_staff_id']) ? $data['last_modified_by_staff_id'] : null;
        $this->container['last_modified_by_staff_username'] = isset($data['last_modified_by_staff_username']) ? $data['last_modified_by_staff_username'] : null;
        $this->container['last_modified_by_staff_title'] = isset($data['last_modified_by_staff_title']) ? $data['last_modified_by_staff_title'] : null;
        $this->container['last_modified_by_staff_first_name'] = isset($data['last_modified_by_staff_first_name']) ? $data['last_modified_by_staff_first_name'] : null;
        $this->container['last_modified_by_staff_surname'] = isset($data['last_modified_by_staff_surname']) ? $data['last_modified_by_staff_surname'] : null;
        $this->container['note_text'] = isset($data['note_text']) ? $data['note_text'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets quote_id
     *
     * @return string
     */
    public function getQuoteId()
    {
        return $this->container['quote_id'];
    }

    /**
     * Sets quote_id
     *
     * @param string $quote_id quote_id
     *
     * @return $this
     */
    public function setQuoteId($quote_id)
    {
        $this->container['quote_id'] = $quote_id;

        return $this;
    }

    /**
     * Gets note_id
     *
     * @return string
     */
    public function getNoteId()
    {
        return $this->container['note_id'];
    }

    /**
     * Sets note_id
     *
     * @param string $note_id note_id
     *
     * @return $this
     */
    public function setNoteId($note_id)
    {
        $this->container['note_id'] = $note_id;

        return $this;
    }

    /**
     * Gets note_type
     *
     * @return \Jiwa\JiwaModel\NoteType
     */
    public function getNoteType()
    {
        return $this->container['note_type'];
    }

    /**
     * Sets note_type
     *
     * @param \Jiwa\JiwaModel\NoteType $note_type note_type
     *
     * @return $this
     */
    public function setNoteType($note_type)
    {
        $this->container['note_type'] = $note_type;

        return $this;
    }

    /**
     * Gets line_no
     *
     * @return int
     */
    public function getLineNo()
    {
        return $this->container['line_no'];
    }

    /**
     * Sets line_no
     *
     * @param int $line_no line_no
     *
     * @return $this
     */
    public function setLineNo($line_no)
    {
        $this->container['line_no'] = $line_no;

        return $this;
    }

    /**
     * Gets last_saved_date_time
     *
     * @return \DateTime
     */
    public function getLastSavedDateTime()
    {
        return $this->container['last_saved_date_time'];
    }

    /**
     * Sets last_saved_date_time
     *
     * @param \DateTime $last_saved_date_time last_saved_date_time
     *
     * @return $this
     */
    public function setLastSavedDateTime($last_saved_date_time)
    {
        $this->container['last_saved_date_time'] = $last_saved_date_time;

        return $this;
    }

    /**
     * Gets last_modified_by_staff_id
     *
     * @return string
     */
    public function getLastModifiedByStaffId()
    {
        return $this->container['last_modified_by_staff_id'];
    }

    /**
     * Sets last_modified_by_staff_id
     *
     * @param string $last_modified_by_staff_id last_modified_by_staff_id
     *
     * @return $this
     */
    public function setLastModifiedByStaffId($last_modified_by_staff_id)
    {
        $this->container['last_modified_by_staff_id'] = $last_modified_by_staff_id;

        return $this;
    }

    /**
     * Gets last_modified_by_staff_username
     *
     * @return string
     */
    public function getLastModifiedByStaffUsername()
    {
        return $this->container['last_modified_by_staff_username'];
    }

    /**
     * Sets last_modified_by_staff_username
     *
     * @param string $last_modified_by_staff_username last_modified_by_staff_username
     *
     * @return $this
     */
    public function setLastModifiedByStaffUsername($last_modified_by_staff_username)
    {
        $this->container['last_modified_by_staff_username'] = $last_modified_by_staff_username;

        return $this;
    }

    /**
     * Gets last_modified_by_staff_title
     *
     * @return string
     */
    public function getLastModifiedByStaffTitle()
    {
        return $this->container['last_modified_by_staff_title'];
    }

    /**
     * Sets last_modified_by_staff_title
     *
     * @param string $last_modified_by_staff_title last_modified_by_staff_title
     *
     * @return $this
     */
    public function setLastModifiedByStaffTitle($last_modified_by_staff_title)
    {
        $this->container['last_modified_by_staff_title'] = $last_modified_by_staff_title;

        return $this;
    }

    /**
     * Gets last_modified_by_staff_first_name
     *
     * @return string
     */
    public function getLastModifiedByStaffFirstName()
    {
        return $this->container['last_modified_by_staff_first_name'];
    }

    /**
     * Sets last_modified_by_staff_first_name
     *
     * @param string $last_modified_by_staff_first_name last_modified_by_staff_first_name
     *
     * @return $this
     */
    public function setLastModifiedByStaffFirstName($last_modified_by_staff_first_name)
    {
        $this->container['last_modified_by_staff_first_name'] = $last_modified_by_staff_first_name;

        return $this;
    }

    /**
     * Gets last_modified_by_staff_surname
     *
     * @return string
     */
    public function getLastModifiedByStaffSurname()
    {
        return $this->container['last_modified_by_staff_surname'];
    }

    /**
     * Sets last_modified_by_staff_surname
     *
     * @param string $last_modified_by_staff_surname last_modified_by_staff_surname
     *
     * @return $this
     */
    public function setLastModifiedByStaffSurname($last_modified_by_staff_surname)
    {
        $this->container['last_modified_by_staff_surname'] = $last_modified_by_staff_surname;

        return $this;
    }

    /**
     * Gets note_text
     *
     * @return string
     */
    public function getNoteText()
    {
        return $this->container['note_text'];
    }

    /**
     * Sets note_text
     *
     * @param string $note_text note_text
     *
     * @return $this
     */
    public function setNoteText($note_text)
    {
        $this->container['note_text'] = $note_text;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(
                ObjectSerializer::sanitizeForSerialization($this),
                JSON_PRETTY_PRINT
            );
        }

        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}



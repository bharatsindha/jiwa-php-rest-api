<?php
/**
 * InventoryBudget
 *
 * PHP version 5
 *
 * @category Class
 * @package  Jiwa
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * JiwaAPI
 *
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: 1.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 * Swagger Codegen version: 2.4.28-SNAPSHOT
 */

/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Jiwa\Model;

use \ArrayAccess;
use \Jiwa\ObjectSerializer;

/**
 * InventoryBudget Class Doc Comment
 *
 * @category Class
 * @description InventoryBudget
 * @package  Jiwa
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class InventoryBudget implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $swaggerModelName = 'InventoryBudget';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerTypes = [
        'month_index' => 'int',
        'month_start_date' => '\DateTime',
        'month_end_date' => '\DateTime',
        'budget_units' => 'double',
        'budget_value' => 'double',
        'logical_warehouse_id' => 'string',
        'logical_warehouse_description' => 'string',
        'physical_warehouse_id' => 'string',
        'physical_warehouse_description' => 'string'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerFormats = [
        'month_index' => 'int32',
        'month_start_date' => 'date-time',
        'month_end_date' => 'date-time',
        'budget_units' => 'double',
        'budget_value' => 'double',
        'logical_warehouse_id' => null,
        'logical_warehouse_description' => null,
        'physical_warehouse_id' => null,
        'physical_warehouse_description' => null
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerFormats()
    {
        return self::$swaggerFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'month_index' => 'MonthIndex',
        'month_start_date' => 'MonthStartDate',
        'month_end_date' => 'MonthEndDate',
        'budget_units' => 'BudgetUnits',
        'budget_value' => 'BudgetValue',
        'logical_warehouse_id' => 'LogicalWarehouseID',
        'logical_warehouse_description' => 'LogicalWarehouseDescription',
        'physical_warehouse_id' => 'PhysicalWarehouseID',
        'physical_warehouse_description' => 'PhysicalWarehouseDescription'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'month_index' => 'setMonthIndex',
        'month_start_date' => 'setMonthStartDate',
        'month_end_date' => 'setMonthEndDate',
        'budget_units' => 'setBudgetUnits',
        'budget_value' => 'setBudgetValue',
        'logical_warehouse_id' => 'setLogicalWarehouseId',
        'logical_warehouse_description' => 'setLogicalWarehouseDescription',
        'physical_warehouse_id' => 'setPhysicalWarehouseId',
        'physical_warehouse_description' => 'setPhysicalWarehouseDescription'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'month_index' => 'getMonthIndex',
        'month_start_date' => 'getMonthStartDate',
        'month_end_date' => 'getMonthEndDate',
        'budget_units' => 'getBudgetUnits',
        'budget_value' => 'getBudgetValue',
        'logical_warehouse_id' => 'getLogicalWarehouseId',
        'logical_warehouse_description' => 'getLogicalWarehouseDescription',
        'physical_warehouse_id' => 'getPhysicalWarehouseId',
        'physical_warehouse_description' => 'getPhysicalWarehouseDescription'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$swaggerModelName;
    }

    

    

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['month_index'] = isset($data['month_index']) ? $data['month_index'] : null;
        $this->container['month_start_date'] = isset($data['month_start_date']) ? $data['month_start_date'] : null;
        $this->container['month_end_date'] = isset($data['month_end_date']) ? $data['month_end_date'] : null;
        $this->container['budget_units'] = isset($data['budget_units']) ? $data['budget_units'] : null;
        $this->container['budget_value'] = isset($data['budget_value']) ? $data['budget_value'] : null;
        $this->container['logical_warehouse_id'] = isset($data['logical_warehouse_id']) ? $data['logical_warehouse_id'] : null;
        $this->container['logical_warehouse_description'] = isset($data['logical_warehouse_description']) ? $data['logical_warehouse_description'] : null;
        $this->container['physical_warehouse_id'] = isset($data['physical_warehouse_id']) ? $data['physical_warehouse_id'] : null;
        $this->container['physical_warehouse_description'] = isset($data['physical_warehouse_description']) ? $data['physical_warehouse_description'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets month_index
     *
     * @return int
     */
    public function getMonthIndex()
    {
        return $this->container['month_index'];
    }

    /**
     * Sets month_index
     *
     * @param int $month_index month_index
     *
     * @return $this
     */
    public function setMonthIndex($month_index)
    {
        $this->container['month_index'] = $month_index;

        return $this;
    }

    /**
     * Gets month_start_date
     *
     * @return \DateTime
     */
    public function getMonthStartDate()
    {
        return $this->container['month_start_date'];
    }

    /**
     * Sets month_start_date
     *
     * @param \DateTime $month_start_date month_start_date
     *
     * @return $this
     */
    public function setMonthStartDate($month_start_date)
    {
        $this->container['month_start_date'] = $month_start_date;

        return $this;
    }

    /**
     * Gets month_end_date
     *
     * @return \DateTime
     */
    public function getMonthEndDate()
    {
        return $this->container['month_end_date'];
    }

    /**
     * Sets month_end_date
     *
     * @param \DateTime $month_end_date month_end_date
     *
     * @return $this
     */
    public function setMonthEndDate($month_end_date)
    {
        $this->container['month_end_date'] = $month_end_date;

        return $this;
    }

    /**
     * Gets budget_units
     *
     * @return double
     */
    public function getBudgetUnits()
    {
        return $this->container['budget_units'];
    }

    /**
     * Sets budget_units
     *
     * @param double $budget_units budget_units
     *
     * @return $this
     */
    public function setBudgetUnits($budget_units)
    {
        $this->container['budget_units'] = $budget_units;

        return $this;
    }

    /**
     * Gets budget_value
     *
     * @return double
     */
    public function getBudgetValue()
    {
        return $this->container['budget_value'];
    }

    /**
     * Sets budget_value
     *
     * @param double $budget_value budget_value
     *
     * @return $this
     */
    public function setBudgetValue($budget_value)
    {
        $this->container['budget_value'] = $budget_value;

        return $this;
    }

    /**
     * Gets logical_warehouse_id
     *
     * @return string
     */
    public function getLogicalWarehouseId()
    {
        return $this->container['logical_warehouse_id'];
    }

    /**
     * Sets logical_warehouse_id
     *
     * @param string $logical_warehouse_id logical_warehouse_id
     *
     * @return $this
     */
    public function setLogicalWarehouseId($logical_warehouse_id)
    {
        $this->container['logical_warehouse_id'] = $logical_warehouse_id;

        return $this;
    }

    /**
     * Gets logical_warehouse_description
     *
     * @return string
     */
    public function getLogicalWarehouseDescription()
    {
        return $this->container['logical_warehouse_description'];
    }

    /**
     * Sets logical_warehouse_description
     *
     * @param string $logical_warehouse_description logical_warehouse_description
     *
     * @return $this
     */
    public function setLogicalWarehouseDescription($logical_warehouse_description)
    {
        $this->container['logical_warehouse_description'] = $logical_warehouse_description;

        return $this;
    }

    /**
     * Gets physical_warehouse_id
     *
     * @return string
     */
    public function getPhysicalWarehouseId()
    {
        return $this->container['physical_warehouse_id'];
    }

    /**
     * Sets physical_warehouse_id
     *
     * @param string $physical_warehouse_id physical_warehouse_id
     *
     * @return $this
     */
    public function setPhysicalWarehouseId($physical_warehouse_id)
    {
        $this->container['physical_warehouse_id'] = $physical_warehouse_id;

        return $this;
    }

    /**
     * Gets physical_warehouse_description
     *
     * @return string
     */
    public function getPhysicalWarehouseDescription()
    {
        return $this->container['physical_warehouse_description'];
    }

    /**
     * Sets physical_warehouse_description
     *
     * @param string $physical_warehouse_description physical_warehouse_description
     *
     * @return $this
     */
    public function setPhysicalWarehouseDescription($physical_warehouse_description)
    {
        $this->container['physical_warehouse_description'] = $physical_warehouse_description;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(
                ObjectSerializer::sanitizeForSerialization($this),
                JSON_PRETTY_PRINT
            );
        }

        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}



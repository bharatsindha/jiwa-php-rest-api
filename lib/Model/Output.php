<?php
/**
 * Output
 *
 * PHP version 5
 *
 * @category Class
 * @package  Jiwa
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * JiwaAPI
 *
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: 1.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 * Swagger Codegen version: 2.4.28-SNAPSHOT
 */

/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Jiwa\JiwaModel;

use \ArrayAccess;
use \Jiwa\ObjectSerializer;

/**
 * Output Class Doc Comment
 *
 * @category Class
 * @description Output
 * @package  Jiwa
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class Output implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $swaggerModelName = 'Output';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerTypes = [
        'output_id' => 'string',
        'item_no' => 'int',
        'inventory_id' => 'string',
        'part_no' => 'string',
        'description' => 'string',
        'is_ratio' => 'bool',
        'quantity' => 'double',
        'note' => 'string',
        'is_primary' => 'bool',
        'cost_percentage' => 'double',
        'cost' => 'double',
        'last_cost' => 'double',
        'custom_field_values' => '\Jiwa\JiwaModel\CustomFieldValue[]'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerFormats = [
        'output_id' => null,
        'item_no' => 'int32',
        'inventory_id' => null,
        'part_no' => null,
        'description' => null,
        'is_ratio' => null,
        'quantity' => 'double',
        'note' => null,
        'is_primary' => null,
        'cost_percentage' => 'double',
        'cost' => 'double',
        'last_cost' => 'double',
        'custom_field_values' => null
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerFormats()
    {
        return self::$swaggerFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'output_id' => 'OutputID',
        'item_no' => 'ItemNo',
        'inventory_id' => 'InventoryID',
        'part_no' => 'PartNo',
        'description' => 'Description',
        'is_ratio' => 'IsRatio',
        'quantity' => 'Quantity',
        'note' => 'Note',
        'is_primary' => 'IsPrimary',
        'cost_percentage' => 'CostPercentage',
        'cost' => 'Cost',
        'last_cost' => 'LastCost',
        'custom_field_values' => 'CustomFieldValues'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'output_id' => 'setOutputId',
        'item_no' => 'setItemNo',
        'inventory_id' => 'setInventoryId',
        'part_no' => 'setPartNo',
        'description' => 'setDescription',
        'is_ratio' => 'setIsRatio',
        'quantity' => 'setQuantity',
        'note' => 'setNote',
        'is_primary' => 'setIsPrimary',
        'cost_percentage' => 'setCostPercentage',
        'cost' => 'setCost',
        'last_cost' => 'setLastCost',
        'custom_field_values' => 'setCustomFieldValues'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'output_id' => 'getOutputId',
        'item_no' => 'getItemNo',
        'inventory_id' => 'getInventoryId',
        'part_no' => 'getPartNo',
        'description' => 'getDescription',
        'is_ratio' => 'getIsRatio',
        'quantity' => 'getQuantity',
        'note' => 'getNote',
        'is_primary' => 'getIsPrimary',
        'cost_percentage' => 'getCostPercentage',
        'cost' => 'getCost',
        'last_cost' => 'getLastCost',
        'custom_field_values' => 'getCustomFieldValues'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$swaggerModelName;
    }

    

    

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['output_id'] = isset($data['output_id']) ? $data['output_id'] : null;
        $this->container['item_no'] = isset($data['item_no']) ? $data['item_no'] : null;
        $this->container['inventory_id'] = isset($data['inventory_id']) ? $data['inventory_id'] : null;
        $this->container['part_no'] = isset($data['part_no']) ? $data['part_no'] : null;
        $this->container['description'] = isset($data['description']) ? $data['description'] : null;
        $this->container['is_ratio'] = isset($data['is_ratio']) ? $data['is_ratio'] : null;
        $this->container['quantity'] = isset($data['quantity']) ? $data['quantity'] : null;
        $this->container['note'] = isset($data['note']) ? $data['note'] : null;
        $this->container['is_primary'] = isset($data['is_primary']) ? $data['is_primary'] : null;
        $this->container['cost_percentage'] = isset($data['cost_percentage']) ? $data['cost_percentage'] : null;
        $this->container['cost'] = isset($data['cost']) ? $data['cost'] : null;
        $this->container['last_cost'] = isset($data['last_cost']) ? $data['last_cost'] : null;
        $this->container['custom_field_values'] = isset($data['custom_field_values']) ? $data['custom_field_values'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets output_id
     *
     * @return string
     */
    public function getOutputId()
    {
        return $this->container['output_id'];
    }

    /**
     * Sets output_id
     *
     * @param string $output_id output_id
     *
     * @return $this
     */
    public function setOutputId($output_id)
    {
        $this->container['output_id'] = $output_id;

        return $this;
    }

    /**
     * Gets item_no
     *
     * @return int
     */
    public function getItemNo()
    {
        return $this->container['item_no'];
    }

    /**
     * Sets item_no
     *
     * @param int $item_no item_no
     *
     * @return $this
     */
    public function setItemNo($item_no)
    {
        $this->container['item_no'] = $item_no;

        return $this;
    }

    /**
     * Gets inventory_id
     *
     * @return string
     */
    public function getInventoryId()
    {
        return $this->container['inventory_id'];
    }

    /**
     * Sets inventory_id
     *
     * @param string $inventory_id inventory_id
     *
     * @return $this
     */
    public function setInventoryId($inventory_id)
    {
        $this->container['inventory_id'] = $inventory_id;

        return $this;
    }

    /**
     * Gets part_no
     *
     * @return string
     */
    public function getPartNo()
    {
        return $this->container['part_no'];
    }

    /**
     * Sets part_no
     *
     * @param string $part_no part_no
     *
     * @return $this
     */
    public function setPartNo($part_no)
    {
        $this->container['part_no'] = $part_no;

        return $this;
    }

    /**
     * Gets description
     *
     * @return string
     */
    public function getDescription()
    {
        return $this->container['description'];
    }

    /**
     * Sets description
     *
     * @param string $description description
     *
     * @return $this
     */
    public function setDescription($description)
    {
        $this->container['description'] = $description;

        return $this;
    }

    /**
     * Gets is_ratio
     *
     * @return bool
     */
    public function getIsRatio()
    {
        return $this->container['is_ratio'];
    }

    /**
     * Sets is_ratio
     *
     * @param bool $is_ratio is_ratio
     *
     * @return $this
     */
    public function setIsRatio($is_ratio)
    {
        $this->container['is_ratio'] = $is_ratio;

        return $this;
    }

    /**
     * Gets quantity
     *
     * @return double
     */
    public function getQuantity()
    {
        return $this->container['quantity'];
    }

    /**
     * Sets quantity
     *
     * @param double $quantity quantity
     *
     * @return $this
     */
    public function setQuantity($quantity)
    {
        $this->container['quantity'] = $quantity;

        return $this;
    }

    /**
     * Gets note
     *
     * @return string
     */
    public function getNote()
    {
        return $this->container['note'];
    }

    /**
     * Sets note
     *
     * @param string $note note
     *
     * @return $this
     */
    public function setNote($note)
    {
        $this->container['note'] = $note;

        return $this;
    }

    /**
     * Gets is_primary
     *
     * @return bool
     */
    public function getIsPrimary()
    {
        return $this->container['is_primary'];
    }

    /**
     * Sets is_primary
     *
     * @param bool $is_primary is_primary
     *
     * @return $this
     */
    public function setIsPrimary($is_primary)
    {
        $this->container['is_primary'] = $is_primary;

        return $this;
    }

    /**
     * Gets cost_percentage
     *
     * @return double
     */
    public function getCostPercentage()
    {
        return $this->container['cost_percentage'];
    }

    /**
     * Sets cost_percentage
     *
     * @param double $cost_percentage cost_percentage
     *
     * @return $this
     */
    public function setCostPercentage($cost_percentage)
    {
        $this->container['cost_percentage'] = $cost_percentage;

        return $this;
    }

    /**
     * Gets cost
     *
     * @return double
     */
    public function getCost()
    {
        return $this->container['cost'];
    }

    /**
     * Sets cost
     *
     * @param double $cost cost
     *
     * @return $this
     */
    public function setCost($cost)
    {
        $this->container['cost'] = $cost;

        return $this;
    }

    /**
     * Gets last_cost
     *
     * @return double
     */
    public function getLastCost()
    {
        return $this->container['last_cost'];
    }

    /**
     * Sets last_cost
     *
     * @param double $last_cost last_cost
     *
     * @return $this
     */
    public function setLastCost($last_cost)
    {
        $this->container['last_cost'] = $last_cost;

        return $this;
    }

    /**
     * Gets custom_field_values
     *
     * @return \Jiwa\JiwaModel\CustomFieldValue[]
     */
    public function getCustomFieldValues()
    {
        return $this->container['custom_field_values'];
    }

    /**
     * Sets custom_field_values
     *
     * @param \Jiwa\JiwaModel\CustomFieldValue[] $custom_field_values custom_field_values
     *
     * @return $this
     */
    public function setCustomFieldValues($custom_field_values)
    {
        $this->container['custom_field_values'] = $custom_field_values;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(
                ObjectSerializer::sanitizeForSerialization($this),
                JSON_PRETTY_PRINT
            );
        }

        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}



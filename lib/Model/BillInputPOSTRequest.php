<?php
/**
 * BillInputPOSTRequest
 *
 * PHP version 5
 *
 * @category Class
 * @package  Jiwa
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * JiwaAPI
 *
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: 1.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 * Swagger Codegen version: 2.4.28-SNAPSHOT
 */

/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Jiwa\Model;

use \ArrayAccess;
use \Jiwa\ObjectSerializer;

/**
 * BillInputPOSTRequest Class Doc Comment
 *
 * @category Class
 * @description BillInputPOSTRequest
 * @package  Jiwa
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class BillInputPOSTRequest implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $swaggerModelName = 'BillInputPOSTRequest';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerTypes = [
        'bill_id' => 'string',
        'stage_id' => 'string',
        'item_no' => 'int',
        'inventory_id' => 'string',
        'part_no' => 'string',
        'description' => 'string',
        'is_ratio' => 'bool',
        'quantity' => 'double',
        'note' => 'string',
        'is_bo_m_item' => 'bool',
        'sub_assembly_bill_id' => 'string',
        'sub_assembly_explode_policy' => 'string',
        'custom_field_values' => '\Jiwa\Model\CustomFieldValue[]',
        'total_line_cost' => 'double',
        'last_cost' => 'double',
        'unit_measure' => 'string'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerFormats = [
        'bill_id' => null,
        'stage_id' => null,
        'item_no' => 'int32',
        'inventory_id' => null,
        'part_no' => null,
        'description' => null,
        'is_ratio' => null,
        'quantity' => 'double',
        'note' => null,
        'is_bo_m_item' => null,
        'sub_assembly_bill_id' => null,
        'sub_assembly_explode_policy' => null,
        'custom_field_values' => null,
        'total_line_cost' => 'double',
        'last_cost' => 'double',
        'unit_measure' => null
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerFormats()
    {
        return self::$swaggerFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'bill_id' => 'BillID',
        'stage_id' => 'StageID',
        'item_no' => 'ItemNo',
        'inventory_id' => 'InventoryID',
        'part_no' => 'PartNo',
        'description' => 'Description',
        'is_ratio' => 'IsRatio',
        'quantity' => 'Quantity',
        'note' => 'Note',
        'is_bo_m_item' => 'IsBoMItem',
        'sub_assembly_bill_id' => 'SubAssemblyBillID',
        'sub_assembly_explode_policy' => 'SubAssemblyExplodePolicy',
        'custom_field_values' => 'CustomFieldValues',
        'total_line_cost' => 'TotalLineCost',
        'last_cost' => 'LastCost',
        'unit_measure' => 'UnitMeasure'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'bill_id' => 'setBillId',
        'stage_id' => 'setStageId',
        'item_no' => 'setItemNo',
        'inventory_id' => 'setInventoryId',
        'part_no' => 'setPartNo',
        'description' => 'setDescription',
        'is_ratio' => 'setIsRatio',
        'quantity' => 'setQuantity',
        'note' => 'setNote',
        'is_bo_m_item' => 'setIsBoMItem',
        'sub_assembly_bill_id' => 'setSubAssemblyBillId',
        'sub_assembly_explode_policy' => 'setSubAssemblyExplodePolicy',
        'custom_field_values' => 'setCustomFieldValues',
        'total_line_cost' => 'setTotalLineCost',
        'last_cost' => 'setLastCost',
        'unit_measure' => 'setUnitMeasure'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'bill_id' => 'getBillId',
        'stage_id' => 'getStageId',
        'item_no' => 'getItemNo',
        'inventory_id' => 'getInventoryId',
        'part_no' => 'getPartNo',
        'description' => 'getDescription',
        'is_ratio' => 'getIsRatio',
        'quantity' => 'getQuantity',
        'note' => 'getNote',
        'is_bo_m_item' => 'getIsBoMItem',
        'sub_assembly_bill_id' => 'getSubAssemblyBillId',
        'sub_assembly_explode_policy' => 'getSubAssemblyExplodePolicy',
        'custom_field_values' => 'getCustomFieldValues',
        'total_line_cost' => 'getTotalLineCost',
        'last_cost' => 'getLastCost',
        'unit_measure' => 'getUnitMeasure'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$swaggerModelName;
    }

    

    

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['bill_id'] = isset($data['bill_id']) ? $data['bill_id'] : null;
        $this->container['stage_id'] = isset($data['stage_id']) ? $data['stage_id'] : null;
        $this->container['item_no'] = isset($data['item_no']) ? $data['item_no'] : null;
        $this->container['inventory_id'] = isset($data['inventory_id']) ? $data['inventory_id'] : null;
        $this->container['part_no'] = isset($data['part_no']) ? $data['part_no'] : null;
        $this->container['description'] = isset($data['description']) ? $data['description'] : null;
        $this->container['is_ratio'] = isset($data['is_ratio']) ? $data['is_ratio'] : null;
        $this->container['quantity'] = isset($data['quantity']) ? $data['quantity'] : null;
        $this->container['note'] = isset($data['note']) ? $data['note'] : null;
        $this->container['is_bo_m_item'] = isset($data['is_bo_m_item']) ? $data['is_bo_m_item'] : null;
        $this->container['sub_assembly_bill_id'] = isset($data['sub_assembly_bill_id']) ? $data['sub_assembly_bill_id'] : null;
        $this->container['sub_assembly_explode_policy'] = isset($data['sub_assembly_explode_policy']) ? $data['sub_assembly_explode_policy'] : null;
        $this->container['custom_field_values'] = isset($data['custom_field_values']) ? $data['custom_field_values'] : null;
        $this->container['total_line_cost'] = isset($data['total_line_cost']) ? $data['total_line_cost'] : null;
        $this->container['last_cost'] = isset($data['last_cost']) ? $data['last_cost'] : null;
        $this->container['unit_measure'] = isset($data['unit_measure']) ? $data['unit_measure'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets bill_id
     *
     * @return string
     */
    public function getBillId()
    {
        return $this->container['bill_id'];
    }

    /**
     * Sets bill_id
     *
     * @param string $bill_id bill_id
     *
     * @return $this
     */
    public function setBillId($bill_id)
    {
        $this->container['bill_id'] = $bill_id;

        return $this;
    }

    /**
     * Gets stage_id
     *
     * @return string
     */
    public function getStageId()
    {
        return $this->container['stage_id'];
    }

    /**
     * Sets stage_id
     *
     * @param string $stage_id stage_id
     *
     * @return $this
     */
    public function setStageId($stage_id)
    {
        $this->container['stage_id'] = $stage_id;

        return $this;
    }

    /**
     * Gets item_no
     *
     * @return int
     */
    public function getItemNo()
    {
        return $this->container['item_no'];
    }

    /**
     * Sets item_no
     *
     * @param int $item_no item_no
     *
     * @return $this
     */
    public function setItemNo($item_no)
    {
        $this->container['item_no'] = $item_no;

        return $this;
    }

    /**
     * Gets inventory_id
     *
     * @return string
     */
    public function getInventoryId()
    {
        return $this->container['inventory_id'];
    }

    /**
     * Sets inventory_id
     *
     * @param string $inventory_id inventory_id
     *
     * @return $this
     */
    public function setInventoryId($inventory_id)
    {
        $this->container['inventory_id'] = $inventory_id;

        return $this;
    }

    /**
     * Gets part_no
     *
     * @return string
     */
    public function getPartNo()
    {
        return $this->container['part_no'];
    }

    /**
     * Sets part_no
     *
     * @param string $part_no part_no
     *
     * @return $this
     */
    public function setPartNo($part_no)
    {
        $this->container['part_no'] = $part_no;

        return $this;
    }

    /**
     * Gets description
     *
     * @return string
     */
    public function getDescription()
    {
        return $this->container['description'];
    }

    /**
     * Sets description
     *
     * @param string $description description
     *
     * @return $this
     */
    public function setDescription($description)
    {
        $this->container['description'] = $description;

        return $this;
    }

    /**
     * Gets is_ratio
     *
     * @return bool
     */
    public function getIsRatio()
    {
        return $this->container['is_ratio'];
    }

    /**
     * Sets is_ratio
     *
     * @param bool $is_ratio is_ratio
     *
     * @return $this
     */
    public function setIsRatio($is_ratio)
    {
        $this->container['is_ratio'] = $is_ratio;

        return $this;
    }

    /**
     * Gets quantity
     *
     * @return double
     */
    public function getQuantity()
    {
        return $this->container['quantity'];
    }

    /**
     * Sets quantity
     *
     * @param double $quantity quantity
     *
     * @return $this
     */
    public function setQuantity($quantity)
    {
        $this->container['quantity'] = $quantity;

        return $this;
    }

    /**
     * Gets note
     *
     * @return string
     */
    public function getNote()
    {
        return $this->container['note'];
    }

    /**
     * Sets note
     *
     * @param string $note note
     *
     * @return $this
     */
    public function setNote($note)
    {
        $this->container['note'] = $note;

        return $this;
    }

    /**
     * Gets is_bo_m_item
     *
     * @return bool
     */
    public function getIsBoMItem()
    {
        return $this->container['is_bo_m_item'];
    }

    /**
     * Sets is_bo_m_item
     *
     * @param bool $is_bo_m_item is_bo_m_item
     *
     * @return $this
     */
    public function setIsBoMItem($is_bo_m_item)
    {
        $this->container['is_bo_m_item'] = $is_bo_m_item;

        return $this;
    }

    /**
     * Gets sub_assembly_bill_id
     *
     * @return string
     */
    public function getSubAssemblyBillId()
    {
        return $this->container['sub_assembly_bill_id'];
    }

    /**
     * Sets sub_assembly_bill_id
     *
     * @param string $sub_assembly_bill_id sub_assembly_bill_id
     *
     * @return $this
     */
    public function setSubAssemblyBillId($sub_assembly_bill_id)
    {
        $this->container['sub_assembly_bill_id'] = $sub_assembly_bill_id;

        return $this;
    }

    /**
     * Gets sub_assembly_explode_policy
     *
     * @return string
     */
    public function getSubAssemblyExplodePolicy()
    {
        return $this->container['sub_assembly_explode_policy'];
    }

    /**
     * Sets sub_assembly_explode_policy
     *
     * @param string $sub_assembly_explode_policy sub_assembly_explode_policy
     *
     * @return $this
     */
    public function setSubAssemblyExplodePolicy($sub_assembly_explode_policy)
    {
        $this->container['sub_assembly_explode_policy'] = $sub_assembly_explode_policy;

        return $this;
    }

    /**
     * Gets custom_field_values
     *
     * @return \Jiwa\Model\CustomFieldValue[]
     */
    public function getCustomFieldValues()
    {
        return $this->container['custom_field_values'];
    }

    /**
     * Sets custom_field_values
     *
     * @param \Jiwa\Model\CustomFieldValue[] $custom_field_values custom_field_values
     *
     * @return $this
     */
    public function setCustomFieldValues($custom_field_values)
    {
        $this->container['custom_field_values'] = $custom_field_values;

        return $this;
    }

    /**
     * Gets total_line_cost
     *
     * @return double
     */
    public function getTotalLineCost()
    {
        return $this->container['total_line_cost'];
    }

    /**
     * Sets total_line_cost
     *
     * @param double $total_line_cost total_line_cost
     *
     * @return $this
     */
    public function setTotalLineCost($total_line_cost)
    {
        $this->container['total_line_cost'] = $total_line_cost;

        return $this;
    }

    /**
     * Gets last_cost
     *
     * @return double
     */
    public function getLastCost()
    {
        return $this->container['last_cost'];
    }

    /**
     * Sets last_cost
     *
     * @param double $last_cost last_cost
     *
     * @return $this
     */
    public function setLastCost($last_cost)
    {
        $this->container['last_cost'] = $last_cost;

        return $this;
    }

    /**
     * Gets unit_measure
     *
     * @return string
     */
    public function getUnitMeasure()
    {
        return $this->container['unit_measure'];
    }

    /**
     * Sets unit_measure
     *
     * @param string $unit_measure unit_measure
     *
     * @return $this
     */
    public function setUnitMeasure($unit_measure)
    {
        $this->container['unit_measure'] = $unit_measure;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(
                ObjectSerializer::sanitizeForSerialization($this),
                JSON_PRETTY_PRINT
            );
        }

        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}



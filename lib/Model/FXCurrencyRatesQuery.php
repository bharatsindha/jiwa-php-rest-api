<?php
/**
 * FXCurrencyRatesQuery
 *
 * PHP version 5
 *
 * @category Class
 * @package  Jiwa
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * JiwaAPI
 *
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: 1.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 * Swagger Codegen version: 2.4.28-SNAPSHOT
 */

/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Jiwa\JiwaModel;

use \ArrayAccess;
use \Jiwa\ObjectSerializer;

/**
 * FXCurrencyRatesQuery Class Doc Comment
 *
 * @category Class
 * @description FX_CurrencyRatesQuery
 * @package  Jiwa
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class FXCurrencyRatesQuery implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $swaggerModelName = 'FX_CurrencyRatesQuery';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerTypes = [
        'rec_id' => 'string',
        'rec_id_starts_with' => 'string',
        'rec_id_ends_with' => 'string',
        'rec_id_contains' => 'string',
        'rec_id_like' => 'string',
        'rec_id_between' => 'string[]',
        'rec_id_in' => 'string[]',
        'fx_main_rec_id' => 'string',
        'fx_main_rec_id_starts_with' => 'string',
        'fx_main_rec_id_ends_with' => 'string',
        'fx_main_rec_id_contains' => 'string',
        'fx_main_rec_id_like' => 'string',
        'fx_main_rec_id_between' => 'string[]',
        'fx_main_rec_id_in' => 'string[]',
        'date_entered' => '\DateTime',
        'date_entered_greater_than_or_equal_to' => '\DateTime',
        'date_entered_greater_than' => '\DateTime',
        'date_entered_less_than' => '\DateTime',
        'date_entered_less_than_or_equal_to' => '\DateTime',
        'date_entered_not_equal_to' => '\DateTime',
        'date_entered_between' => '\DateTime[]',
        'date_entered_in' => '\DateTime[]',
        'effective_date' => '\DateTime',
        'effective_date_greater_than_or_equal_to' => '\DateTime',
        'effective_date_greater_than' => '\DateTime',
        'effective_date_less_than' => '\DateTime',
        'effective_date_less_than_or_equal_to' => '\DateTime',
        'effective_date_not_equal_to' => '\DateTime',
        'effective_date_between' => '\DateTime[]',
        'effective_date_in' => '\DateTime[]',
        'effective_date_end' => '\DateTime',
        'effective_date_end_greater_than_or_equal_to' => '\DateTime',
        'effective_date_end_greater_than' => '\DateTime',
        'effective_date_end_less_than' => '\DateTime',
        'effective_date_end_less_than_or_equal_to' => '\DateTime',
        'effective_date_end_not_equal_to' => '\DateTime',
        'effective_date_end_between' => '\DateTime[]',
        'effective_date_end_in' => '\DateTime[]',
        'transaction_rate' => 'double',
        'transaction_rate_greater_than_or_equal_to' => 'double',
        'transaction_rate_greater_than' => 'double',
        'transaction_rate_less_than' => 'double',
        'transaction_rate_less_than_or_equal_to' => 'double',
        'transaction_rate_not_equal_to' => 'double',
        'transaction_rate_between' => 'double[]',
        'transaction_rate_in' => 'double[]',
        'item_no' => 'int',
        'item_no_greater_than_or_equal_to' => 'int',
        'item_no_greater_than' => 'int',
        'item_no_less_than' => 'int',
        'item_no_less_than_or_equal_to' => 'int',
        'item_no_not_equal_to' => 'int',
        'item_no_between' => 'int[]',
        'item_no_in' => 'int[]',
        'row_hash' => 'string',
        'skip' => 'int',
        'take' => 'int',
        'order_by' => 'string',
        'order_by_desc' => 'string',
        'include' => 'string',
        'fields' => 'string',
        'meta' => '\Jiwa\JiwaModel\DictionaryStringString_'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerFormats = [
        'rec_id' => null,
        'rec_id_starts_with' => null,
        'rec_id_ends_with' => null,
        'rec_id_contains' => null,
        'rec_id_like' => null,
        'rec_id_between' => null,
        'rec_id_in' => null,
        'fx_main_rec_id' => null,
        'fx_main_rec_id_starts_with' => null,
        'fx_main_rec_id_ends_with' => null,
        'fx_main_rec_id_contains' => null,
        'fx_main_rec_id_like' => null,
        'fx_main_rec_id_between' => null,
        'fx_main_rec_id_in' => null,
        'date_entered' => 'date-time',
        'date_entered_greater_than_or_equal_to' => 'date-time',
        'date_entered_greater_than' => 'date-time',
        'date_entered_less_than' => 'date-time',
        'date_entered_less_than_or_equal_to' => 'date-time',
        'date_entered_not_equal_to' => 'date-time',
        'date_entered_between' => 'date-time',
        'date_entered_in' => 'date-time',
        'effective_date' => 'date-time',
        'effective_date_greater_than_or_equal_to' => 'date-time',
        'effective_date_greater_than' => 'date-time',
        'effective_date_less_than' => 'date-time',
        'effective_date_less_than_or_equal_to' => 'date-time',
        'effective_date_not_equal_to' => 'date-time',
        'effective_date_between' => 'date-time',
        'effective_date_in' => 'date-time',
        'effective_date_end' => 'date-time',
        'effective_date_end_greater_than_or_equal_to' => 'date-time',
        'effective_date_end_greater_than' => 'date-time',
        'effective_date_end_less_than' => 'date-time',
        'effective_date_end_less_than_or_equal_to' => 'date-time',
        'effective_date_end_not_equal_to' => 'date-time',
        'effective_date_end_between' => 'date-time',
        'effective_date_end_in' => 'date-time',
        'transaction_rate' => 'double',
        'transaction_rate_greater_than_or_equal_to' => 'double',
        'transaction_rate_greater_than' => 'double',
        'transaction_rate_less_than' => 'double',
        'transaction_rate_less_than_or_equal_to' => 'double',
        'transaction_rate_not_equal_to' => 'double',
        'transaction_rate_between' => 'double',
        'transaction_rate_in' => 'double',
        'item_no' => 'int32',
        'item_no_greater_than_or_equal_to' => 'int32',
        'item_no_greater_than' => 'int32',
        'item_no_less_than' => 'int32',
        'item_no_less_than_or_equal_to' => 'int32',
        'item_no_not_equal_to' => 'int32',
        'item_no_between' => 'int32',
        'item_no_in' => 'int32',
        'row_hash' => 'byte',
        'skip' => 'int32',
        'take' => 'int32',
        'order_by' => null,
        'order_by_desc' => null,
        'include' => null,
        'fields' => null,
        'meta' => null
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerFormats()
    {
        return self::$swaggerFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'rec_id' => 'RecID',
        'rec_id_starts_with' => 'RecIDStartsWith',
        'rec_id_ends_with' => 'RecIDEndsWith',
        'rec_id_contains' => 'RecIDContains',
        'rec_id_like' => 'RecIDLike',
        'rec_id_between' => 'RecIDBetween',
        'rec_id_in' => 'RecIDIn',
        'fx_main_rec_id' => 'FX_Main_RecID',
        'fx_main_rec_id_starts_with' => 'FX_Main_RecIDStartsWith',
        'fx_main_rec_id_ends_with' => 'FX_Main_RecIDEndsWith',
        'fx_main_rec_id_contains' => 'FX_Main_RecIDContains',
        'fx_main_rec_id_like' => 'FX_Main_RecIDLike',
        'fx_main_rec_id_between' => 'FX_Main_RecIDBetween',
        'fx_main_rec_id_in' => 'FX_Main_RecIDIn',
        'date_entered' => 'DateEntered',
        'date_entered_greater_than_or_equal_to' => 'DateEnteredGreaterThanOrEqualTo',
        'date_entered_greater_than' => 'DateEnteredGreaterThan',
        'date_entered_less_than' => 'DateEnteredLessThan',
        'date_entered_less_than_or_equal_to' => 'DateEnteredLessThanOrEqualTo',
        'date_entered_not_equal_to' => 'DateEnteredNotEqualTo',
        'date_entered_between' => 'DateEnteredBetween',
        'date_entered_in' => 'DateEnteredIn',
        'effective_date' => 'EffectiveDate',
        'effective_date_greater_than_or_equal_to' => 'EffectiveDateGreaterThanOrEqualTo',
        'effective_date_greater_than' => 'EffectiveDateGreaterThan',
        'effective_date_less_than' => 'EffectiveDateLessThan',
        'effective_date_less_than_or_equal_to' => 'EffectiveDateLessThanOrEqualTo',
        'effective_date_not_equal_to' => 'EffectiveDateNotEqualTo',
        'effective_date_between' => 'EffectiveDateBetween',
        'effective_date_in' => 'EffectiveDateIn',
        'effective_date_end' => 'EffectiveDateEnd',
        'effective_date_end_greater_than_or_equal_to' => 'EffectiveDateEndGreaterThanOrEqualTo',
        'effective_date_end_greater_than' => 'EffectiveDateEndGreaterThan',
        'effective_date_end_less_than' => 'EffectiveDateEndLessThan',
        'effective_date_end_less_than_or_equal_to' => 'EffectiveDateEndLessThanOrEqualTo',
        'effective_date_end_not_equal_to' => 'EffectiveDateEndNotEqualTo',
        'effective_date_end_between' => 'EffectiveDateEndBetween',
        'effective_date_end_in' => 'EffectiveDateEndIn',
        'transaction_rate' => 'TransactionRate',
        'transaction_rate_greater_than_or_equal_to' => 'TransactionRateGreaterThanOrEqualTo',
        'transaction_rate_greater_than' => 'TransactionRateGreaterThan',
        'transaction_rate_less_than' => 'TransactionRateLessThan',
        'transaction_rate_less_than_or_equal_to' => 'TransactionRateLessThanOrEqualTo',
        'transaction_rate_not_equal_to' => 'TransactionRateNotEqualTo',
        'transaction_rate_between' => 'TransactionRateBetween',
        'transaction_rate_in' => 'TransactionRateIn',
        'item_no' => 'ItemNo',
        'item_no_greater_than_or_equal_to' => 'ItemNoGreaterThanOrEqualTo',
        'item_no_greater_than' => 'ItemNoGreaterThan',
        'item_no_less_than' => 'ItemNoLessThan',
        'item_no_less_than_or_equal_to' => 'ItemNoLessThanOrEqualTo',
        'item_no_not_equal_to' => 'ItemNoNotEqualTo',
        'item_no_between' => 'ItemNoBetween',
        'item_no_in' => 'ItemNoIn',
        'row_hash' => 'RowHash',
        'skip' => 'Skip',
        'take' => 'Take',
        'order_by' => 'OrderBy',
        'order_by_desc' => 'OrderByDesc',
        'include' => 'Include',
        'fields' => 'Fields',
        'meta' => 'Meta'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'rec_id' => 'setRecId',
        'rec_id_starts_with' => 'setRecIdStartsWith',
        'rec_id_ends_with' => 'setRecIdEndsWith',
        'rec_id_contains' => 'setRecIdContains',
        'rec_id_like' => 'setRecIdLike',
        'rec_id_between' => 'setRecIdBetween',
        'rec_id_in' => 'setRecIdIn',
        'fx_main_rec_id' => 'setFxMainRecId',
        'fx_main_rec_id_starts_with' => 'setFxMainRecIdStartsWith',
        'fx_main_rec_id_ends_with' => 'setFxMainRecIdEndsWith',
        'fx_main_rec_id_contains' => 'setFxMainRecIdContains',
        'fx_main_rec_id_like' => 'setFxMainRecIdLike',
        'fx_main_rec_id_between' => 'setFxMainRecIdBetween',
        'fx_main_rec_id_in' => 'setFxMainRecIdIn',
        'date_entered' => 'setDateEntered',
        'date_entered_greater_than_or_equal_to' => 'setDateEnteredGreaterThanOrEqualTo',
        'date_entered_greater_than' => 'setDateEnteredGreaterThan',
        'date_entered_less_than' => 'setDateEnteredLessThan',
        'date_entered_less_than_or_equal_to' => 'setDateEnteredLessThanOrEqualTo',
        'date_entered_not_equal_to' => 'setDateEnteredNotEqualTo',
        'date_entered_between' => 'setDateEnteredBetween',
        'date_entered_in' => 'setDateEnteredIn',
        'effective_date' => 'setEffectiveDate',
        'effective_date_greater_than_or_equal_to' => 'setEffectiveDateGreaterThanOrEqualTo',
        'effective_date_greater_than' => 'setEffectiveDateGreaterThan',
        'effective_date_less_than' => 'setEffectiveDateLessThan',
        'effective_date_less_than_or_equal_to' => 'setEffectiveDateLessThanOrEqualTo',
        'effective_date_not_equal_to' => 'setEffectiveDateNotEqualTo',
        'effective_date_between' => 'setEffectiveDateBetween',
        'effective_date_in' => 'setEffectiveDateIn',
        'effective_date_end' => 'setEffectiveDateEnd',
        'effective_date_end_greater_than_or_equal_to' => 'setEffectiveDateEndGreaterThanOrEqualTo',
        'effective_date_end_greater_than' => 'setEffectiveDateEndGreaterThan',
        'effective_date_end_less_than' => 'setEffectiveDateEndLessThan',
        'effective_date_end_less_than_or_equal_to' => 'setEffectiveDateEndLessThanOrEqualTo',
        'effective_date_end_not_equal_to' => 'setEffectiveDateEndNotEqualTo',
        'effective_date_end_between' => 'setEffectiveDateEndBetween',
        'effective_date_end_in' => 'setEffectiveDateEndIn',
        'transaction_rate' => 'setTransactionRate',
        'transaction_rate_greater_than_or_equal_to' => 'setTransactionRateGreaterThanOrEqualTo',
        'transaction_rate_greater_than' => 'setTransactionRateGreaterThan',
        'transaction_rate_less_than' => 'setTransactionRateLessThan',
        'transaction_rate_less_than_or_equal_to' => 'setTransactionRateLessThanOrEqualTo',
        'transaction_rate_not_equal_to' => 'setTransactionRateNotEqualTo',
        'transaction_rate_between' => 'setTransactionRateBetween',
        'transaction_rate_in' => 'setTransactionRateIn',
        'item_no' => 'setItemNo',
        'item_no_greater_than_or_equal_to' => 'setItemNoGreaterThanOrEqualTo',
        'item_no_greater_than' => 'setItemNoGreaterThan',
        'item_no_less_than' => 'setItemNoLessThan',
        'item_no_less_than_or_equal_to' => 'setItemNoLessThanOrEqualTo',
        'item_no_not_equal_to' => 'setItemNoNotEqualTo',
        'item_no_between' => 'setItemNoBetween',
        'item_no_in' => 'setItemNoIn',
        'row_hash' => 'setRowHash',
        'skip' => 'setSkip',
        'take' => 'setTake',
        'order_by' => 'setOrderBy',
        'order_by_desc' => 'setOrderByDesc',
        'include' => 'setInclude',
        'fields' => 'setFields',
        'meta' => 'setMeta'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'rec_id' => 'getRecId',
        'rec_id_starts_with' => 'getRecIdStartsWith',
        'rec_id_ends_with' => 'getRecIdEndsWith',
        'rec_id_contains' => 'getRecIdContains',
        'rec_id_like' => 'getRecIdLike',
        'rec_id_between' => 'getRecIdBetween',
        'rec_id_in' => 'getRecIdIn',
        'fx_main_rec_id' => 'getFxMainRecId',
        'fx_main_rec_id_starts_with' => 'getFxMainRecIdStartsWith',
        'fx_main_rec_id_ends_with' => 'getFxMainRecIdEndsWith',
        'fx_main_rec_id_contains' => 'getFxMainRecIdContains',
        'fx_main_rec_id_like' => 'getFxMainRecIdLike',
        'fx_main_rec_id_between' => 'getFxMainRecIdBetween',
        'fx_main_rec_id_in' => 'getFxMainRecIdIn',
        'date_entered' => 'getDateEntered',
        'date_entered_greater_than_or_equal_to' => 'getDateEnteredGreaterThanOrEqualTo',
        'date_entered_greater_than' => 'getDateEnteredGreaterThan',
        'date_entered_less_than' => 'getDateEnteredLessThan',
        'date_entered_less_than_or_equal_to' => 'getDateEnteredLessThanOrEqualTo',
        'date_entered_not_equal_to' => 'getDateEnteredNotEqualTo',
        'date_entered_between' => 'getDateEnteredBetween',
        'date_entered_in' => 'getDateEnteredIn',
        'effective_date' => 'getEffectiveDate',
        'effective_date_greater_than_or_equal_to' => 'getEffectiveDateGreaterThanOrEqualTo',
        'effective_date_greater_than' => 'getEffectiveDateGreaterThan',
        'effective_date_less_than' => 'getEffectiveDateLessThan',
        'effective_date_less_than_or_equal_to' => 'getEffectiveDateLessThanOrEqualTo',
        'effective_date_not_equal_to' => 'getEffectiveDateNotEqualTo',
        'effective_date_between' => 'getEffectiveDateBetween',
        'effective_date_in' => 'getEffectiveDateIn',
        'effective_date_end' => 'getEffectiveDateEnd',
        'effective_date_end_greater_than_or_equal_to' => 'getEffectiveDateEndGreaterThanOrEqualTo',
        'effective_date_end_greater_than' => 'getEffectiveDateEndGreaterThan',
        'effective_date_end_less_than' => 'getEffectiveDateEndLessThan',
        'effective_date_end_less_than_or_equal_to' => 'getEffectiveDateEndLessThanOrEqualTo',
        'effective_date_end_not_equal_to' => 'getEffectiveDateEndNotEqualTo',
        'effective_date_end_between' => 'getEffectiveDateEndBetween',
        'effective_date_end_in' => 'getEffectiveDateEndIn',
        'transaction_rate' => 'getTransactionRate',
        'transaction_rate_greater_than_or_equal_to' => 'getTransactionRateGreaterThanOrEqualTo',
        'transaction_rate_greater_than' => 'getTransactionRateGreaterThan',
        'transaction_rate_less_than' => 'getTransactionRateLessThan',
        'transaction_rate_less_than_or_equal_to' => 'getTransactionRateLessThanOrEqualTo',
        'transaction_rate_not_equal_to' => 'getTransactionRateNotEqualTo',
        'transaction_rate_between' => 'getTransactionRateBetween',
        'transaction_rate_in' => 'getTransactionRateIn',
        'item_no' => 'getItemNo',
        'item_no_greater_than_or_equal_to' => 'getItemNoGreaterThanOrEqualTo',
        'item_no_greater_than' => 'getItemNoGreaterThan',
        'item_no_less_than' => 'getItemNoLessThan',
        'item_no_less_than_or_equal_to' => 'getItemNoLessThanOrEqualTo',
        'item_no_not_equal_to' => 'getItemNoNotEqualTo',
        'item_no_between' => 'getItemNoBetween',
        'item_no_in' => 'getItemNoIn',
        'row_hash' => 'getRowHash',
        'skip' => 'getSkip',
        'take' => 'getTake',
        'order_by' => 'getOrderBy',
        'order_by_desc' => 'getOrderByDesc',
        'include' => 'getInclude',
        'fields' => 'getFields',
        'meta' => 'getMeta'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$swaggerModelName;
    }

    

    

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['rec_id'] = isset($data['rec_id']) ? $data['rec_id'] : null;
        $this->container['rec_id_starts_with'] = isset($data['rec_id_starts_with']) ? $data['rec_id_starts_with'] : null;
        $this->container['rec_id_ends_with'] = isset($data['rec_id_ends_with']) ? $data['rec_id_ends_with'] : null;
        $this->container['rec_id_contains'] = isset($data['rec_id_contains']) ? $data['rec_id_contains'] : null;
        $this->container['rec_id_like'] = isset($data['rec_id_like']) ? $data['rec_id_like'] : null;
        $this->container['rec_id_between'] = isset($data['rec_id_between']) ? $data['rec_id_between'] : null;
        $this->container['rec_id_in'] = isset($data['rec_id_in']) ? $data['rec_id_in'] : null;
        $this->container['fx_main_rec_id'] = isset($data['fx_main_rec_id']) ? $data['fx_main_rec_id'] : null;
        $this->container['fx_main_rec_id_starts_with'] = isset($data['fx_main_rec_id_starts_with']) ? $data['fx_main_rec_id_starts_with'] : null;
        $this->container['fx_main_rec_id_ends_with'] = isset($data['fx_main_rec_id_ends_with']) ? $data['fx_main_rec_id_ends_with'] : null;
        $this->container['fx_main_rec_id_contains'] = isset($data['fx_main_rec_id_contains']) ? $data['fx_main_rec_id_contains'] : null;
        $this->container['fx_main_rec_id_like'] = isset($data['fx_main_rec_id_like']) ? $data['fx_main_rec_id_like'] : null;
        $this->container['fx_main_rec_id_between'] = isset($data['fx_main_rec_id_between']) ? $data['fx_main_rec_id_between'] : null;
        $this->container['fx_main_rec_id_in'] = isset($data['fx_main_rec_id_in']) ? $data['fx_main_rec_id_in'] : null;
        $this->container['date_entered'] = isset($data['date_entered']) ? $data['date_entered'] : null;
        $this->container['date_entered_greater_than_or_equal_to'] = isset($data['date_entered_greater_than_or_equal_to']) ? $data['date_entered_greater_than_or_equal_to'] : null;
        $this->container['date_entered_greater_than'] = isset($data['date_entered_greater_than']) ? $data['date_entered_greater_than'] : null;
        $this->container['date_entered_less_than'] = isset($data['date_entered_less_than']) ? $data['date_entered_less_than'] : null;
        $this->container['date_entered_less_than_or_equal_to'] = isset($data['date_entered_less_than_or_equal_to']) ? $data['date_entered_less_than_or_equal_to'] : null;
        $this->container['date_entered_not_equal_to'] = isset($data['date_entered_not_equal_to']) ? $data['date_entered_not_equal_to'] : null;
        $this->container['date_entered_between'] = isset($data['date_entered_between']) ? $data['date_entered_between'] : null;
        $this->container['date_entered_in'] = isset($data['date_entered_in']) ? $data['date_entered_in'] : null;
        $this->container['effective_date'] = isset($data['effective_date']) ? $data['effective_date'] : null;
        $this->container['effective_date_greater_than_or_equal_to'] = isset($data['effective_date_greater_than_or_equal_to']) ? $data['effective_date_greater_than_or_equal_to'] : null;
        $this->container['effective_date_greater_than'] = isset($data['effective_date_greater_than']) ? $data['effective_date_greater_than'] : null;
        $this->container['effective_date_less_than'] = isset($data['effective_date_less_than']) ? $data['effective_date_less_than'] : null;
        $this->container['effective_date_less_than_or_equal_to'] = isset($data['effective_date_less_than_or_equal_to']) ? $data['effective_date_less_than_or_equal_to'] : null;
        $this->container['effective_date_not_equal_to'] = isset($data['effective_date_not_equal_to']) ? $data['effective_date_not_equal_to'] : null;
        $this->container['effective_date_between'] = isset($data['effective_date_between']) ? $data['effective_date_between'] : null;
        $this->container['effective_date_in'] = isset($data['effective_date_in']) ? $data['effective_date_in'] : null;
        $this->container['effective_date_end'] = isset($data['effective_date_end']) ? $data['effective_date_end'] : null;
        $this->container['effective_date_end_greater_than_or_equal_to'] = isset($data['effective_date_end_greater_than_or_equal_to']) ? $data['effective_date_end_greater_than_or_equal_to'] : null;
        $this->container['effective_date_end_greater_than'] = isset($data['effective_date_end_greater_than']) ? $data['effective_date_end_greater_than'] : null;
        $this->container['effective_date_end_less_than'] = isset($data['effective_date_end_less_than']) ? $data['effective_date_end_less_than'] : null;
        $this->container['effective_date_end_less_than_or_equal_to'] = isset($data['effective_date_end_less_than_or_equal_to']) ? $data['effective_date_end_less_than_or_equal_to'] : null;
        $this->container['effective_date_end_not_equal_to'] = isset($data['effective_date_end_not_equal_to']) ? $data['effective_date_end_not_equal_to'] : null;
        $this->container['effective_date_end_between'] = isset($data['effective_date_end_between']) ? $data['effective_date_end_between'] : null;
        $this->container['effective_date_end_in'] = isset($data['effective_date_end_in']) ? $data['effective_date_end_in'] : null;
        $this->container['transaction_rate'] = isset($data['transaction_rate']) ? $data['transaction_rate'] : null;
        $this->container['transaction_rate_greater_than_or_equal_to'] = isset($data['transaction_rate_greater_than_or_equal_to']) ? $data['transaction_rate_greater_than_or_equal_to'] : null;
        $this->container['transaction_rate_greater_than'] = isset($data['transaction_rate_greater_than']) ? $data['transaction_rate_greater_than'] : null;
        $this->container['transaction_rate_less_than'] = isset($data['transaction_rate_less_than']) ? $data['transaction_rate_less_than'] : null;
        $this->container['transaction_rate_less_than_or_equal_to'] = isset($data['transaction_rate_less_than_or_equal_to']) ? $data['transaction_rate_less_than_or_equal_to'] : null;
        $this->container['transaction_rate_not_equal_to'] = isset($data['transaction_rate_not_equal_to']) ? $data['transaction_rate_not_equal_to'] : null;
        $this->container['transaction_rate_between'] = isset($data['transaction_rate_between']) ? $data['transaction_rate_between'] : null;
        $this->container['transaction_rate_in'] = isset($data['transaction_rate_in']) ? $data['transaction_rate_in'] : null;
        $this->container['item_no'] = isset($data['item_no']) ? $data['item_no'] : null;
        $this->container['item_no_greater_than_or_equal_to'] = isset($data['item_no_greater_than_or_equal_to']) ? $data['item_no_greater_than_or_equal_to'] : null;
        $this->container['item_no_greater_than'] = isset($data['item_no_greater_than']) ? $data['item_no_greater_than'] : null;
        $this->container['item_no_less_than'] = isset($data['item_no_less_than']) ? $data['item_no_less_than'] : null;
        $this->container['item_no_less_than_or_equal_to'] = isset($data['item_no_less_than_or_equal_to']) ? $data['item_no_less_than_or_equal_to'] : null;
        $this->container['item_no_not_equal_to'] = isset($data['item_no_not_equal_to']) ? $data['item_no_not_equal_to'] : null;
        $this->container['item_no_between'] = isset($data['item_no_between']) ? $data['item_no_between'] : null;
        $this->container['item_no_in'] = isset($data['item_no_in']) ? $data['item_no_in'] : null;
        $this->container['row_hash'] = isset($data['row_hash']) ? $data['row_hash'] : null;
        $this->container['skip'] = isset($data['skip']) ? $data['skip'] : null;
        $this->container['take'] = isset($data['take']) ? $data['take'] : null;
        $this->container['order_by'] = isset($data['order_by']) ? $data['order_by'] : null;
        $this->container['order_by_desc'] = isset($data['order_by_desc']) ? $data['order_by_desc'] : null;
        $this->container['include'] = isset($data['include']) ? $data['include'] : null;
        $this->container['fields'] = isset($data['fields']) ? $data['fields'] : null;
        $this->container['meta'] = isset($data['meta']) ? $data['meta'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        if (!is_null($this->container['row_hash']) && !preg_match("/^(?:[A-Za-z0-9+\/]{4})*(?:[A-Za-z0-9+\/]{2}==|[A-Za-z0-9+\/]{3}=)?$/", $this->container['row_hash'])) {
            $invalidProperties[] = "invalid value for 'row_hash', must be conform to the pattern /^(?:[A-Za-z0-9+\/]{4})*(?:[A-Za-z0-9+\/]{2}==|[A-Za-z0-9+\/]{3}=)?$/.";
        }

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets rec_id
     *
     * @return string
     */
    public function getRecId()
    {
        return $this->container['rec_id'];
    }

    /**
     * Sets rec_id
     *
     * @param string $rec_id rec_id
     *
     * @return $this
     */
    public function setRecId($rec_id)
    {
        $this->container['rec_id'] = $rec_id;

        return $this;
    }

    /**
     * Gets rec_id_starts_with
     *
     * @return string
     */
    public function getRecIdStartsWith()
    {
        return $this->container['rec_id_starts_with'];
    }

    /**
     * Sets rec_id_starts_with
     *
     * @param string $rec_id_starts_with rec_id_starts_with
     *
     * @return $this
     */
    public function setRecIdStartsWith($rec_id_starts_with)
    {
        $this->container['rec_id_starts_with'] = $rec_id_starts_with;

        return $this;
    }

    /**
     * Gets rec_id_ends_with
     *
     * @return string
     */
    public function getRecIdEndsWith()
    {
        return $this->container['rec_id_ends_with'];
    }

    /**
     * Sets rec_id_ends_with
     *
     * @param string $rec_id_ends_with rec_id_ends_with
     *
     * @return $this
     */
    public function setRecIdEndsWith($rec_id_ends_with)
    {
        $this->container['rec_id_ends_with'] = $rec_id_ends_with;

        return $this;
    }

    /**
     * Gets rec_id_contains
     *
     * @return string
     */
    public function getRecIdContains()
    {
        return $this->container['rec_id_contains'];
    }

    /**
     * Sets rec_id_contains
     *
     * @param string $rec_id_contains rec_id_contains
     *
     * @return $this
     */
    public function setRecIdContains($rec_id_contains)
    {
        $this->container['rec_id_contains'] = $rec_id_contains;

        return $this;
    }

    /**
     * Gets rec_id_like
     *
     * @return string
     */
    public function getRecIdLike()
    {
        return $this->container['rec_id_like'];
    }

    /**
     * Sets rec_id_like
     *
     * @param string $rec_id_like rec_id_like
     *
     * @return $this
     */
    public function setRecIdLike($rec_id_like)
    {
        $this->container['rec_id_like'] = $rec_id_like;

        return $this;
    }

    /**
     * Gets rec_id_between
     *
     * @return string[]
     */
    public function getRecIdBetween()
    {
        return $this->container['rec_id_between'];
    }

    /**
     * Sets rec_id_between
     *
     * @param string[] $rec_id_between rec_id_between
     *
     * @return $this
     */
    public function setRecIdBetween($rec_id_between)
    {
        $this->container['rec_id_between'] = $rec_id_between;

        return $this;
    }

    /**
     * Gets rec_id_in
     *
     * @return string[]
     */
    public function getRecIdIn()
    {
        return $this->container['rec_id_in'];
    }

    /**
     * Sets rec_id_in
     *
     * @param string[] $rec_id_in rec_id_in
     *
     * @return $this
     */
    public function setRecIdIn($rec_id_in)
    {
        $this->container['rec_id_in'] = $rec_id_in;

        return $this;
    }

    /**
     * Gets fx_main_rec_id
     *
     * @return string
     */
    public function getFxMainRecId()
    {
        return $this->container['fx_main_rec_id'];
    }

    /**
     * Sets fx_main_rec_id
     *
     * @param string $fx_main_rec_id fx_main_rec_id
     *
     * @return $this
     */
    public function setFxMainRecId($fx_main_rec_id)
    {
        $this->container['fx_main_rec_id'] = $fx_main_rec_id;

        return $this;
    }

    /**
     * Gets fx_main_rec_id_starts_with
     *
     * @return string
     */
    public function getFxMainRecIdStartsWith()
    {
        return $this->container['fx_main_rec_id_starts_with'];
    }

    /**
     * Sets fx_main_rec_id_starts_with
     *
     * @param string $fx_main_rec_id_starts_with fx_main_rec_id_starts_with
     *
     * @return $this
     */
    public function setFxMainRecIdStartsWith($fx_main_rec_id_starts_with)
    {
        $this->container['fx_main_rec_id_starts_with'] = $fx_main_rec_id_starts_with;

        return $this;
    }

    /**
     * Gets fx_main_rec_id_ends_with
     *
     * @return string
     */
    public function getFxMainRecIdEndsWith()
    {
        return $this->container['fx_main_rec_id_ends_with'];
    }

    /**
     * Sets fx_main_rec_id_ends_with
     *
     * @param string $fx_main_rec_id_ends_with fx_main_rec_id_ends_with
     *
     * @return $this
     */
    public function setFxMainRecIdEndsWith($fx_main_rec_id_ends_with)
    {
        $this->container['fx_main_rec_id_ends_with'] = $fx_main_rec_id_ends_with;

        return $this;
    }

    /**
     * Gets fx_main_rec_id_contains
     *
     * @return string
     */
    public function getFxMainRecIdContains()
    {
        return $this->container['fx_main_rec_id_contains'];
    }

    /**
     * Sets fx_main_rec_id_contains
     *
     * @param string $fx_main_rec_id_contains fx_main_rec_id_contains
     *
     * @return $this
     */
    public function setFxMainRecIdContains($fx_main_rec_id_contains)
    {
        $this->container['fx_main_rec_id_contains'] = $fx_main_rec_id_contains;

        return $this;
    }

    /**
     * Gets fx_main_rec_id_like
     *
     * @return string
     */
    public function getFxMainRecIdLike()
    {
        return $this->container['fx_main_rec_id_like'];
    }

    /**
     * Sets fx_main_rec_id_like
     *
     * @param string $fx_main_rec_id_like fx_main_rec_id_like
     *
     * @return $this
     */
    public function setFxMainRecIdLike($fx_main_rec_id_like)
    {
        $this->container['fx_main_rec_id_like'] = $fx_main_rec_id_like;

        return $this;
    }

    /**
     * Gets fx_main_rec_id_between
     *
     * @return string[]
     */
    public function getFxMainRecIdBetween()
    {
        return $this->container['fx_main_rec_id_between'];
    }

    /**
     * Sets fx_main_rec_id_between
     *
     * @param string[] $fx_main_rec_id_between fx_main_rec_id_between
     *
     * @return $this
     */
    public function setFxMainRecIdBetween($fx_main_rec_id_between)
    {
        $this->container['fx_main_rec_id_between'] = $fx_main_rec_id_between;

        return $this;
    }

    /**
     * Gets fx_main_rec_id_in
     *
     * @return string[]
     */
    public function getFxMainRecIdIn()
    {
        return $this->container['fx_main_rec_id_in'];
    }

    /**
     * Sets fx_main_rec_id_in
     *
     * @param string[] $fx_main_rec_id_in fx_main_rec_id_in
     *
     * @return $this
     */
    public function setFxMainRecIdIn($fx_main_rec_id_in)
    {
        $this->container['fx_main_rec_id_in'] = $fx_main_rec_id_in;

        return $this;
    }

    /**
     * Gets date_entered
     *
     * @return \DateTime
     */
    public function getDateEntered()
    {
        return $this->container['date_entered'];
    }

    /**
     * Sets date_entered
     *
     * @param \DateTime $date_entered date_entered
     *
     * @return $this
     */
    public function setDateEntered($date_entered)
    {
        $this->container['date_entered'] = $date_entered;

        return $this;
    }

    /**
     * Gets date_entered_greater_than_or_equal_to
     *
     * @return \DateTime
     */
    public function getDateEnteredGreaterThanOrEqualTo()
    {
        return $this->container['date_entered_greater_than_or_equal_to'];
    }

    /**
     * Sets date_entered_greater_than_or_equal_to
     *
     * @param \DateTime $date_entered_greater_than_or_equal_to date_entered_greater_than_or_equal_to
     *
     * @return $this
     */
    public function setDateEnteredGreaterThanOrEqualTo($date_entered_greater_than_or_equal_to)
    {
        $this->container['date_entered_greater_than_or_equal_to'] = $date_entered_greater_than_or_equal_to;

        return $this;
    }

    /**
     * Gets date_entered_greater_than
     *
     * @return \DateTime
     */
    public function getDateEnteredGreaterThan()
    {
        return $this->container['date_entered_greater_than'];
    }

    /**
     * Sets date_entered_greater_than
     *
     * @param \DateTime $date_entered_greater_than date_entered_greater_than
     *
     * @return $this
     */
    public function setDateEnteredGreaterThan($date_entered_greater_than)
    {
        $this->container['date_entered_greater_than'] = $date_entered_greater_than;

        return $this;
    }

    /**
     * Gets date_entered_less_than
     *
     * @return \DateTime
     */
    public function getDateEnteredLessThan()
    {
        return $this->container['date_entered_less_than'];
    }

    /**
     * Sets date_entered_less_than
     *
     * @param \DateTime $date_entered_less_than date_entered_less_than
     *
     * @return $this
     */
    public function setDateEnteredLessThan($date_entered_less_than)
    {
        $this->container['date_entered_less_than'] = $date_entered_less_than;

        return $this;
    }

    /**
     * Gets date_entered_less_than_or_equal_to
     *
     * @return \DateTime
     */
    public function getDateEnteredLessThanOrEqualTo()
    {
        return $this->container['date_entered_less_than_or_equal_to'];
    }

    /**
     * Sets date_entered_less_than_or_equal_to
     *
     * @param \DateTime $date_entered_less_than_or_equal_to date_entered_less_than_or_equal_to
     *
     * @return $this
     */
    public function setDateEnteredLessThanOrEqualTo($date_entered_less_than_or_equal_to)
    {
        $this->container['date_entered_less_than_or_equal_to'] = $date_entered_less_than_or_equal_to;

        return $this;
    }

    /**
     * Gets date_entered_not_equal_to
     *
     * @return \DateTime
     */
    public function getDateEnteredNotEqualTo()
    {
        return $this->container['date_entered_not_equal_to'];
    }

    /**
     * Sets date_entered_not_equal_to
     *
     * @param \DateTime $date_entered_not_equal_to date_entered_not_equal_to
     *
     * @return $this
     */
    public function setDateEnteredNotEqualTo($date_entered_not_equal_to)
    {
        $this->container['date_entered_not_equal_to'] = $date_entered_not_equal_to;

        return $this;
    }

    /**
     * Gets date_entered_between
     *
     * @return \DateTime[]
     */
    public function getDateEnteredBetween()
    {
        return $this->container['date_entered_between'];
    }

    /**
     * Sets date_entered_between
     *
     * @param \DateTime[] $date_entered_between date_entered_between
     *
     * @return $this
     */
    public function setDateEnteredBetween($date_entered_between)
    {
        $this->container['date_entered_between'] = $date_entered_between;

        return $this;
    }

    /**
     * Gets date_entered_in
     *
     * @return \DateTime[]
     */
    public function getDateEnteredIn()
    {
        return $this->container['date_entered_in'];
    }

    /**
     * Sets date_entered_in
     *
     * @param \DateTime[] $date_entered_in date_entered_in
     *
     * @return $this
     */
    public function setDateEnteredIn($date_entered_in)
    {
        $this->container['date_entered_in'] = $date_entered_in;

        return $this;
    }

    /**
     * Gets effective_date
     *
     * @return \DateTime
     */
    public function getEffectiveDate()
    {
        return $this->container['effective_date'];
    }

    /**
     * Sets effective_date
     *
     * @param \DateTime $effective_date effective_date
     *
     * @return $this
     */
    public function setEffectiveDate($effective_date)
    {
        $this->container['effective_date'] = $effective_date;

        return $this;
    }

    /**
     * Gets effective_date_greater_than_or_equal_to
     *
     * @return \DateTime
     */
    public function getEffectiveDateGreaterThanOrEqualTo()
    {
        return $this->container['effective_date_greater_than_or_equal_to'];
    }

    /**
     * Sets effective_date_greater_than_or_equal_to
     *
     * @param \DateTime $effective_date_greater_than_or_equal_to effective_date_greater_than_or_equal_to
     *
     * @return $this
     */
    public function setEffectiveDateGreaterThanOrEqualTo($effective_date_greater_than_or_equal_to)
    {
        $this->container['effective_date_greater_than_or_equal_to'] = $effective_date_greater_than_or_equal_to;

        return $this;
    }

    /**
     * Gets effective_date_greater_than
     *
     * @return \DateTime
     */
    public function getEffectiveDateGreaterThan()
    {
        return $this->container['effective_date_greater_than'];
    }

    /**
     * Sets effective_date_greater_than
     *
     * @param \DateTime $effective_date_greater_than effective_date_greater_than
     *
     * @return $this
     */
    public function setEffectiveDateGreaterThan($effective_date_greater_than)
    {
        $this->container['effective_date_greater_than'] = $effective_date_greater_than;

        return $this;
    }

    /**
     * Gets effective_date_less_than
     *
     * @return \DateTime
     */
    public function getEffectiveDateLessThan()
    {
        return $this->container['effective_date_less_than'];
    }

    /**
     * Sets effective_date_less_than
     *
     * @param \DateTime $effective_date_less_than effective_date_less_than
     *
     * @return $this
     */
    public function setEffectiveDateLessThan($effective_date_less_than)
    {
        $this->container['effective_date_less_than'] = $effective_date_less_than;

        return $this;
    }

    /**
     * Gets effective_date_less_than_or_equal_to
     *
     * @return \DateTime
     */
    public function getEffectiveDateLessThanOrEqualTo()
    {
        return $this->container['effective_date_less_than_or_equal_to'];
    }

    /**
     * Sets effective_date_less_than_or_equal_to
     *
     * @param \DateTime $effective_date_less_than_or_equal_to effective_date_less_than_or_equal_to
     *
     * @return $this
     */
    public function setEffectiveDateLessThanOrEqualTo($effective_date_less_than_or_equal_to)
    {
        $this->container['effective_date_less_than_or_equal_to'] = $effective_date_less_than_or_equal_to;

        return $this;
    }

    /**
     * Gets effective_date_not_equal_to
     *
     * @return \DateTime
     */
    public function getEffectiveDateNotEqualTo()
    {
        return $this->container['effective_date_not_equal_to'];
    }

    /**
     * Sets effective_date_not_equal_to
     *
     * @param \DateTime $effective_date_not_equal_to effective_date_not_equal_to
     *
     * @return $this
     */
    public function setEffectiveDateNotEqualTo($effective_date_not_equal_to)
    {
        $this->container['effective_date_not_equal_to'] = $effective_date_not_equal_to;

        return $this;
    }

    /**
     * Gets effective_date_between
     *
     * @return \DateTime[]
     */
    public function getEffectiveDateBetween()
    {
        return $this->container['effective_date_between'];
    }

    /**
     * Sets effective_date_between
     *
     * @param \DateTime[] $effective_date_between effective_date_between
     *
     * @return $this
     */
    public function setEffectiveDateBetween($effective_date_between)
    {
        $this->container['effective_date_between'] = $effective_date_between;

        return $this;
    }

    /**
     * Gets effective_date_in
     *
     * @return \DateTime[]
     */
    public function getEffectiveDateIn()
    {
        return $this->container['effective_date_in'];
    }

    /**
     * Sets effective_date_in
     *
     * @param \DateTime[] $effective_date_in effective_date_in
     *
     * @return $this
     */
    public function setEffectiveDateIn($effective_date_in)
    {
        $this->container['effective_date_in'] = $effective_date_in;

        return $this;
    }

    /**
     * Gets effective_date_end
     *
     * @return \DateTime
     */
    public function getEffectiveDateEnd()
    {
        return $this->container['effective_date_end'];
    }

    /**
     * Sets effective_date_end
     *
     * @param \DateTime $effective_date_end effective_date_end
     *
     * @return $this
     */
    public function setEffectiveDateEnd($effective_date_end)
    {
        $this->container['effective_date_end'] = $effective_date_end;

        return $this;
    }

    /**
     * Gets effective_date_end_greater_than_or_equal_to
     *
     * @return \DateTime
     */
    public function getEffectiveDateEndGreaterThanOrEqualTo()
    {
        return $this->container['effective_date_end_greater_than_or_equal_to'];
    }

    /**
     * Sets effective_date_end_greater_than_or_equal_to
     *
     * @param \DateTime $effective_date_end_greater_than_or_equal_to effective_date_end_greater_than_or_equal_to
     *
     * @return $this
     */
    public function setEffectiveDateEndGreaterThanOrEqualTo($effective_date_end_greater_than_or_equal_to)
    {
        $this->container['effective_date_end_greater_than_or_equal_to'] = $effective_date_end_greater_than_or_equal_to;

        return $this;
    }

    /**
     * Gets effective_date_end_greater_than
     *
     * @return \DateTime
     */
    public function getEffectiveDateEndGreaterThan()
    {
        return $this->container['effective_date_end_greater_than'];
    }

    /**
     * Sets effective_date_end_greater_than
     *
     * @param \DateTime $effective_date_end_greater_than effective_date_end_greater_than
     *
     * @return $this
     */
    public function setEffectiveDateEndGreaterThan($effective_date_end_greater_than)
    {
        $this->container['effective_date_end_greater_than'] = $effective_date_end_greater_than;

        return $this;
    }

    /**
     * Gets effective_date_end_less_than
     *
     * @return \DateTime
     */
    public function getEffectiveDateEndLessThan()
    {
        return $this->container['effective_date_end_less_than'];
    }

    /**
     * Sets effective_date_end_less_than
     *
     * @param \DateTime $effective_date_end_less_than effective_date_end_less_than
     *
     * @return $this
     */
    public function setEffectiveDateEndLessThan($effective_date_end_less_than)
    {
        $this->container['effective_date_end_less_than'] = $effective_date_end_less_than;

        return $this;
    }

    /**
     * Gets effective_date_end_less_than_or_equal_to
     *
     * @return \DateTime
     */
    public function getEffectiveDateEndLessThanOrEqualTo()
    {
        return $this->container['effective_date_end_less_than_or_equal_to'];
    }

    /**
     * Sets effective_date_end_less_than_or_equal_to
     *
     * @param \DateTime $effective_date_end_less_than_or_equal_to effective_date_end_less_than_or_equal_to
     *
     * @return $this
     */
    public function setEffectiveDateEndLessThanOrEqualTo($effective_date_end_less_than_or_equal_to)
    {
        $this->container['effective_date_end_less_than_or_equal_to'] = $effective_date_end_less_than_or_equal_to;

        return $this;
    }

    /**
     * Gets effective_date_end_not_equal_to
     *
     * @return \DateTime
     */
    public function getEffectiveDateEndNotEqualTo()
    {
        return $this->container['effective_date_end_not_equal_to'];
    }

    /**
     * Sets effective_date_end_not_equal_to
     *
     * @param \DateTime $effective_date_end_not_equal_to effective_date_end_not_equal_to
     *
     * @return $this
     */
    public function setEffectiveDateEndNotEqualTo($effective_date_end_not_equal_to)
    {
        $this->container['effective_date_end_not_equal_to'] = $effective_date_end_not_equal_to;

        return $this;
    }

    /**
     * Gets effective_date_end_between
     *
     * @return \DateTime[]
     */
    public function getEffectiveDateEndBetween()
    {
        return $this->container['effective_date_end_between'];
    }

    /**
     * Sets effective_date_end_between
     *
     * @param \DateTime[] $effective_date_end_between effective_date_end_between
     *
     * @return $this
     */
    public function setEffectiveDateEndBetween($effective_date_end_between)
    {
        $this->container['effective_date_end_between'] = $effective_date_end_between;

        return $this;
    }

    /**
     * Gets effective_date_end_in
     *
     * @return \DateTime[]
     */
    public function getEffectiveDateEndIn()
    {
        return $this->container['effective_date_end_in'];
    }

    /**
     * Sets effective_date_end_in
     *
     * @param \DateTime[] $effective_date_end_in effective_date_end_in
     *
     * @return $this
     */
    public function setEffectiveDateEndIn($effective_date_end_in)
    {
        $this->container['effective_date_end_in'] = $effective_date_end_in;

        return $this;
    }

    /**
     * Gets transaction_rate
     *
     * @return double
     */
    public function getTransactionRate()
    {
        return $this->container['transaction_rate'];
    }

    /**
     * Sets transaction_rate
     *
     * @param double $transaction_rate transaction_rate
     *
     * @return $this
     */
    public function setTransactionRate($transaction_rate)
    {
        $this->container['transaction_rate'] = $transaction_rate;

        return $this;
    }

    /**
     * Gets transaction_rate_greater_than_or_equal_to
     *
     * @return double
     */
    public function getTransactionRateGreaterThanOrEqualTo()
    {
        return $this->container['transaction_rate_greater_than_or_equal_to'];
    }

    /**
     * Sets transaction_rate_greater_than_or_equal_to
     *
     * @param double $transaction_rate_greater_than_or_equal_to transaction_rate_greater_than_or_equal_to
     *
     * @return $this
     */
    public function setTransactionRateGreaterThanOrEqualTo($transaction_rate_greater_than_or_equal_to)
    {
        $this->container['transaction_rate_greater_than_or_equal_to'] = $transaction_rate_greater_than_or_equal_to;

        return $this;
    }

    /**
     * Gets transaction_rate_greater_than
     *
     * @return double
     */
    public function getTransactionRateGreaterThan()
    {
        return $this->container['transaction_rate_greater_than'];
    }

    /**
     * Sets transaction_rate_greater_than
     *
     * @param double $transaction_rate_greater_than transaction_rate_greater_than
     *
     * @return $this
     */
    public function setTransactionRateGreaterThan($transaction_rate_greater_than)
    {
        $this->container['transaction_rate_greater_than'] = $transaction_rate_greater_than;

        return $this;
    }

    /**
     * Gets transaction_rate_less_than
     *
     * @return double
     */
    public function getTransactionRateLessThan()
    {
        return $this->container['transaction_rate_less_than'];
    }

    /**
     * Sets transaction_rate_less_than
     *
     * @param double $transaction_rate_less_than transaction_rate_less_than
     *
     * @return $this
     */
    public function setTransactionRateLessThan($transaction_rate_less_than)
    {
        $this->container['transaction_rate_less_than'] = $transaction_rate_less_than;

        return $this;
    }

    /**
     * Gets transaction_rate_less_than_or_equal_to
     *
     * @return double
     */
    public function getTransactionRateLessThanOrEqualTo()
    {
        return $this->container['transaction_rate_less_than_or_equal_to'];
    }

    /**
     * Sets transaction_rate_less_than_or_equal_to
     *
     * @param double $transaction_rate_less_than_or_equal_to transaction_rate_less_than_or_equal_to
     *
     * @return $this
     */
    public function setTransactionRateLessThanOrEqualTo($transaction_rate_less_than_or_equal_to)
    {
        $this->container['transaction_rate_less_than_or_equal_to'] = $transaction_rate_less_than_or_equal_to;

        return $this;
    }

    /**
     * Gets transaction_rate_not_equal_to
     *
     * @return double
     */
    public function getTransactionRateNotEqualTo()
    {
        return $this->container['transaction_rate_not_equal_to'];
    }

    /**
     * Sets transaction_rate_not_equal_to
     *
     * @param double $transaction_rate_not_equal_to transaction_rate_not_equal_to
     *
     * @return $this
     */
    public function setTransactionRateNotEqualTo($transaction_rate_not_equal_to)
    {
        $this->container['transaction_rate_not_equal_to'] = $transaction_rate_not_equal_to;

        return $this;
    }

    /**
     * Gets transaction_rate_between
     *
     * @return double[]
     */
    public function getTransactionRateBetween()
    {
        return $this->container['transaction_rate_between'];
    }

    /**
     * Sets transaction_rate_between
     *
     * @param double[] $transaction_rate_between transaction_rate_between
     *
     * @return $this
     */
    public function setTransactionRateBetween($transaction_rate_between)
    {
        $this->container['transaction_rate_between'] = $transaction_rate_between;

        return $this;
    }

    /**
     * Gets transaction_rate_in
     *
     * @return double[]
     */
    public function getTransactionRateIn()
    {
        return $this->container['transaction_rate_in'];
    }

    /**
     * Sets transaction_rate_in
     *
     * @param double[] $transaction_rate_in transaction_rate_in
     *
     * @return $this
     */
    public function setTransactionRateIn($transaction_rate_in)
    {
        $this->container['transaction_rate_in'] = $transaction_rate_in;

        return $this;
    }

    /**
     * Gets item_no
     *
     * @return int
     */
    public function getItemNo()
    {
        return $this->container['item_no'];
    }

    /**
     * Sets item_no
     *
     * @param int $item_no item_no
     *
     * @return $this
     */
    public function setItemNo($item_no)
    {
        $this->container['item_no'] = $item_no;

        return $this;
    }

    /**
     * Gets item_no_greater_than_or_equal_to
     *
     * @return int
     */
    public function getItemNoGreaterThanOrEqualTo()
    {
        return $this->container['item_no_greater_than_or_equal_to'];
    }

    /**
     * Sets item_no_greater_than_or_equal_to
     *
     * @param int $item_no_greater_than_or_equal_to item_no_greater_than_or_equal_to
     *
     * @return $this
     */
    public function setItemNoGreaterThanOrEqualTo($item_no_greater_than_or_equal_to)
    {
        $this->container['item_no_greater_than_or_equal_to'] = $item_no_greater_than_or_equal_to;

        return $this;
    }

    /**
     * Gets item_no_greater_than
     *
     * @return int
     */
    public function getItemNoGreaterThan()
    {
        return $this->container['item_no_greater_than'];
    }

    /**
     * Sets item_no_greater_than
     *
     * @param int $item_no_greater_than item_no_greater_than
     *
     * @return $this
     */
    public function setItemNoGreaterThan($item_no_greater_than)
    {
        $this->container['item_no_greater_than'] = $item_no_greater_than;

        return $this;
    }

    /**
     * Gets item_no_less_than
     *
     * @return int
     */
    public function getItemNoLessThan()
    {
        return $this->container['item_no_less_than'];
    }

    /**
     * Sets item_no_less_than
     *
     * @param int $item_no_less_than item_no_less_than
     *
     * @return $this
     */
    public function setItemNoLessThan($item_no_less_than)
    {
        $this->container['item_no_less_than'] = $item_no_less_than;

        return $this;
    }

    /**
     * Gets item_no_less_than_or_equal_to
     *
     * @return int
     */
    public function getItemNoLessThanOrEqualTo()
    {
        return $this->container['item_no_less_than_or_equal_to'];
    }

    /**
     * Sets item_no_less_than_or_equal_to
     *
     * @param int $item_no_less_than_or_equal_to item_no_less_than_or_equal_to
     *
     * @return $this
     */
    public function setItemNoLessThanOrEqualTo($item_no_less_than_or_equal_to)
    {
        $this->container['item_no_less_than_or_equal_to'] = $item_no_less_than_or_equal_to;

        return $this;
    }

    /**
     * Gets item_no_not_equal_to
     *
     * @return int
     */
    public function getItemNoNotEqualTo()
    {
        return $this->container['item_no_not_equal_to'];
    }

    /**
     * Sets item_no_not_equal_to
     *
     * @param int $item_no_not_equal_to item_no_not_equal_to
     *
     * @return $this
     */
    public function setItemNoNotEqualTo($item_no_not_equal_to)
    {
        $this->container['item_no_not_equal_to'] = $item_no_not_equal_to;

        return $this;
    }

    /**
     * Gets item_no_between
     *
     * @return int[]
     */
    public function getItemNoBetween()
    {
        return $this->container['item_no_between'];
    }

    /**
     * Sets item_no_between
     *
     * @param int[] $item_no_between item_no_between
     *
     * @return $this
     */
    public function setItemNoBetween($item_no_between)
    {
        $this->container['item_no_between'] = $item_no_between;

        return $this;
    }

    /**
     * Gets item_no_in
     *
     * @return int[]
     */
    public function getItemNoIn()
    {
        return $this->container['item_no_in'];
    }

    /**
     * Sets item_no_in
     *
     * @param int[] $item_no_in item_no_in
     *
     * @return $this
     */
    public function setItemNoIn($item_no_in)
    {
        $this->container['item_no_in'] = $item_no_in;

        return $this;
    }

    /**
     * Gets row_hash
     *
     * @return string
     */
    public function getRowHash()
    {
        return $this->container['row_hash'];
    }

    /**
     * Sets row_hash
     *
     * @param string $row_hash row_hash
     *
     * @return $this
     */
    public function setRowHash($row_hash)
    {

        if (!is_null($row_hash) && (!preg_match("/^(?:[A-Za-z0-9+\/]{4})*(?:[A-Za-z0-9+\/]{2}==|[A-Za-z0-9+\/]{3}=)?$/", $row_hash))) {
            throw new \InvalidArgumentException("invalid value for $row_hash when calling FXCurrencyRatesQuery., must conform to the pattern /^(?:[A-Za-z0-9+\/]{4})*(?:[A-Za-z0-9+\/]{2}==|[A-Za-z0-9+\/]{3}=)?$/.");
        }

        $this->container['row_hash'] = $row_hash;

        return $this;
    }

    /**
     * Gets skip
     *
     * @return int
     */
    public function getSkip()
    {
        return $this->container['skip'];
    }

    /**
     * Sets skip
     *
     * @param int $skip skip
     *
     * @return $this
     */
    public function setSkip($skip)
    {
        $this->container['skip'] = $skip;

        return $this;
    }

    /**
     * Gets take
     *
     * @return int
     */
    public function getTake()
    {
        return $this->container['take'];
    }

    /**
     * Sets take
     *
     * @param int $take take
     *
     * @return $this
     */
    public function setTake($take)
    {
        $this->container['take'] = $take;

        return $this;
    }

    /**
     * Gets order_by
     *
     * @return string
     */
    public function getOrderBy()
    {
        return $this->container['order_by'];
    }

    /**
     * Sets order_by
     *
     * @param string $order_by order_by
     *
     * @return $this
     */
    public function setOrderBy($order_by)
    {
        $this->container['order_by'] = $order_by;

        return $this;
    }

    /**
     * Gets order_by_desc
     *
     * @return string
     */
    public function getOrderByDesc()
    {
        return $this->container['order_by_desc'];
    }

    /**
     * Sets order_by_desc
     *
     * @param string $order_by_desc order_by_desc
     *
     * @return $this
     */
    public function setOrderByDesc($order_by_desc)
    {
        $this->container['order_by_desc'] = $order_by_desc;

        return $this;
    }

    /**
     * Gets include
     *
     * @return string
     */
    public function getInclude()
    {
        return $this->container['include'];
    }

    /**
     * Sets include
     *
     * @param string $include include
     *
     * @return $this
     */
    public function setInclude($include)
    {
        $this->container['include'] = $include;

        return $this;
    }

    /**
     * Gets fields
     *
     * @return string
     */
    public function getFields()
    {
        return $this->container['fields'];
    }

    /**
     * Sets fields
     *
     * @param string $fields fields
     *
     * @return $this
     */
    public function setFields($fields)
    {
        $this->container['fields'] = $fields;

        return $this;
    }

    /**
     * Gets meta
     *
     * @return \Jiwa\JiwaModel\DictionaryStringString_
     */
    public function getMeta()
    {
        return $this->container['meta'];
    }

    /**
     * Sets meta
     *
     * @param \Jiwa\JiwaModel\DictionaryStringString_ $meta meta
     *
     * @return $this
     */
    public function setMeta($meta)
    {
        $this->container['meta'] = $meta;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(
                ObjectSerializer::sanitizeForSerialization($this),
                JSON_PRETTY_PRINT
            );
        }

        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}



<?php
/**
 * SYPlugin
 *
 * PHP version 5
 *
 * @category Class
 * @package  Jiwa
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * JiwaAPI
 *
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: 1.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 * Swagger Codegen version: 2.4.28-SNAPSHOT
 */

/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Jiwa\JiwaModel;

use \ArrayAccess;
use \Jiwa\ObjectSerializer;

/**
 * SYPlugin Class Doc Comment
 *
 * @category Class
 * @description SY_Plugin
 * @package  Jiwa
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class SYPlugin implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $swaggerModelName = 'SY_Plugin';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerTypes = [
        'rec_id' => 'string',
        'name' => 'string',
        'description' => 'string',
        'is_enabled' => 'bool',
        'execution_order' => 'int',
        'author' => 'string',
        'version' => 'string',
        'licence_key' => 'string',
        'view_password' => 'string',
        'edit_password' => 'string',
        'is_encrypted' => 'bool',
        'row_hash' => 'string',
        'code' => 'string',
        'exception_policy' => 'int',
        'is_isolated_to_own_app_domain' => 'bool',
        'file_hash' => 'string',
        'create_date_time' => '\DateTime',
        'last_write_date_time' => '\DateTime',
        'language' => 'int'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerFormats = [
        'rec_id' => null,
        'name' => null,
        'description' => null,
        'is_enabled' => null,
        'execution_order' => 'int32',
        'author' => null,
        'version' => null,
        'licence_key' => null,
        'view_password' => null,
        'edit_password' => null,
        'is_encrypted' => null,
        'row_hash' => 'binary',
        'code' => null,
        'exception_policy' => 'int32',
        'is_isolated_to_own_app_domain' => null,
        'file_hash' => null,
        'create_date_time' => 'date-time',
        'last_write_date_time' => 'date-time',
        'language' => 'int32'
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerFormats()
    {
        return self::$swaggerFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'rec_id' => 'RecID',
        'name' => 'Name',
        'description' => 'Description',
        'is_enabled' => 'IsEnabled',
        'execution_order' => 'ExecutionOrder',
        'author' => 'Author',
        'version' => 'Version',
        'licence_key' => 'LicenceKey',
        'view_password' => 'ViewPassword',
        'edit_password' => 'EditPassword',
        'is_encrypted' => 'IsEncrypted',
        'row_hash' => 'RowHash',
        'code' => 'Code',
        'exception_policy' => 'ExceptionPolicy',
        'is_isolated_to_own_app_domain' => 'IsIsolatedToOwnAppDomain',
        'file_hash' => 'FileHash',
        'create_date_time' => 'CreateDateTime',
        'last_write_date_time' => 'LastWriteDateTime',
        'language' => 'Language'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'rec_id' => 'setRecId',
        'name' => 'setName',
        'description' => 'setDescription',
        'is_enabled' => 'setIsEnabled',
        'execution_order' => 'setExecutionOrder',
        'author' => 'setAuthor',
        'version' => 'setVersion',
        'licence_key' => 'setLicenceKey',
        'view_password' => 'setViewPassword',
        'edit_password' => 'setEditPassword',
        'is_encrypted' => 'setIsEncrypted',
        'row_hash' => 'setRowHash',
        'code' => 'setCode',
        'exception_policy' => 'setExceptionPolicy',
        'is_isolated_to_own_app_domain' => 'setIsIsolatedToOwnAppDomain',
        'file_hash' => 'setFileHash',
        'create_date_time' => 'setCreateDateTime',
        'last_write_date_time' => 'setLastWriteDateTime',
        'language' => 'setLanguage'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'rec_id' => 'getRecId',
        'name' => 'getName',
        'description' => 'getDescription',
        'is_enabled' => 'getIsEnabled',
        'execution_order' => 'getExecutionOrder',
        'author' => 'getAuthor',
        'version' => 'getVersion',
        'licence_key' => 'getLicenceKey',
        'view_password' => 'getViewPassword',
        'edit_password' => 'getEditPassword',
        'is_encrypted' => 'getIsEncrypted',
        'row_hash' => 'getRowHash',
        'code' => 'getCode',
        'exception_policy' => 'getExceptionPolicy',
        'is_isolated_to_own_app_domain' => 'getIsIsolatedToOwnAppDomain',
        'file_hash' => 'getFileHash',
        'create_date_time' => 'getCreateDateTime',
        'last_write_date_time' => 'getLastWriteDateTime',
        'language' => 'getLanguage'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$swaggerModelName;
    }

    

    

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['rec_id'] = isset($data['rec_id']) ? $data['rec_id'] : null;
        $this->container['name'] = isset($data['name']) ? $data['name'] : null;
        $this->container['description'] = isset($data['description']) ? $data['description'] : null;
        $this->container['is_enabled'] = isset($data['is_enabled']) ? $data['is_enabled'] : null;
        $this->container['execution_order'] = isset($data['execution_order']) ? $data['execution_order'] : null;
        $this->container['author'] = isset($data['author']) ? $data['author'] : null;
        $this->container['version'] = isset($data['version']) ? $data['version'] : null;
        $this->container['licence_key'] = isset($data['licence_key']) ? $data['licence_key'] : null;
        $this->container['view_password'] = isset($data['view_password']) ? $data['view_password'] : null;
        $this->container['edit_password'] = isset($data['edit_password']) ? $data['edit_password'] : null;
        $this->container['is_encrypted'] = isset($data['is_encrypted']) ? $data['is_encrypted'] : null;
        $this->container['row_hash'] = isset($data['row_hash']) ? $data['row_hash'] : null;
        $this->container['code'] = isset($data['code']) ? $data['code'] : null;
        $this->container['exception_policy'] = isset($data['exception_policy']) ? $data['exception_policy'] : null;
        $this->container['is_isolated_to_own_app_domain'] = isset($data['is_isolated_to_own_app_domain']) ? $data['is_isolated_to_own_app_domain'] : null;
        $this->container['file_hash'] = isset($data['file_hash']) ? $data['file_hash'] : null;
        $this->container['create_date_time'] = isset($data['create_date_time']) ? $data['create_date_time'] : null;
        $this->container['last_write_date_time'] = isset($data['last_write_date_time']) ? $data['last_write_date_time'] : null;
        $this->container['language'] = isset($data['language']) ? $data['language'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets rec_id
     *
     * @return string
     */
    public function getRecId()
    {
        return $this->container['rec_id'];
    }

    /**
     * Sets rec_id
     *
     * @param string $rec_id rec_id
     *
     * @return $this
     */
    public function setRecId($rec_id)
    {
        $this->container['rec_id'] = $rec_id;

        return $this;
    }

    /**
     * Gets name
     *
     * @return string
     */
    public function getName()
    {
        return $this->container['name'];
    }

    /**
     * Sets name
     *
     * @param string $name name
     *
     * @return $this
     */
    public function setName($name)
    {
        $this->container['name'] = $name;

        return $this;
    }

    /**
     * Gets description
     *
     * @return string
     */
    public function getDescription()
    {
        return $this->container['description'];
    }

    /**
     * Sets description
     *
     * @param string $description description
     *
     * @return $this
     */
    public function setDescription($description)
    {
        $this->container['description'] = $description;

        return $this;
    }

    /**
     * Gets is_enabled
     *
     * @return bool
     */
    public function getIsEnabled()
    {
        return $this->container['is_enabled'];
    }

    /**
     * Sets is_enabled
     *
     * @param bool $is_enabled is_enabled
     *
     * @return $this
     */
    public function setIsEnabled($is_enabled)
    {
        $this->container['is_enabled'] = $is_enabled;

        return $this;
    }

    /**
     * Gets execution_order
     *
     * @return int
     */
    public function getExecutionOrder()
    {
        return $this->container['execution_order'];
    }

    /**
     * Sets execution_order
     *
     * @param int $execution_order execution_order
     *
     * @return $this
     */
    public function setExecutionOrder($execution_order)
    {
        $this->container['execution_order'] = $execution_order;

        return $this;
    }

    /**
     * Gets author
     *
     * @return string
     */
    public function getAuthor()
    {
        return $this->container['author'];
    }

    /**
     * Sets author
     *
     * @param string $author author
     *
     * @return $this
     */
    public function setAuthor($author)
    {
        $this->container['author'] = $author;

        return $this;
    }

    /**
     * Gets version
     *
     * @return string
     */
    public function getVersion()
    {
        return $this->container['version'];
    }

    /**
     * Sets version
     *
     * @param string $version version
     *
     * @return $this
     */
    public function setVersion($version)
    {
        $this->container['version'] = $version;

        return $this;
    }

    /**
     * Gets licence_key
     *
     * @return string
     */
    public function getLicenceKey()
    {
        return $this->container['licence_key'];
    }

    /**
     * Sets licence_key
     *
     * @param string $licence_key licence_key
     *
     * @return $this
     */
    public function setLicenceKey($licence_key)
    {
        $this->container['licence_key'] = $licence_key;

        return $this;
    }

    /**
     * Gets view_password
     *
     * @return string
     */
    public function getViewPassword()
    {
        return $this->container['view_password'];
    }

    /**
     * Sets view_password
     *
     * @param string $view_password view_password
     *
     * @return $this
     */
    public function setViewPassword($view_password)
    {
        $this->container['view_password'] = $view_password;

        return $this;
    }

    /**
     * Gets edit_password
     *
     * @return string
     */
    public function getEditPassword()
    {
        return $this->container['edit_password'];
    }

    /**
     * Sets edit_password
     *
     * @param string $edit_password edit_password
     *
     * @return $this
     */
    public function setEditPassword($edit_password)
    {
        $this->container['edit_password'] = $edit_password;

        return $this;
    }

    /**
     * Gets is_encrypted
     *
     * @return bool
     */
    public function getIsEncrypted()
    {
        return $this->container['is_encrypted'];
    }

    /**
     * Sets is_encrypted
     *
     * @param bool $is_encrypted is_encrypted
     *
     * @return $this
     */
    public function setIsEncrypted($is_encrypted)
    {
        $this->container['is_encrypted'] = $is_encrypted;

        return $this;
    }

    /**
     * Gets row_hash
     *
     * @return string
     */
    public function getRowHash()
    {
        return $this->container['row_hash'];
    }

    /**
     * Sets row_hash
     *
     * @param string $row_hash row_hash
     *
     * @return $this
     */
    public function setRowHash($row_hash)
    {
        $this->container['row_hash'] = $row_hash;

        return $this;
    }

    /**
     * Gets code
     *
     * @return string
     */
    public function getCode()
    {
        return $this->container['code'];
    }

    /**
     * Sets code
     *
     * @param string $code code
     *
     * @return $this
     */
    public function setCode($code)
    {
        $this->container['code'] = $code;

        return $this;
    }

    /**
     * Gets exception_policy
     *
     * @return int
     */
    public function getExceptionPolicy()
    {
        return $this->container['exception_policy'];
    }

    /**
     * Sets exception_policy
     *
     * @param int $exception_policy exception_policy
     *
     * @return $this
     */
    public function setExceptionPolicy($exception_policy)
    {
        $this->container['exception_policy'] = $exception_policy;

        return $this;
    }

    /**
     * Gets is_isolated_to_own_app_domain
     *
     * @return bool
     */
    public function getIsIsolatedToOwnAppDomain()
    {
        return $this->container['is_isolated_to_own_app_domain'];
    }

    /**
     * Sets is_isolated_to_own_app_domain
     *
     * @param bool $is_isolated_to_own_app_domain is_isolated_to_own_app_domain
     *
     * @return $this
     */
    public function setIsIsolatedToOwnAppDomain($is_isolated_to_own_app_domain)
    {
        $this->container['is_isolated_to_own_app_domain'] = $is_isolated_to_own_app_domain;

        return $this;
    }

    /**
     * Gets file_hash
     *
     * @return string
     */
    public function getFileHash()
    {
        return $this->container['file_hash'];
    }

    /**
     * Sets file_hash
     *
     * @param string $file_hash file_hash
     *
     * @return $this
     */
    public function setFileHash($file_hash)
    {
        $this->container['file_hash'] = $file_hash;

        return $this;
    }

    /**
     * Gets create_date_time
     *
     * @return \DateTime
     */
    public function getCreateDateTime()
    {
        return $this->container['create_date_time'];
    }

    /**
     * Sets create_date_time
     *
     * @param \DateTime $create_date_time create_date_time
     *
     * @return $this
     */
    public function setCreateDateTime($create_date_time)
    {
        $this->container['create_date_time'] = $create_date_time;

        return $this;
    }

    /**
     * Gets last_write_date_time
     *
     * @return \DateTime
     */
    public function getLastWriteDateTime()
    {
        return $this->container['last_write_date_time'];
    }

    /**
     * Sets last_write_date_time
     *
     * @param \DateTime $last_write_date_time last_write_date_time
     *
     * @return $this
     */
    public function setLastWriteDateTime($last_write_date_time)
    {
        $this->container['last_write_date_time'] = $last_write_date_time;

        return $this;
    }

    /**
     * Gets language
     *
     * @return int
     */
    public function getLanguage()
    {
        return $this->container['language'];
    }

    /**
     * Sets language
     *
     * @param int $language language
     *
     * @return $this
     */
    public function setLanguage($language)
    {
        $this->container['language'] = $language;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(
                ObjectSerializer::sanitizeForSerialization($this),
                JSON_PRETTY_PRINT
            );
        }

        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}



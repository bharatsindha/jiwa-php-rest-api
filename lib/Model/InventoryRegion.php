<?php
/**
 * InventoryRegion
 *
 * PHP version 5
 *
 * @category Class
 * @package  Jiwa
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * JiwaAPI
 *
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: 1.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 * Swagger Codegen version: 2.4.28-SNAPSHOT
 */

/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Jiwa\JiwaModel;

use \ArrayAccess;
use \Jiwa\ObjectSerializer;

/**
 * InventoryRegion Class Doc Comment
 *
 * @category Class
 * @description InventoryRegion
 * @package  Jiwa
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class InventoryRegion implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $swaggerModelName = 'InventoryRegion';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerTypes = [
        'region_supplier_ordering_id' => 'string',
        'order_enabled' => 'bool',
        'region_id' => 'string',
        'region_name' => 'string',
        'suppliers' => '\Jiwa\JiwaModel\InventorySupplier[]'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerFormats = [
        'region_supplier_ordering_id' => null,
        'order_enabled' => null,
        'region_id' => null,
        'region_name' => null,
        'suppliers' => null
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerFormats()
    {
        return self::$swaggerFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'region_supplier_ordering_id' => 'RegionSupplierOrderingID',
        'order_enabled' => 'OrderEnabled',
        'region_id' => 'RegionID',
        'region_name' => 'RegionName',
        'suppliers' => 'Suppliers'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'region_supplier_ordering_id' => 'setRegionSupplierOrderingId',
        'order_enabled' => 'setOrderEnabled',
        'region_id' => 'setRegionId',
        'region_name' => 'setRegionName',
        'suppliers' => 'setSuppliers'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'region_supplier_ordering_id' => 'getRegionSupplierOrderingId',
        'order_enabled' => 'getOrderEnabled',
        'region_id' => 'getRegionId',
        'region_name' => 'getRegionName',
        'suppliers' => 'getSuppliers'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$swaggerModelName;
    }

    

    

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['region_supplier_ordering_id'] = isset($data['region_supplier_ordering_id']) ? $data['region_supplier_ordering_id'] : null;
        $this->container['order_enabled'] = isset($data['order_enabled']) ? $data['order_enabled'] : null;
        $this->container['region_id'] = isset($data['region_id']) ? $data['region_id'] : null;
        $this->container['region_name'] = isset($data['region_name']) ? $data['region_name'] : null;
        $this->container['suppliers'] = isset($data['suppliers']) ? $data['suppliers'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets region_supplier_ordering_id
     *
     * @return string
     */
    public function getRegionSupplierOrderingId()
    {
        return $this->container['region_supplier_ordering_id'];
    }

    /**
     * Sets region_supplier_ordering_id
     *
     * @param string $region_supplier_ordering_id region_supplier_ordering_id
     *
     * @return $this
     */
    public function setRegionSupplierOrderingId($region_supplier_ordering_id)
    {
        $this->container['region_supplier_ordering_id'] = $region_supplier_ordering_id;

        return $this;
    }

    /**
     * Gets order_enabled
     *
     * @return bool
     */
    public function getOrderEnabled()
    {
        return $this->container['order_enabled'];
    }

    /**
     * Sets order_enabled
     *
     * @param bool $order_enabled order_enabled
     *
     * @return $this
     */
    public function setOrderEnabled($order_enabled)
    {
        $this->container['order_enabled'] = $order_enabled;

        return $this;
    }

    /**
     * Gets region_id
     *
     * @return string
     */
    public function getRegionId()
    {
        return $this->container['region_id'];
    }

    /**
     * Sets region_id
     *
     * @param string $region_id region_id
     *
     * @return $this
     */
    public function setRegionId($region_id)
    {
        $this->container['region_id'] = $region_id;

        return $this;
    }

    /**
     * Gets region_name
     *
     * @return string
     */
    public function getRegionName()
    {
        return $this->container['region_name'];
    }

    /**
     * Sets region_name
     *
     * @param string $region_name region_name
     *
     * @return $this
     */
    public function setRegionName($region_name)
    {
        $this->container['region_name'] = $region_name;

        return $this;
    }

    /**
     * Gets suppliers
     *
     * @return \Jiwa\JiwaModel\InventorySupplier[]
     */
    public function getSuppliers()
    {
        return $this->container['suppliers'];
    }

    /**
     * Sets suppliers
     *
     * @param \Jiwa\JiwaModel\InventorySupplier[] $suppliers suppliers
     *
     * @return $this
     */
    public function setSuppliers($suppliers)
    {
        $this->container['suppliers'] = $suppliers;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(
                ObjectSerializer::sanitizeForSerialization($this),
                JSON_PRETTY_PRINT
            );
        }

        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}



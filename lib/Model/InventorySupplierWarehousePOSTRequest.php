<?php
/**
 * InventorySupplierWarehousePOSTRequest
 *
 * PHP version 5
 *
 * @category Class
 * @package  Jiwa
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * JiwaAPI
 *
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: 1.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 * Swagger Codegen version: 2.4.28-SNAPSHOT
 */

/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Jiwa\JiwaModel;

use \ArrayAccess;
use \Jiwa\ObjectSerializer;

/**
 * InventorySupplierWarehousePOSTRequest Class Doc Comment
 *
 * @category Class
 * @description InventorySupplierWarehousePOSTRequest
 * @package  Jiwa
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class InventorySupplierWarehousePOSTRequest implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $swaggerModelName = 'InventorySupplierWarehousePOSTRequest';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerTypes = [
        'inventory_id' => 'string',
        'region_name' => 'string',
        'supplier_id' => 'string',
        'default_warehouse' => 'bool',
        'home_suppliers_cost' => 'double',
        'suppliers_cost' => 'double',
        'suppliers_cost2' => 'double',
        'home_suppliers_cost2' => 'double',
        'supplier_soh' => 'double',
        'delivery_days' => 'int',
        'spare_float1' => 'double',
        'spare_float2' => 'double',
        'spare_float3' => 'double',
        'spare_date1' => '\DateTime',
        'spare_date2' => '\DateTime',
        'spare_date3' => '\DateTime',
        'creditor_warehouse_id' => 'string',
        'creditor_warehouse_description' => 'string',
        'spare_string1' => 'string',
        'spare_string2' => 'string',
        'spare_string3' => 'string',
        'custom_field_values' => '\Jiwa\JiwaModel\CustomFieldValue[]',
        'unit_of_measure' => '\Jiwa\JiwaModel\InventoryUnitOfMeasure'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerFormats = [
        'inventory_id' => null,
        'region_name' => null,
        'supplier_id' => null,
        'default_warehouse' => null,
        'home_suppliers_cost' => 'double',
        'suppliers_cost' => 'double',
        'suppliers_cost2' => 'double',
        'home_suppliers_cost2' => 'double',
        'supplier_soh' => 'double',
        'delivery_days' => 'int32',
        'spare_float1' => 'double',
        'spare_float2' => 'double',
        'spare_float3' => 'double',
        'spare_date1' => 'date-time',
        'spare_date2' => 'date-time',
        'spare_date3' => 'date-time',
        'creditor_warehouse_id' => null,
        'creditor_warehouse_description' => null,
        'spare_string1' => null,
        'spare_string2' => null,
        'spare_string3' => null,
        'custom_field_values' => null,
        'unit_of_measure' => null
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerFormats()
    {
        return self::$swaggerFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'inventory_id' => 'InventoryID',
        'region_name' => 'RegionName',
        'supplier_id' => 'SupplierID',
        'default_warehouse' => 'DefaultWarehouse',
        'home_suppliers_cost' => 'HomeSuppliersCost',
        'suppliers_cost' => 'SuppliersCost',
        'suppliers_cost2' => 'SuppliersCost2',
        'home_suppliers_cost2' => 'HomeSuppliersCost2',
        'supplier_soh' => 'SupplierSOH',
        'delivery_days' => 'DeliveryDays',
        'spare_float1' => 'SpareFloat1',
        'spare_float2' => 'SpareFloat2',
        'spare_float3' => 'SpareFloat3',
        'spare_date1' => 'SpareDate1',
        'spare_date2' => 'SpareDate2',
        'spare_date3' => 'SpareDate3',
        'creditor_warehouse_id' => 'CreditorWarehouseID',
        'creditor_warehouse_description' => 'CreditorWarehouseDescription',
        'spare_string1' => 'SpareString1',
        'spare_string2' => 'SpareString2',
        'spare_string3' => 'SpareString3',
        'custom_field_values' => 'CustomFieldValues',
        'unit_of_measure' => 'UnitOfMeasure'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'inventory_id' => 'setInventoryId',
        'region_name' => 'setRegionName',
        'supplier_id' => 'setSupplierId',
        'default_warehouse' => 'setDefaultWarehouse',
        'home_suppliers_cost' => 'setHomeSuppliersCost',
        'suppliers_cost' => 'setSuppliersCost',
        'suppliers_cost2' => 'setSuppliersCost2',
        'home_suppliers_cost2' => 'setHomeSuppliersCost2',
        'supplier_soh' => 'setSupplierSoh',
        'delivery_days' => 'setDeliveryDays',
        'spare_float1' => 'setSpareFloat1',
        'spare_float2' => 'setSpareFloat2',
        'spare_float3' => 'setSpareFloat3',
        'spare_date1' => 'setSpareDate1',
        'spare_date2' => 'setSpareDate2',
        'spare_date3' => 'setSpareDate3',
        'creditor_warehouse_id' => 'setCreditorWarehouseId',
        'creditor_warehouse_description' => 'setCreditorWarehouseDescription',
        'spare_string1' => 'setSpareString1',
        'spare_string2' => 'setSpareString2',
        'spare_string3' => 'setSpareString3',
        'custom_field_values' => 'setCustomFieldValues',
        'unit_of_measure' => 'setUnitOfMeasure'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'inventory_id' => 'getInventoryId',
        'region_name' => 'getRegionName',
        'supplier_id' => 'getSupplierId',
        'default_warehouse' => 'getDefaultWarehouse',
        'home_suppliers_cost' => 'getHomeSuppliersCost',
        'suppliers_cost' => 'getSuppliersCost',
        'suppliers_cost2' => 'getSuppliersCost2',
        'home_suppliers_cost2' => 'getHomeSuppliersCost2',
        'supplier_soh' => 'getSupplierSoh',
        'delivery_days' => 'getDeliveryDays',
        'spare_float1' => 'getSpareFloat1',
        'spare_float2' => 'getSpareFloat2',
        'spare_float3' => 'getSpareFloat3',
        'spare_date1' => 'getSpareDate1',
        'spare_date2' => 'getSpareDate2',
        'spare_date3' => 'getSpareDate3',
        'creditor_warehouse_id' => 'getCreditorWarehouseId',
        'creditor_warehouse_description' => 'getCreditorWarehouseDescription',
        'spare_string1' => 'getSpareString1',
        'spare_string2' => 'getSpareString2',
        'spare_string3' => 'getSpareString3',
        'custom_field_values' => 'getCustomFieldValues',
        'unit_of_measure' => 'getUnitOfMeasure'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$swaggerModelName;
    }

    

    

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['inventory_id'] = isset($data['inventory_id']) ? $data['inventory_id'] : null;
        $this->container['region_name'] = isset($data['region_name']) ? $data['region_name'] : null;
        $this->container['supplier_id'] = isset($data['supplier_id']) ? $data['supplier_id'] : null;
        $this->container['default_warehouse'] = isset($data['default_warehouse']) ? $data['default_warehouse'] : null;
        $this->container['home_suppliers_cost'] = isset($data['home_suppliers_cost']) ? $data['home_suppliers_cost'] : null;
        $this->container['suppliers_cost'] = isset($data['suppliers_cost']) ? $data['suppliers_cost'] : null;
        $this->container['suppliers_cost2'] = isset($data['suppliers_cost2']) ? $data['suppliers_cost2'] : null;
        $this->container['home_suppliers_cost2'] = isset($data['home_suppliers_cost2']) ? $data['home_suppliers_cost2'] : null;
        $this->container['supplier_soh'] = isset($data['supplier_soh']) ? $data['supplier_soh'] : null;
        $this->container['delivery_days'] = isset($data['delivery_days']) ? $data['delivery_days'] : null;
        $this->container['spare_float1'] = isset($data['spare_float1']) ? $data['spare_float1'] : null;
        $this->container['spare_float2'] = isset($data['spare_float2']) ? $data['spare_float2'] : null;
        $this->container['spare_float3'] = isset($data['spare_float3']) ? $data['spare_float3'] : null;
        $this->container['spare_date1'] = isset($data['spare_date1']) ? $data['spare_date1'] : null;
        $this->container['spare_date2'] = isset($data['spare_date2']) ? $data['spare_date2'] : null;
        $this->container['spare_date3'] = isset($data['spare_date3']) ? $data['spare_date3'] : null;
        $this->container['creditor_warehouse_id'] = isset($data['creditor_warehouse_id']) ? $data['creditor_warehouse_id'] : null;
        $this->container['creditor_warehouse_description'] = isset($data['creditor_warehouse_description']) ? $data['creditor_warehouse_description'] : null;
        $this->container['spare_string1'] = isset($data['spare_string1']) ? $data['spare_string1'] : null;
        $this->container['spare_string2'] = isset($data['spare_string2']) ? $data['spare_string2'] : null;
        $this->container['spare_string3'] = isset($data['spare_string3']) ? $data['spare_string3'] : null;
        $this->container['custom_field_values'] = isset($data['custom_field_values']) ? $data['custom_field_values'] : null;
        $this->container['unit_of_measure'] = isset($data['unit_of_measure']) ? $data['unit_of_measure'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets inventory_id
     *
     * @return string
     */
    public function getInventoryId()
    {
        return $this->container['inventory_id'];
    }

    /**
     * Sets inventory_id
     *
     * @param string $inventory_id inventory_id
     *
     * @return $this
     */
    public function setInventoryId($inventory_id)
    {
        $this->container['inventory_id'] = $inventory_id;

        return $this;
    }

    /**
     * Gets region_name
     *
     * @return string
     */
    public function getRegionName()
    {
        return $this->container['region_name'];
    }

    /**
     * Sets region_name
     *
     * @param string $region_name region_name
     *
     * @return $this
     */
    public function setRegionName($region_name)
    {
        $this->container['region_name'] = $region_name;

        return $this;
    }

    /**
     * Gets supplier_id
     *
     * @return string
     */
    public function getSupplierId()
    {
        return $this->container['supplier_id'];
    }

    /**
     * Sets supplier_id
     *
     * @param string $supplier_id supplier_id
     *
     * @return $this
     */
    public function setSupplierId($supplier_id)
    {
        $this->container['supplier_id'] = $supplier_id;

        return $this;
    }

    /**
     * Gets default_warehouse
     *
     * @return bool
     */
    public function getDefaultWarehouse()
    {
        return $this->container['default_warehouse'];
    }

    /**
     * Sets default_warehouse
     *
     * @param bool $default_warehouse default_warehouse
     *
     * @return $this
     */
    public function setDefaultWarehouse($default_warehouse)
    {
        $this->container['default_warehouse'] = $default_warehouse;

        return $this;
    }

    /**
     * Gets home_suppliers_cost
     *
     * @return double
     */
    public function getHomeSuppliersCost()
    {
        return $this->container['home_suppliers_cost'];
    }

    /**
     * Sets home_suppliers_cost
     *
     * @param double $home_suppliers_cost home_suppliers_cost
     *
     * @return $this
     */
    public function setHomeSuppliersCost($home_suppliers_cost)
    {
        $this->container['home_suppliers_cost'] = $home_suppliers_cost;

        return $this;
    }

    /**
     * Gets suppliers_cost
     *
     * @return double
     */
    public function getSuppliersCost()
    {
        return $this->container['suppliers_cost'];
    }

    /**
     * Sets suppliers_cost
     *
     * @param double $suppliers_cost suppliers_cost
     *
     * @return $this
     */
    public function setSuppliersCost($suppliers_cost)
    {
        $this->container['suppliers_cost'] = $suppliers_cost;

        return $this;
    }

    /**
     * Gets suppliers_cost2
     *
     * @return double
     */
    public function getSuppliersCost2()
    {
        return $this->container['suppliers_cost2'];
    }

    /**
     * Sets suppliers_cost2
     *
     * @param double $suppliers_cost2 suppliers_cost2
     *
     * @return $this
     */
    public function setSuppliersCost2($suppliers_cost2)
    {
        $this->container['suppliers_cost2'] = $suppliers_cost2;

        return $this;
    }

    /**
     * Gets home_suppliers_cost2
     *
     * @return double
     */
    public function getHomeSuppliersCost2()
    {
        return $this->container['home_suppliers_cost2'];
    }

    /**
     * Sets home_suppliers_cost2
     *
     * @param double $home_suppliers_cost2 home_suppliers_cost2
     *
     * @return $this
     */
    public function setHomeSuppliersCost2($home_suppliers_cost2)
    {
        $this->container['home_suppliers_cost2'] = $home_suppliers_cost2;

        return $this;
    }

    /**
     * Gets supplier_soh
     *
     * @return double
     */
    public function getSupplierSoh()
    {
        return $this->container['supplier_soh'];
    }

    /**
     * Sets supplier_soh
     *
     * @param double $supplier_soh supplier_soh
     *
     * @return $this
     */
    public function setSupplierSoh($supplier_soh)
    {
        $this->container['supplier_soh'] = $supplier_soh;

        return $this;
    }

    /**
     * Gets delivery_days
     *
     * @return int
     */
    public function getDeliveryDays()
    {
        return $this->container['delivery_days'];
    }

    /**
     * Sets delivery_days
     *
     * @param int $delivery_days delivery_days
     *
     * @return $this
     */
    public function setDeliveryDays($delivery_days)
    {
        $this->container['delivery_days'] = $delivery_days;

        return $this;
    }

    /**
     * Gets spare_float1
     *
     * @return double
     */
    public function getSpareFloat1()
    {
        return $this->container['spare_float1'];
    }

    /**
     * Sets spare_float1
     *
     * @param double $spare_float1 spare_float1
     *
     * @return $this
     */
    public function setSpareFloat1($spare_float1)
    {
        $this->container['spare_float1'] = $spare_float1;

        return $this;
    }

    /**
     * Gets spare_float2
     *
     * @return double
     */
    public function getSpareFloat2()
    {
        return $this->container['spare_float2'];
    }

    /**
     * Sets spare_float2
     *
     * @param double $spare_float2 spare_float2
     *
     * @return $this
     */
    public function setSpareFloat2($spare_float2)
    {
        $this->container['spare_float2'] = $spare_float2;

        return $this;
    }

    /**
     * Gets spare_float3
     *
     * @return double
     */
    public function getSpareFloat3()
    {
        return $this->container['spare_float3'];
    }

    /**
     * Sets spare_float3
     *
     * @param double $spare_float3 spare_float3
     *
     * @return $this
     */
    public function setSpareFloat3($spare_float3)
    {
        $this->container['spare_float3'] = $spare_float3;

        return $this;
    }

    /**
     * Gets spare_date1
     *
     * @return \DateTime
     */
    public function getSpareDate1()
    {
        return $this->container['spare_date1'];
    }

    /**
     * Sets spare_date1
     *
     * @param \DateTime $spare_date1 spare_date1
     *
     * @return $this
     */
    public function setSpareDate1($spare_date1)
    {
        $this->container['spare_date1'] = $spare_date1;

        return $this;
    }

    /**
     * Gets spare_date2
     *
     * @return \DateTime
     */
    public function getSpareDate2()
    {
        return $this->container['spare_date2'];
    }

    /**
     * Sets spare_date2
     *
     * @param \DateTime $spare_date2 spare_date2
     *
     * @return $this
     */
    public function setSpareDate2($spare_date2)
    {
        $this->container['spare_date2'] = $spare_date2;

        return $this;
    }

    /**
     * Gets spare_date3
     *
     * @return \DateTime
     */
    public function getSpareDate3()
    {
        return $this->container['spare_date3'];
    }

    /**
     * Sets spare_date3
     *
     * @param \DateTime $spare_date3 spare_date3
     *
     * @return $this
     */
    public function setSpareDate3($spare_date3)
    {
        $this->container['spare_date3'] = $spare_date3;

        return $this;
    }

    /**
     * Gets creditor_warehouse_id
     *
     * @return string
     */
    public function getCreditorWarehouseId()
    {
        return $this->container['creditor_warehouse_id'];
    }

    /**
     * Sets creditor_warehouse_id
     *
     * @param string $creditor_warehouse_id creditor_warehouse_id
     *
     * @return $this
     */
    public function setCreditorWarehouseId($creditor_warehouse_id)
    {
        $this->container['creditor_warehouse_id'] = $creditor_warehouse_id;

        return $this;
    }

    /**
     * Gets creditor_warehouse_description
     *
     * @return string
     */
    public function getCreditorWarehouseDescription()
    {
        return $this->container['creditor_warehouse_description'];
    }

    /**
     * Sets creditor_warehouse_description
     *
     * @param string $creditor_warehouse_description creditor_warehouse_description
     *
     * @return $this
     */
    public function setCreditorWarehouseDescription($creditor_warehouse_description)
    {
        $this->container['creditor_warehouse_description'] = $creditor_warehouse_description;

        return $this;
    }

    /**
     * Gets spare_string1
     *
     * @return string
     */
    public function getSpareString1()
    {
        return $this->container['spare_string1'];
    }

    /**
     * Sets spare_string1
     *
     * @param string $spare_string1 spare_string1
     *
     * @return $this
     */
    public function setSpareString1($spare_string1)
    {
        $this->container['spare_string1'] = $spare_string1;

        return $this;
    }

    /**
     * Gets spare_string2
     *
     * @return string
     */
    public function getSpareString2()
    {
        return $this->container['spare_string2'];
    }

    /**
     * Sets spare_string2
     *
     * @param string $spare_string2 spare_string2
     *
     * @return $this
     */
    public function setSpareString2($spare_string2)
    {
        $this->container['spare_string2'] = $spare_string2;

        return $this;
    }

    /**
     * Gets spare_string3
     *
     * @return string
     */
    public function getSpareString3()
    {
        return $this->container['spare_string3'];
    }

    /**
     * Sets spare_string3
     *
     * @param string $spare_string3 spare_string3
     *
     * @return $this
     */
    public function setSpareString3($spare_string3)
    {
        $this->container['spare_string3'] = $spare_string3;

        return $this;
    }

    /**
     * Gets custom_field_values
     *
     * @return \Jiwa\JiwaModel\CustomFieldValue[]
     */
    public function getCustomFieldValues()
    {
        return $this->container['custom_field_values'];
    }

    /**
     * Sets custom_field_values
     *
     * @param \Jiwa\JiwaModel\CustomFieldValue[] $custom_field_values custom_field_values
     *
     * @return $this
     */
    public function setCustomFieldValues($custom_field_values)
    {
        $this->container['custom_field_values'] = $custom_field_values;

        return $this;
    }

    /**
     * Gets unit_of_measure
     *
     * @return \Jiwa\JiwaModel\InventoryUnitOfMeasure
     */
    public function getUnitOfMeasure()
    {
        return $this->container['unit_of_measure'];
    }

    /**
     * Sets unit_of_measure
     *
     * @param \Jiwa\JiwaModel\InventoryUnitOfMeasure $unit_of_measure unit_of_measure
     *
     * @return $this
     */
    public function setUnitOfMeasure($unit_of_measure)
    {
        $this->container['unit_of_measure'] = $unit_of_measure;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(
                ObjectSerializer::sanitizeForSerialization($this),
                JSON_PRETTY_PRINT
            );
        }

        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}



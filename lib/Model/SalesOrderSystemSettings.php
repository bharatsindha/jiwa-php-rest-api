<?php
/**
 * SalesOrderSystemSettings
 *
 * PHP version 5
 *
 * @category Class
 * @package  Jiwa
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * JiwaAPI
 *
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: 1.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 * Swagger Codegen version: 2.4.28-SNAPSHOT
 */

/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Jiwa\JiwaModel;

use \ArrayAccess;
use \Jiwa\ObjectSerializer;

/**
 * SalesOrderSystemSettings Class Doc Comment
 *
 * @category Class
 * @description SalesOrderSystemSettings
 * @package  Jiwa
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class SalesOrderSystemSettings implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $swaggerModelName = 'SalesOrderSystemSettings';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerTypes = [
        'force_inventory_selection' => 'bool',
        'suppress_line_retotalling' => 'bool',
        'ignore_debtor_on_hold' => 'bool',
        'compensate_tax_rounding' => 'bool'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerFormats = [
        'force_inventory_selection' => null,
        'suppress_line_retotalling' => null,
        'ignore_debtor_on_hold' => null,
        'compensate_tax_rounding' => null
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerFormats()
    {
        return self::$swaggerFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'force_inventory_selection' => 'ForceInventorySelection',
        'suppress_line_retotalling' => 'SuppressLineRetotalling',
        'ignore_debtor_on_hold' => 'IgnoreDebtorOnHold',
        'compensate_tax_rounding' => 'CompensateTaxRounding'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'force_inventory_selection' => 'setForceInventorySelection',
        'suppress_line_retotalling' => 'setSuppressLineRetotalling',
        'ignore_debtor_on_hold' => 'setIgnoreDebtorOnHold',
        'compensate_tax_rounding' => 'setCompensateTaxRounding'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'force_inventory_selection' => 'getForceInventorySelection',
        'suppress_line_retotalling' => 'getSuppressLineRetotalling',
        'ignore_debtor_on_hold' => 'getIgnoreDebtorOnHold',
        'compensate_tax_rounding' => 'getCompensateTaxRounding'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$swaggerModelName;
    }

    

    

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['force_inventory_selection'] = isset($data['force_inventory_selection']) ? $data['force_inventory_selection'] : null;
        $this->container['suppress_line_retotalling'] = isset($data['suppress_line_retotalling']) ? $data['suppress_line_retotalling'] : null;
        $this->container['ignore_debtor_on_hold'] = isset($data['ignore_debtor_on_hold']) ? $data['ignore_debtor_on_hold'] : null;
        $this->container['compensate_tax_rounding'] = isset($data['compensate_tax_rounding']) ? $data['compensate_tax_rounding'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets force_inventory_selection
     *
     * @return bool
     */
    public function getForceInventorySelection()
    {
        return $this->container['force_inventory_selection'];
    }

    /**
     * Sets force_inventory_selection
     *
     * @param bool $force_inventory_selection force_inventory_selection
     *
     * @return $this
     */
    public function setForceInventorySelection($force_inventory_selection)
    {
        $this->container['force_inventory_selection'] = $force_inventory_selection;

        return $this;
    }

    /**
     * Gets suppress_line_retotalling
     *
     * @return bool
     */
    public function getSuppressLineRetotalling()
    {
        return $this->container['suppress_line_retotalling'];
    }

    /**
     * Sets suppress_line_retotalling
     *
     * @param bool $suppress_line_retotalling suppress_line_retotalling
     *
     * @return $this
     */
    public function setSuppressLineRetotalling($suppress_line_retotalling)
    {
        $this->container['suppress_line_retotalling'] = $suppress_line_retotalling;

        return $this;
    }

    /**
     * Gets ignore_debtor_on_hold
     *
     * @return bool
     */
    public function getIgnoreDebtorOnHold()
    {
        return $this->container['ignore_debtor_on_hold'];
    }

    /**
     * Sets ignore_debtor_on_hold
     *
     * @param bool $ignore_debtor_on_hold ignore_debtor_on_hold
     *
     * @return $this
     */
    public function setIgnoreDebtorOnHold($ignore_debtor_on_hold)
    {
        $this->container['ignore_debtor_on_hold'] = $ignore_debtor_on_hold;

        return $this;
    }

    /**
     * Gets compensate_tax_rounding
     *
     * @return bool
     */
    public function getCompensateTaxRounding()
    {
        return $this->container['compensate_tax_rounding'];
    }

    /**
     * Sets compensate_tax_rounding
     *
     * @param bool $compensate_tax_rounding compensate_tax_rounding
     *
     * @return $this
     */
    public function setCompensateTaxRounding($compensate_tax_rounding)
    {
        $this->container['compensate_tax_rounding'] = $compensate_tax_rounding;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(
                ObjectSerializer::sanitizeForSerialization($this),
                JSON_PRETTY_PRINT
            );
        }

        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}



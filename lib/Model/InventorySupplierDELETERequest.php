<?php
/**
 * InventorySupplierDELETERequest
 *
 * PHP version 5
 *
 * @category Class
 * @package  Jiwa
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * JiwaAPI
 *
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: 1.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 * Swagger Codegen version: 2.4.28-SNAPSHOT
 */

/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Jiwa\Model;

use \ArrayAccess;
use \Jiwa\ObjectSerializer;

/**
 * InventorySupplierDELETERequest Class Doc Comment
 *
 * @category Class
 * @description InventorySupplierDELETERequest
 * @package  Jiwa
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class InventorySupplierDELETERequest implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $swaggerModelName = 'InventorySupplierDELETERequest';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerTypes = [
        'inventory_id' => 'string',
        'region_name' => 'string',
        'supplier_id' => 'string',
        'fx_rate' => 'double',
        'default_supplier' => 'bool',
        'spare_float1' => 'double',
        'spare_float2' => 'double',
        'spare_float3' => 'double',
        'spare_date1' => '\DateTime',
        'spare_date2' => '\DateTime',
        'spare_date3' => '\DateTime',
        'creditor_id' => 'string',
        'creditor_account_no' => 'string',
        'creditor_name' => 'string',
        'supplier_part_no' => 'string',
        'supplier_upc' => 'string',
        'spare_string1' => 'string',
        'spare_string2' => 'string',
        'spare_string3' => 'string',
        'custom_field_values' => '\Jiwa\Model\CustomFieldValue[]',
        'supplier_warehouses' => '\Jiwa\Model\InventorySupplierWarehouse[]',
        'supplier_quantity_price_breaks' => '\Jiwa\Model\InventorySupplierQuantityPriceBreak[]'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerFormats = [
        'inventory_id' => null,
        'region_name' => null,
        'supplier_id' => null,
        'fx_rate' => 'double',
        'default_supplier' => null,
        'spare_float1' => 'double',
        'spare_float2' => 'double',
        'spare_float3' => 'double',
        'spare_date1' => 'date-time',
        'spare_date2' => 'date-time',
        'spare_date3' => 'date-time',
        'creditor_id' => null,
        'creditor_account_no' => null,
        'creditor_name' => null,
        'supplier_part_no' => null,
        'supplier_upc' => null,
        'spare_string1' => null,
        'spare_string2' => null,
        'spare_string3' => null,
        'custom_field_values' => null,
        'supplier_warehouses' => null,
        'supplier_quantity_price_breaks' => null
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerFormats()
    {
        return self::$swaggerFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'inventory_id' => 'InventoryID',
        'region_name' => 'RegionName',
        'supplier_id' => 'SupplierID',
        'fx_rate' => 'FXRate',
        'default_supplier' => 'DefaultSupplier',
        'spare_float1' => 'SpareFloat1',
        'spare_float2' => 'SpareFloat2',
        'spare_float3' => 'SpareFloat3',
        'spare_date1' => 'SpareDate1',
        'spare_date2' => 'SpareDate2',
        'spare_date3' => 'SpareDate3',
        'creditor_id' => 'CreditorID',
        'creditor_account_no' => 'CreditorAccountNo',
        'creditor_name' => 'CreditorName',
        'supplier_part_no' => 'SupplierPartNo',
        'supplier_upc' => 'SupplierUPC',
        'spare_string1' => 'SpareString1',
        'spare_string2' => 'SpareString2',
        'spare_string3' => 'SpareString3',
        'custom_field_values' => 'CustomFieldValues',
        'supplier_warehouses' => 'SupplierWarehouses',
        'supplier_quantity_price_breaks' => 'SupplierQuantityPriceBreaks'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'inventory_id' => 'setInventoryId',
        'region_name' => 'setRegionName',
        'supplier_id' => 'setSupplierId',
        'fx_rate' => 'setFxRate',
        'default_supplier' => 'setDefaultSupplier',
        'spare_float1' => 'setSpareFloat1',
        'spare_float2' => 'setSpareFloat2',
        'spare_float3' => 'setSpareFloat3',
        'spare_date1' => 'setSpareDate1',
        'spare_date2' => 'setSpareDate2',
        'spare_date3' => 'setSpareDate3',
        'creditor_id' => 'setCreditorId',
        'creditor_account_no' => 'setCreditorAccountNo',
        'creditor_name' => 'setCreditorName',
        'supplier_part_no' => 'setSupplierPartNo',
        'supplier_upc' => 'setSupplierUpc',
        'spare_string1' => 'setSpareString1',
        'spare_string2' => 'setSpareString2',
        'spare_string3' => 'setSpareString3',
        'custom_field_values' => 'setCustomFieldValues',
        'supplier_warehouses' => 'setSupplierWarehouses',
        'supplier_quantity_price_breaks' => 'setSupplierQuantityPriceBreaks'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'inventory_id' => 'getInventoryId',
        'region_name' => 'getRegionName',
        'supplier_id' => 'getSupplierId',
        'fx_rate' => 'getFxRate',
        'default_supplier' => 'getDefaultSupplier',
        'spare_float1' => 'getSpareFloat1',
        'spare_float2' => 'getSpareFloat2',
        'spare_float3' => 'getSpareFloat3',
        'spare_date1' => 'getSpareDate1',
        'spare_date2' => 'getSpareDate2',
        'spare_date3' => 'getSpareDate3',
        'creditor_id' => 'getCreditorId',
        'creditor_account_no' => 'getCreditorAccountNo',
        'creditor_name' => 'getCreditorName',
        'supplier_part_no' => 'getSupplierPartNo',
        'supplier_upc' => 'getSupplierUpc',
        'spare_string1' => 'getSpareString1',
        'spare_string2' => 'getSpareString2',
        'spare_string3' => 'getSpareString3',
        'custom_field_values' => 'getCustomFieldValues',
        'supplier_warehouses' => 'getSupplierWarehouses',
        'supplier_quantity_price_breaks' => 'getSupplierQuantityPriceBreaks'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$swaggerModelName;
    }

    

    

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['inventory_id'] = isset($data['inventory_id']) ? $data['inventory_id'] : null;
        $this->container['region_name'] = isset($data['region_name']) ? $data['region_name'] : null;
        $this->container['supplier_id'] = isset($data['supplier_id']) ? $data['supplier_id'] : null;
        $this->container['fx_rate'] = isset($data['fx_rate']) ? $data['fx_rate'] : null;
        $this->container['default_supplier'] = isset($data['default_supplier']) ? $data['default_supplier'] : null;
        $this->container['spare_float1'] = isset($data['spare_float1']) ? $data['spare_float1'] : null;
        $this->container['spare_float2'] = isset($data['spare_float2']) ? $data['spare_float2'] : null;
        $this->container['spare_float3'] = isset($data['spare_float3']) ? $data['spare_float3'] : null;
        $this->container['spare_date1'] = isset($data['spare_date1']) ? $data['spare_date1'] : null;
        $this->container['spare_date2'] = isset($data['spare_date2']) ? $data['spare_date2'] : null;
        $this->container['spare_date3'] = isset($data['spare_date3']) ? $data['spare_date3'] : null;
        $this->container['creditor_id'] = isset($data['creditor_id']) ? $data['creditor_id'] : null;
        $this->container['creditor_account_no'] = isset($data['creditor_account_no']) ? $data['creditor_account_no'] : null;
        $this->container['creditor_name'] = isset($data['creditor_name']) ? $data['creditor_name'] : null;
        $this->container['supplier_part_no'] = isset($data['supplier_part_no']) ? $data['supplier_part_no'] : null;
        $this->container['supplier_upc'] = isset($data['supplier_upc']) ? $data['supplier_upc'] : null;
        $this->container['spare_string1'] = isset($data['spare_string1']) ? $data['spare_string1'] : null;
        $this->container['spare_string2'] = isset($data['spare_string2']) ? $data['spare_string2'] : null;
        $this->container['spare_string3'] = isset($data['spare_string3']) ? $data['spare_string3'] : null;
        $this->container['custom_field_values'] = isset($data['custom_field_values']) ? $data['custom_field_values'] : null;
        $this->container['supplier_warehouses'] = isset($data['supplier_warehouses']) ? $data['supplier_warehouses'] : null;
        $this->container['supplier_quantity_price_breaks'] = isset($data['supplier_quantity_price_breaks']) ? $data['supplier_quantity_price_breaks'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets inventory_id
     *
     * @return string
     */
    public function getInventoryId()
    {
        return $this->container['inventory_id'];
    }

    /**
     * Sets inventory_id
     *
     * @param string $inventory_id inventory_id
     *
     * @return $this
     */
    public function setInventoryId($inventory_id)
    {
        $this->container['inventory_id'] = $inventory_id;

        return $this;
    }

    /**
     * Gets region_name
     *
     * @return string
     */
    public function getRegionName()
    {
        return $this->container['region_name'];
    }

    /**
     * Sets region_name
     *
     * @param string $region_name region_name
     *
     * @return $this
     */
    public function setRegionName($region_name)
    {
        $this->container['region_name'] = $region_name;

        return $this;
    }

    /**
     * Gets supplier_id
     *
     * @return string
     */
    public function getSupplierId()
    {
        return $this->container['supplier_id'];
    }

    /**
     * Sets supplier_id
     *
     * @param string $supplier_id supplier_id
     *
     * @return $this
     */
    public function setSupplierId($supplier_id)
    {
        $this->container['supplier_id'] = $supplier_id;

        return $this;
    }

    /**
     * Gets fx_rate
     *
     * @return double
     */
    public function getFxRate()
    {
        return $this->container['fx_rate'];
    }

    /**
     * Sets fx_rate
     *
     * @param double $fx_rate fx_rate
     *
     * @return $this
     */
    public function setFxRate($fx_rate)
    {
        $this->container['fx_rate'] = $fx_rate;

        return $this;
    }

    /**
     * Gets default_supplier
     *
     * @return bool
     */
    public function getDefaultSupplier()
    {
        return $this->container['default_supplier'];
    }

    /**
     * Sets default_supplier
     *
     * @param bool $default_supplier default_supplier
     *
     * @return $this
     */
    public function setDefaultSupplier($default_supplier)
    {
        $this->container['default_supplier'] = $default_supplier;

        return $this;
    }

    /**
     * Gets spare_float1
     *
     * @return double
     */
    public function getSpareFloat1()
    {
        return $this->container['spare_float1'];
    }

    /**
     * Sets spare_float1
     *
     * @param double $spare_float1 spare_float1
     *
     * @return $this
     */
    public function setSpareFloat1($spare_float1)
    {
        $this->container['spare_float1'] = $spare_float1;

        return $this;
    }

    /**
     * Gets spare_float2
     *
     * @return double
     */
    public function getSpareFloat2()
    {
        return $this->container['spare_float2'];
    }

    /**
     * Sets spare_float2
     *
     * @param double $spare_float2 spare_float2
     *
     * @return $this
     */
    public function setSpareFloat2($spare_float2)
    {
        $this->container['spare_float2'] = $spare_float2;

        return $this;
    }

    /**
     * Gets spare_float3
     *
     * @return double
     */
    public function getSpareFloat3()
    {
        return $this->container['spare_float3'];
    }

    /**
     * Sets spare_float3
     *
     * @param double $spare_float3 spare_float3
     *
     * @return $this
     */
    public function setSpareFloat3($spare_float3)
    {
        $this->container['spare_float3'] = $spare_float3;

        return $this;
    }

    /**
     * Gets spare_date1
     *
     * @return \DateTime
     */
    public function getSpareDate1()
    {
        return $this->container['spare_date1'];
    }

    /**
     * Sets spare_date1
     *
     * @param \DateTime $spare_date1 spare_date1
     *
     * @return $this
     */
    public function setSpareDate1($spare_date1)
    {
        $this->container['spare_date1'] = $spare_date1;

        return $this;
    }

    /**
     * Gets spare_date2
     *
     * @return \DateTime
     */
    public function getSpareDate2()
    {
        return $this->container['spare_date2'];
    }

    /**
     * Sets spare_date2
     *
     * @param \DateTime $spare_date2 spare_date2
     *
     * @return $this
     */
    public function setSpareDate2($spare_date2)
    {
        $this->container['spare_date2'] = $spare_date2;

        return $this;
    }

    /**
     * Gets spare_date3
     *
     * @return \DateTime
     */
    public function getSpareDate3()
    {
        return $this->container['spare_date3'];
    }

    /**
     * Sets spare_date3
     *
     * @param \DateTime $spare_date3 spare_date3
     *
     * @return $this
     */
    public function setSpareDate3($spare_date3)
    {
        $this->container['spare_date3'] = $spare_date3;

        return $this;
    }

    /**
     * Gets creditor_id
     *
     * @return string
     */
    public function getCreditorId()
    {
        return $this->container['creditor_id'];
    }

    /**
     * Sets creditor_id
     *
     * @param string $creditor_id creditor_id
     *
     * @return $this
     */
    public function setCreditorId($creditor_id)
    {
        $this->container['creditor_id'] = $creditor_id;

        return $this;
    }

    /**
     * Gets creditor_account_no
     *
     * @return string
     */
    public function getCreditorAccountNo()
    {
        return $this->container['creditor_account_no'];
    }

    /**
     * Sets creditor_account_no
     *
     * @param string $creditor_account_no creditor_account_no
     *
     * @return $this
     */
    public function setCreditorAccountNo($creditor_account_no)
    {
        $this->container['creditor_account_no'] = $creditor_account_no;

        return $this;
    }

    /**
     * Gets creditor_name
     *
     * @return string
     */
    public function getCreditorName()
    {
        return $this->container['creditor_name'];
    }

    /**
     * Sets creditor_name
     *
     * @param string $creditor_name creditor_name
     *
     * @return $this
     */
    public function setCreditorName($creditor_name)
    {
        $this->container['creditor_name'] = $creditor_name;

        return $this;
    }

    /**
     * Gets supplier_part_no
     *
     * @return string
     */
    public function getSupplierPartNo()
    {
        return $this->container['supplier_part_no'];
    }

    /**
     * Sets supplier_part_no
     *
     * @param string $supplier_part_no supplier_part_no
     *
     * @return $this
     */
    public function setSupplierPartNo($supplier_part_no)
    {
        $this->container['supplier_part_no'] = $supplier_part_no;

        return $this;
    }

    /**
     * Gets supplier_upc
     *
     * @return string
     */
    public function getSupplierUpc()
    {
        return $this->container['supplier_upc'];
    }

    /**
     * Sets supplier_upc
     *
     * @param string $supplier_upc supplier_upc
     *
     * @return $this
     */
    public function setSupplierUpc($supplier_upc)
    {
        $this->container['supplier_upc'] = $supplier_upc;

        return $this;
    }

    /**
     * Gets spare_string1
     *
     * @return string
     */
    public function getSpareString1()
    {
        return $this->container['spare_string1'];
    }

    /**
     * Sets spare_string1
     *
     * @param string $spare_string1 spare_string1
     *
     * @return $this
     */
    public function setSpareString1($spare_string1)
    {
        $this->container['spare_string1'] = $spare_string1;

        return $this;
    }

    /**
     * Gets spare_string2
     *
     * @return string
     */
    public function getSpareString2()
    {
        return $this->container['spare_string2'];
    }

    /**
     * Sets spare_string2
     *
     * @param string $spare_string2 spare_string2
     *
     * @return $this
     */
    public function setSpareString2($spare_string2)
    {
        $this->container['spare_string2'] = $spare_string2;

        return $this;
    }

    /**
     * Gets spare_string3
     *
     * @return string
     */
    public function getSpareString3()
    {
        return $this->container['spare_string3'];
    }

    /**
     * Sets spare_string3
     *
     * @param string $spare_string3 spare_string3
     *
     * @return $this
     */
    public function setSpareString3($spare_string3)
    {
        $this->container['spare_string3'] = $spare_string3;

        return $this;
    }

    /**
     * Gets custom_field_values
     *
     * @return \Jiwa\Model\CustomFieldValue[]
     */
    public function getCustomFieldValues()
    {
        return $this->container['custom_field_values'];
    }

    /**
     * Sets custom_field_values
     *
     * @param \Jiwa\Model\CustomFieldValue[] $custom_field_values custom_field_values
     *
     * @return $this
     */
    public function setCustomFieldValues($custom_field_values)
    {
        $this->container['custom_field_values'] = $custom_field_values;

        return $this;
    }

    /**
     * Gets supplier_warehouses
     *
     * @return \Jiwa\Model\InventorySupplierWarehouse[]
     */
    public function getSupplierWarehouses()
    {
        return $this->container['supplier_warehouses'];
    }

    /**
     * Sets supplier_warehouses
     *
     * @param \Jiwa\Model\InventorySupplierWarehouse[] $supplier_warehouses supplier_warehouses
     *
     * @return $this
     */
    public function setSupplierWarehouses($supplier_warehouses)
    {
        $this->container['supplier_warehouses'] = $supplier_warehouses;

        return $this;
    }

    /**
     * Gets supplier_quantity_price_breaks
     *
     * @return \Jiwa\Model\InventorySupplierQuantityPriceBreak[]
     */
    public function getSupplierQuantityPriceBreaks()
    {
        return $this->container['supplier_quantity_price_breaks'];
    }

    /**
     * Sets supplier_quantity_price_breaks
     *
     * @param \Jiwa\Model\InventorySupplierQuantityPriceBreak[] $supplier_quantity_price_breaks supplier_quantity_price_breaks
     *
     * @return $this
     */
    public function setSupplierQuantityPriceBreaks($supplier_quantity_price_breaks)
    {
        $this->container['supplier_quantity_price_breaks'] = $supplier_quantity_price_breaks;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(
                ObjectSerializer::sanitizeForSerialization($this),
                JSON_PRETTY_PRINT
            );
        }

        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}



<?php
/**
 * ShipmentForwardCoverContract
 *
 * PHP version 5
 *
 * @category Class
 * @package  Jiwa
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * JiwaAPI
 *
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: 1.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 * Swagger Codegen version: 2.4.28-SNAPSHOT
 */

/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Jiwa\Model;

use \ArrayAccess;
use \Jiwa\ObjectSerializer;

/**
 * ShipmentForwardCoverContract Class Doc Comment
 *
 * @category Class
 * @description ShipmentForwardCoverContract
 * @package  Jiwa
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class ShipmentForwardCoverContract implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $swaggerModelName = 'ShipmentForwardCoverContract';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerTypes = [
        'line_key' => 'string',
        'forward_cover_contract_transaction_id' => 'string',
        'forward_cover_contract' => '\Jiwa\Model\ForwardCoverContract',
        'fx_amount' => 'double',
        'home_amount' => 'double'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerFormats = [
        'line_key' => null,
        'forward_cover_contract_transaction_id' => null,
        'forward_cover_contract' => null,
        'fx_amount' => 'double',
        'home_amount' => 'double'
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerFormats()
    {
        return self::$swaggerFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'line_key' => 'LineKey',
        'forward_cover_contract_transaction_id' => 'ForwardCoverContractTransactionID',
        'forward_cover_contract' => 'ForwardCoverContract',
        'fx_amount' => 'FXAmount',
        'home_amount' => 'HomeAmount'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'line_key' => 'setLineKey',
        'forward_cover_contract_transaction_id' => 'setForwardCoverContractTransactionId',
        'forward_cover_contract' => 'setForwardCoverContract',
        'fx_amount' => 'setFxAmount',
        'home_amount' => 'setHomeAmount'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'line_key' => 'getLineKey',
        'forward_cover_contract_transaction_id' => 'getForwardCoverContractTransactionId',
        'forward_cover_contract' => 'getForwardCoverContract',
        'fx_amount' => 'getFxAmount',
        'home_amount' => 'getHomeAmount'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$swaggerModelName;
    }

    

    

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['line_key'] = isset($data['line_key']) ? $data['line_key'] : null;
        $this->container['forward_cover_contract_transaction_id'] = isset($data['forward_cover_contract_transaction_id']) ? $data['forward_cover_contract_transaction_id'] : null;
        $this->container['forward_cover_contract'] = isset($data['forward_cover_contract']) ? $data['forward_cover_contract'] : null;
        $this->container['fx_amount'] = isset($data['fx_amount']) ? $data['fx_amount'] : null;
        $this->container['home_amount'] = isset($data['home_amount']) ? $data['home_amount'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets line_key
     *
     * @return string
     */
    public function getLineKey()
    {
        return $this->container['line_key'];
    }

    /**
     * Sets line_key
     *
     * @param string $line_key line_key
     *
     * @return $this
     */
    public function setLineKey($line_key)
    {
        $this->container['line_key'] = $line_key;

        return $this;
    }

    /**
     * Gets forward_cover_contract_transaction_id
     *
     * @return string
     */
    public function getForwardCoverContractTransactionId()
    {
        return $this->container['forward_cover_contract_transaction_id'];
    }

    /**
     * Sets forward_cover_contract_transaction_id
     *
     * @param string $forward_cover_contract_transaction_id forward_cover_contract_transaction_id
     *
     * @return $this
     */
    public function setForwardCoverContractTransactionId($forward_cover_contract_transaction_id)
    {
        $this->container['forward_cover_contract_transaction_id'] = $forward_cover_contract_transaction_id;

        return $this;
    }

    /**
     * Gets forward_cover_contract
     *
     * @return \Jiwa\Model\ForwardCoverContract
     */
    public function getForwardCoverContract()
    {
        return $this->container['forward_cover_contract'];
    }

    /**
     * Sets forward_cover_contract
     *
     * @param \Jiwa\Model\ForwardCoverContract $forward_cover_contract forward_cover_contract
     *
     * @return $this
     */
    public function setForwardCoverContract($forward_cover_contract)
    {
        $this->container['forward_cover_contract'] = $forward_cover_contract;

        return $this;
    }

    /**
     * Gets fx_amount
     *
     * @return double
     */
    public function getFxAmount()
    {
        return $this->container['fx_amount'];
    }

    /**
     * Sets fx_amount
     *
     * @param double $fx_amount fx_amount
     *
     * @return $this
     */
    public function setFxAmount($fx_amount)
    {
        $this->container['fx_amount'] = $fx_amount;

        return $this;
    }

    /**
     * Gets home_amount
     *
     * @return double
     */
    public function getHomeAmount()
    {
        return $this->container['home_amount'];
    }

    /**
     * Sets home_amount
     *
     * @param double $home_amount home_amount
     *
     * @return $this
     */
    public function setHomeAmount($home_amount)
    {
        $this->container['home_amount'] = $home_amount;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(
                ObjectSerializer::sanitizeForSerialization($this),
                JSON_PRETTY_PRINT
            );
        }

        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}



<?php
/**
 * INWarehouseSOHQuery
 *
 * PHP version 5
 *
 * @category Class
 * @package  Jiwa
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * JiwaAPI
 *
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: 1.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 * Swagger Codegen version: 2.4.28-SNAPSHOT
 */

/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Jiwa\Model;

use \ArrayAccess;
use \Jiwa\ObjectSerializer;

/**
 * INWarehouseSOHQuery Class Doc Comment
 *
 * @category Class
 * @description IN_WarehouseSOHQuery
 * @package  Jiwa
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class INWarehouseSOHQuery implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $swaggerModelName = 'IN_WarehouseSOHQuery';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerTypes = [
        'in_warehouse_sohid' => 'string',
        'in_warehouse_sohid_starts_with' => 'string',
        'in_warehouse_sohid_ends_with' => 'string',
        'in_warehouse_sohid_contains' => 'string',
        'in_warehouse_sohid_like' => 'string',
        'in_warehouse_sohid_between' => 'string[]',
        'in_warehouse_sohid_in' => 'string[]',
        'inventory_id' => 'string',
        'inventory_id_starts_with' => 'string',
        'inventory_id_ends_with' => 'string',
        'inventory_id_contains' => 'string',
        'inventory_id_like' => 'string',
        'inventory_id_between' => 'string[]',
        'inventory_id_in' => 'string[]',
        'in_logical_id' => 'string',
        'in_logical_id_starts_with' => 'string',
        'in_logical_id_ends_with' => 'string',
        'in_logical_id_contains' => 'string',
        'in_logical_id_like' => 'string',
        'in_logical_id_between' => 'string[]',
        'in_logical_id_in' => 'string[]',
        'quantity_left' => 'double',
        'quantity_left_greater_than_or_equal_to' => 'double',
        'quantity_left_greater_than' => 'double',
        'quantity_left_less_than' => 'double',
        'quantity_left_less_than_or_equal_to' => 'double',
        'quantity_left_not_equal_to' => 'double',
        'quantity_left_between' => 'double[]',
        'quantity_left_in' => 'double[]',
        'quantity_allocated' => 'double',
        'quantity_allocated_greater_than_or_equal_to' => 'double',
        'quantity_allocated_greater_than' => 'double',
        'quantity_allocated_less_than' => 'double',
        'quantity_allocated_less_than_or_equal_to' => 'double',
        'quantity_allocated_not_equal_to' => 'double',
        'quantity_allocated_between' => 'double[]',
        'quantity_allocated_in' => 'double[]',
        'pick_allocated' => 'double',
        'pick_allocated_greater_than_or_equal_to' => 'double',
        'pick_allocated_greater_than' => 'double',
        'pick_allocated_less_than' => 'double',
        'pick_allocated_less_than_or_equal_to' => 'double',
        'pick_allocated_not_equal_to' => 'double',
        'pick_allocated_between' => 'double[]',
        'pick_allocated_in' => 'double[]',
        'ship_allocated' => 'double',
        'ship_allocated_greater_than_or_equal_to' => 'double',
        'ship_allocated_greater_than' => 'double',
        'ship_allocated_less_than' => 'double',
        'ship_allocated_less_than_or_equal_to' => 'double',
        'ship_allocated_not_equal_to' => 'double',
        'ship_allocated_between' => 'double[]',
        'ship_allocated_in' => 'double[]',
        'forward_requirements' => 'double',
        'forward_requirements_greater_than_or_equal_to' => 'double',
        'forward_requirements_greater_than' => 'double',
        'forward_requirements_less_than' => 'double',
        'forward_requirements_less_than_or_equal_to' => 'double',
        'forward_requirements_not_equal_to' => 'double',
        'forward_requirements_between' => 'double[]',
        'forward_requirements_in' => 'double[]',
        'transfer_allocated' => 'double',
        'transfer_allocated_greater_than_or_equal_to' => 'double',
        'transfer_allocated_greater_than' => 'double',
        'transfer_allocated_less_than' => 'double',
        'transfer_allocated_less_than_or_equal_to' => 'double',
        'transfer_allocated_not_equal_to' => 'double',
        'transfer_allocated_between' => 'double[]',
        'transfer_allocated_in' => 'double[]',
        'bom_allocated' => 'double',
        'bom_allocated_greater_than_or_equal_to' => 'double',
        'bom_allocated_greater_than' => 'double',
        'bom_allocated_less_than' => 'double',
        'bom_allocated_less_than_or_equal_to' => 'double',
        'bom_allocated_not_equal_to' => 'double',
        'bom_allocated_between' => 'double[]',
        'bom_allocated_in' => 'double[]',
        'skip' => 'int',
        'take' => 'int',
        'order_by' => 'string',
        'order_by_desc' => 'string',
        'include' => 'string',
        'fields' => 'string',
        'meta' => '\Jiwa\Model\DictionaryStringString_'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerFormats = [
        'in_warehouse_sohid' => null,
        'in_warehouse_sohid_starts_with' => null,
        'in_warehouse_sohid_ends_with' => null,
        'in_warehouse_sohid_contains' => null,
        'in_warehouse_sohid_like' => null,
        'in_warehouse_sohid_between' => null,
        'in_warehouse_sohid_in' => null,
        'inventory_id' => null,
        'inventory_id_starts_with' => null,
        'inventory_id_ends_with' => null,
        'inventory_id_contains' => null,
        'inventory_id_like' => null,
        'inventory_id_between' => null,
        'inventory_id_in' => null,
        'in_logical_id' => null,
        'in_logical_id_starts_with' => null,
        'in_logical_id_ends_with' => null,
        'in_logical_id_contains' => null,
        'in_logical_id_like' => null,
        'in_logical_id_between' => null,
        'in_logical_id_in' => null,
        'quantity_left' => 'double',
        'quantity_left_greater_than_or_equal_to' => 'double',
        'quantity_left_greater_than' => 'double',
        'quantity_left_less_than' => 'double',
        'quantity_left_less_than_or_equal_to' => 'double',
        'quantity_left_not_equal_to' => 'double',
        'quantity_left_between' => 'double',
        'quantity_left_in' => 'double',
        'quantity_allocated' => 'double',
        'quantity_allocated_greater_than_or_equal_to' => 'double',
        'quantity_allocated_greater_than' => 'double',
        'quantity_allocated_less_than' => 'double',
        'quantity_allocated_less_than_or_equal_to' => 'double',
        'quantity_allocated_not_equal_to' => 'double',
        'quantity_allocated_between' => 'double',
        'quantity_allocated_in' => 'double',
        'pick_allocated' => 'double',
        'pick_allocated_greater_than_or_equal_to' => 'double',
        'pick_allocated_greater_than' => 'double',
        'pick_allocated_less_than' => 'double',
        'pick_allocated_less_than_or_equal_to' => 'double',
        'pick_allocated_not_equal_to' => 'double',
        'pick_allocated_between' => 'double',
        'pick_allocated_in' => 'double',
        'ship_allocated' => 'double',
        'ship_allocated_greater_than_or_equal_to' => 'double',
        'ship_allocated_greater_than' => 'double',
        'ship_allocated_less_than' => 'double',
        'ship_allocated_less_than_or_equal_to' => 'double',
        'ship_allocated_not_equal_to' => 'double',
        'ship_allocated_between' => 'double',
        'ship_allocated_in' => 'double',
        'forward_requirements' => 'double',
        'forward_requirements_greater_than_or_equal_to' => 'double',
        'forward_requirements_greater_than' => 'double',
        'forward_requirements_less_than' => 'double',
        'forward_requirements_less_than_or_equal_to' => 'double',
        'forward_requirements_not_equal_to' => 'double',
        'forward_requirements_between' => 'double',
        'forward_requirements_in' => 'double',
        'transfer_allocated' => 'double',
        'transfer_allocated_greater_than_or_equal_to' => 'double',
        'transfer_allocated_greater_than' => 'double',
        'transfer_allocated_less_than' => 'double',
        'transfer_allocated_less_than_or_equal_to' => 'double',
        'transfer_allocated_not_equal_to' => 'double',
        'transfer_allocated_between' => 'double',
        'transfer_allocated_in' => 'double',
        'bom_allocated' => 'double',
        'bom_allocated_greater_than_or_equal_to' => 'double',
        'bom_allocated_greater_than' => 'double',
        'bom_allocated_less_than' => 'double',
        'bom_allocated_less_than_or_equal_to' => 'double',
        'bom_allocated_not_equal_to' => 'double',
        'bom_allocated_between' => 'double',
        'bom_allocated_in' => 'double',
        'skip' => 'int32',
        'take' => 'int32',
        'order_by' => null,
        'order_by_desc' => null,
        'include' => null,
        'fields' => null,
        'meta' => null
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerFormats()
    {
        return self::$swaggerFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'in_warehouse_sohid' => 'IN_WarehouseSOHID',
        'in_warehouse_sohid_starts_with' => 'IN_WarehouseSOHIDStartsWith',
        'in_warehouse_sohid_ends_with' => 'IN_WarehouseSOHIDEndsWith',
        'in_warehouse_sohid_contains' => 'IN_WarehouseSOHIDContains',
        'in_warehouse_sohid_like' => 'IN_WarehouseSOHIDLike',
        'in_warehouse_sohid_between' => 'IN_WarehouseSOHIDBetween',
        'in_warehouse_sohid_in' => 'IN_WarehouseSOHIDIn',
        'inventory_id' => 'InventoryID',
        'inventory_id_starts_with' => 'InventoryIDStartsWith',
        'inventory_id_ends_with' => 'InventoryIDEndsWith',
        'inventory_id_contains' => 'InventoryIDContains',
        'inventory_id_like' => 'InventoryIDLike',
        'inventory_id_between' => 'InventoryIDBetween',
        'inventory_id_in' => 'InventoryIDIn',
        'in_logical_id' => 'IN_LogicalID',
        'in_logical_id_starts_with' => 'IN_LogicalIDStartsWith',
        'in_logical_id_ends_with' => 'IN_LogicalIDEndsWith',
        'in_logical_id_contains' => 'IN_LogicalIDContains',
        'in_logical_id_like' => 'IN_LogicalIDLike',
        'in_logical_id_between' => 'IN_LogicalIDBetween',
        'in_logical_id_in' => 'IN_LogicalIDIn',
        'quantity_left' => 'QuantityLeft',
        'quantity_left_greater_than_or_equal_to' => 'QuantityLeftGreaterThanOrEqualTo',
        'quantity_left_greater_than' => 'QuantityLeftGreaterThan',
        'quantity_left_less_than' => 'QuantityLeftLessThan',
        'quantity_left_less_than_or_equal_to' => 'QuantityLeftLessThanOrEqualTo',
        'quantity_left_not_equal_to' => 'QuantityLeftNotEqualTo',
        'quantity_left_between' => 'QuantityLeftBetween',
        'quantity_left_in' => 'QuantityLeftIn',
        'quantity_allocated' => 'QuantityAllocated',
        'quantity_allocated_greater_than_or_equal_to' => 'QuantityAllocatedGreaterThanOrEqualTo',
        'quantity_allocated_greater_than' => 'QuantityAllocatedGreaterThan',
        'quantity_allocated_less_than' => 'QuantityAllocatedLessThan',
        'quantity_allocated_less_than_or_equal_to' => 'QuantityAllocatedLessThanOrEqualTo',
        'quantity_allocated_not_equal_to' => 'QuantityAllocatedNotEqualTo',
        'quantity_allocated_between' => 'QuantityAllocatedBetween',
        'quantity_allocated_in' => 'QuantityAllocatedIn',
        'pick_allocated' => 'PickAllocated',
        'pick_allocated_greater_than_or_equal_to' => 'PickAllocatedGreaterThanOrEqualTo',
        'pick_allocated_greater_than' => 'PickAllocatedGreaterThan',
        'pick_allocated_less_than' => 'PickAllocatedLessThan',
        'pick_allocated_less_than_or_equal_to' => 'PickAllocatedLessThanOrEqualTo',
        'pick_allocated_not_equal_to' => 'PickAllocatedNotEqualTo',
        'pick_allocated_between' => 'PickAllocatedBetween',
        'pick_allocated_in' => 'PickAllocatedIn',
        'ship_allocated' => 'ShipAllocated',
        'ship_allocated_greater_than_or_equal_to' => 'ShipAllocatedGreaterThanOrEqualTo',
        'ship_allocated_greater_than' => 'ShipAllocatedGreaterThan',
        'ship_allocated_less_than' => 'ShipAllocatedLessThan',
        'ship_allocated_less_than_or_equal_to' => 'ShipAllocatedLessThanOrEqualTo',
        'ship_allocated_not_equal_to' => 'ShipAllocatedNotEqualTo',
        'ship_allocated_between' => 'ShipAllocatedBetween',
        'ship_allocated_in' => 'ShipAllocatedIn',
        'forward_requirements' => 'ForwardRequirements',
        'forward_requirements_greater_than_or_equal_to' => 'ForwardRequirementsGreaterThanOrEqualTo',
        'forward_requirements_greater_than' => 'ForwardRequirementsGreaterThan',
        'forward_requirements_less_than' => 'ForwardRequirementsLessThan',
        'forward_requirements_less_than_or_equal_to' => 'ForwardRequirementsLessThanOrEqualTo',
        'forward_requirements_not_equal_to' => 'ForwardRequirementsNotEqualTo',
        'forward_requirements_between' => 'ForwardRequirementsBetween',
        'forward_requirements_in' => 'ForwardRequirementsIn',
        'transfer_allocated' => 'TransferAllocated',
        'transfer_allocated_greater_than_or_equal_to' => 'TransferAllocatedGreaterThanOrEqualTo',
        'transfer_allocated_greater_than' => 'TransferAllocatedGreaterThan',
        'transfer_allocated_less_than' => 'TransferAllocatedLessThan',
        'transfer_allocated_less_than_or_equal_to' => 'TransferAllocatedLessThanOrEqualTo',
        'transfer_allocated_not_equal_to' => 'TransferAllocatedNotEqualTo',
        'transfer_allocated_between' => 'TransferAllocatedBetween',
        'transfer_allocated_in' => 'TransferAllocatedIn',
        'bom_allocated' => 'BOMAllocated',
        'bom_allocated_greater_than_or_equal_to' => 'BOMAllocatedGreaterThanOrEqualTo',
        'bom_allocated_greater_than' => 'BOMAllocatedGreaterThan',
        'bom_allocated_less_than' => 'BOMAllocatedLessThan',
        'bom_allocated_less_than_or_equal_to' => 'BOMAllocatedLessThanOrEqualTo',
        'bom_allocated_not_equal_to' => 'BOMAllocatedNotEqualTo',
        'bom_allocated_between' => 'BOMAllocatedBetween',
        'bom_allocated_in' => 'BOMAllocatedIn',
        'skip' => 'Skip',
        'take' => 'Take',
        'order_by' => 'OrderBy',
        'order_by_desc' => 'OrderByDesc',
        'include' => 'Include',
        'fields' => 'Fields',
        'meta' => 'Meta'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'in_warehouse_sohid' => 'setInWarehouseSohid',
        'in_warehouse_sohid_starts_with' => 'setInWarehouseSohidStartsWith',
        'in_warehouse_sohid_ends_with' => 'setInWarehouseSohidEndsWith',
        'in_warehouse_sohid_contains' => 'setInWarehouseSohidContains',
        'in_warehouse_sohid_like' => 'setInWarehouseSohidLike',
        'in_warehouse_sohid_between' => 'setInWarehouseSohidBetween',
        'in_warehouse_sohid_in' => 'setInWarehouseSohidIn',
        'inventory_id' => 'setInventoryId',
        'inventory_id_starts_with' => 'setInventoryIdStartsWith',
        'inventory_id_ends_with' => 'setInventoryIdEndsWith',
        'inventory_id_contains' => 'setInventoryIdContains',
        'inventory_id_like' => 'setInventoryIdLike',
        'inventory_id_between' => 'setInventoryIdBetween',
        'inventory_id_in' => 'setInventoryIdIn',
        'in_logical_id' => 'setInLogicalId',
        'in_logical_id_starts_with' => 'setInLogicalIdStartsWith',
        'in_logical_id_ends_with' => 'setInLogicalIdEndsWith',
        'in_logical_id_contains' => 'setInLogicalIdContains',
        'in_logical_id_like' => 'setInLogicalIdLike',
        'in_logical_id_between' => 'setInLogicalIdBetween',
        'in_logical_id_in' => 'setInLogicalIdIn',
        'quantity_left' => 'setQuantityLeft',
        'quantity_left_greater_than_or_equal_to' => 'setQuantityLeftGreaterThanOrEqualTo',
        'quantity_left_greater_than' => 'setQuantityLeftGreaterThan',
        'quantity_left_less_than' => 'setQuantityLeftLessThan',
        'quantity_left_less_than_or_equal_to' => 'setQuantityLeftLessThanOrEqualTo',
        'quantity_left_not_equal_to' => 'setQuantityLeftNotEqualTo',
        'quantity_left_between' => 'setQuantityLeftBetween',
        'quantity_left_in' => 'setQuantityLeftIn',
        'quantity_allocated' => 'setQuantityAllocated',
        'quantity_allocated_greater_than_or_equal_to' => 'setQuantityAllocatedGreaterThanOrEqualTo',
        'quantity_allocated_greater_than' => 'setQuantityAllocatedGreaterThan',
        'quantity_allocated_less_than' => 'setQuantityAllocatedLessThan',
        'quantity_allocated_less_than_or_equal_to' => 'setQuantityAllocatedLessThanOrEqualTo',
        'quantity_allocated_not_equal_to' => 'setQuantityAllocatedNotEqualTo',
        'quantity_allocated_between' => 'setQuantityAllocatedBetween',
        'quantity_allocated_in' => 'setQuantityAllocatedIn',
        'pick_allocated' => 'setPickAllocated',
        'pick_allocated_greater_than_or_equal_to' => 'setPickAllocatedGreaterThanOrEqualTo',
        'pick_allocated_greater_than' => 'setPickAllocatedGreaterThan',
        'pick_allocated_less_than' => 'setPickAllocatedLessThan',
        'pick_allocated_less_than_or_equal_to' => 'setPickAllocatedLessThanOrEqualTo',
        'pick_allocated_not_equal_to' => 'setPickAllocatedNotEqualTo',
        'pick_allocated_between' => 'setPickAllocatedBetween',
        'pick_allocated_in' => 'setPickAllocatedIn',
        'ship_allocated' => 'setShipAllocated',
        'ship_allocated_greater_than_or_equal_to' => 'setShipAllocatedGreaterThanOrEqualTo',
        'ship_allocated_greater_than' => 'setShipAllocatedGreaterThan',
        'ship_allocated_less_than' => 'setShipAllocatedLessThan',
        'ship_allocated_less_than_or_equal_to' => 'setShipAllocatedLessThanOrEqualTo',
        'ship_allocated_not_equal_to' => 'setShipAllocatedNotEqualTo',
        'ship_allocated_between' => 'setShipAllocatedBetween',
        'ship_allocated_in' => 'setShipAllocatedIn',
        'forward_requirements' => 'setForwardRequirements',
        'forward_requirements_greater_than_or_equal_to' => 'setForwardRequirementsGreaterThanOrEqualTo',
        'forward_requirements_greater_than' => 'setForwardRequirementsGreaterThan',
        'forward_requirements_less_than' => 'setForwardRequirementsLessThan',
        'forward_requirements_less_than_or_equal_to' => 'setForwardRequirementsLessThanOrEqualTo',
        'forward_requirements_not_equal_to' => 'setForwardRequirementsNotEqualTo',
        'forward_requirements_between' => 'setForwardRequirementsBetween',
        'forward_requirements_in' => 'setForwardRequirementsIn',
        'transfer_allocated' => 'setTransferAllocated',
        'transfer_allocated_greater_than_or_equal_to' => 'setTransferAllocatedGreaterThanOrEqualTo',
        'transfer_allocated_greater_than' => 'setTransferAllocatedGreaterThan',
        'transfer_allocated_less_than' => 'setTransferAllocatedLessThan',
        'transfer_allocated_less_than_or_equal_to' => 'setTransferAllocatedLessThanOrEqualTo',
        'transfer_allocated_not_equal_to' => 'setTransferAllocatedNotEqualTo',
        'transfer_allocated_between' => 'setTransferAllocatedBetween',
        'transfer_allocated_in' => 'setTransferAllocatedIn',
        'bom_allocated' => 'setBomAllocated',
        'bom_allocated_greater_than_or_equal_to' => 'setBomAllocatedGreaterThanOrEqualTo',
        'bom_allocated_greater_than' => 'setBomAllocatedGreaterThan',
        'bom_allocated_less_than' => 'setBomAllocatedLessThan',
        'bom_allocated_less_than_or_equal_to' => 'setBomAllocatedLessThanOrEqualTo',
        'bom_allocated_not_equal_to' => 'setBomAllocatedNotEqualTo',
        'bom_allocated_between' => 'setBomAllocatedBetween',
        'bom_allocated_in' => 'setBomAllocatedIn',
        'skip' => 'setSkip',
        'take' => 'setTake',
        'order_by' => 'setOrderBy',
        'order_by_desc' => 'setOrderByDesc',
        'include' => 'setInclude',
        'fields' => 'setFields',
        'meta' => 'setMeta'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'in_warehouse_sohid' => 'getInWarehouseSohid',
        'in_warehouse_sohid_starts_with' => 'getInWarehouseSohidStartsWith',
        'in_warehouse_sohid_ends_with' => 'getInWarehouseSohidEndsWith',
        'in_warehouse_sohid_contains' => 'getInWarehouseSohidContains',
        'in_warehouse_sohid_like' => 'getInWarehouseSohidLike',
        'in_warehouse_sohid_between' => 'getInWarehouseSohidBetween',
        'in_warehouse_sohid_in' => 'getInWarehouseSohidIn',
        'inventory_id' => 'getInventoryId',
        'inventory_id_starts_with' => 'getInventoryIdStartsWith',
        'inventory_id_ends_with' => 'getInventoryIdEndsWith',
        'inventory_id_contains' => 'getInventoryIdContains',
        'inventory_id_like' => 'getInventoryIdLike',
        'inventory_id_between' => 'getInventoryIdBetween',
        'inventory_id_in' => 'getInventoryIdIn',
        'in_logical_id' => 'getInLogicalId',
        'in_logical_id_starts_with' => 'getInLogicalIdStartsWith',
        'in_logical_id_ends_with' => 'getInLogicalIdEndsWith',
        'in_logical_id_contains' => 'getInLogicalIdContains',
        'in_logical_id_like' => 'getInLogicalIdLike',
        'in_logical_id_between' => 'getInLogicalIdBetween',
        'in_logical_id_in' => 'getInLogicalIdIn',
        'quantity_left' => 'getQuantityLeft',
        'quantity_left_greater_than_or_equal_to' => 'getQuantityLeftGreaterThanOrEqualTo',
        'quantity_left_greater_than' => 'getQuantityLeftGreaterThan',
        'quantity_left_less_than' => 'getQuantityLeftLessThan',
        'quantity_left_less_than_or_equal_to' => 'getQuantityLeftLessThanOrEqualTo',
        'quantity_left_not_equal_to' => 'getQuantityLeftNotEqualTo',
        'quantity_left_between' => 'getQuantityLeftBetween',
        'quantity_left_in' => 'getQuantityLeftIn',
        'quantity_allocated' => 'getQuantityAllocated',
        'quantity_allocated_greater_than_or_equal_to' => 'getQuantityAllocatedGreaterThanOrEqualTo',
        'quantity_allocated_greater_than' => 'getQuantityAllocatedGreaterThan',
        'quantity_allocated_less_than' => 'getQuantityAllocatedLessThan',
        'quantity_allocated_less_than_or_equal_to' => 'getQuantityAllocatedLessThanOrEqualTo',
        'quantity_allocated_not_equal_to' => 'getQuantityAllocatedNotEqualTo',
        'quantity_allocated_between' => 'getQuantityAllocatedBetween',
        'quantity_allocated_in' => 'getQuantityAllocatedIn',
        'pick_allocated' => 'getPickAllocated',
        'pick_allocated_greater_than_or_equal_to' => 'getPickAllocatedGreaterThanOrEqualTo',
        'pick_allocated_greater_than' => 'getPickAllocatedGreaterThan',
        'pick_allocated_less_than' => 'getPickAllocatedLessThan',
        'pick_allocated_less_than_or_equal_to' => 'getPickAllocatedLessThanOrEqualTo',
        'pick_allocated_not_equal_to' => 'getPickAllocatedNotEqualTo',
        'pick_allocated_between' => 'getPickAllocatedBetween',
        'pick_allocated_in' => 'getPickAllocatedIn',
        'ship_allocated' => 'getShipAllocated',
        'ship_allocated_greater_than_or_equal_to' => 'getShipAllocatedGreaterThanOrEqualTo',
        'ship_allocated_greater_than' => 'getShipAllocatedGreaterThan',
        'ship_allocated_less_than' => 'getShipAllocatedLessThan',
        'ship_allocated_less_than_or_equal_to' => 'getShipAllocatedLessThanOrEqualTo',
        'ship_allocated_not_equal_to' => 'getShipAllocatedNotEqualTo',
        'ship_allocated_between' => 'getShipAllocatedBetween',
        'ship_allocated_in' => 'getShipAllocatedIn',
        'forward_requirements' => 'getForwardRequirements',
        'forward_requirements_greater_than_or_equal_to' => 'getForwardRequirementsGreaterThanOrEqualTo',
        'forward_requirements_greater_than' => 'getForwardRequirementsGreaterThan',
        'forward_requirements_less_than' => 'getForwardRequirementsLessThan',
        'forward_requirements_less_than_or_equal_to' => 'getForwardRequirementsLessThanOrEqualTo',
        'forward_requirements_not_equal_to' => 'getForwardRequirementsNotEqualTo',
        'forward_requirements_between' => 'getForwardRequirementsBetween',
        'forward_requirements_in' => 'getForwardRequirementsIn',
        'transfer_allocated' => 'getTransferAllocated',
        'transfer_allocated_greater_than_or_equal_to' => 'getTransferAllocatedGreaterThanOrEqualTo',
        'transfer_allocated_greater_than' => 'getTransferAllocatedGreaterThan',
        'transfer_allocated_less_than' => 'getTransferAllocatedLessThan',
        'transfer_allocated_less_than_or_equal_to' => 'getTransferAllocatedLessThanOrEqualTo',
        'transfer_allocated_not_equal_to' => 'getTransferAllocatedNotEqualTo',
        'transfer_allocated_between' => 'getTransferAllocatedBetween',
        'transfer_allocated_in' => 'getTransferAllocatedIn',
        'bom_allocated' => 'getBomAllocated',
        'bom_allocated_greater_than_or_equal_to' => 'getBomAllocatedGreaterThanOrEqualTo',
        'bom_allocated_greater_than' => 'getBomAllocatedGreaterThan',
        'bom_allocated_less_than' => 'getBomAllocatedLessThan',
        'bom_allocated_less_than_or_equal_to' => 'getBomAllocatedLessThanOrEqualTo',
        'bom_allocated_not_equal_to' => 'getBomAllocatedNotEqualTo',
        'bom_allocated_between' => 'getBomAllocatedBetween',
        'bom_allocated_in' => 'getBomAllocatedIn',
        'skip' => 'getSkip',
        'take' => 'getTake',
        'order_by' => 'getOrderBy',
        'order_by_desc' => 'getOrderByDesc',
        'include' => 'getInclude',
        'fields' => 'getFields',
        'meta' => 'getMeta'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$swaggerModelName;
    }

    

    

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['in_warehouse_sohid'] = isset($data['in_warehouse_sohid']) ? $data['in_warehouse_sohid'] : null;
        $this->container['in_warehouse_sohid_starts_with'] = isset($data['in_warehouse_sohid_starts_with']) ? $data['in_warehouse_sohid_starts_with'] : null;
        $this->container['in_warehouse_sohid_ends_with'] = isset($data['in_warehouse_sohid_ends_with']) ? $data['in_warehouse_sohid_ends_with'] : null;
        $this->container['in_warehouse_sohid_contains'] = isset($data['in_warehouse_sohid_contains']) ? $data['in_warehouse_sohid_contains'] : null;
        $this->container['in_warehouse_sohid_like'] = isset($data['in_warehouse_sohid_like']) ? $data['in_warehouse_sohid_like'] : null;
        $this->container['in_warehouse_sohid_between'] = isset($data['in_warehouse_sohid_between']) ? $data['in_warehouse_sohid_between'] : null;
        $this->container['in_warehouse_sohid_in'] = isset($data['in_warehouse_sohid_in']) ? $data['in_warehouse_sohid_in'] : null;
        $this->container['inventory_id'] = isset($data['inventory_id']) ? $data['inventory_id'] : null;
        $this->container['inventory_id_starts_with'] = isset($data['inventory_id_starts_with']) ? $data['inventory_id_starts_with'] : null;
        $this->container['inventory_id_ends_with'] = isset($data['inventory_id_ends_with']) ? $data['inventory_id_ends_with'] : null;
        $this->container['inventory_id_contains'] = isset($data['inventory_id_contains']) ? $data['inventory_id_contains'] : null;
        $this->container['inventory_id_like'] = isset($data['inventory_id_like']) ? $data['inventory_id_like'] : null;
        $this->container['inventory_id_between'] = isset($data['inventory_id_between']) ? $data['inventory_id_between'] : null;
        $this->container['inventory_id_in'] = isset($data['inventory_id_in']) ? $data['inventory_id_in'] : null;
        $this->container['in_logical_id'] = isset($data['in_logical_id']) ? $data['in_logical_id'] : null;
        $this->container['in_logical_id_starts_with'] = isset($data['in_logical_id_starts_with']) ? $data['in_logical_id_starts_with'] : null;
        $this->container['in_logical_id_ends_with'] = isset($data['in_logical_id_ends_with']) ? $data['in_logical_id_ends_with'] : null;
        $this->container['in_logical_id_contains'] = isset($data['in_logical_id_contains']) ? $data['in_logical_id_contains'] : null;
        $this->container['in_logical_id_like'] = isset($data['in_logical_id_like']) ? $data['in_logical_id_like'] : null;
        $this->container['in_logical_id_between'] = isset($data['in_logical_id_between']) ? $data['in_logical_id_between'] : null;
        $this->container['in_logical_id_in'] = isset($data['in_logical_id_in']) ? $data['in_logical_id_in'] : null;
        $this->container['quantity_left'] = isset($data['quantity_left']) ? $data['quantity_left'] : null;
        $this->container['quantity_left_greater_than_or_equal_to'] = isset($data['quantity_left_greater_than_or_equal_to']) ? $data['quantity_left_greater_than_or_equal_to'] : null;
        $this->container['quantity_left_greater_than'] = isset($data['quantity_left_greater_than']) ? $data['quantity_left_greater_than'] : null;
        $this->container['quantity_left_less_than'] = isset($data['quantity_left_less_than']) ? $data['quantity_left_less_than'] : null;
        $this->container['quantity_left_less_than_or_equal_to'] = isset($data['quantity_left_less_than_or_equal_to']) ? $data['quantity_left_less_than_or_equal_to'] : null;
        $this->container['quantity_left_not_equal_to'] = isset($data['quantity_left_not_equal_to']) ? $data['quantity_left_not_equal_to'] : null;
        $this->container['quantity_left_between'] = isset($data['quantity_left_between']) ? $data['quantity_left_between'] : null;
        $this->container['quantity_left_in'] = isset($data['quantity_left_in']) ? $data['quantity_left_in'] : null;
        $this->container['quantity_allocated'] = isset($data['quantity_allocated']) ? $data['quantity_allocated'] : null;
        $this->container['quantity_allocated_greater_than_or_equal_to'] = isset($data['quantity_allocated_greater_than_or_equal_to']) ? $data['quantity_allocated_greater_than_or_equal_to'] : null;
        $this->container['quantity_allocated_greater_than'] = isset($data['quantity_allocated_greater_than']) ? $data['quantity_allocated_greater_than'] : null;
        $this->container['quantity_allocated_less_than'] = isset($data['quantity_allocated_less_than']) ? $data['quantity_allocated_less_than'] : null;
        $this->container['quantity_allocated_less_than_or_equal_to'] = isset($data['quantity_allocated_less_than_or_equal_to']) ? $data['quantity_allocated_less_than_or_equal_to'] : null;
        $this->container['quantity_allocated_not_equal_to'] = isset($data['quantity_allocated_not_equal_to']) ? $data['quantity_allocated_not_equal_to'] : null;
        $this->container['quantity_allocated_between'] = isset($data['quantity_allocated_between']) ? $data['quantity_allocated_between'] : null;
        $this->container['quantity_allocated_in'] = isset($data['quantity_allocated_in']) ? $data['quantity_allocated_in'] : null;
        $this->container['pick_allocated'] = isset($data['pick_allocated']) ? $data['pick_allocated'] : null;
        $this->container['pick_allocated_greater_than_or_equal_to'] = isset($data['pick_allocated_greater_than_or_equal_to']) ? $data['pick_allocated_greater_than_or_equal_to'] : null;
        $this->container['pick_allocated_greater_than'] = isset($data['pick_allocated_greater_than']) ? $data['pick_allocated_greater_than'] : null;
        $this->container['pick_allocated_less_than'] = isset($data['pick_allocated_less_than']) ? $data['pick_allocated_less_than'] : null;
        $this->container['pick_allocated_less_than_or_equal_to'] = isset($data['pick_allocated_less_than_or_equal_to']) ? $data['pick_allocated_less_than_or_equal_to'] : null;
        $this->container['pick_allocated_not_equal_to'] = isset($data['pick_allocated_not_equal_to']) ? $data['pick_allocated_not_equal_to'] : null;
        $this->container['pick_allocated_between'] = isset($data['pick_allocated_between']) ? $data['pick_allocated_between'] : null;
        $this->container['pick_allocated_in'] = isset($data['pick_allocated_in']) ? $data['pick_allocated_in'] : null;
        $this->container['ship_allocated'] = isset($data['ship_allocated']) ? $data['ship_allocated'] : null;
        $this->container['ship_allocated_greater_than_or_equal_to'] = isset($data['ship_allocated_greater_than_or_equal_to']) ? $data['ship_allocated_greater_than_or_equal_to'] : null;
        $this->container['ship_allocated_greater_than'] = isset($data['ship_allocated_greater_than']) ? $data['ship_allocated_greater_than'] : null;
        $this->container['ship_allocated_less_than'] = isset($data['ship_allocated_less_than']) ? $data['ship_allocated_less_than'] : null;
        $this->container['ship_allocated_less_than_or_equal_to'] = isset($data['ship_allocated_less_than_or_equal_to']) ? $data['ship_allocated_less_than_or_equal_to'] : null;
        $this->container['ship_allocated_not_equal_to'] = isset($data['ship_allocated_not_equal_to']) ? $data['ship_allocated_not_equal_to'] : null;
        $this->container['ship_allocated_between'] = isset($data['ship_allocated_between']) ? $data['ship_allocated_between'] : null;
        $this->container['ship_allocated_in'] = isset($data['ship_allocated_in']) ? $data['ship_allocated_in'] : null;
        $this->container['forward_requirements'] = isset($data['forward_requirements']) ? $data['forward_requirements'] : null;
        $this->container['forward_requirements_greater_than_or_equal_to'] = isset($data['forward_requirements_greater_than_or_equal_to']) ? $data['forward_requirements_greater_than_or_equal_to'] : null;
        $this->container['forward_requirements_greater_than'] = isset($data['forward_requirements_greater_than']) ? $data['forward_requirements_greater_than'] : null;
        $this->container['forward_requirements_less_than'] = isset($data['forward_requirements_less_than']) ? $data['forward_requirements_less_than'] : null;
        $this->container['forward_requirements_less_than_or_equal_to'] = isset($data['forward_requirements_less_than_or_equal_to']) ? $data['forward_requirements_less_than_or_equal_to'] : null;
        $this->container['forward_requirements_not_equal_to'] = isset($data['forward_requirements_not_equal_to']) ? $data['forward_requirements_not_equal_to'] : null;
        $this->container['forward_requirements_between'] = isset($data['forward_requirements_between']) ? $data['forward_requirements_between'] : null;
        $this->container['forward_requirements_in'] = isset($data['forward_requirements_in']) ? $data['forward_requirements_in'] : null;
        $this->container['transfer_allocated'] = isset($data['transfer_allocated']) ? $data['transfer_allocated'] : null;
        $this->container['transfer_allocated_greater_than_or_equal_to'] = isset($data['transfer_allocated_greater_than_or_equal_to']) ? $data['transfer_allocated_greater_than_or_equal_to'] : null;
        $this->container['transfer_allocated_greater_than'] = isset($data['transfer_allocated_greater_than']) ? $data['transfer_allocated_greater_than'] : null;
        $this->container['transfer_allocated_less_than'] = isset($data['transfer_allocated_less_than']) ? $data['transfer_allocated_less_than'] : null;
        $this->container['transfer_allocated_less_than_or_equal_to'] = isset($data['transfer_allocated_less_than_or_equal_to']) ? $data['transfer_allocated_less_than_or_equal_to'] : null;
        $this->container['transfer_allocated_not_equal_to'] = isset($data['transfer_allocated_not_equal_to']) ? $data['transfer_allocated_not_equal_to'] : null;
        $this->container['transfer_allocated_between'] = isset($data['transfer_allocated_between']) ? $data['transfer_allocated_between'] : null;
        $this->container['transfer_allocated_in'] = isset($data['transfer_allocated_in']) ? $data['transfer_allocated_in'] : null;
        $this->container['bom_allocated'] = isset($data['bom_allocated']) ? $data['bom_allocated'] : null;
        $this->container['bom_allocated_greater_than_or_equal_to'] = isset($data['bom_allocated_greater_than_or_equal_to']) ? $data['bom_allocated_greater_than_or_equal_to'] : null;
        $this->container['bom_allocated_greater_than'] = isset($data['bom_allocated_greater_than']) ? $data['bom_allocated_greater_than'] : null;
        $this->container['bom_allocated_less_than'] = isset($data['bom_allocated_less_than']) ? $data['bom_allocated_less_than'] : null;
        $this->container['bom_allocated_less_than_or_equal_to'] = isset($data['bom_allocated_less_than_or_equal_to']) ? $data['bom_allocated_less_than_or_equal_to'] : null;
        $this->container['bom_allocated_not_equal_to'] = isset($data['bom_allocated_not_equal_to']) ? $data['bom_allocated_not_equal_to'] : null;
        $this->container['bom_allocated_between'] = isset($data['bom_allocated_between']) ? $data['bom_allocated_between'] : null;
        $this->container['bom_allocated_in'] = isset($data['bom_allocated_in']) ? $data['bom_allocated_in'] : null;
        $this->container['skip'] = isset($data['skip']) ? $data['skip'] : null;
        $this->container['take'] = isset($data['take']) ? $data['take'] : null;
        $this->container['order_by'] = isset($data['order_by']) ? $data['order_by'] : null;
        $this->container['order_by_desc'] = isset($data['order_by_desc']) ? $data['order_by_desc'] : null;
        $this->container['include'] = isset($data['include']) ? $data['include'] : null;
        $this->container['fields'] = isset($data['fields']) ? $data['fields'] : null;
        $this->container['meta'] = isset($data['meta']) ? $data['meta'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets in_warehouse_sohid
     *
     * @return string
     */
    public function getInWarehouseSohid()
    {
        return $this->container['in_warehouse_sohid'];
    }

    /**
     * Sets in_warehouse_sohid
     *
     * @param string $in_warehouse_sohid in_warehouse_sohid
     *
     * @return $this
     */
    public function setInWarehouseSohid($in_warehouse_sohid)
    {
        $this->container['in_warehouse_sohid'] = $in_warehouse_sohid;

        return $this;
    }

    /**
     * Gets in_warehouse_sohid_starts_with
     *
     * @return string
     */
    public function getInWarehouseSohidStartsWith()
    {
        return $this->container['in_warehouse_sohid_starts_with'];
    }

    /**
     * Sets in_warehouse_sohid_starts_with
     *
     * @param string $in_warehouse_sohid_starts_with in_warehouse_sohid_starts_with
     *
     * @return $this
     */
    public function setInWarehouseSohidStartsWith($in_warehouse_sohid_starts_with)
    {
        $this->container['in_warehouse_sohid_starts_with'] = $in_warehouse_sohid_starts_with;

        return $this;
    }

    /**
     * Gets in_warehouse_sohid_ends_with
     *
     * @return string
     */
    public function getInWarehouseSohidEndsWith()
    {
        return $this->container['in_warehouse_sohid_ends_with'];
    }

    /**
     * Sets in_warehouse_sohid_ends_with
     *
     * @param string $in_warehouse_sohid_ends_with in_warehouse_sohid_ends_with
     *
     * @return $this
     */
    public function setInWarehouseSohidEndsWith($in_warehouse_sohid_ends_with)
    {
        $this->container['in_warehouse_sohid_ends_with'] = $in_warehouse_sohid_ends_with;

        return $this;
    }

    /**
     * Gets in_warehouse_sohid_contains
     *
     * @return string
     */
    public function getInWarehouseSohidContains()
    {
        return $this->container['in_warehouse_sohid_contains'];
    }

    /**
     * Sets in_warehouse_sohid_contains
     *
     * @param string $in_warehouse_sohid_contains in_warehouse_sohid_contains
     *
     * @return $this
     */
    public function setInWarehouseSohidContains($in_warehouse_sohid_contains)
    {
        $this->container['in_warehouse_sohid_contains'] = $in_warehouse_sohid_contains;

        return $this;
    }

    /**
     * Gets in_warehouse_sohid_like
     *
     * @return string
     */
    public function getInWarehouseSohidLike()
    {
        return $this->container['in_warehouse_sohid_like'];
    }

    /**
     * Sets in_warehouse_sohid_like
     *
     * @param string $in_warehouse_sohid_like in_warehouse_sohid_like
     *
     * @return $this
     */
    public function setInWarehouseSohidLike($in_warehouse_sohid_like)
    {
        $this->container['in_warehouse_sohid_like'] = $in_warehouse_sohid_like;

        return $this;
    }

    /**
     * Gets in_warehouse_sohid_between
     *
     * @return string[]
     */
    public function getInWarehouseSohidBetween()
    {
        return $this->container['in_warehouse_sohid_between'];
    }

    /**
     * Sets in_warehouse_sohid_between
     *
     * @param string[] $in_warehouse_sohid_between in_warehouse_sohid_between
     *
     * @return $this
     */
    public function setInWarehouseSohidBetween($in_warehouse_sohid_between)
    {
        $this->container['in_warehouse_sohid_between'] = $in_warehouse_sohid_between;

        return $this;
    }

    /**
     * Gets in_warehouse_sohid_in
     *
     * @return string[]
     */
    public function getInWarehouseSohidIn()
    {
        return $this->container['in_warehouse_sohid_in'];
    }

    /**
     * Sets in_warehouse_sohid_in
     *
     * @param string[] $in_warehouse_sohid_in in_warehouse_sohid_in
     *
     * @return $this
     */
    public function setInWarehouseSohidIn($in_warehouse_sohid_in)
    {
        $this->container['in_warehouse_sohid_in'] = $in_warehouse_sohid_in;

        return $this;
    }

    /**
     * Gets inventory_id
     *
     * @return string
     */
    public function getInventoryId()
    {
        return $this->container['inventory_id'];
    }

    /**
     * Sets inventory_id
     *
     * @param string $inventory_id inventory_id
     *
     * @return $this
     */
    public function setInventoryId($inventory_id)
    {
        $this->container['inventory_id'] = $inventory_id;

        return $this;
    }

    /**
     * Gets inventory_id_starts_with
     *
     * @return string
     */
    public function getInventoryIdStartsWith()
    {
        return $this->container['inventory_id_starts_with'];
    }

    /**
     * Sets inventory_id_starts_with
     *
     * @param string $inventory_id_starts_with inventory_id_starts_with
     *
     * @return $this
     */
    public function setInventoryIdStartsWith($inventory_id_starts_with)
    {
        $this->container['inventory_id_starts_with'] = $inventory_id_starts_with;

        return $this;
    }

    /**
     * Gets inventory_id_ends_with
     *
     * @return string
     */
    public function getInventoryIdEndsWith()
    {
        return $this->container['inventory_id_ends_with'];
    }

    /**
     * Sets inventory_id_ends_with
     *
     * @param string $inventory_id_ends_with inventory_id_ends_with
     *
     * @return $this
     */
    public function setInventoryIdEndsWith($inventory_id_ends_with)
    {
        $this->container['inventory_id_ends_with'] = $inventory_id_ends_with;

        return $this;
    }

    /**
     * Gets inventory_id_contains
     *
     * @return string
     */
    public function getInventoryIdContains()
    {
        return $this->container['inventory_id_contains'];
    }

    /**
     * Sets inventory_id_contains
     *
     * @param string $inventory_id_contains inventory_id_contains
     *
     * @return $this
     */
    public function setInventoryIdContains($inventory_id_contains)
    {
        $this->container['inventory_id_contains'] = $inventory_id_contains;

        return $this;
    }

    /**
     * Gets inventory_id_like
     *
     * @return string
     */
    public function getInventoryIdLike()
    {
        return $this->container['inventory_id_like'];
    }

    /**
     * Sets inventory_id_like
     *
     * @param string $inventory_id_like inventory_id_like
     *
     * @return $this
     */
    public function setInventoryIdLike($inventory_id_like)
    {
        $this->container['inventory_id_like'] = $inventory_id_like;

        return $this;
    }

    /**
     * Gets inventory_id_between
     *
     * @return string[]
     */
    public function getInventoryIdBetween()
    {
        return $this->container['inventory_id_between'];
    }

    /**
     * Sets inventory_id_between
     *
     * @param string[] $inventory_id_between inventory_id_between
     *
     * @return $this
     */
    public function setInventoryIdBetween($inventory_id_between)
    {
        $this->container['inventory_id_between'] = $inventory_id_between;

        return $this;
    }

    /**
     * Gets inventory_id_in
     *
     * @return string[]
     */
    public function getInventoryIdIn()
    {
        return $this->container['inventory_id_in'];
    }

    /**
     * Sets inventory_id_in
     *
     * @param string[] $inventory_id_in inventory_id_in
     *
     * @return $this
     */
    public function setInventoryIdIn($inventory_id_in)
    {
        $this->container['inventory_id_in'] = $inventory_id_in;

        return $this;
    }

    /**
     * Gets in_logical_id
     *
     * @return string
     */
    public function getInLogicalId()
    {
        return $this->container['in_logical_id'];
    }

    /**
     * Sets in_logical_id
     *
     * @param string $in_logical_id in_logical_id
     *
     * @return $this
     */
    public function setInLogicalId($in_logical_id)
    {
        $this->container['in_logical_id'] = $in_logical_id;

        return $this;
    }

    /**
     * Gets in_logical_id_starts_with
     *
     * @return string
     */
    public function getInLogicalIdStartsWith()
    {
        return $this->container['in_logical_id_starts_with'];
    }

    /**
     * Sets in_logical_id_starts_with
     *
     * @param string $in_logical_id_starts_with in_logical_id_starts_with
     *
     * @return $this
     */
    public function setInLogicalIdStartsWith($in_logical_id_starts_with)
    {
        $this->container['in_logical_id_starts_with'] = $in_logical_id_starts_with;

        return $this;
    }

    /**
     * Gets in_logical_id_ends_with
     *
     * @return string
     */
    public function getInLogicalIdEndsWith()
    {
        return $this->container['in_logical_id_ends_with'];
    }

    /**
     * Sets in_logical_id_ends_with
     *
     * @param string $in_logical_id_ends_with in_logical_id_ends_with
     *
     * @return $this
     */
    public function setInLogicalIdEndsWith($in_logical_id_ends_with)
    {
        $this->container['in_logical_id_ends_with'] = $in_logical_id_ends_with;

        return $this;
    }

    /**
     * Gets in_logical_id_contains
     *
     * @return string
     */
    public function getInLogicalIdContains()
    {
        return $this->container['in_logical_id_contains'];
    }

    /**
     * Sets in_logical_id_contains
     *
     * @param string $in_logical_id_contains in_logical_id_contains
     *
     * @return $this
     */
    public function setInLogicalIdContains($in_logical_id_contains)
    {
        $this->container['in_logical_id_contains'] = $in_logical_id_contains;

        return $this;
    }

    /**
     * Gets in_logical_id_like
     *
     * @return string
     */
    public function getInLogicalIdLike()
    {
        return $this->container['in_logical_id_like'];
    }

    /**
     * Sets in_logical_id_like
     *
     * @param string $in_logical_id_like in_logical_id_like
     *
     * @return $this
     */
    public function setInLogicalIdLike($in_logical_id_like)
    {
        $this->container['in_logical_id_like'] = $in_logical_id_like;

        return $this;
    }

    /**
     * Gets in_logical_id_between
     *
     * @return string[]
     */
    public function getInLogicalIdBetween()
    {
        return $this->container['in_logical_id_between'];
    }

    /**
     * Sets in_logical_id_between
     *
     * @param string[] $in_logical_id_between in_logical_id_between
     *
     * @return $this
     */
    public function setInLogicalIdBetween($in_logical_id_between)
    {
        $this->container['in_logical_id_between'] = $in_logical_id_between;

        return $this;
    }

    /**
     * Gets in_logical_id_in
     *
     * @return string[]
     */
    public function getInLogicalIdIn()
    {
        return $this->container['in_logical_id_in'];
    }

    /**
     * Sets in_logical_id_in
     *
     * @param string[] $in_logical_id_in in_logical_id_in
     *
     * @return $this
     */
    public function setInLogicalIdIn($in_logical_id_in)
    {
        $this->container['in_logical_id_in'] = $in_logical_id_in;

        return $this;
    }

    /**
     * Gets quantity_left
     *
     * @return double
     */
    public function getQuantityLeft()
    {
        return $this->container['quantity_left'];
    }

    /**
     * Sets quantity_left
     *
     * @param double $quantity_left quantity_left
     *
     * @return $this
     */
    public function setQuantityLeft($quantity_left)
    {
        $this->container['quantity_left'] = $quantity_left;

        return $this;
    }

    /**
     * Gets quantity_left_greater_than_or_equal_to
     *
     * @return double
     */
    public function getQuantityLeftGreaterThanOrEqualTo()
    {
        return $this->container['quantity_left_greater_than_or_equal_to'];
    }

    /**
     * Sets quantity_left_greater_than_or_equal_to
     *
     * @param double $quantity_left_greater_than_or_equal_to quantity_left_greater_than_or_equal_to
     *
     * @return $this
     */
    public function setQuantityLeftGreaterThanOrEqualTo($quantity_left_greater_than_or_equal_to)
    {
        $this->container['quantity_left_greater_than_or_equal_to'] = $quantity_left_greater_than_or_equal_to;

        return $this;
    }

    /**
     * Gets quantity_left_greater_than
     *
     * @return double
     */
    public function getQuantityLeftGreaterThan()
    {
        return $this->container['quantity_left_greater_than'];
    }

    /**
     * Sets quantity_left_greater_than
     *
     * @param double $quantity_left_greater_than quantity_left_greater_than
     *
     * @return $this
     */
    public function setQuantityLeftGreaterThan($quantity_left_greater_than)
    {
        $this->container['quantity_left_greater_than'] = $quantity_left_greater_than;

        return $this;
    }

    /**
     * Gets quantity_left_less_than
     *
     * @return double
     */
    public function getQuantityLeftLessThan()
    {
        return $this->container['quantity_left_less_than'];
    }

    /**
     * Sets quantity_left_less_than
     *
     * @param double $quantity_left_less_than quantity_left_less_than
     *
     * @return $this
     */
    public function setQuantityLeftLessThan($quantity_left_less_than)
    {
        $this->container['quantity_left_less_than'] = $quantity_left_less_than;

        return $this;
    }

    /**
     * Gets quantity_left_less_than_or_equal_to
     *
     * @return double
     */
    public function getQuantityLeftLessThanOrEqualTo()
    {
        return $this->container['quantity_left_less_than_or_equal_to'];
    }

    /**
     * Sets quantity_left_less_than_or_equal_to
     *
     * @param double $quantity_left_less_than_or_equal_to quantity_left_less_than_or_equal_to
     *
     * @return $this
     */
    public function setQuantityLeftLessThanOrEqualTo($quantity_left_less_than_or_equal_to)
    {
        $this->container['quantity_left_less_than_or_equal_to'] = $quantity_left_less_than_or_equal_to;

        return $this;
    }

    /**
     * Gets quantity_left_not_equal_to
     *
     * @return double
     */
    public function getQuantityLeftNotEqualTo()
    {
        return $this->container['quantity_left_not_equal_to'];
    }

    /**
     * Sets quantity_left_not_equal_to
     *
     * @param double $quantity_left_not_equal_to quantity_left_not_equal_to
     *
     * @return $this
     */
    public function setQuantityLeftNotEqualTo($quantity_left_not_equal_to)
    {
        $this->container['quantity_left_not_equal_to'] = $quantity_left_not_equal_to;

        return $this;
    }

    /**
     * Gets quantity_left_between
     *
     * @return double[]
     */
    public function getQuantityLeftBetween()
    {
        return $this->container['quantity_left_between'];
    }

    /**
     * Sets quantity_left_between
     *
     * @param double[] $quantity_left_between quantity_left_between
     *
     * @return $this
     */
    public function setQuantityLeftBetween($quantity_left_between)
    {
        $this->container['quantity_left_between'] = $quantity_left_between;

        return $this;
    }

    /**
     * Gets quantity_left_in
     *
     * @return double[]
     */
    public function getQuantityLeftIn()
    {
        return $this->container['quantity_left_in'];
    }

    /**
     * Sets quantity_left_in
     *
     * @param double[] $quantity_left_in quantity_left_in
     *
     * @return $this
     */
    public function setQuantityLeftIn($quantity_left_in)
    {
        $this->container['quantity_left_in'] = $quantity_left_in;

        return $this;
    }

    /**
     * Gets quantity_allocated
     *
     * @return double
     */
    public function getQuantityAllocated()
    {
        return $this->container['quantity_allocated'];
    }

    /**
     * Sets quantity_allocated
     *
     * @param double $quantity_allocated quantity_allocated
     *
     * @return $this
     */
    public function setQuantityAllocated($quantity_allocated)
    {
        $this->container['quantity_allocated'] = $quantity_allocated;

        return $this;
    }

    /**
     * Gets quantity_allocated_greater_than_or_equal_to
     *
     * @return double
     */
    public function getQuantityAllocatedGreaterThanOrEqualTo()
    {
        return $this->container['quantity_allocated_greater_than_or_equal_to'];
    }

    /**
     * Sets quantity_allocated_greater_than_or_equal_to
     *
     * @param double $quantity_allocated_greater_than_or_equal_to quantity_allocated_greater_than_or_equal_to
     *
     * @return $this
     */
    public function setQuantityAllocatedGreaterThanOrEqualTo($quantity_allocated_greater_than_or_equal_to)
    {
        $this->container['quantity_allocated_greater_than_or_equal_to'] = $quantity_allocated_greater_than_or_equal_to;

        return $this;
    }

    /**
     * Gets quantity_allocated_greater_than
     *
     * @return double
     */
    public function getQuantityAllocatedGreaterThan()
    {
        return $this->container['quantity_allocated_greater_than'];
    }

    /**
     * Sets quantity_allocated_greater_than
     *
     * @param double $quantity_allocated_greater_than quantity_allocated_greater_than
     *
     * @return $this
     */
    public function setQuantityAllocatedGreaterThan($quantity_allocated_greater_than)
    {
        $this->container['quantity_allocated_greater_than'] = $quantity_allocated_greater_than;

        return $this;
    }

    /**
     * Gets quantity_allocated_less_than
     *
     * @return double
     */
    public function getQuantityAllocatedLessThan()
    {
        return $this->container['quantity_allocated_less_than'];
    }

    /**
     * Sets quantity_allocated_less_than
     *
     * @param double $quantity_allocated_less_than quantity_allocated_less_than
     *
     * @return $this
     */
    public function setQuantityAllocatedLessThan($quantity_allocated_less_than)
    {
        $this->container['quantity_allocated_less_than'] = $quantity_allocated_less_than;

        return $this;
    }

    /**
     * Gets quantity_allocated_less_than_or_equal_to
     *
     * @return double
     */
    public function getQuantityAllocatedLessThanOrEqualTo()
    {
        return $this->container['quantity_allocated_less_than_or_equal_to'];
    }

    /**
     * Sets quantity_allocated_less_than_or_equal_to
     *
     * @param double $quantity_allocated_less_than_or_equal_to quantity_allocated_less_than_or_equal_to
     *
     * @return $this
     */
    public function setQuantityAllocatedLessThanOrEqualTo($quantity_allocated_less_than_or_equal_to)
    {
        $this->container['quantity_allocated_less_than_or_equal_to'] = $quantity_allocated_less_than_or_equal_to;

        return $this;
    }

    /**
     * Gets quantity_allocated_not_equal_to
     *
     * @return double
     */
    public function getQuantityAllocatedNotEqualTo()
    {
        return $this->container['quantity_allocated_not_equal_to'];
    }

    /**
     * Sets quantity_allocated_not_equal_to
     *
     * @param double $quantity_allocated_not_equal_to quantity_allocated_not_equal_to
     *
     * @return $this
     */
    public function setQuantityAllocatedNotEqualTo($quantity_allocated_not_equal_to)
    {
        $this->container['quantity_allocated_not_equal_to'] = $quantity_allocated_not_equal_to;

        return $this;
    }

    /**
     * Gets quantity_allocated_between
     *
     * @return double[]
     */
    public function getQuantityAllocatedBetween()
    {
        return $this->container['quantity_allocated_between'];
    }

    /**
     * Sets quantity_allocated_between
     *
     * @param double[] $quantity_allocated_between quantity_allocated_between
     *
     * @return $this
     */
    public function setQuantityAllocatedBetween($quantity_allocated_between)
    {
        $this->container['quantity_allocated_between'] = $quantity_allocated_between;

        return $this;
    }

    /**
     * Gets quantity_allocated_in
     *
     * @return double[]
     */
    public function getQuantityAllocatedIn()
    {
        return $this->container['quantity_allocated_in'];
    }

    /**
     * Sets quantity_allocated_in
     *
     * @param double[] $quantity_allocated_in quantity_allocated_in
     *
     * @return $this
     */
    public function setQuantityAllocatedIn($quantity_allocated_in)
    {
        $this->container['quantity_allocated_in'] = $quantity_allocated_in;

        return $this;
    }

    /**
     * Gets pick_allocated
     *
     * @return double
     */
    public function getPickAllocated()
    {
        return $this->container['pick_allocated'];
    }

    /**
     * Sets pick_allocated
     *
     * @param double $pick_allocated pick_allocated
     *
     * @return $this
     */
    public function setPickAllocated($pick_allocated)
    {
        $this->container['pick_allocated'] = $pick_allocated;

        return $this;
    }

    /**
     * Gets pick_allocated_greater_than_or_equal_to
     *
     * @return double
     */
    public function getPickAllocatedGreaterThanOrEqualTo()
    {
        return $this->container['pick_allocated_greater_than_or_equal_to'];
    }

    /**
     * Sets pick_allocated_greater_than_or_equal_to
     *
     * @param double $pick_allocated_greater_than_or_equal_to pick_allocated_greater_than_or_equal_to
     *
     * @return $this
     */
    public function setPickAllocatedGreaterThanOrEqualTo($pick_allocated_greater_than_or_equal_to)
    {
        $this->container['pick_allocated_greater_than_or_equal_to'] = $pick_allocated_greater_than_or_equal_to;

        return $this;
    }

    /**
     * Gets pick_allocated_greater_than
     *
     * @return double
     */
    public function getPickAllocatedGreaterThan()
    {
        return $this->container['pick_allocated_greater_than'];
    }

    /**
     * Sets pick_allocated_greater_than
     *
     * @param double $pick_allocated_greater_than pick_allocated_greater_than
     *
     * @return $this
     */
    public function setPickAllocatedGreaterThan($pick_allocated_greater_than)
    {
        $this->container['pick_allocated_greater_than'] = $pick_allocated_greater_than;

        return $this;
    }

    /**
     * Gets pick_allocated_less_than
     *
     * @return double
     */
    public function getPickAllocatedLessThan()
    {
        return $this->container['pick_allocated_less_than'];
    }

    /**
     * Sets pick_allocated_less_than
     *
     * @param double $pick_allocated_less_than pick_allocated_less_than
     *
     * @return $this
     */
    public function setPickAllocatedLessThan($pick_allocated_less_than)
    {
        $this->container['pick_allocated_less_than'] = $pick_allocated_less_than;

        return $this;
    }

    /**
     * Gets pick_allocated_less_than_or_equal_to
     *
     * @return double
     */
    public function getPickAllocatedLessThanOrEqualTo()
    {
        return $this->container['pick_allocated_less_than_or_equal_to'];
    }

    /**
     * Sets pick_allocated_less_than_or_equal_to
     *
     * @param double $pick_allocated_less_than_or_equal_to pick_allocated_less_than_or_equal_to
     *
     * @return $this
     */
    public function setPickAllocatedLessThanOrEqualTo($pick_allocated_less_than_or_equal_to)
    {
        $this->container['pick_allocated_less_than_or_equal_to'] = $pick_allocated_less_than_or_equal_to;

        return $this;
    }

    /**
     * Gets pick_allocated_not_equal_to
     *
     * @return double
     */
    public function getPickAllocatedNotEqualTo()
    {
        return $this->container['pick_allocated_not_equal_to'];
    }

    /**
     * Sets pick_allocated_not_equal_to
     *
     * @param double $pick_allocated_not_equal_to pick_allocated_not_equal_to
     *
     * @return $this
     */
    public function setPickAllocatedNotEqualTo($pick_allocated_not_equal_to)
    {
        $this->container['pick_allocated_not_equal_to'] = $pick_allocated_not_equal_to;

        return $this;
    }

    /**
     * Gets pick_allocated_between
     *
     * @return double[]
     */
    public function getPickAllocatedBetween()
    {
        return $this->container['pick_allocated_between'];
    }

    /**
     * Sets pick_allocated_between
     *
     * @param double[] $pick_allocated_between pick_allocated_between
     *
     * @return $this
     */
    public function setPickAllocatedBetween($pick_allocated_between)
    {
        $this->container['pick_allocated_between'] = $pick_allocated_between;

        return $this;
    }

    /**
     * Gets pick_allocated_in
     *
     * @return double[]
     */
    public function getPickAllocatedIn()
    {
        return $this->container['pick_allocated_in'];
    }

    /**
     * Sets pick_allocated_in
     *
     * @param double[] $pick_allocated_in pick_allocated_in
     *
     * @return $this
     */
    public function setPickAllocatedIn($pick_allocated_in)
    {
        $this->container['pick_allocated_in'] = $pick_allocated_in;

        return $this;
    }

    /**
     * Gets ship_allocated
     *
     * @return double
     */
    public function getShipAllocated()
    {
        return $this->container['ship_allocated'];
    }

    /**
     * Sets ship_allocated
     *
     * @param double $ship_allocated ship_allocated
     *
     * @return $this
     */
    public function setShipAllocated($ship_allocated)
    {
        $this->container['ship_allocated'] = $ship_allocated;

        return $this;
    }

    /**
     * Gets ship_allocated_greater_than_or_equal_to
     *
     * @return double
     */
    public function getShipAllocatedGreaterThanOrEqualTo()
    {
        return $this->container['ship_allocated_greater_than_or_equal_to'];
    }

    /**
     * Sets ship_allocated_greater_than_or_equal_to
     *
     * @param double $ship_allocated_greater_than_or_equal_to ship_allocated_greater_than_or_equal_to
     *
     * @return $this
     */
    public function setShipAllocatedGreaterThanOrEqualTo($ship_allocated_greater_than_or_equal_to)
    {
        $this->container['ship_allocated_greater_than_or_equal_to'] = $ship_allocated_greater_than_or_equal_to;

        return $this;
    }

    /**
     * Gets ship_allocated_greater_than
     *
     * @return double
     */
    public function getShipAllocatedGreaterThan()
    {
        return $this->container['ship_allocated_greater_than'];
    }

    /**
     * Sets ship_allocated_greater_than
     *
     * @param double $ship_allocated_greater_than ship_allocated_greater_than
     *
     * @return $this
     */
    public function setShipAllocatedGreaterThan($ship_allocated_greater_than)
    {
        $this->container['ship_allocated_greater_than'] = $ship_allocated_greater_than;

        return $this;
    }

    /**
     * Gets ship_allocated_less_than
     *
     * @return double
     */
    public function getShipAllocatedLessThan()
    {
        return $this->container['ship_allocated_less_than'];
    }

    /**
     * Sets ship_allocated_less_than
     *
     * @param double $ship_allocated_less_than ship_allocated_less_than
     *
     * @return $this
     */
    public function setShipAllocatedLessThan($ship_allocated_less_than)
    {
        $this->container['ship_allocated_less_than'] = $ship_allocated_less_than;

        return $this;
    }

    /**
     * Gets ship_allocated_less_than_or_equal_to
     *
     * @return double
     */
    public function getShipAllocatedLessThanOrEqualTo()
    {
        return $this->container['ship_allocated_less_than_or_equal_to'];
    }

    /**
     * Sets ship_allocated_less_than_or_equal_to
     *
     * @param double $ship_allocated_less_than_or_equal_to ship_allocated_less_than_or_equal_to
     *
     * @return $this
     */
    public function setShipAllocatedLessThanOrEqualTo($ship_allocated_less_than_or_equal_to)
    {
        $this->container['ship_allocated_less_than_or_equal_to'] = $ship_allocated_less_than_or_equal_to;

        return $this;
    }

    /**
     * Gets ship_allocated_not_equal_to
     *
     * @return double
     */
    public function getShipAllocatedNotEqualTo()
    {
        return $this->container['ship_allocated_not_equal_to'];
    }

    /**
     * Sets ship_allocated_not_equal_to
     *
     * @param double $ship_allocated_not_equal_to ship_allocated_not_equal_to
     *
     * @return $this
     */
    public function setShipAllocatedNotEqualTo($ship_allocated_not_equal_to)
    {
        $this->container['ship_allocated_not_equal_to'] = $ship_allocated_not_equal_to;

        return $this;
    }

    /**
     * Gets ship_allocated_between
     *
     * @return double[]
     */
    public function getShipAllocatedBetween()
    {
        return $this->container['ship_allocated_between'];
    }

    /**
     * Sets ship_allocated_between
     *
     * @param double[] $ship_allocated_between ship_allocated_between
     *
     * @return $this
     */
    public function setShipAllocatedBetween($ship_allocated_between)
    {
        $this->container['ship_allocated_between'] = $ship_allocated_between;

        return $this;
    }

    /**
     * Gets ship_allocated_in
     *
     * @return double[]
     */
    public function getShipAllocatedIn()
    {
        return $this->container['ship_allocated_in'];
    }

    /**
     * Sets ship_allocated_in
     *
     * @param double[] $ship_allocated_in ship_allocated_in
     *
     * @return $this
     */
    public function setShipAllocatedIn($ship_allocated_in)
    {
        $this->container['ship_allocated_in'] = $ship_allocated_in;

        return $this;
    }

    /**
     * Gets forward_requirements
     *
     * @return double
     */
    public function getForwardRequirements()
    {
        return $this->container['forward_requirements'];
    }

    /**
     * Sets forward_requirements
     *
     * @param double $forward_requirements forward_requirements
     *
     * @return $this
     */
    public function setForwardRequirements($forward_requirements)
    {
        $this->container['forward_requirements'] = $forward_requirements;

        return $this;
    }

    /**
     * Gets forward_requirements_greater_than_or_equal_to
     *
     * @return double
     */
    public function getForwardRequirementsGreaterThanOrEqualTo()
    {
        return $this->container['forward_requirements_greater_than_or_equal_to'];
    }

    /**
     * Sets forward_requirements_greater_than_or_equal_to
     *
     * @param double $forward_requirements_greater_than_or_equal_to forward_requirements_greater_than_or_equal_to
     *
     * @return $this
     */
    public function setForwardRequirementsGreaterThanOrEqualTo($forward_requirements_greater_than_or_equal_to)
    {
        $this->container['forward_requirements_greater_than_or_equal_to'] = $forward_requirements_greater_than_or_equal_to;

        return $this;
    }

    /**
     * Gets forward_requirements_greater_than
     *
     * @return double
     */
    public function getForwardRequirementsGreaterThan()
    {
        return $this->container['forward_requirements_greater_than'];
    }

    /**
     * Sets forward_requirements_greater_than
     *
     * @param double $forward_requirements_greater_than forward_requirements_greater_than
     *
     * @return $this
     */
    public function setForwardRequirementsGreaterThan($forward_requirements_greater_than)
    {
        $this->container['forward_requirements_greater_than'] = $forward_requirements_greater_than;

        return $this;
    }

    /**
     * Gets forward_requirements_less_than
     *
     * @return double
     */
    public function getForwardRequirementsLessThan()
    {
        return $this->container['forward_requirements_less_than'];
    }

    /**
     * Sets forward_requirements_less_than
     *
     * @param double $forward_requirements_less_than forward_requirements_less_than
     *
     * @return $this
     */
    public function setForwardRequirementsLessThan($forward_requirements_less_than)
    {
        $this->container['forward_requirements_less_than'] = $forward_requirements_less_than;

        return $this;
    }

    /**
     * Gets forward_requirements_less_than_or_equal_to
     *
     * @return double
     */
    public function getForwardRequirementsLessThanOrEqualTo()
    {
        return $this->container['forward_requirements_less_than_or_equal_to'];
    }

    /**
     * Sets forward_requirements_less_than_or_equal_to
     *
     * @param double $forward_requirements_less_than_or_equal_to forward_requirements_less_than_or_equal_to
     *
     * @return $this
     */
    public function setForwardRequirementsLessThanOrEqualTo($forward_requirements_less_than_or_equal_to)
    {
        $this->container['forward_requirements_less_than_or_equal_to'] = $forward_requirements_less_than_or_equal_to;

        return $this;
    }

    /**
     * Gets forward_requirements_not_equal_to
     *
     * @return double
     */
    public function getForwardRequirementsNotEqualTo()
    {
        return $this->container['forward_requirements_not_equal_to'];
    }

    /**
     * Sets forward_requirements_not_equal_to
     *
     * @param double $forward_requirements_not_equal_to forward_requirements_not_equal_to
     *
     * @return $this
     */
    public function setForwardRequirementsNotEqualTo($forward_requirements_not_equal_to)
    {
        $this->container['forward_requirements_not_equal_to'] = $forward_requirements_not_equal_to;

        return $this;
    }

    /**
     * Gets forward_requirements_between
     *
     * @return double[]
     */
    public function getForwardRequirementsBetween()
    {
        return $this->container['forward_requirements_between'];
    }

    /**
     * Sets forward_requirements_between
     *
     * @param double[] $forward_requirements_between forward_requirements_between
     *
     * @return $this
     */
    public function setForwardRequirementsBetween($forward_requirements_between)
    {
        $this->container['forward_requirements_between'] = $forward_requirements_between;

        return $this;
    }

    /**
     * Gets forward_requirements_in
     *
     * @return double[]
     */
    public function getForwardRequirementsIn()
    {
        return $this->container['forward_requirements_in'];
    }

    /**
     * Sets forward_requirements_in
     *
     * @param double[] $forward_requirements_in forward_requirements_in
     *
     * @return $this
     */
    public function setForwardRequirementsIn($forward_requirements_in)
    {
        $this->container['forward_requirements_in'] = $forward_requirements_in;

        return $this;
    }

    /**
     * Gets transfer_allocated
     *
     * @return double
     */
    public function getTransferAllocated()
    {
        return $this->container['transfer_allocated'];
    }

    /**
     * Sets transfer_allocated
     *
     * @param double $transfer_allocated transfer_allocated
     *
     * @return $this
     */
    public function setTransferAllocated($transfer_allocated)
    {
        $this->container['transfer_allocated'] = $transfer_allocated;

        return $this;
    }

    /**
     * Gets transfer_allocated_greater_than_or_equal_to
     *
     * @return double
     */
    public function getTransferAllocatedGreaterThanOrEqualTo()
    {
        return $this->container['transfer_allocated_greater_than_or_equal_to'];
    }

    /**
     * Sets transfer_allocated_greater_than_or_equal_to
     *
     * @param double $transfer_allocated_greater_than_or_equal_to transfer_allocated_greater_than_or_equal_to
     *
     * @return $this
     */
    public function setTransferAllocatedGreaterThanOrEqualTo($transfer_allocated_greater_than_or_equal_to)
    {
        $this->container['transfer_allocated_greater_than_or_equal_to'] = $transfer_allocated_greater_than_or_equal_to;

        return $this;
    }

    /**
     * Gets transfer_allocated_greater_than
     *
     * @return double
     */
    public function getTransferAllocatedGreaterThan()
    {
        return $this->container['transfer_allocated_greater_than'];
    }

    /**
     * Sets transfer_allocated_greater_than
     *
     * @param double $transfer_allocated_greater_than transfer_allocated_greater_than
     *
     * @return $this
     */
    public function setTransferAllocatedGreaterThan($transfer_allocated_greater_than)
    {
        $this->container['transfer_allocated_greater_than'] = $transfer_allocated_greater_than;

        return $this;
    }

    /**
     * Gets transfer_allocated_less_than
     *
     * @return double
     */
    public function getTransferAllocatedLessThan()
    {
        return $this->container['transfer_allocated_less_than'];
    }

    /**
     * Sets transfer_allocated_less_than
     *
     * @param double $transfer_allocated_less_than transfer_allocated_less_than
     *
     * @return $this
     */
    public function setTransferAllocatedLessThan($transfer_allocated_less_than)
    {
        $this->container['transfer_allocated_less_than'] = $transfer_allocated_less_than;

        return $this;
    }

    /**
     * Gets transfer_allocated_less_than_or_equal_to
     *
     * @return double
     */
    public function getTransferAllocatedLessThanOrEqualTo()
    {
        return $this->container['transfer_allocated_less_than_or_equal_to'];
    }

    /**
     * Sets transfer_allocated_less_than_or_equal_to
     *
     * @param double $transfer_allocated_less_than_or_equal_to transfer_allocated_less_than_or_equal_to
     *
     * @return $this
     */
    public function setTransferAllocatedLessThanOrEqualTo($transfer_allocated_less_than_or_equal_to)
    {
        $this->container['transfer_allocated_less_than_or_equal_to'] = $transfer_allocated_less_than_or_equal_to;

        return $this;
    }

    /**
     * Gets transfer_allocated_not_equal_to
     *
     * @return double
     */
    public function getTransferAllocatedNotEqualTo()
    {
        return $this->container['transfer_allocated_not_equal_to'];
    }

    /**
     * Sets transfer_allocated_not_equal_to
     *
     * @param double $transfer_allocated_not_equal_to transfer_allocated_not_equal_to
     *
     * @return $this
     */
    public function setTransferAllocatedNotEqualTo($transfer_allocated_not_equal_to)
    {
        $this->container['transfer_allocated_not_equal_to'] = $transfer_allocated_not_equal_to;

        return $this;
    }

    /**
     * Gets transfer_allocated_between
     *
     * @return double[]
     */
    public function getTransferAllocatedBetween()
    {
        return $this->container['transfer_allocated_between'];
    }

    /**
     * Sets transfer_allocated_between
     *
     * @param double[] $transfer_allocated_between transfer_allocated_between
     *
     * @return $this
     */
    public function setTransferAllocatedBetween($transfer_allocated_between)
    {
        $this->container['transfer_allocated_between'] = $transfer_allocated_between;

        return $this;
    }

    /**
     * Gets transfer_allocated_in
     *
     * @return double[]
     */
    public function getTransferAllocatedIn()
    {
        return $this->container['transfer_allocated_in'];
    }

    /**
     * Sets transfer_allocated_in
     *
     * @param double[] $transfer_allocated_in transfer_allocated_in
     *
     * @return $this
     */
    public function setTransferAllocatedIn($transfer_allocated_in)
    {
        $this->container['transfer_allocated_in'] = $transfer_allocated_in;

        return $this;
    }

    /**
     * Gets bom_allocated
     *
     * @return double
     */
    public function getBomAllocated()
    {
        return $this->container['bom_allocated'];
    }

    /**
     * Sets bom_allocated
     *
     * @param double $bom_allocated bom_allocated
     *
     * @return $this
     */
    public function setBomAllocated($bom_allocated)
    {
        $this->container['bom_allocated'] = $bom_allocated;

        return $this;
    }

    /**
     * Gets bom_allocated_greater_than_or_equal_to
     *
     * @return double
     */
    public function getBomAllocatedGreaterThanOrEqualTo()
    {
        return $this->container['bom_allocated_greater_than_or_equal_to'];
    }

    /**
     * Sets bom_allocated_greater_than_or_equal_to
     *
     * @param double $bom_allocated_greater_than_or_equal_to bom_allocated_greater_than_or_equal_to
     *
     * @return $this
     */
    public function setBomAllocatedGreaterThanOrEqualTo($bom_allocated_greater_than_or_equal_to)
    {
        $this->container['bom_allocated_greater_than_or_equal_to'] = $bom_allocated_greater_than_or_equal_to;

        return $this;
    }

    /**
     * Gets bom_allocated_greater_than
     *
     * @return double
     */
    public function getBomAllocatedGreaterThan()
    {
        return $this->container['bom_allocated_greater_than'];
    }

    /**
     * Sets bom_allocated_greater_than
     *
     * @param double $bom_allocated_greater_than bom_allocated_greater_than
     *
     * @return $this
     */
    public function setBomAllocatedGreaterThan($bom_allocated_greater_than)
    {
        $this->container['bom_allocated_greater_than'] = $bom_allocated_greater_than;

        return $this;
    }

    /**
     * Gets bom_allocated_less_than
     *
     * @return double
     */
    public function getBomAllocatedLessThan()
    {
        return $this->container['bom_allocated_less_than'];
    }

    /**
     * Sets bom_allocated_less_than
     *
     * @param double $bom_allocated_less_than bom_allocated_less_than
     *
     * @return $this
     */
    public function setBomAllocatedLessThan($bom_allocated_less_than)
    {
        $this->container['bom_allocated_less_than'] = $bom_allocated_less_than;

        return $this;
    }

    /**
     * Gets bom_allocated_less_than_or_equal_to
     *
     * @return double
     */
    public function getBomAllocatedLessThanOrEqualTo()
    {
        return $this->container['bom_allocated_less_than_or_equal_to'];
    }

    /**
     * Sets bom_allocated_less_than_or_equal_to
     *
     * @param double $bom_allocated_less_than_or_equal_to bom_allocated_less_than_or_equal_to
     *
     * @return $this
     */
    public function setBomAllocatedLessThanOrEqualTo($bom_allocated_less_than_or_equal_to)
    {
        $this->container['bom_allocated_less_than_or_equal_to'] = $bom_allocated_less_than_or_equal_to;

        return $this;
    }

    /**
     * Gets bom_allocated_not_equal_to
     *
     * @return double
     */
    public function getBomAllocatedNotEqualTo()
    {
        return $this->container['bom_allocated_not_equal_to'];
    }

    /**
     * Sets bom_allocated_not_equal_to
     *
     * @param double $bom_allocated_not_equal_to bom_allocated_not_equal_to
     *
     * @return $this
     */
    public function setBomAllocatedNotEqualTo($bom_allocated_not_equal_to)
    {
        $this->container['bom_allocated_not_equal_to'] = $bom_allocated_not_equal_to;

        return $this;
    }

    /**
     * Gets bom_allocated_between
     *
     * @return double[]
     */
    public function getBomAllocatedBetween()
    {
        return $this->container['bom_allocated_between'];
    }

    /**
     * Sets bom_allocated_between
     *
     * @param double[] $bom_allocated_between bom_allocated_between
     *
     * @return $this
     */
    public function setBomAllocatedBetween($bom_allocated_between)
    {
        $this->container['bom_allocated_between'] = $bom_allocated_between;

        return $this;
    }

    /**
     * Gets bom_allocated_in
     *
     * @return double[]
     */
    public function getBomAllocatedIn()
    {
        return $this->container['bom_allocated_in'];
    }

    /**
     * Sets bom_allocated_in
     *
     * @param double[] $bom_allocated_in bom_allocated_in
     *
     * @return $this
     */
    public function setBomAllocatedIn($bom_allocated_in)
    {
        $this->container['bom_allocated_in'] = $bom_allocated_in;

        return $this;
    }

    /**
     * Gets skip
     *
     * @return int
     */
    public function getSkip()
    {
        return $this->container['skip'];
    }

    /**
     * Sets skip
     *
     * @param int $skip skip
     *
     * @return $this
     */
    public function setSkip($skip)
    {
        $this->container['skip'] = $skip;

        return $this;
    }

    /**
     * Gets take
     *
     * @return int
     */
    public function getTake()
    {
        return $this->container['take'];
    }

    /**
     * Sets take
     *
     * @param int $take take
     *
     * @return $this
     */
    public function setTake($take)
    {
        $this->container['take'] = $take;

        return $this;
    }

    /**
     * Gets order_by
     *
     * @return string
     */
    public function getOrderBy()
    {
        return $this->container['order_by'];
    }

    /**
     * Sets order_by
     *
     * @param string $order_by order_by
     *
     * @return $this
     */
    public function setOrderBy($order_by)
    {
        $this->container['order_by'] = $order_by;

        return $this;
    }

    /**
     * Gets order_by_desc
     *
     * @return string
     */
    public function getOrderByDesc()
    {
        return $this->container['order_by_desc'];
    }

    /**
     * Sets order_by_desc
     *
     * @param string $order_by_desc order_by_desc
     *
     * @return $this
     */
    public function setOrderByDesc($order_by_desc)
    {
        $this->container['order_by_desc'] = $order_by_desc;

        return $this;
    }

    /**
     * Gets include
     *
     * @return string
     */
    public function getInclude()
    {
        return $this->container['include'];
    }

    /**
     * Sets include
     *
     * @param string $include include
     *
     * @return $this
     */
    public function setInclude($include)
    {
        $this->container['include'] = $include;

        return $this;
    }

    /**
     * Gets fields
     *
     * @return string
     */
    public function getFields()
    {
        return $this->container['fields'];
    }

    /**
     * Sets fields
     *
     * @param string $fields fields
     *
     * @return $this
     */
    public function setFields($fields)
    {
        $this->container['fields'] = $fields;

        return $this;
    }

    /**
     * Gets meta
     *
     * @return \Jiwa\Model\DictionaryStringString_
     */
    public function getMeta()
    {
        return $this->container['meta'];
    }

    /**
     * Sets meta
     *
     * @param \Jiwa\Model\DictionaryStringString_ $meta meta
     *
     * @return $this
     */
    public function setMeta($meta)
    {
        $this->container['meta'] = $meta;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(
                ObjectSerializer::sanitizeForSerialization($this),
                JSON_PRETTY_PRINT
            );
        }

        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}



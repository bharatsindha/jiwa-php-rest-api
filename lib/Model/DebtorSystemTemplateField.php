<?php
/**
 * DebtorSystemTemplateField
 *
 * PHP version 5
 *
 * @category Class
 * @package  Jiwa
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * JiwaAPI
 *
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: 1.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 * Swagger Codegen version: 2.4.28-SNAPSHOT
 */

/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Jiwa\JiwaModel;

use \ArrayAccess;
use \Jiwa\ObjectSerializer;

/**
 * DebtorSystemTemplateField Class Doc Comment
 *
 * @category Class
 * @description DebtorSystemTemplateField
 * @package  Jiwa
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class DebtorSystemTemplateField implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $swaggerModelName = 'DebtorSystemTemplateField';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerTypes = [
        'field_type' => 'int',
        'line_number' => 'int',
        'system_template_field_id' => 'string',
        'name' => 'string',
        'combo_text' => 'string',
        'script_format_cell' => 'string',
        'script_button_clicked' => 'string',
        'script_read_data' => 'string',
        'default_value' => 'string',
        'grid_handler_code' => 'string'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerFormats = [
        'field_type' => 'int32',
        'line_number' => 'int32',
        'system_template_field_id' => null,
        'name' => null,
        'combo_text' => null,
        'script_format_cell' => null,
        'script_button_clicked' => null,
        'script_read_data' => null,
        'default_value' => null,
        'grid_handler_code' => null
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerFormats()
    {
        return self::$swaggerFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'field_type' => 'FieldType',
        'line_number' => 'LineNumber',
        'system_template_field_id' => 'SystemTemplateFieldID',
        'name' => 'Name',
        'combo_text' => 'ComboText',
        'script_format_cell' => 'ScriptFormatCell',
        'script_button_clicked' => 'ScriptButtonClicked',
        'script_read_data' => 'ScriptReadData',
        'default_value' => 'DefaultValue',
        'grid_handler_code' => 'GridHandlerCode'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'field_type' => 'setFieldType',
        'line_number' => 'setLineNumber',
        'system_template_field_id' => 'setSystemTemplateFieldId',
        'name' => 'setName',
        'combo_text' => 'setComboText',
        'script_format_cell' => 'setScriptFormatCell',
        'script_button_clicked' => 'setScriptButtonClicked',
        'script_read_data' => 'setScriptReadData',
        'default_value' => 'setDefaultValue',
        'grid_handler_code' => 'setGridHandlerCode'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'field_type' => 'getFieldType',
        'line_number' => 'getLineNumber',
        'system_template_field_id' => 'getSystemTemplateFieldId',
        'name' => 'getName',
        'combo_text' => 'getComboText',
        'script_format_cell' => 'getScriptFormatCell',
        'script_button_clicked' => 'getScriptButtonClicked',
        'script_read_data' => 'getScriptReadData',
        'default_value' => 'getDefaultValue',
        'grid_handler_code' => 'getGridHandlerCode'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$swaggerModelName;
    }

    

    

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['field_type'] = isset($data['field_type']) ? $data['field_type'] : null;
        $this->container['line_number'] = isset($data['line_number']) ? $data['line_number'] : null;
        $this->container['system_template_field_id'] = isset($data['system_template_field_id']) ? $data['system_template_field_id'] : null;
        $this->container['name'] = isset($data['name']) ? $data['name'] : null;
        $this->container['combo_text'] = isset($data['combo_text']) ? $data['combo_text'] : null;
        $this->container['script_format_cell'] = isset($data['script_format_cell']) ? $data['script_format_cell'] : null;
        $this->container['script_button_clicked'] = isset($data['script_button_clicked']) ? $data['script_button_clicked'] : null;
        $this->container['script_read_data'] = isset($data['script_read_data']) ? $data['script_read_data'] : null;
        $this->container['default_value'] = isset($data['default_value']) ? $data['default_value'] : null;
        $this->container['grid_handler_code'] = isset($data['grid_handler_code']) ? $data['grid_handler_code'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets field_type
     *
     * @return int
     */
    public function getFieldType()
    {
        return $this->container['field_type'];
    }

    /**
     * Sets field_type
     *
     * @param int $field_type field_type
     *
     * @return $this
     */
    public function setFieldType($field_type)
    {
        $this->container['field_type'] = $field_type;

        return $this;
    }

    /**
     * Gets line_number
     *
     * @return int
     */
    public function getLineNumber()
    {
        return $this->container['line_number'];
    }

    /**
     * Sets line_number
     *
     * @param int $line_number line_number
     *
     * @return $this
     */
    public function setLineNumber($line_number)
    {
        $this->container['line_number'] = $line_number;

        return $this;
    }

    /**
     * Gets system_template_field_id
     *
     * @return string
     */
    public function getSystemTemplateFieldId()
    {
        return $this->container['system_template_field_id'];
    }

    /**
     * Sets system_template_field_id
     *
     * @param string $system_template_field_id system_template_field_id
     *
     * @return $this
     */
    public function setSystemTemplateFieldId($system_template_field_id)
    {
        $this->container['system_template_field_id'] = $system_template_field_id;

        return $this;
    }

    /**
     * Gets name
     *
     * @return string
     */
    public function getName()
    {
        return $this->container['name'];
    }

    /**
     * Sets name
     *
     * @param string $name name
     *
     * @return $this
     */
    public function setName($name)
    {
        $this->container['name'] = $name;

        return $this;
    }

    /**
     * Gets combo_text
     *
     * @return string
     */
    public function getComboText()
    {
        return $this->container['combo_text'];
    }

    /**
     * Sets combo_text
     *
     * @param string $combo_text combo_text
     *
     * @return $this
     */
    public function setComboText($combo_text)
    {
        $this->container['combo_text'] = $combo_text;

        return $this;
    }

    /**
     * Gets script_format_cell
     *
     * @return string
     */
    public function getScriptFormatCell()
    {
        return $this->container['script_format_cell'];
    }

    /**
     * Sets script_format_cell
     *
     * @param string $script_format_cell script_format_cell
     *
     * @return $this
     */
    public function setScriptFormatCell($script_format_cell)
    {
        $this->container['script_format_cell'] = $script_format_cell;

        return $this;
    }

    /**
     * Gets script_button_clicked
     *
     * @return string
     */
    public function getScriptButtonClicked()
    {
        return $this->container['script_button_clicked'];
    }

    /**
     * Sets script_button_clicked
     *
     * @param string $script_button_clicked script_button_clicked
     *
     * @return $this
     */
    public function setScriptButtonClicked($script_button_clicked)
    {
        $this->container['script_button_clicked'] = $script_button_clicked;

        return $this;
    }

    /**
     * Gets script_read_data
     *
     * @return string
     */
    public function getScriptReadData()
    {
        return $this->container['script_read_data'];
    }

    /**
     * Sets script_read_data
     *
     * @param string $script_read_data script_read_data
     *
     * @return $this
     */
    public function setScriptReadData($script_read_data)
    {
        $this->container['script_read_data'] = $script_read_data;

        return $this;
    }

    /**
     * Gets default_value
     *
     * @return string
     */
    public function getDefaultValue()
    {
        return $this->container['default_value'];
    }

    /**
     * Sets default_value
     *
     * @param string $default_value default_value
     *
     * @return $this
     */
    public function setDefaultValue($default_value)
    {
        $this->container['default_value'] = $default_value;

        return $this;
    }

    /**
     * Gets grid_handler_code
     *
     * @return string
     */
    public function getGridHandlerCode()
    {
        return $this->container['grid_handler_code'];
    }

    /**
     * Sets grid_handler_code
     *
     * @param string $grid_handler_code grid_handler_code
     *
     * @return $this
     */
    public function setGridHandlerCode($grid_handler_code)
    {
        $this->container['grid_handler_code'] = $grid_handler_code;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(
                ObjectSerializer::sanitizeForSerialization($this),
                JSON_PRETTY_PRINT
            );
        }

        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}



<?php
/**
 * VSYWebhookSubscriberMessageResponses
 *
 * PHP version 5
 *
 * @category Class
 * @package  Jiwa
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * JiwaAPI
 *
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: 1.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 * Swagger Codegen version: 2.4.28-SNAPSHOT
 */

/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Jiwa\Model;

use \ArrayAccess;
use \Jiwa\ObjectSerializer;

/**
 * VSYWebhookSubscriberMessageResponses Class Doc Comment
 *
 * @category Class
 * @description v_SY_WebhookSubscriber_MessageResponses
 * @package  Jiwa
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class VSYWebhookSubscriberMessageResponses implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $swaggerModelName = 'v_SY_WebhookSubscriber_MessageResponses';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerTypes = [
        'subscriber_id' => 'string',
        'subscription_id' => 'string',
        'message_id' => 'string',
        'message_response_id' => 'string',
        'event_name' => 'string',
        'url' => 'string',
        'body' => 'string',
        'message_item_no' => 'int',
        'status' => 'int',
        'retries' => 'int',
        'added_date_time' => '\DateTime',
        'message_last_saved_date_time' => '\DateTime',
        'http_code' => 'int',
        'message' => 'string',
        'item_no' => 'int',
        'last_saved_date_time' => '\DateTime'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerFormats = [
        'subscriber_id' => null,
        'subscription_id' => null,
        'message_id' => null,
        'message_response_id' => null,
        'event_name' => null,
        'url' => null,
        'body' => null,
        'message_item_no' => 'int32',
        'status' => 'int32',
        'retries' => 'int32',
        'added_date_time' => 'date-time',
        'message_last_saved_date_time' => 'date-time',
        'http_code' => 'int32',
        'message' => null,
        'item_no' => 'int32',
        'last_saved_date_time' => 'date-time'
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerFormats()
    {
        return self::$swaggerFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'subscriber_id' => 'SubscriberID',
        'subscription_id' => 'SubscriptionID',
        'message_id' => 'MessageID',
        'message_response_id' => 'MessageResponseID',
        'event_name' => 'EventName',
        'url' => 'URL',
        'body' => 'Body',
        'message_item_no' => 'MessageItemNo',
        'status' => 'Status',
        'retries' => 'Retries',
        'added_date_time' => 'AddedDateTime',
        'message_last_saved_date_time' => 'MessageLastSavedDateTime',
        'http_code' => 'HTTPCode',
        'message' => 'Message',
        'item_no' => 'ItemNo',
        'last_saved_date_time' => 'LastSavedDateTime'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'subscriber_id' => 'setSubscriberId',
        'subscription_id' => 'setSubscriptionId',
        'message_id' => 'setMessageId',
        'message_response_id' => 'setMessageResponseId',
        'event_name' => 'setEventName',
        'url' => 'setUrl',
        'body' => 'setBody',
        'message_item_no' => 'setMessageItemNo',
        'status' => 'setStatus',
        'retries' => 'setRetries',
        'added_date_time' => 'setAddedDateTime',
        'message_last_saved_date_time' => 'setMessageLastSavedDateTime',
        'http_code' => 'setHttpCode',
        'message' => 'setMessage',
        'item_no' => 'setItemNo',
        'last_saved_date_time' => 'setLastSavedDateTime'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'subscriber_id' => 'getSubscriberId',
        'subscription_id' => 'getSubscriptionId',
        'message_id' => 'getMessageId',
        'message_response_id' => 'getMessageResponseId',
        'event_name' => 'getEventName',
        'url' => 'getUrl',
        'body' => 'getBody',
        'message_item_no' => 'getMessageItemNo',
        'status' => 'getStatus',
        'retries' => 'getRetries',
        'added_date_time' => 'getAddedDateTime',
        'message_last_saved_date_time' => 'getMessageLastSavedDateTime',
        'http_code' => 'getHttpCode',
        'message' => 'getMessage',
        'item_no' => 'getItemNo',
        'last_saved_date_time' => 'getLastSavedDateTime'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$swaggerModelName;
    }

    

    

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['subscriber_id'] = isset($data['subscriber_id']) ? $data['subscriber_id'] : null;
        $this->container['subscription_id'] = isset($data['subscription_id']) ? $data['subscription_id'] : null;
        $this->container['message_id'] = isset($data['message_id']) ? $data['message_id'] : null;
        $this->container['message_response_id'] = isset($data['message_response_id']) ? $data['message_response_id'] : null;
        $this->container['event_name'] = isset($data['event_name']) ? $data['event_name'] : null;
        $this->container['url'] = isset($data['url']) ? $data['url'] : null;
        $this->container['body'] = isset($data['body']) ? $data['body'] : null;
        $this->container['message_item_no'] = isset($data['message_item_no']) ? $data['message_item_no'] : null;
        $this->container['status'] = isset($data['status']) ? $data['status'] : null;
        $this->container['retries'] = isset($data['retries']) ? $data['retries'] : null;
        $this->container['added_date_time'] = isset($data['added_date_time']) ? $data['added_date_time'] : null;
        $this->container['message_last_saved_date_time'] = isset($data['message_last_saved_date_time']) ? $data['message_last_saved_date_time'] : null;
        $this->container['http_code'] = isset($data['http_code']) ? $data['http_code'] : null;
        $this->container['message'] = isset($data['message']) ? $data['message'] : null;
        $this->container['item_no'] = isset($data['item_no']) ? $data['item_no'] : null;
        $this->container['last_saved_date_time'] = isset($data['last_saved_date_time']) ? $data['last_saved_date_time'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets subscriber_id
     *
     * @return string
     */
    public function getSubscriberId()
    {
        return $this->container['subscriber_id'];
    }

    /**
     * Sets subscriber_id
     *
     * @param string $subscriber_id subscriber_id
     *
     * @return $this
     */
    public function setSubscriberId($subscriber_id)
    {
        $this->container['subscriber_id'] = $subscriber_id;

        return $this;
    }

    /**
     * Gets subscription_id
     *
     * @return string
     */
    public function getSubscriptionId()
    {
        return $this->container['subscription_id'];
    }

    /**
     * Sets subscription_id
     *
     * @param string $subscription_id subscription_id
     *
     * @return $this
     */
    public function setSubscriptionId($subscription_id)
    {
        $this->container['subscription_id'] = $subscription_id;

        return $this;
    }

    /**
     * Gets message_id
     *
     * @return string
     */
    public function getMessageId()
    {
        return $this->container['message_id'];
    }

    /**
     * Sets message_id
     *
     * @param string $message_id message_id
     *
     * @return $this
     */
    public function setMessageId($message_id)
    {
        $this->container['message_id'] = $message_id;

        return $this;
    }

    /**
     * Gets message_response_id
     *
     * @return string
     */
    public function getMessageResponseId()
    {
        return $this->container['message_response_id'];
    }

    /**
     * Sets message_response_id
     *
     * @param string $message_response_id message_response_id
     *
     * @return $this
     */
    public function setMessageResponseId($message_response_id)
    {
        $this->container['message_response_id'] = $message_response_id;

        return $this;
    }

    /**
     * Gets event_name
     *
     * @return string
     */
    public function getEventName()
    {
        return $this->container['event_name'];
    }

    /**
     * Sets event_name
     *
     * @param string $event_name event_name
     *
     * @return $this
     */
    public function setEventName($event_name)
    {
        $this->container['event_name'] = $event_name;

        return $this;
    }

    /**
     * Gets url
     *
     * @return string
     */
    public function getUrl()
    {
        return $this->container['url'];
    }

    /**
     * Sets url
     *
     * @param string $url url
     *
     * @return $this
     */
    public function setUrl($url)
    {
        $this->container['url'] = $url;

        return $this;
    }

    /**
     * Gets body
     *
     * @return string
     */
    public function getBody()
    {
        return $this->container['body'];
    }

    /**
     * Sets body
     *
     * @param string $body body
     *
     * @return $this
     */
    public function setBody($body)
    {
        $this->container['body'] = $body;

        return $this;
    }

    /**
     * Gets message_item_no
     *
     * @return int
     */
    public function getMessageItemNo()
    {
        return $this->container['message_item_no'];
    }

    /**
     * Sets message_item_no
     *
     * @param int $message_item_no message_item_no
     *
     * @return $this
     */
    public function setMessageItemNo($message_item_no)
    {
        $this->container['message_item_no'] = $message_item_no;

        return $this;
    }

    /**
     * Gets status
     *
     * @return int
     */
    public function getStatus()
    {
        return $this->container['status'];
    }

    /**
     * Sets status
     *
     * @param int $status status
     *
     * @return $this
     */
    public function setStatus($status)
    {
        $this->container['status'] = $status;

        return $this;
    }

    /**
     * Gets retries
     *
     * @return int
     */
    public function getRetries()
    {
        return $this->container['retries'];
    }

    /**
     * Sets retries
     *
     * @param int $retries retries
     *
     * @return $this
     */
    public function setRetries($retries)
    {
        $this->container['retries'] = $retries;

        return $this;
    }

    /**
     * Gets added_date_time
     *
     * @return \DateTime
     */
    public function getAddedDateTime()
    {
        return $this->container['added_date_time'];
    }

    /**
     * Sets added_date_time
     *
     * @param \DateTime $added_date_time added_date_time
     *
     * @return $this
     */
    public function setAddedDateTime($added_date_time)
    {
        $this->container['added_date_time'] = $added_date_time;

        return $this;
    }

    /**
     * Gets message_last_saved_date_time
     *
     * @return \DateTime
     */
    public function getMessageLastSavedDateTime()
    {
        return $this->container['message_last_saved_date_time'];
    }

    /**
     * Sets message_last_saved_date_time
     *
     * @param \DateTime $message_last_saved_date_time message_last_saved_date_time
     *
     * @return $this
     */
    public function setMessageLastSavedDateTime($message_last_saved_date_time)
    {
        $this->container['message_last_saved_date_time'] = $message_last_saved_date_time;

        return $this;
    }

    /**
     * Gets http_code
     *
     * @return int
     */
    public function getHttpCode()
    {
        return $this->container['http_code'];
    }

    /**
     * Sets http_code
     *
     * @param int $http_code http_code
     *
     * @return $this
     */
    public function setHttpCode($http_code)
    {
        $this->container['http_code'] = $http_code;

        return $this;
    }

    /**
     * Gets message
     *
     * @return string
     */
    public function getMessage()
    {
        return $this->container['message'];
    }

    /**
     * Sets message
     *
     * @param string $message message
     *
     * @return $this
     */
    public function setMessage($message)
    {
        $this->container['message'] = $message;

        return $this;
    }

    /**
     * Gets item_no
     *
     * @return int
     */
    public function getItemNo()
    {
        return $this->container['item_no'];
    }

    /**
     * Sets item_no
     *
     * @param int $item_no item_no
     *
     * @return $this
     */
    public function setItemNo($item_no)
    {
        $this->container['item_no'] = $item_no;

        return $this;
    }

    /**
     * Gets last_saved_date_time
     *
     * @return \DateTime
     */
    public function getLastSavedDateTime()
    {
        return $this->container['last_saved_date_time'];
    }

    /**
     * Sets last_saved_date_time
     *
     * @param \DateTime $last_saved_date_time last_saved_date_time
     *
     * @return $this
     */
    public function setLastSavedDateTime($last_saved_date_time)
    {
        $this->container['last_saved_date_time'] = $last_saved_date_time;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(
                ObjectSerializer::sanitizeForSerialization($this),
                JSON_PRETTY_PRINT
            );
        }

        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}



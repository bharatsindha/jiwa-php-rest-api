<?php
/**
 * DebtorBackOrder
 *
 * PHP version 5
 *
 * @category Class
 * @package  Jiwa
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * JiwaAPI
 *
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: 1.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 * Swagger Codegen version: 2.4.28-SNAPSHOT
 */

/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Jiwa\Model;

use \ArrayAccess;
use \Jiwa\ObjectSerializer;

/**
 * DebtorBackOrder Class Doc Comment
 *
 * @category Class
 * @description DebtorBackOrder
 * @package  Jiwa
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class DebtorBackOrder implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $swaggerModelName = 'DebtorBackOrder';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerTypes = [
        'invoice_id' => 'string',
        'invoice_no' => 'string',
        'customer_order_no' => 'string',
        'date' => '\DateTime',
        'quantity' => 'double',
        'quantity_decimal_places' => 'int',
        'warehouse' => 'string',
        'inventory_id' => 'string',
        'part_no' => 'string',
        'description' => 'string',
        'creditor_id' => 'string',
        'supplier_name' => 'string',
        'order_no' => 'string',
        'expected_delivery_date' => '\DateTime',
        'history_text_comment' => 'string',
        'quantity_consumed' => 'double'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerFormats = [
        'invoice_id' => null,
        'invoice_no' => null,
        'customer_order_no' => null,
        'date' => 'date-time',
        'quantity' => 'double',
        'quantity_decimal_places' => 'int32',
        'warehouse' => null,
        'inventory_id' => null,
        'part_no' => null,
        'description' => null,
        'creditor_id' => null,
        'supplier_name' => null,
        'order_no' => null,
        'expected_delivery_date' => 'date-time',
        'history_text_comment' => null,
        'quantity_consumed' => 'double'
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerFormats()
    {
        return self::$swaggerFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'invoice_id' => 'InvoiceID',
        'invoice_no' => 'InvoiceNo',
        'customer_order_no' => 'CustomerOrderNo',
        'date' => 'Date',
        'quantity' => 'Quantity',
        'quantity_decimal_places' => 'QuantityDecimalPlaces',
        'warehouse' => 'Warehouse',
        'inventory_id' => 'InventoryID',
        'part_no' => 'PartNo',
        'description' => 'Description',
        'creditor_id' => 'CreditorID',
        'supplier_name' => 'SupplierName',
        'order_no' => 'OrderNo',
        'expected_delivery_date' => 'ExpectedDeliveryDate',
        'history_text_comment' => 'HistoryTextComment',
        'quantity_consumed' => 'QuantityConsumed'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'invoice_id' => 'setInvoiceId',
        'invoice_no' => 'setInvoiceNo',
        'customer_order_no' => 'setCustomerOrderNo',
        'date' => 'setDate',
        'quantity' => 'setQuantity',
        'quantity_decimal_places' => 'setQuantityDecimalPlaces',
        'warehouse' => 'setWarehouse',
        'inventory_id' => 'setInventoryId',
        'part_no' => 'setPartNo',
        'description' => 'setDescription',
        'creditor_id' => 'setCreditorId',
        'supplier_name' => 'setSupplierName',
        'order_no' => 'setOrderNo',
        'expected_delivery_date' => 'setExpectedDeliveryDate',
        'history_text_comment' => 'setHistoryTextComment',
        'quantity_consumed' => 'setQuantityConsumed'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'invoice_id' => 'getInvoiceId',
        'invoice_no' => 'getInvoiceNo',
        'customer_order_no' => 'getCustomerOrderNo',
        'date' => 'getDate',
        'quantity' => 'getQuantity',
        'quantity_decimal_places' => 'getQuantityDecimalPlaces',
        'warehouse' => 'getWarehouse',
        'inventory_id' => 'getInventoryId',
        'part_no' => 'getPartNo',
        'description' => 'getDescription',
        'creditor_id' => 'getCreditorId',
        'supplier_name' => 'getSupplierName',
        'order_no' => 'getOrderNo',
        'expected_delivery_date' => 'getExpectedDeliveryDate',
        'history_text_comment' => 'getHistoryTextComment',
        'quantity_consumed' => 'getQuantityConsumed'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$swaggerModelName;
    }

    

    

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['invoice_id'] = isset($data['invoice_id']) ? $data['invoice_id'] : null;
        $this->container['invoice_no'] = isset($data['invoice_no']) ? $data['invoice_no'] : null;
        $this->container['customer_order_no'] = isset($data['customer_order_no']) ? $data['customer_order_no'] : null;
        $this->container['date'] = isset($data['date']) ? $data['date'] : null;
        $this->container['quantity'] = isset($data['quantity']) ? $data['quantity'] : null;
        $this->container['quantity_decimal_places'] = isset($data['quantity_decimal_places']) ? $data['quantity_decimal_places'] : null;
        $this->container['warehouse'] = isset($data['warehouse']) ? $data['warehouse'] : null;
        $this->container['inventory_id'] = isset($data['inventory_id']) ? $data['inventory_id'] : null;
        $this->container['part_no'] = isset($data['part_no']) ? $data['part_no'] : null;
        $this->container['description'] = isset($data['description']) ? $data['description'] : null;
        $this->container['creditor_id'] = isset($data['creditor_id']) ? $data['creditor_id'] : null;
        $this->container['supplier_name'] = isset($data['supplier_name']) ? $data['supplier_name'] : null;
        $this->container['order_no'] = isset($data['order_no']) ? $data['order_no'] : null;
        $this->container['expected_delivery_date'] = isset($data['expected_delivery_date']) ? $data['expected_delivery_date'] : null;
        $this->container['history_text_comment'] = isset($data['history_text_comment']) ? $data['history_text_comment'] : null;
        $this->container['quantity_consumed'] = isset($data['quantity_consumed']) ? $data['quantity_consumed'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets invoice_id
     *
     * @return string
     */
    public function getInvoiceId()
    {
        return $this->container['invoice_id'];
    }

    /**
     * Sets invoice_id
     *
     * @param string $invoice_id invoice_id
     *
     * @return $this
     */
    public function setInvoiceId($invoice_id)
    {
        $this->container['invoice_id'] = $invoice_id;

        return $this;
    }

    /**
     * Gets invoice_no
     *
     * @return string
     */
    public function getInvoiceNo()
    {
        return $this->container['invoice_no'];
    }

    /**
     * Sets invoice_no
     *
     * @param string $invoice_no invoice_no
     *
     * @return $this
     */
    public function setInvoiceNo($invoice_no)
    {
        $this->container['invoice_no'] = $invoice_no;

        return $this;
    }

    /**
     * Gets customer_order_no
     *
     * @return string
     */
    public function getCustomerOrderNo()
    {
        return $this->container['customer_order_no'];
    }

    /**
     * Sets customer_order_no
     *
     * @param string $customer_order_no customer_order_no
     *
     * @return $this
     */
    public function setCustomerOrderNo($customer_order_no)
    {
        $this->container['customer_order_no'] = $customer_order_no;

        return $this;
    }

    /**
     * Gets date
     *
     * @return \DateTime
     */
    public function getDate()
    {
        return $this->container['date'];
    }

    /**
     * Sets date
     *
     * @param \DateTime $date date
     *
     * @return $this
     */
    public function setDate($date)
    {
        $this->container['date'] = $date;

        return $this;
    }

    /**
     * Gets quantity
     *
     * @return double
     */
    public function getQuantity()
    {
        return $this->container['quantity'];
    }

    /**
     * Sets quantity
     *
     * @param double $quantity quantity
     *
     * @return $this
     */
    public function setQuantity($quantity)
    {
        $this->container['quantity'] = $quantity;

        return $this;
    }

    /**
     * Gets quantity_decimal_places
     *
     * @return int
     */
    public function getQuantityDecimalPlaces()
    {
        return $this->container['quantity_decimal_places'];
    }

    /**
     * Sets quantity_decimal_places
     *
     * @param int $quantity_decimal_places quantity_decimal_places
     *
     * @return $this
     */
    public function setQuantityDecimalPlaces($quantity_decimal_places)
    {
        $this->container['quantity_decimal_places'] = $quantity_decimal_places;

        return $this;
    }

    /**
     * Gets warehouse
     *
     * @return string
     */
    public function getWarehouse()
    {
        return $this->container['warehouse'];
    }

    /**
     * Sets warehouse
     *
     * @param string $warehouse warehouse
     *
     * @return $this
     */
    public function setWarehouse($warehouse)
    {
        $this->container['warehouse'] = $warehouse;

        return $this;
    }

    /**
     * Gets inventory_id
     *
     * @return string
     */
    public function getInventoryId()
    {
        return $this->container['inventory_id'];
    }

    /**
     * Sets inventory_id
     *
     * @param string $inventory_id inventory_id
     *
     * @return $this
     */
    public function setInventoryId($inventory_id)
    {
        $this->container['inventory_id'] = $inventory_id;

        return $this;
    }

    /**
     * Gets part_no
     *
     * @return string
     */
    public function getPartNo()
    {
        return $this->container['part_no'];
    }

    /**
     * Sets part_no
     *
     * @param string $part_no part_no
     *
     * @return $this
     */
    public function setPartNo($part_no)
    {
        $this->container['part_no'] = $part_no;

        return $this;
    }

    /**
     * Gets description
     *
     * @return string
     */
    public function getDescription()
    {
        return $this->container['description'];
    }

    /**
     * Sets description
     *
     * @param string $description description
     *
     * @return $this
     */
    public function setDescription($description)
    {
        $this->container['description'] = $description;

        return $this;
    }

    /**
     * Gets creditor_id
     *
     * @return string
     */
    public function getCreditorId()
    {
        return $this->container['creditor_id'];
    }

    /**
     * Sets creditor_id
     *
     * @param string $creditor_id creditor_id
     *
     * @return $this
     */
    public function setCreditorId($creditor_id)
    {
        $this->container['creditor_id'] = $creditor_id;

        return $this;
    }

    /**
     * Gets supplier_name
     *
     * @return string
     */
    public function getSupplierName()
    {
        return $this->container['supplier_name'];
    }

    /**
     * Sets supplier_name
     *
     * @param string $supplier_name supplier_name
     *
     * @return $this
     */
    public function setSupplierName($supplier_name)
    {
        $this->container['supplier_name'] = $supplier_name;

        return $this;
    }

    /**
     * Gets order_no
     *
     * @return string
     */
    public function getOrderNo()
    {
        return $this->container['order_no'];
    }

    /**
     * Sets order_no
     *
     * @param string $order_no order_no
     *
     * @return $this
     */
    public function setOrderNo($order_no)
    {
        $this->container['order_no'] = $order_no;

        return $this;
    }

    /**
     * Gets expected_delivery_date
     *
     * @return \DateTime
     */
    public function getExpectedDeliveryDate()
    {
        return $this->container['expected_delivery_date'];
    }

    /**
     * Sets expected_delivery_date
     *
     * @param \DateTime $expected_delivery_date expected_delivery_date
     *
     * @return $this
     */
    public function setExpectedDeliveryDate($expected_delivery_date)
    {
        $this->container['expected_delivery_date'] = $expected_delivery_date;

        return $this;
    }

    /**
     * Gets history_text_comment
     *
     * @return string
     */
    public function getHistoryTextComment()
    {
        return $this->container['history_text_comment'];
    }

    /**
     * Sets history_text_comment
     *
     * @param string $history_text_comment history_text_comment
     *
     * @return $this
     */
    public function setHistoryTextComment($history_text_comment)
    {
        $this->container['history_text_comment'] = $history_text_comment;

        return $this;
    }

    /**
     * Gets quantity_consumed
     *
     * @return double
     */
    public function getQuantityConsumed()
    {
        return $this->container['quantity_consumed'];
    }

    /**
     * Sets quantity_consumed
     *
     * @param double $quantity_consumed quantity_consumed
     *
     * @return $this
     */
    public function setQuantityConsumed($quantity_consumed)
    {
        $this->container['quantity_consumed'] = $quantity_consumed;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(
                ObjectSerializer::sanitizeForSerialization($this),
                JSON_PRETTY_PRINT
            );
        }

        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}



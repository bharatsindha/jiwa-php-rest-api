<?php
/**
 * GoodsReceivedNote
 *
 * PHP version 5
 *
 * @category Class
 * @package  Jiwa
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * JiwaAPI
 *
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: 1.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 * Swagger Codegen version: 2.4.28-SNAPSHOT
 */

/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Jiwa\JiwaModel;

use \ArrayAccess;
use \Jiwa\ObjectSerializer;

/**
 * GoodsReceivedNote Class Doc Comment
 *
 * @category Class
 * @description GoodsReceivedNote
 * @package  Jiwa
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class GoodsReceivedNote implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $swaggerModelName = 'GoodsReceivedNote';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerTypes = [
        'grnid' => 'string',
        'creditor_id' => 'string',
        'creditor_account_no' => 'string',
        'creditor_name' => 'string',
        'last_saved_date_time' => '\DateTime',
        'slip_no' => 'string',
        'slip_date' => '\DateTime',
        'status' => 'string',
        'freight' => 'double',
        'duty' => 'double',
        'invoiced' => 'bool',
        'pi_main_id' => 'string',
        'insurance' => 'double',
        'logical_warehouse_id' => 'string',
        'logical_warehouse_description' => 'string',
        'physical_warehouse_id' => 'string',
        'physical_warehouse_description' => 'string',
        'tax_total' => 'double',
        'freight_tax_id' => 'string',
        'freight_tax_rate' => 'double',
        'freight_tax_amount' => 'double',
        'duty_tax_id' => 'string',
        'duty_tax_rate' => 'double',
        'duty_tax_amount' => 'double',
        'insurance_tax_id' => 'string',
        'insurance_tax_rate' => 'double',
        'insurance_tax_amount' => 'double',
        'reference' => 'string',
        'total_gross' => 'double',
        'total_net' => 'double',
        'total_fx' => 'double',
        'freight_inc' => 'double',
        'duty_inc' => 'double',
        'insurance_inc' => 'double',
        'inventory_total_quantity' => 'double',
        'inventory_total_quantity_decimal_places' => 'double',
        'lines' => '\Jiwa\JiwaModel\GoodsReceivedNoteLine[]',
        'purchase_orders' => '\Jiwa\JiwaModel\GoodsReceivedNotePurchaseOrderReceived[]',
        'custom_field_values' => '\Jiwa\JiwaModel\CustomFieldValue[]'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerFormats = [
        'grnid' => null,
        'creditor_id' => null,
        'creditor_account_no' => null,
        'creditor_name' => null,
        'last_saved_date_time' => 'date-time',
        'slip_no' => null,
        'slip_date' => 'date-time',
        'status' => null,
        'freight' => 'double',
        'duty' => 'double',
        'invoiced' => null,
        'pi_main_id' => null,
        'insurance' => 'double',
        'logical_warehouse_id' => null,
        'logical_warehouse_description' => null,
        'physical_warehouse_id' => null,
        'physical_warehouse_description' => null,
        'tax_total' => 'double',
        'freight_tax_id' => null,
        'freight_tax_rate' => 'double',
        'freight_tax_amount' => 'double',
        'duty_tax_id' => null,
        'duty_tax_rate' => 'double',
        'duty_tax_amount' => 'double',
        'insurance_tax_id' => null,
        'insurance_tax_rate' => 'double',
        'insurance_tax_amount' => 'double',
        'reference' => null,
        'total_gross' => 'double',
        'total_net' => 'double',
        'total_fx' => 'double',
        'freight_inc' => 'double',
        'duty_inc' => 'double',
        'insurance_inc' => 'double',
        'inventory_total_quantity' => 'double',
        'inventory_total_quantity_decimal_places' => 'double',
        'lines' => null,
        'purchase_orders' => null,
        'custom_field_values' => null
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerFormats()
    {
        return self::$swaggerFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'grnid' => 'GRNID',
        'creditor_id' => 'CreditorID',
        'creditor_account_no' => 'CreditorAccountNo',
        'creditor_name' => 'CreditorName',
        'last_saved_date_time' => 'LastSavedDateTime',
        'slip_no' => 'SlipNo',
        'slip_date' => 'SlipDate',
        'status' => 'Status',
        'freight' => 'Freight',
        'duty' => 'Duty',
        'invoiced' => 'Invoiced',
        'pi_main_id' => 'PI_MainID',
        'insurance' => 'Insurance',
        'logical_warehouse_id' => 'LogicalWarehouseID',
        'logical_warehouse_description' => 'LogicalWarehouseDescription',
        'physical_warehouse_id' => 'PhysicalWarehouseID',
        'physical_warehouse_description' => 'PhysicalWarehouseDescription',
        'tax_total' => 'TaxTotal',
        'freight_tax_id' => 'FreightTaxID',
        'freight_tax_rate' => 'FreightTaxRate',
        'freight_tax_amount' => 'FreightTaxAmount',
        'duty_tax_id' => 'DutyTaxID',
        'duty_tax_rate' => 'DutyTaxRate',
        'duty_tax_amount' => 'DutyTaxAmount',
        'insurance_tax_id' => 'InsuranceTaxID',
        'insurance_tax_rate' => 'InsuranceTaxRate',
        'insurance_tax_amount' => 'InsuranceTaxAmount',
        'reference' => 'Reference',
        'total_gross' => 'TotalGross',
        'total_net' => 'TotalNet',
        'total_fx' => 'TotalFx',
        'freight_inc' => 'FreightInc',
        'duty_inc' => 'DutyInc',
        'insurance_inc' => 'InsuranceInc',
        'inventory_total_quantity' => 'InventoryTotalQuantity',
        'inventory_total_quantity_decimal_places' => 'InventoryTotalQuantityDecimalPlaces',
        'lines' => 'Lines',
        'purchase_orders' => 'PurchaseOrders',
        'custom_field_values' => 'CustomFieldValues'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'grnid' => 'setGrnid',
        'creditor_id' => 'setCreditorId',
        'creditor_account_no' => 'setCreditorAccountNo',
        'creditor_name' => 'setCreditorName',
        'last_saved_date_time' => 'setLastSavedDateTime',
        'slip_no' => 'setSlipNo',
        'slip_date' => 'setSlipDate',
        'status' => 'setStatus',
        'freight' => 'setFreight',
        'duty' => 'setDuty',
        'invoiced' => 'setInvoiced',
        'pi_main_id' => 'setPiMainId',
        'insurance' => 'setInsurance',
        'logical_warehouse_id' => 'setLogicalWarehouseId',
        'logical_warehouse_description' => 'setLogicalWarehouseDescription',
        'physical_warehouse_id' => 'setPhysicalWarehouseId',
        'physical_warehouse_description' => 'setPhysicalWarehouseDescription',
        'tax_total' => 'setTaxTotal',
        'freight_tax_id' => 'setFreightTaxId',
        'freight_tax_rate' => 'setFreightTaxRate',
        'freight_tax_amount' => 'setFreightTaxAmount',
        'duty_tax_id' => 'setDutyTaxId',
        'duty_tax_rate' => 'setDutyTaxRate',
        'duty_tax_amount' => 'setDutyTaxAmount',
        'insurance_tax_id' => 'setInsuranceTaxId',
        'insurance_tax_rate' => 'setInsuranceTaxRate',
        'insurance_tax_amount' => 'setInsuranceTaxAmount',
        'reference' => 'setReference',
        'total_gross' => 'setTotalGross',
        'total_net' => 'setTotalNet',
        'total_fx' => 'setTotalFx',
        'freight_inc' => 'setFreightInc',
        'duty_inc' => 'setDutyInc',
        'insurance_inc' => 'setInsuranceInc',
        'inventory_total_quantity' => 'setInventoryTotalQuantity',
        'inventory_total_quantity_decimal_places' => 'setInventoryTotalQuantityDecimalPlaces',
        'lines' => 'setLines',
        'purchase_orders' => 'setPurchaseOrders',
        'custom_field_values' => 'setCustomFieldValues'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'grnid' => 'getGrnid',
        'creditor_id' => 'getCreditorId',
        'creditor_account_no' => 'getCreditorAccountNo',
        'creditor_name' => 'getCreditorName',
        'last_saved_date_time' => 'getLastSavedDateTime',
        'slip_no' => 'getSlipNo',
        'slip_date' => 'getSlipDate',
        'status' => 'getStatus',
        'freight' => 'getFreight',
        'duty' => 'getDuty',
        'invoiced' => 'getInvoiced',
        'pi_main_id' => 'getPiMainId',
        'insurance' => 'getInsurance',
        'logical_warehouse_id' => 'getLogicalWarehouseId',
        'logical_warehouse_description' => 'getLogicalWarehouseDescription',
        'physical_warehouse_id' => 'getPhysicalWarehouseId',
        'physical_warehouse_description' => 'getPhysicalWarehouseDescription',
        'tax_total' => 'getTaxTotal',
        'freight_tax_id' => 'getFreightTaxId',
        'freight_tax_rate' => 'getFreightTaxRate',
        'freight_tax_amount' => 'getFreightTaxAmount',
        'duty_tax_id' => 'getDutyTaxId',
        'duty_tax_rate' => 'getDutyTaxRate',
        'duty_tax_amount' => 'getDutyTaxAmount',
        'insurance_tax_id' => 'getInsuranceTaxId',
        'insurance_tax_rate' => 'getInsuranceTaxRate',
        'insurance_tax_amount' => 'getInsuranceTaxAmount',
        'reference' => 'getReference',
        'total_gross' => 'getTotalGross',
        'total_net' => 'getTotalNet',
        'total_fx' => 'getTotalFx',
        'freight_inc' => 'getFreightInc',
        'duty_inc' => 'getDutyInc',
        'insurance_inc' => 'getInsuranceInc',
        'inventory_total_quantity' => 'getInventoryTotalQuantity',
        'inventory_total_quantity_decimal_places' => 'getInventoryTotalQuantityDecimalPlaces',
        'lines' => 'getLines',
        'purchase_orders' => 'getPurchaseOrders',
        'custom_field_values' => 'getCustomFieldValues'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$swaggerModelName;
    }

    

    

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['grnid'] = isset($data['grnid']) ? $data['grnid'] : null;
        $this->container['creditor_id'] = isset($data['creditor_id']) ? $data['creditor_id'] : null;
        $this->container['creditor_account_no'] = isset($data['creditor_account_no']) ? $data['creditor_account_no'] : null;
        $this->container['creditor_name'] = isset($data['creditor_name']) ? $data['creditor_name'] : null;
        $this->container['last_saved_date_time'] = isset($data['last_saved_date_time']) ? $data['last_saved_date_time'] : null;
        $this->container['slip_no'] = isset($data['slip_no']) ? $data['slip_no'] : null;
        $this->container['slip_date'] = isset($data['slip_date']) ? $data['slip_date'] : null;
        $this->container['status'] = isset($data['status']) ? $data['status'] : null;
        $this->container['freight'] = isset($data['freight']) ? $data['freight'] : null;
        $this->container['duty'] = isset($data['duty']) ? $data['duty'] : null;
        $this->container['invoiced'] = isset($data['invoiced']) ? $data['invoiced'] : null;
        $this->container['pi_main_id'] = isset($data['pi_main_id']) ? $data['pi_main_id'] : null;
        $this->container['insurance'] = isset($data['insurance']) ? $data['insurance'] : null;
        $this->container['logical_warehouse_id'] = isset($data['logical_warehouse_id']) ? $data['logical_warehouse_id'] : null;
        $this->container['logical_warehouse_description'] = isset($data['logical_warehouse_description']) ? $data['logical_warehouse_description'] : null;
        $this->container['physical_warehouse_id'] = isset($data['physical_warehouse_id']) ? $data['physical_warehouse_id'] : null;
        $this->container['physical_warehouse_description'] = isset($data['physical_warehouse_description']) ? $data['physical_warehouse_description'] : null;
        $this->container['tax_total'] = isset($data['tax_total']) ? $data['tax_total'] : null;
        $this->container['freight_tax_id'] = isset($data['freight_tax_id']) ? $data['freight_tax_id'] : null;
        $this->container['freight_tax_rate'] = isset($data['freight_tax_rate']) ? $data['freight_tax_rate'] : null;
        $this->container['freight_tax_amount'] = isset($data['freight_tax_amount']) ? $data['freight_tax_amount'] : null;
        $this->container['duty_tax_id'] = isset($data['duty_tax_id']) ? $data['duty_tax_id'] : null;
        $this->container['duty_tax_rate'] = isset($data['duty_tax_rate']) ? $data['duty_tax_rate'] : null;
        $this->container['duty_tax_amount'] = isset($data['duty_tax_amount']) ? $data['duty_tax_amount'] : null;
        $this->container['insurance_tax_id'] = isset($data['insurance_tax_id']) ? $data['insurance_tax_id'] : null;
        $this->container['insurance_tax_rate'] = isset($data['insurance_tax_rate']) ? $data['insurance_tax_rate'] : null;
        $this->container['insurance_tax_amount'] = isset($data['insurance_tax_amount']) ? $data['insurance_tax_amount'] : null;
        $this->container['reference'] = isset($data['reference']) ? $data['reference'] : null;
        $this->container['total_gross'] = isset($data['total_gross']) ? $data['total_gross'] : null;
        $this->container['total_net'] = isset($data['total_net']) ? $data['total_net'] : null;
        $this->container['total_fx'] = isset($data['total_fx']) ? $data['total_fx'] : null;
        $this->container['freight_inc'] = isset($data['freight_inc']) ? $data['freight_inc'] : null;
        $this->container['duty_inc'] = isset($data['duty_inc']) ? $data['duty_inc'] : null;
        $this->container['insurance_inc'] = isset($data['insurance_inc']) ? $data['insurance_inc'] : null;
        $this->container['inventory_total_quantity'] = isset($data['inventory_total_quantity']) ? $data['inventory_total_quantity'] : null;
        $this->container['inventory_total_quantity_decimal_places'] = isset($data['inventory_total_quantity_decimal_places']) ? $data['inventory_total_quantity_decimal_places'] : null;
        $this->container['lines'] = isset($data['lines']) ? $data['lines'] : null;
        $this->container['purchase_orders'] = isset($data['purchase_orders']) ? $data['purchase_orders'] : null;
        $this->container['custom_field_values'] = isset($data['custom_field_values']) ? $data['custom_field_values'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets grnid
     *
     * @return string
     */
    public function getGrnid()
    {
        return $this->container['grnid'];
    }

    /**
     * Sets grnid
     *
     * @param string $grnid grnid
     *
     * @return $this
     */
    public function setGrnid($grnid)
    {
        $this->container['grnid'] = $grnid;

        return $this;
    }

    /**
     * Gets creditor_id
     *
     * @return string
     */
    public function getCreditorId()
    {
        return $this->container['creditor_id'];
    }

    /**
     * Sets creditor_id
     *
     * @param string $creditor_id creditor_id
     *
     * @return $this
     */
    public function setCreditorId($creditor_id)
    {
        $this->container['creditor_id'] = $creditor_id;

        return $this;
    }

    /**
     * Gets creditor_account_no
     *
     * @return string
     */
    public function getCreditorAccountNo()
    {
        return $this->container['creditor_account_no'];
    }

    /**
     * Sets creditor_account_no
     *
     * @param string $creditor_account_no creditor_account_no
     *
     * @return $this
     */
    public function setCreditorAccountNo($creditor_account_no)
    {
        $this->container['creditor_account_no'] = $creditor_account_no;

        return $this;
    }

    /**
     * Gets creditor_name
     *
     * @return string
     */
    public function getCreditorName()
    {
        return $this->container['creditor_name'];
    }

    /**
     * Sets creditor_name
     *
     * @param string $creditor_name creditor_name
     *
     * @return $this
     */
    public function setCreditorName($creditor_name)
    {
        $this->container['creditor_name'] = $creditor_name;

        return $this;
    }

    /**
     * Gets last_saved_date_time
     *
     * @return \DateTime
     */
    public function getLastSavedDateTime()
    {
        return $this->container['last_saved_date_time'];
    }

    /**
     * Sets last_saved_date_time
     *
     * @param \DateTime $last_saved_date_time last_saved_date_time
     *
     * @return $this
     */
    public function setLastSavedDateTime($last_saved_date_time)
    {
        $this->container['last_saved_date_time'] = $last_saved_date_time;

        return $this;
    }

    /**
     * Gets slip_no
     *
     * @return string
     */
    public function getSlipNo()
    {
        return $this->container['slip_no'];
    }

    /**
     * Sets slip_no
     *
     * @param string $slip_no slip_no
     *
     * @return $this
     */
    public function setSlipNo($slip_no)
    {
        $this->container['slip_no'] = $slip_no;

        return $this;
    }

    /**
     * Gets slip_date
     *
     * @return \DateTime
     */
    public function getSlipDate()
    {
        return $this->container['slip_date'];
    }

    /**
     * Sets slip_date
     *
     * @param \DateTime $slip_date slip_date
     *
     * @return $this
     */
    public function setSlipDate($slip_date)
    {
        $this->container['slip_date'] = $slip_date;

        return $this;
    }

    /**
     * Gets status
     *
     * @return string
     */
    public function getStatus()
    {
        return $this->container['status'];
    }

    /**
     * Sets status
     *
     * @param string $status status
     *
     * @return $this
     */
    public function setStatus($status)
    {
        $this->container['status'] = $status;

        return $this;
    }

    /**
     * Gets freight
     *
     * @return double
     */
    public function getFreight()
    {
        return $this->container['freight'];
    }

    /**
     * Sets freight
     *
     * @param double $freight freight
     *
     * @return $this
     */
    public function setFreight($freight)
    {
        $this->container['freight'] = $freight;

        return $this;
    }

    /**
     * Gets duty
     *
     * @return double
     */
    public function getDuty()
    {
        return $this->container['duty'];
    }

    /**
     * Sets duty
     *
     * @param double $duty duty
     *
     * @return $this
     */
    public function setDuty($duty)
    {
        $this->container['duty'] = $duty;

        return $this;
    }

    /**
     * Gets invoiced
     *
     * @return bool
     */
    public function getInvoiced()
    {
        return $this->container['invoiced'];
    }

    /**
     * Sets invoiced
     *
     * @param bool $invoiced invoiced
     *
     * @return $this
     */
    public function setInvoiced($invoiced)
    {
        $this->container['invoiced'] = $invoiced;

        return $this;
    }

    /**
     * Gets pi_main_id
     *
     * @return string
     */
    public function getPiMainId()
    {
        return $this->container['pi_main_id'];
    }

    /**
     * Sets pi_main_id
     *
     * @param string $pi_main_id pi_main_id
     *
     * @return $this
     */
    public function setPiMainId($pi_main_id)
    {
        $this->container['pi_main_id'] = $pi_main_id;

        return $this;
    }

    /**
     * Gets insurance
     *
     * @return double
     */
    public function getInsurance()
    {
        return $this->container['insurance'];
    }

    /**
     * Sets insurance
     *
     * @param double $insurance insurance
     *
     * @return $this
     */
    public function setInsurance($insurance)
    {
        $this->container['insurance'] = $insurance;

        return $this;
    }

    /**
     * Gets logical_warehouse_id
     *
     * @return string
     */
    public function getLogicalWarehouseId()
    {
        return $this->container['logical_warehouse_id'];
    }

    /**
     * Sets logical_warehouse_id
     *
     * @param string $logical_warehouse_id logical_warehouse_id
     *
     * @return $this
     */
    public function setLogicalWarehouseId($logical_warehouse_id)
    {
        $this->container['logical_warehouse_id'] = $logical_warehouse_id;

        return $this;
    }

    /**
     * Gets logical_warehouse_description
     *
     * @return string
     */
    public function getLogicalWarehouseDescription()
    {
        return $this->container['logical_warehouse_description'];
    }

    /**
     * Sets logical_warehouse_description
     *
     * @param string $logical_warehouse_description logical_warehouse_description
     *
     * @return $this
     */
    public function setLogicalWarehouseDescription($logical_warehouse_description)
    {
        $this->container['logical_warehouse_description'] = $logical_warehouse_description;

        return $this;
    }

    /**
     * Gets physical_warehouse_id
     *
     * @return string
     */
    public function getPhysicalWarehouseId()
    {
        return $this->container['physical_warehouse_id'];
    }

    /**
     * Sets physical_warehouse_id
     *
     * @param string $physical_warehouse_id physical_warehouse_id
     *
     * @return $this
     */
    public function setPhysicalWarehouseId($physical_warehouse_id)
    {
        $this->container['physical_warehouse_id'] = $physical_warehouse_id;

        return $this;
    }

    /**
     * Gets physical_warehouse_description
     *
     * @return string
     */
    public function getPhysicalWarehouseDescription()
    {
        return $this->container['physical_warehouse_description'];
    }

    /**
     * Sets physical_warehouse_description
     *
     * @param string $physical_warehouse_description physical_warehouse_description
     *
     * @return $this
     */
    public function setPhysicalWarehouseDescription($physical_warehouse_description)
    {
        $this->container['physical_warehouse_description'] = $physical_warehouse_description;

        return $this;
    }

    /**
     * Gets tax_total
     *
     * @return double
     */
    public function getTaxTotal()
    {
        return $this->container['tax_total'];
    }

    /**
     * Sets tax_total
     *
     * @param double $tax_total tax_total
     *
     * @return $this
     */
    public function setTaxTotal($tax_total)
    {
        $this->container['tax_total'] = $tax_total;

        return $this;
    }

    /**
     * Gets freight_tax_id
     *
     * @return string
     */
    public function getFreightTaxId()
    {
        return $this->container['freight_tax_id'];
    }

    /**
     * Sets freight_tax_id
     *
     * @param string $freight_tax_id freight_tax_id
     *
     * @return $this
     */
    public function setFreightTaxId($freight_tax_id)
    {
        $this->container['freight_tax_id'] = $freight_tax_id;

        return $this;
    }

    /**
     * Gets freight_tax_rate
     *
     * @return double
     */
    public function getFreightTaxRate()
    {
        return $this->container['freight_tax_rate'];
    }

    /**
     * Sets freight_tax_rate
     *
     * @param double $freight_tax_rate freight_tax_rate
     *
     * @return $this
     */
    public function setFreightTaxRate($freight_tax_rate)
    {
        $this->container['freight_tax_rate'] = $freight_tax_rate;

        return $this;
    }

    /**
     * Gets freight_tax_amount
     *
     * @return double
     */
    public function getFreightTaxAmount()
    {
        return $this->container['freight_tax_amount'];
    }

    /**
     * Sets freight_tax_amount
     *
     * @param double $freight_tax_amount freight_tax_amount
     *
     * @return $this
     */
    public function setFreightTaxAmount($freight_tax_amount)
    {
        $this->container['freight_tax_amount'] = $freight_tax_amount;

        return $this;
    }

    /**
     * Gets duty_tax_id
     *
     * @return string
     */
    public function getDutyTaxId()
    {
        return $this->container['duty_tax_id'];
    }

    /**
     * Sets duty_tax_id
     *
     * @param string $duty_tax_id duty_tax_id
     *
     * @return $this
     */
    public function setDutyTaxId($duty_tax_id)
    {
        $this->container['duty_tax_id'] = $duty_tax_id;

        return $this;
    }

    /**
     * Gets duty_tax_rate
     *
     * @return double
     */
    public function getDutyTaxRate()
    {
        return $this->container['duty_tax_rate'];
    }

    /**
     * Sets duty_tax_rate
     *
     * @param double $duty_tax_rate duty_tax_rate
     *
     * @return $this
     */
    public function setDutyTaxRate($duty_tax_rate)
    {
        $this->container['duty_tax_rate'] = $duty_tax_rate;

        return $this;
    }

    /**
     * Gets duty_tax_amount
     *
     * @return double
     */
    public function getDutyTaxAmount()
    {
        return $this->container['duty_tax_amount'];
    }

    /**
     * Sets duty_tax_amount
     *
     * @param double $duty_tax_amount duty_tax_amount
     *
     * @return $this
     */
    public function setDutyTaxAmount($duty_tax_amount)
    {
        $this->container['duty_tax_amount'] = $duty_tax_amount;

        return $this;
    }

    /**
     * Gets insurance_tax_id
     *
     * @return string
     */
    public function getInsuranceTaxId()
    {
        return $this->container['insurance_tax_id'];
    }

    /**
     * Sets insurance_tax_id
     *
     * @param string $insurance_tax_id insurance_tax_id
     *
     * @return $this
     */
    public function setInsuranceTaxId($insurance_tax_id)
    {
        $this->container['insurance_tax_id'] = $insurance_tax_id;

        return $this;
    }

    /**
     * Gets insurance_tax_rate
     *
     * @return double
     */
    public function getInsuranceTaxRate()
    {
        return $this->container['insurance_tax_rate'];
    }

    /**
     * Sets insurance_tax_rate
     *
     * @param double $insurance_tax_rate insurance_tax_rate
     *
     * @return $this
     */
    public function setInsuranceTaxRate($insurance_tax_rate)
    {
        $this->container['insurance_tax_rate'] = $insurance_tax_rate;

        return $this;
    }

    /**
     * Gets insurance_tax_amount
     *
     * @return double
     */
    public function getInsuranceTaxAmount()
    {
        return $this->container['insurance_tax_amount'];
    }

    /**
     * Sets insurance_tax_amount
     *
     * @param double $insurance_tax_amount insurance_tax_amount
     *
     * @return $this
     */
    public function setInsuranceTaxAmount($insurance_tax_amount)
    {
        $this->container['insurance_tax_amount'] = $insurance_tax_amount;

        return $this;
    }

    /**
     * Gets reference
     *
     * @return string
     */
    public function getReference()
    {
        return $this->container['reference'];
    }

    /**
     * Sets reference
     *
     * @param string $reference reference
     *
     * @return $this
     */
    public function setReference($reference)
    {
        $this->container['reference'] = $reference;

        return $this;
    }

    /**
     * Gets total_gross
     *
     * @return double
     */
    public function getTotalGross()
    {
        return $this->container['total_gross'];
    }

    /**
     * Sets total_gross
     *
     * @param double $total_gross total_gross
     *
     * @return $this
     */
    public function setTotalGross($total_gross)
    {
        $this->container['total_gross'] = $total_gross;

        return $this;
    }

    /**
     * Gets total_net
     *
     * @return double
     */
    public function getTotalNet()
    {
        return $this->container['total_net'];
    }

    /**
     * Sets total_net
     *
     * @param double $total_net total_net
     *
     * @return $this
     */
    public function setTotalNet($total_net)
    {
        $this->container['total_net'] = $total_net;

        return $this;
    }

    /**
     * Gets total_fx
     *
     * @return double
     */
    public function getTotalFx()
    {
        return $this->container['total_fx'];
    }

    /**
     * Sets total_fx
     *
     * @param double $total_fx total_fx
     *
     * @return $this
     */
    public function setTotalFx($total_fx)
    {
        $this->container['total_fx'] = $total_fx;

        return $this;
    }

    /**
     * Gets freight_inc
     *
     * @return double
     */
    public function getFreightInc()
    {
        return $this->container['freight_inc'];
    }

    /**
     * Sets freight_inc
     *
     * @param double $freight_inc freight_inc
     *
     * @return $this
     */
    public function setFreightInc($freight_inc)
    {
        $this->container['freight_inc'] = $freight_inc;

        return $this;
    }

    /**
     * Gets duty_inc
     *
     * @return double
     */
    public function getDutyInc()
    {
        return $this->container['duty_inc'];
    }

    /**
     * Sets duty_inc
     *
     * @param double $duty_inc duty_inc
     *
     * @return $this
     */
    public function setDutyInc($duty_inc)
    {
        $this->container['duty_inc'] = $duty_inc;

        return $this;
    }

    /**
     * Gets insurance_inc
     *
     * @return double
     */
    public function getInsuranceInc()
    {
        return $this->container['insurance_inc'];
    }

    /**
     * Sets insurance_inc
     *
     * @param double $insurance_inc insurance_inc
     *
     * @return $this
     */
    public function setInsuranceInc($insurance_inc)
    {
        $this->container['insurance_inc'] = $insurance_inc;

        return $this;
    }

    /**
     * Gets inventory_total_quantity
     *
     * @return double
     */
    public function getInventoryTotalQuantity()
    {
        return $this->container['inventory_total_quantity'];
    }

    /**
     * Sets inventory_total_quantity
     *
     * @param double $inventory_total_quantity inventory_total_quantity
     *
     * @return $this
     */
    public function setInventoryTotalQuantity($inventory_total_quantity)
    {
        $this->container['inventory_total_quantity'] = $inventory_total_quantity;

        return $this;
    }

    /**
     * Gets inventory_total_quantity_decimal_places
     *
     * @return double
     */
    public function getInventoryTotalQuantityDecimalPlaces()
    {
        return $this->container['inventory_total_quantity_decimal_places'];
    }

    /**
     * Sets inventory_total_quantity_decimal_places
     *
     * @param double $inventory_total_quantity_decimal_places inventory_total_quantity_decimal_places
     *
     * @return $this
     */
    public function setInventoryTotalQuantityDecimalPlaces($inventory_total_quantity_decimal_places)
    {
        $this->container['inventory_total_quantity_decimal_places'] = $inventory_total_quantity_decimal_places;

        return $this;
    }

    /**
     * Gets lines
     *
     * @return \Jiwa\JiwaModel\GoodsReceivedNoteLine[]
     */
    public function getLines()
    {
        return $this->container['lines'];
    }

    /**
     * Sets lines
     *
     * @param \Jiwa\JiwaModel\GoodsReceivedNoteLine[] $lines lines
     *
     * @return $this
     */
    public function setLines($lines)
    {
        $this->container['lines'] = $lines;

        return $this;
    }

    /**
     * Gets purchase_orders
     *
     * @return \Jiwa\JiwaModel\GoodsReceivedNotePurchaseOrderReceived[]
     */
    public function getPurchaseOrders()
    {
        return $this->container['purchase_orders'];
    }

    /**
     * Sets purchase_orders
     *
     * @param \Jiwa\JiwaModel\GoodsReceivedNotePurchaseOrderReceived[] $purchase_orders purchase_orders
     *
     * @return $this
     */
    public function setPurchaseOrders($purchase_orders)
    {
        $this->container['purchase_orders'] = $purchase_orders;

        return $this;
    }

    /**
     * Gets custom_field_values
     *
     * @return \Jiwa\JiwaModel\CustomFieldValue[]
     */
    public function getCustomFieldValues()
    {
        return $this->container['custom_field_values'];
    }

    /**
     * Sets custom_field_values
     *
     * @param \Jiwa\JiwaModel\CustomFieldValue[] $custom_field_values custom_field_values
     *
     * @return $this
     */
    public function setCustomFieldValues($custom_field_values)
    {
        $this->container['custom_field_values'] = $custom_field_values;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(
                ObjectSerializer::sanitizeForSerialization($this),
                JSON_PRETTY_PRINT
            );
        }

        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}



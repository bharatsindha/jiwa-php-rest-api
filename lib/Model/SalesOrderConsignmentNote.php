<?php
/**
 * SalesOrderConsignmentNote
 *
 * PHP version 5
 *
 * @category Class
 * @package  Jiwa
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * JiwaAPI
 *
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: 1.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 * Swagger Codegen version: 2.4.28-SNAPSHOT
 */

/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Jiwa\Model;

use \ArrayAccess;
use \Jiwa\ObjectSerializer;

/**
 * SalesOrderConsignmentNote Class Doc Comment
 *
 * @category Class
 * @description SalesOrderConsignmentNote
 * @package  Jiwa
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class SalesOrderConsignmentNote implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $swaggerModelName = 'SalesOrderConsignmentNote';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerTypes = [
        'consignment_note_id' => 'string',
        'consignment_note_date' => '\DateTime',
        'ex_gst_amount' => 'double',
        'gst_amount' => 'double',
        'consignment_note_no' => 'string'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerFormats = [
        'consignment_note_id' => null,
        'consignment_note_date' => 'date-time',
        'ex_gst_amount' => 'double',
        'gst_amount' => 'double',
        'consignment_note_no' => null
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerFormats()
    {
        return self::$swaggerFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'consignment_note_id' => 'ConsignmentNoteID',
        'consignment_note_date' => 'ConsignmentNoteDate',
        'ex_gst_amount' => 'ExGSTAmount',
        'gst_amount' => 'GSTAmount',
        'consignment_note_no' => 'ConsignmentNoteNo'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'consignment_note_id' => 'setConsignmentNoteId',
        'consignment_note_date' => 'setConsignmentNoteDate',
        'ex_gst_amount' => 'setExGstAmount',
        'gst_amount' => 'setGstAmount',
        'consignment_note_no' => 'setConsignmentNoteNo'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'consignment_note_id' => 'getConsignmentNoteId',
        'consignment_note_date' => 'getConsignmentNoteDate',
        'ex_gst_amount' => 'getExGstAmount',
        'gst_amount' => 'getGstAmount',
        'consignment_note_no' => 'getConsignmentNoteNo'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$swaggerModelName;
    }

    

    

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['consignment_note_id'] = isset($data['consignment_note_id']) ? $data['consignment_note_id'] : null;
        $this->container['consignment_note_date'] = isset($data['consignment_note_date']) ? $data['consignment_note_date'] : null;
        $this->container['ex_gst_amount'] = isset($data['ex_gst_amount']) ? $data['ex_gst_amount'] : null;
        $this->container['gst_amount'] = isset($data['gst_amount']) ? $data['gst_amount'] : null;
        $this->container['consignment_note_no'] = isset($data['consignment_note_no']) ? $data['consignment_note_no'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets consignment_note_id
     *
     * @return string
     */
    public function getConsignmentNoteId()
    {
        return $this->container['consignment_note_id'];
    }

    /**
     * Sets consignment_note_id
     *
     * @param string $consignment_note_id consignment_note_id
     *
     * @return $this
     */
    public function setConsignmentNoteId($consignment_note_id)
    {
        $this->container['consignment_note_id'] = $consignment_note_id;

        return $this;
    }

    /**
     * Gets consignment_note_date
     *
     * @return \DateTime
     */
    public function getConsignmentNoteDate()
    {
        return $this->container['consignment_note_date'];
    }

    /**
     * Sets consignment_note_date
     *
     * @param \DateTime $consignment_note_date consignment_note_date
     *
     * @return $this
     */
    public function setConsignmentNoteDate($consignment_note_date)
    {
        $this->container['consignment_note_date'] = $consignment_note_date;

        return $this;
    }

    /**
     * Gets ex_gst_amount
     *
     * @return double
     */
    public function getExGstAmount()
    {
        return $this->container['ex_gst_amount'];
    }

    /**
     * Sets ex_gst_amount
     *
     * @param double $ex_gst_amount ex_gst_amount
     *
     * @return $this
     */
    public function setExGstAmount($ex_gst_amount)
    {
        $this->container['ex_gst_amount'] = $ex_gst_amount;

        return $this;
    }

    /**
     * Gets gst_amount
     *
     * @return double
     */
    public function getGstAmount()
    {
        return $this->container['gst_amount'];
    }

    /**
     * Sets gst_amount
     *
     * @param double $gst_amount gst_amount
     *
     * @return $this
     */
    public function setGstAmount($gst_amount)
    {
        $this->container['gst_amount'] = $gst_amount;

        return $this;
    }

    /**
     * Gets consignment_note_no
     *
     * @return string
     */
    public function getConsignmentNoteNo()
    {
        return $this->container['consignment_note_no'];
    }

    /**
     * Sets consignment_note_no
     *
     * @param string $consignment_note_no consignment_note_no
     *
     * @return $this
     */
    public function setConsignmentNoteNo($consignment_note_no)
    {
        $this->container['consignment_note_no'] = $consignment_note_no;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(
                ObjectSerializer::sanitizeForSerialization($this),
                JSON_PRETTY_PRINT
            );
        }

        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}



<?php
/**
 * DBTrans
 *
 * PHP version 5
 *
 * @category Class
 * @package  Jiwa
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * JiwaAPI
 *
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: 1.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 * Swagger Codegen version: 2.4.28-SNAPSHOT
 */

/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Jiwa\Model;

use \ArrayAccess;
use \Jiwa\ObjectSerializer;

/**
 * DBTrans Class Doc Comment
 *
 * @category Class
 * @description DB_Trans
 * @package  Jiwa
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class DBTrans implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $swaggerModelName = 'DB_Trans';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerTypes = [
        'trans_id' => 'string',
        'debtor_id' => 'string',
        'debit_credit' => 'bool',
        'source' => 'string',
        'ref' => 'string',
        'remark' => 'string',
        'tran_date' => '\DateTime',
        'inv_remit_no' => 'string',
        'amount' => 'double',
        'discounted_amount' => 'double',
        'aged_out' => 'bool',
        'source_id' => 'string',
        'allocated_amount' => 'double',
        'init_date_time' => '\DateTime',
        'last_saved_date_time' => '\DateTime',
        'sub_type' => 'int',
        'batch_no' => 'string',
        'child_debtor_id' => 'string',
        'gst_amount' => 'double',
        'due_date' => '\DateTime',
        'fx_amount' => 'double',
        'fx_alloc_amount' => 'double',
        'currency_rate_used' => 'double',
        'realised_gain_loss' => 'double',
        'un_realised_gain_loss' => 'double',
        'currency_id' => 'string',
        'cartage1_amount' => 'double',
        'cartage1_tax_amount' => 'double',
        'cartage2_amount' => 'double',
        'cartage2_tax_amount' => 'double',
        'cartage3_amount' => 'double',
        'cartage3_tax_amount' => 'double',
        'fx_decimal_places' => 'int',
        'decimal_places' => 'int',
        'note' => 'string'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerFormats = [
        'trans_id' => null,
        'debtor_id' => null,
        'debit_credit' => null,
        'source' => null,
        'ref' => null,
        'remark' => null,
        'tran_date' => 'date-time',
        'inv_remit_no' => null,
        'amount' => 'double',
        'discounted_amount' => 'double',
        'aged_out' => null,
        'source_id' => null,
        'allocated_amount' => 'double',
        'init_date_time' => 'date-time',
        'last_saved_date_time' => 'date-time',
        'sub_type' => 'int32',
        'batch_no' => null,
        'child_debtor_id' => null,
        'gst_amount' => 'double',
        'due_date' => 'date-time',
        'fx_amount' => 'double',
        'fx_alloc_amount' => 'double',
        'currency_rate_used' => 'double',
        'realised_gain_loss' => 'double',
        'un_realised_gain_loss' => 'double',
        'currency_id' => null,
        'cartage1_amount' => 'double',
        'cartage1_tax_amount' => 'double',
        'cartage2_amount' => 'double',
        'cartage2_tax_amount' => 'double',
        'cartage3_amount' => 'double',
        'cartage3_tax_amount' => 'double',
        'fx_decimal_places' => 'int32',
        'decimal_places' => 'int32',
        'note' => null
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerFormats()
    {
        return self::$swaggerFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'trans_id' => 'TransID',
        'debtor_id' => 'DebtorID',
        'debit_credit' => 'DebitCredit',
        'source' => 'Source',
        'ref' => 'Ref',
        'remark' => 'Remark',
        'tran_date' => 'TranDate',
        'inv_remit_no' => 'InvRemitNo',
        'amount' => 'Amount',
        'discounted_amount' => 'DiscountedAmount',
        'aged_out' => 'AgedOut',
        'source_id' => 'SourceID',
        'allocated_amount' => 'AllocatedAmount',
        'init_date_time' => 'InitDateTime',
        'last_saved_date_time' => 'LastSavedDateTime',
        'sub_type' => 'SubType',
        'batch_no' => 'BatchNo',
        'child_debtor_id' => 'ChildDebtorID',
        'gst_amount' => 'GSTAmount',
        'due_date' => 'DueDate',
        'fx_amount' => 'FXAmount',
        'fx_alloc_amount' => 'FXAllocAmount',
        'currency_rate_used' => 'CurrencyRateUsed',
        'realised_gain_loss' => 'RealisedGainLoss',
        'un_realised_gain_loss' => 'UnRealisedGainLoss',
        'currency_id' => 'CurrencyID',
        'cartage1_amount' => 'Cartage1Amount',
        'cartage1_tax_amount' => 'Cartage1TaxAmount',
        'cartage2_amount' => 'Cartage2Amount',
        'cartage2_tax_amount' => 'Cartage2TaxAmount',
        'cartage3_amount' => 'Cartage3Amount',
        'cartage3_tax_amount' => 'Cartage3TaxAmount',
        'fx_decimal_places' => 'FXDecimalPlaces',
        'decimal_places' => 'DecimalPlaces',
        'note' => 'Note'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'trans_id' => 'setTransId',
        'debtor_id' => 'setDebtorId',
        'debit_credit' => 'setDebitCredit',
        'source' => 'setSource',
        'ref' => 'setRef',
        'remark' => 'setRemark',
        'tran_date' => 'setTranDate',
        'inv_remit_no' => 'setInvRemitNo',
        'amount' => 'setAmount',
        'discounted_amount' => 'setDiscountedAmount',
        'aged_out' => 'setAgedOut',
        'source_id' => 'setSourceId',
        'allocated_amount' => 'setAllocatedAmount',
        'init_date_time' => 'setInitDateTime',
        'last_saved_date_time' => 'setLastSavedDateTime',
        'sub_type' => 'setSubType',
        'batch_no' => 'setBatchNo',
        'child_debtor_id' => 'setChildDebtorId',
        'gst_amount' => 'setGstAmount',
        'due_date' => 'setDueDate',
        'fx_amount' => 'setFxAmount',
        'fx_alloc_amount' => 'setFxAllocAmount',
        'currency_rate_used' => 'setCurrencyRateUsed',
        'realised_gain_loss' => 'setRealisedGainLoss',
        'un_realised_gain_loss' => 'setUnRealisedGainLoss',
        'currency_id' => 'setCurrencyId',
        'cartage1_amount' => 'setCartage1Amount',
        'cartage1_tax_amount' => 'setCartage1TaxAmount',
        'cartage2_amount' => 'setCartage2Amount',
        'cartage2_tax_amount' => 'setCartage2TaxAmount',
        'cartage3_amount' => 'setCartage3Amount',
        'cartage3_tax_amount' => 'setCartage3TaxAmount',
        'fx_decimal_places' => 'setFxDecimalPlaces',
        'decimal_places' => 'setDecimalPlaces',
        'note' => 'setNote'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'trans_id' => 'getTransId',
        'debtor_id' => 'getDebtorId',
        'debit_credit' => 'getDebitCredit',
        'source' => 'getSource',
        'ref' => 'getRef',
        'remark' => 'getRemark',
        'tran_date' => 'getTranDate',
        'inv_remit_no' => 'getInvRemitNo',
        'amount' => 'getAmount',
        'discounted_amount' => 'getDiscountedAmount',
        'aged_out' => 'getAgedOut',
        'source_id' => 'getSourceId',
        'allocated_amount' => 'getAllocatedAmount',
        'init_date_time' => 'getInitDateTime',
        'last_saved_date_time' => 'getLastSavedDateTime',
        'sub_type' => 'getSubType',
        'batch_no' => 'getBatchNo',
        'child_debtor_id' => 'getChildDebtorId',
        'gst_amount' => 'getGstAmount',
        'due_date' => 'getDueDate',
        'fx_amount' => 'getFxAmount',
        'fx_alloc_amount' => 'getFxAllocAmount',
        'currency_rate_used' => 'getCurrencyRateUsed',
        'realised_gain_loss' => 'getRealisedGainLoss',
        'un_realised_gain_loss' => 'getUnRealisedGainLoss',
        'currency_id' => 'getCurrencyId',
        'cartage1_amount' => 'getCartage1Amount',
        'cartage1_tax_amount' => 'getCartage1TaxAmount',
        'cartage2_amount' => 'getCartage2Amount',
        'cartage2_tax_amount' => 'getCartage2TaxAmount',
        'cartage3_amount' => 'getCartage3Amount',
        'cartage3_tax_amount' => 'getCartage3TaxAmount',
        'fx_decimal_places' => 'getFxDecimalPlaces',
        'decimal_places' => 'getDecimalPlaces',
        'note' => 'getNote'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$swaggerModelName;
    }

    

    

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['trans_id'] = isset($data['trans_id']) ? $data['trans_id'] : null;
        $this->container['debtor_id'] = isset($data['debtor_id']) ? $data['debtor_id'] : null;
        $this->container['debit_credit'] = isset($data['debit_credit']) ? $data['debit_credit'] : null;
        $this->container['source'] = isset($data['source']) ? $data['source'] : null;
        $this->container['ref'] = isset($data['ref']) ? $data['ref'] : null;
        $this->container['remark'] = isset($data['remark']) ? $data['remark'] : null;
        $this->container['tran_date'] = isset($data['tran_date']) ? $data['tran_date'] : null;
        $this->container['inv_remit_no'] = isset($data['inv_remit_no']) ? $data['inv_remit_no'] : null;
        $this->container['amount'] = isset($data['amount']) ? $data['amount'] : null;
        $this->container['discounted_amount'] = isset($data['discounted_amount']) ? $data['discounted_amount'] : null;
        $this->container['aged_out'] = isset($data['aged_out']) ? $data['aged_out'] : null;
        $this->container['source_id'] = isset($data['source_id']) ? $data['source_id'] : null;
        $this->container['allocated_amount'] = isset($data['allocated_amount']) ? $data['allocated_amount'] : null;
        $this->container['init_date_time'] = isset($data['init_date_time']) ? $data['init_date_time'] : null;
        $this->container['last_saved_date_time'] = isset($data['last_saved_date_time']) ? $data['last_saved_date_time'] : null;
        $this->container['sub_type'] = isset($data['sub_type']) ? $data['sub_type'] : null;
        $this->container['batch_no'] = isset($data['batch_no']) ? $data['batch_no'] : null;
        $this->container['child_debtor_id'] = isset($data['child_debtor_id']) ? $data['child_debtor_id'] : null;
        $this->container['gst_amount'] = isset($data['gst_amount']) ? $data['gst_amount'] : null;
        $this->container['due_date'] = isset($data['due_date']) ? $data['due_date'] : null;
        $this->container['fx_amount'] = isset($data['fx_amount']) ? $data['fx_amount'] : null;
        $this->container['fx_alloc_amount'] = isset($data['fx_alloc_amount']) ? $data['fx_alloc_amount'] : null;
        $this->container['currency_rate_used'] = isset($data['currency_rate_used']) ? $data['currency_rate_used'] : null;
        $this->container['realised_gain_loss'] = isset($data['realised_gain_loss']) ? $data['realised_gain_loss'] : null;
        $this->container['un_realised_gain_loss'] = isset($data['un_realised_gain_loss']) ? $data['un_realised_gain_loss'] : null;
        $this->container['currency_id'] = isset($data['currency_id']) ? $data['currency_id'] : null;
        $this->container['cartage1_amount'] = isset($data['cartage1_amount']) ? $data['cartage1_amount'] : null;
        $this->container['cartage1_tax_amount'] = isset($data['cartage1_tax_amount']) ? $data['cartage1_tax_amount'] : null;
        $this->container['cartage2_amount'] = isset($data['cartage2_amount']) ? $data['cartage2_amount'] : null;
        $this->container['cartage2_tax_amount'] = isset($data['cartage2_tax_amount']) ? $data['cartage2_tax_amount'] : null;
        $this->container['cartage3_amount'] = isset($data['cartage3_amount']) ? $data['cartage3_amount'] : null;
        $this->container['cartage3_tax_amount'] = isset($data['cartage3_tax_amount']) ? $data['cartage3_tax_amount'] : null;
        $this->container['fx_decimal_places'] = isset($data['fx_decimal_places']) ? $data['fx_decimal_places'] : null;
        $this->container['decimal_places'] = isset($data['decimal_places']) ? $data['decimal_places'] : null;
        $this->container['note'] = isset($data['note']) ? $data['note'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets trans_id
     *
     * @return string
     */
    public function getTransId()
    {
        return $this->container['trans_id'];
    }

    /**
     * Sets trans_id
     *
     * @param string $trans_id trans_id
     *
     * @return $this
     */
    public function setTransId($trans_id)
    {
        $this->container['trans_id'] = $trans_id;

        return $this;
    }

    /**
     * Gets debtor_id
     *
     * @return string
     */
    public function getDebtorId()
    {
        return $this->container['debtor_id'];
    }

    /**
     * Sets debtor_id
     *
     * @param string $debtor_id debtor_id
     *
     * @return $this
     */
    public function setDebtorId($debtor_id)
    {
        $this->container['debtor_id'] = $debtor_id;

        return $this;
    }

    /**
     * Gets debit_credit
     *
     * @return bool
     */
    public function getDebitCredit()
    {
        return $this->container['debit_credit'];
    }

    /**
     * Sets debit_credit
     *
     * @param bool $debit_credit debit_credit
     *
     * @return $this
     */
    public function setDebitCredit($debit_credit)
    {
        $this->container['debit_credit'] = $debit_credit;

        return $this;
    }

    /**
     * Gets source
     *
     * @return string
     */
    public function getSource()
    {
        return $this->container['source'];
    }

    /**
     * Sets source
     *
     * @param string $source source
     *
     * @return $this
     */
    public function setSource($source)
    {
        $this->container['source'] = $source;

        return $this;
    }

    /**
     * Gets ref
     *
     * @return string
     */
    public function getRef()
    {
        return $this->container['ref'];
    }

    /**
     * Sets ref
     *
     * @param string $ref ref
     *
     * @return $this
     */
    public function setRef($ref)
    {
        $this->container['ref'] = $ref;

        return $this;
    }

    /**
     * Gets remark
     *
     * @return string
     */
    public function getRemark()
    {
        return $this->container['remark'];
    }

    /**
     * Sets remark
     *
     * @param string $remark remark
     *
     * @return $this
     */
    public function setRemark($remark)
    {
        $this->container['remark'] = $remark;

        return $this;
    }

    /**
     * Gets tran_date
     *
     * @return \DateTime
     */
    public function getTranDate()
    {
        return $this->container['tran_date'];
    }

    /**
     * Sets tran_date
     *
     * @param \DateTime $tran_date tran_date
     *
     * @return $this
     */
    public function setTranDate($tran_date)
    {
        $this->container['tran_date'] = $tran_date;

        return $this;
    }

    /**
     * Gets inv_remit_no
     *
     * @return string
     */
    public function getInvRemitNo()
    {
        return $this->container['inv_remit_no'];
    }

    /**
     * Sets inv_remit_no
     *
     * @param string $inv_remit_no inv_remit_no
     *
     * @return $this
     */
    public function setInvRemitNo($inv_remit_no)
    {
        $this->container['inv_remit_no'] = $inv_remit_no;

        return $this;
    }

    /**
     * Gets amount
     *
     * @return double
     */
    public function getAmount()
    {
        return $this->container['amount'];
    }

    /**
     * Sets amount
     *
     * @param double $amount amount
     *
     * @return $this
     */
    public function setAmount($amount)
    {
        $this->container['amount'] = $amount;

        return $this;
    }

    /**
     * Gets discounted_amount
     *
     * @return double
     */
    public function getDiscountedAmount()
    {
        return $this->container['discounted_amount'];
    }

    /**
     * Sets discounted_amount
     *
     * @param double $discounted_amount discounted_amount
     *
     * @return $this
     */
    public function setDiscountedAmount($discounted_amount)
    {
        $this->container['discounted_amount'] = $discounted_amount;

        return $this;
    }

    /**
     * Gets aged_out
     *
     * @return bool
     */
    public function getAgedOut()
    {
        return $this->container['aged_out'];
    }

    /**
     * Sets aged_out
     *
     * @param bool $aged_out aged_out
     *
     * @return $this
     */
    public function setAgedOut($aged_out)
    {
        $this->container['aged_out'] = $aged_out;

        return $this;
    }

    /**
     * Gets source_id
     *
     * @return string
     */
    public function getSourceId()
    {
        return $this->container['source_id'];
    }

    /**
     * Sets source_id
     *
     * @param string $source_id source_id
     *
     * @return $this
     */
    public function setSourceId($source_id)
    {
        $this->container['source_id'] = $source_id;

        return $this;
    }

    /**
     * Gets allocated_amount
     *
     * @return double
     */
    public function getAllocatedAmount()
    {
        return $this->container['allocated_amount'];
    }

    /**
     * Sets allocated_amount
     *
     * @param double $allocated_amount allocated_amount
     *
     * @return $this
     */
    public function setAllocatedAmount($allocated_amount)
    {
        $this->container['allocated_amount'] = $allocated_amount;

        return $this;
    }

    /**
     * Gets init_date_time
     *
     * @return \DateTime
     */
    public function getInitDateTime()
    {
        return $this->container['init_date_time'];
    }

    /**
     * Sets init_date_time
     *
     * @param \DateTime $init_date_time init_date_time
     *
     * @return $this
     */
    public function setInitDateTime($init_date_time)
    {
        $this->container['init_date_time'] = $init_date_time;

        return $this;
    }

    /**
     * Gets last_saved_date_time
     *
     * @return \DateTime
     */
    public function getLastSavedDateTime()
    {
        return $this->container['last_saved_date_time'];
    }

    /**
     * Sets last_saved_date_time
     *
     * @param \DateTime $last_saved_date_time last_saved_date_time
     *
     * @return $this
     */
    public function setLastSavedDateTime($last_saved_date_time)
    {
        $this->container['last_saved_date_time'] = $last_saved_date_time;

        return $this;
    }

    /**
     * Gets sub_type
     *
     * @return int
     */
    public function getSubType()
    {
        return $this->container['sub_type'];
    }

    /**
     * Sets sub_type
     *
     * @param int $sub_type sub_type
     *
     * @return $this
     */
    public function setSubType($sub_type)
    {
        $this->container['sub_type'] = $sub_type;

        return $this;
    }

    /**
     * Gets batch_no
     *
     * @return string
     */
    public function getBatchNo()
    {
        return $this->container['batch_no'];
    }

    /**
     * Sets batch_no
     *
     * @param string $batch_no batch_no
     *
     * @return $this
     */
    public function setBatchNo($batch_no)
    {
        $this->container['batch_no'] = $batch_no;

        return $this;
    }

    /**
     * Gets child_debtor_id
     *
     * @return string
     */
    public function getChildDebtorId()
    {
        return $this->container['child_debtor_id'];
    }

    /**
     * Sets child_debtor_id
     *
     * @param string $child_debtor_id child_debtor_id
     *
     * @return $this
     */
    public function setChildDebtorId($child_debtor_id)
    {
        $this->container['child_debtor_id'] = $child_debtor_id;

        return $this;
    }

    /**
     * Gets gst_amount
     *
     * @return double
     */
    public function getGstAmount()
    {
        return $this->container['gst_amount'];
    }

    /**
     * Sets gst_amount
     *
     * @param double $gst_amount gst_amount
     *
     * @return $this
     */
    public function setGstAmount($gst_amount)
    {
        $this->container['gst_amount'] = $gst_amount;

        return $this;
    }

    /**
     * Gets due_date
     *
     * @return \DateTime
     */
    public function getDueDate()
    {
        return $this->container['due_date'];
    }

    /**
     * Sets due_date
     *
     * @param \DateTime $due_date due_date
     *
     * @return $this
     */
    public function setDueDate($due_date)
    {
        $this->container['due_date'] = $due_date;

        return $this;
    }

    /**
     * Gets fx_amount
     *
     * @return double
     */
    public function getFxAmount()
    {
        return $this->container['fx_amount'];
    }

    /**
     * Sets fx_amount
     *
     * @param double $fx_amount fx_amount
     *
     * @return $this
     */
    public function setFxAmount($fx_amount)
    {
        $this->container['fx_amount'] = $fx_amount;

        return $this;
    }

    /**
     * Gets fx_alloc_amount
     *
     * @return double
     */
    public function getFxAllocAmount()
    {
        return $this->container['fx_alloc_amount'];
    }

    /**
     * Sets fx_alloc_amount
     *
     * @param double $fx_alloc_amount fx_alloc_amount
     *
     * @return $this
     */
    public function setFxAllocAmount($fx_alloc_amount)
    {
        $this->container['fx_alloc_amount'] = $fx_alloc_amount;

        return $this;
    }

    /**
     * Gets currency_rate_used
     *
     * @return double
     */
    public function getCurrencyRateUsed()
    {
        return $this->container['currency_rate_used'];
    }

    /**
     * Sets currency_rate_used
     *
     * @param double $currency_rate_used currency_rate_used
     *
     * @return $this
     */
    public function setCurrencyRateUsed($currency_rate_used)
    {
        $this->container['currency_rate_used'] = $currency_rate_used;

        return $this;
    }

    /**
     * Gets realised_gain_loss
     *
     * @return double
     */
    public function getRealisedGainLoss()
    {
        return $this->container['realised_gain_loss'];
    }

    /**
     * Sets realised_gain_loss
     *
     * @param double $realised_gain_loss realised_gain_loss
     *
     * @return $this
     */
    public function setRealisedGainLoss($realised_gain_loss)
    {
        $this->container['realised_gain_loss'] = $realised_gain_loss;

        return $this;
    }

    /**
     * Gets un_realised_gain_loss
     *
     * @return double
     */
    public function getUnRealisedGainLoss()
    {
        return $this->container['un_realised_gain_loss'];
    }

    /**
     * Sets un_realised_gain_loss
     *
     * @param double $un_realised_gain_loss un_realised_gain_loss
     *
     * @return $this
     */
    public function setUnRealisedGainLoss($un_realised_gain_loss)
    {
        $this->container['un_realised_gain_loss'] = $un_realised_gain_loss;

        return $this;
    }

    /**
     * Gets currency_id
     *
     * @return string
     */
    public function getCurrencyId()
    {
        return $this->container['currency_id'];
    }

    /**
     * Sets currency_id
     *
     * @param string $currency_id currency_id
     *
     * @return $this
     */
    public function setCurrencyId($currency_id)
    {
        $this->container['currency_id'] = $currency_id;

        return $this;
    }

    /**
     * Gets cartage1_amount
     *
     * @return double
     */
    public function getCartage1Amount()
    {
        return $this->container['cartage1_amount'];
    }

    /**
     * Sets cartage1_amount
     *
     * @param double $cartage1_amount cartage1_amount
     *
     * @return $this
     */
    public function setCartage1Amount($cartage1_amount)
    {
        $this->container['cartage1_amount'] = $cartage1_amount;

        return $this;
    }

    /**
     * Gets cartage1_tax_amount
     *
     * @return double
     */
    public function getCartage1TaxAmount()
    {
        return $this->container['cartage1_tax_amount'];
    }

    /**
     * Sets cartage1_tax_amount
     *
     * @param double $cartage1_tax_amount cartage1_tax_amount
     *
     * @return $this
     */
    public function setCartage1TaxAmount($cartage1_tax_amount)
    {
        $this->container['cartage1_tax_amount'] = $cartage1_tax_amount;

        return $this;
    }

    /**
     * Gets cartage2_amount
     *
     * @return double
     */
    public function getCartage2Amount()
    {
        return $this->container['cartage2_amount'];
    }

    /**
     * Sets cartage2_amount
     *
     * @param double $cartage2_amount cartage2_amount
     *
     * @return $this
     */
    public function setCartage2Amount($cartage2_amount)
    {
        $this->container['cartage2_amount'] = $cartage2_amount;

        return $this;
    }

    /**
     * Gets cartage2_tax_amount
     *
     * @return double
     */
    public function getCartage2TaxAmount()
    {
        return $this->container['cartage2_tax_amount'];
    }

    /**
     * Sets cartage2_tax_amount
     *
     * @param double $cartage2_tax_amount cartage2_tax_amount
     *
     * @return $this
     */
    public function setCartage2TaxAmount($cartage2_tax_amount)
    {
        $this->container['cartage2_tax_amount'] = $cartage2_tax_amount;

        return $this;
    }

    /**
     * Gets cartage3_amount
     *
     * @return double
     */
    public function getCartage3Amount()
    {
        return $this->container['cartage3_amount'];
    }

    /**
     * Sets cartage3_amount
     *
     * @param double $cartage3_amount cartage3_amount
     *
     * @return $this
     */
    public function setCartage3Amount($cartage3_amount)
    {
        $this->container['cartage3_amount'] = $cartage3_amount;

        return $this;
    }

    /**
     * Gets cartage3_tax_amount
     *
     * @return double
     */
    public function getCartage3TaxAmount()
    {
        return $this->container['cartage3_tax_amount'];
    }

    /**
     * Sets cartage3_tax_amount
     *
     * @param double $cartage3_tax_amount cartage3_tax_amount
     *
     * @return $this
     */
    public function setCartage3TaxAmount($cartage3_tax_amount)
    {
        $this->container['cartage3_tax_amount'] = $cartage3_tax_amount;

        return $this;
    }

    /**
     * Gets fx_decimal_places
     *
     * @return int
     */
    public function getFxDecimalPlaces()
    {
        return $this->container['fx_decimal_places'];
    }

    /**
     * Sets fx_decimal_places
     *
     * @param int $fx_decimal_places fx_decimal_places
     *
     * @return $this
     */
    public function setFxDecimalPlaces($fx_decimal_places)
    {
        $this->container['fx_decimal_places'] = $fx_decimal_places;

        return $this;
    }

    /**
     * Gets decimal_places
     *
     * @return int
     */
    public function getDecimalPlaces()
    {
        return $this->container['decimal_places'];
    }

    /**
     * Sets decimal_places
     *
     * @param int $decimal_places decimal_places
     *
     * @return $this
     */
    public function setDecimalPlaces($decimal_places)
    {
        $this->container['decimal_places'] = $decimal_places;

        return $this;
    }

    /**
     * Gets note
     *
     * @return string
     */
    public function getNote()
    {
        return $this->container['note'];
    }

    /**
     * Sets note
     *
     * @param string $note note
     *
     * @return $this
     */
    public function setNote($note)
    {
        $this->container['note'] = $note;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(
                ObjectSerializer::sanitizeForSerialization($this),
                JSON_PRETTY_PRINT
            );
        }

        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}



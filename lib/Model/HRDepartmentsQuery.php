<?php
/**
 * HRDepartmentsQuery
 *
 * PHP version 5
 *
 * @category Class
 * @package  Jiwa
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * JiwaAPI
 *
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: 1.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 * Swagger Codegen version: 2.4.28-SNAPSHOT
 */

/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Jiwa\Model;

use \ArrayAccess;
use \Jiwa\ObjectSerializer;

/**
 * HRDepartmentsQuery Class Doc Comment
 *
 * @category Class
 * @description HR_DepartmentsQuery
 * @package  Jiwa
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class HRDepartmentsQuery implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $swaggerModelName = 'HR_DepartmentsQuery';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerTypes = [
        'rec_id' => 'string',
        'rec_id_starts_with' => 'string',
        'rec_id_ends_with' => 'string',
        'rec_id_contains' => 'string',
        'rec_id_like' => 'string',
        'rec_id_between' => 'string[]',
        'rec_id_in' => 'string[]',
        'name' => 'string',
        'name_starts_with' => 'string',
        'name_ends_with' => 'string',
        'name_contains' => 'string',
        'name_like' => 'string',
        'name_between' => 'string[]',
        'name_in' => 'string[]',
        'manager_hr_staff_rec_id' => 'string',
        'manager_hr_staff_rec_id_starts_with' => 'string',
        'manager_hr_staff_rec_id_ends_with' => 'string',
        'manager_hr_staff_rec_id_contains' => 'string',
        'manager_hr_staff_rec_id_like' => 'string',
        'manager_hr_staff_rec_id_between' => 'string[]',
        'manager_hr_staff_rec_id_in' => 'string[]',
        'row_hash' => 'string',
        'is_enabled' => 'bool',
        'is_default' => 'bool',
        'skip' => 'int',
        'take' => 'int',
        'order_by' => 'string',
        'order_by_desc' => 'string',
        'include' => 'string',
        'fields' => 'string',
        'meta' => '\Jiwa\Model\DictionaryStringString_'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerFormats = [
        'rec_id' => null,
        'rec_id_starts_with' => null,
        'rec_id_ends_with' => null,
        'rec_id_contains' => null,
        'rec_id_like' => null,
        'rec_id_between' => null,
        'rec_id_in' => null,
        'name' => null,
        'name_starts_with' => null,
        'name_ends_with' => null,
        'name_contains' => null,
        'name_like' => null,
        'name_between' => null,
        'name_in' => null,
        'manager_hr_staff_rec_id' => null,
        'manager_hr_staff_rec_id_starts_with' => null,
        'manager_hr_staff_rec_id_ends_with' => null,
        'manager_hr_staff_rec_id_contains' => null,
        'manager_hr_staff_rec_id_like' => null,
        'manager_hr_staff_rec_id_between' => null,
        'manager_hr_staff_rec_id_in' => null,
        'row_hash' => 'byte',
        'is_enabled' => null,
        'is_default' => null,
        'skip' => 'int32',
        'take' => 'int32',
        'order_by' => null,
        'order_by_desc' => null,
        'include' => null,
        'fields' => null,
        'meta' => null
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerFormats()
    {
        return self::$swaggerFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'rec_id' => 'RecID',
        'rec_id_starts_with' => 'RecIDStartsWith',
        'rec_id_ends_with' => 'RecIDEndsWith',
        'rec_id_contains' => 'RecIDContains',
        'rec_id_like' => 'RecIDLike',
        'rec_id_between' => 'RecIDBetween',
        'rec_id_in' => 'RecIDIn',
        'name' => 'Name',
        'name_starts_with' => 'NameStartsWith',
        'name_ends_with' => 'NameEndsWith',
        'name_contains' => 'NameContains',
        'name_like' => 'NameLike',
        'name_between' => 'NameBetween',
        'name_in' => 'NameIn',
        'manager_hr_staff_rec_id' => 'Manager_HR_Staff_RecID',
        'manager_hr_staff_rec_id_starts_with' => 'Manager_HR_Staff_RecIDStartsWith',
        'manager_hr_staff_rec_id_ends_with' => 'Manager_HR_Staff_RecIDEndsWith',
        'manager_hr_staff_rec_id_contains' => 'Manager_HR_Staff_RecIDContains',
        'manager_hr_staff_rec_id_like' => 'Manager_HR_Staff_RecIDLike',
        'manager_hr_staff_rec_id_between' => 'Manager_HR_Staff_RecIDBetween',
        'manager_hr_staff_rec_id_in' => 'Manager_HR_Staff_RecIDIn',
        'row_hash' => 'RowHash',
        'is_enabled' => 'IsEnabled',
        'is_default' => 'IsDefault',
        'skip' => 'Skip',
        'take' => 'Take',
        'order_by' => 'OrderBy',
        'order_by_desc' => 'OrderByDesc',
        'include' => 'Include',
        'fields' => 'Fields',
        'meta' => 'Meta'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'rec_id' => 'setRecId',
        'rec_id_starts_with' => 'setRecIdStartsWith',
        'rec_id_ends_with' => 'setRecIdEndsWith',
        'rec_id_contains' => 'setRecIdContains',
        'rec_id_like' => 'setRecIdLike',
        'rec_id_between' => 'setRecIdBetween',
        'rec_id_in' => 'setRecIdIn',
        'name' => 'setName',
        'name_starts_with' => 'setNameStartsWith',
        'name_ends_with' => 'setNameEndsWith',
        'name_contains' => 'setNameContains',
        'name_like' => 'setNameLike',
        'name_between' => 'setNameBetween',
        'name_in' => 'setNameIn',
        'manager_hr_staff_rec_id' => 'setManagerHrStaffRecId',
        'manager_hr_staff_rec_id_starts_with' => 'setManagerHrStaffRecIdStartsWith',
        'manager_hr_staff_rec_id_ends_with' => 'setManagerHrStaffRecIdEndsWith',
        'manager_hr_staff_rec_id_contains' => 'setManagerHrStaffRecIdContains',
        'manager_hr_staff_rec_id_like' => 'setManagerHrStaffRecIdLike',
        'manager_hr_staff_rec_id_between' => 'setManagerHrStaffRecIdBetween',
        'manager_hr_staff_rec_id_in' => 'setManagerHrStaffRecIdIn',
        'row_hash' => 'setRowHash',
        'is_enabled' => 'setIsEnabled',
        'is_default' => 'setIsDefault',
        'skip' => 'setSkip',
        'take' => 'setTake',
        'order_by' => 'setOrderBy',
        'order_by_desc' => 'setOrderByDesc',
        'include' => 'setInclude',
        'fields' => 'setFields',
        'meta' => 'setMeta'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'rec_id' => 'getRecId',
        'rec_id_starts_with' => 'getRecIdStartsWith',
        'rec_id_ends_with' => 'getRecIdEndsWith',
        'rec_id_contains' => 'getRecIdContains',
        'rec_id_like' => 'getRecIdLike',
        'rec_id_between' => 'getRecIdBetween',
        'rec_id_in' => 'getRecIdIn',
        'name' => 'getName',
        'name_starts_with' => 'getNameStartsWith',
        'name_ends_with' => 'getNameEndsWith',
        'name_contains' => 'getNameContains',
        'name_like' => 'getNameLike',
        'name_between' => 'getNameBetween',
        'name_in' => 'getNameIn',
        'manager_hr_staff_rec_id' => 'getManagerHrStaffRecId',
        'manager_hr_staff_rec_id_starts_with' => 'getManagerHrStaffRecIdStartsWith',
        'manager_hr_staff_rec_id_ends_with' => 'getManagerHrStaffRecIdEndsWith',
        'manager_hr_staff_rec_id_contains' => 'getManagerHrStaffRecIdContains',
        'manager_hr_staff_rec_id_like' => 'getManagerHrStaffRecIdLike',
        'manager_hr_staff_rec_id_between' => 'getManagerHrStaffRecIdBetween',
        'manager_hr_staff_rec_id_in' => 'getManagerHrStaffRecIdIn',
        'row_hash' => 'getRowHash',
        'is_enabled' => 'getIsEnabled',
        'is_default' => 'getIsDefault',
        'skip' => 'getSkip',
        'take' => 'getTake',
        'order_by' => 'getOrderBy',
        'order_by_desc' => 'getOrderByDesc',
        'include' => 'getInclude',
        'fields' => 'getFields',
        'meta' => 'getMeta'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$swaggerModelName;
    }

    

    

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['rec_id'] = isset($data['rec_id']) ? $data['rec_id'] : null;
        $this->container['rec_id_starts_with'] = isset($data['rec_id_starts_with']) ? $data['rec_id_starts_with'] : null;
        $this->container['rec_id_ends_with'] = isset($data['rec_id_ends_with']) ? $data['rec_id_ends_with'] : null;
        $this->container['rec_id_contains'] = isset($data['rec_id_contains']) ? $data['rec_id_contains'] : null;
        $this->container['rec_id_like'] = isset($data['rec_id_like']) ? $data['rec_id_like'] : null;
        $this->container['rec_id_between'] = isset($data['rec_id_between']) ? $data['rec_id_between'] : null;
        $this->container['rec_id_in'] = isset($data['rec_id_in']) ? $data['rec_id_in'] : null;
        $this->container['name'] = isset($data['name']) ? $data['name'] : null;
        $this->container['name_starts_with'] = isset($data['name_starts_with']) ? $data['name_starts_with'] : null;
        $this->container['name_ends_with'] = isset($data['name_ends_with']) ? $data['name_ends_with'] : null;
        $this->container['name_contains'] = isset($data['name_contains']) ? $data['name_contains'] : null;
        $this->container['name_like'] = isset($data['name_like']) ? $data['name_like'] : null;
        $this->container['name_between'] = isset($data['name_between']) ? $data['name_between'] : null;
        $this->container['name_in'] = isset($data['name_in']) ? $data['name_in'] : null;
        $this->container['manager_hr_staff_rec_id'] = isset($data['manager_hr_staff_rec_id']) ? $data['manager_hr_staff_rec_id'] : null;
        $this->container['manager_hr_staff_rec_id_starts_with'] = isset($data['manager_hr_staff_rec_id_starts_with']) ? $data['manager_hr_staff_rec_id_starts_with'] : null;
        $this->container['manager_hr_staff_rec_id_ends_with'] = isset($data['manager_hr_staff_rec_id_ends_with']) ? $data['manager_hr_staff_rec_id_ends_with'] : null;
        $this->container['manager_hr_staff_rec_id_contains'] = isset($data['manager_hr_staff_rec_id_contains']) ? $data['manager_hr_staff_rec_id_contains'] : null;
        $this->container['manager_hr_staff_rec_id_like'] = isset($data['manager_hr_staff_rec_id_like']) ? $data['manager_hr_staff_rec_id_like'] : null;
        $this->container['manager_hr_staff_rec_id_between'] = isset($data['manager_hr_staff_rec_id_between']) ? $data['manager_hr_staff_rec_id_between'] : null;
        $this->container['manager_hr_staff_rec_id_in'] = isset($data['manager_hr_staff_rec_id_in']) ? $data['manager_hr_staff_rec_id_in'] : null;
        $this->container['row_hash'] = isset($data['row_hash']) ? $data['row_hash'] : null;
        $this->container['is_enabled'] = isset($data['is_enabled']) ? $data['is_enabled'] : null;
        $this->container['is_default'] = isset($data['is_default']) ? $data['is_default'] : null;
        $this->container['skip'] = isset($data['skip']) ? $data['skip'] : null;
        $this->container['take'] = isset($data['take']) ? $data['take'] : null;
        $this->container['order_by'] = isset($data['order_by']) ? $data['order_by'] : null;
        $this->container['order_by_desc'] = isset($data['order_by_desc']) ? $data['order_by_desc'] : null;
        $this->container['include'] = isset($data['include']) ? $data['include'] : null;
        $this->container['fields'] = isset($data['fields']) ? $data['fields'] : null;
        $this->container['meta'] = isset($data['meta']) ? $data['meta'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        if (!is_null($this->container['row_hash']) && !preg_match("/^(?:[A-Za-z0-9+\/]{4})*(?:[A-Za-z0-9+\/]{2}==|[A-Za-z0-9+\/]{3}=)?$/", $this->container['row_hash'])) {
            $invalidProperties[] = "invalid value for 'row_hash', must be conform to the pattern /^(?:[A-Za-z0-9+\/]{4})*(?:[A-Za-z0-9+\/]{2}==|[A-Za-z0-9+\/]{3}=)?$/.";
        }

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets rec_id
     *
     * @return string
     */
    public function getRecId()
    {
        return $this->container['rec_id'];
    }

    /**
     * Sets rec_id
     *
     * @param string $rec_id rec_id
     *
     * @return $this
     */
    public function setRecId($rec_id)
    {
        $this->container['rec_id'] = $rec_id;

        return $this;
    }

    /**
     * Gets rec_id_starts_with
     *
     * @return string
     */
    public function getRecIdStartsWith()
    {
        return $this->container['rec_id_starts_with'];
    }

    /**
     * Sets rec_id_starts_with
     *
     * @param string $rec_id_starts_with rec_id_starts_with
     *
     * @return $this
     */
    public function setRecIdStartsWith($rec_id_starts_with)
    {
        $this->container['rec_id_starts_with'] = $rec_id_starts_with;

        return $this;
    }

    /**
     * Gets rec_id_ends_with
     *
     * @return string
     */
    public function getRecIdEndsWith()
    {
        return $this->container['rec_id_ends_with'];
    }

    /**
     * Sets rec_id_ends_with
     *
     * @param string $rec_id_ends_with rec_id_ends_with
     *
     * @return $this
     */
    public function setRecIdEndsWith($rec_id_ends_with)
    {
        $this->container['rec_id_ends_with'] = $rec_id_ends_with;

        return $this;
    }

    /**
     * Gets rec_id_contains
     *
     * @return string
     */
    public function getRecIdContains()
    {
        return $this->container['rec_id_contains'];
    }

    /**
     * Sets rec_id_contains
     *
     * @param string $rec_id_contains rec_id_contains
     *
     * @return $this
     */
    public function setRecIdContains($rec_id_contains)
    {
        $this->container['rec_id_contains'] = $rec_id_contains;

        return $this;
    }

    /**
     * Gets rec_id_like
     *
     * @return string
     */
    public function getRecIdLike()
    {
        return $this->container['rec_id_like'];
    }

    /**
     * Sets rec_id_like
     *
     * @param string $rec_id_like rec_id_like
     *
     * @return $this
     */
    public function setRecIdLike($rec_id_like)
    {
        $this->container['rec_id_like'] = $rec_id_like;

        return $this;
    }

    /**
     * Gets rec_id_between
     *
     * @return string[]
     */
    public function getRecIdBetween()
    {
        return $this->container['rec_id_between'];
    }

    /**
     * Sets rec_id_between
     *
     * @param string[] $rec_id_between rec_id_between
     *
     * @return $this
     */
    public function setRecIdBetween($rec_id_between)
    {
        $this->container['rec_id_between'] = $rec_id_between;

        return $this;
    }

    /**
     * Gets rec_id_in
     *
     * @return string[]
     */
    public function getRecIdIn()
    {
        return $this->container['rec_id_in'];
    }

    /**
     * Sets rec_id_in
     *
     * @param string[] $rec_id_in rec_id_in
     *
     * @return $this
     */
    public function setRecIdIn($rec_id_in)
    {
        $this->container['rec_id_in'] = $rec_id_in;

        return $this;
    }

    /**
     * Gets name
     *
     * @return string
     */
    public function getName()
    {
        return $this->container['name'];
    }

    /**
     * Sets name
     *
     * @param string $name name
     *
     * @return $this
     */
    public function setName($name)
    {
        $this->container['name'] = $name;

        return $this;
    }

    /**
     * Gets name_starts_with
     *
     * @return string
     */
    public function getNameStartsWith()
    {
        return $this->container['name_starts_with'];
    }

    /**
     * Sets name_starts_with
     *
     * @param string $name_starts_with name_starts_with
     *
     * @return $this
     */
    public function setNameStartsWith($name_starts_with)
    {
        $this->container['name_starts_with'] = $name_starts_with;

        return $this;
    }

    /**
     * Gets name_ends_with
     *
     * @return string
     */
    public function getNameEndsWith()
    {
        return $this->container['name_ends_with'];
    }

    /**
     * Sets name_ends_with
     *
     * @param string $name_ends_with name_ends_with
     *
     * @return $this
     */
    public function setNameEndsWith($name_ends_with)
    {
        $this->container['name_ends_with'] = $name_ends_with;

        return $this;
    }

    /**
     * Gets name_contains
     *
     * @return string
     */
    public function getNameContains()
    {
        return $this->container['name_contains'];
    }

    /**
     * Sets name_contains
     *
     * @param string $name_contains name_contains
     *
     * @return $this
     */
    public function setNameContains($name_contains)
    {
        $this->container['name_contains'] = $name_contains;

        return $this;
    }

    /**
     * Gets name_like
     *
     * @return string
     */
    public function getNameLike()
    {
        return $this->container['name_like'];
    }

    /**
     * Sets name_like
     *
     * @param string $name_like name_like
     *
     * @return $this
     */
    public function setNameLike($name_like)
    {
        $this->container['name_like'] = $name_like;

        return $this;
    }

    /**
     * Gets name_between
     *
     * @return string[]
     */
    public function getNameBetween()
    {
        return $this->container['name_between'];
    }

    /**
     * Sets name_between
     *
     * @param string[] $name_between name_between
     *
     * @return $this
     */
    public function setNameBetween($name_between)
    {
        $this->container['name_between'] = $name_between;

        return $this;
    }

    /**
     * Gets name_in
     *
     * @return string[]
     */
    public function getNameIn()
    {
        return $this->container['name_in'];
    }

    /**
     * Sets name_in
     *
     * @param string[] $name_in name_in
     *
     * @return $this
     */
    public function setNameIn($name_in)
    {
        $this->container['name_in'] = $name_in;

        return $this;
    }

    /**
     * Gets manager_hr_staff_rec_id
     *
     * @return string
     */
    public function getManagerHrStaffRecId()
    {
        return $this->container['manager_hr_staff_rec_id'];
    }

    /**
     * Sets manager_hr_staff_rec_id
     *
     * @param string $manager_hr_staff_rec_id manager_hr_staff_rec_id
     *
     * @return $this
     */
    public function setManagerHrStaffRecId($manager_hr_staff_rec_id)
    {
        $this->container['manager_hr_staff_rec_id'] = $manager_hr_staff_rec_id;

        return $this;
    }

    /**
     * Gets manager_hr_staff_rec_id_starts_with
     *
     * @return string
     */
    public function getManagerHrStaffRecIdStartsWith()
    {
        return $this->container['manager_hr_staff_rec_id_starts_with'];
    }

    /**
     * Sets manager_hr_staff_rec_id_starts_with
     *
     * @param string $manager_hr_staff_rec_id_starts_with manager_hr_staff_rec_id_starts_with
     *
     * @return $this
     */
    public function setManagerHrStaffRecIdStartsWith($manager_hr_staff_rec_id_starts_with)
    {
        $this->container['manager_hr_staff_rec_id_starts_with'] = $manager_hr_staff_rec_id_starts_with;

        return $this;
    }

    /**
     * Gets manager_hr_staff_rec_id_ends_with
     *
     * @return string
     */
    public function getManagerHrStaffRecIdEndsWith()
    {
        return $this->container['manager_hr_staff_rec_id_ends_with'];
    }

    /**
     * Sets manager_hr_staff_rec_id_ends_with
     *
     * @param string $manager_hr_staff_rec_id_ends_with manager_hr_staff_rec_id_ends_with
     *
     * @return $this
     */
    public function setManagerHrStaffRecIdEndsWith($manager_hr_staff_rec_id_ends_with)
    {
        $this->container['manager_hr_staff_rec_id_ends_with'] = $manager_hr_staff_rec_id_ends_with;

        return $this;
    }

    /**
     * Gets manager_hr_staff_rec_id_contains
     *
     * @return string
     */
    public function getManagerHrStaffRecIdContains()
    {
        return $this->container['manager_hr_staff_rec_id_contains'];
    }

    /**
     * Sets manager_hr_staff_rec_id_contains
     *
     * @param string $manager_hr_staff_rec_id_contains manager_hr_staff_rec_id_contains
     *
     * @return $this
     */
    public function setManagerHrStaffRecIdContains($manager_hr_staff_rec_id_contains)
    {
        $this->container['manager_hr_staff_rec_id_contains'] = $manager_hr_staff_rec_id_contains;

        return $this;
    }

    /**
     * Gets manager_hr_staff_rec_id_like
     *
     * @return string
     */
    public function getManagerHrStaffRecIdLike()
    {
        return $this->container['manager_hr_staff_rec_id_like'];
    }

    /**
     * Sets manager_hr_staff_rec_id_like
     *
     * @param string $manager_hr_staff_rec_id_like manager_hr_staff_rec_id_like
     *
     * @return $this
     */
    public function setManagerHrStaffRecIdLike($manager_hr_staff_rec_id_like)
    {
        $this->container['manager_hr_staff_rec_id_like'] = $manager_hr_staff_rec_id_like;

        return $this;
    }

    /**
     * Gets manager_hr_staff_rec_id_between
     *
     * @return string[]
     */
    public function getManagerHrStaffRecIdBetween()
    {
        return $this->container['manager_hr_staff_rec_id_between'];
    }

    /**
     * Sets manager_hr_staff_rec_id_between
     *
     * @param string[] $manager_hr_staff_rec_id_between manager_hr_staff_rec_id_between
     *
     * @return $this
     */
    public function setManagerHrStaffRecIdBetween($manager_hr_staff_rec_id_between)
    {
        $this->container['manager_hr_staff_rec_id_between'] = $manager_hr_staff_rec_id_between;

        return $this;
    }

    /**
     * Gets manager_hr_staff_rec_id_in
     *
     * @return string[]
     */
    public function getManagerHrStaffRecIdIn()
    {
        return $this->container['manager_hr_staff_rec_id_in'];
    }

    /**
     * Sets manager_hr_staff_rec_id_in
     *
     * @param string[] $manager_hr_staff_rec_id_in manager_hr_staff_rec_id_in
     *
     * @return $this
     */
    public function setManagerHrStaffRecIdIn($manager_hr_staff_rec_id_in)
    {
        $this->container['manager_hr_staff_rec_id_in'] = $manager_hr_staff_rec_id_in;

        return $this;
    }

    /**
     * Gets row_hash
     *
     * @return string
     */
    public function getRowHash()
    {
        return $this->container['row_hash'];
    }

    /**
     * Sets row_hash
     *
     * @param string $row_hash row_hash
     *
     * @return $this
     */
    public function setRowHash($row_hash)
    {

        if (!is_null($row_hash) && (!preg_match("/^(?:[A-Za-z0-9+\/]{4})*(?:[A-Za-z0-9+\/]{2}==|[A-Za-z0-9+\/]{3}=)?$/", $row_hash))) {
            throw new \InvalidArgumentException("invalid value for $row_hash when calling HRDepartmentsQuery., must conform to the pattern /^(?:[A-Za-z0-9+\/]{4})*(?:[A-Za-z0-9+\/]{2}==|[A-Za-z0-9+\/]{3}=)?$/.");
        }

        $this->container['row_hash'] = $row_hash;

        return $this;
    }

    /**
     * Gets is_enabled
     *
     * @return bool
     */
    public function getIsEnabled()
    {
        return $this->container['is_enabled'];
    }

    /**
     * Sets is_enabled
     *
     * @param bool $is_enabled is_enabled
     *
     * @return $this
     */
    public function setIsEnabled($is_enabled)
    {
        $this->container['is_enabled'] = $is_enabled;

        return $this;
    }

    /**
     * Gets is_default
     *
     * @return bool
     */
    public function getIsDefault()
    {
        return $this->container['is_default'];
    }

    /**
     * Sets is_default
     *
     * @param bool $is_default is_default
     *
     * @return $this
     */
    public function setIsDefault($is_default)
    {
        $this->container['is_default'] = $is_default;

        return $this;
    }

    /**
     * Gets skip
     *
     * @return int
     */
    public function getSkip()
    {
        return $this->container['skip'];
    }

    /**
     * Sets skip
     *
     * @param int $skip skip
     *
     * @return $this
     */
    public function setSkip($skip)
    {
        $this->container['skip'] = $skip;

        return $this;
    }

    /**
     * Gets take
     *
     * @return int
     */
    public function getTake()
    {
        return $this->container['take'];
    }

    /**
     * Sets take
     *
     * @param int $take take
     *
     * @return $this
     */
    public function setTake($take)
    {
        $this->container['take'] = $take;

        return $this;
    }

    /**
     * Gets order_by
     *
     * @return string
     */
    public function getOrderBy()
    {
        return $this->container['order_by'];
    }

    /**
     * Sets order_by
     *
     * @param string $order_by order_by
     *
     * @return $this
     */
    public function setOrderBy($order_by)
    {
        $this->container['order_by'] = $order_by;

        return $this;
    }

    /**
     * Gets order_by_desc
     *
     * @return string
     */
    public function getOrderByDesc()
    {
        return $this->container['order_by_desc'];
    }

    /**
     * Sets order_by_desc
     *
     * @param string $order_by_desc order_by_desc
     *
     * @return $this
     */
    public function setOrderByDesc($order_by_desc)
    {
        $this->container['order_by_desc'] = $order_by_desc;

        return $this;
    }

    /**
     * Gets include
     *
     * @return string
     */
    public function getInclude()
    {
        return $this->container['include'];
    }

    /**
     * Sets include
     *
     * @param string $include include
     *
     * @return $this
     */
    public function setInclude($include)
    {
        $this->container['include'] = $include;

        return $this;
    }

    /**
     * Gets fields
     *
     * @return string
     */
    public function getFields()
    {
        return $this->container['fields'];
    }

    /**
     * Sets fields
     *
     * @param string $fields fields
     *
     * @return $this
     */
    public function setFields($fields)
    {
        $this->container['fields'] = $fields;

        return $this;
    }

    /**
     * Gets meta
     *
     * @return \Jiwa\Model\DictionaryStringString_
     */
    public function getMeta()
    {
        return $this->container['meta'];
    }

    /**
     * Sets meta
     *
     * @param \Jiwa\Model\DictionaryStringString_ $meta meta
     *
     * @return $this
     */
    public function setMeta($meta)
    {
        $this->container['meta'] = $meta;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(
                ObjectSerializer::sanitizeForSerialization($this),
                JSON_PRETTY_PRINT
            );
        }

        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


